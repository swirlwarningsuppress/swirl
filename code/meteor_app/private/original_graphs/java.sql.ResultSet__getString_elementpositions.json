{"0":"{\"expressionStart\":{\"ResultSet.getString()\":259,\"Env.createString()\":242,\"ResultSet.getTimestamp()\":136,\"\\u003creturn\\u003e\":235,\"\\u003cnullcheck\\u003e\":170},\"expressionEnd\":{\"ResultSet.getString()\":279,\"Env.createString()\":280,\"ResultSet.getTimestamp()\":159,\"\\u003creturn\\u003e\":281,\"\\u003cnullcheck\\u003e\":187},\"rawCode\":\"@Override\\n  protected Value getColumnTimestamp(Env env, ResultSet rs, int column)\\n    throws SQLException\\n  {\\n    Timestamp timestamp \\u003d rs.getTimestamp(column);\\n\\n    if (timestamp \\u003d\\u003d null)\\n      return NullValue.NULL;\\n    else {\\n      return env.createString(rs.getString(column));\\n    }\\n  }\"}","1":"{\"expressionStart\":{\"ResultSet.getDate()\":121,\"ResultSet.getString()\":236,\"Env.createString()\":219,\"\\u003creturn\\u003e\":212,\"\\u003cnullcheck\\u003e\":154},\"expressionEnd\":{\"ResultSet.getDate()\":139,\"ResultSet.getString()\":256,\"Env.createString()\":257,\"\\u003creturn\\u003e\":258,\"\\u003cnullcheck\\u003e\":166},\"rawCode\":\"@Override\\n  protected Value getColumnDate(Env env, ResultSet rs, int column)\\n    throws SQLException\\n  {\\n    Date date \\u003d rs.getDate(column);\\n    \\n    if (date \\u003d\\u003d null)\\n      return NullValue.NULL;\\n    else\\n      return env.createString(rs.getString(column));\\n  }\"}","2":"{\"expressionStart\":{\"ResultSet.getString()\":236,\"ResultSet.getTime()\":121,\"Env.createString()\":219,\"\\u003creturn\\u003e\":174,\"\\u003cnullcheck\\u003e\":154},\"expressionEnd\":{\"ResultSet.getString()\":256,\"ResultSet.getTime()\":139,\"Env.createString()\":257,\"\\u003creturn\\u003e\":196,\"\\u003cnullcheck\\u003e\":166},\"rawCode\":\"@Override\\n  protected Value getColumnTime(Env env, ResultSet rs, int column)\\n    throws SQLException\\n  {\\n    Time time \\u003d rs.getTime(column);\\n    \\n    if (time \\u003d\\u003d null)\\n      return NullValue.NULL;\\n    else\\n      return env.createString(rs.getString(column));\\n  }\"}","3":"{\"expressionStart\":{\"String:\\u0027\":191,\"String:\":82,\"ResultSet.getString()\":305,\"String\":652,\"SQLException.toString()\":395,\"\\u003creturn\\u003e\":800,\"ResultSet.next()\":273,\"String:Error executing the Query: \":433,\"DatabaseController.getResultSet()\":214,\"ResultSet.close()\":529,\"String:)\":730,\"UNKNOWN.println()\":376,\"\\u003cnullcheck\\u003e\":509},\"expressionEnd\":{\"String:\\u0027\":194,\"String:\":84,\"ResultSet.getString()\":332,\"String\":705,\"SQLException.toString()\":407,\"\\u003creturn\\u003e\":819,\"ResultSet.next()\":282,\"String:Error executing the Query: \":462,\"DatabaseController.getResultSet()\":247,\"ResultSet.close()\":539,\"String:)\":733,\"UNKNOWN.println()\":408,\"\\u003cnullcheck\\u003e\":519},\"rawCode\":\"public String getDateChangeForContentId(int content_id) {\\r\\n\\t\\tString date_change \\u003d \\\"\\\";\\r\\n\\r\\n\\t\\tquery \\u003d \\\"Select Date_Change From mobilewikia.wiki_content Where Content_id \\u003d \\u0027\\\"\\r\\n\\t\\t\\t\\t+ content_id + \\\"\\u0027\\\";\\r\\n\\t\\ttry {\\r\\n\\t\\t\\trs \\u003d db_controller.getResultSet(query);\\r\\n\\r\\n\\t\\t\\tif (rs !\\u003d null \\u0026\\u0026 rs.next()) {\\r\\n\\t\\t\\t\\tdate_change \\u003d rs.getString(\\\"Date_Change\\\");\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t} catch (SQLException e) {\\r\\n\\t\\t\\tSystem.err.println(e.toString());\\r\\n\\t\\t\\tSystem.out.println(\\\"Error executing the Query: \\\" + query);\\r\\n\\r\\n\\t\\t} finally {\\r\\n\\t\\t\\ttry {\\r\\n\\t\\t\\t\\tif (rs !\\u003d null) {\\r\\n\\t\\t\\t\\t\\trs.close();\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t} catch (SQLException e) {\\r\\n\\t\\t\\t\\tSystem.err.println(e.toString());\\r\\n\\t\\t\\t\\tSystem.out\\r\\n\\t\\t\\t\\t\\t\\t.println(\\\"Error closing ResultSet: getDateChangeForContentId(\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t+ content_id + \\\")\\\");\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t//db_controller.closeConnectionStatement();\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn date_change;\\r\\n\\t}\"}","4":"{\"expressionStart\":{\"String:\":67,\"String:\\u0027\":168,\"ResultSet.getString()\":274,\"String\":84,\"SQLException.toString()\":566,\"\\u003creturn\\u003e\":754,\"ResultSet.next()\":250,\"DatabaseController.getResultSet()\":191,\"String:Error executing the Query: \":394,\"ResultSet.close()\":490,\"String:)\":684,\"UNKNOWN.println()\":586,\"\\u003cnullcheck\\u003e\":236},\"expressionEnd\":{\"String:\":69,\"String:\\u0027\":171,\"ResultSet.getString()\":293,\"String\":147,\"SQLException.toString()\":578,\"\\u003creturn\\u003e\":765,\"ResultSet.next()\":259,\"DatabaseController.getResultSet()\":224,\"String:Error executing the Query: \":423,\"ResultSet.close()\":500,\"String:)\":687,\"UNKNOWN.println()\":688,\"\\u003cnullcheck\\u003e\":246},\"rawCode\":\"public String getTagForContentId(int content_id) {\\r\\n\\t\\tString tag \\u003d \\\"\\\";\\r\\n\\r\\n\\t\\tquery \\u003d \\\"Select Tag From mobilewikia.wiki_content Where Content_Id \\u003d \\u0027\\\"\\r\\n\\t\\t\\t\\t+ content_id + \\\"\\u0027\\\";\\r\\n\\t\\ttry {\\r\\n\\t\\t\\trs \\u003d db_controller.getResultSet(query);\\r\\n\\r\\n\\t\\t\\tif (rs !\\u003d null \\u0026\\u0026 rs.next()) {\\r\\n\\t\\t\\t\\ttag \\u003d rs.getString(\\\"Tag\\\");\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t} catch (SQLException e) {\\r\\n\\t\\t\\tSystem.err.println(e.toString());\\r\\n\\t\\t\\tSystem.out.println(\\\"Error executing the Query: \\\" + query);\\r\\n\\r\\n\\t\\t} finally {\\r\\n\\t\\t\\ttry {\\r\\n\\t\\t\\t\\tif (rs !\\u003d null) {\\r\\n\\t\\t\\t\\t\\trs.close();\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t} catch (SQLException e) {\\r\\n\\t\\t\\t\\tSystem.err.println(e.toString());\\r\\n\\t\\t\\t\\tSystem.out\\r\\n\\t\\t\\t\\t\\t\\t.println(\\\"Error closing ResultSet: getTagForContentId(\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t+ content_id + \\\")\\\");\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t//db_controller.closeConnectionStatement();\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn tag;\\r\\n\\t}\"}","5":"{\"expressionStart\":{\"String:\":71,\"String:\\u0027\":169,\"ResultSet.getString()\":277,\"String\":621,\"SQLException.toString()\":364,\"\\u003creturn\\u003e\":764,\"ResultSet.next()\":251,\"String:Error executing the Query: \":402,\"DatabaseController.getResultSet()\":192,\"ResultSet.close()\":498,\"String:)\":694,\"\\u003cnullcheck\\u003e\":478,\"UNKNOWN.println()\":555},\"expressionEnd\":{\"String:\":73,\"String:\\u0027\":172,\"ResultSet.getString()\":298,\"String\":669,\"SQLException.toString()\":376,\"\\u003creturn\\u003e\":777,\"ResultSet.next()\":260,\"String:Error executing the Query: \":431,\"DatabaseController.getResultSet()\":225,\"ResultSet.close()\":508,\"String:)\":697,\"\\u003cnullcheck\\u003e\":488,\"UNKNOWN.println()\":587},\"rawCode\":\"public String getTitleForArticleId(int article_id) {\\r\\n\\t\\tString title \\u003d \\\"\\\";\\r\\n\\r\\n\\t\\tquery \\u003d \\\"Select Title From mobilewikia.wiki_article Where Article_id \\u003d \\u0027\\\" + article_id + \\\"\\u0027\\\";\\r\\n\\t\\ttry {\\r\\n\\t\\t\\trs \\u003d db_controller.getResultSet(query);\\r\\n\\r\\n\\t\\t\\tif (rs !\\u003d null \\u0026\\u0026 rs.next()) {\\r\\n\\t\\t\\t\\ttitle \\u003d rs.getString(\\\"Title\\\");\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t\\r\\n\\t\\t} catch (SQLException e) {\\r\\n\\t\\t\\tSystem.err.println(e.toString());\\r\\n\\t\\t\\tSystem.out.println(\\\"Error executing the Query: \\\" + query);\\r\\n\\r\\n\\t\\t} finally {\\r\\n\\t\\t\\ttry {\\r\\n\\t\\t\\t\\tif (rs !\\u003d null) {\\r\\n\\t\\t\\t\\t\\trs.close();\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t} catch (SQLException e) {\\r\\n\\t\\t\\t\\tSystem.err.println(e.toString());\\r\\n\\t\\t\\t\\tSystem.out\\r\\n\\t\\t\\t\\t\\t\\t.println(\\\"Error closing ResultSet: getTitleForArticleId(\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t+ article_id + \\\")\\\");\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t//db_controller.closeConnectionStatement();\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn title;\\r\\n\\t}\"}","6":"{\"expressionStart\":{\"String:\\u0027\":180,\"String:\":75,\"ResultSet.getString()\":290,\"String\":92,\"SQLException.toString()\":378,\"\\u003creturn\\u003e\":780,\"ResultSet.next()\":262,\"DatabaseController.getResultSet()\":203,\"String:Error executing the Query: \":416,\"ResultSet.close()\":512,\"String:)\":710,\"\\u003cnullcheck\\u003e\":492,\"UNKNOWN.println()\":608},\"expressionEnd\":{\"String:\\u0027\":183,\"String:\":77,\"ResultSet.getString()\":313,\"String\":159,\"SQLException.toString()\":390,\"\\u003creturn\\u003e\":795,\"ResultSet.next()\":271,\"DatabaseController.getResultSet()\":236,\"String:Error executing the Query: \":445,\"ResultSet.close()\":522,\"String:)\":713,\"\\u003cnullcheck\\u003e\":502,\"UNKNOWN.println()\":714},\"rawCode\":\"public String getContentForContentId(int content_id) {\\r\\n\\t\\tString content \\u003d \\\"\\\";\\r\\n\\r\\n\\t\\tquery \\u003d \\\"Select Content From mobilewikia.wiki_content Where Content_id \\u003d \\u0027\\\"\\r\\n\\t\\t\\t\\t+ content_id + \\\"\\u0027\\\";\\r\\n\\t\\ttry {\\r\\n\\t\\t\\trs \\u003d db_controller.getResultSet(query);\\r\\n\\r\\n\\t\\t\\tif (rs !\\u003d null \\u0026\\u0026 rs.next()) {\\r\\n\\t\\t\\t\\tcontent \\u003d rs.getString(\\\"Content\\\");\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t} catch (SQLException e) {\\r\\n\\t\\t\\tSystem.err.println(e.toString());\\r\\n\\t\\t\\tSystem.out.println(\\\"Error executing the Query: \\\" + query);\\r\\n\\r\\n\\t\\t} finally {\\r\\n\\t\\t\\ttry {\\r\\n\\t\\t\\t\\tif (rs !\\u003d null) {\\r\\n\\t\\t\\t\\t\\trs.close();\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t} catch (SQLException e) {\\r\\n\\t\\t\\t\\tSystem.err.println(e.toString());\\r\\n\\t\\t\\t\\tSystem.out\\r\\n\\t\\t\\t\\t\\t\\t.println(\\\"Error closing ResultSet: getContentForContentId(\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t+ content_id + \\\")\\\");\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t//db_controller.closeConnectionStatement();\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn content;\\r\\n\\t}\"}","7":"{\"expressionStart\":{\"StringBuilder.toString()\":1071,\"ResultSet.getString()\":491,\"char:\\u0027\\\\n\\u0027\":1035,\"StringBuilder.\\u003cinit\\u003e\":924,\"String\":504,\"StringBuilder.append()\":1025,\"SQLException.toString()\":853,\"\\u003creturn\\u003e\":635,\"ResultSet.next()\":450,\"List.add()\":480,\"ArrayList.\\u003cinit\\u003e\":70,\"DatabaseController.getResultSet()\":335,\"ResultSet.close()\":744,\"null:null\":642,\"UNKNOWN.println()\":834,\"\\u003cnullcheck\\u003e\":386},\"expressionEnd\":{\"StringBuilder.toString()\":1084,\"ResultSet.getString()\":514,\"char:\\u0027\\\\n\\u0027\":1039,\"StringBuilder.\\u003cinit\\u003e\":943,\"String\":513,\"StringBuilder.append()\":1040,\"SQLException.toString()\":865,\"\\u003creturn\\u003e\":647,\"ResultSet.next()\":459,\"List.add()\":515,\"ArrayList.\\u003cinit\\u003e\":87,\"DatabaseController.getResultSet()\":368,\"ResultSet.close()\":754,\"null:null\":646,\"UNKNOWN.println()\":866,\"\\u003cnullcheck\\u003e\":396},\"rawCode\":\"public String getAllTitlesWithTags() {\\r\\n        List\\u003cString\\u003e result \\u003d new ArrayList\\u003c\\u003e();\\r\\n\\r\\n        query \\u003d \\\"SELECT a.article_id, a.title, c.tag, c.date_change \\\" +\\r\\n                \\\"FROM mobilewikia.wiki_article a, mobilewikia.wiki_content c \\\" +\\r\\n                \\\"WHERE c.article_id \\u003d a.article_id\\\";\\r\\n\\r\\n        try {\\r\\n            rs \\u003d db_controller.getResultSet(query);\\r\\n            if(null \\u003d\\u003d rs)\\r\\n                return null;\\r\\n\\r\\n            while (rs.next()) {\\r\\n                result.add(rs.getString(\\\"a.title\\\"));\\r\\n                result.add(rs.getString(\\\"c.tag\\\"));\\r\\n            }\\r\\n\\r\\n        } catch (SQLException e) {\\r\\n            return null;\\r\\n        } finally {\\r\\n            try {\\r\\n                if (rs !\\u003d null) {\\r\\n                    rs.close();\\r\\n                }\\r\\n\\r\\n            } catch (SQLException e) {\\r\\n                System.err.println(e.toString());\\r\\n            }\\r\\n        }\\r\\n\\r\\n        StringBuilder sb \\u003d new StringBuilder();\\r\\n        for(String item : result) {\\r\\n            sb.append(item);\\r\\n            sb.append(\\u0027\\\\n\\u0027);\\r\\n        }\\r\\n\\r\\n        return sb.toString();\\r\\n    }\"}","8":"{\"expressionStart\":{\"String:title\":614,\"String:\\u0027\":381,\"ResultSet.getString()\":723,\"String\":351,\"SQLException.toString()\":1016,\"HashMap.put()\":652,\"\\u003creturn\\u003e\":1161,\"ResultSet.next()\":467,\"DatabaseController.getResultSet()\":408,\"String:Error executing the Query: \":844,\"HashMap.\\u003cinit\\u003e\":110,\"String:tag\":716,\"ResultSet.close()\":940,\"String:)\":1137,\"\\u003cnullcheck\\u003e\":920,\"UNKNOWN.println()\":825},\"expressionEnd\":{\"String:title\":621,\"String:\\u0027\":384,\"ResultSet.getString()\":742,\"String\":370,\"SQLException.toString()\":1028,\"HashMap.put()\":698,\"\\u003creturn\\u003e\":1175,\"ResultSet.next()\":476,\"DatabaseController.getResultSet()\":441,\"String:Error executing the Query: \":873,\"HashMap.\\u003cinit\\u003e\":139,\"String:tag\":721,\"ResultSet.close()\":950,\"String:)\":1140,\"\\u003cnullcheck\\u003e\":930,\"UNKNOWN.println()\":882},\"rawCode\":\"public HashMap\\u003cString, String\\u003e getContentTitleTagForTitle(String title) {\\r\\n\\t\\tHashMap\\u003cString, String\\u003e result \\u003d new HashMap\\u003cString, String\\u003e();\\r\\n\\t\\t\\r\\n\\t\\tquery \\u003d \\\"SELECT a.article_id, c.content_id, a.title, c.content, c.tag \\\" +\\r\\n\\t\\t\\t\\t\\\"FROM mobilewikia.wiki_article a \\\" +\\r\\n\\t\\t\\t\\t\\\"LEFT JOIN mobilewikia.wiki_content c ON ( a.article_id \\u003d c.article_id ) \\\" +\\r\\n\\t\\t\\t\\t\\\"WHERE c.title \\u003d \\u0027\\\" + title + \\\"\\u0027\\\";\\r\\n\\t\\t\\r\\n\\t\\ttry {\\r\\n\\t\\t\\trs \\u003d db_controller.getResultSet(query);\\r\\n\\r\\n\\t\\t\\tif (rs !\\u003d null \\u0026\\u0026 rs.next()) {\\r\\n\\t\\t\\t\\tresult.put(\\\"article_id\\\", rs.getString(\\\"article_id\\\"));\\r\\n\\t\\t\\t\\tresult.put(\\\"content_id\\\", rs.getString(\\\"content_id\\\"));\\r\\n\\t\\t\\t\\tresult.put(\\\"title\\\", rs.getString(\\\"title\\\"));\\r\\n\\t\\t\\t\\tresult.put(\\\"content\\\", rs.getString(\\\"content\\\"));\\r\\n\\t\\t\\t\\tresult.put(\\\"tag\\\", rs.getString(\\\"tag\\\"));\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t} catch (SQLException e) {\\r\\n\\t\\t\\tSystem.err.println(e.toString());\\r\\n\\t\\t\\tSystem.out.println(\\\"Error executing the Query: \\\" + query);\\r\\n\\r\\n\\t\\t} finally {\\r\\n\\t\\t\\ttry {\\r\\n\\t\\t\\t\\tif (rs !\\u003d null) {\\r\\n\\t\\t\\t\\t\\trs.close();\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t} catch (SQLException e) {\\r\\n\\t\\t\\t\\tSystem.err.println(e.toString());\\r\\n\\t\\t\\t\\tSystem.out\\r\\n\\t\\t\\t\\t\\t\\t.println(\\\"Error closing ResultSet: getContentTitleTagForTitle(\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t+ title + \\\")\\\");\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\t\\r\\n\\t\\treturn result;\\r\\n\\t}\"}","9":"{\"expressionStart\":{\"String:title\":630,\"String:\\u0027\":397,\"ResultSet.getString()\":585,\"String\":1079,\"SQLException.toString()\":822,\"\\u003creturn\\u003e\":1186,\"HashMap.put()\":560,\"ResultSet.next()\":483,\"DatabaseController.getResultSet()\":424,\"String:Error executing the Query: \":860,\"HashMap.\\u003cinit\\u003e\":116,\"String:tag\":732,\"ResultSet.close()\":956,\"String:)\":1162,\"\\u003cnullcheck\\u003e\":936,\"UNKNOWN.println()\":803},\"expressionEnd\":{\"String:title\":637,\"String:\\u0027\":400,\"ResultSet.getString()\":611,\"String\":1137,\"SQLException.toString()\":834,\"\\u003creturn\\u003e\":1200,\"HashMap.put()\":612,\"ResultSet.next()\":492,\"DatabaseController.getResultSet()\":457,\"String:Error executing the Query: \":889,\"HashMap.\\u003cinit\\u003e\":145,\"String:tag\":737,\"ResultSet.close()\":966,\"String:)\":1165,\"\\u003cnullcheck\\u003e\":946,\"UNKNOWN.println()\":835},\"rawCode\":\"public HashMap\\u003cString, String\\u003e getContentTitleTagForArticleId(int article_id) {\\r\\n\\t\\tHashMap\\u003cString, String\\u003e result \\u003d new HashMap\\u003cString, String\\u003e();\\r\\n\\t\\t\\r\\n\\t\\tquery \\u003d \\\"SELECT a.article_id, c.content_id, a.title, c.content, c.tag \\\" +\\r\\n\\t\\t\\t\\t\\\"FROM mobilewikia.wiki_article a \\\" +\\r\\n\\t\\t\\t\\t\\\"LEFT JOIN mobilewikia.wiki_content c ON ( a.article_id \\u003d c.article_id ) \\\" +\\r\\n\\t\\t\\t\\t\\\"WHERE a.article_id \\u003d \\u0027\\\" + article_id + \\\"\\u0027\\\";\\r\\n\\t\\t\\r\\n\\t\\ttry {\\r\\n\\t\\t\\trs \\u003d db_controller.getResultSet(query);\\r\\n\\r\\n\\t\\t\\tif (rs !\\u003d null \\u0026\\u0026 rs.next()) {\\r\\n\\t\\t\\t\\tresult.put(\\\"article_id\\\", rs.getString(\\\"article_id\\\"));\\r\\n\\t\\t\\t\\tresult.put(\\\"content_id\\\", rs.getString(\\\"content_id\\\"));\\r\\n\\t\\t\\t\\tresult.put(\\\"title\\\", rs.getString(\\\"title\\\"));\\r\\n\\t\\t\\t\\tresult.put(\\\"content\\\", rs.getString(\\\"content\\\"));\\r\\n\\t\\t\\t\\tresult.put(\\\"tag\\\", rs.getString(\\\"tag\\\"));\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t} catch (SQLException e) {\\r\\n\\t\\t\\tSystem.err.println(e.toString());\\r\\n\\t\\t\\tSystem.out.println(\\\"Error executing the Query: \\\" + query);\\r\\n\\r\\n\\t\\t} finally {\\r\\n\\t\\t\\ttry {\\r\\n\\t\\t\\t\\tif (rs !\\u003d null) {\\r\\n\\t\\t\\t\\t\\trs.close();\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t} catch (SQLException e) {\\r\\n\\t\\t\\t\\tSystem.err.println(e.toString());\\r\\n\\t\\t\\t\\tSystem.out\\r\\n\\t\\t\\t\\t\\t\\t.println(\\\"Error closing ResultSet: getContentTitleTagForArticleId(\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t+ article_id + \\\")\\\");\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\t\\r\\n\\t\\treturn result;\\r\\n\\t}\"}","10":"{\"expressionStart\":{\"String:title\":630,\"String:\\u0027\":397,\"ResultSet.getString()\":585,\"String\":1079,\"SQLException.toString()\":822,\"\\u003creturn\\u003e\":1186,\"HashMap.put()\":560,\"ResultSet.next()\":483,\"String:Error executing the Query: \":860,\"DatabaseController.getResultSet()\":424,\"HashMap.\\u003cinit\\u003e\":116,\"String:tag\":732,\"ResultSet.close()\":956,\"String:)\":1162,\"UNKNOWN.println()\":1013,\"\\u003cnullcheck\\u003e\":936},\"expressionEnd\":{\"String:title\":637,\"String:\\u0027\":400,\"ResultSet.getString()\":611,\"String\":1137,\"SQLException.toString()\":834,\"\\u003creturn\\u003e\":1200,\"HashMap.put()\":612,\"ResultSet.next()\":492,\"String:Error executing the Query: \":889,\"DatabaseController.getResultSet()\":457,\"HashMap.\\u003cinit\\u003e\":145,\"String:tag\":737,\"ResultSet.close()\":966,\"String:)\":1165,\"UNKNOWN.println()\":1045,\"\\u003cnullcheck\\u003e\":946},\"rawCode\":\"public HashMap\\u003cString, String\\u003e getContentTitleTagForContentId(int content_id) {\\r\\n\\t\\tHashMap\\u003cString, String\\u003e result \\u003d new HashMap\\u003cString, String\\u003e();\\r\\n\\t\\t\\r\\n\\t\\tquery \\u003d \\\"SELECT a.article_id, c.content_id, a.title, c.content, c.tag \\\" +\\r\\n\\t\\t\\t\\t\\\"FROM mobilewikia.wiki_article a \\\" +\\r\\n\\t\\t\\t\\t\\\"LEFT JOIN mobilewikia.wiki_content c ON ( a.article_id \\u003d c.article_id ) \\\" +\\r\\n\\t\\t\\t\\t\\\"WHERE c.content_id \\u003d \\u0027\\\" + content_id + \\\"\\u0027\\\";\\r\\n\\t\\t\\r\\n\\t\\ttry {\\r\\n\\t\\t\\trs \\u003d db_controller.getResultSet(query);\\r\\n\\r\\n\\t\\t\\tif (rs !\\u003d null \\u0026\\u0026 rs.next()) {\\r\\n\\t\\t\\t\\tresult.put(\\\"article_id\\\", rs.getString(\\\"article_id\\\"));\\r\\n\\t\\t\\t\\tresult.put(\\\"content_id\\\", rs.getString(\\\"content_id\\\"));\\r\\n\\t\\t\\t\\tresult.put(\\\"title\\\", rs.getString(\\\"title\\\"));\\r\\n\\t\\t\\t\\tresult.put(\\\"content\\\", rs.getString(\\\"content\\\"));\\r\\n\\t\\t\\t\\tresult.put(\\\"tag\\\", rs.getString(\\\"tag\\\"));\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t} catch (SQLException e) {\\r\\n\\t\\t\\tSystem.err.println(e.toString());\\r\\n\\t\\t\\tSystem.out.println(\\\"Error executing the Query: \\\" + query);\\r\\n\\r\\n\\t\\t} finally {\\r\\n\\t\\t\\ttry {\\r\\n\\t\\t\\t\\tif (rs !\\u003d null) {\\r\\n\\t\\t\\t\\t\\trs.close();\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t} catch (SQLException e) {\\r\\n\\t\\t\\t\\tSystem.err.println(e.toString());\\r\\n\\t\\t\\t\\tSystem.out\\r\\n\\t\\t\\t\\t\\t\\t.println(\\\"Error closing ResultSet: getContentTitleTagForContentId(\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t+ content_id + \\\")\\\");\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\t\\r\\n\\t\\treturn result;\\r\\n\\t}\"}","11":"{\"expressionStart\":{\"ConferenceOptionBean.setOptionName()\":3612,\"ConferenceSelectBean.getOptions()\":3677,\"Entry.getValue()\":4092,\"ConferenceSelectBean.\\u003cinit\\u003e\":2845,\"PreparedStatement.setInt()\":1700,\"ConferenceSelectBean.setConferenceVoteId()\":2926,\"LoadVoteAction.getSuccessReplyIQ()\":4186,\"String\":2374,\"Iterator.next()\":3967,\"DbConnectionManager.getConnection()\":338,\"ConferenceOptionBean.setConferenceSelectId()\":3563,\"Integer.\\u003cinit\\u003e\":1844,\"HashMap.\\u003cinit\\u003e\":534,\"ResultSet.getBoolean()\":2418,\"ConferenceSelectBean.setId()\":2892,\"ConferenceVoteBean.setConferenceId()\":2281,\"int:1\":1713,\"int:0\":316,\"ResultSet.getInt()\":3178,\"Map.put()\":3223,\"String:title\":2126,\"ConferenceSelectBean.setSelectRemark()\":3092,\"UNKNOWN.iterator()\":3849,\"ResultSet.getString()\":2361,\"ConferenceVoteBean.setBeginTime()\":2516,\"ConferenceSelectBean.setSelectNum()\":3162,\"Iterator.hasNext()\":3901,\"ConferenceVoteBean.\\u003ccast\\u003e\":4072,\"Connection.prepareStatement()\":1171,\"PreparedStatement.executeQuery()\":1763,\"Map.containsKey()\":1983,\"ConferenceOptionBean.\\u003cinit\\u003e\":3484,\"String:type\":2995,\"DbConnectionManager.closeConnection()\":4599,\"ConferenceVoteBean.setClose()\":2406,\"ConferenceVoteBean.getSelects()\":3266,\"ConferenceVoteBean.setEffectiveTime()\":2216,\"\\u003cr\\u003e\":2765,\"ResultSet.next()\":1804,\"UNKNOWN.add()\":3677,\"Map.entrySet()\":3849,\"LoadVoteAction.getFailReplyIQ()\":4515,\"ConferenceVoteBean.setTitle()\":2101,\"ConferenceVoteBean.setTitleRemark()\":2152,\"ResultSet.getTimestamp()\":2532,\"Map.get()\":2642,\"\\u003cnullcheck\\u003e\":2752,\"ConferenceSelectBean.setSelectTitle()\":3024,\"ConferenceVoteBean.\\u003cinit\\u003e\":225,\"ConferenceVoteBean.getConferenceId()\":2300,\"ConferenceVoteBean.setStart()\":2461,\"\\u003creturn\\u003e\":4666,\"ArrayList.\\u003cinit\\u003e\":451,\"List.add()\":4175,\"ConferenceVoteBean.setId()\":2071,\"LoadVoteAction.parseXML()\":379,\"ConferenceOptionBean.setId()\":3530,\"Map.Entry.\\u003ccast\\u003e\":3955,\"Exception.printStackTrace()\":4418,\"ConferenceSelectBean.setType()\":2974,\"ConferenceVoteBean.setCreatorStr()\":2344},\"expressionEnd\":{\"ConferenceOptionBean.setOptionName()\":3657,\"ConferenceSelectBean.getOptions()\":3692,\"Entry.getValue()\":4108,\"ConferenceSelectBean.\\u003cinit\\u003e\":2871,\"PreparedStatement.setInt()\":1743,\"ConferenceSelectBean.setConferenceVoteId()\":2953,\"LoadVoteAction.getSuccessReplyIQ()\":4237,\"String\":2387,\"Iterator.next()\":3978,\"DbConnectionManager.getConnection()\":373,\"ConferenceOptionBean.setConferenceSelectId()\":3592,\"Integer.\\u003cinit\\u003e\":1873,\"HashMap.\\u003cinit\\u003e\":575,\"ResultSet.getBoolean()\":2443,\"ConferenceSelectBean.setId()\":2905,\"ConferenceVoteBean.setConferenceId()\":2327,\"int:1\":1714,\"int:0\":317,\"ResultSet.getInt()\":3201,\"Map.put()\":3245,\"String:title\":2133,\"ConferenceSelectBean.setSelectRemark()\":3141,\"UNKNOWN.iterator()\":3878,\"ResultSet.getString()\":2388,\"ConferenceVoteBean.setBeginTime()\":2562,\"ConferenceSelectBean.setSelectNum()\":3202,\"Iterator.hasNext()\":3915,\"ConferenceVoteBean.\\u003ccast\\u003e\":4108,\"Connection.prepareStatement()\":1685,\"PreparedStatement.executeQuery()\":1783,\"Map.containsKey()\":2007,\"ConferenceOptionBean.\\u003cinit\\u003e\":3510,\"String:type\":3001,\"DbConnectionManager.closeConnection()\":4650,\"ConferenceVoteBean.setClose()\":2444,\"ConferenceVoteBean.getSelects()\":3281,\"ConferenceVoteBean.setEffectiveTime()\":2264,\"\\u003cr\\u003e\":2770,\"ResultSet.next()\":1813,\"UNKNOWN.add()\":3700,\"Map.entrySet()\":3867,\"LoadVoteAction.getFailReplyIQ()\":4553,\"ConferenceVoteBean.setTitle()\":2135,\"ConferenceVoteBean.setTitleRemark()\":2199,\"ResultSet.getTimestamp()\":2561,\"Map.get()\":2658,\"\\u003cnullcheck\\u003e\":2761,\"ConferenceSelectBean.setSelectTitle()\":3071,\"ConferenceVoteBean.\\u003cinit\\u003e\":249,\"ConferenceVoteBean.getConferenceId()\":2326,\"ConferenceVoteBean.setStart()\":2499,\"\\u003creturn\\u003e\":4680,\"ArrayList.\\u003cinit\\u003e\":486,\"List.add()\":4238,\"ConferenceVoteBean.setId()\":2084,\"LoadVoteAction.parseXML()\":409,\"ConferenceOptionBean.setId()\":3543,\"Map.Entry.\\u003ccast\\u003e\":3978,\"Exception.printStackTrace()\":4437,\"ConferenceSelectBean.setType()\":3003,\"ConferenceVoteBean.setCreatorStr()\":2389},\"rawCode\":\"@Override\\r\\n\\tpublic List execute(IQ request) {\\r\\n\\t\\tConnection con \\u003d null;\\r\\n        PreparedStatement pstmt \\u003d null;\\r\\n        boolean abortTransaction \\u003d false;\\r\\n        ResultSet rs \\u003d null;\\r\\n        ConferenceVoteBean voteBean \\u003d new ConferenceVoteBean();\\r\\n        List replys \\u003d new ArrayList();\\r\\n        int total_num \\u003d 0;\\r\\n\\t\\ttry {\\r\\n\\t\\t\\tcon \\u003d DbConnectionManager.getConnection();\\r\\n\\t\\t\\tparseXML(request,con,voteBean);\\r\\n\\t\\t\\tList\\u003cConferenceVoteBean\\u003e voteList \\u003d new ArrayList\\u003cConferenceVoteBean\\u003e();\\r\\n\\t\\t\\tMap\\u003cInteger,ConferenceVoteBean\\u003e voteMap \\u003d new HashMap\\u003cInteger,ConferenceVoteBean\\u003e();\\r\\n\\t\\t\\tMap\\u003cInteger,ConferenceSelectBean\\u003e selectMap \\u003d new HashMap\\u003cInteger,ConferenceSelectBean\\u003e();\\r\\n//\\t\\t\\tpstmt \\u003d con.prepareStatement(\\\"select cv.begin_time,cv.id vid,cv.title_remark,cv.title,cv.effective_time,\\\" +\\r\\n//\\t\\t\\t\\t\\t\\\"cv.is_close,cv.is_start,cs.id sid,cs.type,cs.select_title,cs.select_remark,cs.select_num,\\\" +\\r\\n//\\t\\t\\t\\t\\t\\\"co.id oid,co.option_name,su.lcc_account from conference_vote cv,conference_select cs,\\\" +\\r\\n//\\t\\t\\t\\t\\t\\\"conference_option co,sys_user su where cv.conference_id\\u003d? \\\"+ \\r\\n//\\t\\t\\t\\\"and cv.id\\u003dcs.conference_vote_id and cs.id\\u003dco.conference_select_id and su.user_id\\u003dcv.creator\\\");\\r\\n\\t\\t\\tpstmt \\u003d con.prepareStatement(\\\"select cv.begin_time,cv.id vid,cv.title_remark,cv.title,cv.effective_time,\\\" +\\r\\n\\t\\t\\t\\t\\t\\\"cv.is_close,cv.is_start,cs.id sid,cs.type,cs.select_title,cs.select_remark,cs.select_num,\\\" +\\r\\n\\t\\t\\t\\t\\t\\\"co.id oid,co.option_name,su.lcc_account from conference_vote cv left outer join conference_select cs on cv.id\\u003dcs.conference_vote_id \\\" +\\r\\n\\t\\t\\t\\t\\t\\\"left outer join conference_option co on cs.id\\u003dco.conference_select_id,sys_user su where cv.conference_id\\u003d? \\\"+ \\r\\n\\t\\t\\t\\\" and su.user_id\\u003dcv.creator order by cv.id desc\\\");\\r\\n            pstmt.setInt(1, voteBean.getConferenceId());\\r\\n            rs \\u003d pstmt.executeQuery();\\r\\n            while(rs.next()){\\r\\n            \\tInteger vid \\u003d new Integer(rs.getInt(\\\"vid\\\"));\\r\\n            \\tConferenceVoteBean vb \\u003d null;\\r\\n            \\tConferenceSelectBean sb \\u003d null;\\r\\n            \\tif(!voteMap.containsKey(vid)){\\r\\n            \\t\\tvb \\u003d new ConferenceVoteBean();\\r\\n            \\t\\tvb.setId(vid);\\r\\n            \\t\\tvb.setTitle(rs.getString(\\\"title\\\"));\\r\\n            \\t\\tvb.setTitleRemark(rs.getString(\\\"title_remark\\\"));\\r\\n            \\t\\tvb.setEffectiveTime(rs.getInt(\\\"effective_time\\\"));\\r\\n            \\t\\tvb.setConferenceId(voteBean.getConferenceId());\\r\\n            \\t\\tvb.setCreatorStr(rs.getString(\\\"lcc_account\\\"));\\r\\n            \\t\\tvb.setClose(rs.getBoolean(\\\"is_close\\\"));\\r\\n            \\t\\tvb.setStart(rs.getBoolean(\\\"is_start\\\"));\\r\\n            \\t\\tvb.setBeginTime(rs.getTimestamp(\\\"begin_time\\\"));\\r\\n            \\t\\tvoteMap.put(vid, vb);\\r\\n            \\t}else{\\r\\n            \\t\\tvb \\u003d voteMap.get(vid);\\r\\n            \\t}\\r\\n            \\tInteger sid \\u003d new Integer(rs.getInt(\\\"sid\\\"));\\r\\n            \\tif(sid!\\u003dnull \\u0026\\u0026 sid\\u003e0){\\r\\n            \\t\\tif(!selectMap.containsKey(sid)){\\r\\n                \\t\\tsb \\u003d new ConferenceSelectBean();\\r\\n                \\t\\tsb.setId(sid);\\r\\n                \\t\\tsb.setConferenceVoteId(vid);\\r\\n                \\t\\tsb.setType(rs.getInt(\\\"type\\\"));\\r\\n                \\t\\tsb.setSelectTitle(rs.getString(\\\"select_title\\\"));\\r\\n                \\t\\tsb.setSelectRemark(rs.getString(\\\"select_remark\\\"));\\r\\n                \\t\\tsb.setSelectNum(rs.getInt(\\\"select_num\\\"));\\r\\n                \\t\\tselectMap.put(sid, sb);\\r\\n                \\t\\tvb.getSelects().add(sb);\\r\\n                \\t}else{\\r\\n                \\t\\tsb \\u003d selectMap.get(sid);\\r\\n                \\t}\\r\\n            \\t\\tInteger oid \\u003d new Integer(rs.getInt(\\\"oid\\\"));\\r\\n                \\tConferenceOptionBean ob \\u003d new ConferenceOptionBean();\\r\\n                \\tob.setId(oid);\\r\\n                \\tob.setConferenceSelectId(sid);\\r\\n                \\tob.setOptionName(rs.getString(\\\"option_name\\\"));\\r\\n                \\tsb.getOptions().add(ob);\\r\\n            \\t}\\r\\n            \\t\\r\\n            \\t\\r\\n            }\\r\\n//            DbConnectionManager.fastcloseStmt(pstmt);\\r\\n            Iterator iter \\u003d voteMap.entrySet().iterator(); \\r\\n            while (iter.hasNext()) { \\r\\n                Map.Entry entry \\u003d (Map.Entry) iter.next(); \\r\\n//                Object key \\u003d entry.getKey(); \\r\\n                ConferenceVoteBean val \\u003d (ConferenceVoteBean)entry.getValue();\\r\\n                voteList.add(val);\\r\\n            } \\r\\n            replys.add(this.getSuccessReplyIQ(request, voteList, voteBean));\\r\\n//            List\\u003cString\\u003e userAddress \\u003d this.getUserAddress(voteBean.getRoomJid());\\r\\n//            replys.add(userAddress);\\r\\n        }\\r\\n        catch (Exception e) {\\r\\n        \\te.printStackTrace();\\r\\n            abortTransaction \\u003d true;\\r\\n            \\r\\n            replys.add(this.getFailReplyIQ(request, voteBean));\\r\\n        }\\r\\n        finally {\\r\\n            DbConnectionManager.closeConnection(rs, pstmt, con);\\r\\n        }\\r\\n\\t\\treturn replys;\\r\\n\\t}\"}","12":"{\"expressionStart\":{\"String: Houve erro no fechamento da conex�o \":707,\"ResultSet.getString()\":418,\"String:;\":318,\"String\":209,\"Connection.createStatement()\":168,\"\\u003creturn\\u003e\":553,\"ResultSet.next()\":377,\"ServicoConhecimentoImplDAO.getConhecimento()\":401,\"Statement.close()\":596,\"MySQLConnectionFactory.open()\":85,\"null:null\":560,\"Arquivo.getId()\":301,\"UNKNOWN.println()\":688,\"Statement.executeQuery()\":344,\"SQLException.printStackTrace()\":754},\"expressionEnd\":{\"String: Houve erro no fechamento da conex�o \":746,\"ResultSet.getString()\":451,\"String:;\":321,\"String\":267,\"Connection.createStatement()\":190,\"\\u003creturn\\u003e\":565,\"ResultSet.next()\":386,\"ServicoConhecimentoImplDAO.getConhecimento()\":453,\"Statement.close()\":607,\"MySQLConnectionFactory.open()\":114,\"null:null\":564,\"Arquivo.getId()\":316,\"UNKNOWN.println()\":747,\"Statement.executeQuery()\":365,\"SQLException.printStackTrace()\":782},\"rawCode\":\"public Conhecimento getConhecimentoAssociado(Arquivo arquivo) {\\r\\n\\t\\tConnection conn \\u003d MySQLConnectionFactory.open();\\r\\n\\t\\t\\r\\n\\t\\tStatement stm \\u003d null;\\r\\n\\r\\n\\t\\ttry {\\r\\n\\r\\n\\t\\t\\tstm \\u003d conn.createStatement();\\r\\n\\t\\t\\tString SQL \\u003d \\\" SELECT conhecimento_nome FROM conhecimento_has_arquivo \\\" +\\r\\n\\t\\t\\t\\t\\t\\t\\\" WHERE arquivo_id \\u003d \\\"+ arquivo.getId() +\\\";\\\";\\r\\n\\r\\n\\t\\t\\tResultSet rs \\u003d stm.executeQuery(SQL);\\r\\n\\r\\n\\t\\t\\tif (rs.next()){\\r\\n\\t\\t\\t\\treturn getConhecimento( rs.getString(\\\"conhecimento_nome\\\") );\\r\\n\\t\\t\\t}else{\\r\\n\\t\\t\\t\\treturn null;\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t} catch (SQLException e) {\\r\\n\\t\\t\\t//e.printStackTrace();\\r\\n\\t\\t\\treturn null;\\r\\n\\t\\t} finally {\\r\\n\\t\\t\\ttry {\\r\\n\\t\\t\\t\\tstm.close();\\r\\n\\t\\t\\t\\t//conn.close();\\t            \\r\\n\\t\\t\\t} catch (SQLException onConClose) {\\r\\n\\t\\t\\t\\tSystem.out.println(\\\" Houve erro no fechamento da conex�o \\\");\\r\\n\\t\\t\\t\\tonConClose.printStackTrace();\\t             \\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\t\\t\\r\\n\\t}\"}","13":"{\"expressionStart\":{\"Map.remove()\":1492,\"String:\\u0027\":648,\"String: Houve erro no fechamento da conex�o \":1896,\"ResultSet.getString()\":1346,\"String\":1142,\"ServicoDesenvolvedor.getDesenvolvedor()\":1307,\"Connection.createStatement()\":307,\"\\u003creturn\\u003e\":2003,\"ResultSet.next()\":1252,\"Statement.close()\":1785,\"Map.isEmpty()\":1467,\"HashMap.\\u003cinit\\u003e\":162,\"MySQLConnectionFactory.open()\":226,\"null:null\":1599,\"Conhecimento.getNome()\":1016,\"NullPointerException.printStackTrace()\":1734,\"UNKNOWN.println()\":1877,\"Statement.executeQuery()\":1216,\"Map.put()\":1392,\"ResultSet.getInt()\":1426,\"SQLException.printStackTrace()\":1943},\"expressionEnd\":{\"Map.remove()\":1521,\"String:\\u0027\":651,\"String: Houve erro no fechamento da conex�o \":1935,\"ResultSet.getString()\":1382,\"String\":1151,\"ServicoDesenvolvedor.getDesenvolvedor()\":1384,\"Connection.createStatement()\":329,\"\\u003creturn\\u003e\":2018,\"ResultSet.next()\":1262,\"Statement.close()\":1796,\"Map.isEmpty()\":1484,\"HashMap.\\u003cinit\\u003e\":199,\"MySQLConnectionFactory.open()\":255,\"null:null\":1603,\"Conhecimento.getNome()\":1038,\"NullPointerException.printStackTrace()\":1753,\"UNKNOWN.println()\":1936,\"Statement.executeQuery()\":1237,\"Map.put()\":1445,\"ResultSet.getInt()\":1444,\"SQLException.printStackTrace()\":1971},\"rawCode\":\"public Map\\u003cDesenvolvedor, Integer\\u003e getContribuintesConhecimento(Conhecimento conhecimento, Desenvolvedor desenvolvedor){\\r\\n\\t\\tMap\\u003cDesenvolvedor, Integer\\u003e retorno \\u003d new HashMap\\u003cDesenvolvedor, Integer\\u003e();\\r\\n\\t\\t\\r\\n\\t\\tConnection conn \\u003d MySQLConnectionFactory.open();\\r\\n\\t\\t\\r\\n\\t\\tStatement stm \\u003d null;\\r\\n\\r\\n\\t\\ttry {\\r\\n\\t\\t\\tstm \\u003d conn.createStatement();\\r\\n\\t\\t\\tString SQL \\u003d \\\"\\\"; \\t\\r\\n\\r\\n\\t\\t\\tSQL \\u003d \\\"SELECT desenvolvedor_email, SUM(qtdeProblema+qtdeSolucao) qtde FROM (\\\" +\\r\\n\\t\\t\\t\\t\\t\\\"  SELECT desenvolvedor_email, 0 as qtdeSolucao, count(desenvolvedor_email) as qtdeProblema\\\" +\\r\\n\\t\\t\\t\\t\\t\\\"  FROM problema\\\" +\\r\\n\\t\\t\\t\\t\\t\\\"  WHERE resolvido \\u003d 1 and conhecimento_nome \\u003d \\u0027\\\"+ conhecimento.getNome() +\\\"\\u0027\\\" +\\r\\n\\t\\t\\t\\t\\t\\\"  AND YEAR( dataRelato ) \\u003e\\u003d 2008\\\" +\\r\\n\\t\\t\\t\\t\\t\\\"  GROUP BY desenvolvedor_email\\\" +\\r\\n\\t\\t\\t\\t\\t\\\"        UNION ALL\\\" +\\r\\n\\t\\t\\t\\t\\t\\\"  SELECT s.desenvolvedor_email, count(s.desenvolvedor_email) as qtdeSolucao, 0 as qtdeProblema\\\" +\\r\\n\\t\\t\\t\\t\\t\\\"  FROM problema p\\\" +\\r\\n\\t\\t\\t\\t\\t\\\"  INNER JOIN solucao s ON s.problema_id \\u003d p.id AND s.resolveu \\u003d 1\\\" +\\r\\n\\t\\t\\t\\t\\t\\\"  WHERE p.conhecimento_nome \\u003d \\u0027\\\"+ conhecimento.getNome() +\\\"\\u0027\\\" +\\r\\n\\t\\t\\t\\t\\t\\\"  AND YEAR( s.dataProposta ) \\u003e\\u003d 2008\\\" +\\r\\n\\t\\t\\t\\t\\t\\\"  GROUP BY s.desenvolvedor_email\\\" +\\r\\n\\t\\t\\t\\t\\t\\\" ) AS T\\\" +\\r\\n\\t\\t\\t\\t  \\\" GROUP BY desenvolvedor_email\\\";\\r\\n\\r\\n\\t\\t\\tResultSet rs2 \\u003d stm.executeQuery(SQL);\\r\\n\\r\\n\\t\\t\\twhile (rs2.next()){\\r\\n\\t\\t\\t\\tDesenvolvedor desenvolvedorRetorno \\u003d servicoDesenvolvedor.getDesenvolvedor( rs2.getString(\\\"desenvolvedor_email\\\") ) ;\\r\\n\\t\\t\\t\\tretorno.put(desenvolvedorRetorno, rs2.getInt(\\\"qtde\\\"));\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t\\r\\n\\t\\t\\tif (!retorno.isEmpty()){\\r\\n\\t\\t\\t\\tretorno.remove(desenvolvedor);\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t} catch (SQLException e) {\\r\\n\\t\\t\\t//e.printStackTrace();\\r\\n\\t\\t\\treturn null;\\r\\n\\t\\t} catch (NullPointerException e) {\\r\\n\\t\\t\\tSystem.out.println(\\\"NullPointerException na classe ServicoConhecimentoImplDAO..\\\");\\r\\n\\t\\t\\te.printStackTrace();\\r\\n\\t\\t} finally {\\r\\n\\t\\t\\ttry {\\r\\n\\t\\t\\t\\tstm.close();\\r\\n\\t\\t\\t\\t//conn.close();\\t            \\r\\n\\t\\t\\t} catch (SQLException onConClose) {\\r\\n\\t\\t\\t\\tSystem.out.println(\\\" Houve erro no fechamento da conex�o \\\");\\r\\n\\t\\t\\t\\tonConClose.printStackTrace();\\t             \\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn retorno;\\r\\n\\t}\"}","14":"{\"expressionStart\":{\"String: Houve erro no fechamento da conex�o \":1106,\"ResultSet.getString()\":531,\"String\":544,\"Connection.createStatement()\":290,\"\\u003creturn\\u003e\":802,\"ResultSet.next()\":483,\"ServicoConhecimentoImplDAO.getConhecimento()\":586,\"ArrayList.\\u003cinit\\u003e\":236,\"Statement.close()\":995,\"ArrayList.add()\":709,\"MySQLConnectionFactory.open()\":140,\"null:null\":809,\"NullPointerException.printStackTrace()\":944,\"Statement.executeQuery()\":447,\"UNKNOWN.println()\":1087,\"SQLException.printStackTrace()\":1153},\"expressionEnd\":{\"String: Houve erro no fechamento da conex�o \":1145,\"ResultSet.getString()\":551,\"String\":550,\"Connection.createStatement()\":312,\"\\u003creturn\\u003e\":814,\"ResultSet.next()\":492,\"ServicoConhecimentoImplDAO.getConhecimento()\":622,\"ArrayList.\\u003cinit\\u003e\":265,\"Statement.close()\":1006,\"ArrayList.add()\":731,\"MySQLConnectionFactory.open()\":169,\"null:null\":813,\"NullPointerException.printStackTrace()\":963,\"Statement.executeQuery()\":468,\"UNKNOWN.println()\":1146,\"SQLException.printStackTrace()\":1181},\"rawCode\":\"public ArrayList\\u003cConhecimento\\u003e getListaConhecimento() {\\r\\n\\t\\t//Connection conn \\u003d MySQLConnectionFactory.getConnection();\\r\\n\\t\\tConnection conn \\u003d MySQLConnectionFactory.open();\\r\\n\\t\\t\\r\\n\\t\\tStatement stm \\u003d null;\\r\\n\\r\\n\\t\\tArrayList\\u003cConhecimento\\u003e list \\u003d new ArrayList\\u003cConhecimento\\u003e();\\r\\n\\r\\n\\t\\ttry {\\r\\n\\r\\n\\t\\t\\tstm \\u003d conn.createStatement();\\r\\n\\t\\t\\tString SQL \\u003d \\\"\\\"; \\t\\r\\n\\r\\n\\t\\t\\tSQL \\u003d \\\" SELECT nome, descricao FROM conhecimento;\\\";\\r\\n\\r\\n\\t\\t\\t//System.out.println(SQL);\\r\\n\\t\\t\\tResultSet rs \\u003d stm.executeQuery(SQL);\\r\\n\\r\\n\\t\\t\\twhile (rs.next()){\\r\\n\\r\\n\\t\\t\\t\\tString nomeConhecimentoPai \\u003d rs.getString(\\\"nome\\\");\\r\\n\\t\\t\\t\\tConhecimento conhecimento \\u003d getConhecimento(nomeConhecimentoPai);\\r\\n\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t//System.out.println(\\\"Adicionando novo conhecimento a lista\\\");\\r\\n\\t\\t\\t\\t\\r\\n\\t\\t\\t\\tlist.add(conhecimento);\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t} catch (SQLException e) {\\r\\n\\t\\t\\t//e.printStackTrace();\\r\\n\\t\\t\\treturn null;\\r\\n\\t\\t} catch (NullPointerException e) {\\r\\n\\t\\t\\tSystem.out.println(\\\"NullPointerException na classe ServicoConhecimentoImplDAO..\\\");\\r\\n\\t\\t\\te.printStackTrace();\\r\\n\\t\\t} finally {\\r\\n\\t\\t\\ttry {\\r\\n\\t\\t\\t\\tstm.close();\\r\\n\\t\\t\\t\\t//conn.close();\\t            \\r\\n\\t\\t\\t} catch (SQLException onConClose) {\\r\\n\\t\\t\\t\\tSystem.out.println(\\\" Houve erro no fechamento da conex�o \\\");\\r\\n\\t\\t\\t\\tonConClose.printStackTrace();\\t             \\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn list;\\r\\n\\t}\"}","15":"{\"expressionStart\":{\"String: Houve erro no fechamento da conex�o \":997,\"ResultSet.getString()\":653,\"String\":460,\"Connection.createStatement()\":349,\"\\u003creturn\\u003e\":1104,\"ResultSet.next()\":603,\"ServicoConhecimentoImplDAO.getConhecimento()\":703,\"ArrayList.\\u003cinit\\u003e\":295,\"Statement.close()\":886,\"ArrayList.add()\":750,\"MySQLConnectionFactory.open()\":199,\"String:\\u0027;\":509,\"null:null\":850,\"int:2\":666,\"Statement.executeQuery()\":567,\"UNKNOWN.println()\":978,\"SQLException.printStackTrace()\":1044},\"expressionEnd\":{\"String: Houve erro no fechamento da conex�o \":1036,\"ResultSet.getString()\":668,\"String\":488,\"Connection.createStatement()\":371,\"\\u003creturn\\u003e\":1116,\"ResultSet.next()\":612,\"ServicoConhecimentoImplDAO.getConhecimento()\":741,\"ArrayList.\\u003cinit\\u003e\":324,\"Statement.close()\":897,\"ArrayList.add()\":772,\"MySQLConnectionFactory.open()\":228,\"String:\\u0027;\":513,\"null:null\":854,\"int:2\":667,\"Statement.executeQuery()\":588,\"UNKNOWN.println()\":1037,\"SQLException.printStackTrace()\":1072},\"rawCode\":\"public ArrayList\\u003cConhecimento\\u003e getFilhos(String nomeConhecimentoPai)\\r\\n\\tthrows ConhecimentoInexistenteException {\\r\\n\\r\\n\\t\\t//Connection conn \\u003d MySQLConnectionFactory.getConnection();\\r\\n\\t\\tConnection conn \\u003d MySQLConnectionFactory.open();\\r\\n\\t\\t\\r\\n\\t\\tStatement stm \\u003d null;\\r\\n\\r\\n\\t\\tArrayList\\u003cConhecimento\\u003e list \\u003d new ArrayList\\u003cConhecimento\\u003e();\\r\\n\\r\\n\\t\\ttry {\\r\\n\\r\\n\\t\\t\\tstm \\u003d conn.createStatement();\\r\\n\\t\\t\\tString SQL \\u003d \\\"\\\"; \\t\\r\\n\\r\\n\\t\\t\\tSQL \\u003d \\\" SELECT * FROM conhecimento_pai_filho WHERE \\\"+\\r\\n\\t\\t\\t\\\" conhecimento_pai_nome \\u003d \\u0027\\\"+nomeConhecimentoPai+\\\"\\u0027;\\\";\\r\\n\\r\\n\\t\\t\\t//System.out.println(SQL);\\r\\n\\t\\t\\tResultSet rs \\u003d stm.executeQuery(SQL);\\r\\n\\r\\n\\t\\t\\twhile (rs.next()){\\r\\n\\r\\n\\t\\t\\t\\tString nomeConhecimentoFilho \\u003d rs.getString(2);\\r\\n\\t\\t\\t\\tConhecimento conhecimento \\u003d getConhecimento(nomeConhecimentoFilho);\\r\\n\\r\\n\\t\\t\\t\\tlist.add(conhecimento);\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t} catch (SQLException e) {\\r\\n\\t\\t\\t//e.printStackTrace();\\r\\n\\t\\t\\treturn null;\\r\\n\\t\\t} finally {\\r\\n\\t\\t\\ttry {\\r\\n\\t\\t\\t\\tstm.close();\\r\\n\\t\\t\\t\\t//conn.close();\\t            \\r\\n\\t\\t\\t} catch (SQLException onConClose) {\\r\\n\\t\\t\\t\\tSystem.out.println(\\\" Houve erro no fechamento da conex�o \\\");\\r\\n\\t\\t\\t\\tonConClose.printStackTrace();\\t             \\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn list;\\r\\n\\t}\"}","16":"{\"expressionStart\":{\"String: Houve erro no fechamento da conex�o \":997,\"ResultSet.getString()\":655,\"String\":408,\"Connection.createStatement()\":349,\"\\u003creturn\\u003e\":843,\"ResultSet.next()\":607,\"ArrayList.\\u003cinit\\u003e\":295,\"ServicoConhecimentoImplDAO.getConhecimento()\":705,\"Statement.close()\":886,\"ArrayList.add()\":750,\"String:\\u0027;\":513,\"MySQLConnectionFactory.open()\":199,\"null:null\":850,\"int:1\":668,\"UNKNOWN.println()\":978,\"Statement.executeQuery()\":571,\"SQLException.printStackTrace()\":1044},\"expressionEnd\":{\"String: Houve erro no fechamento da conex�o \":1036,\"ResultSet.getString()\":670,\"String\":454,\"Connection.createStatement()\":371,\"\\u003creturn\\u003e\":855,\"ResultSet.next()\":616,\"ArrayList.\\u003cinit\\u003e\":324,\"ServicoConhecimentoImplDAO.getConhecimento()\":741,\"Statement.close()\":897,\"ArrayList.add()\":772,\"String:\\u0027;\":517,\"MySQLConnectionFactory.open()\":228,\"null:null\":854,\"int:1\":669,\"UNKNOWN.println()\":1037,\"Statement.executeQuery()\":592,\"SQLException.printStackTrace()\":1072},\"rawCode\":\"public ArrayList\\u003cConhecimento\\u003e getPais(String nomeConhecimentoFilho)\\r\\n\\tthrows ConhecimentoInexistenteException {\\r\\n\\r\\n\\t\\t//Connection conn \\u003d MySQLConnectionFactory.getConnection();\\r\\n\\t\\tConnection conn \\u003d MySQLConnectionFactory.open();\\r\\n\\t\\t\\r\\n\\t\\tStatement stm \\u003d null;\\r\\n\\r\\n\\t\\tArrayList\\u003cConhecimento\\u003e list \\u003d new ArrayList\\u003cConhecimento\\u003e();\\r\\n\\r\\n\\t\\ttry {\\r\\n\\r\\n\\t\\t\\tstm \\u003d conn.createStatement();\\r\\n\\t\\t\\tString SQL \\u003d \\\"\\\"; \\t\\r\\n\\r\\n\\t\\t\\tSQL \\u003d \\\" SELECT * FROM conhecimento_pai_filho WHERE \\\"+\\r\\n\\t\\t\\t\\\" conhecimento_filho_nome \\u003d \\u0027\\\"+nomeConhecimentoFilho+\\\"\\u0027;\\\";\\r\\n\\r\\n\\t\\t\\t//System.out.println(SQL);\\r\\n\\t\\t\\tResultSet rs \\u003d stm.executeQuery(SQL);\\r\\n\\r\\n\\t\\t\\twhile (rs.next()){\\r\\n\\r\\n\\t\\t\\t\\tString nomeConhecimentoPai \\u003d rs.getString(1);\\r\\n\\t\\t\\t\\tConhecimento conhecimento \\u003d getConhecimento(nomeConhecimentoPai);\\r\\n\\r\\n\\t\\t\\t\\tlist.add(conhecimento);\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t} catch (SQLException e) {\\r\\n\\t\\t\\t//e.printStackTrace();\\r\\n\\t\\t\\treturn null;\\r\\n\\t\\t} finally {\\r\\n\\t\\t\\ttry {\\r\\n\\t\\t\\t\\tstm.close();\\r\\n\\t\\t\\t\\t//conn.close();\\t            \\r\\n\\t\\t\\t} catch (SQLException onConClose) {\\r\\n\\t\\t\\t\\tSystem.out.println(\\\" Houve erro no fechamento da conex�o \\\");\\r\\n\\t\\t\\t\\tonConClose.printStackTrace();\\t             \\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn list;\\r\\n\\t}\"}","17":"{\"expressionStart\":{\"String: Houve erro no fechamento da conex�o \":1460,\"ResultSet.getString()\":1054,\"String\":1067,\"Conhecimento.setDescricao()\":604,\"ServicoArquivo.getArquivo()\":1127,\"Connection.createStatement()\":157,\"Conhecimento.\\u003cinit\\u003e\":528,\"\\u003creturn\\u003e\":1306,\"Arquivo.setEnderecoServidor()\":1026,\"ResultSet.next()\":481,\"Statement.close()\":1349,\"Arquivo.\\u003cinit\\u003e\":975,\"String:\\u0027;\":313,\"MySQLConnectionFactory.open()\":74,\"Conhecimento.setNome()\":555,\"Conhecimento.adcionaArquivo()\":1098,\"null:null\":128,\"\\u003d\":337,\"\\u003cnullcheck\\u003e\":212,\"Statement.executeQuery()\":448,\"UNKNOWN.println()\":1441,\"SQLException.printStackTrace()\":1507},\"expressionEnd\":{\"String: Houve erro no fechamento da conex�o \":1499,\"ResultSet.getString()\":1087,\"String\":1086,\"Conhecimento.setDescricao()\":656,\"ServicoArquivo.getArquivo()\":1161,\"Connection.createStatement()\":179,\"Conhecimento.\\u003cinit\\u003e\":546,\"\\u003creturn\\u003e\":1318,\"Arquivo.setEnderecoServidor()\":1088,\"ResultSet.next()\":490,\"Statement.close()\":1360,\"Arquivo.\\u003cinit\\u003e\":1018,\"String:\\u0027;\":317,\"MySQLConnectionFactory.open()\":103,\"Conhecimento.setNome()\":597,\"Conhecimento.adcionaArquivo()\":1163,\"null:null\":132,\"\\u003d\":387,\"\\u003cnullcheck\\u003e\":224,\"Statement.executeQuery()\":469,\"UNKNOWN.println()\":1500,\"SQLException.printStackTrace()\":1535},\"rawCode\":\"public Conhecimento getConhecimento(String nome) {\\r\\n\\r\\n\\t\\tConnection conn \\u003d MySQLConnectionFactory.open();\\r\\n\\t\\t\\r\\n\\t\\tStatement stm \\u003d null;\\r\\n\\r\\n\\t\\ttry {\\r\\n\\r\\n\\t\\t\\tstm \\u003d conn.createStatement();\\r\\n\\t\\t\\tString SQL \\u003d \\\"\\\"; \\t\\r\\n\\t\\t\\tif (nome !\\u003d null) {\\r\\n\\t\\t\\t\\tSQL \\u003d \\\" SELECT nome, descricao FROM conhecimento WHERE \\\"+\\r\\n\\t\\t\\t\\t\\\" nome \\u003d \\u0027\\\"+nome+\\\"\\u0027;\\\";\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\tSQL \\u003d \\\" SELECT nome, descricao FROM conhecimento;\\\";\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// System.out.println(SQL);\\r\\n\\t\\t\\tResultSet rs \\u003d stm.executeQuery(SQL);\\r\\n\\r\\n\\t\\t\\tif (rs.next()){\\r\\n\\r\\n\\t\\t\\t\\tConhecimento conhecimento \\u003d new Conhecimento();\\r\\n\\r\\n\\t\\t\\t\\tconhecimento.setNome(rs.getString(\\\"nome\\\"));\\r\\n\\t\\t\\t\\tconhecimento.setDescricao(rs.getString(\\\"descricao\\\"));\\r\\n\\t\\t\\t\\tnome \\u003d rs.getString(\\\"nome\\\") ;\\r\\n\\t\\t\\t\\t\\r\\n\\t\\t\\t\\tSQL \\u003d \\\" SELECT arquivo_id, arquivo_nome, endereco_servidor FROM conhecimento_has_arquivo\\\" +\\r\\n\\t\\t\\t\\t\\\" INNER JOIN arquivo ON id \\u003d arquivo_id\\\" +\\r\\n\\t\\t\\t\\t\\\" WHERE conhecimento_nome \\u003d \\u0027\\\"+nome+\\\"\\u0027;\\\";\\r\\n\\t\\t\\t\\trs \\u003d stm.executeQuery(SQL);\\r\\n\\r\\n\\t\\t\\t\\twhile (rs.next()) {\\r\\n\\t\\t\\t\\t\\tArquivo arquivo \\u003d new Arquivo( rs.getString(\\\"arquivo_nome\\\") );\\r\\n\\t\\t\\t\\t\\tarquivo.setEnderecoServidor(rs.getString(\\\"endereco_servidor\\\"));\\r\\n\\r\\n\\t\\t\\t\\t\\tconhecimento.adcionaArquivo( servicoArquivo.getArquivo(arquivo) ) ;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\r\\n\\t\\t\\t\\treturn conhecimento;\\r\\n\\r\\n\\t\\t\\t}else{\\r\\n\\t\\t\\t\\treturn null;\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t} catch (SQLException e) {\\r\\n\\t\\t\\t//e.printStackTrace();\\r\\n\\t\\t\\treturn null;\\r\\n\\t\\t} finally {\\r\\n\\t\\t\\ttry {\\r\\n\\t\\t\\t\\tstm.close();\\r\\n\\t\\t\\t\\t//conn.close();\\t            \\r\\n\\t\\t\\t} catch (SQLException onConClose) {\\r\\n\\t\\t\\t\\tSystem.out.println(\\\" Houve erro no fechamento da conex�o \\\");\\r\\n\\t\\t\\t\\tonConClose.printStackTrace();\\t             \\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\t\\t\\r\\n\\t}\"}","18":"{\"expressionStart\":{\"DatabaseFactory.close()\":1530,\"BrokerRace.valueOf()\":701,\"Item.getObjectId()\":1147,\"\\u003cr\\u003e\":1132,\"ResultSet.getString()\":556,\"BrokerItem.\\u003cinit\\u003e\":1263,\"String\":658,\"ResultSet.getLong()\":645,\"DatabaseFactory.getConnection()\":222,\"\\u003creturn\\u003e\":1568,\"Logger.error()\":1491,\"ResultSet.next()\":375,\"List.add()\":1247,\"ArrayList.\\u003cinit\\u003e\":93,\"Connection.prepareStatement()\":284,\"ResultSet.close()\":1419,\"PreparedStatement.executeQuery()\":341,\"null:null\":1050,\"MySQL5BrokerDAO.getBrokerItems()\":152,\"int:1\":989,\"ResultSet.getTimestamp()\":840,\"\\u003cbreak\\u003e\":1209,\"PreparedStatement.close()\":1437,\"ResultSet.getInt()\":602},\"expressionEnd\":{\"DatabaseFactory.close()\":1556,\"BrokerRace.valueOf()\":749,\"Item.getObjectId()\":1167,\"\\u003cr\\u003e\":1167,\"ResultSet.getString()\":580,\"BrokerItem.\\u003cinit\\u003e\":1406,\"String\":665,\"ResultSet.getLong()\":666,\"DatabaseFactory.getConnection()\":253,\"\\u003creturn\\u003e\":1587,\"Logger.error()\":1503,\"ResultSet.next()\":386,\"List.add()\":1407,\"ArrayList.\\u003cinit\\u003e\":120,\"Connection.prepareStatement()\":318,\"ResultSet.close()\":1431,\"PreparedStatement.executeQuery()\":360,\"null:null\":1054,\"MySQL5BrokerDAO.getBrokerItems()\":168,\"int:1\":990,\"ResultSet.getTimestamp()\":871,\"\\u003cbreak\\u003e\":1215,\"PreparedStatement.close()\":1449,\"ResultSet.getInt()\":625},\"rawCode\":\"@Override\\r\\n\\tpublic List\\u003cBrokerItem\\u003e loadBroker()\\r\\n\\t{\\r\\n\\t\\tfinal List\\u003cBrokerItem\\u003e brokerItems \\u003d new ArrayList\\u003cBrokerItem\\u003e();\\r\\n\\r\\n\\t\\tfinal List\\u003cItem\\u003e items \\u003d getBrokerItems();\\r\\n\\r\\n\\t\\tConnection con \\u003d null;\\r\\n\\r\\n\\t\\ttry\\r\\n\\t\\t{\\r\\n\\t\\t\\tcon \\u003d DatabaseFactory.getConnection();\\r\\n\\t\\t\\tPreparedStatement stmt \\u003d con.prepareStatement(SELECT_QUERY);\\r\\n\\t\\t\\tResultSet rset \\u003d stmt.executeQuery();\\r\\n\\r\\n\\t\\t\\twhile (rset.next())\\r\\n\\t\\t\\t{\\r\\n\\t\\t\\t\\tint itemPointer \\u003d rset.getInt(\\\"itemPointer\\\");\\r\\n\\t\\t\\t\\tint itemId \\u003d rset.getInt(\\\"itemId\\\");\\r\\n\\t\\t\\t\\tlong itemCount \\u003d rset.getLong(\\\"itemCount\\\");\\r\\n\\t\\t\\t\\tString seller \\u003d rset.getString(\\\"seller\\\");\\r\\n\\t\\t\\t\\tint sellerId \\u003d rset.getInt(\\\"sellerId\\\");\\r\\n\\t\\t\\t\\tlong price \\u003d rset.getLong(\\\"price\\\");\\r\\n\\t\\t\\t\\tBrokerRace itemBrokerRace \\u003d BrokerRace.valueOf(rset.getString(\\\"brokerRace\\\"));\\r\\n\\t\\t\\t\\tTimestamp expireTime \\u003d rset.getTimestamp(\\\"expireTime\\\");\\r\\n\\t\\t\\t\\tTimestamp settleTime \\u003d rset.getTimestamp(\\\"settleTime\\\");\\r\\n\\t\\t\\t\\tint sold \\u003d rset.getInt(\\\"isSold\\\");\\r\\n\\t\\t\\t\\tint settled \\u003d rset.getInt(\\\"isSettled\\\");\\r\\n\\r\\n\\t\\t\\t\\tboolean isSold \\u003d sold \\u003d\\u003d 1;\\r\\n\\t\\t\\t\\tboolean isSettled \\u003d settled \\u003d\\u003d 1;\\r\\n\\r\\n\\t\\t\\t\\tItem item \\u003d null;\\r\\n\\t\\t\\t\\tif (!isSold)\\r\\n\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\t\\tfor (Item brItem : items)\\r\\n\\t\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\t\\t\\tif (itemPointer \\u003d\\u003d brItem.getObjectId())\\r\\n\\t\\t\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\t\\t\\t\\titem \\u003d brItem;\\r\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tbrokerItems.add(new BrokerItem(item, itemId, itemPointer, itemCount, price, seller, sellerId, itemBrokerRace, isSold, isSettled, expireTime,\\r\\n\\t\\t\\t\\t\\t\\tsettleTime));\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\trset.close();\\r\\n\\t\\t\\tstmt.close();\\r\\n\\t\\t}\\r\\n\\t\\tcatch (SQLException e)\\r\\n\\t\\t{\\r\\n\\t\\t\\tlog.error(e);\\r\\n\\t\\t}\\r\\n\\t\\tfinally\\r\\n\\t\\t{\\r\\n\\t\\t\\tDatabaseFactory.close(con);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn brokerItems;\\r\\n\\t}\"}","19":"{\"expressionStart\":{\"\\u003cthrow\\u003e\":902,\"PreparedStatement.executeUpdate()\":1776,\"byte[].arrayset()\":520,\"\\u003cr\\u003e\":806,\"String\":1310,\"{char}\":351,\"ResultSet.next()\":2113,\"Exception.\\u003cinit\\u003e\":908,\"ResultSet.close()\":3433,\"{byte}\":389,\"int:2\":1755,\"byte[].arrayget()\":853,\"int:1\":1442,\"\\u003cnullcheck\\u003e\":2530,\"int:0\":436,\"PreparedStatement.setString()\":1984,\"String.\\u003cinit\\u003e\":653,\"String.length()\":2582,\"PreparedStatement.clearParameters()\":1942,\"String:\":3264,\"char[].arrayget()\":3291,\"ResultSet.getString()\":2161,\"ByteStorageConversion.toByte()\":720,\"int\":323,\"int.\\u003ccast\\u003e\":3285,\"ByteStorageConversion.toChar()\":574,\"Connection.prepareStatement()\":1269,\"PreparedStatement.executeQuery()\":2038,\"String.toCharArray()\":2406,\"byte.\\u003ccast\\u003e\":531,\"null:null\":2091,\"\\u003ca\\u003e\":484,\"PreparedStatement.close()\":3567},\"expressionEnd\":{\"\\u003cthrow\\u003e\":1033,\"PreparedStatement.executeUpdate()\":1801,\"byte[].arrayset()\":528,\"\\u003cr\\u003e\":820,\"String\":1364,\"{char}\":365,\"ResultSet.next()\":2122,\"Exception.\\u003cinit\\u003e\":1032,\"ResultSet.close()\":3443,\"{byte}\":403,\"int:2\":1756,\"byte[].arrayget()\":859,\"int:1\":1443,\"\\u003cnullcheck\\u003e\":2542,\"int:0\":437,\"PreparedStatement.setString()\":2019,\"String.\\u003cinit\\u003e\":668,\"String.length()\":2595,\"PreparedStatement.clearParameters()\":1970,\"String:\":3266,\"char[].arrayget()\":3297,\"ResultSet.getString()\":2176,\"ByteStorageConversion.toByte()\":779,\"int\":327,\"int.\\u003ccast\\u003e\":3297,\"ByteStorageConversion.toChar()\":630,\"Connection.prepareStatement()\":1365,\"PreparedStatement.executeQuery()\":2063,\"String.toCharArray()\":2424,\"byte.\\u003ccast\\u003e\":540,\"null:null\":2095,\"\\u003ca\\u003e\":488,\"PreparedStatement.close()\":3585},\"rawCode\":\"public void testUTF8Transport(Connection connection) throws Exception\\n    {\\n        /*\\n         * byte[] b \\u003d new byte[102400]; byte[] b2 \\u003d new byte[102400]; byte[] b3 \\u003d\\n         * new byte[102400]; char[] cin \\u003d new char[102400]; Random r \\u003d new\\n         * Random(); r.nextBytes(b);\\n         */\\n        byte[] bin \\u003d new byte[1024];\\n        char[] cin \\u003d new char[1024];\\n        byte[] bout \\u003d new byte[1024];\\n\\n        {\\n            int i \\u003d 0;\\n            for (int bx \\u003d 0; i \\u003c bin.length; bx++)\\n            {\\n                bin[i++] \\u003d (byte) bx;\\n            }\\n        }\\n        ByteStorageConversion.toChar(bin, 0, cin, 0, cin.length);\\n        String sin \\u003d new String(cin);\\n\\n        char[] cout \\u003d sin.toCharArray();\\n        ByteStorageConversion.toByte(cout, 0, bout, 0, cout.length);\\n\\n        for (int i \\u003d 0; i \\u003c bin.length; i++)\\n        {\\n            if (bin[i] !\\u003d bout[i])\\n            {\\n                throw new Exception(\\\"Internal Byte conversion failed at \\\" + bin[i] + \\\"\\u003d\\u003e\\\"\\n                        + (int) cin[i] + \\\"\\u003d\\u003e\\\" + bout[i]);\\n            }\\n        }\\n\\n        PreparedStatement statement \\u003d null;\\n        PreparedStatement statement2 \\u003d null;\\n        PreparedStatement statement3 \\u003d null;\\n        ResultSet rs \\u003d null;\\n        try\\n        {\\n            statement3 \\u003d connection\\n            .prepareStatement(\\\"delete from CONTENT_RESOURCE where  RESOURCE_ID \\u003d  ?\\\");\\n            statement3.clearParameters();\\n            statement3.setString(1, UTF8TESTID);\\n            statement3.executeUpdate();\\n\\n            statement \\u003d connection\\n            .prepareStatement(\\\"insert into CONTENT_RESOURCE ( RESOURCE_ID, XML ) values ( ?, ? )\\\");\\n            statement.clearParameters();\\n            statement.setString(1, UTF8TESTID);\\n            statement.setString(2, sin);\\n            statement.executeUpdate();\\n\\n            statement2 \\u003d connection\\n            .prepareStatement(\\\"select XML from CONTENT_RESOURCE where RESOURCE_ID \\u003d ? \\\");\\n            statement2.clearParameters();\\n            statement2.setString(1, UTF8TESTID);\\n            rs \\u003d statement2.executeQuery();\\n            String sout \\u003d null;\\n            if (rs.next())\\n            {\\n                sout \\u003d rs.getString(1);\\n            }\\n            rs.close();\\n\\n\\n            statement3.clearParameters();\\n            statement3.setString(1, UTF8TESTID);\\n            statement3.executeUpdate();\\n\\n\\n            if (sout !\\u003d null) {\\n                cout \\u003d sout.toCharArray();\\n            }\\n            ByteStorageConversion.toByte(cout, 0, bout, 0, cout.length);\\n\\n            if (sout !\\u003d null) {\\n                if (sin.length() !\\u003d sout.length())\\n                {\\n                    throw new Exception(\\n                            \\\"UTF-8 Data was lost communicating with the database, please \\\"\\n                            + \\\"check connection string and default table types (Truncation/Expansion)\\\");\\n                }\\n            }\\n\\n            for (int i \\u003d 0; i \\u003c bin.length; i++)\\n            {\\n                if (bin[i] !\\u003d bout[i])\\n                {\\n                    throw new Exception(\\n                            \\\"UTF-8 Data was corrupted communicating with the database, \\\"\\n                            + \\\"please check connectionstring and default table types (Conversion)\\\"\\n                            + \\\"\\\" + bin[i] + \\\"\\u003d\\u003e\\\" + (int) cin[i] + \\\"\\u003d\\u003e\\\" + bout[i]);\\n                }\\n            }\\n\\n\\n        }\\n        finally\\n        {\\n            try\\n            {\\n                rs.close();\\n            }\\n            catch (Exception ex)\\n            {\\n\\n            }\\n            try\\n            {\\n                statement3.close();\\n            }\\n            catch (Exception ex)\\n            {\\n\\n            }\\n            try\\n            {\\n                statement2.close();\\n            }\\n            catch (Exception ex)\\n            {\\n\\n            }\\n            try\\n            {\\n                statement.close();\\n            }\\n            catch (Exception ex)\\n            {\\n\\n            }\\n        }\\n\\n    }\"}","20":"{\"expressionStart\":{\"String.equals()\":3413,\"boolean:false\":130,\"\\u003cr\\u003e\":954,\"String\":3425,\"ResultSet.getBlob()\":1042,\"Matcher.group()\":3308,\"ContentServiceSql.getContextFilesizeValuesSql()\":604,\"ResultSetMetaData.getColumnCount()\":907,\"int:5\":4039,\"int:4\":1057,\"int:3\":291,\"Matcher.find()\":3066,\"Object[].arrayset()\":4662,\"int:2\":241,\"M_log.info()\":3564,\"int:1\":190,\"int:0\":527,\"Pattern.matcher()\":2548,\"\\u003cnullcheck\\u003e\":767,\"{Object}\":4028,\"SqlService.dbWrite()\":4291,\"Integer.valueOf()\":4674,\"ResultSet.getMetaData()\":843,\"ResultSet.getString()\":224,\"M_log.warn()\":4933,\"IdManager.createUuid()\":413,\"UNKNOWN.matcher()\":712,\"\\u003creturn\\u003e\":5048,\"boolean:true\":380,\"null:null\":568,\"Integer.parseInt()\":2741},\"expressionEnd\":{\"String.equals()\":3434,\"boolean:false\":135,\"\\u003cr\\u003e\":973,\"String\":3433,\"ResultSet.getBlob()\":1059,\"Matcher.group()\":3331,\"ContentServiceSql.getContextFilesizeValuesSql()\":668,\"ResultSetMetaData.getColumnCount()\":928,\"int:5\":4040,\"int:4\":1058,\"int:3\":292,\"Matcher.find()\":3086,\"Object[].arrayset()\":4671,\"int:2\":242,\"M_log.info()\":3756,\"int:1\":191,\"int:0\":528,\"Pattern.matcher()\":2577,\"\\u003cnullcheck\\u003e\":778,\"{Object}\":4041,\"SqlService.dbWrite()\":4324,\"Integer.valueOf()\":4699,\"ResultSet.getMetaData()\":863,\"ResultSet.getString()\":243,\"M_log.warn()\":5019,\"IdManager.createUuid()\":437,\"UNKNOWN.matcher()\":746,\"\\u003creturn\\u003e\":5060,\"boolean:true\":384,\"null:null\":572,\"Integer.parseInt()\":2783},\"rawCode\":\"public Object readSqlResultRecord(ResultSet result) \\n        {\\n            try\\n            {\\n                boolean addingUuid \\u003d false;\\n                String resourceId \\u003d result.getString(1);\\n                String uuid \\u003d result.getString(2);\\n                String xml \\u003d result.getString(3);\\n\\n                if(uuid \\u003d\\u003d null)\\n                {\\n                    addingUuid \\u003d true;\\n                    uuid \\u003d uuidManager.createUuid();\\n                }\\n                String context \\u003d null;\\n                int filesize \\u003d 0;\\n                String resourceType \\u003d null;\\n\\n                String sql \\u003d contentServiceSql.getContextFilesizeValuesSql(table, addingUuid);\\n\\n                Matcher contextMatcher \\u003d contextPattern.matcher(resourceId);\\n                if(xml \\u003d\\u003d null)\\n                {\\n                    ResultSetMetaData rsmd \\u003d result.getMetaData();\\n                    int numberOfColumns \\u003d rsmd.getColumnCount();\\n\\n                    if(numberOfColumns \\u003e 3)\\n                    {\\n                        Blob binary_entity \\u003d result.getBlob(4);\\n                        // this is meant to match against the binary-entity value in cases where \\n                        // xml is null (meaning xml may have already been converted). \\n                        //\\t\\t\\t\\t\\t\\tMatcher filesizeMatcher \\u003d filesizePattern2.matcher(xml);\\n                        //\\t\\t\\t\\t\\t\\tif(filesizeMatcher.find())\\n                        //\\t\\t\\t\\t\\t\\t{\\n                        //\\t\\t\\t\\t\\t\\t\\ttry\\n                        //\\t\\t\\t\\t\\t\\t\\t{\\n                        //\\t\\t\\t\\t\\t\\t\\t\\tfilesize \\u003d Integer.parseInt(filesizeMatcher.group(1));\\n                        //\\t\\t\\t\\t\\t\\t\\t}\\n                        //\\t\\t\\t\\t\\t\\t\\tcatch(Exception e)\\n                        //\\t\\t\\t\\t\\t\\t\\t{\\n                        //\\t\\t\\t\\t\\t\\t\\t\\t// do nothing\\n                        //\\t\\t\\t\\t\\t\\t\\t}\\n                        //\\t\\t\\t\\t\\t\\t}\\n                        //\\t\\t\\t\\t\\t\\tMatcher typeidMatcher \\u003d typeidPattern2.matcher(xml);\\n                        //\\t\\t\\t\\t\\t\\tif(typeidMatcher.find())\\n                        //\\t\\t\\t\\t\\t\\t{\\n                        //\\t\\t\\t\\t\\t\\t\\tresourceType \\u003d typeidMatcher.group(1);\\n                        //\\t\\t\\t\\t\\t\\t}\\n                    }\\n                    else\\n                    {\\n                        // Do nothing.  The binary-entity value is not available here.  \\n                        // Best to skip the record until we provide a query that gets \\n                        // the binary-entity value in this context.\\n                    }\\n                }\\n                else\\n                {\\n                    Matcher filesizeMatcher \\u003d filesizePattern1.matcher(xml);\\n                    if(filesizeMatcher.find())\\n                    {\\n                        try\\n                        {\\n                            filesize \\u003d Integer.parseInt(filesizeMatcher.group(1));\\n                        }\\n                        catch(Exception e)\\n                        {\\n                            // do nothing\\n                        }\\n                    }\\n                    Matcher typeidMatcher \\u003d typeidPattern1.matcher(xml);\\n                    if(typeidMatcher.find())\\n                    {\\n                        resourceType \\u003d typeidMatcher.group(1);\\n                    }\\n                }\\n\\n                if(contextMatcher.find())\\n                {\\n                    String root \\u003d contextMatcher.group(1);\\n                    context \\u003d contextMatcher.group(2);\\n                    if(! root.equals(\\\"group/\\\"))\\n                    {\\n                        context \\u003d \\\"~\\\" + context;\\n                    }\\n                }\\n\\n                M_log.info(\\\"adding new field values: resourceId \\u003d\\u003d \\\\\\\"\\\" + resourceId + \\\"\\\\\\\" uuid \\u003d\\u003d \\\\\\\"\\\" + uuid + \\\"\\\\\\\" context \\u003d\\u003d \\\\\\\"\\\" + context + \\\"\\\\\\\" filesize \\u003d\\u003d \\\\\\\"\\\" + filesize + \\\"\\\\\\\" addingUuid \\u003d\\u003d \\\" + addingUuid);\\n\\n                if(addingUuid)\\n                {\\n                    // \\\"update \\\" + table + \\\" set CONTEXT \\u003d ?, FILE_SIZE \\u003d ?, RESOURCE_TYPE_ID \\u003d ?, RESOURCE_UUID \\u003d ? where RESOURCE_ID \\u003d ?\\\"\\n                    // update the record\\n                    Object [] fields \\u003d new Object[5];\\n                    fields[0] \\u003d context;\\n                    fields[1] \\u003d Integer.valueOf(filesize);\\n                    fields[2] \\u003d resourceType;\\n                    fields[3] \\u003d uuid;\\n                    fields[4] \\u003d resourceId;\\n                    m_sqlService.dbWrite(sql, fields);\\n                }\\n                else\\n                {\\n                    // \\\"update \\\" + table + \\\" set CONTEXT \\u003d ?, FILE_SIZE \\u003d ?, RESOURCE_TYPE_ID \\u003d ? where RESOURCE_UUID \\u003d ?\\\"\\n                    // update the record\\n                    Object [] fields \\u003d new Object[4];\\n                    fields[0] \\u003d context;\\n                    fields[1] \\u003d Integer.valueOf(filesize);\\n                    fields[2] \\u003d resourceType;\\n                    fields[3] \\u003d uuid;\\n                    m_sqlService.dbWrite(sql, fields);\\n                }\\n            }\\n            catch(Exception e)\\n            {\\n                M_log.warn(\\\"ContextAndFilesizeReader.readSqlResultRecord() failed. result skipped\\\", e);\\n            }\\n\\n            return null;\\n        }\"}","21":"{\"expressionStart\":{\"ResultSet.getString()\":957,\"UNKNOWN.equals()\":1649,\"M_log.warn()\":1741,\"Document.getDocumentElement()\":1594,\"Element.getTagName()\":1802,\"String\":605,\"\\u003creturn\\u003e\":1850,\"Xml.readDocumentFromString()\":1262,\"M_log.debug()\":593,\"ResultSet.getObject()\":214,\"UNKNOWN.parse()\":399,\"null:null\":1857,\"byte[].\\u003ccast\\u003e\":430,\"BaseResourceEdit.\\u003cinit\\u003e\":351,\"int:2\":974,\"byte[].\\u003cinstanceof\\u003e\":274,\"int:1\":231,\"\\u003cnullcheck\\u003e\":1323},\"expressionEnd\":{\"ResultSet.getString()\":976,\"UNKNOWN.equals()\":1685,\"M_log.warn()\":1820,\"Document.getDocumentElement()\":1618,\"Element.getTagName()\":1819,\"String\":641,\"\\u003creturn\\u003e\":1862,\"Xml.readDocumentFromString()\":1293,\"M_log.debug()\":642,\"ResultSet.getObject()\":233,\"UNKNOWN.parse()\":444,\"null:null\":1861,\"byte[].\\u003ccast\\u003e\":443,\"BaseResourceEdit.\\u003cinit\\u003e\":373,\"int:2\":975,\"byte[].\\u003cinstanceof\\u003e\":296,\"int:1\":232,\"\\u003cnullcheck\\u003e\":1334},\"rawCode\":\"public Object readSqlResultRecord(ResultSet result) \\n            {\\n                BaseResourceEdit edit \\u003d null;\\n                Object clob \\u003d null;\\n                try\\n                {\\n                    clob \\u003d result.getObject(1);\\n                    if(clob !\\u003d null \\u0026\\u0026 clob instanceof byte[])\\n                    {\\n                        edit \\u003d new BaseResourceEdit();\\n                        resourceSerializer.parse(edit, (byte[]) clob);\\n                    }\\n                }\\n                catch(SQLException e)\\n                {\\n                    // ignore?\\n                    M_log.debug(\\\"SqlException unable to read entity\\\");\\n                }\\n                catch(EntityParseException e)\\n                {\\n                    M_log.warn(\\\"EntityParseException unable to parse entity\\\");\\n                }\\n                if(edit \\u003d\\u003d null)\\n                {\\n                    try\\n                    {\\n                        String xml \\u003d result.getString(2);\\n                        if (xml \\u003d\\u003d null)\\n                        {\\n                            M_log.warn(\\\"EntityReader: null xml : \\\" );\\n                            return null;\\n                        }\\n\\n                        // read the xml\\n                        Document doc \\u003d Xml.readDocumentFromString(xml);\\n                        if (doc \\u003d\\u003d null)\\n                        {\\n                            M_log.warn(\\\"EntityReader: null xml doc : \\\" );\\n                            return null;\\n                        }\\n\\n                        // verify the root element\\n                        Element root \\u003d doc.getDocumentElement();\\n                        if (!root.getTagName().equals(\\\"resource\\\"))\\n                        {\\n                            M_log.warn(\\\"EntityReader: XML root element not resource: \\\" + root.getTagName());\\n                            return null;\\n                        }\\n                        edit \\u003d new BaseResourceEdit(root);\\n\\n                    }\\n                    catch(SQLException e)\\n                    {\\n                        M_log.debug(\\\"SqlException problem with results\\\");\\n                    }\\n                }\\n                return edit;\\n            }\"}","22":"{\"expressionStart\":{\"TimeEntry.\\u003cinit\\u003e\":230,\"ResultSet.getString()\":138,\"null:null\":485,\"ResultSet.toString()\":411,\"M_log.warn()\":361,\"ResultSet.getLong()\":187,\"Long.valueOf()\":265,\"String\":372,\"int:2\":202,\"\\u003creturn\\u003e\":478,\"int:1\":155},\"expressionEnd\":{\"TimeEntry.\\u003cinit\\u003e\":284,\"ResultSet.getString()\":157,\"null:null\":489,\"ResultSet.toString()\":428,\"M_log.warn()\":450,\"ResultSet.getLong()\":204,\"Long.valueOf()\":283,\"String\":408,\"int:2\":203,\"\\u003creturn\\u003e\":490,\"int:1\":156},\"rawCode\":\"public Object readSqlResultRecord(ResultSet result) \\n        {\\n            try\\n            {\\n                String individualDropboxId \\u003d result.getString(1);\\n                long time \\u003d result.getLong(2);\\n\\n                return new TimeEntry(individualDropboxId, Long.valueOf(time));\\n            }\\n            catch(Exception e)\\n            {\\n                M_log.warn(\\\"TimeReader.readSqlResultRecord(): \\\" + result.toString() + \\\" exception: \\\" + e);\\n            }\\n            return null;\\n        }\"}","23":"{\"expressionStart\":{\"ArrayList.add()\":360,\"\\u003cthrow\\u003e\":453,\"ResultSet.close()\":390,\"SQLException.\\u003cinit\\u003e\":459,\"ResultSet.getString()\":330,\"String\":161,\"\\u003creturn\\u003e\":405,\"Statement.executeQuery()\":256,\"ResultSet.next()\":295,\"SQLException.getMessage()\":476,\"ArrayList.\\u003cinit\\u003e\":119},\"expressionEnd\":{\"ArrayList.add()\":380,\"\\u003cthrow\\u003e\":493,\"ResultSet.close()\":400,\"SQLException.\\u003cinit\\u003e\":492,\"ResultSet.getString()\":354,\"String\":236,\"\\u003creturn\\u003e\":419,\"Statement.executeQuery()\":283,\"ResultSet.next()\":304,\"SQLException.getMessage()\":491,\"ArrayList.\\u003cinit\\u003e\":142},\"rawCode\":\"public ArrayList\\u003cString\\u003e getAllEntryTableNames() throws SQLException {\\n\\t\\tString sql \\u003d \\\"\\\";\\n\\t\\tArrayList\\u003cString\\u003e tables \\u003d new ArrayList\\u003cString\\u003e();\\n\\t\\ttry {\\n\\t\\t\\tsql \\u003d \\\"SELECT `InfoName` FROM `vcf_analyzer`.`InfoTable` ORDER BY `InfoName` ASC\\\";\\n\\t\\t\\tResultSet rs \\u003d this.stmt.executeQuery(sql);\\n\\t\\t\\twhile (rs.next()) {\\n\\t\\t\\t\\tString infoName \\u003d rs.getString(\\\"InfoName\\\");\\n\\t\\t\\t\\ttables.add(infoName);\\n\\t\\t\\t}\\n\\t\\t\\trs.close();\\n\\t\\t\\treturn tables;\\n\\t\\t} catch (SQLException se) {\\n\\t\\t\\tthrow new SQLException(se.getMessage());\\n\\t\\t}\\n\\t}\"}","24":"{\"expressionStart\":{\"String.format()\":210,\"\\u003cthrow\\u003e\":755,\"SQLException.\\u003cinit\\u003e\":761,\"ResultSet.getString()\":499,\"FilterParameter.\\u003cinit\\u003e\":609,\"String\":512,\"\\u003creturn\\u003e\":802,\"ResultSet.next()\":367,\"ArrayList.\\u003cinit\\u003e\":140,\"ArrayList.add()\":688,\"Statement.executeQuery()\":333,\"SQLException.getMessage()\":778,\"ResultSet.getInt()\":450},\"expressionEnd\":{\"String.format()\":313,\"\\u003cthrow\\u003e\":795,\"SQLException.\\u003cinit\\u003e\":794,\"ResultSet.getString()\":525,\"FilterParameter.\\u003cinit\\u003e\":682,\"String\":524,\"\\u003creturn\\u003e\":827,\"ResultSet.next()\":376,\"ArrayList.\\u003cinit\\u003e\":172,\"ArrayList.add()\":715,\"Statement.executeQuery()\":355,\"SQLException.getMessage()\":793,\"ResultSet.getInt()\":473},\"rawCode\":\"public ArrayList\\u003cFilterParameter\\u003e getFilterIndividuals(int FilId)\\n\\t\\t\\tthrows SQLException {\\n\\t\\tArrayList\\u003cFilterParameter\\u003e filterIndividuals \\u003d new ArrayList\\u003cFilterParameter\\u003e();\\n\\t\\tString sql \\u003d \\\"\\\";\\n\\t\\ttry {\\n\\t\\t\\tsql \\u003d String\\n\\t\\t\\t\\t\\t.format(\\\"SELECT * FROM `vcf_analyzer`.`FilterIndividual` WHERE `FilId`\\u003d\\u0027%d\\u0027\\\",\\n\\t\\t\\t\\t\\t\\t\\tFilId);\\n\\t\\t\\tResultSet rs \\u003d stmt.executeQuery(sql);\\n\\t\\t\\twhile (rs.next()) {\\n\\t\\t\\t\\tString tableName \\u003d rs.getString(\\\"GenoName\\\");\\n\\t\\t\\t\\tint comparison \\u003d rs.getInt(\\\"Comparison\\\");\\n\\t\\t\\t\\tString comparator \\u003d rs.getString(\\\"Comparator\\\");\\n\\t\\t\\t\\tString comparator2 \\u003d rs.getString(\\\"Comparator2\\\");\\n\\n\\t\\t\\t\\tFilterParameter temp \\u003d new FilterParameter(tableName,\\n\\t\\t\\t\\t\\t\\tcomparison, comparator, comparator2);\\n\\t\\t\\t\\tfilterIndividuals.add(temp);\\n\\t\\t\\t}\\n\\t\\t} catch (SQLException se) {\\n\\t\\t\\tthrow new SQLException(se.getMessage());\\n\\t\\t}\\n\\t\\treturn filterIndividuals;\\n\\t}\"}","25":"{\"expressionStart\":{\"String.format()\":366,\"Integer.parseInt()\":521,\"ResultSet.getString()\":538,\"DatabaseConnector.reopenConnectionAndStatement()\":319,\"String\":551,\"DatabaseConnector.hasOpenStatementAndConnection()\":283,\"\\u003creturn\\u003e\":514,\"Statement.executeQuery()\":483},\"expressionEnd\":{\"String.format()\":464,\"Integer.parseInt()\":560,\"ResultSet.getString()\":559,\"DatabaseConnector.reopenConnectionAndStatement()\":349,\"String\":558,\"DatabaseConnector.hasOpenStatementAndConnection()\":314,\"\\u003creturn\\u003e\":561,\"Statement.executeQuery()\":510},\"rawCode\":\"/**\\n\\t * TODO: Finish Testing\\n\\t * \\n\\t * @param tableName\\n\\t *            , String idName\\n\\t * \\n\\t * @return\\n\\t * @throws SQLException\\n\\t * @throws ClassNotFoundException\\n\\t */\\n\\tprivate int getHighestId(String tableName, String idName)\\n\\t\\t\\tthrows ClassNotFoundException, SQLException {\\n\\t\\tif (!hasOpenStatementAndConnection())\\n\\t\\t\\treopenConnectionAndStatement();\\n\\t\\tString sql \\u003d String.format(\\n\\t\\t\\t\\t\\\"SELECT %s FROM %s ORDER BY %s desc LIMIT 0,1;\\\", idName,\\n\\t\\t\\t\\ttableName, idName);\\n\\t\\tResultSet rs \\u003d this.stmt.executeQuery(sql);\\n\\t\\treturn Integer.parseInt(rs.getString(\\\"DivID\\\"));\\n\\t}\"}","26":"{\"expressionStart\":{\"\\u003cthrow\\u003e\":502,\"ArrayList.add()\":403,\"ResultSet.close()\":439,\"SQLException.\\u003cinit\\u003e\":508,\"ResultSet.getString()\":326,\"String\":339,\"\\u003creturn\\u003e\":454,\"ResultSet.next()\":291,\"EntryFixedInfo.contains()\":361,\"Statement.executeQuery()\":252,\"ArrayList.\\u003cinit\\u003e\":115,\"SQLException.getMessage()\":525},\"expressionEnd\":{\"\\u003cthrow\\u003e\":542,\"ArrayList.add()\":423,\"ResultSet.close()\":449,\"SQLException.\\u003cinit\\u003e\":541,\"ResultSet.getString()\":350,\"String\":349,\"\\u003creturn\\u003e\":468,\"ResultSet.next()\":300,\"EntryFixedInfo.contains()\":394,\"Statement.executeQuery()\":279,\"ArrayList.\\u003cinit\\u003e\":138,\"SQLException.getMessage()\":540},\"rawCode\":\"public ArrayList\\u003cString\\u003e getInfoTableNames() throws SQLException {\\n\\t\\tString sql \\u003d \\\"\\\";\\n\\t\\tArrayList\\u003cString\\u003e tables \\u003d new ArrayList\\u003cString\\u003e();\\n\\t\\ttry {\\n\\t\\t\\tsql \\u003d \\\"SELECT `InfoName` FROM `vcf_analyzer`.`InfoTable` ORDER BY `InfoName` ASC\\\";\\n\\t\\t\\tResultSet rs \\u003d this.stmt.executeQuery(sql);\\n\\t\\t\\twhile (rs.next()) {\\n\\t\\t\\t\\tString infoName \\u003d rs.getString(\\\"InfoName\\\");\\n\\t\\t\\t\\tif (!EntryFixedInfo.contains(infoName)) {\\n\\t\\t\\t\\t\\ttables.add(infoName);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\trs.close();\\n\\t\\t\\treturn tables;\\n\\t\\t} catch (SQLException se) {\\n\\t\\t\\tthrow new SQLException(se.getMessage());\\n\\t\\t}\\n\\t}\"}","27":"{\"expressionStart\":{\"\\u003cthrow\\u003e\":469,\"String:\\u0027\":204,\"String:\":103,\"Long.parseLong()\":286,\"ResultSet.close()\":329,\"SQLException.\\u003cinit\\u003e\":475,\"ResultSet.getString()\":301,\"String\":314,\"\\u003creturn\\u003e\":345,\"ResultSet.next()\":259,\"Statement.executeQuery()\":227,\"IllegalArgumentException.\\u003cinit\\u003e\":371},\"expressionEnd\":{\"\\u003cthrow\\u003e\":516,\"String:\\u0027\":207,\"String:\":105,\"Long.parseLong()\":323,\"ResultSet.close()\":339,\"SQLException.\\u003cinit\\u003e\":515,\"ResultSet.getString()\":322,\"String\":321,\"\\u003creturn\\u003e\":355,\"ResultSet.next()\":268,\"Statement.executeQuery()\":249,\"IllegalArgumentException.\\u003cinit\\u003e\":433},\"rawCode\":\"public long getVcfId(String vcfName) throws IllegalArgumentException,\\n\\t\\t\\tSQLException {\\n\\t\\tString sql \\u003d \\\"\\\";\\n\\t\\ttry {\\n\\t\\t\\tsql \\u003d \\\"SELECT `VcfId` FROM `vcf_analyzer`.`Vcf` WHERE `VcfName` \\u003d \\u0027\\\"\\n\\t\\t\\t\\t\\t+ vcfName + \\\"\\u0027\\\";\\n\\t\\t\\tResultSet rs \\u003d stmt.executeQuery(sql);\\n\\n\\t\\t\\tif (rs.next()) {\\n\\t\\t\\t\\tlong id \\u003d Long.parseLong(rs.getString(\\\"VcfId\\\"));\\n\\t\\t\\t\\trs.close();\\n\\t\\t\\t\\treturn id;\\n\\t\\t\\t}\\n\\n\\t\\t\\tthrow new IllegalArgumentException(\\\"VCF: \\\" + vcfName + \\\" not found\\\");\\n\\n\\t\\t} catch (SQLException se) {\\n\\t\\t\\tthrow new SQLException(\\\"Invalid Query \\\" + sql);\\n\\t\\t}\\n\\t}\"}","28":"{\"expressionStart\":{\"\\u003cthrow\\u003e\":365,\"String:\":105,\"String:\\u0027\":209,\"SQLException.\\u003cinit\\u003e\":489,\"ResultSet.close()\":325,\"ResultSet.getString()\":297,\"String\":310,\"\\u003creturn\\u003e\":341,\"ResultSet.next()\":264,\"IllegalArgumentException.\\u003cinit\\u003e\":371,\"Statement.executeQuery()\":232},\"expressionEnd\":{\"\\u003cthrow\\u003e\":448,\"String:\":107,\"String:\\u0027\":212,\"SQLException.\\u003cinit\\u003e\":530,\"ResultSet.close()\":335,\"ResultSet.getString()\":319,\"String\":318,\"\\u003creturn\\u003e\":355,\"ResultSet.next()\":273,\"IllegalArgumentException.\\u003cinit\\u003e\":447,\"Statement.executeQuery()\":254},\"rawCode\":\"public String getVcfHeader(long vcfId) throws IllegalArgumentException,\\n\\t\\t\\tSQLException {\\n\\t\\tString sql \\u003d \\\"\\\";\\n\\t\\ttry {\\n\\t\\t\\tsql \\u003d \\\"SELECT `Header` FROM `vcf_analyzer`.`VcfHeader` WHERE `VcfId` \\u003d \\u0027\\\"\\n\\t\\t\\t\\t\\t+ vcfId + \\\"\\u0027\\\";\\n\\t\\t\\tResultSet rs \\u003d stmt.executeQuery(sql);\\n\\n\\t\\t\\tif (rs.next()) {\\n\\t\\t\\t\\tString result \\u003d rs.getString(\\\"Header\\\");\\n\\t\\t\\t\\trs.close();\\n\\t\\t\\t\\treturn result;\\n\\t\\t\\t}\\n\\n\\t\\t\\tthrow new IllegalArgumentException(\\\"VCF header for: \\\" + vcfId\\n\\t\\t\\t\\t\\t+ \\\" not found\\\");\\n\\n\\t\\t} catch (SQLException se) {\\n\\t\\t\\tthrow new SQLException(\\\"Invalid Query: \\\" + sql);\\n\\t\\t}\\n\\t}\"}","29":"{\"expressionStart\":{\"String.format()\":163,\"\\u003cthrow\\u003e\":539,\"String:\":142,\"SQLException.\\u003cinit\\u003e\":545,\"ResultSet.close()\":402,\"ResultSet.getString()\":375,\"Integer.parseInt()\":358,\"String\":485,\"\\u003creturn\\u003e\":418,\"Statement.executeQuery()\":299,\"ResultSet.next()\":330},\"expressionEnd\":{\"String.format()\":279,\"\\u003cthrow\\u003e\":586,\"String:\":144,\"SQLException.\\u003cinit\\u003e\":585,\"ResultSet.close()\":412,\"ResultSet.getString()\":395,\"Integer.parseInt()\":396,\"String\":493,\"\\u003creturn\\u003e\":430,\"Statement.executeQuery()\":321,\"ResultSet.next()\":339},\"rawCode\":\"private int getTableDataType(String idName, String tableName,\\n\\t\\t\\tString columnName, String errorName) throws SQLException {\\n\\t\\t\\n\\t\\tString sql \\u003d \\\"\\\";\\n\\t\\ttry {\\n\\t\\t\\tsql \\u003d String.format( \\\"SELECT * FROM `vcf_analyzer`.`%s` WHERE `%s` \\u003d \\u0027%s\\u0027\\\", \\n\\t\\t\\t\\t\\ttableName,\\n\\t\\t\\t\\t\\tcolumnName,\\n\\t\\t\\t\\t\\tidName);\\n\\t\\t\\tResultSet rs \\u003d stmt.executeQuery(sql);\\n\\t\\t\\tif (rs.next()) {\\n\\t\\t\\t\\tint type \\u003d Integer.parseInt(rs.getString(\\\"Type\\\"));\\n\\t\\t\\t\\trs.close();\\n\\t\\t\\t\\treturn type;\\n\\t\\t\\t}\\n\\t\\t\\tthrow new SQLException(\\\"Invalid \\\" +errorName+ \\\" name \\\" + idName);\\n\\n\\t\\t} catch (SQLException se) {\\n\\t\\t\\tthrow new SQLException(\\\"Invalid Query \\\" + sql);\\n\\t\\t}\\n\\t}\"}","30":"{\"expressionStart\":{\"\\u003cthrow\\u003e\":510,\"ArrayList.add()\":411,\"SQLException.\\u003cinit\\u003e\":516,\"ResultSet.close()\":447,\"ResultSet.getString()\":334,\"String\":161,\"\\u003creturn\\u003e\":462,\"ResultSet.next()\":299,\"EntryFixedInfo.contains()\":369,\"Statement.executeQuery()\":260,\"SQLException.getMessage()\":533,\"ArrayList.\\u003cinit\\u003e\":119},\"expressionEnd\":{\"\\u003cthrow\\u003e\":550,\"ArrayList.add()\":431,\"SQLException.\\u003cinit\\u003e\":549,\"ResultSet.close()\":457,\"ResultSet.getString()\":358,\"String\":240,\"\\u003creturn\\u003e\":476,\"ResultSet.next()\":308,\"EntryFixedInfo.contains()\":402,\"Statement.executeQuery()\":287,\"SQLException.getMessage()\":548,\"ArrayList.\\u003cinit\\u003e\":142},\"rawCode\":\"public ArrayList\\u003cString\\u003e getGenotypeTableNames() throws SQLException {\\n\\t\\tString sql \\u003d \\\"\\\";\\n\\t\\tArrayList\\u003cString\\u003e tables \\u003d new ArrayList\\u003cString\\u003e();\\n\\t\\ttry {\\n\\t\\t\\tsql \\u003d \\\"SELECT `GenoName` FROM `vcf_analyzer`.`GenotypeTable` ORDER BY `GenoName` ASC\\\";\\n\\t\\t\\tResultSet rs \\u003d this.stmt.executeQuery(sql);\\n\\t\\t\\twhile (rs.next()) {\\n\\t\\t\\t\\tString genoName \\u003d rs.getString(\\\"GenoName\\\");\\n\\t\\t\\t\\tif (!EntryFixedInfo.contains(genoName)) {\\n\\t\\t\\t\\t\\ttables.add(genoName);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\trs.close();\\n\\t\\t\\treturn tables;\\n\\t\\t} catch (SQLException se) {\\n\\t\\t\\tthrow new SQLException(se.getMessage());\\n\\t\\t}\\n\\t}\"}","31":"{\"expressionStart\":{\"\\u003cthrow\\u003e\":377,\"String:\\u0027\":215,\"String:\":108,\"SQLException.\\u003cinit\\u003e\":497,\"ResultSet.close()\":341,\"ResultSet.getString()\":313,\"Integer.parseInt()\":296,\"String\":514,\"\\u003creturn\\u003e\":357,\"IllegalArgumentException.\\u003cinit\\u003e\":383,\"ResultSet.next()\":270,\"Statement.executeQuery()\":238},\"expressionEnd\":{\"\\u003cthrow\\u003e\":457,\"String:\\u0027\":218,\"String:\":110,\"SQLException.\\u003cinit\\u003e\":537,\"ResultSet.close()\":351,\"ResultSet.getString()\":334,\"Integer.parseInt()\":335,\"String\":530,\"\\u003creturn\\u003e\":367,\"IllegalArgumentException.\\u003cinit\\u003e\":456,\"ResultSet.next()\":279,\"Statement.executeQuery()\":260},\"rawCode\":\"public int getFilterID(String filterName) throws IllegalArgumentException,\\n\\t\\t\\tSQLException {\\n\\t\\tString sql \\u003d \\\"\\\";\\n\\t\\ttry {\\n\\t\\t\\tsql \\u003d \\\"SELECT `FilID` FROM `vcf_analyzer`.`Filter` WHERE `FilName` \\u003d \\u0027\\\"\\n\\t\\t\\t\\t\\t+ filterName + \\\"\\u0027\\\";\\n\\t\\t\\tResultSet rs \\u003d stmt.executeQuery(sql);\\n\\n\\t\\t\\tif (rs.next()) {\\n\\t\\t\\t\\tint id \\u003d Integer.parseInt(rs.getString(\\\"FilId\\\"));\\n\\t\\t\\t\\trs.close();\\n\\t\\t\\t\\treturn id;\\n\\t\\t\\t}\\n\\n\\t\\t\\tthrow new IllegalArgumentException(\\\"Filter: \\\" + filterName\\n\\t\\t\\t\\t\\t+ \\\" not found\\\");\\n\\t\\t} catch (SQLException se) {\\n\\t\\t\\tthrow new SQLException(\\\"Invalid Query \\\" + sql);\\n\\t\\t}\\n\\t}\"}","32":"{\"expressionStart\":{\"String.format()\":202,\"\\u003cthrow\\u003e\":738,\"SQLException.\\u003cinit\\u003e\":744,\"ResultSet.getString()\":390,\"FilterParameter.\\u003cinit\\u003e\":596,\"String\":403,\"\\u003creturn\\u003e\":785,\"ResultSet.next()\":354,\"ArrayList.\\u003cinit\\u003e\":132,\"ArrayList.add()\":675,\"Statement.executeQuery()\":320,\"SQLException.getMessage()\":761,\"ResultSet.getInt()\":437},\"expressionEnd\":{\"String.format()\":300,\"\\u003cthrow\\u003e\":778,\"SQLException.\\u003cinit\\u003e\":777,\"ResultSet.getString()\":414,\"FilterParameter.\\u003cinit\\u003e\":669,\"String\":413,\"\\u003creturn\\u003e\":806,\"ResultSet.next()\":363,\"ArrayList.\\u003cinit\\u003e\":164,\"ArrayList.add()\":698,\"Statement.executeQuery()\":342,\"SQLException.getMessage()\":776,\"ResultSet.getInt()\":460},\"rawCode\":\"public ArrayList\\u003cFilterParameter\\u003e getFilterEntries(int FilId)\\n\\t\\t\\tthrows SQLException {\\n\\t\\tArrayList\\u003cFilterParameter\\u003e filterEntries \\u003d new ArrayList\\u003cFilterParameter\\u003e();\\n\\t\\tString sql \\u003d \\\"\\\";\\n\\t\\ttry {\\n\\t\\t\\tsql \\u003d String\\n\\t\\t\\t\\t\\t.format(\\\"SELECT * FROM `vcf_analyzer`.`FilterEntry` WHERE `FilId`\\u003d\\u0027%d\\u0027\\\",\\n\\t\\t\\t\\t\\t\\t\\tFilId);\\n\\t\\t\\tResultSet rs \\u003d stmt.executeQuery(sql);\\n\\t\\t\\twhile (rs.next()) {\\n\\t\\t\\t\\tString tableName \\u003d rs.getString(\\\"InfoName\\\");\\n\\t\\t\\t\\tint comparison \\u003d rs.getInt(\\\"Comparison\\\");\\n\\t\\t\\t\\tString comparator \\u003d rs.getString(\\\"Comparator\\\");\\n\\t\\t\\t\\tString comparator2 \\u003d rs.getString(\\\"Comparator2\\\");\\n\\n\\t\\t\\t\\tFilterParameter temp \\u003d new FilterParameter(tableName,\\n\\t\\t\\t\\t\\t\\tcomparison, comparator, comparator2);\\n\\t\\t\\t\\tfilterEntries.add(temp);\\n\\t\\t\\t}\\n\\t\\t} catch (SQLException se) {\\n\\t\\t\\tthrow new SQLException(se.getMessage());\\n\\t\\t}\\n\\t\\treturn filterEntries;\\n\\t}\"}","33":"{\"expressionStart\":{\"PreparedStatement.setString()\":1017,\"ResultSet.getString()\":1305,\"String\":1322,\"ResultSet.next()\":1095,\"ArrayList.\\u003cinit\\u003e\":873,\"int:3\":1032,\"ArrayList.add()\":1115,\"PreparedStatement.executeQuery()\":1065,\"UNKNOWN.prepareStatement()\":928,\"int:2\":1004,\"int:1\":974,\"StudLess.\\u003cinit\\u003e\":1121,\"ResultSet.getInt()\":1134},\"expressionEnd\":{\"PreparedStatement.setString()\":1042,\"ResultSet.getString()\":1335,\"String\":1334,\"ResultSet.next()\":1108,\"ArrayList.\\u003cinit\\u003e\":898,\"int:3\":1033,\"ArrayList.add()\":1755,\"PreparedStatement.executeQuery()\":1084,\"UNKNOWN.prepareStatement()\":955,\"int:2\":1005,\"int:1\":975,\"StudLess.\\u003cinit\\u003e\":1754,\"ResultSet.getInt()\":1156},\"rawCode\":\"public void execSQL_Exam(String subj_id, String yearID, String semID)\\n\\t\\t\\tthrows SQLException {\\n\\n\\t\\tString sql \\u003d \\\"select t0.id,t1.id,t1.name,t1.surname, t1.rollnum, \\\"\\n\\t\\t\\t\\t+ \\\"t6.name,t2.name,t2.id,t2.code,t2.stdyear,t2.hours,t2.credit,t3.id,\\\"\\n\\t\\t\\t\\t+ \\\"t3.name,t4.year,t5.semester,t0.status,t7.name, t1.dept_id \\\"\\n\\t\\t\\t\\t+ \\\"from less_stud as t0 \\\"\\n\\t\\t\\t\\t+ \\\"left join student as t1 on t0.student_id\\u003dt1.id \\\"\\n\\t\\t\\t\\t+ \\\"left join department as t6 on t1.dept_id\\u003dt6.id \\\"\\n\\t\\t\\t\\t+ \\\"left join subjects as t2 on t0.subject_id\\u003dt2.id \\\"\\n\\t\\t\\t\\t+ \\\"left join sinif as t3 on t1.group_id\\u003dt3.id \\\"\\n\\t\\t\\t\\t+ \\\"left join year as t4 on t0.year_id\\u003dt4.id \\\"\\n\\t\\t\\t\\t+ \\\"left join semester as t5 on t0.sem_id\\u003dt5.id \\\"\\n\\t\\t\\t\\t+ \\\"left join faculty as t7 on t6.faculty_id\\u003dt7.id \\\"\\n\\t\\t\\t\\t+ \\\"where t2.id\\u003d? and t5.id \\u003d? and t4.id\\u003d? \\\"\\n\\t\\t\\t\\t+ \\\"and t0.status \\u003e 0 and t0.status \\u003c 4 and t1.edu_status_id\\u003d1 order by t1.name,t1.surname asc;\\\";\\n\\n\\t\\tq \\u003d new ArrayList\\u003cStudLess\\u003e();\\n\\n\\t\\tPreparedStatement stat \\u003d dbCon.prepareStatement(sql);\\n\\t\\tstat.setString(1, subj_id);\\n\\t\\tstat.setString(2, semID);\\n\\t\\tstat.setString(3, yearID);\\n\\t\\tResultSet result \\u003d stat.executeQuery();\\n\\t\\twhile (result.next()) {\\n\\t\\t\\tq.add(new StudLess(result.getInt(\\\"t0.id\\\"), result.getInt(\\\"t1.id\\\"),\\n\\t\\t\\t\\t\\tresult.getInt(\\\"t2.id\\\"), result.getInt(\\\"t3.id\\\"), result\\n\\t\\t\\t\\t\\t\\t\\t.getInt(\\\"t0.status\\\"), result.getString(\\\"t1.name\\\"),\\n\\t\\t\\t\\t\\tresult.getString(\\\"t1.surname\\\"),\\n\\t\\t\\t\\t\\tresult.getString(\\\"t6.name\\\"), result.getString(\\\"t2.name\\\"),\\n\\t\\t\\t\\t\\tresult.getString(\\\"t2.code\\\"), result.getString(\\\"t3.name\\\"),\\n\\t\\t\\t\\t\\tresult.getString(\\\"t4.year\\\"),\\n\\t\\t\\t\\t\\tresult.getString(\\\"t2.stdyear\\\"), result\\n\\t\\t\\t\\t\\t\\t\\t.getString(\\\"t5.semester\\\"), result\\n\\t\\t\\t\\t\\t\\t\\t.getString(\\\"t2.hours\\\"), result\\n\\t\\t\\t\\t\\t\\t\\t.getString(\\\"t2.credit\\\"), result\\n\\t\\t\\t\\t\\t\\t\\t.getString(\\\"t7.name\\\"), result.getInt(\\\"t1.dept_id\\\"),\\n\\t\\t\\t\\t\\tresult.getString(\\\"t1.rollnum\\\")));\\n\\t\\t}\\n\\t}\"}","34":"{\"expressionStart\":{\"PreparedStatement.setString()\":894,\"ResultSet.getString()\":1306,\"String\":1357,\"ResultSet.next()\":1030,\"ArrayList.\\u003cinit\\u003e\":808,\"ArrayList.add()\":1050,\"int:3\":967,\"PreparedStatement.executeQuery()\":1000,\"UNKNOWN.prepareStatement()\":863,\"int:2\":939,\"int:1\":909,\"StudLess.\\u003cinit\\u003e\":1056,\"ResultSet.getInt()\":1146},\"expressionEnd\":{\"PreparedStatement.setString()\":920,\"ResultSet.getString()\":1333,\"String\":1366,\"ResultSet.next()\":1043,\"ArrayList.\\u003cinit\\u003e\":833,\"ArrayList.add()\":1653,\"int:3\":968,\"PreparedStatement.executeQuery()\":1019,\"UNKNOWN.prepareStatement()\":890,\"int:2\":940,\"int:1\":910,\"StudLess.\\u003cinit\\u003e\":1652,\"ResultSet.getInt()\":1168},\"rawCode\":\"public void execSQL_Status(String subj_id, String yearID, String semID)\\n\\t\\t\\tthrows SQLException {\\n\\n\\t\\tString sql \\u003d \\\"select t0.id,t1.id,t1.name,t1.surname,t6.name,t2.name,t2.id,\\\"\\n\\t\\t\\t\\t+ \\\"t2.code,t2.stdyear,t2.hours,t2.credit,t3.id,\\\"\\n\\t\\t\\t\\t+ \\\"t3.name,t4.year,t5.semester,t0.status,t7.name, t1.dept_id from less_stud as t0 \\\"\\n\\t\\t\\t\\t+ \\\"left join student as t1 on t0.student_id\\u003dt1.id \\\"\\n\\t\\t\\t\\t+ \\\"left join department as t6 on t1.dept_id\\u003dt6.id \\\"\\n\\t\\t\\t\\t+ \\\"left join subjects as t2 on t0.subject_id\\u003dt2.id \\\"\\n\\t\\t\\t\\t+ \\\"left join sinif as t3 on t1.group_id\\u003dt3.id \\\"\\n\\t\\t\\t\\t+ \\\"left join year as t4 on t0.year_id\\u003dt4.id \\\"\\n\\t\\t\\t\\t+ \\\"left join semester as t5 on t0.sem_id\\u003dt5.id \\\"\\n\\t\\t\\t\\t+ \\\"left join faculty as t7 on t6.faculty_id\\u003dt7.id \\\"\\n\\t\\t\\t\\t+ \\\"where t2.id\\u003d? and t5.id \\u003d? and t4.id\\u003d? and t1.edu_status_id\\u003d1 order by t1.name,t1.surname asc;\\\";\\n\\n\\t\\tq \\u003d new ArrayList\\u003cStudLess\\u003e();\\n\\n\\t\\tPreparedStatement stat \\u003d dbCon.prepareStatement(sql);\\n\\t\\tstat.setString(1, subj_id);\\n\\t\\tstat.setString(2, semID);\\n\\t\\tstat.setString(3, yearID);\\n\\t\\tResultSet result \\u003d stat.executeQuery();\\n\\t\\twhile (result.next()) {\\n\\t\\t\\tq.add(new StudLess(result.getInt(\\\"t0.id\\\"), result.getInt(\\\"t1.id\\\"),\\n\\t\\t\\t\\t\\tresult.getInt(\\\"t2.id\\\"), result.getInt(\\\"t3.id\\\"), result\\n\\t\\t\\t\\t\\t\\t\\t.getInt(\\\"t0.status\\\"), result.getString(\\\"t1.name\\\"),\\n\\t\\t\\t\\t\\tresult.getString(\\\"t1.surname\\\"),\\n\\t\\t\\t\\t\\tresult.getString(\\\"t6.name\\\"), result.getString(\\\"t2.name\\\"),\\n\\t\\t\\t\\t\\tresult.getString(\\\"t2.code\\\"), result.getString(\\\"t3.name\\\"),\\n\\t\\t\\t\\t\\tresult.getString(\\\"t4.year\\\"),\\n\\t\\t\\t\\t\\tresult.getString(\\\"t2.stdyear\\\"), result\\n\\t\\t\\t\\t\\t\\t\\t.getString(\\\"t5.semester\\\"), result\\n\\t\\t\\t\\t\\t\\t\\t.getString(\\\"t2.hours\\\"), result\\n\\t\\t\\t\\t\\t\\t\\t.getString(\\\"t2.credit\\\"), result\\n\\t\\t\\t\\t\\t\\t\\t.getString(\\\"t7.name\\\"), result.getInt(\\\"t1.dept_id\\\")));\\n\\t\\t}\\n\\t}\"}","35":"{\"expressionStart\":{\"String.equals()\":1058,\"PreparedStatement.setString()\":676,\"\\u003cr\\u003e\":1304,\"ResultSet.getString()\":821,\"String\":911,\"\\u003creturn\\u003e\":1344,\"ResultSet.next()\":787,\"int\":1333,\"double:29.7\":1014,\"double:0.0\":592,\"PreparedStatement.executeQuery()\":757,\"\\u003ca\\u003e\":1282,\"double:49.5\":1196,\"UNKNOWN.prepareStatement()\":645,\"int:2\":721,\"\\u003d\":1027,\"int:1\":691,\"int:0\":552,\"ResultSet.getDouble()\":1093},\"expressionEnd\":{\"String.equals()\":1079,\"PreparedStatement.setString()\":702,\"\\u003cr\\u003e\":1316,\"ResultSet.getString()\":845,\"String\":920,\"\\u003creturn\\u003e\":1359,\"ResultSet.next()\":800,\"int\":1336,\"double:29.7\":1018,\"double:0.0\":595,\"PreparedStatement.executeQuery()\":776,\"\\u003ca\\u003e\":1292,\"double:49.5\":1200,\"UNKNOWN.prepareStatement()\":672,\"int:2\":722,\"\\u003d\":1036,\"int:1\":692,\"int:0\":553,\"ResultSet.getDouble()\":1120},\"rawCode\":\"public double calcAverage_Transcript(String s_less_id, String subj_id)\\n\\t\\t\\tthrows SQLException {\\n\\t\\tString sql \\u003d \\\"select t3.exam_name as exam,(t4.mark * t3.percentage/100) as average from less_stud \\\"\\n\\t\\t\\t\\t+ \\\" as t5 left join student as  t1 on t5.student_id\\u003dt1.id left join \\\"\\n\\t\\t\\t\\t+ \\\" subjects as t2 on t5.subject_id\\u003dt2.id left join sinif as t6 on \\\"\\n\\t\\t\\t\\t+ \\\" t1.group_id\\u003dt6.id  left join subj_exam as t4 on t5.id \\u003d t4.stud_less_id \\\"\\n\\t\\t\\t\\t+ \\\" left join exam as t3 on t4.exam_id\\u003dt3.exam_id \\\"\\n\\t\\t\\t\\t+ \\\" where t2.id\\u003d? and t4.stud_less_id \\u003d? ;\\\";\\n\\n\\t\\tdouble average \\u003d 0;\\n\\t\\tdouble midterm \\u003d 0, fin \\u003d 0, mup \\u003d 0.0;\\n\\t\\tint colCount \\u003d 0;\\n\\n\\t\\tPreparedStatement stat \\u003d dbCon.prepareStatement(sql);\\n\\t\\tstat.setString(1, subj_id);\\n\\t\\tstat.setString(2, s_less_id);\\n\\t\\tResultSet result \\u003d stat.executeQuery();\\n\\t\\twhile (result.next()) {\\n\\t\\t\\tString exam \\u003d result.getString(\\\"exam\\\");\\n\\t\\t\\tif (exam.equals(\\\"Midterm\\\")) {\\n\\t\\t\\t\\tmidterm \\u003d result.getDouble(\\\"average\\\");\\n\\t\\t\\t} else if (exam.equals(\\\"Final\\\")) {\\n\\t\\t\\t\\tfin \\u003d result.getDouble(\\\"average\\\");\\n\\t\\t\\t\\tif (fin \\u003c 29.7) {\\n\\t\\t\\t\\t\\tfin \\u003d 0.0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else if (exam.equals(\\\"MakeUp\\\")) {\\n\\t\\t\\t\\tmup \\u003d result.getDouble(\\\"average\\\");\\n\\t\\t\\t\\tif (mup \\u003c 29.7) {\\n\\t\\t\\t\\t\\tmup \\u003d 0.0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif ((midterm + fin) \\u003c 49.5) {\\n\\t\\t\\t\\taverage \\u003d midterm + mup;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\taverage \\u003d midterm + fin;\\n\\t\\t\\t}\\n\\t\\t\\tcolCount++;\\n\\t\\t}\\n\\t\\tif (colCount \\u003c 2) {\\n\\t\\t\\taverage \\u003d 101;\\n\\t\\t}\\n\\t\\treturn average;\\n\\t}\"}","36":"{\"expressionStart\":{\"PreparedStatement.setString()\":940,\"ResultSet.getString()\":1633,\"String\":1684,\"ResultSet.next()\":1076,\"ArrayList.\\u003cinit\\u003e\":854,\"ArrayList.add()\":1096,\"int:3\":1013,\"PreparedStatement.executeQuery()\":1046,\"UNKNOWN.prepareStatement()\":909,\"int:2\":985,\"int:1\":955,\"StudLess.\\u003cinit\\u003e\":1102,\"ResultSet.getInt()\":1192},\"expressionEnd\":{\"PreparedStatement.setString()\":966,\"ResultSet.getString()\":1668,\"String\":1696,\"ResultSet.next()\":1089,\"ArrayList.\\u003cinit\\u003e\":879,\"ArrayList.add()\":1699,\"int:3\":1014,\"PreparedStatement.executeQuery()\":1065,\"UNKNOWN.prepareStatement()\":936,\"int:2\":986,\"int:1\":956,\"StudLess.\\u003cinit\\u003e\":1698,\"ResultSet.getInt()\":1214},\"rawCode\":\"public void execSQL_Subject(String subj_id, String yearID, String semID)\\n\\t\\t\\tthrows SQLException {\\n\\n\\t\\tString sql \\u003d \\\"select t0.id,t1.id,t1.name,t1.surname,t6.name,t2.name,t2.id,\\\"\\n\\t\\t\\t\\t+ \\\"t2.code,t2.stdyear,t2.hours,t2.credit,t3.id,\\\"\\n\\t\\t\\t\\t+ \\\"t3.name,t4.year,t5.semester,t0.status,t7.name, t1.dept_id from less_stud as t0 \\\"\\n\\t\\t\\t\\t+ \\\"left join student as t1 on t0.student_id\\u003dt1.id \\\"\\n\\t\\t\\t\\t+ \\\"left join department as t6 on t1.dept_id\\u003dt6.id \\\"\\n\\t\\t\\t\\t+ \\\"left join subjects as t2 on t0.subject_id\\u003dt2.id \\\"\\n\\t\\t\\t\\t+ \\\"left join sinif as t3 on t1.group_id\\u003dt3.id \\\"\\n\\t\\t\\t\\t+ \\\"left join year as t4 on t0.year_id\\u003dt4.id \\\"\\n\\t\\t\\t\\t+ \\\"left join semester as t5 on t0.sem_id\\u003dt5.id \\\"\\n\\t\\t\\t\\t+ \\\"left join faculty as t7 on t6.faculty_id\\u003dt7.id \\\"\\n\\t\\t\\t\\t+ \\\"where t2.id\\u003d? and t5.id \\u003d? and t4.id\\u003d? and t0.status \\u003e 0 and t0.status \\u003c 3 \\\"\\n\\t\\t\\t\\t+ \\\"and t1.edu_status_id\\u003d1 order by t1.name,t1.surname asc;\\\";\\n\\n\\t\\tq \\u003d new ArrayList\\u003cStudLess\\u003e();\\n\\n\\t\\tPreparedStatement stat \\u003d dbCon.prepareStatement(sql);\\n\\t\\tstat.setString(1, subj_id);\\n\\t\\tstat.setString(2, semID);\\n\\t\\tstat.setString(3, yearID);\\n\\t\\tResultSet result \\u003d stat.executeQuery();\\n\\t\\twhile (result.next()) {\\n\\t\\t\\tq.add(new StudLess(result.getInt(\\\"t0.id\\\"), result.getInt(\\\"t1.id\\\"),\\n\\t\\t\\t\\t\\tresult.getInt(\\\"t2.id\\\"), result.getInt(\\\"t3.id\\\"), result\\n\\t\\t\\t\\t\\t\\t\\t.getInt(\\\"t0.status\\\"), result.getString(\\\"t1.name\\\"),\\n\\t\\t\\t\\t\\tresult.getString(\\\"t1.surname\\\"),\\n\\t\\t\\t\\t\\tresult.getString(\\\"t6.name\\\"), result.getString(\\\"t2.name\\\"),\\n\\t\\t\\t\\t\\tresult.getString(\\\"t2.code\\\"), result.getString(\\\"t3.name\\\"),\\n\\t\\t\\t\\t\\tresult.getString(\\\"t4.year\\\"),\\n\\t\\t\\t\\t\\tresult.getString(\\\"t2.stdyear\\\"), result\\n\\t\\t\\t\\t\\t\\t\\t.getString(\\\"t5.semester\\\"), result\\n\\t\\t\\t\\t\\t\\t\\t.getString(\\\"t2.hours\\\"), result\\n\\t\\t\\t\\t\\t\\t\\t.getString(\\\"t2.credit\\\"), result\\n\\t\\t\\t\\t\\t\\t\\t.getString(\\\"t7.name\\\"), result.getInt(\\\"t1.dept_id\\\")));\\n\\t\\t}\\n\\t}\"}","37":"{\"expressionStart\":{\"PreparedStatement.setString()\":551,\"DbStudLess.calcAverage_Transcript()\":998,\"ResultSet.getString()\":924,\"Long.toString()\":965,\"String\":710,\"ResultSet.next()\":626,\"ArrayList.\\u003cinit\\u003e\":465,\"ArrayList.add()\":647,\"PreparedStatement.executeQuery()\":596,\"UNKNOWN.prepareStatement()\":520,\"Math.round()\":979,\"int:1\":566,\"StudLess.\\u003cinit\\u003e\":653,\"ResultSet.getInt()\":690},\"expressionEnd\":{\"PreparedStatement.setString()\":573,\"DbStudLess.calcAverage_Transcript()\":1101,\"ResultSet.getString()\":963,\"Long.toString()\":1103,\"String\":725,\"ResultSet.next()\":639,\"ArrayList.\\u003cinit\\u003e\":490,\"ArrayList.add()\":1105,\"PreparedStatement.executeQuery()\":615,\"UNKNOWN.prepareStatement()\":547,\"Math.round()\":1102,\"int:1\":567,\"StudLess.\\u003cinit\\u003e\":1104,\"ResultSet.getInt()\":726},\"rawCode\":\"public void execSubjectsTranscript(String sid) throws SQLException {\\n\\n\\t\\tString sql \\u003d \\\"select t1.id, t1.subject_id, t1.year_id, t1.sem_id, t2.code, t2.name, t2.credit,\\\"\\n\\t\\t\\t\\t+ \\\" t5.year, t6.semester\\\"\\n\\t\\t\\t\\t+ \\\" from less_stud as t1 left join subjects as t2 on t1.subject_id\\u003dt2.id\\\"\\n\\t\\t\\t\\t+ \\\" left join year as t5 on t1.year_id\\u003dt5.id\\\"\\n\\t\\t\\t\\t+ \\\" left join semester as t6 on t1.sem_id\\u003dt6.id\\\"\\n\\t\\t\\t\\t+ \\\" where t1.student_id\\u003d? and t1.status\\u003c4 order by t1.year_id,t1.sem_id;\\\";\\n\\n\\t\\tq \\u003d new ArrayList\\u003cStudLess\\u003e();\\n\\n\\t\\tPreparedStatement stat \\u003d dbCon.prepareStatement(sql);\\n\\t\\tstat.setString(1, sid);\\n\\t\\tResultSet result \\u003d stat.executeQuery();\\n\\t\\twhile (result.next()) {\\n\\n\\t\\t\\tq.add(new StudLess(result.getInt(\\\"t1.id\\\"), result\\n\\t\\t\\t\\t\\t.getInt(\\\"t1.subject_id\\\"), result.getString(\\\"t1.year_id\\\"),\\n\\t\\t\\t\\t\\tresult.getString(\\\"t1.sem_id\\\"), result.getString(\\\"t2.code\\\"),\\n\\t\\t\\t\\t\\tresult.getString(\\\"t2.name\\\"), result.getString(\\\"t2.credit\\\"),\\n\\t\\t\\t\\t\\tresult.getString(\\\"t5.year\\\"), result\\n\\t\\t\\t\\t\\t\\t\\t.getString(\\\"t6.semester\\\"), Long.toString(Math\\n\\t\\t\\t\\t\\t\\t\\t.round(calcAverage_Transcript(\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tresult.getString(\\\"t1.id\\\"),\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tresult.getString(\\\"t1.subject_id\\\"))))));\\n\\t\\t}\\n\\t}\"}","38":"{\"expressionStart\":{\"PreparedStatement.setString()\":855,\"ResultSet.getString()\":1166,\"String\":1183,\"ResultSet.next()\":990,\"ArrayList.\\u003cinit\\u003e\":769,\"ArrayList.add()\":1010,\"int:3\":927,\"PreparedStatement.executeQuery()\":960,\"UNKNOWN.prepareStatement()\":824,\"int:2\":899,\"int:1\":870,\"StudLess.\\u003cinit\\u003e\":1016,\"ResultSet.getInt()\":1130},\"expressionEnd\":{\"PreparedStatement.setString()\":880,\"ResultSet.getString()\":1193,\"String\":1192,\"ResultSet.next()\":1003,\"ArrayList.\\u003cinit\\u003e\":794,\"ArrayList.add()\":1613,\"int:3\":928,\"PreparedStatement.executeQuery()\":979,\"UNKNOWN.prepareStatement()\":851,\"int:2\":900,\"int:1\":871,\"StudLess.\\u003cinit\\u003e\":1612,\"ResultSet.getInt()\":1164},\"rawCode\":\"public void execSQL(String std_id, String semID, String yearID)\\n\\t\\t\\tthrows SQLException {\\n\\n\\t\\tString sql \\u003d \\\"select t0.id,t1.id,t1.name,t1.surname,t6.name,t2.name,t2.id,t2.code,t2.stdyear,t2.hours,t2.credit,t3.id,\\\"\\n\\t\\t\\t\\t+ \\\"t3.name,t4.year,t5.semester,t0.status, t7.name, t1.dept_id from less_stud as t0 \\\"\\n\\t\\t\\t\\t+ \\\"left join student as t1 on t0.student_id\\u003dt1.id \\\"\\n\\t\\t\\t\\t+ \\\"left join department as t6 on t1.dept_id\\u003dt6.id \\\"\\n\\t\\t\\t\\t+ \\\"left join subjects as t2 on t0.subject_id\\u003dt2.id \\\"\\n\\t\\t\\t\\t+ \\\"left join sinif as t3 on t1.group_id\\u003dt3.id \\\"\\n\\t\\t\\t\\t+ \\\"left join year as t4 on t0.year_id\\u003dt4.id \\\"\\n\\t\\t\\t\\t+ \\\"left join semester as t5 on t0.sem_id\\u003dt5.id \\\"\\n\\t\\t\\t\\t+ \\\"left join faculty as t7 on t6.faculty_id\\u003dt7.id \\\"\\n\\t\\t\\t\\t+ \\\"where t1.id\\u003d? and t5.id \\u003d? and t4.id\\u003d? order by t1.name,t1.surname asc;\\\";\\n\\n\\t\\tq \\u003d new ArrayList\\u003cStudLess\\u003e();\\n\\n\\t\\tPreparedStatement stat \\u003d dbCon.prepareStatement(sql);\\n\\t\\tstat.setString(1, std_id);\\n\\t\\tstat.setString(2, semID);\\n\\t\\tstat.setString(3, yearID);\\n\\t\\tResultSet result \\u003d stat.executeQuery();\\n\\t\\twhile (result.next()) {\\n\\t\\t\\tq.add(new StudLess(result.getInt(\\\"t0.id\\\"), result.getInt(\\\"t1.id\\\"),\\n\\t\\t\\t\\t\\tresult.getInt(\\\"t2.id\\\"), result.getInt(\\\"t3.id\\\"), result\\n\\t\\t\\t\\t\\t\\t\\t.getInt(\\\"t0.status\\\"), result.getString(\\\"t1.name\\\"),\\n\\t\\t\\t\\t\\tresult.getString(\\\"t1.surname\\\"),\\n\\t\\t\\t\\t\\tresult.getString(\\\"t6.name\\\"), result.getString(\\\"t2.name\\\"),\\n\\t\\t\\t\\t\\tresult.getString(\\\"t2.code\\\"), result.getString(\\\"t3.name\\\"),\\n\\t\\t\\t\\t\\tresult.getString(\\\"t4.year\\\"),\\n\\t\\t\\t\\t\\tresult.getString(\\\"t2.stdyear\\\"), result\\n\\t\\t\\t\\t\\t\\t\\t.getString(\\\"t5.semester\\\"), result\\n\\t\\t\\t\\t\\t\\t\\t.getString(\\\"t2.hours\\\"), result\\n\\t\\t\\t\\t\\t\\t\\t.getString(\\\"t2.credit\\\"), result\\n\\t\\t\\t\\t\\t\\t\\t.getString(\\\"t7.name\\\"), result.getInt(\\\"t1.dept_id\\\")));\\n\\t\\t}\\n\\t}\"}","39":"{\"expressionStart\":{\"String.equals()\":1054,\"PreparedStatement.setString()\":734,\"ResultSet.getString()\":887,\"\\u003cr\\u003e\":1247,\"PreparedStatement.setInt()\":654,\"String\":218,\"\\u003creturn\\u003e\":1403,\"ResultSet.next()\":853,\"double:29.7\":1131,\"int:4\":749,\"ResultSet.wasNull()\":920,\"int:3\":723,\"double:0.0\":839,\"PreparedStatement.executeQuery()\":780,\"double:49.5\":1314,\"UNKNOWN.prepareStatement()\":623,\"int:2\":696,\"\\u003d\":1144,\"int:1\":666,\"ResultSet.getDouble()\":1011,\"int:0\":592},\"expressionEnd\":{\"String.equals()\":1074,\"PreparedStatement.setString()\":757,\"ResultSet.getString()\":911,\"\\u003cr\\u003e\":1257,\"PreparedStatement.setInt()\":677,\"String\":284,\"\\u003creturn\\u003e\":1418,\"ResultSet.next()\":866,\"double:29.7\":1135,\"int:4\":750,\"ResultSet.wasNull()\":936,\"int:3\":724,\"double:0.0\":842,\"PreparedStatement.executeQuery()\":799,\"double:49.5\":1318,\"UNKNOWN.prepareStatement()\":650,\"int:2\":697,\"\\u003d\":1153,\"int:1\":667,\"ResultSet.getDouble()\":1038,\"int:0\":593},\"rawCode\":\"public double calcAverage_Report(String s_id, String sem, String year,\\n\\t\\t\\tint subj_id) throws SQLException {\\n\\n\\t\\tString sql \\u003d \\\"select t3.exam_name as exam,(t4.mark * t3.percentage/100) as average from less_stud \\\"\\n\\t\\t\\t\\t+ \\\"as t5 left join student as  t1 on t5.student_id\\u003dt1.id left join \\\"\\n\\t\\t\\t\\t+ \\\"subjects as t2 on t5.subject_id\\u003dt2.id left join sinif as t6 on \\\"\\n\\t\\t\\t\\t+ \\\"t1.group_id\\u003dt6.id  left join subj_exam as t4 on t5.id \\u003d t4.stud_less_id \\\"\\n\\t\\t\\t\\t+ \\\"left join exam as t3 on t4.exam_id\\u003dt3.exam_id \\\"\\n\\t\\t\\t\\t+ \\\"where  t2.id\\u003d? and t5.year_id\\u003d? and t5.sem_id\\u003d? and t5.student_id \\u003d?;\\\";\\n\\n\\t\\tdouble average \\u003d 0;\\n\\n\\t\\tPreparedStatement stat \\u003d dbCon.prepareStatement(sql);\\n\\t\\tstat.setInt(1, subj_id);\\n\\t\\tstat.setString(2, year);\\n\\t\\tstat.setString(3, sem);\\n\\t\\tstat.setString(4, s_id);\\n\\t\\tResultSet result \\u003d stat.executeQuery();\\n\\n\\t\\tdouble midterm \\u003d 0, fin \\u003d 0, mup \\u003d 0.0;\\n\\t\\twhile (result.next()) {\\n\\t\\t\\tString exam \\u003d result.getString(\\\"exam\\\");\\n\\t\\t\\tif (result.wasNull()) {\\n\\t\\t\\t\\taverage \\u003d 0;\\n\\t\\t\\t} else if (exam.equals(\\\"Midterm\\\")) {\\n\\t\\t\\t\\tmidterm \\u003d result.getDouble(\\\"average\\\");\\n\\t\\t\\t} else if (exam.equals(\\\"Final\\\")) {\\n\\t\\t\\t\\tfin \\u003d result.getDouble(\\\"average\\\");\\n\\t\\t\\t\\tif (fin \\u003c 29.7) {\\n\\t\\t\\t\\t\\tfin \\u003d 0.0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else if (exam.equals(\\\"MakeUp\\\")) {\\n\\t\\t\\t\\tmup \\u003d result.getDouble(\\\"average\\\");\\n\\t\\t\\t\\tif (mup \\u003c 29.7) {\\n\\t\\t\\t\\t\\tmup \\u003d 0.0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ((midterm + fin) \\u003c 49.5) {\\n\\t\\t\\t\\taverage \\u003d midterm + mup;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\taverage \\u003d midterm + fin;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn average;\\n\\t}\"}","40":"{\"expressionStart\":{\"String:vers\":698,\"ResultSet.getDate()\":785,\"String:uid\":753,\"Json.parse()\":915,\"DB.getDataSource()\":71,\"String\":939,\"OsmNode.hstoreFormatToTags()\":851,\"ResultSet.next()\":628,\"Connection.close()\":1057,\"String:tags\":883,\"int:1\":561,\"\\u003cnullcheck\\u003e\":1033,\"int:0\":767,\"SQLException.printStackTrace()\":1105,\"ResultSet.getInt()\":688,\"PreparedStatement.setString()\":548,\"ResultSet.getString()\":870,\"ResultSet.getLong()\":664,\"OsmNode.setGeometry()\":898,\"String:id\":675,\"\\u003creturn\\u003e\":1137,\"DataSource.getConnection()\":198,\"OsmNode.\\u003cinit\\u003e\":652,\"Connection.prepareStatement()\":517,\"PreparedStatement.executeQuery()\":599,\"null:null\":174,\"Json.stringify()\":564,\"String:)\":504},\"expressionEnd\":{\"String:vers\":704,\"ResultSet.getDate()\":805,\"String:uid\":758,\"Json.parse()\":951,\"DB.getDataSource()\":89,\"String\":949,\"OsmNode.hstoreFormatToTags()\":891,\"ResultSet.next()\":637,\"Connection.close()\":1069,\"String:tags\":889,\"int:1\":562,\"\\u003cnullcheck\\u003e\":1045,\"int:0\":768,\"SQLException.printStackTrace()\":1124,\"ResultSet.getInt()\":705,\"PreparedStatement.setString()\":589,\"ResultSet.getString()\":890,\"ResultSet.getLong()\":680,\"OsmNode.setGeometry()\":952,\"String:id\":679,\"\\u003creturn\\u003e\":1149,\"DataSource.getConnection()\":216,\"OsmNode.\\u003cinit\\u003e\":892,\"Connection.prepareStatement()\":543,\"PreparedStatement.executeQuery()\":616,\"null:null\":178,\"Json.stringify()\":588,\"String:)\":507},\"rawCode\":\"public static OsmNode findByGeom(JsonNode geometry){\\n\\t\\tDataSource ds \\u003d DB.getDataSource();\\n\\t\\tConnection conn \\u003d null;\\n\\t\\tPreparedStatement st;\\n\\t\\tResultSet rs;\\n\\t\\tOsmNode node \\u003d null;\\n\\t\\ttry {\\n\\t\\t\\tconn \\u003d ds.getConnection();\\n\\t\\t\\tString sql \\u003d \\\"select id, vers, usr, uid, timest, featurepicture, tags, st_asgeojson(ST_Transform(ST_SetSRID(geom, 900913),4326)) as geometry \\\" +\\n\\t\\t\\t\\t\\t\\\"from osmnodes where geom \\u003d ST_SimplifyPreserveTopology(ST_Transform(ST_SetSRID(st_geomfromgeojson(?),4326),900913), \\\" + TOLERANCE + \\\")\\\";\\n\\t\\t\\tst \\u003d conn.prepareStatement(sql);\\n\\t\\t\\tst.setString(1, Json.stringify(geometry));\\n\\t\\t\\trs \\u003d st.executeQuery();\\n\\t\\t\\twhile (rs.next()) {\\n\\t\\t\\t\\tnode \\u003d new OsmNode(rs.getLong(\\\"id\\\"),\\n\\t\\t\\t\\t\\t\\trs.getInt(\\\"vers\\\"),\\n\\t\\t\\t\\t\\t\\trs.getString(\\\"usr\\\"),\\n\\t\\t\\t\\t\\t\\trs.getString(\\\"uid\\\"),\\n\\t\\t\\t\\t\\t\\t0,\\n\\t\\t\\t\\t\\t\\t0,\\n\\t\\t\\t\\t\\t\\trs.getDate(\\\"timest\\\"),\\n\\t\\t\\t\\t\\t\\trs.getString(\\\"featurepicture\\\"),\\n\\t\\t\\t\\t\\t\\thstoreFormatToTags(rs.getString(\\\"tags\\\")));\\n\\t\\t\\t\\tnode.setGeometry(Json.parse(rs.getString(\\\"geometry\\\")));\\n\\t\\t\\t}\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\te.printStackTrace();\\n\\t\\t} finally {\\n\\t\\t\\tif (conn !\\u003d null) try {\\n\\t\\t\\t\\tconn.close();\\n\\t\\t\\t} catch (SQLException e) {\\n\\t\\t\\t\\te.printStackTrace();\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn node;\\n\\t}\"}","41":"{\"expressionStart\":{\"String:vers\":765,\"ResultSet.getDate()\":852,\"String:uid\":820,\"Json.parse()\":993,\"DB.getDataSource()\":99,\"String\":863,\"ResultSet.next()\":695,\"Connection.close()\":1156,\"String:tags\":961,\"int:1\":628,\"int:0\":834,\"\\u003cnullcheck\\u003e\":1132,\"ResultSet.getInt()\":755,\"SQLException.printStackTrace()\":1090,\"PreparedStatement.setString()\":615,\"OsmFeature.hstoreFormatToTags()\":918,\"ResultSet.getString()\":880,\"ResultSet.getLong()\":731,\"\\u003creturn\\u003e\":1236,\"OsmNode.setGeometry()\":976,\"String:id\":742,\"DataSource.getConnection()\":284,\"List.add()\":1036,\"ArrayList.\\u003cinit\\u003e\":213,\"OsmNode.\\u003cinit\\u003e\":719,\"Connection.prepareStatement()\":584,\"PreparedStatement.executeQuery()\":666,\"Json.stringify()\":631},\"expressionEnd\":{\"String:vers\":771,\"ResultSet.getDate()\":872,\"String:uid\":825,\"Json.parse()\":1029,\"DB.getDataSource()\":117,\"String\":871,\"ResultSet.next()\":704,\"Connection.close()\":1168,\"String:tags\":967,\"int:1\":629,\"int:0\":835,\"\\u003cnullcheck\\u003e\":1144,\"ResultSet.getInt()\":772,\"SQLException.printStackTrace()\":1109,\"PreparedStatement.setString()\":656,\"OsmFeature.hstoreFormatToTags()\":969,\"ResultSet.getString()\":910,\"ResultSet.getLong()\":747,\"\\u003creturn\\u003e\":1249,\"OsmNode.setGeometry()\":1030,\"String:id\":746,\"DataSource.getConnection()\":302,\"List.add()\":1051,\"ArrayList.\\u003cinit\\u003e\":240,\"OsmNode.\\u003cinit\\u003e\":970,\"Connection.prepareStatement()\":610,\"PreparedStatement.executeQuery()\":683,\"Json.stringify()\":655},\"rawCode\":\"public static List\\u003cOsmFeature\\u003e findByIntersection(JsonNode geometry,int limit){\\n\\n\\t\\tDataSource ds \\u003d DB.getDataSource();\\n\\t\\tConnection conn \\u003d null;\\n\\t\\tPreparedStatement st;\\n\\t\\tResultSet rs;\\n\\n\\t\\tList\\u003cOsmFeature\\u003e nodes \\u003d new ArrayList\\u003cOsmFeature\\u003e();\\n\\t\\tOsmNode node \\u003d null;\\n\\n\\t\\ttry {\\n\\t\\t\\tconn \\u003d ds.getConnection();\\n\\t\\t\\tString sql \\u003d \\\"select id, vers, usr, uid, timest, featurepicture, tags, st_asgeojson(ST_Transform(ST_SetSRID(geom, 900913),4326)) as geometry \\\" +\\n\\t\\t\\t\\t\\t\\\"from osmnodes where ST_Intersects(geom , ST_Transform(ST_SetSRID(st_geomfromgeojson(?),4326),900913)) limit \\\"+ limit;\\n\\t\\t\\tst \\u003d conn.prepareStatement(sql);\\n\\t\\t\\tst.setString(1, Json.stringify(geometry));\\n\\t\\t\\trs \\u003d st.executeQuery();\\n\\t\\t\\twhile (rs.next()) {\\n\\t\\t\\t\\tnode \\u003d new OsmNode(rs.getLong(\\\"id\\\"),\\n\\t\\t\\t\\t\\t\\trs.getInt(\\\"vers\\\"),\\n\\t\\t\\t\\t\\t\\trs.getString(\\\"usr\\\"),\\n\\t\\t\\t\\t\\t\\trs.getString(\\\"uid\\\"),\\n\\t\\t\\t\\t\\t\\t0,\\n\\t\\t\\t\\t\\t\\t0,\\n\\t\\t\\t\\t\\t\\trs.getDate(\\\"timest\\\"),\\n\\t\\t\\t\\t\\t\\trs.getString(\\\"featurepicture\\\"),\\n\\t\\t\\t\\t\\t\\tOsmFeature.hstoreFormatToTags(rs.getString(\\\"tags\\\")));\\n\\t\\t\\t\\tnode.setGeometry(Json.parse(rs.getString(\\\"geometry\\\")));\\n\\t\\t\\t\\tnodes.add(node);\\n\\t\\t\\t}\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\te.printStackTrace();\\n\\t\\t} finally {\\n\\t\\t\\tif (conn !\\u003d null) try {\\n\\t\\t\\t\\tconn.close();\\n\\t\\t\\t} catch (SQLException e) {\\n\\t\\t\\t\\te.printStackTrace();\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn nodes;\\n\\t}\"}","42":"{\"expressionStart\":{\"String:vers\":770,\"ResultSet.getDate()\":857,\"String:uid\":825,\"Json.parse()\":998,\"PreparedStatement.setInt()\":642,\"DB.getDataSource()\":96,\"String\":868,\"ResultSet.next()\":700,\"Connection.close()\":1161,\"String:tags\":966,\"int:2\":652,\"int:1\":609,\"int:0\":839,\"\\u003cnullcheck\\u003e\":1137,\"ResultSet.getInt()\":760,\"SQLException.printStackTrace()\":1095,\"PreparedStatement.setString()\":596,\"OsmFeature.hstoreFormatToTags()\":923,\"ResultSet.getString()\":885,\"ResultSet.getLong()\":736,\"String:id\":747,\"\\u003creturn\\u003e\":1241,\"OsmNode.setGeometry()\":981,\"List.add()\":1041,\"ArrayList.\\u003cinit\\u003e\":210,\"DataSource.getConnection()\":281,\"OsmNode.\\u003cinit\\u003e\":724,\"Connection.prepareStatement()\":565,\"PreparedStatement.executeQuery()\":671,\"Json.stringify()\":612},\"expressionEnd\":{\"String:vers\":776,\"ResultSet.getDate()\":877,\"String:uid\":830,\"Json.parse()\":1034,\"PreparedStatement.setInt()\":661,\"DB.getDataSource()\":114,\"String\":876,\"ResultSet.next()\":709,\"Connection.close()\":1173,\"String:tags\":972,\"int:2\":653,\"int:1\":610,\"int:0\":840,\"\\u003cnullcheck\\u003e\":1149,\"ResultSet.getInt()\":777,\"SQLException.printStackTrace()\":1114,\"PreparedStatement.setString()\":637,\"OsmFeature.hstoreFormatToTags()\":974,\"ResultSet.getString()\":915,\"ResultSet.getLong()\":752,\"String:id\":751,\"\\u003creturn\\u003e\":1254,\"OsmNode.setGeometry()\":1035,\"List.add()\":1056,\"ArrayList.\\u003cinit\\u003e\":237,\"DataSource.getConnection()\":299,\"OsmNode.\\u003cinit\\u003e\":975,\"Connection.prepareStatement()\":591,\"PreparedStatement.executeQuery()\":688,\"Json.stringify()\":636},\"rawCode\":\"public static List\\u003cOsmFeature\\u003e findByLocation(JsonNode geometry, int limit){\\n\\n\\t\\tDataSource ds \\u003d DB.getDataSource();\\n\\t\\tConnection conn \\u003d null;\\n\\t\\tPreparedStatement st;\\n\\t\\tResultSet rs;\\n\\n\\t\\tList\\u003cOsmFeature\\u003e nodes \\u003d new ArrayList\\u003cOsmFeature\\u003e();\\n\\t\\tOsmNode node \\u003d null;\\n\\n\\t\\ttry {\\n\\t\\t\\tconn \\u003d ds.getConnection();\\n\\t\\t\\tString sql \\u003d \\\"select id, vers, usr, uid, timest, featurepicture, tags, st_asgeojson(ST_Transform(ST_SetSRID(geom, 900913),4326)) as geometry \\\" +\\n\\t\\t\\t\\t\\t\\\"from osmnodes ORDER BY geom \\u003c-\\u003e ST_Transform(ST_SetSRID(st_geomfromgeojson(?),4326),900913) LIMIT ?\\\";\\n\\t\\t\\tst \\u003d conn.prepareStatement(sql);\\n\\t\\t\\tst.setString(1, Json.stringify(geometry));\\n\\t\\t\\tst.setInt(2, limit);\\n\\t\\t\\trs \\u003d st.executeQuery();\\n\\t\\t\\twhile (rs.next()) {\\n\\t\\t\\t\\tnode \\u003d new OsmNode(rs.getLong(\\\"id\\\"),\\n\\t\\t\\t\\t\\t\\trs.getInt(\\\"vers\\\"),\\n\\t\\t\\t\\t\\t\\trs.getString(\\\"usr\\\"),\\n\\t\\t\\t\\t\\t\\trs.getString(\\\"uid\\\"),\\n\\t\\t\\t\\t\\t\\t0,\\n\\t\\t\\t\\t\\t\\t0,\\n\\t\\t\\t\\t\\t\\trs.getDate(\\\"timest\\\"),\\n\\t\\t\\t\\t\\t\\trs.getString(\\\"featurepicture\\\"),\\n\\t\\t\\t\\t\\t\\tOsmFeature.hstoreFormatToTags(rs.getString(\\\"tags\\\")));\\n\\t\\t\\t\\tnode.setGeometry(Json.parse(rs.getString(\\\"geometry\\\")));\\n\\t\\t\\t\\tnodes.add(node);\\n\\t\\t\\t}\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\te.printStackTrace();\\n\\t\\t} finally {\\n\\t\\t\\tif (conn !\\u003d null) try {\\n\\t\\t\\t\\tconn.close();\\n\\t\\t\\t} catch (SQLException e) {\\n\\t\\t\\t\\te.printStackTrace();\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn nodes;\\n\\t}\"}","43":"{\"expressionStart\":{\"String:vers\":544,\"ResultSet.getDate()\":631,\"String:uid\":599,\"Json.parse()\":761,\"DB.getDataSource()\":59,\"String\":642,\"OsmNode.hstoreFormatToTags()\":697,\"ResultSet.next()\":474,\"Connection.close()\":903,\"String:tags\":729,\"int:1\":429,\"\\u003cnullcheck\\u003e\":879,\"int:0\":613,\"ResultSet.getInt()\":534,\"SQLException.printStackTrace()\":837,\"ResultSet.getString()\":586,\"ResultSet.getLong()\":510,\"String:id\":521,\"\\u003creturn\\u003e\":983,\"OsmNode.setGeometry()\":744,\"DataSource.getConnection()\":186,\"OsmNode.\\u003cinit\\u003e\":498,\"PreparedStatement.setLong()\":418,\"Connection.prepareStatement()\":387,\"PreparedStatement.executeQuery()\":445,\"null:null\":162},\"expressionEnd\":{\"String:vers\":550,\"ResultSet.getDate()\":651,\"String:uid\":604,\"Json.parse()\":797,\"DB.getDataSource()\":77,\"String\":650,\"OsmNode.hstoreFormatToTags()\":737,\"ResultSet.next()\":483,\"Connection.close()\":915,\"String:tags\":735,\"int:1\":430,\"\\u003cnullcheck\\u003e\":891,\"int:0\":614,\"ResultSet.getInt()\":551,\"SQLException.printStackTrace()\":856,\"ResultSet.getString()\":605,\"ResultSet.getLong()\":526,\"String:id\":525,\"\\u003creturn\\u003e\":995,\"OsmNode.setGeometry()\":798,\"DataSource.getConnection()\":204,\"OsmNode.\\u003cinit\\u003e\":738,\"PreparedStatement.setLong()\":435,\"Connection.prepareStatement()\":413,\"PreparedStatement.executeQuery()\":462,\"null:null\":166},\"rawCode\":\"public static OsmNode findById(long id){\\n\\t\\tDataSource ds \\u003d DB.getDataSource();\\n\\t\\tConnection conn \\u003d null;\\n\\t\\tPreparedStatement st;\\n\\t\\tResultSet rs;\\n\\t\\tOsmNode node \\u003d null;\\n\\t\\ttry {\\n\\t\\t\\tconn \\u003d ds.getConnection();\\n\\t\\t\\tString sql \\u003d \\\"select id, vers, usr, uid, timest, featurepicture, tags, st_asgeojson(ST_Transform(ST_SetSRID(geom, 900913),4326)) as geometry from osmnodes where id \\u003d ?\\\";\\n\\t\\t\\tst \\u003d conn.prepareStatement(sql);\\n\\t\\t\\tst.setLong(1, id);\\n\\t\\t\\trs \\u003d st.executeQuery();\\n\\t\\t\\twhile (rs.next()) {\\n\\t\\t\\t\\tnode \\u003d new OsmNode(rs.getLong(\\\"id\\\"),\\n\\t\\t\\t\\t\\t\\trs.getInt(\\\"vers\\\"),\\n\\t\\t\\t\\t\\t\\trs.getString(\\\"usr\\\"),\\n\\t\\t\\t\\t\\t\\trs.getString(\\\"uid\\\"),\\n\\t\\t\\t\\t\\t\\t0,\\n\\t\\t\\t\\t\\t\\t0,\\n\\t\\t\\t\\t\\t\\trs.getDate(\\\"timest\\\"),\\n\\t\\t\\t\\t\\t\\trs.getString(\\\"featurepicture\\\"),\\n\\t\\t\\t\\t\\t\\thstoreFormatToTags(rs.getString(\\\"tags\\\")));\\n\\t\\t\\t\\tnode.setGeometry(Json.parse(rs.getString(\\\"geometry\\\")));\\n\\t\\t\\t}\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\te.printStackTrace();\\n\\t\\t} finally {\\n\\t\\t\\tif (conn !\\u003d null) try {\\n\\t\\t\\t\\tconn.close();\\n\\t\\t\\t} catch (SQLException e) {\\n\\t\\t\\t\\te.printStackTrace();\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn node;\\n\\t}\"}","44":"{\"expressionStart\":{\"String:VendorError: \":918,\"ResultSet.next()\":588,\"Statement.close()\":1134,\"SQLException.getErrorCode()\":936,\"ResultSet.close()\":1009,\"int:2\":707,\"Vector.\\u003cinit\\u003e\":207,\"int:1\":631,\"\\u003cnullcheck\\u003e\":980,\"Statement.executeQuery()\":556,\"UNKNOWN.createStatement()\":252,\"SQLException.printStackTrace()\":441,\"Vector.clone()\":1245,\"String:\":643,\"ResultSet.getString()\":649,\"String:select \":495,\"Vector.add()\":681,\"Vector.\\u003ccast\\u003e\":1237,\"\\u003creturn\\u003e\":1230,\"String:SQLState: \":862,\"SQLException.getSQLState()\":877,\"String: from \":510,\"String:SQLException: \":803,\"null:null\":1207,\"String: where \":527,\"\\u003d\":1200,\"UNKNOWN.println()\":899,\"SQLException.getMessage()\":822},\"expressionEnd\":{\"String:VendorError: \":933,\"ResultSet.next()\":597,\"Statement.close()\":1146,\"SQLException.getErrorCode()\":953,\"ResultSet.close()\":1019,\"int:2\":708,\"Vector.\\u003cinit\\u003e\":227,\"int:1\":632,\"\\u003cnullcheck\\u003e\":990,\"Statement.executeQuery()\":580,\"UNKNOWN.createStatement()\":369,\"SQLException.printStackTrace()\":460,\"Vector.clone()\":1259,\"String:\":645,\"ResultSet.getString()\":664,\"String:select \":504,\"Vector.add()\":743,\"Vector.\\u003ccast\\u003e\":1259,\"\\u003creturn\\u003e\":1260,\"String:SQLState: \":874,\"SQLException.getSQLState()\":893,\"String: from \":518,\"String:SQLException: \":819,\"null:null\":1211,\"String: where \":536,\"\\u003d\":1211,\"UNKNOWN.println()\":954,\"SQLException.getMessage()\":837},\"rawCode\":\"/*****************************************/\\n\\n\\tpublic static Vector holeFeldForUpdate(String tabelle, String feld, String kriterium){\\n\\t\\tStatement stmt \\u003d null;\\n\\t\\tResultSet rs \\u003d null;\\n\\t\\tVector\\u003cString\\u003e retvec \\u003d new Vector\\u003cString\\u003e();\\n\\t\\t\\t\\n\\t\\ttry {\\n\\t\\t\\tstmt \\u003d  ICDrahmen.thisClass.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,\\n\\t\\t\\t            ResultSet.CONCUR_UPDATABLE );\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\t// TODO Auto-generated catch block\\n\\t\\t\\te.printStackTrace();\\n\\t\\t}\\n\\t\\ttry{\\n\\t\\t\\t\\n\\t\\t\\tString sstmt \\u003d \\\"select \\\"+feld+\\\" from \\\"+tabelle+\\\" where \\\"+kriterium;\\n\\t\\t\\trs \\u003d stmt.executeQuery(sstmt);\\n\\t\\t\\tif(rs.next()){\\n\\t\\t\\t\\t retvec.add( (rs.getString(1)\\u003d\\u003dnull  ? \\\"\\\" :  rs.getString(1)) );\\t\\t\\t\\t\\t\\t \\n\\t\\t\\t\\t retvec.add( (rs.getString(2)\\u003d\\u003dnull  ? \\\"\\\" :  rs.getString(2)) );\\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t}catch(SQLException ev){\\n\\t\\t\\tSystem.out.println(\\\"SQLException: \\\" + ev.getMessage());\\n\\t\\t\\tSystem.out.println(\\\"SQLState: \\\" + ev.getSQLState());\\n\\t\\t\\tSystem.out.println(\\\"VendorError: \\\" + ev.getErrorCode());\\n\\t\\t}\\t\\n\\t\\tfinally {\\n\\t\\t\\tif (rs !\\u003d null) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\trs.close();\\n\\t\\t\\t\\t} catch (SQLException sqlEx) { // ignore }\\n\\t\\t\\t\\t\\trs \\u003d null;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\t\\n\\t\\t\\tif (stmt !\\u003d null) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tstmt.close();\\n\\t\\t\\t\\t} catch (SQLException sqlEx) { // ignore }\\n\\t\\t\\t\\t\\tstmt \\u003d null;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn (Vector)retvec.clone();\\n\\t}\"}","45":"{\"expressionStart\":{\"\\u003cr\\u003e\":1070,\"String\":754,\"String:VendorError: \":1609,\"ResultSet.next()\":924,\"String: \":740,\"ResultSetMetaData.getColumnCount()\":1018,\"Statement.close()\":1825,\"Integer.toString()\":805,\"Integer.\\u003cinit\\u003e\":805,\"SQLException.getErrorCode()\":1627,\"List.size()\":896,\"ResultSetMetaData.getColumnName()\":1157,\"ResultSet.close()\":1700,\"Vector.\\u003cinit\\u003e\":226,\"int:1\":823,\"\\u003cnullcheck\\u003e\":1671,\"int:0\":782,\"Statement.executeQuery()\":850,\"UNKNOWN.createStatement()\":271,\"SQLException.printStackTrace()\":593,\"Vector.clone()\":1936,\"List.contains()\":1133,\"String:\":838,\"ResultSet.getString()\":1309,\"String:select \":706,\"ResultSet.getMetaData()\":972,\"Vector.add()\":1297,\"Vector.\\u003ccast\\u003e\":1928,\"\\u003creturn\\u003e\":1921,\"int[].arrayget()\":817,\"String:SQLState: \":1553,\"SQLException.getSQLState()\":1568,\"String: from \":723,\"String:SQLException: \":1494,\"null:null\":1769,\"\\u003ca\\u003e\":1090,\"String:,\":801,\"\\u003d\":1764,\"UNKNOWN.println()\":1590,\"SQLException.getMessage()\":1513},\"expressionEnd\":{\"\\u003cr\\u003e\":1089,\"String\":763,\"String:VendorError: \":1624,\"ResultSet.next()\":933,\"String: \":743,\"ResultSetMetaData.getColumnCount()\":1045,\"Statement.close()\":1837,\"Integer.toString()\":837,\"Integer.\\u003cinit\\u003e\":826,\"SQLException.getErrorCode()\":1644,\"List.size()\":916,\"ResultSetMetaData.getColumnName()\":1184,\"ResultSet.close()\":1710,\"Vector.\\u003cinit\\u003e\":246,\"int:1\":824,\"\\u003cnullcheck\\u003e\":1681,\"int:0\":783,\"Statement.executeQuery()\":874,\"UNKNOWN.createStatement()\":387,\"SQLException.printStackTrace()\":612,\"Vector.clone()\":1950,\"List.contains()\":1185,\"String:\":840,\"ResultSet.getString()\":1324,\"String:select \":715,\"ResultSet.getMetaData()\":988,\"Vector.add()\":1357,\"Vector.\\u003ccast\\u003e\":1950,\"\\u003creturn\\u003e\":1951,\"int[].arrayget()\":825,\"String:SQLState: \":1565,\"SQLException.getSQLState()\":1584,\"String: from \":731,\"String:SQLException: \":1510,\"null:null\":1773,\"\\u003ca\\u003e\":1093,\"String:,\":804,\"\\u003d\":1773,\"UNKNOWN.println()\":1645,\"SQLException.getMessage()\":1528},\"rawCode\":\"/*******************************/\\n\\tpublic static Vector holeSatzLimit(String tabelle, String felder, String kriterium,int[] limit, List ausschliessen){\\n\\t\\tStatement stmt \\u003d null;\\n\\t\\tResultSet rs \\u003d null;\\n\\t\\tVector\\u003cString\\u003e retvec \\u003d new Vector\\u003cString\\u003e();\\n\\t\\t\\t\\n\\t\\ttry {\\n\\t\\t\\tstmt \\u003d  ICDrahmen.thisClass.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,\\n\\t\\t            ResultSet.CONCUR_UPDATABLE );\\n/*\\t\\t\\t\\n\\t\\t\\tstmt \\u003d  Reha.thisClass.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,\\n\\t\\t\\t            ResultSet.CONCUR_UPDATABLE );\\n*/\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\t// TODO Auto-generated catch block\\n\\t\\t\\te.printStackTrace();\\n\\t\\t}\\n\\t\\ttry{\\n\\t\\t\\t//Reha.thisFrame.setCursor(new Cursor(Cursor.WAIT_CURSOR));\\n\\t\\t\\tString sstmt \\u003d \\\"select \\\"+felder+\\\" from \\\"+tabelle+\\\" \\\"+kriterium+\\\" LIMIT \\\"+new Integer(limit[0]).toString()+\\n\\t\\t\\t\\\",\\\"+new Integer(limit[1]).toString()+\\\"\\\";\\n\\t\\t\\trs \\u003d stmt.executeQuery(sstmt);\\n\\t\\t\\tint nichtlesen \\u003d ausschliessen.size();\\n\\t\\t\\tif(rs.next()){\\n\\t\\t\\t\\t ResultSetMetaData rsMetaData \\u003d rs.getMetaData() ;\\n\\t\\t\\t\\t int numberOfColumns \\u003d rsMetaData.getColumnCount()+1;\\n\\t\\t\\t\\t for(int i \\u003d 1 ; i \\u003c numberOfColumns;i++){\\n\\t\\t\\t\\t\\t if(nichtlesen \\u003e 0){\\n\\t\\t\\t\\t\\t\\t if(!ausschliessen.contains( rsMetaData.getColumnName(i)) ){\\n\\t\\t\\t\\t\\t\\t\\t retvec.add( (rs.getString(i)\\u003d\\u003dnull  ? \\\"\\\" :  rs.getString(i)) );\\t\\t\\t\\t\\t\\t \\n\\t\\t\\t\\t\\t\\t }\\n\\t\\t\\t\\t\\t }else{\\n\\t\\t\\t\\t\\t\\t retvec.add((rs.getString(i)\\u003d\\u003dnull  ? \\\"\\\" :  rs.getString(i)));\\n\\t\\t\\t\\t\\t }\\n\\t\\t\\t\\t }\\n\\t\\t\\t}\\n\\t\\t\\t//Reha.thisFrame.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));\\n\\t\\t}catch(SQLException ev){\\n\\t\\t\\tSystem.out.println(\\\"SQLException: \\\" + ev.getMessage());\\n\\t\\t\\tSystem.out.println(\\\"SQLState: \\\" + ev.getSQLState());\\n\\t\\t\\tSystem.out.println(\\\"VendorError: \\\" + ev.getErrorCode());\\n\\t\\t}\\t\\n\\t\\tfinally {\\n\\t\\t\\tif (rs !\\u003d null) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\trs.close();\\n\\t\\t\\t\\t} catch (SQLException sqlEx) { // ignore }\\n\\t\\t\\t\\t\\trs \\u003d null;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\t\\n\\t\\t\\tif (stmt !\\u003d null) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tstmt.close();\\n\\t\\t\\t\\t} catch (SQLException sqlEx) { // ignore }\\n\\t\\t\\t\\t\\tstmt \\u003d null;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn (Vector)retvec.clone();\\n\\t}\"}","46":"{\"expressionStart\":{\"String:\":173,\"ResultSet.getString()\":648,\"String:select \":493,\"String:VendorError: \":842,\"String\":508,\"\\u003creturn\\u003e\":1154,\"ResultSet.next()\":591,\"Statement.close()\":1058,\"String:SQLState: \":786,\"SQLException.getErrorCode()\":860,\"SQLException.getSQLState()\":801,\"String:SQLException: \":727,\"ResultSet.close()\":933,\"null:null\":1131,\"\\u003d\":1124,\"UNKNOWN.println()\":767,\"Statement.executeQuery()\":558,\"\\u003cnullcheck\\u003e\":614,\"SQLException.getMessage()\":746,\"UNKNOWN.createStatement()\":250,\"SQLException.printStackTrace()\":439},\"expressionEnd\":{\"String:\":175,\"ResultSet.getString()\":666,\"String:select \":502,\"String:VendorError: \":857,\"String\":527,\"\\u003creturn\\u003e\":1165,\"ResultSet.next()\":600,\"Statement.close()\":1070,\"String:SQLState: \":798,\"SQLException.getErrorCode()\":877,\"SQLException.getSQLState()\":817,\"String:SQLException: \":743,\"ResultSet.close()\":943,\"null:null\":1135,\"\\u003d\":1135,\"UNKNOWN.println()\":818,\"Statement.executeQuery()\":582,\"\\u003cnullcheck\\u003e\":638,\"SQLException.getMessage()\":761,\"UNKNOWN.createStatement()\":367,\"SQLException.printStackTrace()\":458},\"rawCode\":\"/*****************************************/\\n\\tpublic static String holePatFeld(String feld, String kriterium){\\n\\t\\tStatement stmt \\u003d null;\\n\\t\\tResultSet rs \\u003d null;\\n\\t\\tString ret \\u003d \\\"\\\";\\n\\t\\t//Vector\\u003cString\\u003e retvec \\u003d new Vector\\u003cString\\u003e();\\n\\t\\t\\t\\n\\t\\ttry {\\n\\t\\t\\tstmt \\u003d  ICDrahmen.thisClass.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,\\n\\t\\t\\t            ResultSet.CONCUR_UPDATABLE );\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\t// TODO Auto-generated catch block\\n\\t\\t\\te.printStackTrace();\\n\\t\\t}\\n\\t\\ttry{\\n\\t\\t\\t\\n\\t\\t\\tString sstmt \\u003d \\\"select \\\"+feld+\\\" from pat5 where \\\"+kriterium+\\\" LIMIT 1\\\";\\n\\t\\t\\trs \\u003d stmt.executeQuery(sstmt);\\n\\n\\t\\t\\tif(rs.next()){\\n\\t\\t\\t\\tret \\u003d (rs.getString(feld)\\u003d\\u003dnull  ? \\\"\\\" :  rs.getString(feld));\\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t}catch(SQLException ev){\\n\\t\\t\\tSystem.out.println(\\\"SQLException: \\\" + ev.getMessage());\\n\\t\\t\\tSystem.out.println(\\\"SQLState: \\\" + ev.getSQLState());\\n\\t\\t\\tSystem.out.println(\\\"VendorError: \\\" + ev.getErrorCode());\\n\\t\\t}\\t\\n\\t\\tfinally {\\n\\t\\t\\tif (rs !\\u003d null) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\trs.close();\\n\\t\\t\\t\\t} catch (SQLException sqlEx) { // ignore }\\n\\t\\t\\t\\t\\trs \\u003d null;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\t\\n\\t\\t\\tif (stmt !\\u003d null) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tstmt.close();\\n\\t\\t\\t\\t} catch (SQLException sqlEx) { // ignore }\\n\\t\\t\\t\\t\\tstmt \\u003d null;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn ret;\\n\\t}\"}","47":"{\"expressionStart\":{\"String:\":173,\"String:select \":491,\"ResultSet.getString()\":649,\"String\":539,\"String:VendorError: \":843,\"\\u003creturn\\u003e\":1155,\"ResultSet.next()\":592,\"Statement.close()\":1059,\"String:SQLState: \":787,\"SQLException.getErrorCode()\":861,\"SQLException.getSQLState()\":802,\"String:SQLException: \":728,\"ResultSet.close()\":934,\"null:null\":1003,\"Vector.\\u003cinit\\u003e\":203,\"\\u003d\":998,\"UNKNOWN.println()\":709,\"Statement.executeQuery()\":559,\"\\u003cnullcheck\\u003e\":615,\"SQLException.getMessage()\":747,\"SQLException.printStackTrace()\":437,\"UNKNOWN.createStatement()\":248},\"expressionEnd\":{\"String:\":175,\"String:select \":500,\"ResultSet.getString()\":667,\"String\":549,\"String:VendorError: \":858,\"\\u003creturn\\u003e\":1166,\"ResultSet.next()\":601,\"Statement.close()\":1071,\"String:SQLState: \":799,\"SQLException.getErrorCode()\":878,\"SQLException.getSQLState()\":818,\"String:SQLException: \":744,\"ResultSet.close()\":944,\"null:null\":1007,\"Vector.\\u003cinit\\u003e\":223,\"\\u003d\":1007,\"UNKNOWN.println()\":763,\"Statement.executeQuery()\":583,\"\\u003cnullcheck\\u003e\":639,\"SQLException.getMessage()\":762,\"SQLException.printStackTrace()\":456,\"UNKNOWN.createStatement()\":365},\"rawCode\":\"/*****************************************/\\n\\tpublic static String holeRezFeld(String feld, String kriterium){\\n\\t\\tStatement stmt \\u003d null;\\n\\t\\tResultSet rs \\u003d null;\\n\\t\\tString ret \\u003d \\\"\\\";\\n\\t\\tVector\\u003cString\\u003e retvec \\u003d new Vector\\u003cString\\u003e();\\n\\t\\t\\t\\n\\t\\ttry {\\n\\t\\t\\tstmt \\u003d  ICDrahmen.thisClass.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,\\n\\t\\t\\t            ResultSet.CONCUR_UPDATABLE );\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\t// TODO Auto-generated catch block\\n\\t\\t\\te.printStackTrace();\\n\\t\\t}\\n\\t\\ttry{\\n\\t\\t\\t\\n\\t\\t\\tString sstmt \\u003d \\\"select \\\"+feld+\\\" from verordn where \\\"+kriterium+\\\" LIMIT 1\\\";\\n\\t\\t\\trs \\u003d stmt.executeQuery(sstmt);\\n\\n\\t\\t\\tif(rs.next()){\\n\\t\\t\\t\\tret \\u003d (rs.getString(feld)\\u003d\\u003dnull  ? \\\"\\\" :  rs.getString(feld));\\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t}catch(SQLException ev){\\n\\t\\t\\tSystem.out.println(\\\"SQLException: \\\" + ev.getMessage());\\n\\t\\t\\tSystem.out.println(\\\"SQLState: \\\" + ev.getSQLState());\\n\\t\\t\\tSystem.out.println(\\\"VendorError: \\\" + ev.getErrorCode());\\n\\t\\t}\\t\\n\\t\\tfinally {\\n\\t\\t\\tif (rs !\\u003d null) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\trs.close();\\n\\t\\t\\t\\t} catch (SQLException sqlEx) { // ignore }\\n\\t\\t\\t\\t\\trs \\u003d null;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\t\\n\\t\\t\\tif (stmt !\\u003d null) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tstmt.close();\\n\\t\\t\\t\\t} catch (SQLException sqlEx) { // ignore }\\n\\t\\t\\t\\t\\tstmt \\u003d null;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn ret;\\n\\t}\"}","48":"{\"expressionStart\":{\"\\u003cr\\u003e\":791,\"String:VendorError: \":1268,\"String\":551,\"ResultSet.next()\":645,\"ResultSetMetaData.getColumnCount()\":739,\"Statement.close()\":1484,\"SQLException.getErrorCode()\":1286,\"List.size()\":617,\"ResultSetMetaData.getColumnName()\":878,\"ResultSet.close()\":1359,\"Vector.\\u003cinit\\u003e\":209,\"int:1\":767,\"\\u003cnullcheck\\u003e\":1453,\"int:0\":839,\"Statement.executeQuery()\":571,\"UNKNOWN.createStatement()\":254,\"SQLException.printStackTrace()\":443,\"Vector.clone()\":1595,\"List.contains()\":854,\"String:\":956,\"String:select \":497,\"ResultSet.getMetaData()\":693,\"ResultSet.getString()\":962,\"Vector.add()\":1018,\"Vector.\\u003ccast\\u003e\":1587,\"\\u003creturn\\u003e\":1580,\"String:SQLState: \":1212,\"SQLException.getSQLState()\":1227,\"String:SQLException: \":1153,\"String: from \":514,\"null:null\":1557,\"\\u003ca\\u003e\":811,\"String: where \":531,\"\\u003d\":1550,\"UNKNOWN.println()\":1249,\"SQLException.getMessage()\":1172},\"expressionEnd\":{\"\\u003cr\\u003e\":810,\"String:VendorError: \":1283,\"String\":561,\"ResultSet.next()\":654,\"ResultSetMetaData.getColumnCount()\":766,\"Statement.close()\":1496,\"SQLException.getErrorCode()\":1303,\"List.size()\":637,\"ResultSetMetaData.getColumnName()\":905,\"ResultSet.close()\":1369,\"Vector.\\u003cinit\\u003e\":229,\"int:1\":768,\"\\u003cnullcheck\\u003e\":1465,\"int:0\":840,\"Statement.executeQuery()\":595,\"UNKNOWN.createStatement()\":371,\"SQLException.printStackTrace()\":462,\"Vector.clone()\":1609,\"List.contains()\":906,\"String:\":958,\"String:select \":506,\"ResultSet.getMetaData()\":709,\"ResultSet.getString()\":977,\"Vector.add()\":1078,\"Vector.\\u003ccast\\u003e\":1609,\"\\u003creturn\\u003e\":1610,\"String:SQLState: \":1224,\"SQLException.getSQLState()\":1243,\"String:SQLException: \":1169,\"String: from \":522,\"null:null\":1561,\"\\u003ca\\u003e\":814,\"String: where \":540,\"\\u003d\":1561,\"UNKNOWN.println()\":1304,\"SQLException.getMessage()\":1187},\"rawCode\":\"/*******************************/\\n\\tpublic static Vector holeSatz(String tabelle, String felder, String kriterium, List ausschliessen){\\n\\t\\tStatement stmt \\u003d null;\\n\\t\\tResultSet rs \\u003d null;\\n\\t\\tVector\\u003cString\\u003e retvec \\u003d new Vector\\u003cString\\u003e();\\n\\t\\t\\t\\n\\t\\ttry {\\n\\t\\t\\tstmt \\u003d  ICDrahmen.thisClass.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,\\n\\t\\t\\t            ResultSet.CONCUR_UPDATABLE );\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\t// TODO Auto-generated catch block\\n\\t\\t\\te.printStackTrace();\\n\\t\\t}\\n\\t\\ttry{\\n\\t\\t\\t\\n\\t\\t\\tString sstmt \\u003d \\\"select \\\"+felder+\\\" from \\\"+tabelle+\\\" where \\\"+kriterium+\\\" LIMIT 1\\\";\\n\\t\\t\\trs \\u003d stmt.executeQuery(sstmt);\\n\\t\\t\\tint nichtlesen \\u003d ausschliessen.size();\\n\\t\\t\\tif(rs.next()){\\n\\t\\t\\t\\t ResultSetMetaData rsMetaData \\u003d rs.getMetaData() ;\\n\\t\\t\\t\\t int numberOfColumns \\u003d rsMetaData.getColumnCount()+1;\\n\\t\\t\\t\\t for(int i \\u003d 1 ; i \\u003c numberOfColumns;i++){\\n\\t\\t\\t\\t\\t if(nichtlesen \\u003e 0){\\n\\t\\t\\t\\t\\t\\t if(!ausschliessen.contains( rsMetaData.getColumnName(i)) ){\\n\\t\\t\\t\\t\\t\\t\\t retvec.add( (rs.getString(i)\\u003d\\u003dnull  ? \\\"\\\" :  rs.getString(i)) );\\t\\t\\t\\t\\t\\t \\n\\t\\t\\t\\t\\t\\t }\\n\\t\\t\\t\\t\\t }else{\\n\\t\\t\\t\\t\\t\\t retvec.add((rs.getString(i)\\u003d\\u003dnull  ? \\\"\\\" :  rs.getString(i)));\\n\\t\\t\\t\\t\\t }\\n\\t\\t\\t\\t }\\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t}catch(SQLException ev){\\n\\t\\t\\tSystem.out.println(\\\"SQLException: \\\" + ev.getMessage());\\n\\t\\t\\tSystem.out.println(\\\"SQLState: \\\" + ev.getSQLState());\\n\\t\\t\\tSystem.out.println(\\\"VendorError: \\\" + ev.getErrorCode());\\n\\t\\t}\\t\\n\\t\\tfinally {\\n\\t\\t\\tif (rs !\\u003d null) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\trs.close();\\n\\t\\t\\t\\t} catch (SQLException sqlEx) { // ignore }\\n\\t\\t\\t\\t\\trs \\u003d null;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\t\\n\\t\\t\\tif (stmt !\\u003d null) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tstmt.close();\\n\\t\\t\\t\\t} catch (SQLException sqlEx) { // ignore }\\n\\t\\t\\t\\t\\tstmt \\u003d null;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn (Vector)retvec.clone();\\n\\t}\"}","49":"{\"expressionStart\":{\"\\u003cr\\u003e\":855,\"String:VendorError: \":1380,\"ResultSet.next()\":689,\"ResultSetMetaData.getColumnCount()\":803,\"Statement.close()\":1596,\"SQLException.getErrorCode()\":1398,\"List.size()\":658,\"ResultSetMetaData.getColumnName()\":942,\"ResultSet.close()\":1471,\"Vector.\\u003cinit\\u003e\":211,\"int:1\":831,\"\\u003cnullcheck\\u003e\":1095,\"int:0\":903,\"Statement.executeQuery()\":612,\"SQLException.printStackTrace()\":495,\"UNKNOWN.createStatement()\":306,\"Vector.clone()\":1707,\"Vector.clear()\":705,\"String:\":1020,\"List.contains()\":918,\"String:select \":549,\"ResultSet.getString()\":1095,\"ResultSet.getMetaData()\":757,\"Vector.add()\":982,\"Vector.\\u003ccast\\u003e\":1699,\"\\u003creturn\\u003e\":1692,\"String:SQLState: \":1324,\"SQLException.getSQLState()\":1339,\"String: from \":566,\"String:SQLException: \":1265,\"null:null\":1669,\"\\u003ca\\u003e\":875,\"String: where \":583,\"\\u003d\":1662,\"UNKNOWN.println()\":1361,\"SQLException.getMessage()\":1284},\"expressionEnd\":{\"\\u003cr\\u003e\":874,\"String:VendorError: \":1395,\"ResultSet.next()\":698,\"ResultSetMetaData.getColumnCount()\":830,\"Statement.close()\":1608,\"SQLException.getErrorCode()\":1415,\"List.size()\":678,\"ResultSetMetaData.getColumnName()\":969,\"ResultSet.close()\":1481,\"Vector.\\u003cinit\\u003e\":231,\"int:1\":832,\"\\u003cnullcheck\\u003e\":1116,\"int:0\":904,\"Statement.executeQuery()\":636,\"SQLException.printStackTrace()\":514,\"UNKNOWN.createStatement()\":423,\"Vector.clone()\":1726,\"Vector.clear()\":719,\"String:\":1022,\"List.contains()\":970,\"String:select \":558,\"ResultSet.getString()\":1110,\"ResultSet.getMetaData()\":773,\"Vector.add()\":1044,\"Vector.\\u003ccast\\u003e\":1726,\"\\u003creturn\\u003e\":1727,\"String:SQLState: \":1336,\"SQLException.getSQLState()\":1355,\"String: from \":574,\"String:SQLException: \":1281,\"null:null\":1673,\"\\u003ca\\u003e\":878,\"String: where \":592,\"\\u003d\":1673,\"UNKNOWN.println()\":1416,\"SQLException.getMessage()\":1299},\"rawCode\":\"/*******************************/\\n\\tpublic static Vector holeSaetze(String tabelle, String felder, String kriterium, List ausschliessen){\\n\\t\\tStatement stmt \\u003d null;\\n\\t\\tResultSet rs \\u003d null;\\n\\t\\tVector\\u003cString\\u003e retvec \\u003d new Vector\\u003cString\\u003e();\\n\\t\\tVector\\u003cVector\\u003e retkomplett \\u003d new Vector\\u003cVector\\u003e();\\t\\n\\t\\ttry {\\n\\t\\t\\tstmt \\u003d  ICDrahmen.thisClass.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,\\n\\t\\t\\t            ResultSet.CONCUR_UPDATABLE );\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\t// TODO Auto-generated catch block\\n\\t\\t\\te.printStackTrace();\\n\\t\\t}\\n\\t\\ttry{\\n\\t\\t\\t\\n\\t\\t\\tString sstmt \\u003d \\\"select \\\"+felder+\\\" from \\\"+tabelle+\\\" where \\\"+kriterium;\\n\\t\\t\\trs \\u003d stmt.executeQuery(sstmt);\\n\\t\\t\\tint nichtlesen \\u003d ausschliessen.size();\\n\\t\\t\\twhile(rs.next()){\\n\\t\\t\\t\\tretvec.clear();\\n\\t\\t\\t\\t ResultSetMetaData rsMetaData \\u003d rs.getMetaData() ;\\n\\t\\t\\t\\t int numberOfColumns \\u003d rsMetaData.getColumnCount()+1;\\n\\t\\t\\t\\t for(int i \\u003d 1 ; i \\u003c numberOfColumns;i++){\\n\\t\\t\\t\\t\\t if(nichtlesen \\u003e 0){\\n\\t\\t\\t\\t\\t\\t if(!ausschliessen.contains( rsMetaData.getColumnName(i)) ){\\n\\t\\t\\t\\t\\t\\t\\t retvec.add( (rs.getString(i)\\u003d\\u003dnull  ? \\\"\\\" :  rs.getString(i)) );\\t\\t\\t\\t\\t\\t \\n\\t\\t\\t\\t\\t\\t }\\n\\t\\t\\t\\t\\t }else{\\n\\t\\t\\t\\t\\t\\t retvec.add( (rs.getString(i)\\u003d\\u003dnull  ? \\\"\\\" :  rs.getString(i)) );\\n\\t\\t\\t\\t\\t }\\n\\t\\t\\t\\t }\\n\\t\\t\\t\\t retkomplett.add((Vector)retvec.clone());\\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t}catch(SQLException ev){\\n\\t\\t\\tSystem.out.println(\\\"SQLException: \\\" + ev.getMessage());\\n\\t\\t\\tSystem.out.println(\\\"SQLState: \\\" + ev.getSQLState());\\n\\t\\t\\tSystem.out.println(\\\"VendorError: \\\" + ev.getErrorCode());\\n\\t\\t}\\t\\n\\t\\tfinally {\\n\\t\\t\\tif (rs !\\u003d null) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\trs.close();\\n\\t\\t\\t\\t} catch (SQLException sqlEx) { // ignore }\\n\\t\\t\\t\\t\\trs \\u003d null;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\t\\n\\t\\t\\tif (stmt !\\u003d null) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tstmt.close();\\n\\t\\t\\t\\t} catch (SQLException sqlEx) { // ignore }\\n\\t\\t\\t\\t\\tstmt \\u003d null;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn (Vector)retkomplett.clone();\\n\\t}\"}","50":"{\"expressionStart\":{\"\\u003cr\\u003e\":772,\"String:VendorError: \":1104,\"ResultSet.next()\":606,\"ResultSetMetaData.getColumnCount()\":720,\"Statement.close()\":1320,\"SQLException.getErrorCode()\":1122,\"ResultSet.close()\":1195,\"Vector.\\u003cinit\\u003e\":262,\"int:1\":748,\"\\u003cnullcheck\\u003e\":1166,\"Statement.executeQuery()\":570,\"UNKNOWN.createStatement()\":312,\"SQLException.printStackTrace()\":501,\"Vector.clone()\":914,\"Vector.clear()\":622,\"String:\":171,\"ResultSet.getString()\":849,\"ResultSet.getMetaData()\":674,\"Vector.add()\":882,\"Vector.\\u003ccast\\u003e\":1423,\"\\u003creturn\\u003e\":1416,\"String:SQLState: \":1048,\"SQLException.getSQLState()\":1063,\"String:SQLException: \":989,\"null:null\":1393,\"\\u003ca\\u003e\":792,\"\\u003d\":1386,\"UNKNOWN.println()\":1085,\"SQLException.getMessage()\":1008},\"expressionEnd\":{\"\\u003cr\\u003e\":791,\"String:VendorError: \":1119,\"ResultSet.next()\":615,\"ResultSetMetaData.getColumnCount()\":747,\"Statement.close()\":1332,\"SQLException.getErrorCode()\":1139,\"ResultSet.close()\":1205,\"Vector.\\u003cinit\\u003e\":290,\"int:1\":749,\"\\u003cnullcheck\\u003e\":1176,\"Statement.executeQuery()\":594,\"UNKNOWN.createStatement()\":429,\"SQLException.printStackTrace()\":520,\"Vector.clone()\":928,\"Vector.clear()\":636,\"String:\":173,\"ResultSet.getString()\":864,\"ResultSet.getMetaData()\":690,\"Vector.add()\":929,\"Vector.\\u003ccast\\u003e\":1467,\"\\u003creturn\\u003e\":1468,\"String:SQLState: \":1060,\"SQLException.getSQLState()\":1079,\"String:SQLException: \":1005,\"null:null\":1397,\"\\u003ca\\u003e\":795,\"\\u003d\":1397,\"UNKNOWN.println()\":1140,\"SQLException.getMessage()\":1023},\"rawCode\":\"/*****************************************/\\n\\tpublic static Vector\\u003cVector\\u003cString\\u003e\\u003e holeFelder(String xstmt){\\n\\t\\tStatement stmt \\u003d null;\\n\\t\\tResultSet rs \\u003d null;\\n\\t\\tString ret \\u003d \\\"\\\";\\n\\t\\tVector\\u003cString\\u003e retvec \\u003d new Vector\\u003cString\\u003e();\\n\\t\\tVector\\u003cVector\\u003cString\\u003e\\u003e retkomplett \\u003d new Vector\\u003cVector\\u003cString\\u003e\\u003e();\\t\\n\\t\\ttry {\\n\\t\\t\\tstmt \\u003d  ICDrahmen.thisClass.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,\\n\\t\\t\\t            ResultSet.CONCUR_UPDATABLE );\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\t// TODO Auto-generated catch block\\n\\t\\t\\te.printStackTrace();\\n\\t\\t}\\n\\t\\ttry{\\n\\t\\t\\t\\n\\t\\t\\tString sstmt \\u003d xstmt;\\n\\t\\t\\trs \\u003d stmt.executeQuery(sstmt);\\n\\n\\t\\t\\twhile(rs.next()){\\n\\t\\t\\t\\tretvec.clear();\\n\\t\\t\\t\\t ResultSetMetaData rsMetaData \\u003d rs.getMetaData() ;\\n\\t\\t\\t\\t int numberOfColumns \\u003d rsMetaData.getColumnCount()+1;\\n\\t\\t\\t\\t for(int i \\u003d 1 ; i \\u003c numberOfColumns;i++){\\n\\t\\t\\t\\t\\t\\t retvec.add( (rs.getString(i)\\u003d\\u003dnull  ? \\\"\\\" :  rs.getString(i)) );\\n\\n\\t\\t\\t\\t }\\n\\t\\t\\t\\t retkomplett.add((Vector\\u003cString\\u003e)retvec.clone());\\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t}catch(SQLException ev){\\n\\t\\t\\tSystem.out.println(\\\"SQLException: \\\" + ev.getMessage());\\n\\t\\t\\tSystem.out.println(\\\"SQLState: \\\" + ev.getSQLState());\\n\\t\\t\\tSystem.out.println(\\\"VendorError: \\\" + ev.getErrorCode());\\n\\t\\t}\\t\\n\\t\\tfinally {\\n\\t\\t\\tif (rs !\\u003d null) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\trs.close();\\n\\t\\t\\t\\t} catch (SQLException sqlEx) { // ignore }\\n\\t\\t\\t\\t\\trs \\u003d null;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\t\\n\\t\\t\\tif (stmt !\\u003d null) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tstmt.close();\\n\\t\\t\\t\\t} catch (SQLException sqlEx) { // ignore }\\n\\t\\t\\t\\t\\tstmt \\u003d null;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn (Vector\\u003cVector\\u003cString\\u003e\\u003e) retkomplett.clone();\\n\\t}\"}","51":"{\"expressionStart\":{\"UUID.fromString()\":297,\"Session.assertConnectionIsOpen()\":59,\"ResultSet.wasNull()\":268,\"\\u003cthrow\\u003e\":377,\"Session.logColumnExtraction()\":209,\"Session.assertResultSetIsSet()\":93,\"ResultSet.getString()\":164,\"null:null\":290,\"\\u003creturn\\u003e\":261,\"Session.panic()\":383},\"expressionEnd\":{\"UUID.fromString()\":319,\"Session.assertConnectionIsOpen()\":83,\"ResultSet.wasNull()\":287,\"\\u003cthrow\\u003e\":395,\"Session.logColumnExtraction()\":247,\"Session.assertResultSetIsSet()\":115,\"ResultSet.getString()\":195,\"null:null\":294,\"\\u003creturn\\u003e\":320,\"Session.panic()\":394},\"rawCode\":\"public UUID getUniqueId(final String columnName) {\\n        assertConnectionIsOpen();\\n        assertResultSetIsSet();\\n        try {\\n            final String value \\u003d resultSet.getString(columnName);\\n            logColumnExtraction(columnName, value);\\n            return resultSet.wasNull() ? null : UUID.fromString(value);\\n        } catch (final SQLException sqlx) {\\n            throw panic(sqlx);\\n        }\\n    }\"}","52":"{\"expressionStart\":{\"Session.assertConnectionIsOpen()\":112,\"HypersonicException.\\u003cinit\\u003e\":457,\"\\u003cthrow\\u003e\":451,\"ResultSet.wasNull()\":321,\"Session.logColumnExtraction()\":262,\"Session.assertResultSetIsSet()\":146,\"null:null\":343,\"ResultSet.getString()\":217,\"UNKNOWN.valueOf()\":350,\"\\u003creturn\\u003e\":314},\"expressionEnd\":{\"Session.assertConnectionIsOpen()\":136,\"HypersonicException.\\u003cinit\\u003e\":486,\"\\u003cthrow\\u003e\":487,\"ResultSet.wasNull()\":340,\"Session.logColumnExtraction()\":300,\"Session.assertResultSetIsSet()\":168,\"null:null\":347,\"ResultSet.getString()\":248,\"UNKNOWN.valueOf()\":393,\"\\u003creturn\\u003e\":394},\"rawCode\":\"public ContainerDraft.ArtifactState getContainerStateFromString(\\n            final String columnName) {\\n        assertConnectionIsOpen();\\n        assertResultSetIsSet();\\n        try {\\n            final String value \\u003d resultSet.getString(columnName);\\n            logColumnExtraction(columnName, value);\\n            return resultSet.wasNull() ? null : ContainerDraft.ArtifactState.valueOf(value);\\n        } catch (final SQLException sqlx) {\\n            throw new HypersonicException(sqlx);\\n        }\\n    }\"}","53":"{\"expressionStart\":{\"Session.assertConnectionIsOpen()\":69,\"HypersonicException.\\u003cinit\\u003e\":381,\"ResultSet.wasNull()\":266,\"\\u003cthrow\\u003e\":375,\"Session.logColumnExtraction()\":207,\"Session.assertResultSetIsSet()\":97,\"ResultSet.getString()\":162,\"null:null\":288,\"ArtifactState.valueOf()\":295,\"\\u003creturn\\u003e\":259},\"expressionEnd\":{\"Session.assertConnectionIsOpen()\":93,\"HypersonicException.\\u003cinit\\u003e\":410,\"ResultSet.wasNull()\":285,\"\\u003cthrow\\u003e\":411,\"Session.logColumnExtraction()\":245,\"Session.assertResultSetIsSet()\":119,\"ResultSet.getString()\":193,\"null:null\":292,\"ArtifactState.valueOf()\":323,\"\\u003creturn\\u003e\":324},\"rawCode\":\"public ArtifactState getStateFromString(final String columnName) {\\n\\t\\tassertConnectionIsOpen();\\n\\t\\tassertResultSetIsSet();\\n\\t\\ttry {\\n            final String value \\u003d resultSet.getString(columnName);\\n            logColumnExtraction(columnName, value);\\n            return resultSet.wasNull() ? null : ArtifactState.valueOf(value);\\n\\t\\t} catch (final SQLException sqlx) {\\n            throw new HypersonicException(sqlx);\\n\\t\\t}\\n\\t}\"}","54":"{\"expressionStart\":{\"Session.assertConnectionIsOpen()\":66,\"HypersonicException.\\u003cinit\\u003e\":577,\"\\u003cthrow\\u003e\":473,\"ResultSet.wasNull()\":190,\"Session.logColumnExtraction()\":229,\"JabberIdBuilder.parse()\":388,\"Session.assertResultSetIsSet()\":94,\"null:null\":261,\"ResultSet.getString()\":150,\"\\u003creturn\\u003e\":284},\"expressionEnd\":{\"Session.assertConnectionIsOpen()\":90,\"HypersonicException.\\u003cinit\\u003e\":605,\"\\u003cthrow\\u003e\":509,\"ResultSet.wasNull()\":209,\"Session.logColumnExtraction()\":266,\"JabberIdBuilder.parse()\":416,\"Session.assertResultSetIsSet()\":116,\"null:null\":265,\"ResultSet.getString()\":181,\"\\u003creturn\\u003e\":296},\"rawCode\":\"public JabberId getQualifiedUsername(final String columnName) {\\n\\t\\tassertConnectionIsOpen();\\n\\t\\tassertResultSetIsSet();\\n\\t\\ttry {\\n\\t\\t\\tfinal String value \\u003d resultSet.getString(columnName);\\n\\t\\t\\tif (resultSet.wasNull()) {\\n                logColumnExtraction(columnName, null);\\n                return null;\\n\\t\\t\\t} else {\\n                logColumnExtraction(columnName, value);\\n                return JabberIdBuilder.parse(value);\\n\\t\\t\\t}\\n\\t\\t} catch (final SQLException sqlx) {\\n            throw new HypersonicException(sqlx);\\n\\t\\t} catch (final IllegalArgumentException iax) {\\n            throw new HypersonicException(iax);\\n\\t\\t}\\n\\t}\"}","55":"{\"expressionStart\":{\"Session.assertConnectionIsOpen()\":67,\"HypersonicException.\\u003cinit\\u003e\":378,\"ResultSet.wasNull()\":264,\"\\u003cthrow\\u003e\":372,\"Session.logColumnExtraction()\":205,\"Session.assertResultSetIsSet()\":95,\"ResultSet.getString()\":160,\"null:null\":286,\"\\u003creturn\\u003e\":257,\"ArtifactFlag.valueOf()\":293},\"expressionEnd\":{\"Session.assertConnectionIsOpen()\":91,\"HypersonicException.\\u003cinit\\u003e\":407,\"ResultSet.wasNull()\":283,\"\\u003cthrow\\u003e\":408,\"Session.logColumnExtraction()\":243,\"Session.assertResultSetIsSet()\":117,\"ResultSet.getString()\":191,\"null:null\":290,\"\\u003creturn\\u003e\":321,\"ArtifactFlag.valueOf()\":320},\"rawCode\":\"public ArtifactFlag getFlagFromString(final String columnName) {\\n\\t\\tassertConnectionIsOpen();\\n\\t\\tassertResultSetIsSet();\\n\\t\\ttry {\\n            final String value \\u003d resultSet.getString(columnName);\\n            logColumnExtraction(columnName, value);\\n            return resultSet.wasNull() ? null : ArtifactFlag.valueOf(value);\\n\\t\\t} catch (final SQLException sqlx) {\\n            throw new HypersonicException(sqlx);\\n\\t\\t}\\n\\t}\"}","56":"{\"expressionStart\":{\"Session.assertConnectionIsOpen()\":67,\"HypersonicException.\\u003cinit\\u003e\":378,\"ResultSet.wasNull()\":264,\"\\u003cthrow\\u003e\":372,\"Session.logColumnExtraction()\":205,\"Session.assertResultSetIsSet()\":95,\"ResultSet.getString()\":160,\"null:null\":286,\"ArtifactType.valueOf()\":293,\"\\u003creturn\\u003e\":257},\"expressionEnd\":{\"Session.assertConnectionIsOpen()\":91,\"HypersonicException.\\u003cinit\\u003e\":407,\"ResultSet.wasNull()\":283,\"\\u003cthrow\\u003e\":408,\"Session.logColumnExtraction()\":243,\"Session.assertResultSetIsSet()\":117,\"ResultSet.getString()\":191,\"null:null\":290,\"ArtifactType.valueOf()\":320,\"\\u003creturn\\u003e\":321},\"rawCode\":\"public ArtifactType getTypeFromString(final String columnName) {\\n\\t\\tassertConnectionIsOpen();\\n\\t\\tassertResultSetIsSet();\\n\\t\\ttry {\\n            final String value \\u003d resultSet.getString(columnName);\\n            logColumnExtraction(columnName, value);\\n            return resultSet.wasNull() ? null : ArtifactType.valueOf(value);\\n\\t\\t} catch (final SQLException sqlx) {\\n            throw new HypersonicException(sqlx);\\n\\t\\t}\\n\\t}\"}","57":"{\"expressionStart\":{\"Session.assertConnectionIsOpen()\":53,\"HypersonicException.\\u003cinit\\u003e\":342,\"ResultSet.wasNull()\":250,\"\\u003cthrow\\u003e\":336,\"Session.logColumnExtraction()\":191,\"Session.assertResultSetIsSet()\":81,\"ResultSet.getString()\":146,\"null:null\":272,\"\\u003creturn\\u003e\":243},\"expressionEnd\":{\"Session.assertConnectionIsOpen()\":77,\"HypersonicException.\\u003cinit\\u003e\":371,\"ResultSet.wasNull()\":269,\"\\u003cthrow\\u003e\":372,\"Session.logColumnExtraction()\":229,\"Session.assertResultSetIsSet()\":103,\"ResultSet.getString()\":177,\"null:null\":276,\"\\u003creturn\\u003e\":285},\"rawCode\":\"public String getString(final String columnName) {\\n\\t\\tassertConnectionIsOpen();\\n\\t\\tassertResultSetIsSet();\\n\\t\\ttry {\\n            final String value \\u003d resultSet.getString(columnName);\\n            logColumnExtraction(columnName, value);\\n            return resultSet.wasNull() ? null : value;\\n\\t\\t} catch (final SQLException sqlx) {\\n            throw new HypersonicException(sqlx);\\n\\t\\t}\\n\\t}\"}","58":"{\"expressionStart\":{\"Session.assertConnectionIsOpen()\":102,\"StringReader.\\u003cinit\\u003e\":510,\"HypersonicException.\\u003cinit\\u003e\":705,\"\\u003cthrow\\u003e\":699,\"ResultSet.wasNull()\":259,\"Session.logColumnExtraction()\":298,\"Session.assertResultSetIsSet()\":136,\"ResultSet.getString()\":210,\"null:null\":360,\"\\u003creturn\\u003e\":353,\"XStreamUtil.fromXML()\":554},\"expressionEnd\":{\"Session.assertConnectionIsOpen()\":126,\"StringReader.\\u003cinit\\u003e\":536,\"HypersonicException.\\u003cinit\\u003e\":734,\"\\u003cthrow\\u003e\":735,\"ResultSet.wasNull()\":278,\"Session.logColumnExtraction()\":335,\"Session.assertResultSetIsSet()\":158,\"ResultSet.getString()\":241,\"null:null\":364,\"\\u003creturn\\u003e\":365,\"XStreamUtil.fromXML()\":597},\"rawCode\":\"public \\u003cT extends UserVCard\\u003e T getVCard(final String columnName,\\n            final T vcard) {\\n        assertConnectionIsOpen();\\n        assertResultSetIsSet();\\n        try {\\n            final String vcardXML \\u003d resultSet.getString(columnName);\\n            if (resultSet.wasNull()) {\\n                logColumnExtraction(columnName, null);\\n                return null;\\n            }\\n            else {\\n                logColumnExtraction(columnName, vcardXML);\\n                final StringReader vcardXMLReader \\u003d new StringReader(vcardXML);\\n                XSTREAM_UTIL.fromXML(vcardXMLReader, vcard);\\n                return vcard;\\n            }\\n        } catch (final SQLException sqlx) {\\n            throw new HypersonicException(sqlx);\\n        }\\n    }\"}","59":"{\"expressionStart\":{\"Session.assertConnectionIsOpen()\":57,\"HypersonicException.\\u003cinit\\u003e\":620,\"\\u003cthrow\\u003e\":614,\"ResultSet.wasNull()\":211,\"Session.logColumnExtraction()\":355,\"EMailBuilder.parse()\":418,\"Session.assertResultSetIsSet()\":91,\"null:null\":312,\"ResultSet.getString()\":162,\"\\u003creturn\\u003e\":411},\"expressionEnd\":{\"Session.assertConnectionIsOpen()\":81,\"HypersonicException.\\u003cinit\\u003e\":649,\"\\u003cthrow\\u003e\":650,\"ResultSet.wasNull()\":230,\"Session.logColumnExtraction()\":393,\"EMailBuilder.parse()\":443,\"Session.assertResultSetIsSet()\":113,\"null:null\":316,\"ResultSet.getString()\":193,\"\\u003creturn\\u003e\":444},\"rawCode\":\"public EMail getEMail(final String columnName) {\\n        assertConnectionIsOpen();\\n        assertResultSetIsSet();\\n        try {\\n            final String value \\u003d resultSet.getString(columnName);\\n            if (resultSet.wasNull()) {\\n                logColumnExtraction(columnName, null);\\n                return null;\\n            } else {\\n                logColumnExtraction(columnName, value);\\n                return EMailBuilder.parse(value);\\n            }\\n        } catch (final EMailFormatException efx) {\\n            throw new HypersonicException(efx);\\n        } catch (final SQLException sqlx) {\\n            throw new HypersonicException(sqlx);\\n        }\\n    }\"}","60":"{\"expressionStart\":{\"Contact.\\u003cinit\\u003e\":874,\"Contact.setId()\":895,\"boolean:false\":1532,\"Contact.setComments()\":1428,\"String\":721,\"IIndexerService.indexAddItem()\":1503,\"ResultSet.next()\":798,\"System.getProperty()\":1587,\"Contact.setWebPage()\":1376,\"Contact.setFirstName()\":1000,\"ResultSet.close()\":1550,\"IndexerContext.getEnabled()\":811,\"int:0\":494,\"\\u003cnullcheck\\u003e\":1587,\"ResultSet.getInt()\":909,\"ResultSet.getString()\":1134,\"Contact.setMiddleName()\":1056,\"Contact.setLastName()\":1114,\"Contact.setOrganization()\":1168,\"Connection.prepareStatement()\":525,\"PreparedStatement.executeQuery()\":767,\"\\u003ca\\u003e\":841,\"Contact.setEmail2()\":1278,\"Contact.setEmail1()\":1229,\"DatabaseUtils.getInt()\":958,\"Contact.setOwner()\":941,\"Contact.setEmail3()\":1327,\"PreparedStatement.close()\":1566,\"UNKNOWN.println()\":1632},\"expressionEnd\":{\"Contact.\\u003cinit\\u003e\":887,\"Contact.setId()\":933,\"boolean:false\":1537,\"Contact.setComments()\":1473,\"String\":745,\"IIndexerService.indexAddItem()\":1538,\"ResultSet.next()\":807,\"System.getProperty()\":1614,\"Contact.setWebPage()\":1420,\"Contact.setFirstName()\":1048,\"ResultSet.close()\":1560,\"IndexerContext.getEnabled()\":831,\"int:0\":495,\"\\u003cnullcheck\\u003e\":1622,\"ResultSet.getInt()\":932,\"ResultSet.getString()\":1159,\"Contact.setMiddleName()\":1106,\"Contact.setLastName()\":1160,\"Contact.setOrganization()\":1221,\"Connection.prepareStatement()\":746,\"PreparedStatement.executeQuery()\":785,\"\\u003ca\\u003e\":848,\"Contact.setEmail2()\":1319,\"Contact.setEmail1()\":1270,\"DatabaseUtils.getInt()\":991,\"Contact.setOwner()\":992,\"Contact.setEmail3()\":1368,\"PreparedStatement.close()\":1577,\"UNKNOWN.println()\":1689},\"rawCode\":\"/**\\n   * Given a database and a Lucene writer, this method will add content to the\\n   * searchable index\\n   *\\n   * @param writer  Description of the Parameter\\n   * @param db      Description of the Parameter\\n   * @param context\\n   * @throws java.sql.SQLException Description of the Exception\\n   * @throws java.io.IOException   Description of the Exception\\n   */\\n  public void add(IIndexerService writer, Connection db, IndexerContext context) throws SQLException, IOException {\\n    int count \\u003d 0;\\n    PreparedStatement pst \\u003d db.prepareStatement(\\n        \\\"SELECT contact_id, owner, first_name, middle_name, last_name, organization, email1, email2, email3, web_page, comments \\\" +\\n            \\\"FROM contacts \\\" +\\n            \\\"WHERE contact_id \\u003e -1 \\\");\\n    ResultSet rs \\u003d pst.executeQuery();\\n    while (rs.next() \\u0026\\u0026 context.getEnabled()) {\\n      ++count;\\n      Contact contact \\u003d new Contact();\\n      contact.setId(rs.getInt(\\\"contact_id\\\"));\\n      contact.setOwner(DatabaseUtils.getInt(rs, \\\"owner\\\"));\\n      contact.setFirstName(rs.getString(\\\"first_name\\\"));\\n      contact.setMiddleName(rs.getString(\\\"middle_name\\\"));\\n      contact.setLastName(rs.getString(\\\"last_name\\\"));\\n      contact.setOrganization(rs.getString(\\\"organization\\\"));\\n      contact.setEmail1(rs.getString(\\\"email1\\\"));\\n      contact.setEmail2(rs.getString(\\\"email2\\\"));\\n      contact.setEmail3(rs.getString(\\\"email3\\\"));\\n      contact.setWebPage(rs.getString(\\\"web_page\\\"));\\n      contact.setComments(rs.getString(\\\"comments\\\"));\\n      // add to index\\n      writer.indexAddItem(contact, false);\\n    }\\n    rs.close();\\n    pst.close();\\n    if (System.getProperty(\\\"DEBUG\\\") !\\u003d null) {\\n      System.out.println(\\\"ContactIndexer-\\u003e Finished: \\\" + count);\\n    }\\n  }\"}","61":"{\"expressionStart\":{\"RelimsException.\\u003cinit\\u003e\":1880,\"\\u003cthrow\\u003e\":1874,\"\\u003cr\\u003e\":831,\"String\":1560,\"Exception.getMessage()\":2573,\"ResultSet.next()\":574,\"String.indexOf()\":831,\"ProgressManager.setState()\":2605,\"ResultSet.close()\":2065,\"HashSet.\\u003cinit\\u003e\":114,\"int:1\":494,\"\\u003cnullcheck\\u003e\":2373,\"int:0\":867,\"String.format()\":1900,\"Set.add()\":1234,\"ResultSet.getString()\":639,\"Thread.currentThread()\":2666,\"Logger.error()\":2560,\"\\u003creturn\\u003e\":2721,\"UNKNOWN.interrupt()\":2666,\"PreparedStatement.setLong()\":483,\"PreparedStatement.executeQuery()\":536,\"null:null\":2510,\"ConnectionProvider.getConnection()\":410,\"AnalyzerDataMapper.getAnalyzerDataByAnalyzerType()\":1511,\"UNKNOWN.prepareStatement()\":410,\"\\u003d\":2306,\"PreparedStatement.close()\":2429},\"expressionEnd\":{\"RelimsException.\\u003cinit\\u003e\":2016,\"\\u003cthrow\\u003e\":2017,\"\\u003cr\\u003e\":868,\"String\":1569,\"Exception.getMessage()\":2587,\"ResultSet.next()\":591,\"String.indexOf()\":864,\"ProgressManager.setState()\":2651,\"ResultSet.close()\":2083,\"HashSet.\\u003cinit\\u003e\":141,\"int:1\":495,\"\\u003cnullcheck\\u003e\":2383,\"int:0\":868,\"String.format()\":2015,\"Set.add()\":1311,\"ResultSet.getString()\":662,\"Thread.currentThread()\":2688,\"Logger.error()\":2591,\"\\u003creturn\\u003e\":2745,\"UNKNOWN.interrupt()\":2700,\"PreparedStatement.setLong()\":508,\"PreparedStatement.executeQuery()\":553,\"null:null\":2514,\"ConnectionProvider.getConnection()\":444,\"AnalyzerDataMapper.getAnalyzerDataByAnalyzerType()\":1570,\"UNKNOWN.prepareStatement()\":469,\"\\u003d\":2323,\"PreparedStatement.close()\":2439},\"rawCode\":\"public Set\\u003cAnalyzerData\\u003e getInstrumentsForProject(long aProjectID) {\\n        Set\\u003cAnalyzerData\\u003e lInstrumentIDSet \\u003d new HashSet\\u003cAnalyzerData\\u003e();\\n        PreparedStatement ps \\u003d null;\\n        ResultSet lResultSet \\u003d null;\\n        try {\\n            String lQuery \\u003d \\\"select distinct storageclassname from instrument as s,spectrum as sp where s.instrumentID \\u003d sp.l_InstrumentID and sp.l_projectid\\u003d?\\\";\\n            ps \\u003d ConnectionProvider.getConnection().prepareStatement(lQuery);\\n            ps.setLong(1, aProjectID);\\n\\n            lResultSet \\u003d ps.executeQuery();\\n            while (lResultSet.next()) {\\n\\n                String lStorageClassName \\u003d lResultSet.getString(1);\\n//TODO modify\\n                if (lStorageClassName \\u003d\\u003d null) {\\n                    lStorageClassName \\u003d \\\"com.compomics.Esquire\\\";\\n                }\\n\\n                if (lStorageClassName.indexOf(\\\"QTOF\\\") \\u003e 0) {\\n                    // com.compomics.mslims.util.fileio.QTOFSpectrumStorageEngine\\n                    lInstrumentIDSet.add(AnalyzerDataMapper.getAnalyzerDataByAnalyzerType(\\\"tof\\\"));\\n\\n                } else if (lStorageClassName.indexOf(\\\"Ultraflex\\\") \\u003e 0) {\\n                    // com.compomics.mslims.util.fileio.UltraflexSpectrumStorageEngine\\n                    lInstrumentIDSet.add(AnalyzerDataMapper.getAnalyzerDataByAnalyzerType(\\\"tof\\\"));\\n\\n                } else if (lStorageClassName.indexOf(\\\"Esquire\\\") \\u003e 0) {\\n                    // com.compomics.mslims.util.fileio.EsquireSpectrumStorageEngine\\n                    lInstrumentIDSet.add(AnalyzerDataMapper.getAnalyzerDataByAnalyzerType(\\\"iontrap\\\"));\\n\\n                } else if (lStorageClassName.indexOf(\\\"Fourier\\\") \\u003e 0) {\\n                    // com.compomics.mslims.util.fileio.FourierSpectrumStorageEngine\\n                    lInstrumentIDSet.add(AnalyzerDataMapper.getAnalyzerDataByAnalyzerType(\\\"ft\\\"));\\n\\n                } else {\\n                    throw new RelimsException(String.format(\\\"Failed to map mslims Instrument StorageEngine (%s) to a AnalyzerData instance!!\\\", lStorageClassName));\\n                }\\n\\n\\n            }\\n\\n            lResultSet.close();\\n            ps.close();\\n\\n        } catch (Exception e) {\\n            if (lResultSet !\\u003d null) {\\n                try {\\n                    lResultSet.close();\\n                } catch (SQLException ex) {\\n                    lResultSet \\u003d null;\\n                }\\n            }\\n            if (ps !\\u003d null) {\\n                try {\\n                    ps.close();\\n                } catch (SQLException ex) {\\n                    ps \\u003d null;\\n                }\\n            }\\n            logger.error(e.getMessage(), e);\\n            ProgressManager.setState(Checkpoint.FAILED, e);;\\n            Thread.currentThread().interrupt();\\n        }\\n\\n        return lInstrumentIDSet;\\n    }\"}","62":"{\"expressionStart\":{\"HashMap.get()\":2106,\"FileWriter.\\u003cinit\\u003e\":2632,\"Spectrum_file.\\u003cinit\\u003e\":1993,\"File.exists()\":2506,\"File.getCanonicalPath()\":595,\"File.createNewFile()\":2541,\"String\":731,\"HashMap.put()\":1297,\"Spectrum_file.getL_spectrumid()\":2048,\"MascotGenericFile.toString()\":2418,\"HashMap.\\u003cinit\\u003e\":1049,\"ProgressManager.setState()\":2988,\"RelimsProperties.hasSpectrumLimit()\":235,\"ResultSet.close()\":1381,\"RelimsProperties.getSpectrumLimitCount()\":300,\"int:2\":1277,\"int:1\":1225,\"int:0\":136,\"StringBuffer.\\u003cinit\\u003e\":714,\"File.\\u003cinit\\u003e\":437,\"SQLException.printStackTrace()\":2955,\"ResultSet.getInt()\":1215,\"Logger.debug()\":509,\"BufferedWriter.close()\":2800,\"ResultSet.getString()\":1264,\"Spectrum_file.getUnzippedFile()\":2215,\"Thread.currentThread()\":3049,\"Logger.error()\":3220,\"StringBuffer.toString()\":932,\"UNKNOWN.join()\":1504,\"ConnectionProvider.initiate()\":3131,\"boolean:true\":2432,\"PreparedStatement.executeQuery()\":1780,\"\\u003ca\\u003e\":2465,\"\\u003d\":371,\"PreparedStatement.close()\":1357,\"SQLException.getMessage()\":2923,\"\\u003cr\\u003e\":1152,\"ResultSet.next()\":1138,\"Joiner.on()\":1504,\"RelimsProperties.getWorkSpace()\":446,\"HashMap.keySet()\":1524,\"Vector.\\u003cinit\\u003e\":1844,\"BufferedWriter.\\u003cinit\\u003e\":2613,\"String.\\u003cinit\\u003e\":2204,\"BufferedWriter.write()\":2727,\"IOException.getMessage()\":3233,\"Vector.add()\":2399,\"BufferedWriter.flush()\":2775,\"\\u003creturn\\u003e\":3272,\"UNKNOWN.interrupt()\":3049,\"MascotGenericFile.\\u003cinit\\u003e\":2171,\"int.\\u003ccast\\u003e\":2042,\"String:)\":1622,\"ConnectionProvider.getConnection()\":880,\"StringBuffer.append()\":818,\"UNKNOWN.prepareStatement()\":880,\"String:,\":1514,\"Spectrum_file.getBasicSelect()\":1432},\"expressionEnd\":{\"HashMap.get()\":2127,\"FileWriter.\\u003cinit\\u003e\":2654,\"Spectrum_file.\\u003cinit\\u003e\":2014,\"File.exists()\":2521,\"File.getCanonicalPath()\":620,\"File.createNewFile()\":2563,\"String\":803,\"HashMap.put()\":1329,\"Spectrum_file.getL_spectrumid()\":2069,\"MascotGenericFile.toString()\":2437,\"HashMap.\\u003cinit\\u003e\":1079,\"ProgressManager.setState()\":3034,\"RelimsProperties.hasSpectrumLimit()\":270,\"ResultSet.close()\":1391,\"RelimsProperties.getSpectrumLimitCount()\":340,\"int:2\":1278,\"int:1\":1226,\"int:0\":137,\"StringBuffer.\\u003cinit\\u003e\":804,\"File.\\u003cinit\\u003e\":499,\"SQLException.printStackTrace()\":2974,\"ResultSet.getInt()\":1227,\"Logger.debug()\":621,\"BufferedWriter.close()\":2811,\"ResultSet.getString()\":1279,\"Spectrum_file.getUnzippedFile()\":2236,\"Thread.currentThread()\":3071,\"Logger.error()\":3251,\"StringBuffer.toString()\":948,\"UNKNOWN.join()\":1546,\"ConnectionProvider.initiate()\":3160,\"boolean:true\":2436,\"PreparedStatement.executeQuery()\":1797,\"\\u003ca\\u003e\":2472,\"\\u003d\":402,\"PreparedStatement.close()\":1367,\"SQLException.getMessage()\":2937,\"\\u003cr\\u003e\":1184,\"ResultSet.next()\":1147,\"Joiner.on()\":1518,\"RelimsProperties.getWorkSpace()\":477,\"HashMap.keySet()\":1545,\"Vector.\\u003cinit\\u003e\":1864,\"BufferedWriter.\\u003cinit\\u003e\":2655,\"String.\\u003cinit\\u003e\":2237,\"BufferedWriter.write()\":2747,\"IOException.getMessage()\":3247,\"Vector.add()\":2447,\"BufferedWriter.flush()\":2786,\"\\u003creturn\\u003e\":3286,\"UNKNOWN.interrupt()\":3083,\"MascotGenericFile.\\u003cinit\\u003e\":2238,\"int.\\u003ccast\\u003e\":2069,\"String:)\":1625,\"ConnectionProvider.getConnection()\":914,\"StringBuffer.append()\":842,\"UNKNOWN.prepareStatement()\":949,\"String:,\":1517,\"Spectrum_file.getBasicSelect()\":1462},\"rawCode\":\"public File getSpectraForProject(long aProjectID) throws IOException {\\n        // The stats and container thereof.\\n\\n        int total \\u003d 0;\\n        int needed \\u003d 0;\\n\\n        // for debugging purposes\\n        int lMaxSpectra;\\n        if (RelimsProperties.hasSpectrumLimit()) {\\n            lMaxSpectra \\u003d RelimsProperties.getSpectrumLimitCount();\\n        } else {\\n            lMaxSpectra \\u003d Integer.MAX_VALUE;\\n        }\\n\\n        File output \\u003d new File(RelimsProperties.getWorkSpace(), aProjectID + \\\".mgf\\\");\\n        logger.debug(\\\"getting all spectra from project \\\" + aProjectID + \\\" in a local file \\\" + output.getCanonicalPath());\\n\\n\\n        try {\\n            // Construct the query.NASTY \\n            StringBuffer query \\u003d new StringBuffer(\\\"select distinct(spectrumid), filename from spectrum where l_projectid\\u003d\\\");\\n            query.append(aProjectID);\\n\\n            PreparedStatement ps \\u003d ConnectionProvider.getConnection().prepareStatement(query.toString());\\n            ResultSet rs \\u003d ps.executeQuery();\\n            HashMap\\u003cInteger, String\\u003e lSpectrumids \\u003d new HashMap\\u003cInteger, String\\u003e();\\n            int lSpectrumCounter \\u003d 0;\\n            while (rs.next() \\u0026\\u0026 (lSpectrumCounter++ \\u003c lMaxSpectra)) {\\n                int lID \\u003d rs.getInt(1);\\n                String lFilename \\u003d rs.getString(2);\\n                lSpectrumids.put(lID, lFilename);\\n            }\\n            ps.close();\\n            rs.close();\\n\\n\\n            query \\u003d new StringBuffer(Spectrum_file.getBasicSelect());\\n            String lSpectrumIdJoiner \\u003d Joiner.on(\\\",\\\").join(lSpectrumids.keySet());\\n            query.append(\\\" where l_spectrumid in (\\\" + lSpectrumIdJoiner + \\\")\\\");\\n            String queryString \\u003d query.toString();\\n\\n            ps \\u003d ConnectionProvider.getConnection().prepareStatement(queryString);\\n            rs \\u003d ps.executeQuery();\\n\\n            Vector\\u003cString\\u003e lSpectrumFiles \\u003d new Vector\\u003cString\\u003e();\\n\\n            int lCounter \\u003d 0;\\n            while (rs.next()) {\\n                lCounter++;\\n                Spectrum_file mgf \\u003d new Spectrum_file(rs);\\n                int lID \\u003d (int) mgf.getL_spectrumid();\\n                String lFilename \\u003d lSpectrumids.get(lID);\\n\\n                MascotGenericFile file \\u003d new MascotGenericFile(lFilename, new String(mgf.getUnzippedFile()));\\n                // Note the use of the \\u0027true\\u0027 flag, which takes care of substituting the original title with the\\n                // filename!\\n\\n                lSpectrumFiles.add(file.toString(true) + \\\"\\\\n\\\\n\\\");\\n                total++;\\n            }\\n\\n            if (!output.exists()) {\\n                output.createNewFile();\\n            }\\n\\n            BufferedWriter bos \\u003d new BufferedWriter(new FileWriter(output));\\n            for (String lSpectrum : lSpectrumFiles) {\\n                bos.write(lSpectrum);\\n            }\\n            bos.flush();\\n            bos.close();\\n\\n            rs.close();\\n            ps.close();\\n\\n        } catch (SQLException e) {\\n            logger.error(e.getMessage(), e);\\n            e.printStackTrace();\\n            ProgressManager.setState(Checkpoint.FAILED, e);;\\n            Thread.currentThread().interrupt();\\n        } catch (IOException e) {\\n            ConnectionProvider.initiate();\\n\\n//            Thread.currentThread().stop();\\n            logger.error(e.getMessage(), e);\\n        }\\n\\n        return output;\\n    }\"}","63":"{\"expressionStart\":{\"ResultSet.getString()\":531,\"Set.add()\":572,\"String\":167,\"Thread.currentThread()\":829,\"Logger.error()\":723,\"\\u003creturn\\u003e\":1307,\"ResultSet.next()\":474,\"Sets.newHashSet()\":105,\"UNKNOWN.interrupt()\":829,\"PreparedStatement.setLong()\":381,\"ProgressManager.setState()\":768,\"ResultSet.close()\":630,\"PreparedStatement.executeQuery()\":435,\"null:null\":1042,\"ConnectionProvider.getConnection()\":308,\"UNKNOWN.prepareStatement()\":308,\"int:1\":393,\"\\u003d\":1237,\"\\u003cnullcheck\\u003e\":1096,\"PreparedStatement.close()\":662,\"SQLException.getMessage()\":736},\"expressionEnd\":{\"ResultSet.getString()\":554,\"Set.add()\":601,\"String\":288,\"Thread.currentThread()\":851,\"Logger.error()\":754,\"\\u003creturn\\u003e\":1328,\"ResultSet.next()\":491,\"Sets.newHashSet()\":122,\"UNKNOWN.interrupt()\":863,\"PreparedStatement.setLong()\":407,\"ProgressManager.setState()\":814,\"ResultSet.close()\":648,\"PreparedStatement.executeQuery()\":453,\"null:null\":1046,\"ConnectionProvider.getConnection()\":342,\"UNKNOWN.prepareStatement()\":367,\"int:1\":394,\"\\u003d\":1254,\"\\u003cnullcheck\\u003e\":1107,\"PreparedStatement.close()\":673,\"SQLException.getMessage()\":750},\"rawCode\":\"public Set\\u003cString\\u003e getProteinAccessionsForProject(long aProjectID) {\\n        Set\\u003cString\\u003e lAccessionSet \\u003d Sets.newHashSet();\\n\\n        try {\\n            String lQuery \\u003d \\\"select distinct accession from identification as i, spectrum as s where i.l_spectrumid\\u003ds.spectrumid and s.l_projectid\\u003d?\\\";\\n            prs \\u003d ConnectionProvider.getConnection().prepareStatement(lQuery);\\n            prs.setLong(1, aProjectID);\\n\\n            lResultSet \\u003d prs.executeQuery();\\n            while (lResultSet.next()) {\\n                String lAccession \\u003d lResultSet.getString(1);\\n                lAccessionSet.add(lAccession);\\n            }\\n\\n            lResultSet.close();\\n            prs.close();\\n\\n        } catch (SQLException e) {\\n            logger.error(e.getMessage(), e);\\n            ProgressManager.setState(Checkpoint.FAILED, e);;\\n            Thread.currentThread().interrupt();\\n            if (lResultSet !\\u003d null) {\\n                try {\\n                    lResultSet.close();\\n                } catch (SQLException ex) {\\n                    lResultSet \\u003d null;\\n                }\\n            }\\n            if (prs !\\u003d null) {\\n                try {\\n                    lResultSet.close();\\n                } catch (SQLException ex) {\\n                    lResultSet \\u003d null;\\n                }\\n            }\\n        }\\n\\n        return lAccessionSet;\\n    }\"}","64":"{\"expressionStart\":{\"Integer.\\u003cinstanceof\\u003e\":850,\"boolean:false\":767,\"CmsFormDataBean.getEntryId()\":1429,\"\\u003cr\\u003e\":804,\"CmsFormDataBean.addField()\":2537,\"PreparedStatement.setInt()\":906,\"Integer.\\u003ccast\\u003e\":926,\"ResultSet.next()\":1321,\"List.get()\":850,\"String.\\u003ccast\\u003e\":1166,\"List.size()\":808,\"Long.\\u003ccast\\u003e\":1064,\"CmsFormDataAccess.getConnection()\":681,\"int:1\":922,\"CmsFormDataBean.\\u003cinit\\u003e\":1489,\"int:0\":801,\"\\u003cnullcheck\\u003e\":1411,\"ResultSet.getInt()\":1726,\"PreparedStatement.setString()\":1144,\"CmsFormDatabaseFilter.isHeadersOnly()\":2491,\"CmsObject.readResource()\":2143,\"Integer.intValue()\":925,\"ResultSet.getString()\":1664,\"ResultSet.getLong()\":1598,\"\\u003creturn\\u003e\":2719,\"UNKNOWN.getStructureId()\":2143,\"ArrayList.\\u003cinit\\u003e\":555,\"List.add()\":2434,\"CmsUUID.getNullUUID()\":2296,\"CmsFormDataBean.setFormId()\":1649,\"PreparedStatement.setLong()\":1043,\"CmsFormDataBean.setResourceId()\":2387,\"CmsFormDataBean.setDateCreated()\":1578,\"Connection.prepareStatement()\":717,\"CmsFormDataAccess.closeAll()\":2675,\"PreparedStatement.executeQuery()\":1240,\"null:null\":1296,\"CmsUUID.\\u003cinit\\u003e\":1922,\"\\u003ca\\u003e\":823,\"CmsFormDataAccess.getReadQuery()\":738,\"CmsFormDataBean.setState()\":1712,\"Long.\\u003cinstanceof\\u003e\":990,\"CmsFormDataBean.setEntryId()\":1532,\"Long.longValue()\":1063},\"expressionEnd\":{\"Integer.\\u003cinstanceof\\u003e\":882,\"boolean:false\":772,\"CmsFormDataBean.getEntryId()\":1446,\"\\u003cr\\u003e\":821,\"CmsFormDataBean.addField()\":2609,\"PreparedStatement.setInt()\":961,\"Integer.\\u003ccast\\u003e\":948,\"ResultSet.next()\":1331,\"List.get()\":863,\"String.\\u003ccast\\u003e\":1187,\"List.size()\":821,\"Long.\\u003ccast\\u003e\":1083,\"CmsFormDataAccess.getConnection()\":696,\"int:1\":923,\"CmsFormDataBean.\\u003cinit\\u003e\":1510,\"int:0\":802,\"\\u003cnullcheck\\u003e\":1423,\"ResultSet.getInt()\":1746,\"PreparedStatement.setString()\":1188,\"CmsFormDatabaseFilter.isHeadersOnly()\":2513,\"CmsObject.readResource()\":2192,\"Integer.intValue()\":960,\"ResultSet.getString()\":1689,\"ResultSet.getLong()\":1626,\"\\u003creturn\\u003e\":2733,\"UNKNOWN.getStructureId()\":2209,\"ArrayList.\\u003cinit\\u003e\":587,\"List.add()\":2450,\"CmsUUID.getNullUUID()\":2317,\"CmsFormDataBean.setFormId()\":1690,\"PreparedStatement.setLong()\":1097,\"CmsFormDataBean.setResourceId()\":2412,\"CmsFormDataBean.setDateCreated()\":1627,\"Connection.prepareStatement()\":774,\"CmsFormDataAccess.closeAll()\":2699,\"PreparedStatement.executeQuery()\":1259,\"null:null\":1300,\"CmsUUID.\\u003cinit\\u003e\":1964,\"\\u003ca\\u003e\":826,\"CmsFormDataAccess.getReadQuery()\":773,\"CmsFormDataBean.setState()\":1747,\"Long.\\u003cinstanceof\\u003e\":1019,\"CmsFormDataBean.setEntryId()\":1556,\"Long.longValue()\":1096},\"rawCode\":\"/**\\n     * Read all submitted forms matching the given filter.\\u003cp\\u003e\\n     * \\n     * @param filter the filter to match \\n     * \\n     * @return a \\u003ccode\\u003eList\\u0026lt;{@link CmsFormDataBean}\\u0026gt;\\u003c/code\\u003e for all \\n     *      data submitted matching the given filter\\n     *      \\n     * @throws SQLException if sth goes wrong \\n     */\\n    public List\\u003cCmsFormDataBean\\u003e readForms(CmsFormDatabaseFilter filter) throws SQLException {\\n\\n        Connection con \\u003d null;\\n        PreparedStatement stmt \\u003d null;\\n        ResultSet res \\u003d null;\\n        List\\u003cCmsFormDataBean\\u003e result \\u003d new ArrayList\\u003cCmsFormDataBean\\u003e();\\n\\n        try {\\n            List\\u003cObject\\u003e params \\u003d new ArrayList\\u003cObject\\u003e();\\n            con \\u003d getConnection();\\n            stmt \\u003d con.prepareStatement(getReadQuery(filter, params, false));\\n            for (int i \\u003d 0; i \\u003c params.size(); i++) {\\n                if (params.get(i) instanceof Integer) {\\n                    stmt.setInt(i + 1, ((Integer)params.get(i)).intValue());\\n                } else if (params.get(i) instanceof Long) {\\n                    stmt.setLong(i + 1, ((Long)params.get(i)).longValue());\\n                } else {\\n                    stmt.setString(i + 1, (String)params.get(i));\\n                }\\n            }\\n            res \\u003d stmt.executeQuery();\\n            CmsFormDataBean bean \\u003d null;\\n            while (res.next()) {\\n                int entryId \\u003d res.getInt(DB_ENTRY_ID);\\n                if ((bean \\u003d\\u003d null) || (bean.getEntryId() !\\u003d entryId)) {\\n                    bean \\u003d new CmsFormDataBean();\\n                    bean.setEntryId(entryId);\\n                    bean.setDateCreated(res.getLong(DB_DATE_CREATED));\\n                    bean.setFormId(res.getString(DB_FORM_ID));\\n                    bean.setState(res.getInt(DB_STATE));\\n                    // set the id\\n                    CmsUUID resId;\\n                    try {\\n                        // assume it is an id\\n                        resId \\u003d new CmsUUID(res.getString(DB_RESOURCE_ID));\\n                    } catch (NumberFormatException e) {\\n                        try {\\n                            // it could also be a path\\n                            resId \\u003d m_cms.readResource(res.getString(DB_RESOURCE_ID)).getStructureId();\\n                        } catch (Throwable e1) {\\n                            resId \\u003d CmsUUID.getNullUUID();\\n                        }\\n                    }\\n                    bean.setResourceId(resId);\\n                    result.add(bean);\\n                }\\n                if (!filter.isHeadersOnly()) {\\n                    bean.addField(res.getString(DB_FIELDNAME), res.getString(DB_FIELDVALUE));\\n                }\\n            }\\n        } finally {\\n            closeAll(con, stmt, res);\\n        }\\n        return result;\\n    }\"}","65":"{\"expressionStart\":{\"PreparedStatement.setString()\":978,\"ResultSet.getString()\":1173,\"CmsFormDataAccess.getQuery()\":930,\"String\":939,\"\\u003creturn\\u003e\":1291,\"ResultSet.next()\":1133,\"List.add()\":1162,\"ArrayList.\\u003cinit\\u003e\":816,\"int:3\":1066,\"PreparedStatement.setLong()\":1053,\"CmsFormDataAccess.closeAll()\":1248,\"Connection.prepareStatement()\":909,\"PreparedStatement.executeQuery()\":1093,\"CmsFormDataAccess.getConnection()\":873,\"int:2\":1030,\"int:1\":993},\"expressionEnd\":{\"PreparedStatement.setString()\":1003,\"ResultSet.getString()\":1199,\"CmsFormDataAccess.getQuery()\":963,\"String\":962,\"\\u003creturn\\u003e\":1305,\"ResultSet.next()\":1142,\"List.add()\":1200,\"ArrayList.\\u003cinit\\u003e\":839,\"int:3\":1067,\"PreparedStatement.setLong()\":1073,\"CmsFormDataAccess.closeAll()\":1271,\"Connection.prepareStatement()\":964,\"PreparedStatement.executeQuery()\":1112,\"CmsFormDataAccess.getConnection()\":888,\"int:2\":1031,\"int:1\":994},\"rawCode\":\"/**\\n     * Read a \\u003ccode\\u003eList\\u0026lt;{@link String}\\u0026gt;\\u003c/code\\u003e with all \\n     * distinct form field names submitted with the given form in the \\n     * given time range.\\u003cp\\u003e\\n     * \\n     * @param formId to find the form data in the database \\n     * @param start the start time to find data \\n     * @param end the end time to find data \\n     * \\n     * @return a \\u003ccode\\u003eList\\u0026lt;{@link String}\\u0026gt;\\u003c/code\\u003e with all \\n     *      distinct form field names submitted with the given form in the \\n     *      given time range\\n     *      \\n     * @throws SQLException if sth goes wrong \\n     */\\n    public List\\u003cString\\u003e readFormFieldNames(final String formId, long start, long end) throws SQLException {\\n\\n        Connection con \\u003d null;\\n        PreparedStatement stmt \\u003d null;\\n        ResultSet rs \\u003d null;\\n\\n        List\\u003cString\\u003e result \\u003d new ArrayList\\u003cString\\u003e();\\n        try {\\n            con \\u003d getConnection();\\n            stmt \\u003d con.prepareStatement(getQuery(\\\"READ_FORM_FIELD_NAMES\\\"));\\n            stmt.setString(1, formId);\\n            stmt.setLong(2, start);\\n            stmt.setLong(3, end);\\n\\n            rs \\u003d stmt.executeQuery();\\n            while (rs.next()) {\\n                result.add(rs.getString(DB_FIELDNAME));\\n            }\\n        } finally {\\n            closeAll(con, stmt, rs);\\n        }\\n        return result;\\n    }\"}","66":"{\"expressionStart\":{\"ResultSet.getString()\":719,\"CmsFormDataAccess.getQuery()\":592,\"String\":601,\"\\u003creturn\\u003e\":869,\"ResultSet.next()\":679,\"Integer.\\u003cinit\\u003e\":745,\"HashMap.\\u003cinit\\u003e\":471,\"Connection.prepareStatement()\":571,\"CmsFormDataAccess.closeAll()\":826,\"PreparedStatement.executeQuery()\":639,\"CmsFormDataAccess.getConnection()\":535,\"Map.put()\":708,\"ResultSet.getInt()\":757},\"expressionEnd\":{\"ResultSet.getString()\":743,\"CmsFormDataAccess.getQuery()\":619,\"String\":618,\"\\u003creturn\\u003e\":883,\"ResultSet.next()\":688,\"Integer.\\u003cinit\\u003e\":777,\"HashMap.\\u003cinit\\u003e\":501,\"Connection.prepareStatement()\":620,\"CmsFormDataAccess.closeAll()\":849,\"PreparedStatement.executeQuery()\":658,\"CmsFormDataAccess.getConnection()\":550,\"Map.put()\":778,\"ResultSet.getInt()\":776},\"rawCode\":\"/**\\n     * Counts the number of forms for each form.\\u003cp\\u003e\\n     * \\n     * @return \\u003ccode\\u003e{@link Map}\\u0026lt;{@link String}, {@link Integer}\\u0026gt;\\u003c/code\\u003e with all form id as keys and the count as value\\n     *      \\n     * @throws SQLException if something goes wrong \\n     */\\n    public Map\\u003cString, Integer\\u003e countForms() throws SQLException {\\n\\n        Connection con \\u003d null;\\n        PreparedStatement stmt \\u003d null;\\n        ResultSet rs \\u003d null;\\n\\n        Map\\u003cString, Integer\\u003e result \\u003d new HashMap\\u003cString, Integer\\u003e();\\n        try {\\n            con \\u003d getConnection();\\n            stmt \\u003d con.prepareStatement(getQuery(\\\"READ_FORM_NAMES\\\"));\\n            rs \\u003d stmt.executeQuery();\\n            while (rs.next()) {\\n                result.put(rs.getString(DB_FORM_ID), new Integer(rs.getInt(DB_COUNT)));\\n            }\\n        } finally {\\n            closeAll(con, stmt, rs);\\n        }\\n        return result;\\n    }\"}","67":"{\"expressionStart\":{\"WebUtils.buildErrorJson()\":1735,\"StatementResult.getPrep()\":530,\"StatementResult.getRS()\":495,\"ResultSet.getString()\":953,\"String\":634,\"JSONException.getMessage()\":1437,\"Logger.throwing()\":1340,\"\\u003creturn\\u003e\":2157,\"JSONObject.append()\":1225,\"ResultSet.next()\":731,\"JSONObject.put()\":1118,\"Patient.setConnection()\":337,\"Patient.closeConnections()\":1844,\"Patient.getPatients()\":391,\"int:1\":914,\"\\u003cnullcheck\\u003e\":563,\"JSONObject.\\u003cinit\\u003e\":273,\"SQLException.getMessage()\":1806,\"ResultSet.getInt()\":904},\"expressionEnd\":{\"WebUtils.buildErrorJson()\":1821,\"StatementResult.getPrep()\":547,\"StatementResult.getRS()\":510,\"ResultSet.getString()\":985,\"String\":699,\"JSONException.getMessage()\":1451,\"Logger.throwing()\":1372,\"\\u003creturn\\u003e\":2169,\"JSONObject.append()\":1250,\"ResultSet.next()\":740,\"JSONObject.put()\":1150,\"Patient.setConnection()\":352,\"Patient.closeConnections()\":1878,\"Patient.getPatients()\":477,\"int:1\":915,\"\\u003cnullcheck\\u003e\":573,\"JSONObject.\\u003cinit\\u003e\":289,\"SQLException.getMessage()\":1820,\"ResultSet.getInt()\":916},\"rawCode\":\"public JSONObject searchJson(String isPatient, String searchStringFirst, String searchStringLast, String userName, String server){\\n\\t\\t\\tDbConnection dbConn \\u003d null;\\n\\t\\t\\tResultSet rs \\u003d null;\\n\\t\\t\\tPreparedStatement prep \\u003d null;\\n\\t\\t \\tboolean rtnResults \\u003d false;\\n\\t\\t \\tJSONObject ret \\u003d new JSONObject();\\n\\t        try\\n\\t        {\\n\\t           \\tdbConn \\u003d setConnection();\\n\\t        \\t\\tStatementResult stmtRes \\u003d getPatients( isPatient, searchStringFirst, searchStringLast, userName, server, dbConn);\\n\\t        \\t\\trs \\u003d stmtRes.getRS();\\n\\t        \\t\\tprep \\u003d stmtRes.getPrep();\\n\\t\\t        if( rs \\u003d\\u003d null )\\n\\t\\t        {\\n\\t\\t            return WebUtils.buildErrorJson( \\\"Could not establish a connection to the database  at this time.\\\");\\n\\t\\t        }\\n\\t\\t        while( rs.next())\\n\\t\\t        {\\n\\t\\t\\t        //convert to JSON\\n                    rtnResults \\u003d true;\\n                    JSONObject o \\u003d new JSONObject();\\n                    int id \\u003d rs.getInt(1);\\n                    String fName \\u003d rs.getString(Patient.FIRST_NAME);\\n                    String lName \\u003d rs.getString(Patient.LAST_NAME);\\n                    o.put(Patient.ID, id);\\n                    o.put(Patient.FIRST_NAME, fName);\\n                    o.put(Patient.LAST_NAME, lName);\\n                    ret.append(\\\"patients\\\", o);\\n\\t\\t        }\\n\\n\\t\\t    }\\n\\t        catch(org.json.JSONException e)\\n\\t        {\\t\\n\\n\\t            log.throwing(KEY, \\\"toJson()\\\", e);\\n\\t            try {\\n\\t\\t\\t\\t\\treturn new JSONObject(\\\"{\\\\\\\"error\\\\\\\": \\\\\\\"\\\"+e.getMessage()+\\\"\\\\\\\"}\\\");\\n\\t\\t\\t\\t} catch (JSONException e1) {\\n\\n\\t\\t\\t\\t\\t// TODO Auto-generated catch block\\n\\t\\t\\t\\t\\treturn WebUtils.buildErrorJson( \\\"Problem on generating JSON error.\\\" + e.getMessage());\\n\\t\\t\\t\\t}\\n\\t        }\\n\\t        catch (SQLException e) {\\n\\n\\t\\t\\t\\t// TODO Auto-generated catch block\\n\\t        \\t return WebUtils.buildErrorJson( \\\"Problem on selecting data from database .\\\" + e.getMessage());\\n\\t\\t\\t}\\n\\t\\t\\tfinally{\\n\\t\\t\\t\\tcloseConnections(dbConn, prep, rs);\\n\\t\\t\\t\\trs \\u003d null;\\n\\t\\t\\t\\tprep \\u003d null;\\n\\t\\t\\t\\tdbConn \\u003d null;\\n\\t\\t\\t}\\n\\n\\t        if (!rtnResults)\\n\\t        {\\n\\n\\t        \\treturn WebUtils.buildErrorJson( \\\"There are no patients currently listed for First Name \\\" + searchStringFirst + \\\" and Last Name \\\" + searchStringLast );\\n\\t        }\\n\\n\\t        return ret ;\\n\\t    }\"}","68":"{\"expressionStart\":{\"WebUtils.buildErrorJson()\":1143,\"ResultSet.getString()\":729,\"String\":1375,\"JSONException.getMessage()\":1477,\"\\u003creturn\\u003e\":1136,\"ResultSet.next()\":592,\"JSONObject.put()\":819,\"Patient.setConnection()\":472,\"Integer.parseInt()\":254,\"Patient.closeConnections()\":1513,\"int:1\":637,\"DbConnection.psExecuteQuery()\":497,\"ResultSet.getInt()\":627,\"SQLException.getMessage()\":1253,\"JSONObject.\\u003cinit\\u003e\":161},\"expressionEnd\":{\"WebUtils.buildErrorJson()\":1269,\"ResultSet.getString()\":760,\"String\":1447,\"JSONException.getMessage()\":1491,\"\\u003creturn\\u003e\":1270,\"ResultSet.next()\":601,\"JSONObject.put()\":858,\"Patient.setConnection()\":487,\"Integer.parseInt()\":281,\"Patient.closeConnections()\":1541,\"int:1\":638,\"DbConnection.psExecuteQuery()\":581,\"ResultSet.getInt()\":639,\"SQLException.getMessage()\":1267,\"JSONObject.\\u003cinit\\u003e\":177},\"rawCode\":\"public JSONObject isPatient(String patientId, String patientRepId, String repository)\\n\\t{\\n\\t\\tDbConnection dbConn \\u003d null;\\n\\t\\tResultSet rs \\u003d null;\\n\\t\\tJSONObject ret \\u003d new JSONObject();\\n\\t\\tString checkQuery \\u003d SEARCH_PATIENTS_REP_ASSOC_BY_ID;\\n\\n\\t\\tint patient_id \\u003d Integer.parseInt(patientId);\\n\\t\\tint patient_rep_id \\u003d Integer.parseInt(patientRepId);\\n\\n\\t\\tString err_mess \\u003d \\\"Could not check if there is an existing repository association for patient  \\\" + patient_id;\\n\\t\\ttry {\\n\\t\\t\\tdbConn \\u003d setConnection();\\n\\t\\t\\trs \\u003d dbConn.psExecuteQuery(checkQuery, err_mess , patient_id, patient_rep_id,repository );\\n\\n\\n\\t\\t\\tif (rs.next())\\n\\t\\t\\t{\\n\\t\\t\\t\\t  patient_id \\u003d rs.getInt(1);\\n\\t\\t          String fName \\u003d rs.getString(Patient.FIRST_NAME);\\n\\t\\t          String lName \\u003d rs.getString(Patient.LAST_NAME);\\n\\t\\t          ret.put(Patient.ID, patient_id);\\n\\t\\t          ret.put(Patient.REP_ID, patient_rep_id);\\n\\t\\t          ret.put(\\\"repository\\\", repository);\\n\\t\\t          ret.put(Patient.FIRST_NAME, fName);\\n\\t\\t          ret.put(Patient.LAST_NAME, lName);\\n\\t\\t\\t}\\n\\t\\t\\telse\\n\\t\\t\\t{\\n\\t\\t\\t\\t ret.put(Patient.ID, NO_PATIENT);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tcatch (SQLException e) {\\n\\t\\t\\t// TODO Auto-generated catch block\\n\\n\\t\\t\\treturn WebUtils.buildErrorJson( \\\"Problem on checking if patient currently is in list. \\\"  + patient_id  + \\\" Error \\\" + e.getMessage() );\\n\\t\\t} catch (JSONException e) {\\n\\n\\t\\t\\t// TODO Auto-generated catch block\\n\\t\\t\\treturn WebUtils.buildErrorJson( \\\"Problem on JSON creation on checking if patient currently is in list. \\\"  + patient_id  + \\\" Error \\\" + e.getMessage() );\\n\\t\\t}\\n\\t\\tfinally{\\n\\t\\t\\tcloseConnections(dbConn, rs);\\n\\t\\t\\tdbConn \\u003d null;\\n\\t\\t\\trs \\u003d null;\\n\\t\\t}\\n\\t\\treturn ret;\\n\\n\\t}\"}","69":"{\"expressionStart\":{\"WebUtils.buildErrorJson()\":1341,\"JSONArray.\\u003cinit\\u003e\":724,\"ResultSet.getString()\":864,\"String\":877,\"JSONException.getMessage()\":1412,\"\\u003creturn\\u003e\":1334,\"String:id\":998,\"JSONObject.append()\":1018,\"ResultSet.next()\":751,\"JSONObject.put()\":985,\"Patient.setConnection()\":490,\"Integer.parseInt()\":323,\"Patient.closeConnections()\":1449,\"DbConnection.psExecuteQuery()\":517,\"int:1\":841,\"JSONObject.\\u003cinit\\u003e\":793,\"ResultSet.getInt()\":831,\"SQLException.getMessage()\":1243},\"expressionEnd\":{\"WebUtils.buildErrorJson()\":1427,\"JSONArray.\\u003cinit\\u003e\":739,\"ResultSet.getString()\":890,\"String\":889,\"JSONException.getMessage()\":1426,\"\\u003creturn\\u003e\":1428,\"String:id\":1002,\"JSONObject.append()\":1054,\"ResultSet.next()\":760,\"JSONObject.put()\":1010,\"Patient.setConnection()\":505,\"Integer.parseInt()\":350,\"Patient.closeConnections()\":1477,\"DbConnection.psExecuteQuery()\":573,\"int:1\":842,\"JSONObject.\\u003cinit\\u003e\":809,\"ResultSet.getInt()\":843,\"SQLException.getMessage()\":1257},\"rawCode\":\"public JSONObject listRepositories(String patientId)\\n\\t{\\n\\t\\tDbConnection dbConn \\u003d null;\\n\\t\\tResultSet rs \\u003d null;\\n\\t\\tJSONObject ret \\u003d new JSONObject();\\n\\t\\t//SELECT patient_id, rep_patient_id, repository from  patient_repository_assoc where patient_id \\u003d ? \\\";\\n\\n\\t\\tString listQuery \\u003d LIST_REP_ASSOC_BY_PATIENT_ID;\\n\\n\\t\\tint patient_id \\u003d Integer.parseInt(patientId);\\n\\n\\t\\tString err_mess \\u003d \\\"Could not check the list of repositories for patient \\\" + patient_id;\\n\\t\\tboolean results \\u003d false;\\n\\t\\ttry {\\n\\t\\t\\tdbConn \\u003d setConnection();\\t\\t\\n\\t\\t\\trs \\u003d dbConn.psExecuteQuery(listQuery, err_mess , patient_id );\\n\\n\\t\\t/*\\n\\t\\t{ \\\"repositories\\\" : [\\n\\t\\t\\t\\t{\\\"repository\\\" : \\\"OurVista\\\" , \\\"id\\\" : \\\"3\\\"},{\\\"repository\\\" : \\\"local\\\" , \\\"id\\\" : \\\"1\\\"}\\n\\t\\t\\t\\t]\\n\\t\\t}\\n\\t\\t*/\\n\\n\\n\\t\\t\\tJSONArray reps \\u003d new JSONArray();\\n\\t\\t\\twhile (rs.next())\\n\\t\\t\\t{\\n\\t\\t\\t\\tJSONObject innerObj \\u003d new JSONObject();\\n\\n\\t\\t\\t\\t  patient_id \\u003d rs.getInt(1);\\n\\t\\t\\t\\t  String rep \\u003d rs.getString(\\\"repository\\\");\\n\\t\\t\\t\\t  int repId \\u003d rs.getInt(\\\"rep_patient_id\\\");\\n\\n\\t\\t\\t\\t  innerObj.put(\\\"repository\\\", rep);\\n\\t\\t\\t\\t  innerObj.put(\\\"id\\\", repId);\\n\\t\\t\\t\\t  ret.append(\\\"repositories\\\", innerObj);\\n\\n\\t\\t          results \\u003d true;\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\t\\tcatch (SQLException e) {\\n\\t\\t\\t// TODO Auto-generated catch block\\n\\n\\t\\t\\t return WebUtils.buildErrorJson( \\\"Problem on selecting data from database .\\\" + e.getMessage());\\n\\n\\t\\t} catch (JSONException e) {\\n\\n\\t\\t\\t// TODO Auto-generated catch block\\n\\t\\t\\t return WebUtils.buildErrorJson( \\\"Problem on selecting data from database .\\\" + e.getMessage());\\n\\n\\t\\t}\\n\\t\\tfinally {\\n\\t\\t\\tcloseConnections(dbConn, rs);\\n\\t\\t\\tdbConn \\u003d null;\\n\\t\\t\\trs \\u003d null;\\n\\t\\t}\\n\\n\\t\\tif (!results)\\n        {\\n\\n        \\treturn WebUtils.buildErrorJson( \\\"There are no patients currently listed in repositories \\\" );\\n\\n        }\\n\\n\\t\\treturn ret;\\n\\n\\t}\"}","70":"{\"expressionStart\":{\"WebUtils.buildErrorJson()\":1155,\"ResultSet.getString()\":517,\"String\":1046,\"JSONException.getMessage()\":1282,\"\\u003creturn\\u003e\":1148,\"ResultSet.next()\":481,\"JSONObject.put()\":780,\"Patient.setConnection()\":379,\"Integer.parseInt()\":227,\"Patient.closeConnections()\":1321,\"DbConnection.psExecuteQuery()\":404,\"int:1\":564,\"JSONObject.\\u003cinit\\u003e\":139,\"SQLException.getMessage()\":1058,\"ResultSet.getInt()\":554},\"expressionEnd\":{\"WebUtils.buildErrorJson()\":1298,\"ResultSet.getString()\":537,\"String\":1055,\"JSONException.getMessage()\":1296,\"\\u003creturn\\u003e\":1299,\"ResultSet.next()\":490,\"JSONObject.put()\":813,\"Patient.setConnection()\":394,\"Integer.parseInt()\":254,\"Patient.closeConnections()\":1349,\"DbConnection.psExecuteQuery()\":470,\"int:1\":565,\"JSONObject.\\u003cinit\\u003e\":155,\"SQLException.getMessage()\":1072,\"ResultSet.getInt()\":566},\"rawCode\":\"public JSONObject isPatient( String userName, String patientId)\\n\\t{\\n\\t\\tDbConnection dbConn \\u003d null;\\n\\t\\tResultSet rs \\u003d null;\\n\\t\\tJSONObject ret \\u003d new JSONObject();\\n\\t\\tString checkQuery \\u003d SEARCH_USER_PATIENTS_BY_ID;\\n\\n\\t\\tint patient_id \\u003d Integer.parseInt(patientId);\\n\\n\\t\\tString err_mess \\u003d \\\"Could not check if there is an existing association for patient  \\\" + patient_id;\\n\\t\\ttry {\\n\\t\\t\\tdbConn \\u003d setConnection();\\n\\t\\t\\trs \\u003d dbConn.psExecuteQuery(checkQuery, err_mess , patient_id, userName);\\n\\n\\n\\t\\t\\tif (rs.next())\\n\\t\\t\\t{\\n\\t\\t\\t\\t  String role \\u003d rs.getString(\\\"role\\\");\\n\\t\\t\\t\\t  int id \\u003d rs.getInt(1);\\n\\t\\t          String fName \\u003d rs.getString(Patient.FIRST_NAME);\\n\\t\\t          String lName \\u003d rs.getString(Patient.LAST_NAME);\\n\\t\\t          ret.put(Patient.ID, id);\\n\\t\\t\\t      ret.put(Patient.FIRST_NAME, fName);\\n\\t\\t\\t      ret.put(Patient.LAST_NAME, lName);\\n\\t\\t\\t}\\n\\t\\t\\telse\\n\\t\\t\\t{\\n\\t\\t\\t\\t ret.put(ID, NO_PATIENT);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tcatch (SQLException e) {\\n\\t\\t\\t// TODO Auto-generated catch block\\n\\n\\t\\t\\treturn WebUtils.buildErrorJson( \\\"Problem on checking if patient currently is in list. \\\"  + patient_id  + \\\" Error \\\" + e.getMessage() );\\n\\t\\t} catch (JSONException e) {\\n\\n\\t\\t\\t// TODO Auto-generated catch block\\n\\t\\t\\treturn WebUtils.buildErrorJson( \\\"Problem on JSON creation on checking if patient currently is in list. \\\"  + patient_id  + \\\" Error \\\" + e.getMessage() );\\n\\t\\t}\\n\\t\\tfinally {\\n\\t   \\tcloseConnections(dbConn, rs);\\n\\t   \\tdbConn \\u003d null;\\n\\t   \\trs \\u003d null;\\n\\t   }\\n\\t\\treturn ret;\\n\\n\\t}\"}","71":"{\"expressionStart\":{\"PreparedStatement.setString()\":406,\"WebUtils.buildErrorJson()\":1294,\"DbConnection.prepareStatement()\":344,\"ResultSet.getString()\":679,\"String\":108,\"JSONException.getMessage()\":1532,\"\\u003creturn\\u003e\":1287,\"JSONObject.append()\":901,\"ResultSet.next()\":475,\"Logger.finer()\":98,\"JSONObject.put()\":857,\"Patient.setConnection()\":315,\"PreparedStatement.executeQuery()\":443,\"Patient.closeConnections()\":978,\"int:1\":421,\"JSONObject.\\u003cinit\\u003e\":581,\"SQLException.getMessage()\":1365,\"ResultSet.getInt()\":734},\"expressionEnd\":{\"PreparedStatement.setString()\":432,\"WebUtils.buildErrorJson()\":1380,\"DbConnection.prepareStatement()\":399,\"ResultSet.getString()\":704,\"String\":154,\"JSONException.getMessage()\":1546,\"\\u003creturn\\u003e\":1381,\"JSONObject.append()\":926,\"ResultSet.next()\":484,\"Logger.finer()\":156,\"JSONObject.put()\":888,\"Patient.setConnection()\":330,\"PreparedStatement.executeQuery()\":462,\"Patient.closeConnections()\":1012,\"int:1\":422,\"JSONObject.\\u003cinit\\u003e\":597,\"SQLException.getMessage()\":1379,\"ResultSet.getInt()\":757},\"rawCode\":\"public static JSONObject getRecentPatients(String userName)\\n\\t {\\n\\t\\t DbConnection dbConn \\u003d null;\\n\\t\\t log.finer(\\\"Patient: getRecentPatients : got connection \\\" );\\n\\t\\t boolean rtnResults \\u003d false;\\n\\t\\t JSONObject ret \\u003d new JSONObject();\\n\\n\\t\\t PreparedStatement prep \\u003d null;\\n\\t\\t ResultSet rs \\u003d null;\\n\\t\\t try\\n\\t\\t {\\n\\t\\t\\t\\n\\t\\t\\t\\t dbConn\\u003d setConnection();\\n\\n\\t\\t\\t prep \\u003d dbConn.prepareStatement(Patient.SEARCH_RECENT_PATIENTS);\\n\\n\\t\\t\\t prep.setString(1,userName);\\n\\t\\t\\t rs \\u003d prep.executeQuery();\\n\\t\\t\\t while( rs.next())\\n\\t\\t     {\\n\\t\\t\\t        //convert to JSON\\n\\t\\t\\t        rtnResults \\u003d true;\\n\\n\\t\\t\\t        JSONObject o \\u003d new JSONObject();\\n\\t\\t\\t        String fName \\u003d rs.getString(\\\"first_name\\\");\\n\\t\\t\\t        String lName \\u003d rs.getString(\\\"last_name\\\");\\n\\t\\t\\t        int patient_id \\u003d rs.getInt(\\\"patient_id\\\");\\n\\t\\t\\t        o.put(Patient.ID, patient_id);\\n\\t\\t\\t        o.put(Patient.FIRST_NAME, fName);\\n\\t\\t\\t        o.put(Patient.LAST_NAME, lName);\\n\\t\\t\\t        ret.append(\\\"patients\\\", o);\\n\\t\\t     }\\n\\n\\t\\t\\t if (!rtnResults)\\n\\t\\t      {\\n\\t\\t      \\tcloseConnections(dbConn, prep, rs);\\n\\t\\t      \\tdbConn \\u003d null;\\n\\t\\t      \\tprep \\u003d null;\\n\\t\\t      \\trs \\u003d null;\\n\\n\\t\\t        \\treturn WebUtils.buildErrorJson( \\\"There are no recent patients currently listed for user \\\" + userName );\\n\\n\\t\\t      }\\n\\t\\t }\\n\\t\\t catch (SQLException e)\\n\\t\\t {\\n\\n\\t\\t\\t\\t// TODO Auto-generated catch block\\n\\t\\t\\t return WebUtils.buildErrorJson( \\\"Problem on selecting data from database .\\\" + e.getMessage());\\n\\n\\t\\t }\\n\\t\\t catch (JSONException e)\\n\\t\\t {\\n\\n\\t\\t\\t// TODO Auto-generated catch block\\n\\t\\t\\treturn WebUtils.buildErrorJson( \\\"Problem on generating JSON error.\\\" + e.getMessage());\\n\\n\\t\\t }\\n\\t\\t finally {\\n\\n\\t\\t \\tcloseConnections(dbConn, prep, rs);\\n\\t\\t \\tdbConn \\u003d null;\\n\\t\\t \\tprep \\u003d null;\\n\\t\\t \\trs \\u003d null;\\n\\t\\t }\\n\\t     return ret;\\n\\n\\t }\"}","72":"{\"expressionStart\":{\"WebUtils.buildErrorJson()\":1613,\"Logger.warning()\":1282,\"DbConnection.prepareStatement()\":323,\"ResultSet.getString()\":604,\"PreparedStatement.setInt()\":384,\"String\":617,\"JSONException.getMessage()\":1676,\"\\u003creturn\\u003e\":1814,\"ResultSet.next()\":444,\"Logger.finer()\":53,\"JSONObject.put()\":820,\"Patient.setConnection()\":294,\"PreparedStatement.executeQuery()\":412,\"Patient.closeConnections()\":897,\"int:1\":396,\"SQLException.getMessage()\":1340,\"JSONObject.\\u003cinit\\u003e\":158},\"expressionEnd\":{\"WebUtils.buildErrorJson()\":1691,\"Logger.warning()\":1355,\"DbConnection.prepareStatement()\":377,\"ResultSet.getString()\":629,\"PreparedStatement.setInt()\":401,\"String\":628,\"JSONException.getMessage()\":1690,\"\\u003creturn\\u003e\":1825,\"ResultSet.next()\":453,\"Logger.finer()\":105,\"JSONObject.put()\":849,\"Patient.setConnection()\":309,\"PreparedStatement.executeQuery()\":431,\"Patient.closeConnections()\":931,\"int:1\":397,\"SQLException.getMessage()\":1354,\"JSONObject.\\u003cinit\\u003e\":174},\"rawCode\":\"public static JSONObject getPatient(int id)\\n\\t {\\n\\n\\n\\t\\t log.finer(\\\"Patient: getPatients : got connection \\\" );\\n\\t\\t boolean rtnResults \\u003d false;\\n\\t\\t JSONObject ret \\u003d new JSONObject();\\n\\t\\t\\n\\t\\tDbConnection dbConn \\u003d null;\\n\\t\\t PreparedStatement prep\\u003d null;\\n\\t\\t ResultSet rs \\u003d null;\\n\\t\\t try\\n\\t\\t {\\n\\t\\t\\n\\t\\t\\t\\t dbConn\\u003d setConnection();\\n\\n\\t\\t\\t prep \\u003d dbConn.prepareStatement(Patient.SEARCH_PATIENTS_BY_ID);\\n\\n\\t\\t\\t prep.setInt(1,id);\\n\\t\\t\\t rs \\u003d prep.executeQuery();\\n\\t\\t\\t while( rs.next())\\n\\t\\t     {\\n\\t\\t\\t        //convert to JSON\\n\\t\\t\\t        rtnResults \\u003d true;\\n\\n\\t\\t\\t        String fName \\u003d rs.getString(\\\"first_name\\\");\\n\\t\\t\\t        String lName \\u003d rs.getString(\\\"last_name\\\");\\n\\t\\t\\t        String photo \\u003d rs.getString(\\\"photo\\\");\\n\\t\\t\\t        ret.put(Patient.ID, id);\\n\\t\\t\\t        ret.put(Patient.FIRST_NAME, fName);\\n\\t\\t\\t        ret.put(Patient.LAST_NAME, lName);\\n\\t\\t\\t        ret.put(Patient.PHOTO, photo);\\n\\t\\t     }\\n\\n\\t\\t\\t if (!rtnResults)\\n\\t\\t      {\\n\\t\\t\\t\\t\\tcloseConnections(dbConn, prep, rs);\\n\\t\\t\\t\\t\\tdbConn \\u003d null;\\n\\t\\t\\t\\t\\tprep \\u003d null;\\n\\t\\t\\t\\t\\trs \\u003d null;\\n\\t\\t          log.warning( \\\"There are no patients currently listed for patient id \\\" + id );\\n\\t\\t          return WebUtils.buildErrorJson( \\\"There are no patients currently listed for patient id \\\" + id );\\n\\t\\t      }\\n\\t\\t }\\n\\t\\t catch (SQLException e)\\n\\t\\t {\\n\\n\\t\\t     // TODO Auto-generated catch block\\n\\t\\t     log.warning(\\\"Problem on selecting data from database .\\\" + e.getMessage());\\n\\t\\t\\t return WebUtils.buildErrorJson( \\\"Problem on selecting data from database .\\\" + e.getMessage());\\n\\n\\t\\t }\\n\\t\\t catch (JSONException e)\\n\\t\\t {\\n\\n\\t\\t\\t// TODO Auto-generated catch block\\n\\t\\t\\tlog.warning(\\\"Problem on generating JSON error.\\\" + e.getMessage());\\n\\t\\t\\treturn WebUtils.buildErrorJson( \\\"Problem on generating JSON error.\\\" + e.getMessage());\\n\\n\\t\\t }\\n\\t\\t finally{\\n\\t\\t \\tcloseConnections(dbConn, prep, rs);\\n\\t\\t \\tdbConn \\u003d null;\\n\\t\\t \\tprep \\u003d null;\\n\\t\\t \\trs \\u003d null;\\n\\t\\t }\\n\\n\\t     return ret;\\n\\n\\t }\"}","73":"{\"expressionStart\":{\"ResultSet.getDate()\":2078,\"PreparedStatement.toString()\":1494,\"PreparedStatement.setInt()\":1371,\"GregorianCalendar.\\u003cinit\\u003e\":1073,\"Calendar.getTime()\":1164,\"String\":1454,\"JSONException.getMessage()\":3143,\"ResultSet.next()\":1587,\"Logger.finer()\":1444,\"JSONObject.put()\":2298,\"Calendar.set()\":1103,\"int:4\":1209,\"int:3\":630,\"Patient.setConnection()\":318,\"Date.getTime()\":652,\"int:2\":598,\"int:1\":563,\"\\u003cnullcheck\\u003e\":2335,\"PreparedStatement.setString()\":1404,\"String:title\":2164,\"WebUtils.buildErrorJson()\":2721,\"DbConnection.prepareStatement()\":1336,\"UNKNOWN.getTime()\":1164,\"ResultSet.getString()\":1872,\"\\u003creturn\\u003e\":3280,\"JSONObject.append()\":2517,\"int\":1111,\"PreparedStatement.setDate()\":617,\"PreparedStatement.executeQuery()\":1522,\"Integer.parseInt()\":198,\"Patient.closeConnections()\":2601,\"Date.\\u003cinit\\u003e\":633,\"JSONObject.\\u003cinit\\u003e\":1771,\"SQLException.getMessage()\":2981},\"expressionEnd\":{\"ResultSet.getDate()\":2104,\"PreparedStatement.toString()\":1509,\"PreparedStatement.setInt()\":1397,\"GregorianCalendar.\\u003cinit\\u003e\":1096,\"Calendar.getTime()\":1177,\"String\":1491,\"JSONException.getMessage()\":3157,\"ResultSet.next()\":1596,\"Logger.finer()\":1510,\"JSONObject.put()\":2319,\"Calendar.set()\":1122,\"int:4\":1210,\"int:3\":631,\"Patient.setConnection()\":333,\"Date.getTime()\":671,\"int:2\":599,\"int:1\":564,\"\\u003cnullcheck\\u003e\":2355,\"PreparedStatement.setString()\":1431,\"String:title\":2171,\"WebUtils.buildErrorJson()\":2810,\"DbConnection.prepareStatement()\":1364,\"UNKNOWN.getTime()\":1187,\"ResultSet.getString()\":1901,\"\\u003creturn\\u003e\":3291,\"JSONObject.append()\":2549,\"int\":1115,\"PreparedStatement.setDate()\":673,\"PreparedStatement.executeQuery()\":1541,\"Integer.parseInt()\":225,\"Patient.closeConnections()\":2635,\"Date.\\u003cinit\\u003e\":672,\"JSONObject.\\u003cinit\\u003e\":1787,\"SQLException.getMessage()\":2995},\"rawCode\":\"public static JSONObject getHistory(String patientId, String category,  Date startDate, Date endDate)\\n\\t {\\n\\t\\t JSONObject ret \\u003d new JSONObject();\\n\\t\\t PreparedStatement prep \\u003d null;\\n\\t\\t int patient_id \\u003d Integer.parseInt(patientId);\\n       DbConnection dbConn \\u003d null;\\n       ResultSet rs \\u003d null;\\n\\t\\t try\\n\\t\\t {\\n\\t\\t\\n\\t\\t\\t\\t dbConn\\u003d setConnection();\\n\\t\\t\\t String sql \\u003d Patient.SELECT_PATIENT_HISTORY;\\n\\n\\t\\t\\t if (startDate !\\u003d null)\\n\\t\\t\\t {\\n\\t\\t\\t\\tsql \\u003d sql +  Patient.SELECT_PATIENT_HISTORY_EXT + SELECT_PATIENT_HISTORY_ORDER_BY;\\n\\t\\t\\t\\tprep \\u003d dbConn.prepareStatement(sql);\\n\\n\\t\\t\\t\\tprep.setInt(1, patient_id);\\n\\t\\t\\t\\tprep.setString(2, category);\\n\\n\\t\\t\\t\\tprep.setDate(3, new java.sql.Date (startDate.getTime()));\\n\\n\\t\\t\\t\\tif (endDate \\u003d\\u003d null)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tendDate \\u003d new java.util.Date();\\n\\t\\t\\t\\t\\tprep.setDate(3, new java.sql.Date (endDate.getTime()));\\n\\n\\t\\t\\t\\t}\\n\\t\\t\\t }\\n\\t\\t\\t else if (endDate !\\u003d null)\\n\\t\\t\\t {\\n\\t\\t\\t\\t sql \\u003d sql +  Patient.SELECT_PATIENT_HISTORY_EXT + SELECT_PATIENT_HISTORY_ORDER_BY;\\n\\n\\t\\t\\t\\t prep \\u003d dbConn.prepareStatement(sql);\\n\\t\\t\\t\\t prep.setInt(1, patient_id);\\n\\t\\t\\t\\t prep.setString(2, category);\\n\\n\\t\\t\\t\\t Calendar cal \\u003d new GregorianCalendar();\\n\\t\\t\\t\\t cal.set(1920, 1, 1);\\n\\t\\t\\t\\t prep.setDate(3, new java.sql.Date (cal.getTime().getTime()));\\n\\t\\t\\t\\t prep.setDate(4, new java.sql.Date (endDate.getTime()));\\n\\n\\t\\t\\t }\\n\\t\\t\\t else\\n\\t\\t\\t {\\n\\t\\t\\t\\t sql \\u003d sql + SELECT_PATIENT_HISTORY_ORDER_BY;\\n\\t\\t\\t\\t prep \\u003d dbConn.prepareStatement(sql);\\n\\t\\t\\t\\t prep.setInt(1, patient_id);\\n\\t\\t\\t\\t prep.setString(2, category);\\n\\n\\t\\t\\t }\\n\\t\\t\\t log.finer(\\\"Patient: getPatientHistory : query \\\" + prep.toString());\\n\\n\\t\\t\\t rs \\u003d prep.executeQuery();\\n\\t\\t\\t boolean rtnResults \\u003d false;\\n\\n\\t\\t\\t while (rs.next())\\n\\t\\t\\t {\\n\\t\\t\\t\\t //SELECT patient_id, history, category_id, history_date, history_notes\\n\\n\\t\\t\\t\\t  rtnResults \\u003d true;\\n\\n\\t\\t\\t\\t  JSONObject o \\u003d new JSONObject();\\n\\t\\t\\t\\t  JSONObject o_new \\u003d new JSONObject();\\n\\n\\t\\t\\t      String history \\u003d rs.getString(\\\"history\\\");\\n\\t\\t\\t      String history_note \\u003d rs.getString(\\\"history_notes\\\");\\n\\t\\t\\t      String priority \\u003d rs.getString(\\\"priority\\\");\\n\\t\\t\\t      String color \\u003d rs.getString(\\\"color\\\");\\n\\t\\t\\t      category \\u003d rs.getString(\\\"category\\\");\\n\\t\\t\\t      Date history_date \\u003d rs.getDate(\\\"history_date\\\");\\n\\n\\t\\t\\t      o.put(\\\"patient_id\\\", patient_id);\\n\\t\\t\\t      o.put(\\\"title\\\", history);\\n\\t\\t\\t      o.put(\\\"category\\\", category);\\n\\t\\t\\t      o.put(\\\"priority\\\", priority);\\n\\n\\t\\t\\t      if (color !\\u003d null)\\n\\t\\t\\t    \\t  o.put(\\\"color\\\", color);\\n\\n\\t\\t\\t      if (history_note !\\u003d null)\\n\\t\\t\\t    \\t  o.put(\\\"note\\\", history_note);\\n\\n\\t\\t\\t      if (history_date !\\u003d null)\\n\\t\\t\\t    \\t  o.put(\\\"date\\\", history_date);\\n\\n\\t\\t\\t      //o_new.put(\\\"history\\\", o);\\n\\t\\t\\t      ret.append(\\\"patient_history\\\", o);\\n\\t\\t     }\\n\\n\\t\\t\\t if (!rtnResults)\\n\\t\\t      {\\n\\t\\t      \\tcloseConnections(dbConn, prep, rs);\\n\\t\\t      \\tdbConn \\u003d null;\\n\\t\\t      \\tprep \\u003d null;\\n\\t\\t      \\trs \\u003d null;\\n\\t\\t        \\treturn WebUtils.buildErrorJson( \\\"There is no patient history listed for patient \\\" + patient_id );\\n\\n\\t\\t      }\\n\\t\\t }\\n\\t\\t catch (SQLException e)\\n\\t\\t {\\n\\n\\t\\t\\t\\t// TODO Auto-generated catch block\\n\\t\\t\\t return WebUtils.buildErrorJson( \\\"Problem on selecting data from database .\\\" + e.getMessage());\\n\\n\\t\\t } catch (JSONException e) {\\n\\n\\t\\t\\t// TODO Auto-generated catch block\\n\\t\\t\\t return WebUtils.buildErrorJson( \\\"Problem on building JSON Object .\\\" + e.getMessage());\\n\\t\\t}\\n\\t\\tfinally {\\n\\n       \\tcloseConnections(dbConn);\\n       \\tdbConn \\u003d null;\\n\\t\\t   prep \\u003d null;\\n\\t\\t   rs \\u003d null;\\n       }\\n\\t\\t return ret;\\n\\t }\"}","74":"{\"expressionStart\":{\"null:null\":306,\"ResultSet.getString()\":217,\"String\":130,\"Connection.createStatement()\":83,\"UNKNOWN.executeQuery()\":83,\"int:1\":230,\"\\u003creturn\\u003e\":299,\"ResultSet.next()\":180,\"File.\\u003cinit\\u003e\":208},\"expressionEnd\":{\"null:null\":310,\"ResultSet.getString()\":232,\"String\":167,\"Connection.createStatement()\":105,\"UNKNOWN.executeQuery()\":168,\"int:1\":231,\"\\u003creturn\\u003e\":311,\"ResultSet.next()\":189,\"File.\\u003cinit\\u003e\":233},\"rawCode\":\"private File getSiteFromReviewDb(Connection conn) {\\n    try {\\n      ResultSet rs \\u003d conn.createStatement().executeQuery(\\n          \\\"select site_path from system_config\\\");\\n      if (rs.next()) {\\n        return new File(rs.getString(1));\\n      }\\n      return null;\\n    } catch (SQLException e) {\\n      return null;\\n    }\\n  }\"}","75":"{\"expressionStart\":{\"\\u003cr\\u003e\":832,\"String:UPDATE_RULE\":721,\"String\":1406,\"String:FKTABLE_SCHEM\":644,\"Connection.getCatalog()\":1560,\"ResultSet.next()\":384,\"ResultSetMetaData.getColumnCount()\":414,\"DatabaseMetaDataTest.fail()\":2969,\"String:DEFERRABILITY\":789,\"String:FKCOLUMN_NAME\":677,\"ResultSet.getShort()\":2363,\"DatabaseMetaData.getImportedKeys()\":2859,\"ResultSetMetaData.getColumnName()\":919,\"DatabaseMetaDataTest.assertEquals()\":1260,\"ResultSet.close()\":2768,\"Connection.close()\":2816,\"String:FKTABLE_CAT\":613,\"int:1\":829,\"String:PKTABLE_CAT\":532,\"String:PK_NAME\":762,\"String:PKTABLE_SCHEM\":547,\"String:PKCOLUMN_NAME\":596,\"DatabaseMetaDataTest.assertTrue()\":349,\"String:FK_NAME\":751,\"String:\":1199,\"String:PKTABLE_NAME\":580,\"String:KEY_SEQ\":694,\"ResultSet.getMetaData()\":323,\"ResultSet.getString()\":1354,\"String:Incorrect number of columns\":458,\"String:Incorrect column name\":874,\"{String}\":530,\"String:SQLException not thrown\":2974,\"String:DELETE_RULE\":736,\"String[].arrayget()\":899,\"null:null\":2548,\"\\u003ca\\u003e\":842,\"int:14\":489,\"String:FKTABLE_NAME\":661},\"expressionEnd\":{\"\\u003cr\\u003e\":840,\"String:UPDATE_RULE\":734,\"String\":1441,\"String:FKTABLE_SCHEM\":659,\"Connection.getCatalog()\":1577,\"ResultSet.next()\":393,\"ResultSetMetaData.getColumnCount()\":435,\"DatabaseMetaDataTest.fail()\":3000,\"String:DEFERRABILITY\":804,\"String:FKCOLUMN_NAME\":692,\"ResultSet.getShort()\":2414,\"DatabaseMetaData.getImportedKeys()\":2954,\"ResultSetMetaData.getColumnName()\":961,\"DatabaseMetaDataTest.assertEquals()\":1383,\"ResultSet.close()\":2778,\"Connection.close()\":2828,\"String:FKTABLE_CAT\":626,\"int:1\":830,\"String:PKTABLE_CAT\":545,\"String:PK_NAME\":771,\"String:PKTABLE_SCHEM\":562,\"String:PKCOLUMN_NAME\":611,\"DatabaseMetaDataTest.assertTrue()\":394,\"String:FK_NAME\":760,\"String:\":1201,\"String:PKTABLE_NAME\":594,\"String:KEY_SEQ\":703,\"ResultSet.getMetaData()\":339,\"ResultSet.getString()\":1382,\"String:Incorrect number of columns\":487,\"String:Incorrect column name\":897,\"{String}\":806,\"String:SQLException not thrown\":2999,\"String:DELETE_RULE\":749,\"String[].arrayget()\":917,\"null:null\":2552,\"\\u003ca\\u003e\":845,\"int:14\":491,\"String:FKTABLE_NAME\":675},\"rawCode\":\"@KnownFailure(\\\"Keys are not supported: Ticket 91\\\")\\n    public void test_getImportedKeysLjava_lang_StringLjava_lang_StringLjava_lang_String()\\n            throws SQLException {\\n        ResultSet rs \\u003d meta.getImportedKeys(conn.getCatalog(), null,\\n                DatabaseCreator.TEST_TABLE1);\\n        ResultSetMetaData rsmd \\u003d rs.getMetaData();\\n        assertTrue(\\\"Rows do not obtained\\\", rs.next());\\n        int col \\u003d rsmd.getColumnCount();\\n        assertEquals(\\\"Incorrect number of columns\\\", 14, col);\\n        String[] columnNames \\u003d { \\\"PKTABLE_CAT\\\", \\\"PKTABLE_SCHEM\\\",\\n                \\\"PKTABLE_NAME\\\", \\\"PKCOLUMN_NAME\\\", \\\"FKTABLE_CAT\\\",\\n                \\\"FKTABLE_SCHEM\\\", \\\"FKTABLE_NAME\\\", \\\"FKCOLUMN_NAME\\\", \\\"KEY_SEQ\\\",\\n                \\\"UPDATE_RULE\\\", \\\"DELETE_RULE\\\", \\\"FK_NAME\\\", \\\"PK_NAME\\\",\\n                \\\"DEFERRABILITY\\\" };\\n        for (int c \\u003d 1; c \\u003c\\u003d col; ++c) {\\n            assertEquals(\\\"Incorrect column name\\\", columnNames[c - 1], rsmd\\n                    .getColumnName(c));\\n        }\\n//      TODO getCatalog is not supported\\n        assertEquals(\\\"Incorrect primary key table catalog\\\", conn.getCatalog(),\\n                rs.getString(\\\"PKTABLE_CAT\\\"));\\n        assertEquals(\\\"Incorrect primary key table schema\\\", \\\"\\\", rs\\n                .getString(\\\"PKTABLE_SCHEM\\\"));\\n        assertEquals(\\\"Incorrect primary key table name\\\",\\n                DatabaseCreator.TEST_TABLE3, rs.getString(\\\"PKTABLE_NAME\\\"));\\n        assertEquals(\\\"Incorrect primary key column name\\\", \\\"fkey\\\", rs\\n                .getString(\\\"PKCOLUMN_NAME\\\"));\\n        assertEquals(\\\"Incorrect foreign key table catalog\\\", conn.getCatalog(),\\n                rs.getString(\\\"FKTABLE_CAT\\\"));\\n        assertEquals(\\\"Incorrect foreign key table schema\\\", \\\"\\\", rs\\n                .getString(\\\"FKTABLE_SCHEM\\\"));\\n        assertEquals(\\\"Incorrect foreign key table name\\\",\\n                DatabaseCreator.TEST_TABLE1, rs.getString(\\\"FKTABLE_NAME\\\"));\\n        assertEquals(\\\"Incorrect foreign key column name\\\", \\\"fk\\\", rs\\n                .getString(\\\"FKCOLUMN_NAME\\\"));\\n        assertEquals(\\\"Incorrect sequence number within foreign key\\\", 1, rs\\n                .getShort(\\\"KEY_SEQ\\\"));\\n        assertEquals(\\\"Incorrect update rule value\\\",\\n                DatabaseMetaData.importedKeyNoAction, rs\\n                        .getShort(\\\"UPDATE_RULE\\\"));\\n        assertEquals(\\\"Incorrect delete rule value\\\",\\n                DatabaseMetaData.importedKeyNoAction, rs\\n                        .getShort(\\\"DELETE_RULE\\\"));\\n //       assertNotNull(\\\"Incorrect foreign key name\\\", rs.getString(\\\"FK_NAME\\\"));\\n        assertEquals(\\\"Incorrect primary key name\\\", null, rs\\n                .getString(\\\"PK_NAME\\\"));\\n        assertEquals(\\\"Incorrect deferrability\\\",\\n                DatabaseMetaData.importedKeyNotDeferrable, rs\\n                        .getShort(\\\"DEFERRABILITY\\\"));\\n        rs.close();\\n\\n      //Exception checking\\n        conn.close();\\n\\n         try {\\n             meta.getImportedKeys(conn.getCatalog(), null,\\n                     DatabaseCreator.TEST_TABLE1);\\n             fail(\\\"SQLException not thrown\\\");\\n         } catch (SQLException e) {\\n             //ok\\n         }\\n    }\"}","76":"{\"expressionStart\":{\"String:TABLE_TYPE\":404,\"DatabaseMetaDataTest.assertTrue()\":307,\"\\u003cr\\u003e\":338,\"ResultSet.getString()\":370,\"String\":318,\"ResultSet.next()\":282,\"{String}\":181,\"DatabaseMetaDataTest.fail()\":571,\"String:SQLException not thrown\":576,\"DatabaseMetaData.getTableTypes()\":536,\"Arrays.binarySearch()\":338,\"ResultSet.close()\":444,\"Connection.close()\":493,\"String:TABLE\":202,\"int:1\":422},\"expressionEnd\":{\"String:TABLE_TYPE\":416,\"DatabaseMetaDataTest.assertTrue()\":424,\"\\u003cr\\u003e\":423,\"ResultSet.getString()\":417,\"String\":336,\"ResultSet.next()\":291,\"{String}\":219,\"DatabaseMetaDataTest.fail()\":602,\"String:SQLException not thrown\":601,\"DatabaseMetaData.getTableTypes()\":556,\"Arrays.binarySearch()\":418,\"ResultSet.close()\":454,\"Connection.close()\":505,\"String:TABLE\":209,\"int:1\":423},\"rawCode\":\"/**\\n     * java.sql.DatabaseMetaData#getTableTypes()\\n     */\\n    @KnownFailure(\\\"Ticket 98\\\")\\n    public void test_getTableTypes() throws SQLException {\\n        String[] tableTypes \\u003d { \\\"LOCAL TEMPORARY\\\", \\\"TABLE\\\", \\\"VIEW\\\" };\\n        ResultSet rs \\u003d meta.getTableTypes();\\n\\n        while (rs.next()) {\\n            assertTrue(\\\"Wrong table type\\\", Arrays.binarySearch(tableTypes, rs\\n                    .getString(\\\"TABLE_TYPE\\\")) \\u003e -1);\\n        }\\n        rs.close();\\n\\n\\n      //Exception checking\\n        conn.close();\\n\\n         try {\\n             meta.getTableTypes();\\n             fail(\\\"SQLException not thrown\\\");\\n         } catch (SQLException e) {\\n             //ok\\n         }\\n\\n    }\"}","77":"{\"expressionStart\":{\"DatabaseMetaDataTest.assertNotNull()\":1358,\"String:TABLE_SCHEM\":1329,\"\\u003cr\\u003e\":1050,\"ResultSet.getString()\":1316,\"UNKNOWN.equals()\":1549,\"System.arraycopy()\":799,\"Arrays.sort()\":1205,\"String\":1667,\"ResultSet.next()\":1274,\"{String}\":613,\"DatabaseMetaDataTest.getStoredIdentifier()\":1105,\"String[].arrayset()\":1091,\"DatabaseMetaDataTest.assertEquals()\":1654,\"String[].arrayget()\":1549,\"ResultSet.close()\":1633,\"\\u003ca\\u003e\":1071,\"int:0\":732},\"expressionEnd\":{\"DatabaseMetaDataTest.assertNotNull()\":1379,\"String:TABLE_SCHEM\":1342,\"\\u003cr\\u003e\":1069,\"ResultSet.getString()\":1343,\"UNKNOWN.equals()\":1583,\"System.arraycopy()\":904,\"Arrays.sort()\":1226,\"String\":1685,\"ResultSet.next()\":1283,\"{String}\":686,\"DatabaseMetaDataTest.getStoredIdentifier()\":1137,\"String[].arrayset()\":1102,\"DatabaseMetaDataTest.assertEquals()\":1714,\"String[].arrayget()\":1568,\"ResultSet.close()\":1643,\"\\u003ca\\u003e\":1074,\"int:0\":733},\"rawCode\":\"/**\\n      * Check the returned information from a getSchemas(). The passed in\\n      * String[] expected is a list of the schemas expected to be present in the\\n      * returned set. The returned set may contain additional schemas which will\\n      * be ignored, thus this test can be used regardless of the database state.\\n      * The builtin schemas are automatically checked and must not be part of the\\n      * passed in list.\\n      */\\n     public static void checkSchemas(ResultSet rs, String[] userExpected)\\n             throws SQLException {\\n\\n         // Add in the system schemas\\n         String[] expected \\u003d new String[BUILTIN_SCHEMAS.length\\n                 + userExpected.length];\\n\\n         System.arraycopy(BUILTIN_SCHEMAS, 0, expected, 0,\\n                 BUILTIN_SCHEMAS.length);\\n         System.arraycopy(userExpected, 0, expected, BUILTIN_SCHEMAS.length,\\n                 userExpected.length);\\n\\n         // Remove any quotes from user schemas and upper case\\n         // those without quotes.\\n         for (int i \\u003d BUILTIN_SCHEMAS.length; i \\u003c expected.length; i++) {\\n             expected[i] \\u003d getStoredIdentifier(expected[i]);\\n         }\\n\\n         // output is ordered by TABLE_SCHEM\\n         Arrays.sort(expected);\\n\\n         int nextMatch \\u003d 0;\\n\\n         while (rs.next()) {\\n             String schema \\u003d rs.getString(\\\"TABLE_SCHEM\\\");\\n             assertNotNull(schema);\\n\\n             // Catalogs not supported\\n//             assertNull(rs.getString(\\\"TABLE_CATALOG\\\"));\\n\\n             if (nextMatch \\u003c expected.length) {\\n                 if (expected[nextMatch].equals(schema)) nextMatch++;\\n             }\\n         }\\n         rs.close();\\n         assertEquals(\\\"Schemas missing \\\", expected.length, nextMatch);\\n     }\"}","78":"{\"expressionStart\":{\"Statement.executeUpdate()\":502,\"String:DATA_TYPE\":1419,\"String:%\":2252,\"String:COLUMN_NAME\":1404,\"\\u003cr\\u003e\":1569,\"String\":1461,\"ResultSet.next()\":1232,\"String:INSERT INTO \":533,\"DatabaseMetaDataTest.fail()\":2270,\"ResultSetMetaData.getColumnCount()\":1262,\"DatabaseMetaData.getColumns()\":2183,\"String:SELECT * FROM \":346,\"ResultSet.getShort()\":1784,\"int:8\":1337,\"ResultSetMetaData.getColumnName()\":1656,\"DatabaseMetaDataTest.assertEquals()\":1598,\"ResultSet.close()\":2095,\"Connection.close()\":2142,\"int:1\":1566,\"Statement.executeQuery()\":316,\"ResultSet.getInt()\":1979,\"DatabaseMetaDataTest.assertTrue()\":1200,\"String:TYPE_NAME\":1432,\"DatabaseMetaData.getBestRowIdentifier()\":1002,\"ResultSet.getMetaData()\":1174,\"ResultSet.getString()\":2059,\"String:Incorrect number of columns\":1306,\"String:Incorrect column name\":1611,\"{String}\":1377,\"String:SQLException not thrown\":2275,\"boolean:true\":1134,\"String[].arrayget()\":1636,\"null:null\":1034,\"\\u003ca\\u003e\":1579},\"expressionEnd\":{\"Statement.executeUpdate()\":639,\"String:DATA_TYPE\":1430,\"String:%\":2255,\"String:COLUMN_NAME\":1417,\"\\u003cr\\u003e\":1577,\"String\":1474,\"ResultSet.next()\":1241,\"String:INSERT INTO \":547,\"DatabaseMetaDataTest.fail()\":2301,\"ResultSetMetaData.getColumnCount()\":1283,\"DatabaseMetaData.getColumns()\":2256,\"String:SELECT * FROM \":362,\"ResultSet.getShort()\":1821,\"int:8\":1338,\"ResultSetMetaData.getColumnName()\":1698,\"DatabaseMetaDataTest.assertEquals()\":1699,\"ResultSet.close()\":2105,\"Connection.close()\":2154,\"int:1\":1567,\"Statement.executeQuery()\":409,\"ResultSet.getInt()\":2001,\"DatabaseMetaDataTest.assertTrue()\":1242,\"String:TYPE_NAME\":1443,\"DatabaseMetaData.getBestRowIdentifier()\":1139,\"ResultSet.getMetaData()\":1190,\"ResultSet.getString()\":2084,\"String:Incorrect number of columns\":1335,\"String:Incorrect column name\":1634,\"{String}\":1543,\"String:SQLException not thrown\":2300,\"boolean:true\":1138,\"String[].arrayget()\":1654,\"null:null\":1038,\"\\u003ca\\u003e\":1582},\"rawCode\":\"/**\\n     * {@link java.sql.DatabaseMetaData #getBestRowIdentifier(java.lang.String,\\n     *        java.lang.String, java.lang.String, int, boolean) }\\n     */\\n    public void test_getBestRowIdentifierLjava_lang_StringLjava_lang_StringLjava_lang_StringIZ()\\n            throws SQLException {\\n        ResultSet result \\u003d statementForward.executeQuery(\\\"SELECT * FROM \\\"\\n                + DatabaseCreator.TEST_TABLE1);\\n\\n        //Updatable ResultSet not supported, converted to normal insert statement\\n        statementForward.executeUpdate(\\\"INSERT INTO \\\" + DatabaseCreator.TEST_TABLE1\\n                + \\\" (id, field1) VALUES( 1234567, \\u0027test1\\u0027);\\\");\\n        /* not supported\\n        try {\\n         result.moveToInsertRow();\\n         result.updateInt(\\\"id\\\", 1234567);\\n         result.updateString(\\\"field1\\\", \\\"test1\\\");\\n         result.insertRow();\\n         } catch (SQLException e) {\\n         fail(\\\"Unexpected SQLException \\\" + e.toString());\\n         }\\n         */\\n\\n\\n        result.close();\\n\\n        ResultSet rs \\u003d meta.getBestRowIdentifier(null, null,\\n                DatabaseCreator.TEST_TABLE1, DatabaseMetaData.bestRowSession,\\n                true);\\n        ResultSetMetaData rsmd \\u003d rs.getMetaData();\\n        assertTrue(\\\"Rows not obtained\\\", rs.next());\\n        int col \\u003d rsmd.getColumnCount();\\n        assertEquals(\\\"Incorrect number of columns\\\", 8, col);\\n        String[] columnNames \\u003d {\\n                \\\"SCOPE\\\", \\\"COLUMN_NAME\\\", \\\"DATA_TYPE\\\", \\\"TYPE_NAME\\\",\\n                \\\"COLUMN_SIZE\\\", \\\"BUFFER_LENGTH\\\", \\\"DECIMAL_DIGITS\\\",\\n                \\\"PSEUDO_COLUMN\\\"};\\n        for (int c \\u003d 1; c \\u003c\\u003d col; ++c) {\\n            assertEquals(\\\"Incorrect column name\\\", columnNames[c - 1], rsmd\\n                    .getColumnName(c));\\n        }\\n        assertEquals(\\\"Incorrect scope\\\", DatabaseMetaData.bestRowSession, rs\\n                .getShort(\\\"SCOPE\\\"));\\n        assertEquals(\\\"Incorrect column name\\\", \\\"_ROWID_\\\", rs.getString(\\\"COLUMN_NAME\\\"));\\n        assertEquals(\\\"Incorrect data type\\\", java.sql.Types.INTEGER, rs.getInt(\\\"DATA_TYPE\\\"));\\n        assertEquals(\\\"Incorrect type name\\\", \\\"INTEGER\\\", rs.getString(\\\"TYPE_NAME\\\"));\\n        rs.close();\\n\\n     // Exception testing\\n        conn.close();\\n\\n        try {\\n            meta.getColumns(null, null,\\n            DatabaseCreator.TEST_TABLE1, \\\"%\\\");\\n            fail(\\\"SQLException not thrown\\\");\\n        } catch (SQLException e) {\\n            // ok\\n        }\\n    }\"}","79":"{\"expressionStart\":{\"String:TABLE_SCHEM\":953,\"String:TABLE_CAT\":1545,\"\\u003cr\\u003e\":1212,\"String:TABLE_NAME\":1009,\"Connection.createStatement()\":852,\"ResultSet.next()\":891,\"ResultSetMetaData.getColumnCount()\":1219,\"Statement.close()\":2064,\"String:SELECT * FROM \":1085,\"DatabaseMetaDataTest.assertEquals()\":1532,\"ResultSet.close()\":2044,\"int:1\":1209,\"Statement.executeQuery()\":1053,\"ResultSet.getInt()\":1465,\"DatabaseMetaDataTest.assertTrue()\":1355,\"String:\":1582,\"ResultSet.getString()\":1690,\"ResultSet.getMetaData()\":1161,\"\\u003creturn\\u003e\":2083,\"ResultSet.getRow()\":2023,\"DatabaseMetaDataTest.crossCheckGetColumnRowAndResultSetMetaData()\":1840,\"\\u003ca\\u003e\":1244,\"String:.\":1111,\"\\u003cbreak\\u003e\":1944,\"String:ORDINAL_POSITION\":1412},\"expressionEnd\":{\"String:TABLE_SCHEM\":966,\"String:TABLE_CAT\":1556,\"\\u003cr\\u003e\":1241,\"String:TABLE_NAME\":1021,\"Connection.createStatement()\":874,\"ResultSet.next()\":900,\"ResultSetMetaData.getColumnCount()\":1241,\"Statement.close()\":2073,\"String:SELECT * FROM \":1101,\"DatabaseMetaDataTest.assertEquals()\":1612,\"ResultSet.close()\":2054,\"int:1\":1210,\"Statement.executeQuery()\":1121,\"ResultSet.getInt()\":1494,\"DatabaseMetaDataTest.assertTrue()\":1376,\"String:\":1584,\"ResultSet.getString()\":1717,\"ResultSet.getMetaData()\":1178,\"\\u003creturn\\u003e\":2096,\"ResultSet.getRow()\":2034,\"DatabaseMetaDataTest.crossCheckGetColumnRowAndResultSetMetaData()\":1893,\"\\u003ca\\u003e\":1249,\"String:.\":1114,\"\\u003cbreak\\u003e\":1950,\"String:ORDINAL_POSITION\":1430},\"rawCode\":\"/**\\n     * Test Method from Apache Derby Project\\n     * Class\\n     * org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest\\n     *\\n     * Compare a ResultSet from getColumns() with ResultSetMetaData returned\\n     * from a SELECT * against the table. This method handles situations where a\\n     * full set of the columns are in the ResultSet. The first action is to call\\n     * rs.next(). The ResultSet will be closed by this method.\\n     *\\n     * @param rs\\n     *            resultset to crossCheck\\n     * @param partial\\n     *            used to indicate if ordinal position should get checked\\n     * @return the number of rows in the resultSet\\n     * @throws SQLException\\n     */\\n    private int crossCheckGetColumnsAndResultSetMetaData(ResultSet rs,\\n            boolean partial)\\n    throws SQLException\\n    {\\n        Statement s \\u003d conn.createStatement();\\n        while (rs.next())\\n        {\\n            String schema \\u003d rs.getString(\\\"TABLE_SCHEM\\\");\\n            String table \\u003d rs.getString(\\\"TABLE_NAME\\\");\\n\\n            ResultSet rst \\u003d s.executeQuery(\\n                \\\"SELECT * FROM \\\" + schema+\\\".\\\"+table);\\n            ResultSetMetaData rsmdt \\u003d rst.getMetaData();\\n\\n\\n            for (int col \\u003d 1; col \\u003c\\u003d rsmdt.getColumnCount() ; col++)\\n            {\\n                if (!partial) {\\n                    if (col !\\u003d 1)\\n                        assertTrue(rs.next());\\n\\n                    assertEquals(\\\"ORDINAL_POSITION\\\",\\n                            col, rs.getInt(\\\"ORDINAL_POSITION\\\"));\\n                }\\n\\n                assertEquals(\\\"TABLE_CAT\\\",\\n                        \\\"\\\", rs.getString(\\\"TABLE_CAT\\\"));\\n                assertEquals(\\\"TABLE_SCHEM\\\",\\n                        schema, rs.getString(\\\"TABLE_SCHEM\\\"));\\n                assertEquals(\\\"TABLE_NAME\\\",\\n                        table, rs.getString(\\\"TABLE_NAME\\\"));\\n\\n                crossCheckGetColumnRowAndResultSetMetaData(rs, rsmdt);\\n                if (partial)\\n                    break;\\n\\n            }\\n            rst.close();\\n\\n\\n        }\\n        int count \\u003d rs.getRow();\\n        rs.close();\\n        s.close();\\n        return count;\\n    }\"}","80":"{\"expressionStart\":{\"String:%\":1024,\"String:COLUMN_NAME\":1319,\"\\u003cr\\u003e\":1112,\"String:TABLE_NAME\":1182,\"Arrays.sort()\":765,\"String\":2063,\"ResultSet.next()\":2023,\"DatabaseMetaDataTest.fail()\":3090,\"int:6\":2271,\"DatabaseMetaData.getColumns()\":2995,\"int:5\":1725,\"Arrays.binarySearch()\":2083,\"int:3\":1990,\"Connection.close()\":2954,\"ResultSet.close()\":1754,\"DatabaseMetaDataTest.assertEquals()\":1683,\"DatabaseCreator.CREATE_TABLE1.substring()\":1947,\"int:1\":1200,\"int:0\":848,\"{int}\":539,\"ResultSet.getInt()\":1596,\"DatabaseMetaDataTest.assertTrue()\":1079,\"String:\":506,\"ResultSet.getString()\":2139,\"String:id\":420,\"{String}\":419,\"String:SQLException not thrown\":3095,\"null:null\":3017,\"\\u003ca\\u003e\":2190,\"String:NULLABLE\":1606,\"String:IS_NULLABLE\":1463,\"SQLException.getMessage()\":1846},\"expressionEnd\":{\"String:%\":1027,\"String:COLUMN_NAME\":1332,\"\\u003cr\\u003e\":1201,\"String:TABLE_NAME\":1194,\"Arrays.sort()\":789,\"String\":2081,\"ResultSet.next()\":2032,\"DatabaseMetaDataTest.fail()\":3121,\"int:6\":2272,\"DatabaseMetaData.getColumns()\":3076,\"int:5\":1726,\"Arrays.binarySearch()\":2166,\"int:3\":1991,\"Connection.close()\":2966,\"ResultSet.close()\":1764,\"DatabaseMetaDataTest.assertEquals()\":1740,\"DatabaseCreator.CREATE_TABLE1.substring()\":1992,\"int:1\":1201,\"int:0\":849,\"{int}\":693,\"ResultSet.getInt()\":1617,\"DatabaseMetaDataTest.assertTrue()\":1202,\"String:\":508,\"ResultSet.getString()\":2165,\"String:id\":424,\"{String}\":463,\"String:SQLException not thrown\":3120,\"null:null\":3021,\"\\u003ca\\u003e\":2201,\"String:NULLABLE\":1616,\"String:IS_NULLABLE\":1476,\"SQLException.getMessage()\":1860},\"rawCode\":\"/**\\n     * java.sql.DatabaseMetaData #getColumns(java.lang.String,\\n     *        java.lang.String, java.lang.String, java.lang.String)\\n     *\\n     */\\n    @KnownFailure(\\\"Wildcard operator does not seem wo work correctly.\\\")\\n    public void test_getColumnsSpecific() throws SQLException {\\n        String[] tablesName \\u003d {\\n                DatabaseCreator.TEST_TABLE1, DatabaseCreator.TEST_TABLE3};\\n        String[] fields \\u003d {\\\"id\\\", \\\"field1\\\", \\\"field2\\\", \\\"field3\\\", \\\"fkey\\\"};\\n        String[] nullable \\u003d {\\\"YES\\\", \\\"NO\\\",\\\"\\\"};\\n        int[] nullableInt \\u003d {\\n                DatabaseMetaData.columnNoNulls,\\n                DatabaseMetaData.columnNullable,\\n                DatabaseMetaData.columnNullableUnknown};\\n        Arrays.sort(tablesName);\\n        Arrays.sort(fields);\\n        Arrays.sort(nullableInt);\\n        Arrays.sort(nullable);\\n        int countSingle \\u003d 0;\\n        int countAll1 \\u003d 0;\\n        int countAll2 \\u003d 0;\\n\\n        try {\\n            ResultSet rs \\u003d meta.getColumns(null, null,\\n                    DatabaseCreator.TEST_TABLE1, \\\"%\\\");\\n\\n            while (rs.next()) {\\n                assertTrue(\\\"Invalid table name\\\", Arrays.binarySearch(\\n                        tablesName, rs.getString(\\\"TABLE_NAME\\\")) \\u003e -1);\\n                assertTrue(\\\"Invalid field name\\\", Arrays.binarySearch(fields, rs\\n                        .getString(\\\"COLUMN_NAME\\\")) \\u003e -1);\\n                assertTrue(\\\"Invalid nullable value\\\", Arrays.binarySearch(\\n                        nullable, rs.getString(\\\"IS_NULLABLE\\\")) \\u003e -1);\\n                assertTrue(\\\"Invalid nullable code\\\", Arrays.binarySearch(\\n                        nullableInt, rs.getInt(\\\"NULLABLE\\\")) \\u003e -1);\\n                countSingle++;\\n            }\\n            assertEquals(\\\"Not all results are found\\\", 5, countSingle);\\n            rs.close();\\n\\n        } catch (SQLException e) {\\n            fail(\\\"Unexpected exception: \\\" + e.getMessage());\\n        }\\n\\n        try {\\n            ResultSet rs \\u003d meta.getColumns(null, null, \\\"%\\\"+DatabaseCreator.CREATE_TABLE1.substring(0, 3)+\\\"%\\\",\\\"%\\\" );\\n            while (rs.next()) {\\n                assertTrue(\\\"Wrong table name\\\", Arrays.binarySearch(tablesName,\\n                        rs.getString(\\\"TABLE_NAME\\\")) \\u003e -1);\\n                countAll1++;\\n            }\\n            assertEquals(\\\"Not all results are found\\\", 6, countAll1);\\n            rs.close();\\n\\n        } catch (SQLException e) {\\n            fail(\\\"Unexpected exception: \\\" + e.getMessage());\\n        }\\n\\n        try {\\n            ResultSet rs \\u003d meta.getColumns(null, null, \\\"%TEST_%\\\", \\\"%\\\");\\n\\n            while (rs.next()) {\\n                assertTrue(\\\"Wrong table name\\\", Arrays.binarySearch(tablesName,\\n                        rs.getString(\\\"TABLE_NAME\\\")) \\u003e -1);\\n                countAll2++;\\n            }\\n            assertEquals(\\\"Not all results are found\\\", 6, countAll2);\\n            rs.close();\\n\\n        } catch (SQLException e) {\\n            fail(\\\"Unexpected exception: \\\" + e.getMessage());\\n        }\\n\\n     // Exception checking\\n        conn.close();\\n\\n        try {\\n            meta.getColumns(null, null,\\n                    DatabaseCreator.TEST_TABLE1, \\\"%\\\");\\n            fail(\\\"SQLException not thrown\\\");\\n        } catch (SQLException e) {\\n            // ok\\n        }\\n\\n\\n    }\"}","81":"{\"expressionStart\":{\"String:TABLE_SCHEM\":1052,\"String:%\":2535,\"\\u003cr\\u003e\":874,\"String:TABLE_NAME\":940,\"Arrays.sort()\":585,\"String\":1016,\"DatabaseMetaDataTest.assertFalse()\":2312,\"DatabaseMetaDataTest.assertNull()\":1995,\"Connection.getCatalog()\":1467,\"ResultSet.next()\":2345,\"DatabaseMetaDataTest.fail()\":3159,\"Arrays.binarySearch()\":874,\"DatabaseMetaDataTest.assertEquals()\":2926,\"Connection.close()\":3063,\"ResultSet.close()\":2365,\"int:1\":958,\"String:TABLE_TYPE\":1207,\"DatabaseMetaDataTest.assertTrue()\":1110,\"String:\":1281,\"DatabaseMetaData.getTables()\":2508,\"ResultSet.getString()\":1285,\"{String}\":1511,\"String:REMARKS\":1298,\"String:SQLException not thrown\":3164,\"null:null\":2529,\"String:TABLE\":559},\"expressionEnd\":{\"String:TABLE_SCHEM\":1065,\"String:%\":2538,\"\\u003cr\\u003e\":959,\"String:TABLE_NAME\":952,\"Arrays.sort()\":608,\"String\":1038,\"DatabaseMetaDataTest.assertFalse()\":2355,\"DatabaseMetaDataTest.assertNull()\":2086,\"Connection.getCatalog()\":1484,\"ResultSet.next()\":2354,\"DatabaseMetaDataTest.fail()\":3190,\"Arrays.binarySearch()\":954,\"DatabaseMetaDataTest.assertEquals()\":2994,\"Connection.close()\":3075,\"ResultSet.close()\":2375,\"int:1\":959,\"String:TABLE_TYPE\":1219,\"DatabaseMetaDataTest.assertTrue()\":1227,\"String:\":1283,\"DatabaseMetaData.getTables()\":2545,\"ResultSet.getString()\":1308,\"{String}\":1564,\"String:REMARKS\":1307,\"String:SQLException not thrown\":3189,\"null:null\":2533,\"String:TABLE\":566},\"rawCode\":\"/**\\n     * java.sql.DatabaseMetaData #getTables(java.lang.String,\\n     *        java.lang.String, java.lang.String, java.lang.String[])\\n     */\\n    @KnownFailure(\\\"If no schema is associated: returns empty string where actually null be returned?. Ticket 98\\\")\\n    public void test_getTablesLjava_lang_StringLjava_lang_StringLjava_lang_String$Ljava_lang_String()\\n            throws SQLException {\\n        String[] tablesName \\u003d {\\n                VIEW_NAME, DatabaseCreator.TEST_TABLE1,\\n                DatabaseCreator.TEST_TABLE3};\\n        String[] tablesType \\u003d {\\\"TABLE\\\", \\\"VIEW\\\"};\\n        Arrays.sort(tablesName);\\n        Arrays.sort(tablesType);\\n\\n        // case 1. get all tables. There are two tables and one view in the\\n        // database\\n        ResultSet rs \\u003d meta.getTables(null, null, null, null);\\n        while (rs.next()) {\\n            assertTrue(\\\"Wrong table name\\\", Arrays.binarySearch(tablesName, rs\\n                    .getString(\\\"TABLE_NAME\\\")) \\u003e -1);\\n        //No Schema associated\\n            assertNull(\\\"Wrong table schema: \\\"+rs.getString(\\\"TABLE_SCHEM\\\"), rs.getString(\\\"TABLE_SCHEM\\\"));\\n            assertTrue(\\\"Wrong table type\\\", Arrays.binarySearch(tablesType, rs\\n                    .getString(\\\"TABLE_TYPE\\\")) \\u003e -1);\\n            assertEquals(\\\"Wrong parameter REMARKS\\\", \\\"\\\", rs.getString(\\\"REMARKS\\\"));\\n        }\\n        rs.close();\\n\\n        // case 2. get tables with specified types. There are no tables of such\\n        // types\\n        rs \\u003d meta.getTables(conn.getCatalog(), null, null, new String[] {\\n                \\\"SYSTEM TABLE\\\", \\\"LOCAL TEMPORARY\\\" });\\n        assertFalse(\\\"Some tables exist\\\", rs.next());\\n        rs.close();\\n\\n        // case 3. get tables with specified types. There is a table of such\\n        // types\\n        rs \\u003d meta.getTables(conn.getCatalog(), null, null, new String[] {\\n                \\\"VIEW\\\", \\\"LOCAL TEMPORARY\\\" });\\n\\n        assertTrue(\\\"No tables exist\\\", rs.next());\\n        assertEquals(\\\"Wrong table name\\\", VIEW_NAME, rs.getString(\\\"TABLE_NAME\\\"));\\n        assertNull(\\\"Wrong table schema: \\\"+rs.getString(\\\"TABLE_SCHEM\\\"), rs.getString(\\\"TABLE_SCHEM\\\"));\\n        assertEquals(\\\"Wrong table type\\\", \\\"VIEW\\\", rs.getString(\\\"TABLE_TYPE\\\"));\\n        assertEquals(\\\"Wrong parameter REMARKS\\\", \\\"\\\", rs.getString(\\\"REMARKS\\\"));\\n        assertFalse(\\\"Wrong size of result set\\\", rs.next());\\n        assertFalse(\\\"Some tables exist\\\", rs.next());\\n        rs.close();\\n\\n        // case 4. get all tables using tables pattern.\\n        // There are two tables and one view in the database\\n        rs \\u003d meta.getTables(null, null, \\\"%\\\", null);\\n\\n        while (rs.next()) {\\n            assertTrue(\\\"Wrong table name\\\", Arrays.binarySearch(tablesName, rs\\n                    .getString(\\\"TABLE_NAME\\\")) \\u003e -1);\\n            assertNull(\\\"Wrong table schema \\\", rs.getString(\\\"TABLE_SCHEM\\\"));\\n            assertTrue(\\\"Wrong table type\\\", Arrays.binarySearch(tablesType, rs\\n                    .getString(\\\"TABLE_TYPE\\\")) \\u003e -1);\\n            assertEquals(\\\"Wrong parameter REMARKS\\\", \\\"\\\", rs.getString(\\\"REMARKS\\\"));\\n        }\\n        rs.close();\\n\\n\\n      //Exception checking\\n        conn.close();\\n\\n         try {\\n             meta.getTables(null, null, null, null);\\n             fail(\\\"SQLException not thrown\\\");\\n         } catch (SQLException e) {\\n             //ok\\n         }\\n\\n    }\"}","82":"{\"expressionStart\":{\"String:TABLE_SCHEM\":702,\"String:COLUMN_NAME\":747,\"String:TABLE_CAT\":689,\"String:TABLE_NAME\":717,\"\\u003cr\\u003e\":810,\"UNKNOWN.toLowerCase()\":1021,\"String\":1101,\"Connection.getCatalog()\":1002,\"ResultSet.next()\":542,\"DatabaseMetaDataTest.fail()\":1830,\"ResultSetMetaData.getColumnCount()\":572,\"int:6\":647,\"DatabaseMetaData.getPrimaryKeys()\":1721,\"ResultSet.getShort()\":1478,\"ResultSetMetaData.getColumnName()\":897,\"DatabaseMetaDataTest.assertEquals()\":1433,\"Connection.close()\":1678,\"ResultSet.close()\":1630,\"int:1\":807,\"String:PK_NAME\":773,\"DatabaseMetaDataTest.assertTrue()\":510,\"String:KEY_SEQ\":762,\"String:\":1127,\"ResultSet.getString()\":1131,\"String:Incorrect number of columns\":616,\"ResultSet.getMetaData()\":484,\"String:Incorrect column name\":852,\"String:id\":1358,\"{String}\":687,\"String:SQLException not thrown\":1835,\"String[].arrayget()\":877,\"null:null\":1760,\"\\u003ca\\u003e\":820},\"expressionEnd\":{\"String:TABLE_SCHEM\":715,\"String:COLUMN_NAME\":760,\"String:TABLE_CAT\":700,\"String:TABLE_NAME\":729,\"\\u003cr\\u003e\":818,\"UNKNOWN.toLowerCase()\":1077,\"String\":1125,\"Connection.getCatalog()\":1019,\"ResultSet.next()\":551,\"DatabaseMetaDataTest.fail()\":1861,\"ResultSetMetaData.getColumnCount()\":593,\"int:6\":648,\"DatabaseMetaData.getPrimaryKeys()\":1815,\"ResultSet.getShort()\":1500,\"ResultSetMetaData.getColumnName()\":939,\"DatabaseMetaDataTest.assertEquals()\":1501,\"Connection.close()\":1690,\"ResultSet.close()\":1640,\"int:1\":808,\"String:PK_NAME\":782,\"DatabaseMetaDataTest.assertTrue()\":552,\"String:KEY_SEQ\":771,\"String:\":1129,\"ResultSet.getString()\":1175,\"String:Incorrect number of columns\":645,\"ResultSet.getMetaData()\":500,\"String:Incorrect column name\":875,\"String:id\":1362,\"{String}\":784,\"String:SQLException not thrown\":1860,\"String[].arrayget()\":895,\"null:null\":1764,\"\\u003ca\\u003e\":823},\"rawCode\":\"/**\\n     * java.sql.DatabaseMetaData #getPrimaryKeys(java.lang.String,\\n     *        java.lang.String, java.lang.String)\\n     */\\n    @KnownFailure(\\\" Ticket 91 : relies on not supported features: getCatalog, keys\\\")\\n    public void test_getPrimaryKeysLjava_lang_StringLjava_lang_StringLjava_lang_String()\\n            throws SQLException {\\n        ResultSet rs \\u003d meta.getPrimaryKeys(conn.getCatalog(), null,\\n                DatabaseCreator.TEST_TABLE1);\\n        ResultSetMetaData rsmd \\u003d rs.getMetaData();\\n        assertTrue(\\\"Rows not obtained\\\", rs.next());\\n        int col \\u003d rsmd.getColumnCount();\\n        assertEquals(\\\"Incorrect number of columns\\\", 6, col);\\n        String[] columnNames \\u003d { \\\"TABLE_CAT\\\", \\\"TABLE_SCHEM\\\", \\\"TABLE_NAME\\\",\\n                \\\"COLUMN_NAME\\\", \\\"KEY_SEQ\\\", \\\"PK_NAME\\\" };\\n        for (int c \\u003d 1; c \\u003c\\u003d col; ++c) {\\n            assertEquals(\\\"Incorrect column name\\\", columnNames[c - 1], rsmd\\n                    .getColumnName(c));\\n        }\\n        assertEquals(\\\"Incorrect table catalogue\\\", conn.getCatalog(), rs\\n                .getString(\\\"TABLE_CAT\\\").toLowerCase());\\n        assertEquals(\\\"Incorrect table schema\\\", \\\"\\\", rs\\n                .getString(\\\"TABLE_SCHEM\\\"));\\n        assertEquals(\\\"Incorrect table name\\\", DatabaseCreator.TEST_TABLE1, rs\\n                .getString(\\\"TABLE_NAME\\\").toLowerCase());\\n        assertEquals(\\\"Incorrect column name\\\", \\\"id\\\", rs.getString(\\\"COLUMN_NAME\\\")\\n                .toLowerCase());\\n        assertEquals(\\\"Incorrect sequence number\\\", 1, rs.getShort(\\\"KEY_SEQ\\\"));\\n        assertEquals(\\\"Incorrect primary key name\\\", \\\"primary\\\", rs.getString(\\n                \\\"PK_NAME\\\").toLowerCase());\\n        rs.close();\\n\\n      //Exception checking\\n        conn.close();\\n\\n         try {\\n             meta.getPrimaryKeys(conn.getCatalog(), null,\\n                     DatabaseCreator.TEST_TABLE1);\\n             fail(\\\"SQLException not thrown\\\");\\n         } catch (SQLException e) {\\n             //ok\\n         }\\n    }\"}","83":"{\"expressionStart\":{\"\\u003cr\\u003e\":1199,\"String:UPDATE_RULE\":1088,\"String\":2057,\"DatabaseMetaDataTest.assertNull()\":2911,\"String:FKTABLE_SCHEM\":1011,\"Connection.getCatalog()\":3621,\"ResultSet.next()\":751,\"DatabaseMetaDataTest.fail()\":3422,\"ResultSetMetaData.getColumnCount()\":781,\"String:FKCOLUMN_NAME\":1044,\"String:DEFERRABILITY\":1156,\"ResultSet.getShort()\":3085,\"ResultSetMetaData.getColumnName()\":1286,\"DatabaseMetaDataTest.assertEquals()\":1919,\"Connection.close()\":3557,\"ResultSet.close()\":3149,\"String:FKTABLE_CAT\":980,\"int:1\":1196,\"String:PKTABLE_CAT\":899,\"String:PK_NAME\":1129,\"String:PKTABLE_SCHEM\":914,\"String:PKCOLUMN_NAME\":963,\"DatabaseMetaDataTest.assertTrue()\":716,\"String:PKTABLE_NAME\":947,\"String:KEY_SEQ\":1061,\"String:FK_NAME\":1118,\"String:\":1566,\"ResultSet.getString()\":1477,\"ResultSet.getMetaData()\":690,\"String:Incorrect number of columns\":825,\"String:Incorrect column name\":1241,\"{String}\":897,\"String:SQLException not thrown\":3427,\"String:DELETE_RULE\":1103,\"String[].arrayget()\":1266,\"null:null\":3640,\"DatabaseMetaData.getCrossReference()\":3598,\"\\u003ca\\u003e\":1209,\"int:14\":856,\"String:FKTABLE_NAME\":1028},\"expressionEnd\":{\"\\u003cr\\u003e\":1207,\"String:UPDATE_RULE\":1101,\"String\":2093,\"DatabaseMetaDataTest.assertNull()\":2976,\"String:FKTABLE_SCHEM\":1026,\"Connection.getCatalog()\":3638,\"ResultSet.next()\":760,\"DatabaseMetaDataTest.fail()\":3453,\"ResultSetMetaData.getColumnCount()\":802,\"String:FKCOLUMN_NAME\":1059,\"String:DEFERRABILITY\":1171,\"ResultSet.getShort()\":3138,\"ResultSetMetaData.getColumnName()\":1328,\"DatabaseMetaDataTest.assertEquals()\":2034,\"Connection.close()\":3569,\"ResultSet.close()\":3159,\"String:FKTABLE_CAT\":993,\"int:1\":1197,\"String:PKTABLE_CAT\":912,\"String:PK_NAME\":1138,\"String:PKTABLE_SCHEM\":929,\"String:PKCOLUMN_NAME\":978,\"DatabaseMetaDataTest.assertTrue()\":761,\"String:PKTABLE_NAME\":961,\"String:KEY_SEQ\":1070,\"String:FK_NAME\":1127,\"String:\":1568,\"ResultSet.getString()\":1504,\"ResultSet.getMetaData()\":706,\"String:Incorrect number of columns\":854,\"String:Incorrect column name\":1264,\"{String}\":1173,\"String:SQLException not thrown\":3452,\"String:DELETE_RULE\":1116,\"String[].arrayget()\":1284,\"null:null\":3644,\"DatabaseMetaData.getCrossReference()\":3768,\"\\u003ca\\u003e\":1212,\"int:14\":858,\"String:FKTABLE_NAME\":1042},\"rawCode\":\"/**\\n     * java.sql.DatabaseMetaData #getCrossReference(java.lang.String,\\n     *        java.lang.String, java.lang.String, java.lang.String,\\n     *        java.lang.String, java.lang.String)\\n     */\\n    @KnownFailure(\\\"(Ticket 91) Tables apply foreign key constraint. Catalogs not supported\\\")\\n    public void test_getCrossReferenceLjava_lang_StringLjava_lang_StringLjava_lang_StringLjava_lang_StringLjava_lang_StringLjava_lang_String()\\n            throws SQLException {\\n        ResultSet rs \\u003d meta.getCrossReference(conn.getCatalog(), null,\\n                DatabaseCreator.TEST_TABLE3, conn.getCatalog(), null,\\n                DatabaseCreator.TEST_TABLE1);\\n        ResultSetMetaData rsmd \\u003d rs.getMetaData();\\n        assertTrue(\\\"Rows do not obtained\\\", rs.next());\\n        int col \\u003d rsmd.getColumnCount();\\n        assertEquals(\\\"Incorrect number of columns\\\", 14, col);\\n        String[] columnNames \\u003d { \\\"PKTABLE_CAT\\\", \\\"PKTABLE_SCHEM\\\",\\n                \\\"PKTABLE_NAME\\\", \\\"PKCOLUMN_NAME\\\", \\\"FKTABLE_CAT\\\",\\n                \\\"FKTABLE_SCHEM\\\", \\\"FKTABLE_NAME\\\", \\\"FKCOLUMN_NAME\\\", \\\"KEY_SEQ\\\",\\n                \\\"UPDATE_RULE\\\", \\\"DELETE_RULE\\\", \\\"FK_NAME\\\", \\\"PK_NAME\\\",\\n                \\\"DEFERRABILITY\\\" };\\n        for (int c \\u003d 1; c \\u003c\\u003d col; ++c) {\\n            assertEquals(\\\"Incorrect column name\\\", columnNames[c - 1], rsmd\\n                    .getColumnName(c));\\n        }\\n//      TODO getCatalog is not supported\\n        assertEquals(\\\"Incorrect primary key table catalog\\\", conn.getCatalog(),\\n                rs.getString(\\\"PKTABLE_CAT\\\"));\\n        assertEquals(\\\"Incorrect primary key table schema\\\", \\\"\\\", rs\\n                .getString(\\\"PKTABLE_SCHEM\\\"));\\n        assertEquals(\\\"Incorrect primary key table name\\\",\\n                DatabaseCreator.TEST_TABLE3, rs.getString(\\\"PKTABLE_NAME\\\"));\\n        assertEquals(\\\"Incorrect primary key column name\\\", \\\"fkey\\\", rs\\n                .getString(\\\"PKCOLUMN_NAME\\\"));\\n        // TODO getCatalog is not supported\\n        assertEquals(\\\"Incorrect foreign key table catalog\\\", conn.getCatalog(),\\n                rs.getString(\\\"FKTABLE_CAT\\\"));\\n        assertEquals(\\\"Incorrect foreign key table schema\\\", \\\"\\\", rs\\n                .getString(\\\"FKTABLE_SCHEM\\\"));\\n        assertEquals(\\\"Incorrect foreign key table name\\\",\\n                DatabaseCreator.TEST_TABLE1, rs.getString(\\\"FKTABLE_NAME\\\"));\\n        assertEquals(\\\"Incorrect foreign key column name\\\", \\\"fk\\\", rs\\n                .getString(\\\"FKCOLUMN_NAME\\\"));\\n        assertEquals(\\\"Incorrect sequence number within foreign key\\\", 1, rs\\n                .getShort(\\\"KEY_SEQ\\\"));\\n        assertEquals(\\\"Incorrect update rule value\\\",\\n                DatabaseMetaData.importedKeyNoAction, rs\\n                        .getShort(\\\"UPDATE_RULE\\\"));\\n        assertEquals(\\\"Incorrect delete rule value\\\",\\n                DatabaseMetaData.importedKeyNoAction, rs\\n                        .getShort(\\\"DELETE_RULE\\\"));\\n        assertNull(\\\"Incorrect foreign key name\\\", rs.getString(\\\"FK_NAME\\\"));\\n        assertNull(\\\"Incorrect primary key name\\\", rs.getString(\\\"PK_NAME\\\"));\\n        assertEquals(\\\"Incorrect deferrability\\\",\\n                DatabaseMetaData.importedKeyNotDeferrable, rs\\n                        .getShort(\\\"DEFERRABILITY\\\"));\\n        rs.close();\\n\\n     // Exception checking\\n        conn.close();\\n\\n        try {\\n            meta.getCrossReference(conn.getCatalog(), null,\\n                    DatabaseCreator.TEST_TABLE3, conn.getCatalog(), null,\\n                    DatabaseCreator.TEST_TABLE1);\\n            fail(\\\"SQLException not thrown\\\");\\n        } catch (SQLException e) {\\n            // ok\\n        }\\n\\n        // Exception checking\\n        conn.close();\\n\\n        try {\\n            meta.getCrossReference(conn.getCatalog(), null,\\n                    DatabaseCreator.TEST_TABLE3, conn.getCatalog(), null,\\n                    DatabaseCreator.TEST_TABLE1);\\n            fail(\\\"SQLException not thrown\\\");\\n        } catch (SQLException e) {\\n            // ok\\n        }\\n    }\"}","84":"{\"expressionStart\":{\"String.equals()\":445,\"ResultSet.close()\":801,\"Statement.execute()\":697,\"DatabaseMetaData.getTables()\":96,\"null:null\":111,\"ResultSet.getString()\":224,\"String:TABLE_NAME\":242,\"Connection.getMetaData()\":1043,\"String\":1131,\"SQLException.toString()\":1160,\"ResultSet.next()\":163,\"DatabaseMetaDataTest.fail()\":1126},\"expressionEnd\":{\"String.equals()\":523,\"ResultSet.close()\":816,\"Statement.execute()\":731,\"DatabaseMetaData.getTables()\":134,\"null:null\":115,\"ResultSet.getString()\":255,\"String:TABLE_NAME\":254,\"Connection.getMetaData()\":1061,\"String\":1157,\"SQLException.toString()\":1172,\"ResultSet.next()\":177,\"DatabaseMetaDataTest.fail()\":1173},\"rawCode\":\"private void createTestTables() {\\n                try {\\n                    ResultSet userTab \\u003d meta.getTables(null, null, null, null);\\n                    while (userTab.next()) {\\n                        String tableName \\u003d userTab.getString(\\\"TABLE_NAME\\\");\\n                        if (tableName.equals(DatabaseCreator.TEST_TABLE1)) {\\n                            statement.execute(DatabaseCreator.DROP_TABLE1);\\n                        } else if (tableName\\n                                .equals(DatabaseCreator.TEST_TABLE3)) {\\n                            statement.execute(DatabaseCreator.DROP_TABLE3);\\n                        } else if (tableName.equals(VIEW_NAME)) {\\n                            statement.execute(DROP_VIEW_QUERY);\\n                        }\\n                    }\\n                    userTab.close();\\n                    statement.execute(DatabaseCreator.CREATE_TABLE3);\\n                    statement.execute(DatabaseCreator.CREATE_TABLE1);\\n                    statement.execute(CREATE_VIEW_QUERY);\\n                    meta \\u003d conn.getMetaData();\\n                } catch (SQLException e) {\\n                    fail(\\\"Unexpected SQLException \\\" + e.toString());\\n                }\\n            }\"}","85":"{\"expressionStart\":{\"String:DATA_TYPE\":1407,\"String:TABLE_SCHEM\":979,\"String:COLUMN_NAME\":1130,\"String:TABLE_CAT\":866,\"\\u003cr\\u003e\":2298,\"String:TABLE_NAME\":1092,\"String\":5066,\"DatabaseMetaDataTest.assertFalse()\":5359,\"DatabaseMetaDataTest.assertNull()\":4954,\"DatabaseMetaDataTest.fail()\":4721,\"ResultSetMetaData.getColumnTypeName()\":2797,\"ResultSet.wasNull()\":5142,\"ResultSet.getShort()\":5089,\"ResultSetMetaData.getColumnType()\":2244,\"ResultSetMetaData.getColumnName()\":1161,\"DatabaseMetaDataTest.assertEquals()\":4319,\"ResultSetMetaData.isAutoIncrement()\":5259,\"ResultSetMetaData.getCatalogName()\":826,\"int:0\":5086,\"ResultSet.getInt()\":3039,\"ResultSetMetaData.getTableName()\":1054,\"String:TYPE_NAME\":1502,\"DatabaseMetaDataTest.assertTrue()\":5131,\"ResultSetMetaData.getSchemaName()\":940,\"String:\":4157,\"ResultSet.getString()\":4496,\"String:REMARKS\":4146,\"ResultSetMetaData.isNullable()\":4029,\"String:NULLABLE\":4001,\"String:ORDINAL_POSITION\":744,\"String:IS_NULLABLE\":4332},\"expressionEnd\":{\"String:DATA_TYPE\":1418,\"String:TABLE_SCHEM\":992,\"String:COLUMN_NAME\":1143,\"String:TABLE_CAT\":877,\"\\u003cr\\u003e\":2328,\"String:TABLE_NAME\":1104,\"String\":5084,\"DatabaseMetaDataTest.assertFalse()\":5384,\"DatabaseMetaDataTest.assertNull()\":5008,\"DatabaseMetaDataTest.fail()\":4770,\"ResultSetMetaData.getColumnTypeName()\":2825,\"ResultSet.wasNull()\":5154,\"ResultSet.getShort()\":5120,\"ResultSetMetaData.getColumnType()\":2268,\"ResultSetMetaData.getColumnName()\":1185,\"DatabaseMetaDataTest.assertEquals()\":4381,\"ResultSetMetaData.isAutoIncrement()\":5285,\"ResultSetMetaData.getCatalogName()\":851,\"int:0\":5087,\"ResultSet.getInt()\":3061,\"ResultSetMetaData.getTableName()\":1077,\"String:TYPE_NAME\":1513,\"DatabaseMetaDataTest.assertTrue()\":5155,\"ResultSetMetaData.getSchemaName()\":964,\"String:\":4159,\"ResultSet.getString()\":4523,\"String:REMARKS\":4155,\"ResultSetMetaData.isNullable()\":4050,\"String:NULLABLE\":4011,\"String:ORDINAL_POSITION\":762,\"String:IS_NULLABLE\":4345},\"rawCode\":\"/**\\n     * * Test Method from Apache Derby Project\\n     * Class\\n     * org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest\\n     *\\n     * Cross check a single row from getColumns() with ResultSetMetaData\\n     * for a SELECT * from the same table.\\n     * @param rs ResultSet from getColumns already positioned on the row.\\n     * @param rsmdt ResultSetMetaData for the SELECT *\\n     * @param odbc 0 for JDBC call, 1 for ODBC. Needed to allow for difference\\n     *    in using BUFFER_LENGTH (ODBC) or no(JDBC).\\n     * @throws SQLException\\n     */\\n    public static void crossCheckGetColumnRowAndResultSetMetaData(\\n            ResultSet rs, ResultSetMetaData rsmdt)\\n        throws SQLException\\n    {\\n        int col \\u003d rs.getInt(\\\"ORDINAL_POSITION\\\");\\n\\n        assertEquals(\\\"RSMD.getCatalogName\\\",\\n                rsmdt.getCatalogName(col), rs.getString(\\\"TABLE_CAT\\\"));\\n        assertEquals(\\\"RSMD.getSchemaName\\\",\\n                rsmdt.getSchemaName(col), rs.getString(\\\"TABLE_SCHEM\\\"));\\n        assertEquals(\\\"RSMD.getTableName\\\",\\n                rsmdt.getTableName(col), rs.getString(\\\"TABLE_NAME\\\"));\\n\\n        assertEquals(\\\"COLUMN_NAME\\\",\\n                rsmdt.getColumnName(col), rs.getString(\\\"COLUMN_NAME\\\"));\\n\\n        // DERBY-2285 BOOLEAN columns appear different on\\n        // network client.\\n        // meta returns BOOLEAN\\n        // RSMD returns SMALLINT\\n        int metaColumnType \\u003d rs.getInt(\\\"DATA_TYPE\\\");\\n        if (metaColumnType \\u003d\\u003d Types.BOOLEAN )\\n        {\\n            assertEquals(\\\"TYPE_NAME\\\",\\n                    \\\"BOOLEAN\\\", rs.getString(\\\"TYPE_NAME\\\"));\\n            assertEquals(\\\"TYPE_NAME\\\",\\n                    \\\"SMALLINT\\\", rsmdt.getColumnTypeName(col));\\n\\n            assertEquals(\\\"DATA_TYPE\\\",\\n                    Types.SMALLINT, rsmdt.getColumnType(col));\\n        }\\n        else if (metaColumnType \\u003d\\u003d Types.JAVA_OBJECT)\\n        {\\n            // meta returns JAVA_OBJECT\\n            // RSMD returns LONGVARBINARY!\\n            assertEquals(\\\"DATA_TYPE\\\",\\n                    Types.LONGVARBINARY, rsmdt.getColumnType(col));\\n        }\\n        else if (metaColumnType \\u003d\\u003d Types.VARBINARY )\\n        {\\n            // meta returns different type name to RSMD\\n            assertEquals(\\\"DATA_TYPE\\\",\\n                    Types.VARBINARY, rsmdt.getColumnType(col));\\n        }\\n        else if (metaColumnType \\u003d\\u003d Types.BINARY )\\n        {\\n            // meta returns different type name to RSMD\\n            assertEquals(\\\"DATA_TYPE\\\",\\n                    Types.BINARY, rsmdt.getColumnType(col));\\n        }\\n        else if (metaColumnType \\u003d\\u003d Types.NUMERIC )\\n        {\\n            // DERBY-584 inconsistency in numeric \\u0026 decimal\\n            assertEquals(\\\"DATA_TYPE\\\",\\n                    Types.DECIMAL, rsmdt.getColumnType(col));\\n\\n            assertEquals(\\\"TYPE_NAME\\\",\\n                    \\\"DECIMAL\\\", rsmdt.getColumnTypeName(col));\\n\\n            assertEquals(\\\"TYPE_NAME\\\",\\n                    \\\"NUMERIC\\\", rs.getString(\\\"TYPE_NAME\\\"));\\n        }\\n        else\\n        {\\n            assertEquals(\\\"DATA_TYPE\\\",\\n                rsmdt.getColumnType(col), rs.getInt(\\\"DATA_TYPE\\\"));\\n            assertEquals(\\\"TYPE_NAME\\\",\\n                rsmdt.getColumnTypeName(col), rs.getString(\\\"TYPE_NAME\\\"));\\n        }\\n\\n        /*\\n        if (metaColumnType !\\u003d Types.JAVA_OBJECT) {\\n        System.out.println(\\\"TYPE \\\" + rs.getInt(\\\"DATA_TYPE\\\"));\\n        System.out.println(JDBC.escape(schema, table) + \\\" \\\" + rs.getString(\\\"COLUMN_NAME\\\"));\\n        assertEquals(\\\"COLUMN_SIZE\\\",\\n                rsmdt.getPrecision(col), rs.getInt(\\\"COLUMN_SIZE\\\"));\\n        }\\n        */\\n\\n        /*\\n        assertEquals(\\\"DECIMAL_DIGITS\\\",\\n                rsmdt.getScale(col), rs.getInt(\\\"DECIMAL_DIGITS\\\"));\\n        */\\n\\n        // This assumes the constants defined by meta and ResultSet\\n        // for nullability are equal. They are by inspection\\n        // and since they are static final and part of a defined\\n        // api by definition they cannot change. We also\\n        // check statically this is true in the testConstants fixture.\\n        assertEquals(\\\"NULLABLE\\\",\\n                rsmdt.isNullable(col), rs.getInt(\\\"NULLABLE\\\"));\\n\\n        // REMARKS set to empty string by Derby\\n        assertEquals(\\\"REMARKS\\\", \\\"\\\", rs.getString(\\\"REMARKS\\\"));\\n\\n\\n        // IS_NULLABLE\\n        switch (rsmdt.isNullable(col))\\n        {\\n        case ResultSetMetaData.columnNoNulls:\\n            assertEquals(\\\"IS_NULLABLE\\\", \\\"NO\\\", rs.getString(\\\"IS_NULLABLE\\\"));\\n            break;\\n        case ResultSetMetaData.columnNullable:\\n            assertEquals(\\\"IS_NULLABLE\\\", \\\"YES\\\", rs.getString(\\\"IS_NULLABLE\\\"));\\n            break;\\n        case ResultSetMetaData.columnNullableUnknown:\\n            assertEquals(\\\"IS_NULLABLE\\\", \\\"\\\", rs.getString(\\\"IS_NULLABLE\\\"));\\n            break;\\n        default:\\n            fail(\\\"invalid return from rsmdt.isNullable(col)\\\");\\n        }\\n\\n        // SCOPE not supported\\n        assertNull(\\\"SCOPE_CATLOG\\\", rs.getString(\\\"SCOPE_CATLOG\\\"));\\n        assertNull(\\\"SCOPE_SCHEMA\\\", rs.getString(\\\"SCOPE_SCHEMA\\\"));\\n        assertNull(\\\"SCOPE_TABLE\\\", rs.getString(\\\"SCOPE_TABLE\\\"));\\n\\n        // DISTINCT not supported\\n        assertEquals(\\\"SOURCE_DATA_TYPE\\\", 0, rs.getShort(\\\"SOURCE_DATA_TYPE\\\"));\\n        assertTrue(rs.wasNull());\\n\\n        // IS_AUTOINCREMENT added in JDBC 4.0\\n       assertEquals(\\\"IS_AUTOINCREMENT\\\",\\n               rsmdt.isAutoIncrement(col) ? \\\"YES\\\" : \\\"NO\\\",\\n               rs.getString(\\\"IS_AUTOINCREMENT\\\"));\\n       assertFalse(rs.wasNull());\\n    }\"}","86":"{\"expressionStart\":{\"PreparedStatement.clearParameters()\":172,\"ResultSet.getString()\":481,\"PreparedStatement.setInt()\":231,\"Log.error()\":762,\"String\":498,\"ResultSet.next()\":391,\"ContentToJCRCopier.copyCollectionFromCHStoJCR()\":1826,\"ArrayList.\\u003cinit\\u003e\":127,\"List.add()\":656,\"UNKNOWN.endsWith()\":1789,\"PreparedStatement.executeQuery()\":318,\"ResultSet.close()\":709,\"ThingToMigrate.\\u003cinit\\u003e\":436,\"ContentToJCRCopier.copyResourceFromCHStoJCR()\":1921,\"int:1\":275,\"String:/\":1814,\"CHStoJCRMigratorImpl.markContentItemFinished()\":2008,\"ResultSet.getInt()\":533},\"expressionEnd\":{\"PreparedStatement.clearParameters()\":226,\"ResultSet.getString()\":511,\"PreparedStatement.setInt()\":294,\"Log.error()\":808,\"String\":510,\"ResultSet.next()\":404,\"ContentToJCRCopier.copyCollectionFromCHStoJCR()\":1900,\"ArrayList.\\u003cinit\\u003e\":158,\"List.add()\":682,\"UNKNOWN.endsWith()\":1818,\"PreparedStatement.executeQuery()\":369,\"ResultSet.close()\":723,\"ThingToMigrate.\\u003cinit\\u003e\":456,\"ContentToJCRCopier.copyResourceFromCHStoJCR()\":1993,\"int:1\":276,\"String:/\":1817,\"CHStoJCRMigratorImpl.markContentItemFinished()\":2048,\"ResultSet.getInt()\":556},\"rawCode\":\"@SuppressWarnings(\\\"unchecked\\\")\\n\\tprivate void migrateSomeItems(int numberToMigrate)\\n\\t{\\n\\t\\tList\\u003cThingToMigrate\\u003e thingsToMigrate \\u003d new ArrayList\\u003cThingToMigrate\\u003e();\\n\\n\\t\\ttry {\\n\\t\\t\\tnextThingsToMigratePreparedStatement.clearParameters();\\n\\t\\t\\tnextThingsToMigratePreparedStatement.setInt(1, numberToMigrate);\\n\\t\\t\\tResultSet result \\u003d nextThingsToMigratePreparedStatement.executeQuery();\\n\\t\\t\\ttry {\\n\\t\\t\\t\\twhile (result.next()) {\\n\\t\\t\\t\\t\\tThingToMigrate thing \\u003d new ThingToMigrate();\\n\\t\\t\\t\\t\\tthing.contentId \\u003d result.getString(\\\"CONTENT_ID\\\");\\n\\t\\t\\t\\t\\tthing.status \\u003d result.getInt(\\\"STATUS\\\");\\n\\t\\t\\t\\t\\t// TODO TODO TODO The time added\\n\\t\\t\\t\\t\\tthing.eventType \\u003d result.getString(\\\"EVENT_TYPE\\\");\\n\\t\\t\\t\\t\\tthingsToMigrate.add(thing);\\n\\t\\t\\t\\t}\\n\\t\\t\\t} finally {\\n\\t\\t\\t\\tresult.close();\\n\\t\\t\\t}\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tlog.error(\\\"SQL Error Migrating JCR Items.\\\", e);\\n\\t\\t}\\n\\n\\t\\tfor (ThingToMigrate thing : thingsToMigrate)\\n\\t\\t{\\n\\t\\t\\t/*\\n\\t\\t\\t * Leaving this bit of commented out code here for the moment. We\\n\\t\\t\\t * may need to wrap this is a RequestEmulator to deal with SqlServices\\n\\t\\t\\t * occasionally outcry of threads.\\n\\t\\t\\t */\\n\\t\\t\\t\\n\\t\\t\\t//final ThingToMigrate thing2 \\u003d thing;\\n\\t\\t\\t//Thread thread \\u003d new Thread( new Runnable() {\\n\\t\\t\\t//\\tpublic void run() {\\n\\t\\t\\t//\\t\\tmigrateOneItem(jcrSession, thing2);\\n\\t\\t\\t//\\t}\\n\\t\\t\\t//});\\n\\t\\t\\t//thread.start();\\n\\t\\t\\t//CopierRunnable aCopier \\u003d (CopierRunnable) appContext.getBean(\\\"CopierRunnable\\\");\\n\\t\\t\\t//aCopier.setJcrSession(jcrSession);\\n\\t\\t\\t//aCopier.setThing(thing);\\n\\t\\t\\t//Thread thread \\u003d new Thread(aCopier);\\n\\t\\t\\t//thread.start();\\n\\t\\t\\t//while (thread.isAlive()) {\\n\\t\\t//\\t\\tSystem.out.println(\\\"SWG Our migrate thing thread is still alive\\\");\\n\\t\\t//\\t\\ttry {\\n\\t\\t\\t//\\t\\tThread.sleep(1000);\\n\\t\\t\\t//\\t} catch (java.lang.InterruptedException e) {\\n\\t\\t//\\t\\t\\tlog.info(\\\"Unable to sleep while checking if the migrate thread is still alive\\\", e);\\n\\t\\t//\\t\\t}\\n\\t\\t//\\t}\\n\\t\\t\\tif (thing.contentId.endsWith(\\\"/\\\")) {\\n\\t\\t\\t\\tcontentToJCRCopier.copyCollectionFromCHStoJCR(jcrSession, thing.contentId);\\n\\t\\t\\t}\\n\\t\\t\\telse {\\n\\t\\t\\t\\tcontentToJCRCopier.copyResourceFromCHStoJCR(jcrSession, thing.contentId);\\n\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\tmarkContentItemFinished(thing.contentId);\\n\\t\\t}\\n\\t}\"}","87":"{\"expressionStart\":{\"PreparedStatement.setString()\":255,\"ApiTokenDAO.closeDaoResources()\":480,\"ApiTokenDAO.processDaoException()\":404,\"Connection.prepareStatement()\":213,\"PreparedStatement.executeQuery()\":299,\"null:null\":148,\"ResultSet.getString()\":352,\"String\":427,\"ApiTokenDAO.getConnection()\":172,\"\\u003creturn\\u003e\":522,\"int:1\":270,\"ResultSet.next()\":327},\"expressionEnd\":{\"PreparedStatement.setString()\":279,\"ApiTokenDAO.closeDaoResources()\":514,\"ApiTokenDAO.processDaoException()\":461,\"Connection.prepareStatement()\":241,\"PreparedStatement.executeQuery()\":318,\"null:null\":152,\"ResultSet.getString()\":368,\"String\":453,\"ApiTokenDAO.getConnection()\":192,\"\\u003creturn\\u003e\":534,\"int:1\":271,\"ResultSet.next()\":337},\"rawCode\":\"private String get(String field, String query) {\\n\\t\\tConnection conn \\u003d null;\\n\\t\\tPreparedStatement stat \\u003d null;\\n\\t\\tResultSet res \\u003d null;\\n\\t\\tString data \\u003d null;\\n\\t\\ttry {\\n\\t\\t\\tconn \\u003d this.getConnection();\\n            stat \\u003d conn.prepareStatement(query);\\n            stat.setString(1, field);\\n            res \\u003d stat.executeQuery();\\n\\t\\t\\tif (res.next()) {\\n\\t\\t\\t\\tdata \\u003d res.getString(1);\\n\\t\\t\\t}\\n\\t\\t} catch (Throwable t) {\\n\\t\\t\\tprocessDaoException(t, \\\"Error while loading data\\\", \\\"get\\\");\\n\\t\\t} finally {\\n\\t\\t\\tcloseDaoResources(res, stat, conn);\\n\\t\\t}\\n\\t\\treturn data;\\n\\t}\"}","88":"{\"expressionStart\":{\"String:(\":929,\"ResultSet.getString()\":839,\"PreparedStatement.setInt()\":692,\"String\":390,\"\\u003creturn\\u003e\":1394,\"ResultSet.next()\":796,\"ArrayList.\\u003cinit\\u003e\":220,\"DBConn.getConn()\":524,\"ArrayList.add()\":962,\"Connection.prepareStatement()\":648,\"PreparedStatement.executeQuery()\":747,\"ResultSet.close()\":1182,\"String:)\":940,\"DBConn.freeConnection()\":1264,\"int:2\":896,\"int:1\":709,\"\\u003cnullcheck\\u003e\":553,\"PreparedStatement.close()\":1210,\"ResultSet.getInt()\":886,\"SQLException.printStackTrace()\":1358},\"expressionEnd\":{\"String:(\":932,\"ResultSet.getString()\":854,\"PreparedStatement.setInt()\":724,\"String\":481,\"\\u003creturn\\u003e\":1404,\"ResultSet.next()\":805,\"ArrayList.\\u003cinit\\u003e\":235,\"DBConn.getConn()\":536,\"ArrayList.add()\":974,\"Connection.prepareStatement()\":674,\"PreparedStatement.executeQuery()\":771,\"ResultSet.close()\":1192,\"String:)\":943,\"DBConn.freeConnection()\":1287,\"int:2\":897,\"int:1\":710,\"\\u003cnullcheck\\u003e\":565,\"PreparedStatement.close()\":1227,\"ResultSet.getInt()\":898,\"SQLException.printStackTrace()\":1377},\"rawCode\":\"/**look\\n     * 根据finalitemid查询接力的各组部门名\\n     * @param finalitemid \\n     * @return  ArrayList\\n     */\\n    public ArrayList slectRelayInfo(int finalitemid){\\n    \\t//ArrayList trackInfo \\u003d new ArrayList();\\n    \\tArrayList pn \\u003d new ArrayList();\\n    \\t//ArrayList rw \\u003d new ArrayList();\\n    \\tString sql \\u003d \\\"SELECT t_department.departshortname,t_match.runway FROM t_match JOIN t_department ON\\\" +\\n    \\t\\t\\t\\\" t_match.playerid \\u003d t_department.id WHERE t_match.finalitemid \\u003d ? ORDER BY teamnum,runway\\\";\\n\\t    try {\\n            Connection conn \\u003d db.getConn();\\n            if(conn !\\u003d null){\\n            \\tResultSet rs \\u003d null;\\n                PreparedStatement statement \\u003d conn.prepareStatement(sql);\\n                statement.setInt(1, finalitemid);\\n                rs \\u003d statement.executeQuery(); \\n                while(rs.next()){\\n             \\t   String pnum \\u003d rs.getString(1);\\n             \\t   int runway \\u003d rs.getInt(2);\\n             \\t   pnum \\u003d pnum+\\\"(\\\"+runway+\\\")\\\";\\n             \\t   pn.add(pnum);\\n             \\t   //Integer runway \\u003d new Integer(rs.getInt(2));\\n             \\t   //rw.add(runway);\\n                }\\n               // trackInfo.add(pn);\\n               // trackInfo.add(rw);\\n                rs.close();\\n                statement.close();\\n            }\\n        \\n            db.freeConnection(conn);  \\n            }catch (SQLException e) {                 \\n            e.printStackTrace(); } \\n            return pn;\\n    }\"}","89":"{\"expressionStart\":{\"ResultSet.getString()\":746,\"PreparedStatement.setInt()\":541,\"String\":214,\"\\u003creturn\\u003e\":1052,\"HashMap.put()\":779,\"ResultSet.next()\":640,\"DBConn.getConn()\":376,\"Integer.\\u003cinit\\u003e\":684,\"HashMap.\\u003cinit\\u003e\":181,\"Connection.prepareStatement()\":498,\"PreparedStatement.executeQuery()\":592,\"ResultSet.close()\":848,\"DBConn.freeConnection()\":929,\"int:2\":759,\"int:1\":558,\"\\u003cnullcheck\\u003e\":405,\"PreparedStatement.close()\":875,\"SQLException.printStackTrace()\":1023,\"ResultSet.getInt()\":696},\"expressionEnd\":{\"ResultSet.getString()\":761,\"PreparedStatement.setInt()\":570,\"String\":333,\"\\u003creturn\\u003e\":1070,\"HashMap.put()\":811,\"ResultSet.next()\":649,\"DBConn.getConn()\":388,\"Integer.\\u003cinit\\u003e\":709,\"HashMap.\\u003cinit\\u003e\":194,\"Connection.prepareStatement()\":524,\"PreparedStatement.executeQuery()\":616,\"ResultSet.close()\":858,\"DBConn.freeConnection()\":952,\"int:2\":760,\"int:1\":559,\"\\u003cnullcheck\\u003e\":417,\"PreparedStatement.close()\":892,\"SQLException.printStackTrace()\":1042,\"ResultSet.getInt()\":708},\"rawCode\":\"/**word\\n     * 根据运动会id查询部门的id（k） 名称（V）\\n     * @param int  sportsid\\n     * @return  HashMap\\n     */\\n    public HashMap selectDepartmentBySid(int sportsid){\\n    \\tHashMap department \\u003d new HashMap();\\n\\t    String sql \\u003d \\\"SELECT id,departshortname FROM t_department WHERE id IN( SELECT departid FROM t_sports2department WHERE sportsid \\u003d ?)\\\";\\n\\t    try {\\n            Connection conn \\u003d db.getConn();\\n            if(conn !\\u003d null){\\n        \\t   ResultSet rs \\u003d null;\\n               PreparedStatement statement \\u003d conn.prepareStatement(sql);\\n               statement.setInt(1, sportsid);\\n               rs \\u003d statement.executeQuery(); \\n               while(rs.next()){\\n            \\t   Integer depId \\u003d new Integer(rs.getInt(1));\\n            \\t   String shortName \\u003d rs.getString(2);\\n            \\t   department.put(depId, shortName);\\n                  }\\n               rs.close();\\n               statement.close();\\n            }\\n        \\n            db.freeConnection(conn);  \\n            }catch (SQLException e) {                 \\n            e.printStackTrace(); } \\n\\t    return department;\\n    }\"}","90":"{\"expressionStart\":{\"String:\":170,\"ResultSet.getString()\":688,\"PreparedStatement.setInt()\":546,\"String\":282,\"\\u003creturn\\u003e\":944,\"ResultSet.next()\":648,\"DBConn.getConn()\":381,\"Connection.prepareStatement()\":503,\"PreparedStatement.executeQuery()\":600,\"ResultSet.close()\":740,\"DBConn.freeConnection()\":821,\"int:1\":563,\"PreparedStatement.close()\":767,\"\\u003cnullcheck\\u003e\":410,\"SQLException.printStackTrace()\":915},\"expressionEnd\":{\"String:\":172,\"ResultSet.getString()\":703,\"PreparedStatement.setInt()\":578,\"String\":338,\"\\u003creturn\\u003e\":960,\"ResultSet.next()\":657,\"DBConn.getConn()\":393,\"Connection.prepareStatement()\":529,\"PreparedStatement.executeQuery()\":624,\"ResultSet.close()\":750,\"DBConn.freeConnection()\":844,\"int:1\":564,\"PreparedStatement.close()\":784,\"\\u003cnullcheck\\u003e\":422,\"SQLException.printStackTrace()\":934},\"rawCode\":\"/**word\\n     * 根据最终项目表的id查询项目类型\\n     * @param finalItemId\\n     * @return  String\\n     */\\n    public String selectItemTypeByFinId(int finalItemId){\\n    \\tString itemType \\u003d \\\"\\\";\\n\\t    String sql \\u003d \\\"SELECT itemtype FROM t_item WHERE id IN( SELECT itemid FROM t_group2item WHERE\\\" +\\n\\t    \\t\\t\\\" id IN ( SELECT gp2itid FROM t_finalitem WHERE id\\u003d? ))\\\";\\n\\t    try {\\n            Connection conn \\u003d db.getConn();\\n            if(conn !\\u003d null){\\n        \\t   ResultSet rs \\u003d null;\\n               PreparedStatement statement \\u003d conn.prepareStatement(sql);\\n               statement.setInt(1, finalItemId);\\n               rs \\u003d statement.executeQuery(); \\n               while(rs.next()){\\n                \\titemType \\u003d rs.getString(1);\\n                  }\\n               rs.close();\\n               statement.close();\\n            }\\n        \\n            db.freeConnection(conn);  \\n            }catch (SQLException e) {                 \\n            e.printStackTrace(); } \\n\\t    return itemType;\\n    }\"}","91":"{\"expressionStart\":{\"String:\":702,\"ResultSet.getString()\":749,\"PreparedStatement.setInt()\":539,\"String\":274,\"HashMap.put()\":793,\"String:id\":696,\"\\u003creturn\\u003e\":1067,\"ResultSet.next()\":640,\"DBConn.getConn()\":371,\"HashMap.\\u003cinit\\u003e\":190,\"Connection.prepareStatement()\":495,\"ResultSet.close()\":865,\"PreparedStatement.executeQuery()\":591,\"DBConn.freeConnection()\":941,\"String.trim()\":685,\"int:1\":556,\"\\u003cnullcheck\\u003e\":400,\"PreparedStatement.close()\":893,\"ResultSet.getInt()\":686,\"SQLException.printStackTrace()\":1035},\"expressionEnd\":{\"String:\":704,\"ResultSet.getString()\":774,\"PreparedStatement.setInt()\":568,\"String\":331,\"HashMap.put()\":826,\"String:id\":700,\"\\u003creturn\\u003e\":1086,\"ResultSet.next()\":649,\"DBConn.getConn()\":383,\"HashMap.\\u003cinit\\u003e\":203,\"Connection.prepareStatement()\":521,\"ResultSet.close()\":875,\"PreparedStatement.executeQuery()\":615,\"DBConn.freeConnection()\":964,\"String.trim()\":712,\"int:1\":557,\"\\u003cnullcheck\\u003e\":412,\"PreparedStatement.close()\":910,\"ResultSet.getInt()\":701,\"SQLException.printStackTrace()\":1054},\"rawCode\":\"/**\\n     * 根据sportsId查询组别的id与name\\n     * @param sportsId\\n     * @return HashMap\\u003cString,String\\u003e\\n     */\\n    public HashMap slectGroupId2nameBySid(int sportsId){\\n   \\t    HashMap itemId2name \\u003d new HashMap();\\n   \\t    String sql \\u003d \\\"SELECT * FROM t_group WHERE id IN\\\" +\\n   \\t    \\t\\t\\\"(SELECT groupid FROM t_group2sports WHERE sportsid \\u003d ?)\\\";\\n\\t\\ttry {\\n            Connection conn \\u003d db.getConn();\\n            if(conn !\\u003d null){\\n            \\tResultSet rs \\u003d null;\\n                PreparedStatement statement \\u003d conn.prepareStatement(sql);\\n                statement.setInt(1, sportsId);\\n                rs \\u003d statement.executeQuery(); \\n                while(rs.next()){\\n                \\tString itemId \\u003d (rs.getInt(\\\"id\\\")+\\\"\\\").trim();\\n                \\tString itemName \\u003d rs.getString(\\\"groupname\\\");\\n                \\titemId2name.put(itemId, itemName);\\n                   }\\n                rs.close();\\n                statement.close();\\n               }\\n            db.freeConnection(conn);  \\n            }catch (SQLException e) {                 \\n            e.printStackTrace(); } \\n   \\t    return itemId2name;\\n    }\"}","92":"{\"expressionStart\":{\"String:\\u0027\":639,\"\\u003cr\\u003e\":306,\"PreparedStatement.setInt()\":695,\"String\":1253,\"ResultSet.next()\":826,\"ResultSet.getObject()\":1080,\"HashMap.\\u003cinit\\u003e\":67,\"List.get()\":617,\"Track1500PlayerPojo.\\u003cinit\\u003e\":872,\"Track1500PlayerPojo.setTeamnum()\":950,\"List.size()\":310,\"int:2\":978,\"int:1\":705,\"StringBuffer.\\u003cinit\\u003e\":259,\"int:0\":303,\"Map.put()\":1236,\"ResultSet.getInt()\":968,\"Logger.debug()\":1070,\"StringBuffer.setLength()\":752,\"UNKNOWN.getColumnCount()\":781,\"ResultSet.getString()\":928,\"ResultSet.getMetaData()\":781,\"\\u003creturn\\u003e\":1279,\"StringBuffer.toString()\":675,\"ArrayList.\\u003cinit\\u003e\":96,\"List.add()\":1120,\"DBConn.getConn()\":360,\"DataManagerDAO.slectTrack1500Ps()\":137,\"Connection.prepareStatement()\":653,\"PreparedStatement.executeQuery()\":730,\"Track1500PlayerPojo.setPlayerNum()\":908,\"DBConn.freeConnection()\":1146,\"\\u003ca\\u003e\":333,\"StringBuffer.append()\":551,\"Exception.printStackTrace()\":1207},\"expressionEnd\":{\"String:\\u0027\":642,\"\\u003cr\\u003e\":331,\"PreparedStatement.setInt()\":720,\"String\":1268,\"ResultSet.next()\":835,\"ResultSet.getObject()\":1095,\"HashMap.\\u003cinit\\u003e\":80,\"List.get()\":638,\"Track1500PlayerPojo.\\u003cinit\\u003e\":897,\"Track1500PlayerPojo.setTeamnum()\":981,\"List.size()\":331,\"int:2\":979,\"int:1\":706,\"StringBuffer.\\u003cinit\\u003e\":277,\"int:0\":304,\"Map.put()\":1275,\"ResultSet.getInt()\":980,\"Logger.debug()\":1096,\"StringBuffer.setLength()\":768,\"UNKNOWN.getColumnCount()\":814,\"ResultSet.getString()\":943,\"ResultSet.getMetaData()\":797,\"\\u003creturn\\u003e\":1299,\"StringBuffer.toString()\":689,\"ArrayList.\\u003cinit\\u003e\":111,\"List.add()\":1136,\"DBConn.getConn()\":372,\"DataManagerDAO.slectTrack1500Ps()\":171,\"Connection.prepareStatement()\":690,\"PreparedStatement.executeQuery()\":747,\"Track1500PlayerPojo.setPlayerNum()\":944,\"DBConn.freeConnection()\":1169,\"\\u003ca\\u003e\":336,\"StringBuffer.append()\":643,\"Exception.printStackTrace()\":1227},\"rawCode\":\"public Map getTrack1500(int finalitemid) {\\n\\t    Map track1500Map \\u003d new HashMap();\\n\\t\\tList list \\u003d new ArrayList();\\n\\t\\tList slectTrack1500 \\u003d this.slectTrack1500Ps(finalitemid);\\n\\t\\ttrack1500Map.put(\\\"track1500teamnum\\\", slectTrack1500);\\n\\t\\ttry {\\n\\t\\t\\tStringBuffer sql \\u003d new StringBuffer();\\n\\t\\t\\t\\n\\t\\t\\t\\n\\t\\t\\tfor( int j \\u003d 0; j \\u003c slectTrack1500.size(); j++){\\n\\t\\t\\tConnection conn \\u003d db.getConn();\\n\\t\\t\\tsql.append(\\\" SELECT t_player.playernum, t_match.teamnum \\\");\\n\\t\\t\\tsql.append(\\\" FROM t_match \\\");\\n\\t\\t\\tsql.append(\\\" INNER JOIN t_player ON t_match.playerid \\u003d t_player.id \\\");\\n\\t\\t\\t\\n\\t\\t\\tsql.append(\\\" WHERE t_match.finalitemid \\u003d ? AND t_match.teamnum\\u003d\\u0027\\\"+slectTrack1500.get(j)+\\\"\\u0027\\\");\\n\\t\\t\\tps \\u003d conn.prepareStatement(sql.toString());\\n\\t\\t\\tps.setInt(1, finalitemid);\\n\\t\\t\\trs \\u003d ps.executeQuery();\\n\\t\\t\\tsql.setLength(0);\\n\\t\\t\\tint c \\u003d rs.getMetaData().getColumnCount();\\n\\t\\t\\twhile (rs.next()) {\\n\\t\\t\\t\\tTrack1500PlayerPojo trackp \\u003d new Track1500PlayerPojo();\\n\\t\\t\\t\\t\\n\\t\\t\\t\\ttrackp.setPlayerNum(rs.getString(1));\\n\\t\\t\\t\\ttrackp.setTeamnum(rs.getInt(2));\\n\\t\\t\\t\\t//System.out.println(rs.getString(1));\\n\\t\\t\\t\\tfor(int i\\u003d1;i\\u003c\\u003dc;i++){\\n                \\tlog.debug(rs.getObject(i));\\n                }\\n\\t\\t\\t\\tlist.add(trackp);\\n\\t\\t\\t}\\n\\t\\t\\tdb.freeConnection(conn);\\n\\t\\t\\t}\\n\\n\\t\\t} catch (Exception ex) {\\n\\t\\t\\tex.printStackTrace();\\n\\t\\t} \\n\\t\\ttrack1500Map.put(\\\"track1500List\\\", list);\\n\\t\\treturn track1500Map;\\n\\t}\"}","93":"{\"expressionStart\":{\"String:\":158,\"ResultSet.getString()\":743,\"PreparedStatement.setInt()\":605,\"String\":276,\"\\u003creturn\\u003e\":1009,\"ResultSet.next()\":707,\"DBConn.getConn()\":440,\"Connection.prepareStatement()\":562,\"ResultSet.close()\":805,\"PreparedStatement.executeQuery()\":659,\"DBConn.freeConnection()\":886,\"int:1\":622,\"\\u003cnullcheck\\u003e\":469,\"PreparedStatement.close()\":832,\"SQLException.printStackTrace()\":980},\"expressionEnd\":{\"String:\":160,\"ResultSet.getString()\":768,\"PreparedStatement.setInt()\":637,\"String\":323,\"\\u003creturn\\u003e\":1022,\"ResultSet.next()\":716,\"DBConn.getConn()\":452,\"Connection.prepareStatement()\":588,\"ResultSet.close()\":815,\"PreparedStatement.executeQuery()\":683,\"DBConn.freeConnection()\":909,\"int:1\":623,\"\\u003cnullcheck\\u003e\":481,\"PreparedStatement.close()\":849,\"SQLException.printStackTrace()\":999},\"rawCode\":\"/**word\\n     * 根据最终项目表id查询组别名称\\n     * @param finalItemId\\n     * @return int\\n     */\\n    public String selectGrNameByFid(int finalItemId){\\n    \\tString gname \\u003d \\\"\\\";\\n\\t    String sql \\u003d \\\"SELECT groupname FROM t_group WHERE id IN ( SELECT groupid FROM t_group2sports \\\" +\\n\\t    \\t\\t     \\\"WHERE id IN(SELECT gp2spid FROM t_group2item \\\" +\\n\\t    \\t\\t\\t \\\"WHERE id IN (SELECT gp2itid FROM t_finalitem WHERE id \\u003d ?)))\\\";\\n\\t    try {\\n            Connection conn \\u003d db.getConn();\\n            if(conn !\\u003d null){\\n        \\t   ResultSet rs \\u003d null;\\n               PreparedStatement statement \\u003d conn.prepareStatement(sql);\\n               statement.setInt(1, finalItemId);\\n               rs \\u003d statement.executeQuery(); \\n               while(rs.next()){\\n            \\t   gname \\u003d rs.getString(\\\"groupname\\\");\\n                  }\\n               rs.close();\\n               statement.close();\\n            }\\n        \\n            db.freeConnection(conn);  \\n            }catch (SQLException e) {                 \\n            e.printStackTrace(); } \\n\\t    return gname;\\n    }\"}","94":"{\"expressionStart\":{\"ResultSet.getString()\":710,\"PreparedStatement.setInt()\":563,\"String\":290,\"\\u003creturn\\u003e\":1039,\"ResultSet.next()\":667,\"ArrayList.\\u003cinit\\u003e\":181,\"DBConn.getConn()\":395,\"ArrayList.add()\":744,\"Connection.prepareStatement()\":519,\"ResultSet.close()\":827,\"PreparedStatement.executeQuery()\":618,\"DBConn.freeConnection()\":909,\"int:1\":580,\"PreparedStatement.close()\":855,\"\\u003cnullcheck\\u003e\":424,\"SQLException.printStackTrace()\":1003},\"expressionEnd\":{\"ResultSet.getString()\":725,\"PreparedStatement.setInt()\":595,\"String\":352,\"\\u003creturn\\u003e\":1049,\"ResultSet.next()\":676,\"ArrayList.\\u003cinit\\u003e\":196,\"DBConn.getConn()\":407,\"ArrayList.add()\":756,\"Connection.prepareStatement()\":545,\"ResultSet.close()\":837,\"PreparedStatement.executeQuery()\":642,\"DBConn.freeConnection()\":932,\"int:1\":581,\"PreparedStatement.close()\":872,\"\\u003cnullcheck\\u003e\":436,\"SQLException.printStackTrace()\":1022},\"rawCode\":\"/**look\\n     * 根据finalitemid查询田赛类运动员信息\\n     * @param finalitemid\\n     * @return  ArrayList  编号\\n     */\\n     public ArrayList slectFilePs(int finalitemid){\\n    \\t\\n    \\tArrayList pn \\u003d new ArrayList();\\n    \\t\\n    \\tString sql \\u003d \\\"SELECT t_player.playernum FROM t_player JOIN t_match ON \\\" +\\n    \\t\\t\\t\\\"t_match.playerid \\u003d t_player.id WHERE t_match.finalitemid \\u003d ?\\\";\\n\\t    try {\\n            Connection conn \\u003d db.getConn();\\n            if(conn !\\u003d null){\\n            \\tResultSet rs \\u003d null;\\n                PreparedStatement statement \\u003d conn.prepareStatement(sql);\\n                statement.setInt(1, finalitemid);\\n                rs \\u003d statement.executeQuery(); \\n                while(rs.next()){\\n             \\t   String pnum \\u003d rs.getString(1);\\n             \\t   pn.add(pnum);\\n             \\t   \\n                }\\n                \\n                rs.close();\\n                statement.close();\\n            }\\n        \\n            db.freeConnection(conn);  \\n            }catch (SQLException e) {                 \\n            e.printStackTrace(); } \\n            return pn;\\n    }\"}","95":"{\"expressionStart\":{\"T_finalitemPojo.setDate()\":1247,\"PreparedStatement.setInt()\":715,\"T_finalitemPojo.setPromotionnum()\":1417,\"String\":1071,\"T_finalitemPojo.setFinalitemtype()\":1174,\"HashMap.put()\":1485,\"ResultSet.next()\":815,\"Integer.\\u003cinit\\u003e\":970,\"HashMap.\\u003cinit\\u003e\":188,\"ResultSet.close()\":1550,\"int:1\":732,\"\\u003cnullcheck\\u003e\":576,\"ResultSet.getInt()\":1061,\"SQLException.printStackTrace()\":1729,\"T_finalitemPojo.setId()\":1006,\"T_finalitemPojo.setGp2itid()\":1043,\"T_finalitemPojo.setTime()\":1302,\"ResultSet.getString()\":1317,\"T_finalitemPojo.setGroupnum()\":1357,\"T_finalitemPojo.setFinalitemname()\":1101,\"String:id\":930,\"\\u003creturn\\u003e\":1758,\"DBConn.getConn()\":547,\"T_finalitemPojo.\\u003cinit\\u003e\":869,\"Connection.prepareStatement()\":671,\"PreparedStatement.executeQuery()\":766,\"DBConn.freeConnection()\":1635,\"PreparedStatement.close()\":1578},\"expressionEnd\":{\"T_finalitemPojo.setDate()\":1283,\"PreparedStatement.setInt()\":743,\"T_finalitemPojo.setPromotionnum()\":1466,\"String\":1080,\"T_finalitemPojo.setFinalitemtype()\":1228,\"HashMap.put()\":1510,\"ResultSet.next()\":824,\"Integer.\\u003cinit\\u003e\":987,\"HashMap.\\u003cinit\\u003e\":201,\"ResultSet.close()\":1560,\"int:1\":733,\"\\u003cnullcheck\\u003e\":588,\"ResultSet.getInt()\":1081,\"SQLException.printStackTrace()\":1748,\"T_finalitemPojo.setId()\":1024,\"T_finalitemPojo.setGp2itid()\":1082,\"T_finalitemPojo.setTime()\":1338,\"ResultSet.getString()\":1337,\"T_finalitemPojo.setGroupnum()\":1398,\"T_finalitemPojo.setFinalitemname()\":1155,\"String:id\":934,\"\\u003creturn\\u003e\":1772,\"DBConn.getConn()\":559,\"T_finalitemPojo.\\u003cinit\\u003e\":890,\"Connection.prepareStatement()\":697,\"PreparedStatement.executeQuery()\":790,\"DBConn.freeConnection()\":1658,\"PreparedStatement.close()\":1595},\"rawCode\":\"/**word\\n     * 根据运动会id查询最终项目表男子组信息\\n     * @param sportId\\n     * @return HashMap finalitemid(k) finalitemPojo(v)\\n     */\\n    public HashMap selectFlaBoy(int sportId){\\n    \\tHashMap flaBoy \\u003d new HashMap(); \\n\\t    String sql \\u003d \\\"SELECT * FROM t_finalitem WHERE finalitemtype!\\u003d\\u00272\\u0027 and gp2itid IN (SELECT id FROM t_group2item\\\" +\\n\\t    \\t\\t\\\" WHERE gp2spid IN (SELECT id FROM t_group2sports WHERE sportsid\\u003d? \\\"\\n\\t            + \\\"AND groupid IN(SELECT id FROM t_group WHERE groupname LIKE \\u0027%男%\\u0027))) ORDER BY finalitemname\\\";\\n\\t    try {\\n            Connection conn \\u003d db.getConn();\\n            if(conn !\\u003d null){\\n        \\t    ResultSet rs \\u003d null;\\n                PreparedStatement statement \\u003d conn.prepareStatement(sql);\\n                statement.setInt(1, sportId);\\n                rs \\u003d statement.executeQuery(); \\n                while(rs.next()){\\n                \\tT_finalitemPojo finalg \\u003d new T_finalitemPojo();\\n                \\tint temp \\u003d rs.getInt(\\\"id\\\");\\n                \\tInteger flaid \\u003d new Integer(temp);\\n                \\tfinalg.setId(temp);\\n                \\tfinalg.setGp2itid(rs.getInt(\\\"gp2itid\\\"));\\n                \\tfinalg.setFinalitemname(rs.getString(\\\"finalitemname\\\"));\\n                \\tfinalg.setFinalitemtype(rs.getString(\\\"finalitemtype\\\"));\\n                \\tfinalg.setDate(rs.getString(\\\"date\\\"));\\n                \\tfinalg.setTime(rs.getString(\\\"time\\\"));\\n                \\tfinalg.setGroupnum(rs.getInt(\\\"groupnum\\\"));\\n                \\tfinalg.setPromotionnum(rs.getInt(\\\"promotionnum\\\"));\\n                \\tflaBoy.put(flaid, finalg);\\n                    }\\n                rs.close();\\n                statement.close();\\n               }\\n        \\n            db.freeConnection(conn);  \\n            }catch (SQLException e) {                 \\n            e.printStackTrace(); } \\n\\t    return flaBoy;\\n    }\"}","96":"{\"expressionStart\":{\"T_finalitemPojo.setDate()\":1333,\"PreparedStatement.setInt()\":801,\"T_finalitemPojo.setPromotionnum()\":1503,\"T_finalitemPojo.setFinalitemtype()\":1260,\"String\":1536,\"HashMap.put()\":1571,\"ResultSet.next()\":901,\"Integer.\\u003cinit\\u003e\":1056,\"HashMap.\\u003cinit\\u003e\":223,\"ResultSet.close()\":1637,\"int:1\":818,\"\\u003cnullcheck\\u003e\":662,\"ResultSet.getInt()\":1526,\"SQLException.printStackTrace()\":1816,\"T_finalitemPojo.setId()\":1092,\"T_finalitemPojo.setGp2itid()\":1129,\"T_finalitemPojo.setTime()\":1388,\"ResultSet.getString()\":1211,\"T_finalitemPojo.setGroupnum()\":1443,\"T_finalitemPojo.setFinalitemname()\":1187,\"String:id\":1016,\"\\u003creturn\\u003e\":1845,\"T_finalitemPojo.\\u003cinit\\u003e\":955,\"DBConn.getConn()\":633,\"Connection.prepareStatement()\":757,\"PreparedStatement.executeQuery()\":852,\"DBConn.freeConnection()\":1722,\"PreparedStatement.close()\":1665},\"expressionEnd\":{\"T_finalitemPojo.setDate()\":1369,\"PreparedStatement.setInt()\":829,\"T_finalitemPojo.setPromotionnum()\":1552,\"T_finalitemPojo.setFinalitemtype()\":1314,\"String\":1550,\"HashMap.put()\":1597,\"ResultSet.next()\":910,\"Integer.\\u003cinit\\u003e\":1073,\"HashMap.\\u003cinit\\u003e\":236,\"ResultSet.close()\":1647,\"int:1\":819,\"\\u003cnullcheck\\u003e\":674,\"ResultSet.getInt()\":1551,\"SQLException.printStackTrace()\":1835,\"T_finalitemPojo.setId()\":1110,\"T_finalitemPojo.setGp2itid()\":1168,\"T_finalitemPojo.setTime()\":1424,\"ResultSet.getString()\":1240,\"T_finalitemPojo.setGroupnum()\":1484,\"T_finalitemPojo.setFinalitemname()\":1241,\"String:id\":1020,\"\\u003creturn\\u003e\":1860,\"T_finalitemPojo.\\u003cinit\\u003e\":976,\"DBConn.getConn()\":645,\"Connection.prepareStatement()\":783,\"PreparedStatement.executeQuery()\":876,\"DBConn.freeConnection()\":1745,\"PreparedStatement.close()\":1682},\"rawCode\":\"/**word\\n     * 根据运动会id查询最终项目表女子组信息  finalitemid(k) finalitemPojo(v)\\n     * @param sportId\\n     * @return HashMap finalitemid(k) finalitemPojo(v)\\n     */\\n    public HashMap selectFlaGirl(int sportId){\\n    \\tHashMap flaGirl \\u003d new HashMap(); \\n\\t    String sql \\u003d \\\"SELECT * FROM t_finalitem WHERE finalitemtype!\\u003d\\u00272\\u0027 and gp2itid IN (SELECT id FROM t_group2item\\\" +\\n\\t    \\t\\t\\\" WHERE gp2spid IN (SELECT id FROM t_group2sports WHERE sportsid\\u003d? \\\"\\n\\t            + \\\"AND groupid IN(SELECT id FROM t_group WHERE groupname LIKE \\u0027%女%\\u0027 \\\" +\\n\\t            \\t\\t\\\"AND groupname NOT  LIKE \\u0027%男女%\\u0027))) ORDER BY finalitemname\\\";\\n\\t    try {\\n            Connection conn \\u003d db.getConn();\\n            if(conn !\\u003d null){\\n        \\t    ResultSet rs \\u003d null;\\n                PreparedStatement statement \\u003d conn.prepareStatement(sql);\\n                statement.setInt(1, sportId);\\n                rs \\u003d statement.executeQuery(); \\n                while(rs.next()){\\n                \\tT_finalitemPojo finalg \\u003d new T_finalitemPojo();\\n                \\tint temp \\u003d rs.getInt(\\\"id\\\");\\n                \\tInteger flaid \\u003d new Integer(temp);\\n                \\tfinalg.setId(temp);\\n                \\tfinalg.setGp2itid(rs.getInt(\\\"gp2itid\\\"));\\n                \\tfinalg.setFinalitemname(rs.getString(\\\"finalitemname\\\"));\\n                \\tfinalg.setFinalitemtype(rs.getString(\\\"finalitemtype\\\"));\\n                \\tfinalg.setDate(rs.getString(\\\"date\\\"));\\n                \\tfinalg.setTime(rs.getString(\\\"time\\\"));\\n                \\tfinalg.setGroupnum(rs.getInt(\\\"groupnum\\\"));\\n                \\tfinalg.setPromotionnum(rs.getInt(\\\"promotionnum\\\"));\\n                \\tflaGirl.put(flaid, finalg);\\n                    }\\n                rs.close();\\n                statement.close();\\n               }\\n        \\n            db.freeConnection(conn);  \\n            }catch (SQLException e) {                 \\n            e.printStackTrace(); } \\n\\t    return flaGirl;\\n    }\"}","97":"{\"expressionStart\":{\"String:(\":986,\"ResultSet.getString()\":896,\"PreparedStatement.setInt()\":749,\"String\":433,\"\\u003creturn\\u003e\":1451,\"ResultSet.next()\":853,\"ArrayList.\\u003cinit\\u003e\":279,\"DBConn.getConn()\":581,\"ArrayList.add()\":1019,\"Connection.prepareStatement()\":705,\"ResultSet.close()\":1239,\"PreparedStatement.executeQuery()\":804,\"String:)\":997,\"DBConn.freeConnection()\":1321,\"int:2\":953,\"int:1\":766,\"PreparedStatement.close()\":1267,\"\\u003cnullcheck\\u003e\":610,\"SQLException.printStackTrace()\":1415,\"ResultSet.getInt()\":943},\"expressionEnd\":{\"String:(\":989,\"ResultSet.getString()\":911,\"PreparedStatement.setInt()\":781,\"String\":538,\"\\u003creturn\\u003e\":1461,\"ResultSet.next()\":862,\"ArrayList.\\u003cinit\\u003e\":294,\"DBConn.getConn()\":593,\"ArrayList.add()\":1031,\"Connection.prepareStatement()\":731,\"ResultSet.close()\":1249,\"PreparedStatement.executeQuery()\":828,\"String:)\":1000,\"DBConn.freeConnection()\":1344,\"int:2\":954,\"int:1\":767,\"PreparedStatement.close()\":1284,\"\\u003cnullcheck\\u003e\":622,\"SQLException.printStackTrace()\":1434,\"ResultSet.getInt()\":955},\"rawCode\":\"/**look\\n     * 根据finalitemid查询每个径赛项目的各组运动员  编号（ArrayList）     跑道号（ArrayList）\\n     * @param finalitemid\\n     * @return ArrayList       \\u003cString\\u003e  编号+跑道号\\n     */\\n    public ArrayList slectTrackInfo(int finalitemid){\\n    \\t//ArrayList trackInfo \\u003d new ArrayList();\\n    \\tArrayList pn \\u003d new ArrayList();\\n    \\t//ArrayList rw \\u003d new ArrayList();\\n    \\tString sql \\u003d \\\"SELECT t_player.playernum,t_match.runway FROM t_match JOIN t_player \\\" +\\n    \\t\\t\\t\\\"ON t_match.playerid \\u003d t_player.id WHERE t_match.finalitemid \\u003d ? ORDER BY t_match.teamnum,t_match.runway\\\";\\n\\t    try {\\n            Connection conn \\u003d db.getConn();\\n            if(conn !\\u003d null){\\n            \\tResultSet rs \\u003d null;\\n                PreparedStatement statement \\u003d conn.prepareStatement(sql);\\n                statement.setInt(1, finalitemid);\\n                rs \\u003d statement.executeQuery(); \\n                while(rs.next()){\\n             \\t   String pnum \\u003d rs.getString(1);\\n             \\t   int runway \\u003d rs.getInt(2);\\n             \\t   pnum \\u003d pnum+\\\"(\\\"+runway+\\\")\\\";\\n             \\t   pn.add(pnum);\\n             \\t   //Integer runway \\u003d new Integer(rs.getInt(2));\\n             \\t  // rw.add(runway);\\n                }\\n                //trackInfo.add(pn);\\n                //trackInfo.add(rw);\\n                rs.close();\\n                statement.close();\\n            }\\n        \\n            db.freeConnection(conn);  \\n            }catch (SQLException e) {                 \\n            e.printStackTrace(); } \\n            return pn;\\n    }\"}","98":"{\"expressionStart\":{\"String:\":768,\"ResultSet.getString()\":816,\"PreparedStatement.setInt()\":605,\"String\":332,\"HashMap.put()\":851,\"\\u003creturn\\u003e\":1130,\"ResultSet.next()\":708,\"DBConn.getConn()\":432,\"HashMap.\\u003cinit\\u003e\":193,\"Connection.prepareStatement()\":560,\"PreparedStatement.executeQuery()\":658,\"ResultSet.close()\":925,\"DBConn.freeConnection()\":1004,\"String.trim()\":754,\"int:2\":829,\"int:1\":622,\"\\u003cnullcheck\\u003e\":462,\"PreparedStatement.close()\":954,\"ResultSet.getInt()\":755,\"SQLException.printStackTrace()\":1100},\"expressionEnd\":{\"String:\":770,\"ResultSet.getString()\":831,\"PreparedStatement.setInt()\":634,\"String\":389,\"HashMap.put()\":884,\"\\u003creturn\\u003e\":1149,\"ResultSet.next()\":717,\"DBConn.getConn()\":444,\"HashMap.\\u003cinit\\u003e\":206,\"Connection.prepareStatement()\":586,\"PreparedStatement.executeQuery()\":682,\"ResultSet.close()\":935,\"DBConn.freeConnection()\":1027,\"String.trim()\":778,\"int:2\":830,\"int:1\":623,\"\\u003cnullcheck\\u003e\":474,\"PreparedStatement.close()\":971,\"ResultSet.getInt()\":767,\"SQLException.printStackTrace()\":1119},\"rawCode\":\"/**\\n      * 根据sportsId查询项目的id与name\\n      * @param sportsId\\n      * @return HashMap\\u003cString,String\\u003e\\n      */\\n     public HashMap selectItemId2nameBySid(int sportsId){\\n    \\t HashMap itemId2name \\u003d new HashMap();\\n    \\t String sql \\u003d \\\"SELECT * FROM t_item WHERE id IN\\\" +\\n    \\t \\t\\t\\\"(SELECT itemid FROM t_group2item WHERE gp2spid \\\" +\\n    \\t \\t\\t\\\"IN (SELECT id FROM t_group2sports WHERE sportsid \\u003d ?)) \\\";\\n \\t\\t try {\\n             Connection conn \\u003d db.getConn();\\n             if(conn !\\u003d null){\\n             \\t ResultSet rs \\u003d null;\\n                 PreparedStatement statement \\u003d conn.prepareStatement(sql);\\n                 statement.setInt(1, sportsId);\\n                 rs \\u003d statement.executeQuery(); \\n                 while(rs.next()){\\n                 \\tString itemId \\u003d (rs.getInt(1)+\\\"\\\").trim();\\n                 \\tString itemName \\u003d rs.getString(2);\\n                 \\titemId2name.put(itemId, itemName);\\n                    }\\n                 rs.close();\\n                 statement.close();\\n                }\\n             db.freeConnection(conn);  \\n             }catch (SQLException e) {                 \\n             e.printStackTrace(); } \\n    \\t return itemId2name;\\n     }\"}","99":"{\"expressionStart\":{\"ResultSet.getString()\":723,\"PreparedStatement.setInt()\":512,\"String\":209,\"HashMap.put()\":766,\"String:id\":680,\"\\u003creturn\\u003e\":1039,\"ResultSet.next()\":611,\"Integer.\\u003cinit\\u003e\":658,\"DBConn.getConn()\":347,\"HashMap.\\u003cinit\\u003e\":176,\"Connection.prepareStatement()\":469,\"ResultSet.close()\":835,\"PreparedStatement.executeQuery()\":563,\"DBConn.freeConnection()\":916,\"int:1\":529,\"\\u003cnullcheck\\u003e\":376,\"PreparedStatement.close()\":862,\"ResultSet.getInt()\":670,\"SQLException.printStackTrace()\":1010},\"expressionEnd\":{\"ResultSet.getString()\":748,\"PreparedStatement.setInt()\":541,\"String\":304,\"HashMap.put()\":798,\"String:id\":684,\"\\u003creturn\\u003e\":1054,\"ResultSet.next()\":620,\"Integer.\\u003cinit\\u003e\":686,\"DBConn.getConn()\":359,\"HashMap.\\u003cinit\\u003e\":189,\"Connection.prepareStatement()\":495,\"ResultSet.close()\":845,\"PreparedStatement.executeQuery()\":587,\"DBConn.freeConnection()\":939,\"int:1\":530,\"\\u003cnullcheck\\u003e\":388,\"PreparedStatement.close()\":879,\"ResultSet.getInt()\":685,\"SQLException.printStackTrace()\":1029},\"rawCode\":\"/**word\\n     * 根据运动会的id查询运动员的id（k）与 号码（v）的关系\\n     * @param sportsId\\n     * @return  HashMap\\n     */\\n    public HashMap selectPlayersBySid(int sportsId){\\n    \\tHashMap players \\u003d new HashMap();\\n\\t    String sql \\u003d \\\"SELECT * FROM t_player WHERE sp2dpid IN( SELECT id FROM t_sports2department WHERE sportsid\\u003d?)\\\";\\n\\t    try {\\n            Connection conn \\u003d db.getConn();\\n            if(conn !\\u003d null){\\n        \\t   ResultSet rs \\u003d null;\\n               PreparedStatement statement \\u003d conn.prepareStatement(sql);\\n               statement.setInt(1, sportsId);\\n               rs \\u003d statement.executeQuery(); \\n               while(rs.next()){\\n            \\t   Integer playerId \\u003d new Integer(rs.getInt(\\\"id\\\"));\\n            \\t   String playerNum \\u003d rs.getString(\\\"playernum\\\");\\n            \\t   players.put(playerId, playerNum);\\n                  }\\n               rs.close();\\n               statement.close();\\n            }\\n        \\n            db.freeConnection(conn);  \\n            }catch (SQLException e) {                 \\n            e.printStackTrace(); } \\n\\t    return players;\\n    }\"}","100":"{\"expressionStart\":{\"String:\":147,\"ResultSet.getString()\":670,\"PreparedStatement.setInt()\":530,\"String\":240,\"\\u003creturn\\u003e\":953,\"ResultSet.next()\":634,\"DBConn.getConn()\":362,\"Connection.prepareStatement()\":486,\"ResultSet.close()\":741,\"PreparedStatement.executeQuery()\":585,\"DBConn.freeConnection()\":823,\"int:1\":547,\"PreparedStatement.close()\":769,\"\\u003cnullcheck\\u003e\":391,\"SQLException.printStackTrace()\":917},\"expressionEnd\":{\"String:\":149,\"ResultSet.getString()\":685,\"PreparedStatement.setInt()\":562,\"String\":319,\"\\u003creturn\\u003e\":965,\"ResultSet.next()\":643,\"DBConn.getConn()\":374,\"Connection.prepareStatement()\":512,\"ResultSet.close()\":751,\"PreparedStatement.executeQuery()\":609,\"DBConn.freeConnection()\":846,\"int:1\":548,\"PreparedStatement.close()\":786,\"\\u003cnullcheck\\u003e\":403,\"SQLException.printStackTrace()\":936},\"rawCode\":\"/**look\\n    * 根据最终项目名查询项目名称\\n    * @param finalitemid\\n    * @return\\n    */\\n    public String selectItnameByFid(int finalitemid){\\n    \\tString name \\u003d \\\"\\\";\\n    \\tString sql \\u003d \\\"SELECT itemname FROM t_item WHERE id IN(SELECT itemid \\\" +\\n    \\t\\t\\t     \\\"FROM t_group2item WHERE id IN (SELECT gp2itid FROM t_finalitem WHERE id \\u003d ?))\\\";\\n\\t    try {\\n            Connection conn \\u003d db.getConn();\\n            if(conn !\\u003d null){\\n            \\tResultSet rs \\u003d null;\\n                PreparedStatement statement \\u003d conn.prepareStatement(sql);\\n                statement.setInt(1, finalitemid);\\n                rs \\u003d statement.executeQuery(); \\n                while(rs.next()){\\n                \\tname \\u003d rs.getString(1);   \\n                }\\n                \\n                rs.close();\\n                statement.close();\\n            }\\n        \\n            db.freeConnection(conn);  \\n            }catch (SQLException e) {                 \\n            e.printStackTrace(); } \\n            return name;\\n    }\"}","101":"{\"expressionStart\":{\"String.equals()\":890,\"\\u003cr\\u003e\":1162,\"PreparedStatement.setInt()\":592,\"String\":319,\"HashMap.put()\":1343,\"ResultSet.next()\":695,\"\\u003ccontinue\\u003e\":933,\"String.indexOf()\":1004,\"int:3\":842,\"HashMap.\\u003cinit\\u003e\":200,\"ResultSet.close()\":1590,\"int:2\":786,\"int:1\":609,\"int:0\":1031,\"\\u003cnullcheck\\u003e\":449,\"ResultSet.getInt()\":734,\"SQLException.printStackTrace()\":1765,\"String:\":908,\"ResultSet.getString()\":829,\"String:;\":1023,\"\\u003creturn\\u003e\":1795,\"DBConn.getConn()\":419,\"String.split()\":1104,\"Connection.prepareStatement()\":547,\"String[].arrayget()\":1302,\"PreparedStatement.executeQuery()\":645,\"DBConn.freeConnection()\":1669,\"\\u003ca\\u003e\":1180,\"String.trim()\":1228,\"PreparedStatement.close()\":1619},\"expressionEnd\":{\"String.equals()\":911,\"\\u003cr\\u003e\":1178,\"PreparedStatement.setInt()\":621,\"String\":376,\"HashMap.put()\":1373,\"ResultSet.next()\":704,\"\\u003ccontinue\\u003e\":942,\"String.indexOf()\":1027,\"int:3\":843,\"HashMap.\\u003cinit\\u003e\":213,\"ResultSet.close()\":1600,\"int:2\":787,\"int:1\":610,\"int:0\":1032,\"\\u003cnullcheck\\u003e\":461,\"ResultSet.getInt()\":746,\"SQLException.printStackTrace()\":1784,\"String:\":910,\"ResultSet.getString()\":844,\"String:;\":1026,\"\\u003creturn\\u003e\":1814,\"DBConn.getConn()\":431,\"String.split()\":1125,\"Connection.prepareStatement()\":573,\"String[].arrayget()\":1310,\"PreparedStatement.executeQuery()\":669,\"DBConn.freeConnection()\":1692,\"\\u003ca\\u003e\":1183,\"String.trim()\":1250,\"PreparedStatement.close()\":1636},\"rawCode\":\"/**\\n      * 根据sportsId查询数字+运动员id，运动员组别id+所报项目id对照HashMap\\n      * @param sportsId\\n      * @return HashMap\\n      */\\n     public HashMap selectplayer2itemBySid(int sportsId){\\n    \\t HashMap itemId2name \\u003d new HashMap();\\n    \\t String sql \\u003d \\\"SELECT id,groupid,registitem FROM t_player \\\" +\\n    \\t \\t\\t\\\"WHERE sp2dpid IN\\\" +\\n    \\t \\t\\t\\\"(SELECT id FROM t_sports2department WHERE sportsid \\u003d ?)\\\";\\n \\t\\t try {\\n             Connection conn \\u003d db.getConn();\\n             if(conn !\\u003d null){\\n             \\t ResultSet rs \\u003d null;\\n                 PreparedStatement statement \\u003d conn.prepareStatement(sql);\\n                 statement.setInt(1, sportsId);\\n                 rs \\u003d statement.executeQuery(); \\n                 while(rs.next()){\\n                \\tint pid \\u003d rs.getInt(1);\\n                \\tint pgid \\u003d rs.getInt(2); \\n                 \\tString registitem \\u003d rs.getString(3);\\n                 \\tif (registitem \\u003d\\u003d null || registitem.equals(\\\"\\\")){\\n                 \\t\\tcontinue;\\n                 \\t}\\n                 \\t\\n                 \\tif (registitem.indexOf(\\\";\\\") \\u003e\\u003d 0){\\n                 \\t\\tString[] pitem \\u003d null;\\n                 \\t\\tpitem \\u003d registitem.split(\\\";\\\");\\n                 \\t\\tfor (int i \\u003d 0; i \\u003c pitem.length; i++){\\n                     \\t\\tString pidString \\u003d (i + \\\";\\\" + pid).trim();\\n                     \\t\\tString g2i \\u003d (pgid + \\\";\\\" + pitem[i]).trim();\\n                     \\t\\titemId2name.put(pidString,g2i);\\n                     \\t}\\n                 \\t}else{\\n                 \\t\\titemId2name.put(1+\\\";\\\"+pid, pgid + \\\";\\\" + registitem);\\n                 \\t}\\n                 \\t\\n                 \\t\\n                 }\\n                 rs.close();\\n                 statement.close();\\n                }\\n             db.freeConnection(conn);  \\n             }catch (SQLException e) {                 \\n             e.printStackTrace(); } \\n    \\t return itemId2name;\\n     }\"}","102":"{\"expressionStart\":{\"long:1L\":283,\"Clob.getSubString()\":265,\"int.\\u003ccast\\u003e\":287,\"Clob.length()\":293,\"ResultSetMetaData.getColumnType()\":150,\"ResultSet.getClob()\":215,\"ResultSet.getString()\":380,\"null:null\":135,\"ResultSet.getMetaData()\":103,\"int:1\":173,\"\\u003creturn\\u003e\":413,\"\\u003cnullcheck\\u003e\":237},\"expressionEnd\":{\"long:1L\":285,\"Clob.getSubString()\":307,\"int.\\u003ccast\\u003e\":306,\"Clob.length()\":306,\"ResultSetMetaData.getColumnType()\":175,\"ResultSet.getClob()\":228,\"ResultSet.getString()\":395,\"null:null\":139,\"ResultSet.getMetaData()\":119,\"int:1\":174,\"\\u003creturn\\u003e\":423,\"\\u003cnullcheck\\u003e\":249},\"rawCode\":\"public Object getSource(String id, ResultSet rs) throws SQLException\\n\\t{\\n\\t\\tResultSetMetaData metadata \\u003d rs.getMetaData();\\n\\t\\tString rv \\u003d null;\\n\\t\\tswitch(metadata.getColumnType(1))\\n\\t\\t{\\n\\t\\tcase Types.CLOB:\\n\\t\\t\\tClob clob \\u003d rs.getClob(1); \\n\\t\\t\\tif(clob !\\u003d null)\\n\\t\\t\\t{\\n\\t\\t\\t\\trv \\u003d clob.getSubString(1L, (int) clob.length());\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t\\tcase Types.LONGVARCHAR:\\n\\t\\tcase Types.VARCHAR:\\n\\t\\t\\trv \\u003d rs.getString(1);\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\treturn rv;\\n\\t}\"}","103":"{\"expressionStart\":{\"ResultSet.getString()\":89,\"int:1\":102,\"\\u003creturn\\u003e\":82},\"expressionEnd\":{\"ResultSet.getString()\":104,\"int:1\":103,\"\\u003creturn\\u003e\":105},\"rawCode\":\"public Object getValidateSource(String id, ResultSet rs) throws SQLException\\n\\t{\\n\\t\\treturn rs.getString(1);\\n\\t}\"}","104":"{\"expressionStart\":{\"ResultSet.getBoolean()\":763,\"ResultSet.getString()\":477,\"String\":664,\"DatabaseUtils.getInt()\":424,\"ResultSet.getTimestamp()\":596,\"ResultSet.getInt()\":209},\"expressionEnd\":{\"ResultSet.getBoolean()\":798,\"ResultSet.getString()\":497,\"String\":673,\"DatabaseUtils.getInt()\":464,\"ResultSet.getTimestamp()\":624,\"ResultSet.getInt()\":232},\"rawCode\":\"/**\\n   * Description of the Method\\n   *\\n   * @param rs Description of Parameter\\n   * @throws SQLException Description of Exception\\n   */\\n  private void buildRecord(ResultSet rs) throws SQLException {\\n    id \\u003d rs.getInt(\\\"message_id\\\");\\n    projectId \\u003d DatabaseUtils.getInt(rs, \\\"project_id\\\");\\n    parentId \\u003d DatabaseUtils.getInt(rs, \\\"parent_id\\\");\\n    linkModuleId \\u003d DatabaseUtils.getInt(rs, \\\"link_module_id\\\");\\n    linkItemId \\u003d DatabaseUtils.getInt(rs, \\\"link_item_id\\\");\\n    body \\u003d rs.getString(\\\"body\\\");\\n    entered \\u003d rs.getTimestamp(\\\"entered\\\");\\n    enteredBy \\u003d rs.getInt(\\\"enteredby\\\");\\n    readDate \\u003d rs.getTimestamp(\\\"read_date\\\");\\n    readBy \\u003d DatabaseUtils.getInt(rs, \\\"read_by\\\");\\n    deletedByEnteredBy \\u003d rs.getBoolean(\\\"deleted_by_entered_by\\\");\\n    deletedByUserId \\u003d rs.getBoolean(\\\"deleted_by_user_id\\\");\\n    lastReplyDate \\u003d rs.getTimestamp(\\\"last_reply_date\\\");\\n    linkProjectId \\u003d DatabaseUtils.getInt(rs, \\\"link_project_id\\\");\\n  }\"}","105":"{\"expressionStart\":{\"String.equals()\":651,\"DaoPostpago.consultar()\":1506,\"Empresa.setCod_plan()\":1486,\"Empresa.setDireccion()\":1418,\"DaoPostpago.\\u003cinit\\u003e\":1506,\"String\":393,\"Connection.createStatement()\":1100,\"LinkedList.add()\":1581,\"ResultSet.next()\":1209,\"String: \":783,\"int:5\":958,\"Empresa.setNombre()\":1290,\"LinkedList.\\u003cinit\\u003e\":146,\"Connection.close()\":1637,\"Statement.executeQuery()\":1154,\"int:0\":933,\"String.length()\":936,\"String:\":250,\"ResultSet.getString()\":1439,\"\\u003creturn\\u003e\":1715,\"FachadaBD.conectar()\":1046,\"Empresa.\\u003cinit\\u003e\":1259,\"String.substring()\":912,\"null:null\":1903,\"Empresa.setTelefono()\":1352,\"UNKNOWN.println()\":1787},\"expressionEnd\":{\"String.equals()\":671,\"DaoPostpago.consultar()\":1562,\"Empresa.setCod_plan()\":1563,\"Empresa.setDireccion()\":1468,\"DaoPostpago.\\u003cinit\\u003e\":1523,\"String\":400,\"Connection.createStatement()\":1122,\"LinkedList.add()\":1609,\"ResultSet.next()\":1221,\"String: \":786,\"int:5\":959,\"Empresa.setNombre()\":1334,\"LinkedList.\\u003cinit\\u003e\":162,\"Connection.close()\":1649,\"Statement.executeQuery()\":1188,\"int:0\":934,\"String.length()\":955,\"String:\":252,\"ResultSet.getString()\":1467,\"\\u003creturn\\u003e\":1738,\"FachadaBD.conectar()\":1064,\"Empresa.\\u003cinit\\u003e\":1272,\"String.substring()\":960,\"null:null\":1907,\"Empresa.setTelefono()\":1400,\"UNKNOWN.println()\":1808},\"rawCode\":\"public LinkedList consultar(String nombre, String telefono,\\n            String direccion, String cod_plan) {\\n        LinkedList empresaConsulta \\u003d new LinkedList();\\n        String sql_select \\u003d \\\"SELECT * FROM empresa      \\\";\\n        if (!nombre.equals(\\\"\\\") \\n            || !telefono.equals(\\\"\\\")\\n            || !direccion.equals(\\\"\\\")\\n            || !cod_plan.equals(\\\"\\\")) {\\n            sql_select +\\u003d \\\"WHERE\\\";\\n        }\\n      \\n        if(!nombre.equals(\\\"\\\")){\\n            sql_select +\\u003d \\\" nombre LIKE \\u0027%\\\"+nombre+\\\"%\\u0027\\\"+\\\" AND \\\";\\n        }\\n        if(!telefono.equals(\\\"\\\")){\\n            sql_select +\\u003d \\\" telefono LIKE \\u0027%\\\"+telefono+\\\"%\\u0027\\\"+\\\" AND \\\";\\n        }\\n        if(!direccion.equals(\\\"\\\")){\\n            sql_select +\\u003d \\\" direccion LIKE \\u0027%\\\"+direccion+\\\"%\\u0027\\\"+\\\" AND \\\";\\n        }\\n        if(!cod_plan.equals(\\\" \\\")){\\n            sql_select +\\u003d \\\" cod_plan LIKE \\u0027%\\\"+cod_plan+\\\"%\\u0027\\\"+\\\" AND \\\";\\n        }\\n                     \\n        sql_select \\u003d sql_select.substring(0, sql_select.length() - 5);\\n        System.out.println(sql_select);\\n        try {\\n            Connection conn \\u003d fachada.conectar();\\n            Statement sentencia \\u003d conn.createStatement();\\n            ResultSet tabla \\u003d sentencia.executeQuery(sql_select);\\n            while (tabla.next()) {\\n                Empresa empresa \\u003d new Empresa();\\n                empresa.setNombre(tabla.getString(\\\"nombre\\\"));\\n                empresa.setTelefono(tabla.getString(\\\"telefono\\\"));\\n                empresa.setDireccion(tabla.getString(\\\"direccion\\\"));\\n                empresa.setCod_plan(new DaoPostpago().consultar(tabla.getString(\\\"cod_plan\\\")));\\n                empresaConsulta.add(empresa);\\n            }\\n            conn.close();\\n            System.out.println(\\\"Conexion cerrada\\\");\\n            return empresaConsulta;\\n\\n        } catch (SQLException e) {\\n            System.out.println(e);\\n        } catch (Exception e) {\\n            System.out.println(e);\\n        }\\n\\n        return null;\\n    }\"}","106":"{\"expressionStart\":{\"DaoPostpago.consultar()\":630,\"String:\\u0027\":176,\"Empresa.setCod_plan()\":615,\"ResultSet.getString()\":447,\"DaoPostpago.\\u003cinit\\u003e\":630,\"Empresa.setDireccion()\":552,\"String\":463,\"Connection.createStatement()\":279,\"\\u003creturn\\u003e\":965,\"FachadaBD.conectar()\":225,\"ResultSet.next()\":401,\"Empresa.\\u003cinit\\u003e\":63,\"Empresa.setNombre()\":434,\"Connection.close()\":719,\"null:null\":972,\"Empresa.setTelefono()\":491,\"UNKNOWN.println()\":923,\"Statement.executeQuery()\":333},\"expressionEnd\":{\"DaoPostpago.consultar()\":686,\"String:\\u0027\":179,\"Empresa.setCod_plan()\":687,\"ResultSet.getString()\":472,\"DaoPostpago.\\u003cinit\\u003e\":647,\"Empresa.setDireccion()\":597,\"String\":471,\"Connection.createStatement()\":301,\"\\u003creturn\\u003e\":977,\"FachadaBD.conectar()\":243,\"ResultSet.next()\":413,\"Empresa.\\u003cinit\\u003e\":76,\"Empresa.setNombre()\":473,\"Connection.close()\":731,\"null:null\":976,\"Empresa.setTelefono()\":534,\"UNKNOWN.println()\":944,\"Statement.executeQuery()\":367},\"rawCode\":\"public Empresa consultar(String nombre) {\\n        Empresa em \\u003d new Empresa();\\n        String sql_select;\\n        sql_select \\u003d \\\"SELECT * FROM empresa WHERE nombre\\u003d\\u0027\\\" + nombre + \\\"\\u0027\\\";\\n        try {\\n            Connection conn \\u003d fachada.conectar();\\n            Statement sentencia \\u003d conn.createStatement();\\n            ResultSet tabla \\u003d sentencia.executeQuery(sql_select);\\n\\n            //\\n            if (tabla.next()) {\\n\\n                em.setNombre(tabla.getString(\\\"nombre\\\"));\\n                em.setTelefono(tabla.getString(\\\"telefono\\\"));\\n                em.setDireccion(tabla.getString(\\\"direccion\\\"));\\n                em.setCod_plan(new DaoPostpago().consultar(tabla.getString(\\\"cod_plan\\\")));\\n\\n\\n\\n            }\\n\\n            conn.close();\\n            System.out.println(\\\"Conexion cerrada\\\");\\n            return em;\\n\\n        } catch (SQLException e) {\\n            System.out.println(e);\\n        } catch (Exception e) {\\n            System.out.println(e);\\n        }\\n\\n        return null;\\n    }\"}","107":"{\"expressionStart\":{\"HashSet.remove()\":194,\"Arrays.asList()\":128,\"TestTriggersConstraints.fail()\":275,\"ResultSet.getString()\":205,\"\\u003cr\\u003e\":245,\"String\":280,\"HashSet.size()\":245,\"HashSet.\\u003cinit\\u003e\":108,\"int:1\":218,\"int:0\":258,\"ResultSet.next()\":169},\"expressionEnd\":{\"HashSet.remove()\":221,\"Arrays.asList()\":151,\"TestTriggersConstraints.fail()\":310,\"ResultSet.getString()\":220,\"\\u003cr\\u003e\":259,\"String\":303,\"HashSet.size()\":255,\"HashSet.\\u003cinit\\u003e\":152,\"int:1\":219,\"int:0\":259,\"ResultSet.next()\":178},\"rawCode\":\"private void checkRows(ResultSet rs, String[] expected) throws SQLException {\\n        HashSet\\u003cString\\u003e set \\u003d new HashSet\\u003cString\\u003e(Arrays.asList(expected));\\n        while (rs.next()) {\\n            set.remove(rs.getString(1));\\n        }\\n        if (set.size() \\u003e 0) {\\n            fail(\\\"set should be empty: \\\" + set);\\n        }\\n    }\"}","108":"{\"expressionStart\":{\"String:\\\"\":666,\"TestTriggersConstraints.assertEquals()\":2657,\"TestTriggersConstraints.assertFalse()\":2713,\"String:\":911,\"UNKNOWN.getName()\":1179,\"ResultSet.getString()\":2687,\"UNKNOWN.execute()\":3199,\"String\":1577,\"Connection.createStatement()\":163,\"TestTriggersConstraints.assertThrows()\":3199,\"ResultSet.next()\":2638,\"{String}\":1559,\"TestTriggersConstraints.getClass()\":1727,\"String:trigger\":126,\"String.startsWith()\":2474,\"TestTriggersConstraints.checkRows()\":1532,\"Connection.close()\":3554,\"Statement.execute()\":1044,\"TestTriggersConstraints.getConnection()\":3584,\"int:2\":2700,\"int:1\":2454,\"UNKNOWN.println()\":2526,\"Statement.executeQuery()\":2589},\"expressionEnd\":{\"String:\\\"\":670,\"TestTriggersConstraints.assertEquals()\":2703,\"TestTriggersConstraints.assertFalse()\":2735,\"String:\":913,\"UNKNOWN.getName()\":1199,\"ResultSet.getString()\":2702,\"UNKNOWN.execute()\":3300,\"String\":1618,\"Connection.createStatement()\":185,\"TestTriggersConstraints.assertThrows()\":3248,\"ResultSet.next()\":2647,\"{String}\":2385,\"TestTriggersConstraints.getClass()\":1737,\"String:trigger\":135,\"String.startsWith()\":2506,\"TestTriggersConstraints.checkRows()\":2386,\"Connection.close()\":3566,\"Statement.execute()\":1207,\"TestTriggersConstraints.getConnection()\":3608,\"int:2\":2701,\"int:1\":2455,\"UNKNOWN.println()\":2549,\"Statement.executeQuery()\":2628},\"rawCode\":\"private void testTriggers() throws SQLException {\\n        mustNotCallTrigger \\u003d false;\\n        Connection conn \\u003d getConnection(\\\"trigger\\\");\\n        Statement stat \\u003d conn.createStatement();\\n        stat.execute(\\\"DROP TABLE IF EXISTS TEST\\\");\\n        stat.execute(\\\"CREATE TABLE TEST(ID INT PRIMARY KEY, NAME VARCHAR(255))\\\");\\n        // CREATE TRIGGER trigger {BEFORE|AFTER}\\n        // {INSERT|UPDATE|DELETE|ROLLBACK} ON table\\n        // [FOR EACH ROW] [QUEUE n] [NOWAIT] CALL triggeredClass\\n        stat.execute(\\\"CREATE TRIGGER IF NOT EXISTS INS_BEFORE \\\" +\\n                \\\"BEFORE INSERT ON TEST \\\" +\\n                \\\"FOR EACH ROW NOWAIT CALL \\\\\\\"\\\" + getClass().getName() + \\\"\\\\\\\"\\\");\\n        stat.execute(\\\"CREATE TRIGGER IF NOT EXISTS INS_BEFORE \\\" +\\n                \\\"BEFORE INSERT ON TEST \\\" +\\n                \\\"FOR EACH ROW NOWAIT CALL \\\\\\\"\\\" + getClass().getName() + \\\"\\\\\\\"\\\");\\n        stat.execute(\\\"CREATE TRIGGER INS_AFTER \\\" + \\\"\\\" +\\n                \\\"AFTER INSERT ON TEST \\\" +\\n                \\\"FOR EACH ROW NOWAIT CALL \\\\\\\"\\\" + getClass().getName() + \\\"\\\\\\\"\\\");\\n        stat.execute(\\\"CREATE TRIGGER UPD_BEFORE \\\" +\\n                \\\"BEFORE UPDATE ON TEST \\\" +\\n                \\\"FOR EACH ROW NOWAIT CALL \\\\\\\"\\\" + getClass().getName() + \\\"\\\\\\\"\\\");\\n        stat.execute(\\\"CREATE TRIGGER INS_AFTER_ROLLBACK \\\" +\\n                \\\"AFTER INSERT, ROLLBACK ON TEST \\\" +\\n                \\\"FOR EACH ROW NOWAIT CALL \\\\\\\"\\\" + getClass().getName() + \\\"\\\\\\\"\\\");\\n        stat.execute(\\\"INSERT INTO TEST VALUES(1, \\u0027Hello\\u0027)\\\");\\n        ResultSet rs;\\n        rs \\u003d stat.executeQuery(\\\"SCRIPT\\\");\\n        checkRows(rs, new String[] {\\n                \\\"CREATE FORCE TRIGGER PUBLIC.INS_BEFORE \\\" +\\n                    \\\"BEFORE INSERT ON PUBLIC.TEST \\\" +\\n                    \\\"FOR EACH ROW NOWAIT CALL \\\\\\\"\\\" + getClass().getName() + \\\"\\\\\\\";\\\",\\n                \\\"CREATE FORCE TRIGGER PUBLIC.INS_AFTER \\\" +\\n                    \\\"AFTER INSERT ON PUBLIC.TEST \\\" +\\n                    \\\"FOR EACH ROW NOWAIT CALL \\\\\\\"\\\" + getClass().getName() + \\\"\\\\\\\";\\\",\\n                \\\"CREATE FORCE TRIGGER PUBLIC.UPD_BEFORE \\\" +\\n                    \\\"BEFORE UPDATE ON PUBLIC.TEST \\\" +\\n                    \\\"FOR EACH ROW NOWAIT CALL \\\\\\\"\\\" + getClass().getName() + \\\"\\\\\\\";\\\",\\n                \\\"CREATE FORCE TRIGGER PUBLIC.INS_AFTER_ROLLBACK \\\" +\\n                    \\\"AFTER INSERT, ROLLBACK ON PUBLIC.TEST \\\" +\\n                    \\\"FOR EACH ROW NOWAIT CALL \\\\\\\"\\\" + getClass().getName() + \\\"\\\\\\\";\\\",\\n                        });\\n        while (rs.next()) {\\n            String sql \\u003d rs.getString(1);\\n            if (sql.startsWith(\\\"CREATE TRIGGER\\\")) {\\n                System.out.println(sql);\\n            }\\n        }\\n\\n        rs \\u003d stat.executeQuery(\\\"SELECT * FROM TEST\\\");\\n        rs.next();\\n        assertEquals(\\\"Hello-updated\\\", rs.getString(2));\\n        assertFalse(rs.next());\\n        stat.execute(\\\"UPDATE TEST SET NAME\\u003dNAME||\\u0027-upd\\u0027\\\");\\n        rs \\u003d stat.executeQuery(\\\"SELECT * FROM TEST\\\");\\n        rs.next();\\n        assertEquals(\\\"Hello-updated-upd-updated2\\\", rs.getString(2));\\n        assertFalse(rs.next());\\n\\n        mustNotCallTrigger \\u003d true;\\n        stat.execute(\\\"DROP TRIGGER IF EXISTS INS_BEFORE\\\");\\n        stat.execute(\\\"DROP TRIGGER IF EXISTS INS_BEFORE\\\");\\n        stat.execute(\\\"DROP TRIGGER IF EXISTS INS_AFTER_ROLLBACK\\\");\\n        assertThrows(ErrorCode.TRIGGER_NOT_FOUND_1, stat).\\n                execute(\\\"DROP TRIGGER INS_BEFORE\\\");\\n        stat.execute(\\\"DROP TRIGGER  INS_AFTER\\\");\\n        stat.execute(\\\"DROP TRIGGER  UPD_BEFORE\\\");\\n        stat.execute(\\\"UPDATE TEST SET NAME\\u003dNAME||\\u0027-upd-no_trigger\\u0027\\\");\\n        stat.execute(\\\"INSERT INTO TEST VALUES(100, \\u0027Insert-no_trigger\\u0027)\\\");\\n        conn.close();\\n\\n        conn \\u003d getConnection(\\\"trigger\\\");\\n\\n        mustNotCallTrigger \\u003d false;\\n        conn.close();\\n    }\"}","109":"{\"expressionStart\":{\"String:\\\"\":516,\"TestTriggersConstraints.assertEquals()\":1167,\"TestTriggersConstraints.assertFalse()\":1214,\"ResultSet.getString()\":1188,\"String\":257,\"Connection.createStatement()\":161,\"ResultSet.next()\":989,\"String:trigger\":134,\"Statement.execute()\":244,\"Connection.close()\":1296,\"Class.getName()\":479,\"int:20\":852,\"TestTriggersConstraints.getConnection()\":120,\"int:10\":691,\"TestTriggersConstraints.assertTrue()\":1136,\"int:1\":705,\"Statement.executeQuery()\":610,\"ResultSet.getInt()\":695},\"expressionEnd\":{\"String:\\\"\":520,\"TestTriggersConstraints.assertEquals()\":1204,\"TestTriggersConstraints.assertFalse()\":1236,\"ResultSet.getString()\":1203,\"String\":284,\"Connection.createStatement()\":183,\"ResultSet.next()\":998,\"String:trigger\":143,\"Statement.execute()\":285,\"Connection.close()\":1308,\"Class.getName()\":513,\"int:20\":854,\"TestTriggersConstraints.getConnection()\":144,\"int:10\":693,\"TestTriggersConstraints.assertTrue()\":1157,\"int:1\":706,\"Statement.executeQuery()\":649,\"ResultSet.getInt()\":707},\"rawCode\":\"private void testTriggerAdapter() throws SQLException {\\n        Connection conn;\\n        Statement stat;\\n        conn \\u003d getConnection(\\\"trigger\\\");\\n        stat \\u003d conn.createStatement();\\n        stat.execute(\\\"drop table if exists test\\\");\\n        stat.execute(\\\"create table test(id int)\\\");\\n        stat.execute(\\\"create table message(name varchar)\\\");\\n        stat.execute(\\\"create trigger test_insert before insert, update, delete on test \\\" +\\n                \\\"for each row call \\\\\\\"\\\" + TestTriggerAdapter.class.getName() + \\\"\\\\\\\"\\\");\\n        stat.execute(\\\"insert into test values(1)\\\");\\n        ResultSet rs;\\n        rs \\u003d stat.executeQuery(\\\"select * from test\\\");\\n        rs.next();\\n        assertEquals(10, rs.getInt(1));\\n        stat.execute(\\\"update test set id \\u003d 2\\\");\\n        rs \\u003d stat.executeQuery(\\\"select * from test\\\");\\n        rs.next();\\n        assertEquals(20, rs.getInt(1));\\n        stat.execute(\\\"delete from test\\\");\\n        rs \\u003d stat.executeQuery(\\\"select * from message\\\");\\n        assertTrue(rs.next());\\n        assertEquals(\\\"+1;\\\", rs.getString(1));\\n        assertTrue(rs.next());\\n        assertEquals(\\\"-10;+2;\\\", rs.getString(1));\\n        assertTrue(rs.next());\\n        assertEquals(\\\"-20;\\\", rs.getString(1));\\n        assertFalse(rs.next());\\n        stat.execute(\\\"drop table test, message\\\");\\n        conn.close();\\n    }\"}","110":"{\"expressionStart\":{\"String.equals()\":563,\"StringBuilder.toString()\":1581,\"String:\\u0027)\":1599,\"\\u003cthrow\\u003e\":466,\"ResultSet.updateInt()\":1447,\"\\u003cr\\u003e\":1080,\"ResultSet.getString()\":1369,\"StringBuilder.\\u003cinit\\u003e\":125,\"UNKNOWN.execute()\":1517,\"String\":1347,\"char:\\u0027;\\u0027\":251,\"UNKNOWN.append()\":196,\"StringBuilder.append()\":321,\"Connection.createStatement()\":1517,\"String:id\":237,\"int:10\":1486,\"int:2\":1291,\"int:1\":1094,\"RuntimeException.\\u003cinit\\u003e\":753,\"\\u003cnullcheck\\u003e\":287,\"ResultSet.getInt()\":1080},\"expressionEnd\":{\"String.equals()\":587,\"StringBuilder.toString()\":1596,\"String:\\u0027)\":1603,\"\\u003cthrow\\u003e\":531,\"ResultSet.updateInt()\":1489,\"\\u003cr\\u003e\":1101,\"ResultSet.getString()\":1388,\"StringBuilder.\\u003cinit\\u003e\":144,\"UNKNOWN.execute()\":1604,\"String\":1366,\"char:\\u0027;\\u0027\":254,\"UNKNOWN.append()\":255,\"StringBuilder.append()\":337,\"Connection.createStatement()\":1539,\"String:id\":241,\"int:10\":1488,\"int:2\":1292,\"int:1\":1095,\"RuntimeException.\\u003cinit\\u003e\":809,\"\\u003cnullcheck\\u003e\":301,\"ResultSet.getInt()\":1096},\"rawCode\":\"public void fire(Connection conn, ResultSet oldRow, ResultSet newRow) throws SQLException {\\n            StringBuilder buff \\u003d new StringBuilder();\\n            if (oldRow !\\u003d null) {\\n                buff.append(\\\"-\\\").append(oldRow.getString(\\\"id\\\")).append(\\u0027;\\u0027);\\n            }\\n            if (newRow !\\u003d null) {\\n                buff.append(\\\"+\\\").append(newRow.getString(\\\"id\\\")).append(\\u0027;\\u0027);\\n            }\\n            if (!\\\"TEST_INSERT\\\".equals(triggerName)) {\\n                throw new RuntimeException(\\\"Wrong trigger name: \\\" + triggerName);\\n            }\\n            if (!\\\"TEST\\\".equals(tableName)) {\\n                throw new RuntimeException(\\\"Wrong table name: \\\" + tableName);\\n            }\\n            if (!\\\"PUBLIC\\\".equals(schemaName)) {\\n                throw new RuntimeException(\\\"Wrong schema name: \\\" + schemaName);\\n            }\\n            if (type !\\u003d (Trigger.INSERT | Trigger.UPDATE | Trigger.DELETE)) {\\n                throw new RuntimeException(\\\"Wrong type: \\\" + type);\\n            }\\n            if (newRow !\\u003d null) {\\n                if (oldRow \\u003d\\u003d null) {\\n                    if (newRow.getInt(1) !\\u003d 1) {\\n                        throw new RuntimeException(\\\"Expected: 1 got: \\\" + newRow.getString(1));\\n                    }\\n                } else {\\n                    if (newRow.getInt(1) !\\u003d 2) {\\n                        throw new RuntimeException(\\\"Expected: 2 got: \\\" + newRow.getString(1));\\n                    }\\n                }\\n                newRow.updateInt(1, newRow.getInt(1) * 10);\\n            }\\n            conn.createStatement().execute(\\\"insert into message values(\\u0027\\\" + buff.toString() + \\\"\\u0027)\\\");\\n        }\"}","111":"{\"expressionStart\":{\"ResultSet.getString()\":476,\"NiveauDTO.setNum()\":422,\"String\":253,\"Connection.createStatement()\":296,\"NiveauDTO.setNom()\":459,\"\\u003creturn\\u003e\":853,\"ResultSet.next()\":361,\"ArrayList.\\u003cinit\\u003e\":150,\"List.add()\":500,\"Statement.close()\":727,\"ResultSet.close()\":679,\"int:2\":490,\"NiveauDTO.\\u003cinit\\u003e\":401,\"int:1\":450,\"\\u003cnullcheck\\u003e\":706,\"Statement.executeQuery()\":325,\"SQLException.printStackTrace()\":821,\"ResultSet.getInt()\":439},\"expressionEnd\":{\"ResultSet.getString()\":492,\"NiveauDTO.setNum()\":453,\"String\":284,\"Connection.createStatement()\":316,\"NiveauDTO.setNom()\":493,\"\\u003creturn\\u003e\":875,\"ResultSet.next()\":371,\"ArrayList.\\u003cinit\\u003e\":176,\"List.add()\":529,\"Statement.close()\":739,\"ResultSet.close()\":690,\"int:2\":491,\"NiveauDTO.\\u003cinit\\u003e\":416,\"int:1\":451,\"\\u003cnullcheck\\u003e\":718,\"Statement.executeQuery()\":349,\"SQLException.printStackTrace()\":840,\"ResultSet.getInt()\":452},\"rawCode\":\"private List\\u003cNiveauDTO\\u003e readAllNomNiveau(Connection cn)\\n\\t\\t\\tthrows TransactionalConnectionException, DAOException{\\n\\n\\t\\tList\\u003cNiveauDTO\\u003e listeNomNiveau \\u003d new ArrayList\\u003cNiveauDTO\\u003e();\\n\\n\\t\\tStatement stmt\\u003d null;\\n\\t\\tResultSet rst\\u003d null;\\n\\n\\t\\ttry {\\n\\t\\t\\tString query \\u003d \\\"select num,valeur from niveau\\\"\\t;\\n\\n\\t\\t\\tstmt\\u003dcn.createStatement();\\n\\t\\t\\trst\\u003dstmt.executeQuery(query);\\n\\n\\t\\t\\twhile(rst.next()){\\n\\n\\t\\t\\t\\tNiveauDTO nomNiveau \\u003d new NiveauDTO();\\n\\t\\t\\t\\tnomNiveau.setNum(rst.getInt(1));\\n\\t\\t\\t\\tnomNiveau.setNom(rst.getString(2));\\n\\n\\t\\t\\t\\tlisteNomNiveau.add(nomNiveau);\\n\\t\\t\\t}\\n\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\t// TODO Auto-generated catch block\\n\\t\\t\\te.printStackTrace();\\n\\n\\t\\t}finally {\\n\\t\\t\\ttry {\\n\\t\\t\\t\\tif (rst !\\u003d null) {\\n\\t\\t\\t\\t\\trst.close();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (stmt !\\u003d null) {\\n\\t\\t\\t\\t\\tstmt.close();\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t} catch (SQLException e) {\\n\\t\\t\\t\\t// TODO Auto-generated catch block\\n\\t\\t\\t\\te.printStackTrace();\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn listeNomNiveau;\\n\\t}\"}","112":"{\"expressionStart\":{\"PreparedStatement.setInt()\":673,\"CompetenceDTO.setNum()\":927,\"String\":310,\"UtilisateurDTO.getNum()\":688,\"ResultSet.next()\":752,\"int:4\":985,\"int:3\":950,\"ResultSet.close()\":1200,\"int:2\":918,\"NiveauDTO.\\u003cinit\\u003e\":789,\"int:1\":685,\"\\u003cnullcheck\\u003e\":1180,\"ResultSet.getInt()\":870,\"SQLException.printStackTrace()\":1128,\"CompetenceDTO.\\u003cinit\\u003e\":831,\"ResultSet.getString()\":971,\"NiveauDTO.setCompetence()\":994,\"NiveauDTO.setNum()\":856,\"\\u003creturn\\u003e\":1373,\"NiveauDTO.setNom()\":890,\"ArrayList.\\u003cinit\\u003e\":255,\"List.add()\":1026,\"CompetenceDTO.setNom()\":959,\"Connection.prepareStatement()\":642,\"PreparedStatement.executeQuery()\":720,\"PreparedStatement.close()\":1248},\"expressionEnd\":{\"PreparedStatement.setInt()\":709,\"CompetenceDTO.setNum()\":953,\"String\":629,\"UtilisateurDTO.getNum()\":708,\"ResultSet.next()\":762,\"int:4\":986,\"int:3\":951,\"ResultSet.close()\":1211,\"int:2\":919,\"NiveauDTO.\\u003cinit\\u003e\":804,\"int:1\":686,\"\\u003cnullcheck\\u003e\":1191,\"ResultSet.getInt()\":883,\"SQLException.printStackTrace()\":1147,\"CompetenceDTO.\\u003cinit\\u003e\":850,\"ResultSet.getString()\":987,\"NiveauDTO.setCompetence()\":1020,\"NiveauDTO.setNum()\":884,\"\\u003creturn\\u003e\":1392,\"NiveauDTO.setNom()\":921,\"ArrayList.\\u003cinit\\u003e\":281,\"List.add()\":1049,\"CompetenceDTO.setNom()\":988,\"Connection.prepareStatement()\":668,\"PreparedStatement.executeQuery()\":739,\"PreparedStatement.close()\":1260},\"rawCode\":\"private List\\u003cNiveauDTO\\u003e readCompetenceNiveauUtilisateur(\\n\\t\\t\\tUtilisateurDTO utilisateur, Connection cn)\\n\\t\\t\\t\\t\\tthrows TransactionalConnectionException, DAOException {\\n\\n\\t\\tPreparedStatement pstm \\u003d null;\\n\\t\\tResultSet rst \\u003d null;\\n\\n\\t\\tList\\u003cNiveauDTO\\u003e listcompNiv \\u003d new ArrayList\\u003cNiveauDTO\\u003e();\\n\\n\\t\\ttry {\\n\\t\\t\\tString query \\u003d \\\"SELECT niveau.num, niveau.valeur as niveau, competence.num, competence.nom FROM niveau INNER JOIN competence_util ON niveau.num\\u003dcompetence_util.num_niveau INNER JOIN utilisateur ON utilisateur.num\\u003dcompetence_util.num_util INNER JOIN competence ON competence.num\\u003dcompetence_util.num_competence where utilisateur.num\\u003d?;\\\";\\n\\n\\t\\t\\tpstm \\u003d cn.prepareStatement(query);\\n\\t\\t\\tpstm.setInt(1, utilisateur.getNum());\\n\\t\\t\\trst \\u003d pstm.executeQuery();\\n\\n\\t\\t\\twhile (rst.next()) {\\n\\t\\t\\t\\tNiveauDTO niveau \\u003d new NiveauDTO();\\n\\t\\t\\t\\tCompetenceDTO comp \\u003d new CompetenceDTO();\\n\\t\\t\\t\\tniveau.setNum(rst.getInt(1));\\n\\t\\t\\t\\tniveau.setNom(rst.getString(2));\\n\\t\\t\\t\\tcomp.setNum(rst.getInt(3));\\n\\t\\t\\t\\tcomp.setNom(rst.getString(4));\\n\\t\\t\\t\\tniveau.setCompetence(comp);\\n\\t\\t\\t\\tlistcompNiv.add(niveau);\\n\\n\\t\\t\\t}\\n\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\t// TODO Auto-generated catch block\\n\\t\\t\\te.printStackTrace();\\n\\t\\t} finally {\\n\\t\\t\\ttry {\\n\\t\\t\\t\\tif (rst !\\u003d null) {\\n\\t\\t\\t\\t\\trst.close();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (pstm !\\u003d null) {\\n\\t\\t\\t\\t\\tpstm.close();\\n\\t\\t\\t\\t}\\n\\t\\t\\t} catch (SQLException e) {\\n\\t\\t\\t\\t// TODO Auto-generated catch block\\n\\t\\t\\t\\te.printStackTrace();\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn listcompNiv;\\n\\t}\"}","113":"{\"expressionStart\":{\"ResultSet.getString()\":484,\"PreparedStatement.setInt()\":336,\"NiveauDTO.setNum()\":436,\"String\":240,\"NiveauDTO.setNom()\":470,\"\\u003creturn\\u003e\":833,\"ResultSet.next()\":415,\"NiveauDTO.getNum()\":352,\"Connection.prepareStatement()\":305,\"PreparedStatement.executeQuery()\":382,\"ResultSet.close()\":657,\"int:2\":498,\"int:1\":349,\"NiveauDTO.\\u003cinit\\u003e\":205,\"PreparedStatement.close()\":706,\"\\u003cnullcheck\\u003e\":637,\"SQLException.printStackTrace()\":800,\"ResultSet.getInt()\":450},\"expressionEnd\":{\"ResultSet.getString()\":500,\"PreparedStatement.setInt()\":371,\"NiveauDTO.setNum()\":464,\"String\":284,\"NiveauDTO.setNom()\":501,\"\\u003creturn\\u003e\":847,\"ResultSet.next()\":425,\"NiveauDTO.getNum()\":370,\"Connection.prepareStatement()\":331,\"PreparedStatement.executeQuery()\":402,\"ResultSet.close()\":668,\"int:2\":499,\"int:1\":350,\"NiveauDTO.\\u003cinit\\u003e\":220,\"PreparedStatement.close()\":719,\"\\u003cnullcheck\\u003e\":648,\"SQLException.printStackTrace()\":819,\"ResultSet.getInt()\":463},\"rawCode\":\"private NiveauDTO readNiveau(NiveauDTO niveauDTO, Connection cn)\\n\\t\\t\\tthrows TransactionalConnectionException, DAOException {\\n\\n\\t\\tPreparedStatement pstmt \\u003d null;\\n\\t\\tResultSet rst \\u003d null;\\n\\n\\t\\tNiveauDTO niveau \\u003d new NiveauDTO();\\n\\n\\t\\tString query \\u003d \\\"select num, valeur from niveau where num\\u003d?\\\";\\n\\t\\ttry {\\n\\t\\t\\tpstmt \\u003d cn.prepareStatement(query);\\n\\t\\t\\tpstmt.setInt(1, niveauDTO.getNum());\\n\\t\\t\\trst \\u003d pstmt.executeQuery();\\n\\n\\t\\t\\twhile (rst.next()) {\\t\\t\\t\\n\\t\\t\\t\\tniveau.setNum(rst.getInt(1));\\n\\t\\t\\t\\tniveau.setNom(rst.getString(2));\\n\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t}\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\t// TODO Auto-generated catch block\\n\\t\\t\\te.printStackTrace();\\n\\t\\t} finally {\\n\\t\\t\\ttry {\\n\\t\\t\\t\\tif (rst !\\u003d null) {\\n\\t\\t\\t\\t\\trst.close();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (pstmt !\\u003d null) {\\n\\t\\t\\t\\t\\tpstmt.close();\\n\\t\\t\\t\\t}\\n\\t\\t\\t} catch (SQLException e) {\\n\\t\\t\\t\\t// TODO Auto-generated catch block\\n\\t\\t\\t\\te.printStackTrace();\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn niveau;\\n\\t}\"}","114":"{\"expressionStart\":{\"PreparedStatement.setInt()\":724,\"CompetenceDTO.setNum()\":1198,\"String\":308,\"ResultSet.next()\":802,\"int:6\":1221,\"int:5\":1189,\"int:4\":1152,\"int:3\":1078,\"ResultSet.close()\":1470,\"int:7\":1256,\"int:2\":1033,\"NiveauDTO.\\u003cinit\\u003e\":894,\"int:1\":736,\"\\u003cnullcheck\\u003e\":1497,\"ResultSet.getInt()\":1210,\"SQLException.printStackTrace()\":1611,\"CompetenceDTO.getNum()\":739,\"UtilisateurDTO.setPrenom()\":1042,\"UtilisateurDTO.setNom()\":1000,\"CompetenceDTO.\\u003cinit\\u003e\":936,\"ResultSet.getString()\":1064,\"NiveauDTO.setNum()\":1127,\"NiveauDTO.setCompetence()\":1265,\"UtilisateurDTO.setNum()\":961,\"NiveauDTO.setNom()\":1161,\"\\u003creturn\\u003e\":1643,\"NiveauDTO.setUtilisateur()\":1087,\"ArrayList.\\u003cinit\\u003e\":252,\"UtilisateurDTO.\\u003cinit\\u003e\":849,\"List.add()\":1298,\"Connection.prepareStatement()\":693,\"CompetenceDTO.setNom()\":1230,\"PreparedStatement.executeQuery()\":770,\"PreparedStatement.close()\":1518},\"expressionEnd\":{\"PreparedStatement.setInt()\":759,\"CompetenceDTO.setNum()\":1224,\"String\":680,\"ResultSet.next()\":812,\"int:6\":1222,\"int:5\":1190,\"int:4\":1153,\"int:3\":1079,\"ResultSet.close()\":1481,\"int:7\":1257,\"int:2\":1034,\"NiveauDTO.\\u003cinit\\u003e\":909,\"int:1\":737,\"\\u003cnullcheck\\u003e\":1509,\"ResultSet.getInt()\":1223,\"SQLException.printStackTrace()\":1630,\"CompetenceDTO.getNum()\":758,\"UtilisateurDTO.setPrenom()\":1081,\"UtilisateurDTO.setNom()\":1036,\"CompetenceDTO.\\u003cinit\\u003e\":955,\"ResultSet.getString()\":1080,\"NiveauDTO.setNum()\":1155,\"NiveauDTO.setCompetence()\":1291,\"UtilisateurDTO.setNum()\":994,\"NiveauDTO.setNom()\":1192,\"\\u003creturn\\u003e\":1661,\"NiveauDTO.setUtilisateur()\":1121,\"ArrayList.\\u003cinit\\u003e\":278,\"UtilisateurDTO.\\u003cinit\\u003e\":869,\"List.add()\":1320,\"Connection.prepareStatement()\":719,\"CompetenceDTO.setNom()\":1259,\"PreparedStatement.executeQuery()\":789,\"PreparedStatement.close()\":1530},\"rawCode\":\"private List\\u003cNiveauDTO\\u003e readNiveauUtilisateurCompetence(\\n\\t\\t\\tCompetenceDTO competence, Connection cn)\\n\\t\\t\\t\\t\\tthrows TransactionalConnectionException, DAOException {\\n\\n\\t\\tPreparedStatement pstm \\u003d null;\\n\\t\\tResultSet rst \\u003d null;\\n\\n\\t\\tList\\u003cNiveauDTO\\u003e listNiveau \\u003d new ArrayList\\u003cNiveauDTO\\u003e();\\n\\n\\t\\ttry {\\n\\n\\t\\t\\tString query \\u003d \\\"SELECT utilisateur.num, utilisateur.nom, utilisateur.prenom, niveau.num, niveau.valeur as niveau, competence.num, competence.nom FROM niveau INNER JOIN competence_util ON niveau.num\\u003dcompetence_util.num_niveau INNER JOIN utilisateur ON utilisateur.num\\u003dcompetence_util.num_util INNER JOIN competence ON competence.num\\u003dcompetence_util.num_competence where competence.num\\u003d?;\\\";\\n\\n\\t\\t\\tpstm \\u003d cn.prepareStatement(query);\\n\\t\\t\\tpstm.setInt(1, competence.getNum());\\n\\t\\t\\trst \\u003d pstm.executeQuery();\\n\\n\\t\\t\\twhile (rst.next()) {\\n\\t\\t\\t\\tUtilisateurDTO utilisateur \\u003d new UtilisateurDTO();\\n\\t\\t\\t\\tNiveauDTO niveau \\u003d new NiveauDTO();\\n\\t\\t\\t\\tCompetenceDTO comp \\u003d new CompetenceDTO();\\n\\t\\t\\t\\tutilisateur.setNum(rst.getInt(1));\\n\\t\\t\\t\\tutilisateur.setNom(rst.getString(2));\\n\\t\\t\\t\\tutilisateur.setPrenom(rst.getString(3));\\n\\t\\t\\t\\tniveau.setUtilisateur(utilisateur);\\n\\t\\t\\t\\tniveau.setNum(rst.getInt(4));\\n\\t\\t\\t\\tniveau.setNom(rst.getString(5));\\n\\t\\t\\t\\tcomp.setNum(rst.getInt(6));\\n\\t\\t\\t\\tcomp.setNom(rst.getString(7));\\n\\t\\t\\t\\tniveau.setCompetence(comp);\\n\\n\\t\\t\\t\\tlistNiveau.add(niveau);\\n\\t\\t\\t}\\n\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\t// TODO Auto-generated catch block\\n\\t\\t\\te.printStackTrace();\\n\\t\\t} finally {\\n\\t\\t\\ttry {\\n\\t\\t\\t\\tif (rst !\\u003d null) {\\n\\t\\t\\t\\t\\trst.close();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (pstm !\\u003d null) {\\n\\t\\t\\t\\t\\tpstm.close();\\n\\t\\t\\t\\t}\\n\\t\\t\\t} catch (SQLException e) {\\n\\t\\t\\t\\t// TODO Auto-generated catch block\\n\\t\\t\\t\\te.printStackTrace();\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn listNiveau;\\n\\t}\"}","115":"{\"expressionStart\":{\"ResultSet.getString()\":163,\"String.trim()\":228,\"\\u003creturn\\u003e\":248,\"\\u003cnullcheck\\u003e\":197},\"expressionEnd\":{\"ResultSet.getString()\":183,\"String.trim()\":238,\"\\u003creturn\\u003e\":259,\"\\u003cnullcheck\\u003e\":208},\"rawCode\":\"@Override\\n    public String getString(ResultSet rs, int column)\\n        throws SQLException {\\n        // foxpro doesn\\u0027t auto-truncate values.\\n        String str \\u003d rs.getString(column);\\n        if (str !\\u003d null)\\n            str \\u003d str.trim();\\n        return str;\\n    }\"}","116":"{\"expressionStart\":{\"Connection.setAutoCommit()\":1601,\"boolean:false\":1618,\"\\u003cr\\u003e\":1798,\"PreparedStatement.setInt()\":2119,\"DepurarPersona.abrir()\":130,\"String\":2008,\"PreparedStatement.addBatch()\":1883,\"ResultSet.next()\":1397,\"pipol.setNombre()\":1470,\"pipol.setId()\":1441,\"List.get()\":1834,\"List.size()\":1800,\"PreparedStatement.executeBatch()\":1944,\"pipol.setApellido()\":1506,\"Connection.commit()\":2246,\"int:1\":1415,\"int:0\":63,\"SQLException.printStackTrace()\":2434,\"ResultSet.getInt()\":1449,\"pipol.setDoc()\":1544,\"pipol.\\u003cinit\\u003e\":1424,\"ResultSet.getString()\":1520,\"pipol.\\u003ccast\\u003e\":1827,\"SQLException.getNextException()\":2407,\"ArrayList.\\u003cinit\\u003e\":38,\"List.add()\":1577,\"pipol.getId()\":2132,\"Connection.prepareStatement()\":163,\"PreparedStatement.executeQuery()\":1369,\"\\u003ca\\u003e\":1495,\"Exception.printStackTrace()\":2530,\"UNKNOWN.println()\":1906},\"expressionEnd\":{\"Connection.setAutoCommit()\":1624,\"boolean:false\":1623,\"\\u003cr\\u003e\":1814,\"PreparedStatement.setInt()\":2142,\"DepurarPersona.abrir()\":137,\"String\":2044,\"PreparedStatement.addBatch()\":1896,\"ResultSet.next()\":1406,\"pipol.setNombre()\":1500,\"pipol.setId()\":1464,\"List.get()\":1848,\"List.size()\":1814,\"PreparedStatement.executeBatch()\":1961,\"pipol.setApellido()\":1538,\"Connection.commit()\":2257,\"int:1\":1416,\"int:0\":64,\"SQLException.printStackTrace()\":2453,\"ResultSet.getInt()\":1463,\"pipol.setDoc()\":1571,\"pipol.\\u003cinit\\u003e\":1435,\"ResultSet.getString()\":1537,\"pipol.\\u003ccast\\u003e\":1848,\"SQLException.getNextException()\":2427,\"ArrayList.\\u003cinit\\u003e\":53,\"List.add()\":1591,\"pipol.getId()\":2141,\"Connection.prepareStatement()\":1361,\"PreparedStatement.executeQuery()\":1386,\"\\u003ca\\u003e\":1498,\"Exception.printStackTrace()\":2549,\"UNKNOWN.println()\":1980},\"rawCode\":\"public void depurar(){\\n\\t\\tList paMatar\\u003dnew ArrayList();\\n\\t\\tint i\\u003d0;\\n\\t\\tpipol p\\u003dnull;\\n\\t\\ttry {\\n\\t\\t\\tResultSet rs\\u003dnull;\\n\\t\\t\\tConnection cn \\u003dabrir();\\n\\t\\t\\tPreparedStatement ps\\u003dcn.prepareStatement(\\\"select perid,pernombres,perapellidos,pernumdoc from personal where (pernumdoc is null or pernumdoc \\u003d\\u0027\\u0027) and \\\"+ \\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\"perid \\u003c\\u003e all(select distinct perid from personal,inscrip_propuesta where inscinvprin\\u003dperid and (pernumdoc is null or pernumdoc \\u003d\\u0027\\u0027)) and \\\"+\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\"perid \\u003c\\u003e all(select distinct perid from personal,cidc_grup_semill where cgsdirector\\u003dperid and (pernumdoc is null or pernumdoc \\u003d\\u0027\\u0027)) and \\\"+\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\"perid \\u003c\\u003e all(select distinct perid from personal,pa_proy_data_gral where ppdginvesproy\\u003dperid and (pernumdoc is null or pernumdoc \\u003d\\u0027\\u0027)) and \\\"+\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\"perid \\u003c\\u003e all(select distinct perid from personal,b_pares where beidpersona\\u003dperid and (pernumdoc is null or pernumdoc \\u003d\\u0027\\u0027)) and \\\"+\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\"perid \\u003c\\u003e all(select perid from personal,usuario_sistema where (pernumdoc is null or pernumdoc \\u003d\\u0027\\u0027) and usidpersona\\u003dperid) and \\\"+\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\"perid \\u003c\\u003e 0 and perid \\u003c\\u003e 7 and perid \\u003c\\u003e 11 and perid \\u003c\\u003e 8 and perid \\u003c\\u003e 9 and perid \\u003c\\u003e 10 and perid \\u003c\\u003e 12 and perid \\u003c\\u003e 13 and perid \\u003c\\u003e 18 and \\\"+\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\"perid \\u003c\\u003e 3455 and perid \\u003c\\u003e 4493 and perid \\u003c\\u003e 4494 and perid \\u003c\\u003e 4495 and perid \\u003c\\u003e 4496 and perid \\u003c\\u003e 4497\\\"+\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\"order by perid\\\");\\n\\t\\t\\trs\\u003dps.executeQuery();\\n\\t\\t\\twhile(rs.next()){\\n\\t\\t\\t\\ti\\u003d1;\\n\\t\\t\\t\\tp\\u003dnew pipol();\\n\\t\\t\\t\\tp.setId(rs.getInt(i++));\\n\\t\\t\\t\\tp.setNombre(rs.getString(i++));\\n\\t\\t\\t\\tp.setApellido(rs.getString(i++));\\n\\t\\t\\t\\tp.setDoc(rs.getString(i++));\\n\\t\\t\\t\\tpaMatar.add(p);\\n\\t\\t\\t}\\n\\t\\t\\tcn.setAutoCommit(false);\\n\\t\\t\\tSystem.out.println(\\\"---Hay que eliminar a --\\u003e\\\"+paMatar.size()+\\\" Personas\\\");\\n\\t\\t\\tps\\u003dcn.prepareStatement(\\\"delete from b_investigadores where binvidper\\u003d?\\\");\\n\\t\\t\\tfor(int j \\u003d0;j\\u003cpaMatar.size();j++){\\n\\t\\t\\t\\tp\\u003d(pipol)paMatar.get(j);\\n\\t\\t\\t\\tps.setInt(1, p.getId());\\n\\t\\t\\t\\tps.addBatch();\\n\\t\\t\\t}\\n\\t\\t\\tSystem.out.println(\\\"---eliminados--\\u003e\\\"+ps.executeBatch()+\\\" investigadores\\\");\\n\\t\\t\\tps\\u003dcn.prepareStatement(\\\"delete from personal where perid\\u003d?\\\");\\n\\t\\t\\tfor(int j \\u003d0;j\\u003cpaMatar.size();j++){\\n\\t\\t\\t\\tp\\u003d(pipol)paMatar.get(j);\\n\\t\\t\\t\\tps.setInt(1, p.getId());\\n\\t\\t\\t\\tps.addBatch();\\n\\t\\t\\t}\\n\\t\\t\\tSystem.out.println(\\\"---eliminados--\\u003e\\\"+ps.executeBatch()+\\\" personajes\\\");\\n\\t\\t\\tcn.commit();\\n\\t\\t\\tSystem.out.println(\\\"---proceso terminado--\\u003e\\\");\\n\\t\\t}catch (SQLException e) {\\n\\t\\t\\t\\t// TODO Auto-generated catch block\\n\\t\\t\\tSystem.out.println(\\\"-----\\u003e\\\"+e.getNextException());\\n\\t\\t\\t\\te.printStackTrace();\\n\\t\\t\\t\\t\\n\\t\\t\\t}\\n\\t\\tcatch (Exception e) {\\n\\t\\t\\t// TODO Auto-generated catch block\\n\\t\\t\\te.printStackTrace();\\n\\t\\t}\\n\\t}\"}","117":"{\"expressionStart\":{\"Map.remove()\":822,\"boolean:false\":469,\"UNKNOWN.equals()\":182,\"User.connected()\":1163,\"String\":596,\"User.getUsername()\":992,\"ResultSet.next()\":555,\"ChatServer.initUserGroups()\":1244,\"DBHandler.getUserMemberships()\":506,\"TransportObject.\\u003cinit\\u003e\":1078,\"BlockingQueue.poll()\":895,\"UNKNOWN.unlock()\":1278,\"TestChatServer.logUserLogin()\":1187,\"Map.get()\":624,\"\\u003cnullcheck\\u003e\":923,\"Map.put()\":1018,\"SQLException.printStackTrace()\":731,\"ChatGroup.removeLoggedInUser()\":662,\"Set.remove()\":332,\"User.logoff()\":223,\"ResultSet.getString()\":583,\"ReentrantReadWriteLock.writeLock()\":1278,\"\\u003creturn\\u003e\":462,\"boolean:true\":1315,\"User.queueReply()\":1133,\"UNKNOWN.lock()\":54,\"Map.containsKey()\":86,\"UNKNOWN.logoff()\":758,\"null:null\":135,\"Date.\\u003cinit\\u003e\":1228,\"BlockingQueue.remove()\":296},\"expressionEnd\":{\"Map.remove()\":844,\"boolean:false\":474,\"UNKNOWN.equals()\":214,\"User.connected()\":1182,\"String\":603,\"User.getUsername()\":1013,\"ResultSet.next()\":564,\"ChatServer.initUserGroups()\":1267,\"DBHandler.getUserMemberships()\":544,\"TransportObject.\\u003cinit\\u003e\":1128,\"BlockingQueue.poll()\":915,\"UNKNOWN.unlock()\":1303,\"TestChatServer.logUserLogin()\":1239,\"Map.get()\":637,\"\\u003cnullcheck\\u003e\":938,\"Map.put()\":1049,\"SQLException.printStackTrace()\":750,\"ChatGroup.removeLoggedInUser()\":692,\"Set.remove()\":374,\"User.logoff()\":233,\"ResultSet.getString()\":604,\"ReentrantReadWriteLock.writeLock()\":1294,\"\\u003creturn\\u003e\":475,\"boolean:true\":1319,\"User.queueReply()\":1158,\"UNKNOWN.lock()\":77,\"Map.containsKey()\":113,\"UNKNOWN.logoff()\":786,\"null:null\":139,\"Date.\\u003cinit\\u003e\":1238,\"BlockingQueue.remove()\":326},\"rawCode\":\"@Override\\n\\tpublic boolean logoff(String username) {\\n\\t\\tlock.writeLock().lock();\\n\\t\\tif (!users.containsKey(username)){\\n\\t\\t\\tUser toRemove \\u003d null;\\n\\t\\t\\tfor (User u : waiting_users) {\\n\\t\\t\\t\\tif(u.getUsername().equals(username)) {\\n\\t\\t\\t\\t\\tu.logoff();\\n\\t\\t\\t\\t\\ttoRemove \\u003d u;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (toRemove !\\u003d null) {\\n\\t\\t\\t\\twaiting_users.remove(toRemove);\\n\\t\\t\\t\\tonlineNames.remove(toRemove.getUsername());\\n\\t\\t\\t\\tlock.writeLock().unlock();\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t\\tlock.writeLock().unlock();\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t\\ttry {\\n\\t\\t\\tResultSet rs \\u003d DBHandler.getUserMemberships(username);\\n\\t\\t\\twhile(rs.next()) {\\n\\t\\t\\t\\tString g \\u003d rs.getString(\\\"gname\\\");\\n\\t\\t\\t\\tChatGroup c \\u003d groups.get(g);\\n\\t\\t\\t\\tif(c !\\u003d null)\\n\\t\\t\\t\\t\\tc.removeLoggedInUser(username);\\n\\t\\t\\t}\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\te.printStackTrace();\\n\\t\\t}\\n\\t\\tusers.get(username).logoff();\\n\\t\\tonlineNames.remove(username);\\n\\t\\tusers.remove(username);\\n\\t\\t\\n\\t\\t// Check for waiting users\\n\\t\\tUser newUser \\u003d waiting_users.poll();\\n\\t\\tif (newUser !\\u003d null) {\\t\\t\\t\\t\\t\\t\\t//add to ChatServer\\n\\t\\t\\tString newUsername \\u003d newUser.getUsername();\\n\\t\\t\\tusers.put(newUsername, newUser);\\n\\t\\t\\tTransportObject reply \\u003d new TransportObject(Command.login, ServerReply.OK);\\n\\t\\t\\tnewUser.queueReply(reply);\\n\\t\\t\\tnewUser.connected();\\n\\t\\t\\tTestChatServer.logUserLogin(newUsername, new Date());\\n\\t\\t\\tinitUserGroups(newUser);\\n\\t\\t}\\n\\t\\t\\n\\t\\tlock.writeLock().unlock();\\t\\n\\t\\treturn true;\\n\\t}\"}","118":"{\"expressionStart\":{\"User.addToGroups()\":245,\"ResultSet.getString()\":170,\"ChatGroup.addLoggedInUser()\":198,\"String\":183,\"User.getUsername()\":220,\"Exception.printStackTrace()\":311,\"ChatGroup.getName()\":259,\"Map.get()\":159,\"ResultSet.next()\":125,\"DBHandler.getUserMemberships()\":69},\"expressionEnd\":{\"User.addToGroups()\":275,\"ResultSet.getString()\":191,\"ChatGroup.addLoggedInUser()\":239,\"String\":190,\"User.getUsername()\":235,\"Exception.printStackTrace()\":330,\"ChatGroup.getName()\":274,\"Map.get()\":192,\"ResultSet.next()\":134,\"DBHandler.getUserMemberships()\":114},\"rawCode\":\"private void initUserGroups(User u){\\n\\t\\tResultSet rs;\\n\\t\\ttry {\\n\\t\\t\\trs \\u003d DBHandler.getUserMemberships(u.getUsername());\\n\\t\\t\\twhile(rs.next()){\\n\\t\\t\\t\\tChatGroup group \\u003d groups.get(rs.getString(\\\"gname\\\"));\\n\\t\\t\\t\\tgroup.addLoggedInUser(u.getUsername(), u);\\n\\t\\t\\t\\tu.addToGroups(group.getName());\\n\\t\\t\\t}\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\te.printStackTrace();\\n\\t\\t}\\n\\t}\"}","119":"{\"expressionStart\":{\"\\u003cthrow\\u003e\":1686,\"PreparedStatement.executeUpdate()\":1163,\"byte[].arrayset()\":430,\"\\u003cr\\u003e\":671,\"PreparedStatement.setInt()\":1103,\"String\":800,\"{char}\":308,\"ResultSet.next()\":1413,\"Exception.\\u003cinit\\u003e\":1692,\"ResultSet.close()\":2279,\"int:20\":1123,\"{byte}\":275,\"int:2\":1151,\"byte[].arrayget()\":703,\"int:1\":1120,\"\\u003cnullcheck\\u003e\":1469,\"int:0\":376,\"PreparedStatement.setString()\":1131,\"String.\\u003cinit\\u003e\":536,\"String.length()\":1646,\"Log.info()\":2198,\"PreparedStatement.clearParameters()\":1071,\"String:\":2130,\"char[].arrayget()\":819,\"ResultSet.getString()\":1440,\"IllegalStateException.\\u003cinit\\u003e\":1493,\"ByteStorageConversion.toByte()\":591,\"int\":284,\"int.\\u003ccast\\u003e\":813,\"ByteStorageConversion.toChar()\":463,\"Connection.prepareStatement()\":980,\"String.toCharArray()\":1554,\"PreparedStatement.executeQuery()\":1356,\"byte.\\u003ccast\\u003e\":441,\"null:null\":1400,\"\\u003ca\\u003e\":687,\"PreparedStatement.close()\":2423},\"expressionEnd\":{\"\\u003cthrow\\u003e\":1860,\"PreparedStatement.executeUpdate()\":1188,\"byte[].arrayset()\":438,\"\\u003cr\\u003e\":685,\"PreparedStatement.setInt()\":1126,\"String\":804,\"{char}\":324,\"ResultSet.next()\":1422,\"Exception.\\u003cinit\\u003e\":1859,\"ResultSet.close()\":2289,\"int:20\":1125,\"{byte}\":291,\"int:2\":1152,\"byte[].arrayget()\":709,\"int:1\":1121,\"\\u003cnullcheck\\u003e\":1481,\"int:0\":377,\"PreparedStatement.setString()\":1158,\"String.\\u003cinit\\u003e\":551,\"String.length()\":1658,\"Log.info()\":2242,\"PreparedStatement.clearParameters()\":1098,\"String:\":2132,\"char[].arrayget()\":825,\"ResultSet.getString()\":1455,\"IllegalStateException.\\u003cinit\\u003e\":1542,\"ByteStorageConversion.toByte()\":650,\"int\":290,\"int.\\u003ccast\\u003e\":825,\"ByteStorageConversion.toChar()\":519,\"Connection.prepareStatement()\":1066,\"String.toCharArray()\":1572,\"PreparedStatement.executeQuery()\":1381,\"byte.\\u003ccast\\u003e\":450,\"null:null\":1404,\"\\u003ca\\u003e\":690,\"PreparedStatement.close()\":2440},\"rawCode\":\"public void testUTF8Transport(Connection connection) throws Exception\\n\\t{\\n\\t\\t/*\\n\\t\\t * byte[] b \\u003d new byte[102400]; byte[] b2 \\u003d new byte[102400]; byte[] b3 \\u003d\\n\\t\\t * new byte[102400]; char[] cin \\u003d new char[102400]; Random r \\u003d new\\n\\t\\t * Random(); r.nextBytes(b);\\n\\t\\t */\\n\\t\\tbyte[] bin \\u003d new byte[102400];\\n\\t\\tchar[] cin \\u003d new char[102400];\\n\\t\\tbyte[] bout \\u003d new byte[102400];\\n\\n\\t\\t{\\n\\t\\t\\tint i \\u003d 0;\\n\\t\\t\\tfor (int bx \\u003d 0; i \\u003c bin.length; bx++)\\n\\t\\t\\t{\\n\\t\\t\\t\\tbin[i++] \\u003d (byte) bx;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tByteStorageConversion.toChar(bin, 0, cin, 0, cin.length);\\n\\t\\tString sin \\u003d new String(cin);\\n\\n\\t\\tchar[] cout \\u003d sin.toCharArray();\\n\\t\\tByteStorageConversion.toByte(cout, 0, bout, 0, cout.length);\\n\\n\\t\\tfor (int i \\u003d 0; i \\u003c bin.length; i++)\\n\\t\\t{\\n\\t\\t\\tif (bin[i] !\\u003d bout[i])\\n\\t\\t\\t{\\n\\t\\t\\t\\tthrow new Exception(\\\"Internal Byte conversion failed at \\\" + bin[i] + \\\"\\u003d\\u003e\\\"\\n\\t\\t\\t\\t\\t\\t+ (int) cin[i] + \\\"\\u003d\\u003e\\\" + bout[i]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tPreparedStatement statement \\u003d null;\\n\\t\\tPreparedStatement statement2 \\u003d null;\\n\\t\\tResultSet rs \\u003d null;\\n\\t\\ttry\\n\\t\\t{\\n\\t\\t\\tstatement \\u003d connection\\n\\t\\t\\t\\t\\t.prepareStatement(\\\"insert into blobtest ( id, bval ) values ( ?, ? )\\\");\\n\\t\\t\\tstatement.clearParameters();\\n\\t\\t\\tstatement.setInt(1, 20);\\n\\t\\t\\tstatement.setString(2, sin);\\n\\t\\t\\tstatement.executeUpdate();\\n\\n\\t\\t\\tstatement2 \\u003d connection\\n\\t\\t\\t\\t\\t.prepareStatement(\\\"select bval from blobtest where id \\u003d  ? \\\");\\n\\t\\t\\tstatement2.clearParameters();\\n\\t\\t\\tstatement2.setInt(1, 20);\\n\\t\\t\\trs \\u003d statement2.executeQuery();\\n\\t\\t\\tString sout \\u003d null;\\n\\t\\t\\tif (rs.next())\\n\\t\\t\\t{\\n\\t\\t\\t\\tsout \\u003d rs.getString(1);\\n\\t\\t\\t}\\n\\n\\t\\t\\tif(sout \\u003d\\u003d null)\\n\\t\\t\\t\\tthrow new IllegalStateException(\\\"String sout \\u003d\\u003d null!\\\");\\n\\t\\t\\tcout \\u003d sout.toCharArray();\\n\\t\\t\\tByteStorageConversion.toByte(cout, 0, bout, 0, cout.length);\\n\\n\\t\\t\\tif (sin.length() !\\u003d sout.length())\\n\\t\\t\\t{\\n\\t\\t\\t\\tthrow new Exception(\\n\\t\\t\\t\\t\\t\\t\\\"UTF-8 Data was lost communicating with the database, please \\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t+ \\\"check connection string and default table types (Truncation/Expansion)\\\");\\n\\t\\t\\t}\\n\\n\\t\\t\\tfor (int i \\u003d 0; i \\u003c bin.length; i++)\\n\\t\\t\\t{\\n\\t\\t\\t\\tif (bin[i] !\\u003d bout[i])\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tthrow new Exception(\\n\\t\\t\\t\\t\\t\\t\\t\\\"UTF-8 Data was corrupted communicating with the database, \\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t+ \\\"please check connectionstring and default table types (Conversion)\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t+ \\\"\\\" + bin[i] + \\\"\\u003d\\u003e\\\" + (int) cin[i] + \\\"\\u003d\\u003e\\\" + bout[i]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tlog.info(\\\"DB Connection passes UTF-8 tests\\\");\\n\\n\\t\\t}\\n\\t\\tfinally\\n\\t\\t{\\n\\t\\t\\ttry\\n\\t\\t\\t{\\n\\t\\t\\t\\trs.close();\\n\\t\\t\\t}\\n\\t\\t\\tcatch (Exception ex)\\n\\t\\t\\t{\\n\\n\\t\\t\\t}\\n\\t\\t\\ttry\\n\\t\\t\\t{\\n\\t\\t\\t\\tstatement2.close();\\n\\t\\t\\t}\\n\\t\\t\\tcatch (Exception ex)\\n\\t\\t\\t{\\n\\n\\t\\t\\t}\\n\\t\\t\\ttry\\n\\t\\t\\t{\\n\\t\\t\\t\\tstatement.close();\\n\\t\\t\\t}\\n\\t\\t\\tcatch (Exception ex)\\n\\t\\t\\t{\\n\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t}\"}","120":"{\"expressionStart\":{\"String:PRIVILEGE\":1638,\"DatabaseMetaDataNotSupportedTest.assertEquals()\":3093,\"String:TABLE_SCHEM\":1425,\"String:%\":337,\"HashSet.remove()\":1672,\"String:TABLE_CAT\":1350,\"\\u003cr\\u003e\":2707,\"String:TABLE_NAME\":1557,\"String: FROM \":2324,\"String\":1795,\"Connection.getCatalog()\":1130,\"ResultSet.next()\":4596,\"HashSet.add()\":855,\"DatabaseMetaDataNotSupportedTest.assertFalse()\":4558,\"ResultSet.close()\":4624,\"String:GRANTOR\":1863,\"DatabaseMetaData.getTablePrivileges()\":579,\"HashSet.\\u003cinit\\u003e\":824,\"int:0\":2704,\"String:GRANTEE\":1987,\"ResultSet.getString()\":3247,\"HashSet.isEmpty()\":2205,\"DatabaseMetaDataNotSupportedTest.assertNull()\":2012,\"{String}\":2482,\"DatabaseMetaDataNotSupportedTest.assertTrue()\":1585,\"String[].arrayget()\":2762,\"Statement.execute()\":1058,\"null:null\":615,\"\\u003ca\\u003e\":2725},\"expressionEnd\":{\"String:PRIVILEGE\":1649,\"DatabaseMetaDataNotSupportedTest.assertEquals()\":3206,\"String:TABLE_SCHEM\":1438,\"String:%\":340,\"HashSet.remove()\":1727,\"String:TABLE_CAT\":1361,\"\\u003cr\\u003e\":2723,\"String:TABLE_NAME\":1569,\"String: FROM \":2332,\"String\":1798,\"Connection.getCatalog()\":1147,\"ResultSet.next()\":4613,\"HashSet.add()\":882,\"DatabaseMetaDataNotSupportedTest.assertFalse()\":4614,\"ResultSet.close()\":4642,\"String:GRANTOR\":1872,\"DatabaseMetaData.getTablePrivileges()\":620,\"HashSet.\\u003cinit\\u003e\":845,\"int:0\":2705,\"String:GRANTEE\":1996,\"ResultSet.getString()\":3282,\"HashSet.isEmpty()\":2228,\"DatabaseMetaDataNotSupportedTest.assertNull()\":2112,\"{String}\":2634,\"DatabaseMetaDataNotSupportedTest.assertTrue()\":1728,\"String[].arrayget()\":2770,\"Statement.execute()\":1082,\"null:null\":619,\"\\u003ca\\u003e\":2728},\"rawCode\":\"@KnownFailure(\\\"not supported. Privileges are not supported.\\\")\\n    public void test_getTablePrivilegesLjava_lang_StringLjava_lang_StringLjava_lang_String()\\n            throws SQLException {\\n        // case 1. Get privileges when no privilegies exist for one table\\n        ResultSet privileges \\u003d meta.getTablePrivileges(conn.getCatalog(), \\\"%\\\",\\n                DatabaseCreator.TEST_TABLE3);\\n        assertFalse(\\\"Some privilegies exist\\\", privileges.next());\\n        privileges.close();\\n\\n        // case 2. Get privileges when no privilegies exist for all tables\\n        privileges \\u003d meta.getTablePrivileges(null, null, null);\\n        assertFalse(\\\"Some privilegies exist\\\", privileges.next());\\n        privileges.close();\\n\\n        // case 3. grant CREATE and SELECT privileges ang get them\\n        HashSet\\u003cString\\u003e expectedPrivs \\u003d new HashSet\\u003cString\\u003e();\\n        expectedPrivs.add(\\\"CREATE\\\");\\n        expectedPrivs.add(\\\"SELECT\\\");\\n\\n        String query \\u003d \\\"GRANT CREATE, SELECT ON \\\" + DatabaseCreator.TEST_TABLE3\\n                + \\\" TO \\\" + Support_SQL.sqlUser;\\n        statement.execute(query);\\n\\n        privileges \\u003d meta.getTablePrivileges(conn.getCatalog(), null,\\n                DatabaseCreator.TEST_TABLE3);\\n\\n        while (privileges.next()) {\\n            assertEquals(\\\"Wrong catalog name\\\", Support_SQL.sqlCatalog,\\n                    privileges.getString(\\\"TABLE_CAT\\\"));\\n            assertNull(\\\"Wrong schema\\\", privileges.getString(\\\"TABLE_SCHEM\\\"));\\n            assertEquals(\\\"Wrong table name\\\", DatabaseCreator.TEST_TABLE3,\\n                    privileges.getString(\\\"TABLE_NAME\\\"));\\n            assertTrue(\\\"Wrong privilege \\\" + privileges.getString(\\\"PRIVILEGE\\\"),\\n                    expectedPrivs.remove(privileges.getString(\\\"PRIVILEGE\\\")));\\n            assertEquals(\\\"Wrong grantor\\\", Support_SQL.sqlLogin + \\\"@\\\"\\n                    + Support_SQL.sqlHost, privileges.getString(\\\"GRANTOR\\\"));\\n            assertEquals(\\\"Wrong grantee\\\", Support_SQL.sqlUser + \\\"@%\\\",\\n                    privileges.getString(\\\"GRANTEE\\\"));\\n            assertNull(\\\"Wrong value of IS_GRANTABLE\\\", privileges\\n                    .getString(\\\"IS_GRANTABLE\\\"));\\n        }\\n        privileges.close();\\n        assertTrue(\\\"Wrong privileges were returned\\\", expectedPrivs.isEmpty());\\n\\n        query \\u003d \\\"REVOKE CREATE, SELECT ON \\\" + DatabaseCreator.TEST_TABLE3\\n                + \\\" FROM \\\" + Support_SQL.sqlUser;\\n        statement.execute(query);\\n\\n        // case 4. grant all privileges ang get them\\n        String[] privs \\u003d new String[] { \\\"ALTER\\\", \\\"CREATE\\\", \\\"CREATE VIEW\\\",\\n                \\\"DELETE\\\", \\\"DROP\\\", \\\"INDEX\\\", \\\"INSERT\\\", \\\"REFERENCES\\\", \\\"SELECT\\\",\\n                \\\"SHOW VIEW\\\", \\\"UPDATE\\\" };\\n        expectedPrivs \\u003d new HashSet\\u003cString\\u003e();\\n        for (int i \\u003d 0; i \\u003c privs.length; i++) {\\n            expectedPrivs.add(privs[i]);\\n        }\\n        query \\u003d \\\"GRANT ALL ON \\\" + DatabaseCreator.TEST_TABLE3 + \\\" TO \\\"\\n                + Support_SQL.sqlUser;\\n        statement.execute(query);\\n\\n        privileges \\u003d meta.getTablePrivileges(conn.getCatalog(), null,\\n                DatabaseCreator.TEST_TABLE3);\\n\\n        while (privileges.next()) {\\n            assertEquals(\\\"Wrong catalog name\\\", Support_SQL.sqlCatalog,\\n                    privileges.getString(\\\"TABLE_CAT\\\"));\\n            assertNull(\\\"Wrong schema\\\", privileges.getString(\\\"TABLE_SCHEM\\\"));\\n            assertEquals(\\\"Wrong table name\\\", DatabaseCreator.TEST_TABLE3,\\n                    privileges.getString(\\\"TABLE_NAME\\\"));\\n            assertTrue(\\\"Wrong privilege \\\" + privileges.getString(\\\"PRIVILEGE\\\"),\\n                    expectedPrivs.remove(privileges.getString(\\\"PRIVILEGE\\\")));\\n            assertEquals(\\\"Wrong grantor\\\", Support_SQL.sqlLogin + \\\"@\\\"\\n                    + Support_SQL.sqlHost, privileges.getString(\\\"GRANTOR\\\"));\\n            assertEquals(\\\"Wrong grantee\\\", Support_SQL.sqlUser + \\\"@%\\\",\\n                    privileges.getString(\\\"GRANTEE\\\"));\\n            assertNull(\\\"Wrong value of IS_GRANTABLE\\\", privileges\\n                    .getString(\\\"IS_GRANTABLE\\\"));\\n        }\\n        privileges.close();\\n        assertTrue(\\\"Wrong privileges were returned\\\", expectedPrivs.isEmpty());\\n\\n        query \\u003d \\\"REVOKE ALL ON \\\" + DatabaseCreator.TEST_TABLE3 + \\\" FROM \\\"\\n                + Support_SQL.sqlUser;\\n        statement.execute(query);\\n\\n        // case 5. check no privelegies after revoke\\n        privileges \\u003d meta.getTablePrivileges(conn.getCatalog(), \\\"%\\\",\\n                DatabaseCreator.TEST_TABLE3);\\n        assertFalse(\\\"Some privilegies exist\\\", privileges.next());\\n        privileges.close();\\n\\n        privileges \\u003d meta.getTablePrivileges(null, null, null);\\n        assertFalse(\\\"Some privilegies exist\\\", privileges.next());\\n        privileges.close();\\n    }\"}","121":"{\"expressionStart\":{\"DatabaseMetaDataNotSupportedTest.assertEquals()\":1449,\"\\u003cr\\u003e\":813,\"String:UPDATE_RULE\":702,\"String\":1587,\"String:FKTABLE_SCHEM\":625,\"Connection.getCatalog()\":1016,\"ResultSet.next()\":365,\"ResultSetMetaData.getColumnCount()\":395,\"String:FKCOLUMN_NAME\":658,\"String:DEFERRABILITY\":770,\"ResultSet.getShort()\":2148,\"ResultSetMetaData.getColumnName()\":900,\"ResultSet.close()\":2711,\"String:FKTABLE_CAT\":594,\"DatabaseMetaDataNotSupportedTest.assertNotNull()\":2370,\"DatabaseMetaData.getExportedKeys()\":179,\"int:1\":810,\"String:PKTABLE_CAT\":513,\"String:PK_NAME\":743,\"String:PKTABLE_SCHEM\":528,\"String:PKCOLUMN_NAME\":577,\"String:PKTABLE_NAME\":561,\"String:KEY_SEQ\":675,\"String:FK_NAME\":732,\"ResultSet.getString()\":1631,\"ResultSet.getMetaData()\":304,\"String:Incorrect number of columns\":439,\"String:Incorrect column name\":855,\"{String}\":511,\"String:DELETE_RULE\":717,\"DatabaseMetaDataNotSupportedTest.assertTrue()\":330,\"String[].arrayget()\":880,\"null:null\":1625,\"\\u003ca\\u003e\":823,\"int:14\":470,\"String:FKTABLE_NAME\":642},\"expressionEnd\":{\"DatabaseMetaDataNotSupportedTest.assertEquals()\":1564,\"\\u003cr\\u003e\":821,\"String:UPDATE_RULE\":715,\"String\":1623,\"String:FKTABLE_SCHEM\":640,\"Connection.getCatalog()\":1033,\"ResultSet.next()\":374,\"ResultSetMetaData.getColumnCount()\":416,\"String:FKCOLUMN_NAME\":673,\"String:DEFERRABILITY\":785,\"ResultSet.getShort()\":2199,\"ResultSetMetaData.getColumnName()\":942,\"ResultSet.close()\":2721,\"String:FKTABLE_CAT\":607,\"DatabaseMetaDataNotSupportedTest.assertNotNull()\":2438,\"DatabaseMetaData.getExportedKeys()\":269,\"int:1\":811,\"String:PKTABLE_CAT\":526,\"String:PK_NAME\":752,\"String:PKTABLE_SCHEM\":543,\"String:PKCOLUMN_NAME\":592,\"String:PKTABLE_NAME\":575,\"String:KEY_SEQ\":684,\"String:FK_NAME\":741,\"ResultSet.getString()\":1677,\"ResultSet.getMetaData()\":320,\"String:Incorrect number of columns\":468,\"String:Incorrect column name\":878,\"{String}\":787,\"String:DELETE_RULE\":730,\"DatabaseMetaDataNotSupportedTest.assertTrue()\":375,\"String[].arrayget()\":898,\"null:null\":1629,\"\\u003ca\\u003e\":826,\"int:14\":472,\"String:FKTABLE_NAME\":656},\"rawCode\":\"@KnownFailure(\\\"not supported\\\")\\n     public void test_getExportedKeysLjava_lang_StringLjava_lang_StringLjava_lang_String()\\n            throws SQLException {\\n        ResultSet rs \\u003d meta.getExportedKeys(conn.getCatalog(), null,\\n                DatabaseCreator.TEST_TABLE3);\\n        ResultSetMetaData rsmd \\u003d rs.getMetaData();\\n        assertTrue(\\\"Rows do not obtained\\\", rs.next());\\n        int col \\u003d rsmd.getColumnCount();\\n        assertEquals(\\\"Incorrect number of columns\\\", 14, col);\\n        String[] columnNames \\u003d { \\\"PKTABLE_CAT\\\", \\\"PKTABLE_SCHEM\\\",\\n                \\\"PKTABLE_NAME\\\", \\\"PKCOLUMN_NAME\\\", \\\"FKTABLE_CAT\\\",\\n                \\\"FKTABLE_SCHEM\\\", \\\"FKTABLE_NAME\\\", \\\"FKCOLUMN_NAME\\\", \\\"KEY_SEQ\\\",\\n                \\\"UPDATE_RULE\\\", \\\"DELETE_RULE\\\", \\\"FK_NAME\\\", \\\"PK_NAME\\\",\\n                \\\"DEFERRABILITY\\\" };\\n        for (int c \\u003d 1; c \\u003c\\u003d col; ++c) {\\n            assertEquals(\\\"Incorrect column name\\\", columnNames[c - 1], rsmd\\n                    .getColumnName(c));\\n        }\\n\\n        assertEquals(\\\"Incorrect primary key table catalog\\\", conn.getCatalog(),\\n                rs.getString(\\\"PKTABLE_CAT\\\"));\\n        assertEquals(\\\"Incorrect primary key table schema\\\", null, rs\\n                .getString(\\\"PKTABLE_SCHEM\\\"));\\n        assertEquals(\\\"Incorrect primary key table name\\\",\\n                DatabaseCreator.TEST_TABLE3, rs.getString(\\\"PKTABLE_NAME\\\"));\\n        assertEquals(\\\"Incorrect primary key column name\\\", \\\"fk\\\", rs\\n                .getString(\\\"PKCOLUMN_NAME\\\"));\\n        assertEquals(\\\"Incorrect foreign key table catalog\\\", conn.getCatalog(),\\n                rs.getString(\\\"FKTABLE_CAT\\\"));\\n        assertEquals(\\\"Incorrect foreign key table schema\\\", null, rs\\n                .getString(\\\"FKTABLE_SCHEM\\\"));\\n        assertEquals(\\\"Incorrect foreign key table name\\\",\\n                DatabaseCreator.TEST_TABLE1, rs.getString(\\\"FKTABLE_NAME\\\"));\\n        assertEquals(\\\"Incorrect foreign key column name\\\", \\\"fkey\\\", rs\\n                .getString(\\\"FKCOLUMN_NAME\\\"));\\n        assertEquals(\\\"Incorrect sequence number within foreign key\\\", 1, rs\\n                .getShort(\\\"KEY_SEQ\\\"));\\n        assertEquals(\\\"Incorrect update rule value\\\",\\n                DatabaseMetaData.importedKeyNoAction, rs\\n                        .getShort(\\\"UPDATE_RULE\\\"));\\n        assertEquals(\\\"Incorrect delete rule value\\\",\\n                DatabaseMetaData.importedKeyNoAction, rs\\n                        .getShort(\\\"DELETE_RULE\\\"));\\n        assertNotNull(\\\"Incorrect foreign key name\\\", rs.getString(\\\"FK_NAME\\\"));\\n        assertEquals(\\\"Incorrect primary key name\\\", null, rs\\n                .getString(\\\"PK_NAME\\\"));\\n        assertEquals(\\\"Incorrect deferrability\\\",\\n                DatabaseMetaData.importedKeyNotDeferrable, rs\\n                        .getShort(\\\"DEFERRABILITY\\\"));\\n        rs.close();\\n    }\"}","122":"{\"expressionStart\":{\"DatabaseMetaDataNotSupportedTest.assertEquals()\":848,\"String:TABLE_SCHEM\":567,\"String:COLUMN_NAME\":703,\"String:TABLE_CAT\":554,\"boolean:false\":179,\"\\u003cr\\u003e\":819,\"String:TABLE_NAME\":582,\"UNKNOWN.toLowerCase()\":1560,\"String\":1422,\"Connection.getCatalog()\":1010,\"ResultSet.next()\":406,\"ResultSetMetaData.getColumnCount()\":436,\"DatabaseMetaData.getIndexInfo()\":209,\"ResultSet.getShort()\":1715,\"ResultSet.getBoolean()\":1354,\"ResultSetMetaData.getColumnName()\":906,\"ResultSet.close()\":2330,\"int:1\":816,\"int:0\":2189,\"ResultSet.getInt()\":2192,\"String:\":1449,\"ResultSet.getString()\":1453,\"String:Incorrect number of columns\":480,\"ResultSet.getMetaData()\":345,\"String:Incorrect column name\":861,\"String:id\":1907,\"{String}\":552,\"boolean:true\":305,\"DatabaseMetaDataNotSupportedTest.assertTrue()\":371,\"String[].arrayget()\":886,\"null:null\":1121,\"\\u003ca\\u003e\":829,\"int:13\":511,\"String:ORDINAL_POSITION\":683},\"expressionEnd\":{\"DatabaseMetaDataNotSupportedTest.assertEquals()\":949,\"String:TABLE_SCHEM\":580,\"String:COLUMN_NAME\":716,\"String:TABLE_CAT\":565,\"boolean:false\":184,\"\\u003cr\\u003e\":827,\"String:TABLE_NAME\":594,\"UNKNOWN.toLowerCase()\":1617,\"String\":1447,\"Connection.getCatalog()\":1027,\"ResultSet.next()\":415,\"ResultSetMetaData.getColumnCount()\":457,\"DatabaseMetaData.getIndexInfo()\":310,\"ResultSet.getShort()\":1734,\"ResultSet.getBoolean()\":1398,\"ResultSetMetaData.getColumnName()\":948,\"ResultSet.close()\":2340,\"int:1\":817,\"int:0\":2190,\"ResultSet.getInt()\":2210,\"String:\":1451,\"ResultSet.getString()\":1501,\"String:Incorrect number of columns\":509,\"ResultSet.getMetaData()\":361,\"String:Incorrect column name\":884,\"String:id\":1911,\"{String}\":793,\"boolean:true\":309,\"DatabaseMetaDataNotSupportedTest.assertTrue()\":416,\"String[].arrayget()\":904,\"null:null\":1125,\"\\u003ca\\u003e\":832,\"int:13\":513,\"String:ORDINAL_POSITION\":701},\"rawCode\":\"@KnownFailure(\\\"not supported\\\")\\n    public void test_getIndexInfoLjava_lang_StringLjava_lang_StringLjava_lang_StringZZ()\\n            throws SQLException {\\n        boolean unique \\u003d false;\\n        ResultSet rs \\u003d meta.getIndexInfo(conn.getCatalog(), null,\\n                DatabaseCreator.TEST_TABLE1, unique, true);\\n        ResultSetMetaData rsmd \\u003d rs.getMetaData();\\n        assertTrue(\\\"Rows do not obtained\\\", rs.next());\\n        int col \\u003d rsmd.getColumnCount();\\n        assertEquals(\\\"Incorrect number of columns\\\", 13, col);\\n        String[] columnNames \\u003d { \\\"TABLE_CAT\\\", \\\"TABLE_SCHEM\\\", \\\"TABLE_NAME\\\",\\n                \\\"NON_UNIQUE\\\", \\\"INDEX_QUALIFIER\\\", \\\"INDEX_NAME\\\", \\\"TYPE\\\",\\n                \\\"ORDINAL_POSITION\\\", \\\"COLUMN_NAME\\\", \\\"ASC_OR_DESC\\\",\\n                \\\"CARDINALITY\\\", \\\"PAGES\\\", \\\"FILTER_CONDITION\\\" };\\n        for (int c \\u003d 1; c \\u003c\\u003d col; ++c) {\\n            assertEquals(\\\"Incorrect column name\\\", columnNames[c - 1], rsmd\\n                    .getColumnName(c));\\n        }\\n\\n        assertEquals(\\\"Incorrect table catalog\\\", conn.getCatalog(), rs\\n                .getString(\\\"TABLE_CAT\\\"));\\n        assertEquals(\\\"Incorrect table schema\\\", null, rs\\n                .getString(\\\"TABLE_SCHEM\\\"));\\n        assertEquals(\\\"Incorrect table name\\\", DatabaseCreator.TEST_TABLE1, rs\\n                .getString(\\\"TABLE_NAME\\\"));\\n        assertEquals(\\\"Incorrect state of uniquess\\\", unique, rs\\n                .getBoolean(\\\"NON_UNIQUE\\\"));\\n        assertEquals(\\\"Incorrect index catalog\\\", \\\"\\\", rs\\n                .getString(\\\"INDEX_QUALIFIER\\\"));\\n        assertEquals(\\\"Incorrect index name\\\", \\\"primary\\\", rs.getString(\\n                \\\"INDEX_NAME\\\").toLowerCase());\\n        assertEquals(\\\"Incorrect index type\\\", DatabaseMetaData.tableIndexOther,\\n                rs.getShort(\\\"TYPE\\\"));\\n        assertEquals(\\\"Incorrect column sequence number within index\\\", 1, rs\\n                .getShort(\\\"ORDINAL_POSITION\\\"));\\n        assertEquals(\\\"Incorrect column name\\\", \\\"id\\\", rs.getString(\\\"COLUMN_NAME\\\"));\\n        assertEquals(\\\"Incorrect column sort sequence\\\", \\\"a\\\", rs.getString(\\n                \\\"ASC_OR_DESC\\\").toLowerCase());\\n        assertEquals(\\\"Incorrect cardinality\\\", 1, rs.getInt(\\\"CARDINALITY\\\"));\\n        assertEquals(\\\"Incorrect value of pages\\\", 0, rs.getInt(\\\"PAGES\\\"));\\n        assertEquals(\\\"Incorrect filter condition\\\", null, rs\\n                .getString(\\\"FILTER_CONDITION\\\"));\\n        rs.close();\\n    }\"}","123":"{\"expressionStart\":{\"DatabaseMetaDataNotSupportedTest.assertEquals()\":1293,\"DatabaseMetaData.getTables()\":532,\"ResultSet.getString()\":756,\"String: FROM \":1076,\"String:TABLE_NAME\":799,\"Connection.getMetaData()\":480,\"UNKNOWN.toLowerCase()\":1401,\"String\":1632,\"ResultSet.next()\":623,\"Support_SQL.getConnection()\":339,\"DatabaseCreator.TEST_TABLE1.toLowerCase()\":713,\"DatabaseMetaDataNotSupportedTest.assertTrue()\":585,\"DatabaseMetaDataNotSupportedTest.assertFalse()\":1482,\"Statement.execute()\":1132,\"ResultSet.close()\":1563,\"Connection.close()\":1774,\"DatabaseMetaData.allTablesAreSelectable()\":1518,\"null:null\":1196},\"expressionEnd\":{\"DatabaseMetaDataNotSupportedTest.assertEquals()\":1472,\"DatabaseMetaData.getTables()\":574,\"ResultSet.getString()\":812,\"String: FROM \":1084,\"String:TABLE_NAME\":811,\"Connection.getMetaData()\":502,\"UNKNOWN.toLowerCase()\":1471,\"String\":1651,\"ResultSet.next()\":637,\"Support_SQL.getConnection()\":442,\"DatabaseCreator.TEST_TABLE1.toLowerCase()\":754,\"DatabaseMetaDataNotSupportedTest.assertTrue()\":638,\"DatabaseMetaDataNotSupportedTest.assertFalse()\":1552,\"Statement.execute()\":1156,\"ResultSet.close()\":1578,\"Connection.close()\":1790,\"DatabaseMetaData.allTablesAreSelectable()\":1551,\"null:null\":1200},\"rawCode\":\"@KnownFailure(\\\"Not supported ops applied\\\")\\n    public void test_allTablesAreSelectable() throws SQLException {\\n        // grant SELECT privileges\\n\\n        String query \\u003d \\\"GRANT CREATE, SELECT ON \\\" + DatabaseCreator.TEST_TABLE1\\n                + \\\" TO \\\" + Support_SQL.sqlUser;\\n        statement.execute(query);\\n        Connection userConn \\u003d Support_SQL.getConnection(Support_SQL.sqlUrl,\\n                Support_SQL.sqlUser, Support_SQL.sqlUser);\\n        DatabaseMetaData userMeta \\u003d userConn.getMetaData();\\n        ResultSet userTab \\u003d userMeta.getTables(null, null, null, null);\\n\\n        assertTrue(\\\"Tables are not obtained\\\", userTab.next());\\n        assertEquals(\\\"Incorrect name of obtained table\\\",\\n                DatabaseCreator.TEST_TABLE1.toLowerCase(), userTab.getString(\\n                        \\\"TABLE_NAME\\\").toLowerCase());\\n        assertTrue(\\\"Not all of obtained tables are selectable\\\", userMeta\\n                .allTablesAreSelectable());\\n\\n        userTab.close();\\n        // revoke SELECT privileges\\n        query \\u003d \\\"REVOKE SELECT ON \\\" + DatabaseCreator.TEST_TABLE1 + \\\" FROM \\\"\\n                + Support_SQL.sqlUser;\\n        statement.execute(query);\\n\\n        userTab \\u003d userMeta.getTables(null, null, null, null);\\n\\n        assertTrue(\\\"Tables are not obtained\\\", userTab.next());\\n        assertEquals(\\\"Incorrect name of obtained table\\\",\\n                DatabaseCreator.TEST_TABLE1.toLowerCase(), userTab.getString(\\n                        \\\"TABLE_NAME\\\").toLowerCase());\\n        assertFalse(\\\"No SELECT privileges\\\", userMeta.allTablesAreSelectable());\\n\\n        userTab.close();\\n        // revoke CREATE privileges\\n        query \\u003d \\\"REVOKE CREATE ON \\\" + DatabaseCreator.TEST_TABLE1 + \\\" FROM \\\"\\n                + Support_SQL.sqlUser;\\n        statement.execute(query);\\n        userConn.close();\\n    }\"}","124":"{\"expressionStart\":{\"String.equals()\":389,\"DatabaseMetaDataNotSupportedTest.fail()\":966,\"Statement.execute()\":609,\"ResultSet.close()\":689,\"DatabaseMetaData.getTables()\":80,\"null:null\":95,\"ResultSet.getString()\":192,\"String:TABLE_NAME\":210,\"Connection.getMetaData()\":899,\"String\":971,\"SQLException.toString()\":1000,\"ResultSet.next()\":139},\"expressionEnd\":{\"String.equals()\":459,\"DatabaseMetaDataNotSupportedTest.fail()\":1013,\"Statement.execute()\":643,\"ResultSet.close()\":704,\"DatabaseMetaData.getTables()\":118,\"null:null\":99,\"ResultSet.getString()\":223,\"String:TABLE_NAME\":222,\"Connection.getMetaData()\":917,\"String\":997,\"SQLException.toString()\":1012,\"ResultSet.next()\":153},\"rawCode\":\"private void createTestTables() {\\n        try {\\n            ResultSet userTab \\u003d meta.getTables(null, null, null, null);\\n            while (userTab.next()) {\\n                String tableName \\u003d userTab.getString(\\\"TABLE_NAME\\\");\\n                if (tableName.equals(DatabaseCreator.TEST_TABLE1)) {\\n                    statement.execute(DatabaseCreator.DROP_TABLE1);\\n                } else if (tableName\\n                        .equals(DatabaseCreator.TEST_TABLE3)) {\\n                    statement.execute(DatabaseCreator.DROP_TABLE3);\\n                } else if (tableName.equals(VIEW_NAME)) {\\n                    statement.execute(DROP_VIEW_QUERY);\\n                }\\n            }\\n            userTab.close();\\n            statement.execute(DatabaseCreator.CREATE_TABLE3);\\n            statement.execute(DatabaseCreator.CREATE_TABLE1);\\n            statement.execute(CREATE_VIEW_QUERY);\\n            meta \\u003d conn.getMetaData();\\n        } catch (SQLException e) {\\n            fail(\\\"Unexpected SQLException \\\" + e.toString());\\n        }\\n    }\"}","125":"{\"expressionStart\":{\"String:PRIVILEGE\":1055,\"DatabaseMetaDataNotSupportedTest.assertEquals()\":1504,\"String:TABLE_SCHEM\":973,\"String:COLUMN_NAME\":1018,\"String:TABLE_CAT\":960,\"\\u003cr\\u003e\":1947,\"String: FROM \":2205,\"String:TABLE_NAME\":988,\"UNKNOWN.toLowerCase()\":1682,\"String\":1289,\"ResultSet.next()\":425,\"Connection.getCatalog()\":1318,\"ResultSetMetaData.getColumnCount()\":843,\"DatabaseMetaDataNotSupportedTest.assertFalse()\":392,\"int:8\":918,\"ResultSetMetaData.getColumnName()\":1213,\"ResultSet.close()\":2280,\"String:GRANTOR\":1033,\"int:1\":1123,\"String:GRANTEE\":1044,\"ResultSet.getString()\":1682,\"ResultSet.getMetaData()\":366,\"String:Incorrect number of columns\":887,\"String:Incorrect column name\":1168,\"String:id\":326,\"{String}\":958,\"DatabaseMetaDataNotSupportedTest.assertTrue()\":1899,\"DatabaseMetaData.getColumnPrivileges()\":231,\"String[].arrayget()\":1193,\"Statement.execute()\":2246,\"null:null\":1443,\"UNKNOWN.indexOf()\":1947,\"\\u003ca\\u003e\":1136},\"expressionEnd\":{\"String:PRIVILEGE\":1066,\"DatabaseMetaDataNotSupportedTest.assertEquals()\":1628,\"String:TABLE_SCHEM\":986,\"String:COLUMN_NAME\":1031,\"String:TABLE_CAT\":971,\"\\u003cr\\u003e\":1992,\"String: FROM \":2213,\"String:TABLE_NAME\":1000,\"UNKNOWN.toLowerCase()\":1740,\"String\":1316,\"ResultSet.next()\":434,\"Connection.getCatalog()\":1335,\"ResultSetMetaData.getColumnCount()\":864,\"DatabaseMetaDataNotSupportedTest.assertFalse()\":435,\"int:8\":919,\"ResultSetMetaData.getColumnName()\":1255,\"ResultSet.close()\":2290,\"String:GRANTOR\":1042,\"int:1\":1124,\"String:GRANTEE\":1053,\"ResultSet.getString()\":1709,\"ResultSet.getMetaData()\":382,\"String:Incorrect number of columns\":916,\"String:Incorrect column name\":1191,\"String:id\":330,\"{String}\":1100,\"DatabaseMetaDataNotSupportedTest.assertTrue()\":1993,\"DatabaseMetaData.getColumnPrivileges()\":331,\"String[].arrayget()\":1211,\"Statement.execute()\":2270,\"null:null\":1447,\"UNKNOWN.indexOf()\":1986,\"\\u003ca\\u003e\":1139},\"rawCode\":\"@KnownFailure(\\\"not supported. Privileges are not supported.\\\")\\n     public void test_getColumnPrivilegesLjava_lang_StringLjava_lang_StringLjava_lang_StringLjava_lang_String()\\n            throws SQLException {\\n        ResultSet rs \\u003d meta.getColumnPrivileges(conn.getCatalog(), null,\\n                DatabaseCreator.TEST_TABLE1, \\\"id\\\");\\n        ResultSetMetaData rsmd \\u003d rs.getMetaData();\\n        assertFalse(\\\"Rows are obtained\\\", rs.next());\\n        rs.close();\\n\\n        String query \\u003d \\\"GRANT REFERENCES(id) ON \\\" + DatabaseCreator.TEST_TABLE1\\n                + \\\" TO \\\" + Support_SQL.sqlLogin;\\n        statement.execute(query);\\n\\n        rs \\u003d meta.getColumnPrivileges(conn.getCatalog(), null,\\n                DatabaseCreator.TEST_TABLE1, \\\"id\\\");\\n        rsmd \\u003d rs.getMetaData();\\n        assertTrue(\\\"Rows do not obtained\\\", rs.next());\\n        int col \\u003d rsmd.getColumnCount();\\n        assertEquals(\\\"Incorrect number of columns\\\", 8, col);\\n        String[] columnNames \\u003d { \\\"TABLE_CAT\\\", \\\"TABLE_SCHEM\\\", \\\"TABLE_NAME\\\",\\n                \\\"COLUMN_NAME\\\", \\\"GRANTOR\\\", \\\"GRANTEE\\\", \\\"PRIVILEGE\\\",\\n                \\\"IS_GRANTABLE\\\" };\\n        for (int c \\u003d 1; c \\u003c\\u003d col; ++c) {\\n            assertEquals(\\\"Incorrect column name\\\", columnNames[c - 1], rsmd\\n                    .getColumnName(c));\\n        }\\n        assertEquals(\\\"Incorrect table catalogue\\\", conn.getCatalog(), rs\\n                .getString(\\\"TABLE_CAT\\\").toLowerCase());\\n        assertEquals(\\\"Incorrect table schema\\\", null, rs\\n                .getString(\\\"TABLE_SCHEM\\\"));\\n        assertEquals(\\\"Incorrect table name\\\", DatabaseCreator.TEST_TABLE1, rs\\n                .getString(\\\"TABLE_NAME\\\").toLowerCase());\\n        assertEquals(\\\"Incorrect column name\\\", \\\"id\\\", rs.getString(\\\"COLUMN_NAME\\\")\\n                .toLowerCase());\\n        assertEquals(\\\"Incorrect grantor\\\", Support_SQL.sqlLogin + \\\"@\\\"\\n                + Support_SQL.sqlHost, rs.getString(\\\"GRANTOR\\\").toLowerCase());\\n        assertTrue(\\\"Incorrect grantee\\\",\\n                rs.getString(\\\"GRANTEE\\\").indexOf(\\\"root\\\") !\\u003d -1);\\n        assertEquals(\\\"Incorrect privilege\\\", \\\"references\\\", rs.getString(\\n                \\\"PRIVILEGE\\\").toLowerCase());\\n\\n        query \\u003d \\\"REVOKE REFERENCES(id) ON \\\" + DatabaseCreator.TEST_TABLE1\\n                + \\\" FROM \\\" + Support_SQL.sqlLogin;\\n        statement.execute(query);\\n        rs.close();\\n    }\"}","126":"{\"expressionStart\":{\"DataBase.getConexion()\":413,\"LinkedList.size()\":1527,\"JOptionPane.showMessageDialog()\":1347,\"String:\":848,\"ResultSet.getString()\":972,\"\\u003cr\\u003e\":1578,\"String\":992,\"UNKNOWN.getIdPublicacion()\":1578,\"Connection.createStatement()\":488,\"\\u003creturn\\u003e\":1801,\"LinkedList.add()\":1206,\"Publicacion.\\u003cinit\\u003e\":174,\"ResultSet.next()\":592,\"Statement.close()\":1282,\"LinkedList.\\u003cinit\\u003e\":247,\"Connection.close()\":1460,\"null:null\":1420,\"\\u003ca\\u003e\":1554,\"LinkedList.get()\":1578,\"int:0\":888,\"Statement.executeQuery()\":541,\"ResultSet.getInt()\":722},\"expressionEnd\":{\"DataBase.getConexion()\":432,\"LinkedList.size()\":1552,\"JOptionPane.showMessageDialog()\":1391,\"String:\":850,\"ResultSet.getString()\":1000,\"\\u003cr\\u003e\":1639,\"String\":999,\"UNKNOWN.getIdPublicacion()\":1622,\"Connection.createStatement()\":514,\"\\u003creturn\\u003e\":1820,\"LinkedList.add()\":1241,\"Publicacion.\\u003cinit\\u003e\":191,\"ResultSet.next()\":608,\"Statement.close()\":1299,\"LinkedList.\\u003cinit\\u003e\":276,\"Connection.close()\":1476,\"null:null\":1424,\"\\u003ca\\u003e\":1557,\"LinkedList.get()\":1603,\"int:0\":889,\"Statement.executeQuery()\":568,\"ResultSet.getInt()\":755},\"rawCode\":\"public Publicacion selectPublicacion(int idPublicacion) throws SQLException {\\r\\n        JOptionPane.showMessageDialog(null, idPublicacion);\\r\\n        Publicacion publicacion \\u003d new Publicacion();\\r\\n        LinkedList\\u003cPublicacion\\u003e listaPublicaciones \\u003d new LinkedList\\u003cPublicacion\\u003e();\\r\\n        String sql \\u003d \\\" call pListarPublicacion(\\\" + idPublicacion + \\\");\\\";\\r\\n        ResultSet resultado;\\r\\n        Connection conexion \\u003d super.getConexion();\\r\\n\\r\\n        try {\\r\\n\\r\\n            Statement statement \\u003d conexion.createStatement();\\r\\n            resultado \\u003d statement.executeQuery(sql);\\r\\n\\r\\n            while (resultado.next()) {\\r\\n                publicacion \\u003d new Publicacion(\\r\\n                        resultado.getString(\\\"nombrePerfil\\\"), resultado.getInt(\\\"idPublicacion\\\"),\\r\\n                        resultado.getString(\\\"fechaPublicacion\\\"),\\r\\n                        \\\"\\\", resultado.getString(\\\"descripcion\\\"), 0,\\r\\n                        resultado.getString(\\\"musica\\\"),\\r\\n                        resultado.getString(\\\"video\\\"),\\r\\n                        resultado.getString(\\\"texto\\\"),\\r\\n                        resultado.getString(\\\"imagen\\\"),\\r\\n                        resultado.getString(\\\"nombreCategoria\\\"), 0, 0);\\r\\n\\r\\n\\r\\n                listaPublicaciones.add(publicacion);\\r\\n            }//fin while\\r\\n            statement.close();\\r\\n        } catch (Exception e) {\\r\\n            JOptionPane.showMessageDialog(null, \\\"catch\\\");\\r\\n            publicacion \\u003d null;\\r\\n        } finally {\\r\\n            conexion.close();\\r\\n        }//fin try\\r\\n        for (int i \\u003d 0; i \\u003c listaPublicaciones.size(); i++) {\\r\\n            if (listaPublicaciones.get(i).getIdPublicacion() \\u003d\\u003d idPublicacion) {\\r\\n                publicacion \\u003d listaPublicaciones.get(i);\\r\\n                i \\u003d listaPublicaciones.size();\\r\\n            }//fin if\\r\\n        }//fin for\\r\\n        return publicacion;\\r\\n    }\"}","127":"{\"expressionStart\":{\"DataBase.getConexion()\":603,\"String\":511,\"Connection.createStatement()\":657,\"Publicacion.\\u003cinit\\u003e\":792,\"LinkedList.add()\":1829,\"ResultSet.next()\":755,\"int:6\":1113,\"int:5\":1064,\"int:4\":1013,\"int:3\":967,\"LinkedList.\\u003cinit\\u003e\":129,\"int:9\":1249,\"Publicacion.setNombrePerfil()\":1371,\"int:8\":1204,\"Publicacion.setVideo()\":1677,\"int:7\":1159,\"ResultSet.close()\":1876,\"Publicacion.setDescripcion()\":1553,\"int:2\":911,\"int:1\":861,\"Statement.executeQuery()\":706,\"ResultSet.getInt()\":1096,\"ResultSet.getString()\":1331,\"Publicacion.setFechaPublicacion()\":1465,\"Publicacion.setMusica()\":1643,\"Publicacion.setTexto()\":1709,\"\\u003creturn\\u003e\":1944,\"Publicacion.setVerificacion()\":1597,\"Publicacion.setCorreo()\":1519,\"Publicacion.setNombreCategoria()\":1775,\"Publicacion.setImagen()\":1741,\"int:10\":1295,\"int:11\":1351,\"UNKNOWN.println()\":1904,\"Publicacion.setIdPublicacion()\":1417},\"expressionEnd\":{\"DataBase.getConexion()\":622,\"String\":540,\"Connection.createStatement()\":683,\"Publicacion.\\u003cinit\\u003e\":809,\"LinkedList.add()\":1852,\"ResultSet.next()\":771,\"int:6\":1114,\"int:5\":1065,\"int:4\":1014,\"int:3\":968,\"LinkedList.\\u003cinit\\u003e\":158,\"int:9\":1250,\"Publicacion.setNombrePerfil()\":1402,\"int:8\":1205,\"Publicacion.setVideo()\":1694,\"int:7\":1160,\"ResultSet.close()\":1893,\"Publicacion.setDescripcion()\":1582,\"int:2\":912,\"int:1\":862,\"Statement.executeQuery()\":733,\"ResultSet.getInt()\":1115,\"ResultSet.getString()\":1354,\"Publicacion.setFechaPublicacion()\":1504,\"Publicacion.setMusica()\":1662,\"Publicacion.setTexto()\":1726,\"\\u003creturn\\u003e\":1968,\"Publicacion.setVerificacion()\":1628,\"Publicacion.setCorreo()\":1538,\"Publicacion.setNombreCategoria()\":1812,\"Publicacion.setImagen()\":1760,\"int:10\":1297,\"int:11\":1353,\"UNKNOWN.println()\":1931,\"Publicacion.setIdPublicacion()\":1450},\"rawCode\":\"public LinkedList\\u003cPublicacion\\u003e getListaPublicacion() throws SQLException {\\r\\n\\r\\n        LinkedList\\u003cPublicacion\\u003e listaPublicacion \\u003d new LinkedList\\u003cPublicacion\\u003e();\\r\\n\\r\\n        Publicacion p;\\r\\n\\r\\n        String nombrePerfil;\\r\\n        int idPublicacion;\\r\\n        String fechaPublicacion;\\r\\n        String correo;\\r\\n        String descripcion;\\r\\n        int verificacion;\\r\\n        String musica;\\r\\n        String video;\\r\\n        String texto;\\r\\n        String imagen;\\r\\n        String nombreCategoria;\\r\\n\\r\\n        String sql \\u003d \\\"call pListaPublicaciones();\\\";\\r\\n        ResultSet resultado;\\r\\n        Connection conexion \\u003d super.getConexion();\\r\\n\\r\\n        Statement statement \\u003d conexion.createStatement();\\r\\n        resultado \\u003d statement.executeQuery(sql);\\r\\n\\r\\n\\r\\n        while (resultado.next()) {\\r\\n            p \\u003d new Publicacion();\\r\\n\\r\\n            nombrePerfil \\u003d resultado.getString(1);\\r\\n            idPublicacion \\u003d resultado.getInt(2);\\r\\n            fechaPublicacion \\u003d resultado.getString(3);\\r\\n            correo \\u003d resultado.getString(4);\\r\\n            descripcion \\u003d resultado.getString(5);\\r\\n            verificacion \\u003d resultado.getInt(6);\\r\\n            musica \\u003d resultado.getString(7);\\r\\n            video \\u003d resultado.getString(8);\\r\\n            texto \\u003d resultado.getString(9);\\r\\n            imagen \\u003d resultado.getString(10);\\r\\n            nombreCategoria \\u003d resultado.getString(11);\\r\\n\\r\\n            p.setNombrePerfil(nombrePerfil);\\r\\n            p.setIdPublicacion(idPublicacion);\\r\\n            p.setFechaPublicacion(fechaPublicacion);\\r\\n            p.setCorreo(correo);\\r\\n            p.setDescripcion(descripcion);\\r\\n            p.setVerificacion(verificacion);\\r\\n            p.setMusica(musica);\\r\\n            p.setVideo(video);\\r\\n            p.setTexto(texto);\\r\\n            p.setImagen(imagen);\\r\\n            p.setNombreCategoria(nombreCategoria);\\r\\n\\r\\n            listaPublicacion.add(p);\\r\\n\\r\\n        }\\r\\n        resultado.close();\\r\\n        System.out.println(\\\"exito\\\");\\r\\n\\r\\n        return listaPublicacion;\\r\\n    }\"}","128":"{\"expressionStart\":{\"DataBase.getConexion()\":354,\"String:\":786,\"ResultSet.getString()\":720,\"String\":246,\"Connection.createStatement()\":427,\"\\u003creturn\\u003e\":1091,\"LinkedList.add()\":841,\"Publicacion.\\u003cinit\\u003e\":582,\"ResultSet.next()\":531,\"Statement.close()\":921,\"String:\\u0027);\":286,\"LinkedList.\\u003cinit\\u003e\":155,\"Connection.close()\":1051,\"null:null\":1011,\"\\u003d\":986,\"Statement.executeQuery()\":480,\"int:0\":794,\"ResultSet.getInt()\":660},\"expressionEnd\":{\"DataBase.getConexion()\":373,\"String:\":788,\"ResultSet.getString()\":759,\"String\":276,\"Connection.createStatement()\":453,\"\\u003creturn\\u003e\":1121,\"LinkedList.add()\":880,\"Publicacion.\\u003cinit\\u003e\":822,\"ResultSet.next()\":547,\"Statement.close()\":938,\"String:\\u0027);\":291,\"LinkedList.\\u003cinit\\u003e\":184,\"Connection.close()\":1067,\"null:null\":1015,\"\\u003d\":1015,\"Statement.executeQuery()\":507,\"int:0\":795,\"ResultSet.getInt()\":693},\"rawCode\":\"public LinkedList\\u003cPublicacion\\u003e getListaPublicacionPendiente(String tipo) throws SQLException {\\r\\n\\r\\n        LinkedList\\u003cPublicacion\\u003e listaPublicacionMusica \\u003d new LinkedList\\u003cPublicacion\\u003e();\\r\\n\\r\\n        Publicacion publicacion;\\r\\n\\r\\n        String sql \\u003d \\\"call pPublicacionPendiente(\\u0027\\\" + tipo + \\\"\\u0027);\\\";\\r\\n        ResultSet resultado;\\r\\n        Connection conexion \\u003d super.getConexion();\\r\\n        try {\\r\\n\\r\\n            Statement statement \\u003d conexion.createStatement();\\r\\n            resultado \\u003d statement.executeQuery(sql);\\r\\n\\r\\n            while (resultado.next()) {\\r\\n                publicacion \\u003d new Publicacion(resultado.getString(\\\"nombrePerfil\\\"),\\r\\n                        resultado.getInt(\\\"idPublicacion\\\"),\\r\\n                        resultado.getString(\\\"fechaPublicacion\\\"),\\r\\n                        \\\"\\\", \\\"\\\", 0, \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", 0, 0);\\r\\n                listaPublicacionMusica.add(publicacion);\\r\\n            }//fin while\\r\\n            statement.close();\\r\\n        } catch (Exception e) {\\r\\n            listaPublicacionMusica \\u003d null;\\r\\n        } finally {\\r\\n            conexion.close();\\r\\n        }\\r\\n\\r\\n        return listaPublicacionMusica;\\r\\n    }\"}","129":"{\"expressionStart\":{\"DataBase.getConexion()\":375,\"JOptionPane.showMessageDialog()\":1435,\"String:\":833,\"ResultSet.getString()\":645,\"String\":1032,\"Connection.createStatement()\":448,\"\\u003creturn\\u003e\":1575,\"Publicacion.\\u003cinit\\u003e\":603,\"LinkedList.add()\":1254,\"ResultSet.next()\":552,\"Exception.getMessage()\":1471,\"Statement.close()\":1330,\"LinkedList.\\u003cinit\\u003e\":199,\"String:\\u0027;\":308,\"Connection.close()\":1522,\"null:null\":1465,\"Statement.executeQuery()\":501,\"int:0\":873,\"ResultSet.getInt()\":707},\"expressionEnd\":{\"DataBase.getConexion()\":394,\"JOptionPane.showMessageDialog()\":1486,\"String:\":835,\"ResultSet.getString()\":680,\"String\":1039,\"Connection.createStatement()\":474,\"\\u003creturn\\u003e\":1601,\"Publicacion.\\u003cinit\\u003e\":1235,\"LinkedList.add()\":1289,\"ResultSet.next()\":568,\"Exception.getMessage()\":1485,\"Statement.close()\":1347,\"LinkedList.\\u003cinit\\u003e\":228,\"String:\\u0027;\":312,\"Connection.close()\":1538,\"null:null\":1469,\"Statement.executeQuery()\":528,\"int:0\":874,\"ResultSet.getInt()\":740},\"rawCode\":\"public LinkedList\\u003cPublicacion\\u003e selectPublicacionPorCorreo(\\r\\n            String correo) throws SQLException {\\r\\n\\r\\n        Publicacion publicacion;\\r\\n        LinkedList\\u003cPublicacion\\u003e listaPublicaciones \\u003d new LinkedList\\u003cPublicacion\\u003e();\\r\\n        String sql \\u003d \\\"select * from publicacion where correo \\u003d \\u0027\\\" + correo + \\\"\\u0027;\\\";\\r\\n        ResultSet resultado;\\r\\n        Connection conexion \\u003d super.getConexion();\\r\\n        try {\\r\\n\\r\\n            Statement statement \\u003d conexion.createStatement();\\r\\n            resultado \\u003d statement.executeQuery(sql);\\r\\n\\r\\n            while (resultado.next()) {\\r\\n                publicacion \\u003d new Publicacion(\\r\\n                        resultado.getString(\\\"nombrePerfil\\\"),\\r\\n                        resultado.getInt(\\\"idPublicacion\\\"),\\r\\n                        resultado.getString(\\\"fechaPublicacion\\\"),\\r\\n                        \\\"\\\", resultado.getString(\\\"descripcion\\\"), 0,\\r\\n                        resultado.getString(\\\"musica\\\"),\\r\\n                        resultado.getString(\\\"video\\\"),\\r\\n                        resultado.getString(\\\"texto\\\"),\\r\\n                        resultado.getString(\\\"imagen\\\"),\\r\\n                        \\\"\\\",\\r\\n                        resultado.getInt(\\\"idCategoria\\\"),\\r\\n                        resultado.getInt(\\\"tipo\\\"));\\r\\n                listaPublicaciones.add(publicacion);\\r\\n            }//fin while\\r\\n            statement.close();\\r\\n        } catch (Exception e) {\\r\\n            listaPublicaciones \\u003d null;\\r\\n            JOptionPane.showMessageDialog(null, e.getMessage());\\r\\n        } finally {\\r\\n            conexion.close();\\r\\n        }//fin finally\\r\\n\\r\\n        return listaPublicaciones;\\r\\n    }\"}","130":"{\"expressionStart\":{\"DataBase.getConexion()\":440,\"JOptionPane.showMessageDialog()\":1590,\"String:\":899,\"ResultSet.getString()\":1075,\"String\":1150,\"Connection.createStatement()\":513,\"\\u003creturn\\u003e\":1728,\"Publicacion.\\u003cinit\\u003e\":668,\"LinkedList.add()\":1409,\"Exception.getMessage()\":1626,\"ResultSet.next()\":617,\"Statement.close()\":1485,\"LinkedList.\\u003cinit\\u003e\":250,\"Connection.close()\":1677,\"null:null\":1620,\"Statement.executeQuery()\":566,\"int:0\":991,\"ResultSet.getInt()\":1365},\"expressionEnd\":{\"DataBase.getConexion()\":459,\"JOptionPane.showMessageDialog()\":1641,\"String:\":901,\"ResultSet.getString()\":1103,\"String\":1157,\"Connection.createStatement()\":539,\"\\u003creturn\\u003e\":1754,\"Publicacion.\\u003cinit\\u003e\":1390,\"LinkedList.add()\":1444,\"Exception.getMessage()\":1640,\"ResultSet.next()\":633,\"Statement.close()\":1502,\"LinkedList.\\u003cinit\\u003e\":279,\"Connection.close()\":1693,\"null:null\":1624,\"Statement.executeQuery()\":593,\"int:0\":992,\"ResultSet.getInt()\":1389},\"rawCode\":\"public LinkedList\\u003cPublicacion\\u003e selectPublicacionPorPerfilYPorTipo(\\r\\n            String tipoPublicacion,\\r\\n            String nombrePerfil) throws SQLException {\\r\\n\\r\\n        Publicacion publicacion;\\r\\n        LinkedList\\u003cPublicacion\\u003e listaPublicaciones \\u003d new LinkedList\\u003cPublicacion\\u003e();\\r\\n        String sql \\u003d \\\" select * from publicacion where nombrePerfil \\u003d \\u0027\\\" + nombrePerfil + \\\"\\u0027 ;\\\";\\r\\n        ResultSet resultado;\\r\\n        Connection conexion \\u003d super.getConexion();\\r\\n        try {\\r\\n\\r\\n            Statement statement \\u003d conexion.createStatement();\\r\\n            resultado \\u003d statement.executeQuery(sql);\\r\\n\\r\\n            while (resultado.next()) {\\r\\n                publicacion \\u003d new Publicacion(\\r\\n                        resultado.getString(\\\"nombrePerfil\\\"), \\r\\n                        resultado.getInt(\\\"idPublicacion\\\"),\\r\\n                        resultado.getString(\\\"fechaPublicacion\\\"),\\r\\n                        \\\"\\\", \\r\\n                        resultado.getString(\\\"descripcion\\\"), \\r\\n                        0,\\r\\n                        resultado.getString(\\\"musica\\\"),\\r\\n                        resultado.getString(\\\"video\\\"),\\r\\n                        resultado.getString(\\\"texto\\\"),\\r\\n                        resultado.getString(\\\"imagen\\\"),\\r\\n                        resultado.getString(\\\"nombreCategoria\\\"),\\r\\n                        resultado.getInt(\\\"idCategoria\\\"), \\r\\n                        resultado.getInt(\\\"tipo\\\"));\\r\\n                listaPublicaciones.add(publicacion);\\r\\n            }//fin while\\r\\n            statement.close();\\r\\n        } catch (Exception e) {\\r\\n            listaPublicaciones \\u003d null;\\r\\n            JOptionPane.showMessageDialog(null, e.getMessage());\\r\\n        } finally {\\r\\n            conexion.close();\\r\\n        }//fin finally\\r\\n        return listaPublicaciones;\\r\\n    }\"}","131":"{\"expressionStart\":{\"String:vers\":1031,\"Array.getArray()\":733,\"ResultSet.getDate()\":1113,\"String:uid\":1086,\"PreparedStatement.setInt()\":586,\"DB.getDataSource()\":99,\"String\":317,\"ResultSet.next()\":644,\"Long[].\\u003ccast\\u003e\":724,\"Connection.close()\":1355,\"String:tags\":1222,\"int:2\":596,\"int:1\":553,\"\\u003cnullcheck\\u003e\":917,\"ResultSet.getInt()\":1021,\"SQLException.printStackTrace()\":1403,\"PreparedStatement.setString()\":540,\"OsmFeature.hstoreFormatToTags()\":1179,\"ResultSet.getString()\":1141,\"ResultSet.getArray()\":681,\"ResultSet.getLong()\":997,\"String:id\":1008,\"\\u003creturn\\u003e\":1435,\"OsmNode.findById()\":882,\"List.add()\":938,\"ArrayList.\\u003cinit\\u003e\":782,\"DataSource.getConnection()\":281,\"OsmWay.\\u003cinit\\u003e\":979,\"Connection.prepareStatement()\":509,\"PreparedStatement.executeQuery()\":615,\"Json.stringify()\":556},\"expressionEnd\":{\"String:vers\":1037,\"Array.getArray()\":754,\"ResultSet.getDate()\":1133,\"String:uid\":1091,\"PreparedStatement.setInt()\":605,\"DB.getDataSource()\":117,\"String\":381,\"ResultSet.next()\":653,\"Long[].\\u003ccast\\u003e\":754,\"Connection.close()\":1367,\"String:tags\":1228,\"int:2\":597,\"int:1\":554,\"\\u003cnullcheck\\u003e\":929,\"ResultSet.getInt()\":1038,\"SQLException.printStackTrace()\":1422,\"PreparedStatement.setString()\":581,\"OsmFeature.hstoreFormatToTags()\":1230,\"ResultSet.getString()\":1171,\"ResultSet.getArray()\":701,\"ResultSet.getLong()\":1013,\"String:id\":1012,\"\\u003creturn\\u003e\":1447,\"OsmNode.findById()\":906,\"List.add()\":953,\"ArrayList.\\u003cinit\\u003e\":806,\"DataSource.getConnection()\":299,\"OsmWay.\\u003cinit\\u003e\":1231,\"Connection.prepareStatement()\":535,\"PreparedStatement.executeQuery()\":632,\"Json.stringify()\":580},\"rawCode\":\"public static List\\u003cOsmFeature\\u003e findByIntersection(JsonNode geometry,int limit){\\n\\n\\t\\tDataSource ds \\u003d DB.getDataSource();\\n\\t\\tConnection conn \\u003d null;\\n\\t\\tPreparedStatement st;\\n\\t\\tResultSet rs;\\n\\n\\t\\tList\\u003cOsmFeature\\u003e ways \\u003d new ArrayList\\u003cOsmFeature\\u003e();\\n\\t\\tOsmWay way \\u003d null;\\n\\n\\t\\ttry {\\n\\t\\t\\tconn \\u003d ds.getConnection();\\n\\t\\t\\tString sql \\u003d \\\"select id, nodes, vers, usr, uid, timest, featurepicture tags \\\" +\\n\\t\\t\\t\\t\\t\\\"from osmways where ST_Intersects(geom , ST_Transform(ST_SetSRID(st_geomfromgeojson(?),4326),900913)) limit ?\\\";\\n\\t\\t\\tst \\u003d conn.prepareStatement(sql);\\n\\t\\t\\tst.setString(1, Json.stringify(geometry));\\n\\t\\t\\tst.setInt(2, limit);\\n\\t\\t\\trs \\u003d st.executeQuery();\\n\\t\\t\\twhile (rs.next()) {\\n\\n\\t\\t\\t\\tArray nodesArray \\u003d rs.getArray(\\\"nodes\\\");\\n\\t\\t\\t\\tLong[] nodeIds \\u003d (Long[]) nodesArray.getArray();\\n\\t\\t\\t\\tList\\u003cOsmNode\\u003e nodes \\u003d new ArrayList\\u003cOsmNode\\u003e();\\n\\n\\t\\t\\t\\t// Get the nodes\\n\\t\\t\\t\\tfor(long nodeId : nodeIds){\\n\\t\\t\\t\\t\\tOsmNode node \\u003d OsmNode.findById(nodeId);\\n\\t\\t\\t\\t\\tif (node !\\u003d null){\\n\\t\\t\\t\\t\\t\\tnodes.add(node);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tway \\u003d new OsmWay(\\n\\t\\t\\t\\t\\t\\trs.getLong(\\\"id\\\"),\\n\\t\\t\\t\\t\\t\\trs.getInt(\\\"vers\\\"),\\n\\t\\t\\t\\t\\t\\trs.getString(\\\"usr\\\"),\\n\\t\\t\\t\\t\\t\\trs.getString(\\\"uid\\\"),\\n\\t\\t\\t\\t\\t\\tnodes,\\n\\t\\t\\t\\t\\t\\trs.getDate(\\\"timest\\\"),\\n\\t\\t\\t\\t\\t\\trs.getString(\\\"featurepicture\\\"),\\n\\t\\t\\t\\t\\t\\tOsmFeature.hstoreFormatToTags(rs.getString(\\\"tags\\\")));\\n\\t\\t\\t\\tways.add(way);\\n\\t\\t\\t}\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\te.printStackTrace();\\n\\t\\t} finally {\\n\\t\\t\\tif (conn !\\u003d null) try {\\n\\t\\t\\t\\tconn.close();\\n\\t\\t\\t} catch (SQLException e) {\\n\\t\\t\\t\\te.printStackTrace();\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn ways;\\n\\t}\"}","132":"{\"expressionStart\":{\"String:vers\":1109,\"OsmNode.delete()\":1578,\"ResultSet.getDate()\":1195,\"Array.getArray()\":718,\"String:uid\":1166,\"PreparedStatement.executeUpdate()\":1447,\"DB.getDataSource()\":70,\"String\":1237,\"ResultSet.next()\":629,\"Long[].\\u003ccast\\u003e\":709,\"Connection.close()\":1709,\"String:tags\":1295,\"int:1\":562,\"\\u003cnullcheck\\u003e\":933,\"SQLException.printStackTrace()\":1757,\"ResultSet.getInt()\":1099,\"PreparedStatement.setString()\":549,\"ResultSet.getString()\":1282,\"OsmWay.hstoreFormatToTags()\":1263,\"ResultSet.getArray()\":666,\"ResultSet.getLong()\":1074,\"String:id\":1085,\"\\u003creturn\\u003e\":1789,\"OsmNode.findById()\":1521,\"DataSource.getConnection()\":195,\"List.add()\":954,\"ArrayList.\\u003cinit\\u003e\":767,\"OsmWay.\\u003cinit\\u003e\":1055,\"boolean:true\":1003,\"PreparedStatement.setLong()\":1409,\"Connection.prepareStatement()\":518,\"PreparedStatement.executeQuery()\":600,\"String:)\":505,\"null:null\":171,\"Json.stringify()\":565,\"\\u003d\":991},\"expressionEnd\":{\"String:vers\":1115,\"OsmNode.delete()\":1591,\"ResultSet.getDate()\":1215,\"Array.getArray()\":739,\"String:uid\":1171,\"PreparedStatement.executeUpdate()\":1465,\"DB.getDataSource()\":88,\"String\":1253,\"ResultSet.next()\":638,\"Long[].\\u003ccast\\u003e\":739,\"Connection.close()\":1721,\"String:tags\":1301,\"int:1\":563,\"\\u003cnullcheck\\u003e\":945,\"SQLException.printStackTrace()\":1776,\"ResultSet.getInt()\":1116,\"PreparedStatement.setString()\":590,\"ResultSet.getString()\":1302,\"OsmWay.hstoreFormatToTags()\":1303,\"ResultSet.getArray()\":686,\"ResultSet.getLong()\":1090,\"String:id\":1089,\"\\u003creturn\\u003e\":1800,\"OsmNode.findById()\":1545,\"DataSource.getConnection()\":213,\"List.add()\":969,\"ArrayList.\\u003cinit\\u003e\":791,\"OsmWay.\\u003cinit\\u003e\":1304,\"boolean:true\":1007,\"PreparedStatement.setLong()\":1440,\"Connection.prepareStatement()\":544,\"PreparedStatement.executeQuery()\":617,\"String:)\":508,\"null:null\":175,\"Json.stringify()\":589,\"\\u003d\":1007},\"rawCode\":\"public static OsmWay findByGeom(JsonNode geometry){\\n\\t\\tDataSource ds \\u003d DB.getDataSource();\\n\\t\\tConnection conn \\u003d null;\\n\\t\\tPreparedStatement st;\\n\\t\\tResultSet rs;\\n\\t\\tOsmWay way \\u003d null;\\n\\t\\ttry {\\n\\t\\t\\tconn \\u003d ds.getConnection();\\n\\t\\t\\t// geom is not withdrawn, we generate the geometry from the nodes\\n\\t\\t\\tString sql \\u003d \\\"select id, nodes, vers, usr, uid, timest, featurepicture, tags \\\" +\\n\\t\\t\\t\\t\\t\\\"from osmways where geom \\u003d ST_SimplifyPreserveTopology(ST_Transform(ST_SetSRID(st_geomfromgeojson(?),4326),900913), \\\" + TOLERANCE + \\\")\\\";\\n\\t\\t\\tst \\u003d conn.prepareStatement(sql);\\n\\t\\t\\tst.setString(1, Json.stringify(geometry));\\n\\t\\t\\trs \\u003d st.executeQuery();\\n\\t\\t\\twhile (rs.next()) {\\n\\n\\t\\t\\t\\tArray nodesArray \\u003d rs.getArray(\\\"nodes\\\");\\n\\t\\t\\t\\tLong[] nodeIds \\u003d (Long[]) nodesArray.getArray();\\n\\t\\t\\t\\tList\\u003cOsmNode\\u003e nodes \\u003d new ArrayList\\u003cOsmNode\\u003e();\\n\\t\\t\\t\\tboolean brokenWay \\u003d false;\\n\\n\\t\\t\\t\\t// Get the nodes\\n\\t\\t\\t\\tfor(long nodeId : nodeIds){\\n\\t\\t\\t\\t\\tOsmNode node \\u003d OsmNode.findById(nodeId);\\n\\t\\t\\t\\t\\tif (node !\\u003d null){\\n\\t\\t\\t\\t\\t\\tnodes.add(node);\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\tbrokenWay \\u003d true;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif (!brokenWay){\\n\\t\\t\\t\\t\\tway \\u003d new OsmWay(\\n\\t\\t\\t\\t\\t\\t\\trs.getLong(\\\"id\\\"),\\n\\t\\t\\t\\t\\t\\t\\trs.getInt(\\\"vers\\\"),\\n\\t\\t\\t\\t\\t\\t\\trs.getString(\\\"usr\\\"),\\n\\t\\t\\t\\t\\t\\t\\trs.getString(\\\"uid\\\"),\\n\\t\\t\\t\\t\\t\\t\\tnodes,\\n\\t\\t\\t\\t\\t\\t\\trs.getDate(\\\"timest\\\"),\\n\\t\\t\\t\\t\\t\\t\\trs.getString(\\\"featurepicture\\\"),\\n\\t\\t\\t\\t\\t\\t\\thstoreFormatToTags(rs.getString(\\\"tags\\\")));\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tsql \\u003d \\\"delete from osmways where id \\u003d ?\\\";\\n\\t\\t\\t\\t\\tst \\u003d conn.prepareStatement(sql);\\n\\t\\t\\t\\t\\tst.setLong(1, rs.getLong(\\\"id\\\"));\\n\\t\\t\\t\\t\\tst.executeUpdate();\\n\\t\\t\\t\\t\\tfor(long nodeId : nodeIds){\\n\\t\\t\\t\\t\\t\\tOsmNode node \\u003d OsmNode.findById(nodeId);\\n\\t\\t\\t\\t\\t\\tif (node !\\u003d null)\\n\\t\\t\\t\\t\\t\\t\\tnode.delete();\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\te.printStackTrace();\\n\\t\\t} finally {\\n\\t\\t\\tif (conn !\\u003d null) try {\\n\\t\\t\\t\\tconn.close();\\n\\t\\t\\t} catch (SQLException e) {\\n\\t\\t\\t\\te.printStackTrace();\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn way;\\n\\t}\"}","133":"{\"expressionStart\":{\"String:vers\":1188,\"OsmNode.delete()\":1688,\"ResultSet.getDate()\":1274,\"Array.getArray()\":721,\"String:uid\":1245,\"PreparedStatement.executeUpdate()\":1557,\"PreparedStatement.setInt()\":574,\"DB.getDataSource()\":96,\"String\":681,\"ResultSet.next()\":632,\"Long[].\\u003ccast\\u003e\":712,\"Connection.close()\":1819,\"String:tags\":1385,\"int:2\":584,\"int:1\":541,\"\\u003cnullcheck\\u003e\":1667,\"SQLException.printStackTrace()\":1867,\"ResultSet.getInt()\":1178,\"PreparedStatement.setString()\":528,\"OsmFeature.hstoreFormatToTags()\":1342,\"ResultSet.getString()\":1204,\"ResultSet.getArray()\":669,\"ResultSet.getLong()\":1153,\"\\u003creturn\\u003e\":1899,\"String:id\":1164,\"OsmNode.findById()\":965,\"ArrayList.\\u003cinit\\u003e\":209,\"List.add()\":1401,\"DataSource.getConnection()\":278,\"OsmWay.\\u003cinit\\u003e\":1134,\"boolean:true\":892,\"PreparedStatement.setLong()\":1519,\"Connection.prepareStatement()\":497,\"PreparedStatement.executeQuery()\":603,\"Json.stringify()\":544,\"\\u003d\":880},\"expressionEnd\":{\"String:vers\":1194,\"OsmNode.delete()\":1701,\"ResultSet.getDate()\":1294,\"Array.getArray()\":742,\"String:uid\":1250,\"PreparedStatement.executeUpdate()\":1575,\"PreparedStatement.setInt()\":593,\"DB.getDataSource()\":114,\"String\":688,\"ResultSet.next()\":641,\"Long[].\\u003ccast\\u003e\":742,\"Connection.close()\":1831,\"String:tags\":1391,\"int:2\":585,\"int:1\":542,\"\\u003cnullcheck\\u003e\":1679,\"SQLException.printStackTrace()\":1886,\"ResultSet.getInt()\":1195,\"PreparedStatement.setString()\":569,\"OsmFeature.hstoreFormatToTags()\":1393,\"ResultSet.getString()\":1223,\"ResultSet.getArray()\":689,\"ResultSet.getLong()\":1169,\"\\u003creturn\\u003e\":1911,\"String:id\":1168,\"OsmNode.findById()\":989,\"ArrayList.\\u003cinit\\u003e\":236,\"List.add()\":1414,\"DataSource.getConnection()\":296,\"OsmWay.\\u003cinit\\u003e\":1394,\"boolean:true\":896,\"PreparedStatement.setLong()\":1550,\"Connection.prepareStatement()\":523,\"PreparedStatement.executeQuery()\":620,\"Json.stringify()\":568,\"\\u003d\":896},\"rawCode\":\"public static List\\u003cOsmFeature\\u003e findByLocation(JsonNode geometry, int limit){\\n\\n\\t\\tDataSource ds \\u003d DB.getDataSource();\\n\\t\\tConnection conn \\u003d null;\\n\\t\\tPreparedStatement st;\\n\\t\\tResultSet rs;\\n\\n\\t\\tList\\u003cOsmFeature\\u003e ways \\u003d new ArrayList\\u003cOsmFeature\\u003e();\\n\\t\\tOsmWay way \\u003d null;\\n\\n\\t\\ttry {\\n\\t\\t\\tconn \\u003d ds.getConnection();\\n\\t\\t\\tString sql \\u003d \\\"select id, nodes, vers, usr, uid, timest, featurepicture, tags \\\" +\\n\\t\\t\\t\\t\\t\\\"from osmways ORDER BY geom \\u003c-\\u003e ST_Transform(ST_SetSRID(st_geomfromgeojson(?),4326),900913) LIMIT ?\\\";\\n\\t\\t\\tst \\u003d conn.prepareStatement(sql);\\n\\t\\t\\tst.setString(1, Json.stringify(geometry));\\n\\t\\t\\tst.setInt(2, limit);\\n\\t\\t\\trs \\u003d st.executeQuery();\\n\\t\\t\\twhile (rs.next()) {\\n\\n\\t\\t\\t\\tArray nodesArray \\u003d rs.getArray(\\\"nodes\\\");\\n\\t\\t\\t\\tLong[] nodeIds \\u003d (Long[]) nodesArray.getArray();\\n\\t\\t\\t\\tList\\u003cOsmNode\\u003e nodes \\u003d new ArrayList\\u003cOsmNode\\u003e();\\n\\t\\t\\t\\tboolean brokenWay \\u003d false;\\n\\n\\t\\t\\t\\t// Get the nodes\\n\\t\\t\\t\\tif (nodeIds \\u003d\\u003d null){\\n\\t\\t\\t\\t\\tbrokenWay \\u003d true;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tfor(long nodeId : nodeIds){\\n\\t\\t\\t\\t\\t\\tOsmNode node \\u003d OsmNode.findById(nodeId);\\n\\t\\t\\t\\t\\t\\tif (node !\\u003d null){\\n\\t\\t\\t\\t\\t\\t\\tnodes.add(node);\\n\\t\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\tbrokenWay \\u003d true;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif (!brokenWay){\\n\\t\\t\\t\\t\\tway \\u003d new OsmWay(\\n\\t\\t\\t\\t\\t\\t\\trs.getLong(\\\"id\\\"),\\n\\t\\t\\t\\t\\t\\t\\trs.getInt(\\\"vers\\\"),\\n\\t\\t\\t\\t\\t\\t\\trs.getString(\\\"usr\\\"),\\n\\t\\t\\t\\t\\t\\t\\trs.getString(\\\"uid\\\"),\\n\\t\\t\\t\\t\\t\\t\\tnodes,\\n\\t\\t\\t\\t\\t\\t\\trs.getDate(\\\"timest\\\"),\\n\\t\\t\\t\\t\\t\\t\\trs.getString(\\\"featurepicture\\\"),\\n\\t\\t\\t\\t\\t\\t\\tOsmFeature.hstoreFormatToTags(rs.getString(\\\"tags\\\")));\\n\\t\\t\\t\\t\\tways.add(way);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tsql \\u003d \\\"delete from osmways where id \\u003d ?\\\";\\n\\t\\t\\t\\t\\tst \\u003d conn.prepareStatement(sql);\\n\\t\\t\\t\\t\\tst.setLong(1, rs.getLong(\\\"id\\\"));\\n\\t\\t\\t\\t\\tst.executeUpdate();\\n\\t\\t\\t\\t\\tfor(long nodeId : nodeIds){\\n\\t\\t\\t\\t\\t\\tOsmNode node \\u003d OsmNode.findById(nodeId);\\n\\t\\t\\t\\t\\t\\tif (node !\\u003d null)\\n\\t\\t\\t\\t\\t\\t\\tnode.delete();\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\te.printStackTrace();\\n\\t\\t} finally {\\n\\t\\t\\tif (conn !\\u003d null) try {\\n\\t\\t\\t\\tconn.close();\\n\\t\\t\\t} catch (SQLException e) {\\n\\t\\t\\t\\te.printStackTrace();\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn ways;\\n\\t}\"}","134":"{\"expressionStart\":{\"String:vers\":947,\"OsmNode.delete()\":1416,\"ResultSet.getDate()\":1033,\"Array.getArray()\":564,\"String:uid\":1004,\"PreparedStatement.executeUpdate()\":1285,\"DB.getDataSource()\":58,\"String\":289,\"ResultSet.next()\":476,\"Long[].\\u003ccast\\u003e\":555,\"Connection.close()\":1547,\"String:tags\":1133,\"int:1\":431,\"\\u003cnullcheck\\u003e\":779,\"SQLException.printStackTrace()\":1481,\"ResultSet.getInt()\":937,\"ResultSet.getString()\":963,\"OsmWay.hstoreFormatToTags()\":1101,\"ResultSet.getArray()\":512,\"ResultSet.getLong()\":1261,\"String:id\":923,\"\\u003creturn\\u003e\":1627,\"OsmNode.findById()\":744,\"ArrayList.\\u003cinit\\u003e\":613,\"List.add()\":800,\"DataSource.getConnection()\":183,\"OsmWay.\\u003cinit\\u003e\":901,\"boolean:true\":849,\"PreparedStatement.setLong()\":420,\"Connection.prepareStatement()\":1214,\"PreparedStatement.executeQuery()\":447,\"null:null\":159,\"\\u003d\":837},\"expressionEnd\":{\"String:vers\":953,\"OsmNode.delete()\":1429,\"ResultSet.getDate()\":1053,\"Array.getArray()\":585,\"String:uid\":1009,\"PreparedStatement.executeUpdate()\":1303,\"DB.getDataSource()\":76,\"String\":379,\"ResultSet.next()\":485,\"Long[].\\u003ccast\\u003e\":585,\"Connection.close()\":1559,\"String:tags\":1139,\"int:1\":432,\"\\u003cnullcheck\\u003e\":791,\"SQLException.printStackTrace()\":1500,\"ResultSet.getInt()\":954,\"ResultSet.getString()\":982,\"OsmWay.hstoreFormatToTags()\":1141,\"ResultSet.getArray()\":532,\"ResultSet.getLong()\":1277,\"String:id\":927,\"\\u003creturn\\u003e\":1638,\"OsmNode.findById()\":768,\"ArrayList.\\u003cinit\\u003e\":637,\"List.add()\":815,\"DataSource.getConnection()\":201,\"OsmWay.\\u003cinit\\u003e\":1142,\"boolean:true\":853,\"PreparedStatement.setLong()\":437,\"Connection.prepareStatement()\":1240,\"PreparedStatement.executeQuery()\":464,\"null:null\":163,\"\\u003d\":853},\"rawCode\":\"public static OsmWay findById(long id){\\n\\t\\tDataSource ds \\u003d DB.getDataSource();\\n\\t\\tConnection conn \\u003d null;\\n\\t\\tPreparedStatement st;\\n\\t\\tResultSet rs;\\n\\t\\tOsmWay way \\u003d null;\\n\\t\\ttry {\\n\\t\\t\\tconn \\u003d ds.getConnection();\\n\\n\\t\\t\\t// geom is not withdrawn, we generate the geometry from the nodes\\n\\t\\t\\tString sql \\u003d \\\"select id, nodes, vers, usr, uid, timest, featurepicture, tags from osmways where id \\u003d ?\\\";\\n\\t\\t\\tst \\u003d conn.prepareStatement(sql);\\n\\t\\t\\tst.setLong(1, id);\\n\\t\\t\\trs \\u003d st.executeQuery();\\n\\t\\t\\twhile (rs.next()) {\\n\\t\\t\\t\\tArray nodesArray \\u003d rs.getArray(\\\"nodes\\\");\\n\\t\\t\\t\\tLong[] nodeIds \\u003d (Long[]) nodesArray.getArray();\\n\\t\\t\\t\\tList\\u003cOsmNode\\u003e nodes \\u003d new ArrayList\\u003cOsmNode\\u003e();\\n\\t\\t\\t\\tboolean brokenWay \\u003d false;\\n\\n\\t\\t\\t\\t// Get the nodes\\n\\t\\t\\t\\tfor(long nodeId : nodeIds){\\n\\t\\t\\t\\t\\tOsmNode node \\u003d OsmNode.findById(nodeId);\\n\\t\\t\\t\\t\\tif (node !\\u003d null){\\n\\t\\t\\t\\t\\t\\tnodes.add(node);\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\tbrokenWay \\u003d true;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif (!brokenWay){\\n\\t\\t\\t\\t\\tway \\u003d new OsmWay(rs.getLong(\\\"id\\\"),\\n\\t\\t\\t\\t\\t\\t\\trs.getInt(\\\"vers\\\"),\\n\\t\\t\\t\\t\\t\\t\\trs.getString(\\\"usr\\\"),\\n\\t\\t\\t\\t\\t\\t\\trs.getString(\\\"uid\\\"),\\n\\t\\t\\t\\t\\t\\t\\tnodes,\\n\\t\\t\\t\\t\\t\\t\\trs.getDate(\\\"timest\\\"),\\n\\t\\t\\t\\t\\t\\t\\trs.getString(\\\"featurepicture\\\"),\\n\\t\\t\\t\\t\\t\\t\\thstoreFormatToTags(rs.getString(\\\"tags\\\")));\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tsql \\u003d \\\"delete from osmways where id \\u003d ?\\\";\\n\\t\\t\\t\\t\\tst \\u003d conn.prepareStatement(sql);\\n\\t\\t\\t\\t\\tst.setLong(1, rs.getLong(\\\"id\\\"));\\n\\t\\t\\t\\t\\tst.executeUpdate();\\n\\t\\t\\t\\t\\tfor(long nodeId : nodeIds){\\n\\t\\t\\t\\t\\t\\tOsmNode node \\u003d OsmNode.findById(nodeId);\\n\\t\\t\\t\\t\\t\\tif (node !\\u003d null)\\n\\t\\t\\t\\t\\t\\t\\tnode.delete();\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\te.printStackTrace();\\n\\t\\t} finally {\\n\\t\\t\\tif (conn !\\u003d null) try {\\n\\t\\t\\t\\tconn.close();\\n\\t\\t\\t} catch (SQLException e) {\\n\\t\\t\\t\\te.printStackTrace();\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn way;\\n\\t}\"}","135":"{\"expressionStart\":{\"Borrower.\\u003cinit\\u003e\":819,\"String:name\":546,\"ResultSet.getString()\":648,\"String\":508,\"Connection.createStatement()\":172,\"\\u003creturn\\u003e\":1062,\"Exception.getMessage()\":1035,\"ResultSet.next()\":433,\"ArrayList.\\u003cinit\\u003e\":82,\"Statement.close()\":950,\"ArrayList.add()\":918,\"String:Message: \":1021,\"String:bid\":471,\"String:type\":790,\"Statement.executeQuery()\":206,\"UNKNOWN.println()\":1002,\"ResultSet.getInt()\":461},\"expressionEnd\":{\"Borrower.\\u003cinit\\u003e\":911,\"String:name\":552,\"ResultSet.getString()\":676,\"String\":518,\"Connection.createStatement()\":193,\"\\u003creturn\\u003e\":1079,\"Exception.getMessage()\":1050,\"ResultSet.next()\":442,\"ArrayList.\\u003cinit\\u003e\":107,\"Statement.close()\":962,\"ArrayList.add()\":934,\"String:Message: \":1032,\"String:bid\":476,\"String:type\":796,\"Statement.executeQuery()\":249,\"UNKNOWN.println()\":1051,\"ResultSet.getInt()\":477},\"rawCode\":\"public ArrayList\\u003cBorrower\\u003e getBorrower()\\r\\n\\t{\\r\\n\\r\\n\\t\\tArrayList\\u003cBorrower\\u003e borrowers \\u003d new ArrayList\\u003cBorrower\\u003e();\\r\\n\\t\\tStatement  stmt;\\r\\n\\t\\tResultSet  rs;\\r\\n\\r\\n\\t\\ttry\\r\\n\\t\\t{\\r\\n\\t\\t\\tstmt \\u003d con.createStatement();\\r\\n\\r\\n\\t\\t\\trs \\u003d stmt.executeQuery(\\\"SELECT * FROM borrower\\\");\\r\\n\\r\\n\\t\\t\\tint bid;\\r\\n\\t\\t\\tString password;\\r\\n\\t\\t\\tString name;\\r\\n\\t\\t\\tString address;\\r\\n\\t\\t\\tint phone;\\r\\n\\t\\t\\tString emailAddress;\\r\\n\\t\\t\\tint sinOrStNo;\\r\\n\\t\\t\\tString expiryDate;\\r\\n\\t\\t\\tString type;\\r\\n\\t\\t\\twhile(rs.next())\\r\\n\\t\\t\\t{\\r\\n\\t\\t\\t\\tbid \\u003d rs.getInt(\\\"bid\\\");\\r\\n\\t\\t\\t\\tpassword \\u003d rs.getString(\\\"password\\\");\\r\\n\\t\\t\\t\\tname \\u003d rs.getString(\\\"name\\\");\\r\\n\\t\\t\\t\\taddress \\u003d rs.getString(\\\"address\\\");\\r\\n\\t\\t\\t\\tphone \\u003d rs.getInt(\\\"phone\\\");\\r\\n\\t\\t\\t\\temailAddress \\u003d rs.getString(\\\"emailAddress\\\");\\r\\n\\t\\t\\t\\tsinOrStNo \\u003d rs.getInt(\\\"sinOrStNo\\\");\\r\\n\\t\\t\\t\\texpiryDate \\u003d rs.getString(\\\"expiryDate\\\");\\r\\n\\t\\t\\t\\ttype \\u003d rs.getString(\\\"type\\\");\\r\\n\\r\\n\\t\\t\\t\\tBorrower b \\u003d new Borrower(bid,password,name,address,phone,emailAddress,\\r\\n\\t\\t\\t\\t\\t\\tsinOrStNo,expiryDate,type);\\r\\n\\t\\t\\t\\tborrowers.add(b);\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tstmt.close();\\r\\n\\t\\t}\\r\\n\\t\\tcatch (Exception ex)\\r\\n\\t\\t{\\r\\n\\t\\t\\tSystem.out.println(\\\"Message: \\\" + ex.getMessage());\\r\\n\\t\\t}\\t\\r\\n\\t\\treturn borrowers;\\r\\n\\t}\"}","136":"{\"expressionStart\":{\"ResultSet.getString()\":445,\"String\":458,\"\\u003creturn\\u003e\":571,\"ResultSet.next()\":280,\"ArrayList.\\u003cinit\\u003e\":81,\"ArrayList.add()\":297,\"Connection.prepareStatement()\":171,\"String:bid\":367,\"PreparedStatement.executeQuery()\":250,\"null:null\":477,\"UNKNOWN.println()\":525,\"Borrowing.\\u003cinit\\u003e\":308,\"ResultSet.getInt()\":357,\"SQLException.getMessage()\":544},\"expressionEnd\":{\"ResultSet.getString()\":468,\"String\":467,\"\\u003creturn\\u003e\":585,\"ResultSet.next()\":289,\"ArrayList.\\u003cinit\\u003e\":107,\"ArrayList.add()\":483,\"Connection.prepareStatement()\":239,\"String:bid\":372,\"PreparedStatement.executeQuery()\":267,\"null:null\":481,\"UNKNOWN.println()\":559,\"Borrowing.\\u003cinit\\u003e\":482,\"ResultSet.getInt()\":373,\"SQLException.getMessage()\":558},\"rawCode\":\"public ArrayList\\u003cBorrowing\\u003e getOutBorrowings(){\\r\\n\\t\\tArrayList\\u003cBorrowing\\u003e result \\u003d new ArrayList\\u003cBorrowing\\u003e();\\r\\n\\t\\tPreparedStatement ps;\\r\\n\\t\\tResultSet rs;\\r\\n\\r\\n\\t\\ttry {\\r\\n\\t\\t\\tps \\u003d con.prepareStatement(\\\"SELECT * FROM borrowing WHERE inDate is null\\\");\\r\\n\\t\\t\\trs \\u003d ps.executeQuery();\\r\\n\\t\\t\\twhile (rs.next()){\\r\\n\\t\\t\\t\\tresult.add(new Borrowing(\\r\\n\\t\\t\\t\\t\\t\\trs.getInt(\\\"borid\\\"),\\r\\n\\t\\t\\t\\t\\t\\trs.getInt(\\\"bid\\\"),\\r\\n\\t\\t\\t\\t\\t\\trs.getString(\\\"callnumber\\\"),\\r\\n\\t\\t\\t\\t\\t\\trs.getInt(\\\"copyno\\\"),\\r\\n\\t\\t\\t\\t\\t\\trs.getString(\\\"outdate\\\"),\\r\\n\\t\\t\\t\\t\\t\\tnull));\\r\\n\\t\\t\\t}\\r\\n\\t\\t} catch (SQLException e) {\\r\\n\\t\\t\\tSystem.out.println(e.getMessage());\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn result;\\r\\n\\r\\n\\t}\"}","137":"{\"expressionStart\":{\"ResultSet.getString()\":433,\"String\":414,\"Connection.createStatement()\":172,\"\\u003creturn\\u003e\":644,\"ResultSet.next()\":264,\"ArrayList.\\u003cinit\\u003e\":81,\"Statement.close()\":529,\"String:callNumber\":381,\"ArrayList.add()\":496,\"String:bid\":353,\"String:Message: \":603,\"Statement.executeQuery()\":206,\"Borrowing.\\u003cinit\\u003e\":302,\"UNKNOWN.println()\":584,\"SQLException.getMessage()\":617,\"ResultSet.getInt()\":404},\"expressionEnd\":{\"ResultSet.getString()\":456,\"String\":422,\"Connection.createStatement()\":193,\"\\u003creturn\\u003e\":662,\"ResultSet.next()\":273,\"ArrayList.\\u003cinit\\u003e\":107,\"Statement.close()\":541,\"String:callNumber\":393,\"ArrayList.add()\":513,\"String:bid\":358,\"String:Message: \":614,\"Statement.executeQuery()\":250,\"Borrowing.\\u003cinit\\u003e\":489,\"UNKNOWN.println()\":633,\"SQLException.getMessage()\":632,\"ResultSet.getInt()\":423},\"rawCode\":\"public ArrayList\\u003cBorrowing\\u003e getBorrowing(){\\r\\n\\t\\tArrayList\\u003cBorrowing\\u003e borrowings \\u003d new ArrayList\\u003cBorrowing\\u003e();\\r\\n\\t\\tStatement  stmt;\\r\\n\\t\\tResultSet  rs;\\r\\n\\r\\n\\t\\ttry\\r\\n\\t\\t{\\r\\n\\t\\t\\tstmt \\u003d con.createStatement();\\r\\n\\r\\n\\t\\t\\trs \\u003d stmt.executeQuery(\\\"SELECT * FROM borrowing\\\");\\r\\n\\r\\n\\t\\t\\twhile(rs.next())\\r\\n\\t\\t\\t{\\r\\n\\r\\n\\t\\t\\t\\tBorrowing b \\u003d new Borrowing(rs.getInt(\\\"borid\\\"),\\r\\n\\t\\t\\t\\t\\t\\trs.getInt(\\\"bid\\\"),\\r\\n\\t\\t\\t\\t\\t\\trs.getString(\\\"callNumber\\\"), \\r\\n\\t\\t\\t\\t\\t\\trs.getInt(\\\"copyNo\\\"), \\r\\n\\t\\t\\t\\t\\t\\trs.getString(\\\"outDate\\\"), \\r\\n\\t\\t\\t\\t\\t\\trs.getString(\\\"inDate\\\"));\\r\\n\\t\\t\\t\\tborrowings.add(b);\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tstmt.close();\\r\\n\\t\\t}\\r\\n\\t\\tcatch (SQLException ex)\\r\\n\\t\\t{\\r\\n\\t\\t\\tSystem.out.println(\\\"Message: \\\" + ex.getMessage());\\r\\n\\t\\t}\\t\\r\\n\\t\\treturn borrowings;\\r\\n\\t}\"}","138":"{\"expressionStart\":{\"PreparedStatement.setString()\":265,\"HasSubject.\\u003cinit\\u003e\":368,\"ResultSet.getString()\":383,\"String\":214,\"\\u003creturn\\u003e\":587,\"ResultSet.next()\":331,\"ArrayList.\\u003cinit\\u003e\":97,\"String:callNumber\":396,\"ArrayList.add()\":442,\"String:Message: \":546,\"Connection.prepareStatement()\":193,\"PreparedStatement.executeQuery()\":300,\"int:1\":278,\"PreparedStatement.close()\":474,\"UNKNOWN.println()\":527,\"SQLException.getMessage()\":560},\"expressionEnd\":{\"PreparedStatement.setString()\":289,\"HasSubject.\\u003cinit\\u003e\":435,\"ResultSet.getString()\":409,\"String\":258,\"\\u003creturn\\u003e\":606,\"ResultSet.next()\":340,\"ArrayList.\\u003cinit\\u003e\":124,\"String:callNumber\":408,\"ArrayList.add()\":460,\"String:Message: \":557,\"Connection.prepareStatement()\":259,\"PreparedStatement.executeQuery()\":317,\"int:1\":279,\"PreparedStatement.close()\":484,\"UNKNOWN.println()\":576,\"SQLException.getMessage()\":575},\"rawCode\":\"public ArrayList\\u003cHasSubject\\u003e getSubject(String subject) {\\r\\n\\t\\tArrayList\\u003cHasSubject\\u003e hasSubjects \\u003d new ArrayList\\u003cHasSubject\\u003e();\\r\\n\\t\\tPreparedStatement  ps;\\r\\n\\t\\tResultSet  rs;\\r\\n\\r\\n\\t\\ttry\\r\\n\\t\\t{\\r\\n\\t\\t\\tps \\u003d con.prepareStatement(\\\"SELECT * FROM hassubject WHERE subject \\u003d ?\\\");\\r\\n\\t\\t\\tps.setString(1, subject);\\r\\n\\t\\t\\trs \\u003d ps.executeQuery();\\r\\n\\r\\n\\t\\t\\twhile(rs.next())\\r\\n\\t\\t\\t{\\r\\n\\t\\t\\t\\tHasSubject h \\u003d new HasSubject(rs.getString(\\\"callNumber\\\"), rs.getString(\\\"subject\\\"));\\r\\n\\t\\t\\t\\thasSubjects.add(h);\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tps.close();\\r\\n\\t\\t}\\r\\n\\t\\tcatch (SQLException ex)\\r\\n\\t\\t{\\r\\n\\t\\t\\tSystem.out.println(\\\"Message: \\\" + ex.getMessage());\\r\\n\\t\\t}\\t\\r\\n\\t\\treturn hasSubjects;\\r\\n\\t}\"}","139":"{\"expressionStart\":{\"ResultSet.getString()\":357,\"PreparedStatement.setInt()\":263,\"String\":206,\"\\u003creturn\\u003e\":549,\"ResultSet.next()\":322,\"ArrayList.\\u003cinit\\u003e\":74,\"Connection.prepareStatement()\":185,\"String:Message: \":508,\"PreparedStatement.executeQuery()\":291,\"JDBCManager.searchBookByCallID()\":387,\"int:1\":273,\"PreparedStatement.close()\":436,\"UNKNOWN.println()\":489,\"SQLException.getMessage()\":522},\"expressionEnd\":{\"ResultSet.getString()\":372,\"PreparedStatement.setInt()\":280,\"String\":256,\"\\u003creturn\\u003e\":562,\"ResultSet.next()\":331,\"ArrayList.\\u003cinit\\u003e\":95,\"Connection.prepareStatement()\":257,\"String:Message: \":519,\"PreparedStatement.executeQuery()\":308,\"JDBCManager.searchBookByCallID()\":422,\"int:1\":274,\"PreparedStatement.close()\":446,\"UNKNOWN.println()\":538,\"SQLException.getMessage()\":537},\"rawCode\":\"public ArrayList\\u003cBook\\u003e getBookOnHold(int bid){\\r\\n\\t\\tArrayList\\u003cBook\\u003e books \\u003d new ArrayList\\u003cBook\\u003e();\\r\\n\\t\\tPreparedStatement ps;\\r\\n\\t\\tResultSet  rs;\\r\\n\\t\\tString callNumber;\\r\\n\\r\\n\\t\\ttry\\r\\n\\t\\t{\\r\\n\\t\\t\\tps \\u003d con.prepareStatement(\\\"SELECT callNumber FROM holdrequest WHERE bid \\u003d ?\\\");\\r\\n\\t\\t\\tps.setInt(1, bid);\\r\\n\\t\\t\\trs \\u003d ps.executeQuery();\\r\\n\\r\\n\\t\\t\\twhile(rs.next())\\r\\n\\t\\t\\t{\\r\\n\\t\\t\\t\\tcallNumber \\u003d rs.getString(1);\\r\\n\\t\\t\\t\\tbooks \\u003d this.searchBookByCallID(callNumber);\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tps.close();\\r\\n\\t\\t}\\r\\n\\t\\tcatch (SQLException ex)\\r\\n\\t\\t{\\r\\n\\t\\t\\tSystem.out.println(\\\"Message: \\\" + ex.getMessage());\\r\\n\\t\\t}\\t\\r\\n\\t\\treturn books;\\r\\n\\t}\"}","140":"{\"expressionStart\":{\"PreparedStatement.setString()\":300,\"ResultSet.getString()\":448,\"String\":233,\"\\u003creturn\\u003e\":680,\"ResultSet.next()\":398,\"ArrayList.\\u003cinit\\u003e\":122,\"ArrayList.add()\":543,\"String:Message: \":640,\"Connection.prepareStatement()\":212,\"PreparedStatement.executeQuery()\":367,\"BookCopy.\\u003cinit\\u003e\":435,\"int:2\":346,\"int:1\":313,\"UNKNOWN.println()\":621,\"PreparedStatement.close()\":574,\"SQLException.getMessage()\":654,\"ResultSet.getInt()\":483},\"expressionEnd\":{\"PreparedStatement.setString()\":327,\"ResultSet.getString()\":474,\"String\":293,\"\\u003creturn\\u003e\":698,\"ResultSet.next()\":407,\"ArrayList.\\u003cinit\\u003e\":147,\"ArrayList.add()\":560,\"String:Message: \":651,\"Connection.prepareStatement()\":294,\"PreparedStatement.executeQuery()\":384,\"BookCopy.\\u003cinit\\u003e\":534,\"int:2\":347,\"int:1\":314,\"UNKNOWN.println()\":670,\"PreparedStatement.close()\":584,\"SQLException.getMessage()\":669,\"ResultSet.getInt()\":502},\"rawCode\":\"public ArrayList\\u003cBookCopy\\u003e searchBookCopyByCallID(String callNumber, String status) {\\r\\n\\t\\tArrayList\\u003cBookCopy\\u003e bookcopies \\u003d new ArrayList\\u003cBookCopy\\u003e();\\r\\n\\t\\tPreparedStatement  ps;\\r\\n\\t\\tResultSet rs;\\r\\n\\r\\n\\t\\ttry {\\r\\n\\t\\t\\tps \\u003d con.prepareStatement(\\\"select * from bookcopy where callnumber \\u003d ? AND status \\u003d ?\\\");\\r\\n\\t\\t\\tps.setString(1, callNumber);\\r\\n\\t\\t\\tps.setString(2, status);\\r\\n\\t\\t\\trs \\u003d ps.executeQuery();\\r\\n\\r\\n\\t\\t\\twhile(rs.next())\\r\\n\\t\\t\\t{\\r\\n\\r\\n\\t\\t\\t\\tBookCopy b \\u003d new BookCopy(rs.getString(\\\"callnumber\\\"),\\r\\n\\t\\t\\t\\t\\t\\trs.getInt(\\\"copyno\\\"),\\r\\n\\t\\t\\t\\t\\t\\trs.getString(\\\"status\\\"));\\r\\n\\r\\n\\t\\t\\t\\tbookcopies.add(b);\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tps.close();\\r\\n\\t\\t} catch (SQLException ex) {\\r\\n\\t\\t\\tSystem.out.println(\\\"Message: \\\" + ex.getMessage());\\r\\n\\t\\t}\\r\\n\\t\\treturn bookcopies;\\r\\n\\t}\"}","141":"{\"expressionStart\":{\"String:name\":354,\"ResultSet.getString()\":313,\"String\":223,\"Connection.createStatement()\":171,\"\\u003creturn\\u003e\":514,\"ResultSet.next()\":263,\"ArrayList.\\u003cinit\\u003e\":80,\"Statement.close()\":399,\"String:callNumber\":326,\"ArrayList.add()\":369,\"String:Message: \":473,\"HasAuthor.\\u003cinit\\u003e\":299,\"UNKNOWN.println()\":454,\"Statement.executeQuery()\":205,\"SQLException.getMessage()\":487},\"expressionEnd\":{\"String:name\":360,\"ResultSet.getString()\":339,\"String\":248,\"Connection.createStatement()\":192,\"\\u003creturn\\u003e\":531,\"ResultSet.next()\":272,\"ArrayList.\\u003cinit\\u003e\":106,\"Statement.close()\":411,\"String:callNumber\":338,\"ArrayList.add()\":385,\"String:Message: \":484,\"HasAuthor.\\u003cinit\\u003e\":362,\"UNKNOWN.println()\":503,\"Statement.executeQuery()\":249,\"SQLException.getMessage()\":502},\"rawCode\":\"public ArrayList\\u003cHasAuthor\\u003e getHasAuthor(){\\r\\n\\t\\tArrayList\\u003cHasAuthor\\u003e hasAuthor \\u003d new ArrayList\\u003cHasAuthor\\u003e();\\r\\n\\t\\tStatement  stmt;\\r\\n\\t\\tResultSet  rs;\\r\\n\\r\\n\\t\\ttry\\r\\n\\t\\t{\\r\\n\\t\\t\\tstmt \\u003d con.createStatement();\\r\\n\\r\\n\\t\\t\\trs \\u003d stmt.executeQuery(\\\"SELECT * FROM hasauthor\\\");\\r\\n\\r\\n\\t\\t\\twhile(rs.next())\\r\\n\\t\\t\\t{\\r\\n\\t\\t\\t\\tHasAuthor h \\u003d new HasAuthor(rs.getString(\\\"callNumber\\\"), rs.getString(\\\"name\\\"));\\r\\n\\t\\t\\t\\thasAuthor.add(h);\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tstmt.close();\\r\\n\\t\\t}\\r\\n\\t\\tcatch (SQLException ex)\\r\\n\\t\\t{\\r\\n\\t\\t\\tSystem.out.println(\\\"Message: \\\" + ex.getMessage());\\r\\n\\t\\t}\\t\\r\\n\\t\\treturn hasAuthor;\\r\\n\\t}\"}","142":"{\"expressionStart\":{\"PreparedStatement.setString()\":269,\"HoldRequest.\\u003cinit\\u003e\":367,\"ResultSet.getString()\":460,\"String\":214,\"\\u003creturn\\u003e\":584,\"ResultSet.next()\":339,\"ArrayList.\\u003cinit\\u003e\":143,\"ArrayList.add()\":356,\"String:bid\":426,\"Connection.prepareStatement()\":193,\"PreparedStatement.executeQuery()\":307,\"int:1\":282,\"UNKNOWN.println()\":538,\"ResultSet.getInt()\":391,\"SQLException.getMessage()\":557},\"expressionEnd\":{\"PreparedStatement.setString()\":296,\"HoldRequest.\\u003cinit\\u003e\":494,\"ResultSet.getString()\":485,\"String\":262,\"\\u003creturn\\u003e\":598,\"ResultSet.next()\":348,\"ArrayList.\\u003cinit\\u003e\":171,\"ArrayList.add()\":495,\"String:bid\":431,\"Connection.prepareStatement()\":263,\"PreparedStatement.executeQuery()\":324,\"int:1\":283,\"UNKNOWN.println()\":572,\"ResultSet.getInt()\":407,\"SQLException.getMessage()\":571},\"rawCode\":\"public ArrayList\\u003cHoldRequest\\u003e getHoldRequests(String callNumber){\\r\\n\\t\\tPreparedStatement ps;\\r\\n\\t\\tResultSet rs;\\r\\n\\t\\tArrayList\\u003cHoldRequest\\u003e result \\u003d new ArrayList\\u003cHoldRequest\\u003e();\\r\\n\\r\\n\\t\\ttry {\\r\\n\\t\\t\\tps \\u003d con.prepareStatement(\\\"SELECT * FROM holdrequest WHERE callnumber \\u003d ?\\\");\\r\\n\\t\\t\\tps.setString(1, callNumber);\\r\\n\\t\\t\\trs \\u003d ps.executeQuery();\\r\\n\\r\\n\\t\\t\\twhile (rs.next()){\\r\\n\\t\\t\\t\\tresult.add(new HoldRequest(\\r\\n\\t\\t\\t\\t\\t\\trs.getInt(\\\"hid\\\"),\\r\\n\\t\\t\\t\\t\\t\\trs.getInt(\\\"bid\\\"),\\r\\n\\t\\t\\t\\t\\t\\tcallNumber,\\r\\n\\t\\t\\t\\t\\t\\trs.getString(\\\"issueDate\\\")\\r\\n\\t\\t\\t\\t\\t\\t));\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}catch (SQLException e) {\\r\\n\\t\\t\\tSystem.out.println(e.getMessage());\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn result;\\r\\n\\t}\"}","143":"{\"expressionStart\":{\"Fine.\\u003cinit\\u003e\":319,\"ResultSet.getString()\":381,\"PreparedStatement.setInt()\":225,\"String\":363,\"\\u003creturn\\u003e\":615,\"ResultSet.next()\":286,\"ArrayList.\\u003cinit\\u003e\":74,\"ArrayList.add()\":474,\"Connection.prepareStatement()\":163,\"String:Message: \":574,\"PreparedStatement.executeQuery()\":255,\"int:1\":235,\"UNKNOWN.println()\":555,\"PreparedStatement.close()\":502,\"ResultSet.getInt()\":448,\"SQLException.getMessage()\":588},\"expressionEnd\":{\"Fine.\\u003cinit\\u003e\":467,\"ResultSet.getString()\":406,\"PreparedStatement.setInt()\":244,\"String\":371,\"\\u003creturn\\u003e\":628,\"ResultSet.next()\":295,\"ArrayList.\\u003cinit\\u003e\":95,\"ArrayList.add()\":486,\"Connection.prepareStatement()\":219,\"String:Message: \":585,\"PreparedStatement.executeQuery()\":272,\"int:1\":236,\"UNKNOWN.println()\":604,\"PreparedStatement.close()\":512,\"ResultSet.getInt()\":466,\"SQLException.getMessage()\":603},\"rawCode\":\"public ArrayList\\u003cFine\\u003e getFineByID(int borid){\\r\\n\\t\\tArrayList\\u003cFine\\u003e fines \\u003d new ArrayList\\u003cFine\\u003e();\\r\\n\\t\\tPreparedStatement ps;\\r\\n\\t\\tResultSet  rs;\\r\\n\\r\\n\\t\\ttry\\r\\n\\t\\t{\\r\\n\\t\\t\\tps \\u003d con.prepareStatement(\\\"SELECT * FROM fine WHERE borid\\u003d?\\\");\\r\\n\\t\\t\\tps.setInt(1, borid);\\r\\n\\t\\t\\trs \\u003d ps.executeQuery();\\r\\n\\r\\n\\t\\t\\twhile(rs.next())\\r\\n\\t\\t\\t{\\r\\n\\r\\n\\t\\t\\t\\tFine f \\u003d new Fine(rs.getInt(\\\"fid\\\"),\\r\\n\\t\\t\\t\\t\\t\\trs.getInt(\\\"amount\\\"),\\r\\n\\t\\t\\t\\t\\t\\trs.getString(\\\"issueDate\\\"),\\r\\n\\t\\t\\t\\t\\t\\trs.getString(\\\"paidDate\\\"),\\r\\n\\t\\t\\t\\t\\t\\trs.getInt(\\\"borid\\\"));\\r\\n\\t\\t\\t\\tfines.add(f);\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tps.close();\\r\\n\\t\\t}\\r\\n\\t\\tcatch (SQLException ex)\\r\\n\\t\\t{\\r\\n\\t\\t\\tSystem.out.println(\\\"Message: \\\" + ex.getMessage());\\r\\n\\t\\t}\\t\\r\\n\\t\\treturn fines;\\r\\n\\t}\"}","144":"{\"expressionStart\":{\"ResultSet.getString()\":457,\"String\":350,\"Connection.createStatement()\":174,\"\\u003creturn\\u003e\":667,\"ResultSet.next()\":286,\"ArrayList.\\u003cinit\\u003e\":83,\"Statement.close()\":552,\"String:callNumber\":405,\"ArrayList.add()\":520,\"String:Message: \":626,\"String:bid\":377,\"Statement.executeQuery()\":208,\"UNKNOWN.println()\":607,\"Borrowing.\\u003cinit\\u003e\":326,\"ResultSet.getInt()\":428,\"SQLException.getMessage()\":640},\"expressionEnd\":{\"ResultSet.getString()\":480,\"String\":357,\"Connection.createStatement()\":195,\"\\u003creturn\\u003e\":684,\"ResultSet.next()\":295,\"ArrayList.\\u003cinit\\u003e\":109,\"Statement.close()\":564,\"String:callNumber\":417,\"ArrayList.add()\":536,\"String:Message: \":637,\"String:bid\":382,\"Statement.executeQuery()\":272,\"UNKNOWN.println()\":656,\"Borrowing.\\u003cinit\\u003e\":513,\"ResultSet.getInt()\":447,\"SQLException.getMessage()\":655},\"rawCode\":\"public ArrayList\\u003cBorrowing\\u003e getBorrowingAll(){\\r\\n\\t\\tArrayList\\u003cBorrowing\\u003e borrowing \\u003d new ArrayList\\u003cBorrowing\\u003e();\\r\\n\\t\\tStatement  stmt;\\r\\n\\t\\tResultSet  rs;\\r\\n\\r\\n\\t\\ttry\\r\\n\\t\\t{\\r\\n\\t\\t\\tstmt \\u003d con.createStatement();\\r\\n\\r\\n\\t\\t\\trs \\u003d stmt.executeQuery(\\\"SELECT * FROM borrowing ORDER BY callNumber\\\");\\r\\n\\r\\n\\t\\t\\twhile(rs.next())\\r\\n\\t\\t\\t{\\t\\t\\t\\t\\r\\n\\t\\t\\t\\tBorrowing b \\u003d new Borrowing(rs.getInt(\\\"borid\\\"),\\r\\n\\t\\t\\t\\t\\t\\trs.getInt(\\\"bid\\\"),\\r\\n\\t\\t\\t\\t\\t\\trs.getString(\\\"callNumber\\\"), \\r\\n\\t\\t\\t\\t\\t\\trs.getInt(\\\"copyNo\\\"), \\r\\n\\t\\t\\t\\t\\t\\trs.getString(\\\"outDate\\\"), \\r\\n\\t\\t\\t\\t\\t\\trs.getString(\\\"inDate\\\"));\\r\\n\\t\\t\\t\\tborrowing.add(b);\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tstmt.close();\\r\\n\\t\\t}\\r\\n\\t\\tcatch (SQLException ex)\\r\\n\\t\\t{\\r\\n\\t\\t\\tSystem.out.println(\\\"Message: \\\" + ex.getMessage());\\r\\n\\t\\t}\\t\\r\\n\\t\\treturn borrowing;\\r\\n\\t}\"}","145":"{\"expressionStart\":{\"PreparedStatement.setString()\":248,\"ResultSet.getString()\":434,\"PreparedStatement.setInt()\":281,\"String\":392,\"\\u003creturn\\u003e\":637,\"ResultSet.next()\":339,\"String:bid\":419,\"Connection.prepareStatement()\":140,\"PreparedStatement.executeQuery()\":312,\"null:null\":644,\"int:2\":291,\"int:1\":261,\"Borrowing.\\u003cinit\\u003e\":360,\"UNKNOWN.println()\":591,\"ResultSet.getInt()\":469,\"SQLException.getMessage()\":610},\"expressionEnd\":{\"PreparedStatement.setString()\":275,\"ResultSet.getString()\":460,\"PreparedStatement.setInt()\":301,\"String\":399,\"\\u003creturn\\u003e\":649,\"ResultSet.next()\":348,\"String:bid\":424,\"Connection.prepareStatement()\":242,\"PreparedStatement.executeQuery()\":329,\"null:null\":648,\"int:2\":292,\"int:1\":262,\"Borrowing.\\u003cinit\\u003e\":534,\"UNKNOWN.println()\":625,\"ResultSet.getInt()\":488,\"SQLException.getMessage()\":624},\"rawCode\":\"public Borrowing getBorrowing(String callNumber, int copyNo){\\r\\n\\t\\tBorrowing b;\\r\\n\\t\\tPreparedStatement ps;\\r\\n\\t\\tResultSet rs;\\r\\n\\r\\n\\t\\ttry {\\r\\n\\t\\t\\tps \\u003d con.prepareStatement(\\\"SELECT * FROM borrowing WHERE inDate is null AND callnumber \\u003d ? AND copyno \\u003d ?\\\");\\r\\n\\t\\t\\tps.setString(1, callNumber);\\r\\n\\t\\t\\tps.setInt(2, copyNo);\\r\\n\\t\\t\\trs \\u003d ps.executeQuery();\\r\\n\\t\\t\\tif (rs.next()){\\r\\n\\t\\t\\t\\tb \\u003d new Borrowing(\\r\\n\\t\\t\\t\\t\\t\\trs.getInt(\\\"borid\\\"),\\r\\n\\t\\t\\t\\t\\t\\trs.getInt(\\\"bid\\\"),\\r\\n\\t\\t\\t\\t\\t\\trs.getString(\\\"callnumber\\\"),\\r\\n\\t\\t\\t\\t\\t\\trs.getInt(\\\"copyno\\\"),\\r\\n\\t\\t\\t\\t\\t\\trs.getString(\\\"outdate\\\"),\\r\\n\\t\\t\\t\\t\\t\\tnull);\\r\\n\\t\\t\\t\\treturn b;\\r\\n\\t\\t\\t}\\r\\n\\t\\t} catch (SQLException e) {\\r\\n\\t\\t\\tSystem.out.println(e.getMessage());\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn null;\\r\\n\\r\\n\\t}\"}","146":"{\"expressionStart\":{\"PreparedStatement.setString()\":497,\"\\u003cthrow\\u003e\":318,\"SQLException.\\u003cinit\\u003e\":324,\"ResultSet.getString()\":277,\"PreparedStatement.setInt()\":198,\"String\":341,\"\\u003creturn\\u003e\":656,\"ResultSet.next()\":253,\"Connection.prepareStatement()\":130,\"PreparedStatement.executeQuery()\":530,\"ResultSet.close()\":392,\"String:type\":290,\"int:1\":208,\"PreparedStatement.close()\":377,\"ResultSet.getInt()\":589},\"expressionEnd\":{\"PreparedStatement.setString()\":519,\"\\u003cthrow\\u003e\":365,\"SQLException.\\u003cinit\\u003e\":364,\"ResultSet.getString()\":297,\"PreparedStatement.setInt()\":215,\"String\":363,\"\\u003creturn\\u003e\":670,\"ResultSet.next()\":262,\"Connection.prepareStatement()\":193,\"PreparedStatement.executeQuery()\":548,\"ResultSet.close()\":402,\"String:type\":296,\"int:1\":209,\"PreparedStatement.close()\":387,\"ResultSet.getInt()\":616},\"rawCode\":\"public int getTimeLimit(int bid) throws SQLException{\\r\\n\\t\\tPreparedStatement ps,ps2;\\r\\n\\t\\tResultSet rs,rs2;\\r\\n\\t\\tString type;\\r\\n\\r\\n\\t\\tps \\u003d con.prepareStatement(\\\"SELECT type FROM borrower WHERE bid \\u003d ?\\\");\\r\\n\\t\\tps.setInt(1, bid);\\r\\n\\t\\trs \\u003d ps.executeQuery();\\r\\n\\r\\n\\t\\tif (rs.next()) {\\r\\n\\t\\t\\ttype \\u003d rs.getString(\\\"type\\\");\\r\\n\\t\\t}\\r\\n\\t\\telse {\\r\\n\\t\\t\\tthrow new SQLException(\\\"No borrower matches!\\\");\\r\\n\\t\\t}\\t\\r\\n\\r\\n\\t\\tps.close();\\r\\n\\t\\trs.close();\\r\\n\\r\\n\\t\\tps2 \\u003d con.prepareStatement(\\\"SELECT bookTimeLimit FROM borrowertype WHERE type \\u003d ?\\\");\\r\\n\\t\\tps2.setString(1, type);\\r\\n\\t\\trs2 \\u003d ps2.executeQuery();\\r\\n\\r\\n\\t\\tif (rs2.next()){\\r\\n\\t\\t\\tint result \\u003d rs2.getInt(\\\"bookTimeLimit\\\");\\r\\n\\t\\t\\tps2.close();\\r\\n\\t\\t\\trs2.close();\\r\\n\\t\\t\\treturn result;\\r\\n\\t\\t}\\r\\n\\t\\telse throw new SQLException(\\\"type is invalid\\\");\\t\\r\\n\\r\\n\\t}\"}","147":"{\"expressionStart\":{\"ResultSet.getString()\":282,\"PreparedStatement.setInt()\":197,\"String\":295,\"\\u003creturn\\u003e\":432,\"ResultSet.next()\":253,\"Connection.prepareStatement()\":127,\"String:Message: \":391,\"PreparedStatement.executeQuery()\":227,\"null:null\":61,\"int:1\":207,\"PreparedStatement.close()\":319,\"UNKNOWN.println()\":372,\"SQLException.getMessage()\":405},\"expressionEnd\":{\"ResultSet.getString()\":307,\"PreparedStatement.setInt()\":216,\"String\":306,\"\\u003creturn\\u003e\":449,\"ResultSet.next()\":262,\"Connection.prepareStatement()\":191,\"String:Message: \":402,\"PreparedStatement.executeQuery()\":244,\"null:null\":65,\"int:1\":208,\"PreparedStatement.close()\":329,\"UNKNOWN.println()\":421,\"SQLException.getMessage()\":420},\"rawCode\":\"public String getIssueDate(int borid){\\r\\n\\t\\tString issueDate \\u003d null;\\r\\n\\t\\tResultSet  rs;\\r\\n\\t\\tPreparedStatement ps;\\r\\n\\t\\ttry{\\r\\n\\t\\t\\tps \\u003d con.prepareStatement(\\\"SELECT issueDate FROM fine WHERE borid\\u003d?\\\");\\r\\n\\t\\t\\tps.setInt(1, borid);\\r\\n\\t\\t\\trs \\u003d ps.executeQuery();\\r\\n\\t\\t\\tif(rs.next()){\\r\\n\\t\\t\\t\\tissueDate \\u003d rs.getString(\\\"issueDate\\\");\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tps.close();\\r\\n\\t\\t}\\r\\n\\t\\tcatch (SQLException ex)\\r\\n\\t\\t{\\r\\n\\t\\t\\tSystem.out.println(\\\"Message: \\\" + ex.getMessage());\\r\\n\\t\\t}\\t\\r\\n\\t\\treturn issueDate;\\r\\n\\t}\"}","148":"{\"expressionStart\":{\"PreparedStatement.setString()\":245,\"String:title\":433,\"Book.\\u003cinit\\u003e\":347,\"ResultSet.getString()\":391,\"String\":197,\"\\u003creturn\\u003e\":676,\"ResultSet.next()\":314,\"ArrayList.\\u003cinit\\u003e\":90,\"ArrayList.add()\":544,\"Connection.prepareStatement()\":176,\"String:Message: \":636,\"PreparedStatement.executeQuery()\":283,\"int:1\":258,\"PreparedStatement.close()\":570,\"UNKNOWN.println()\":617,\"SQLException.getMessage()\":650,\"ResultSet.getInt()\":519},\"expressionEnd\":{\"PreparedStatement.setString()\":272,\"String:title\":440,\"Book.\\u003cinit\\u003e\":537,\"ResultSet.getString()\":411,\"String\":238,\"\\u003creturn\\u003e\":689,\"ResultSet.next()\":323,\"ArrayList.\\u003cinit\\u003e\":111,\"ArrayList.add()\":556,\"Connection.prepareStatement()\":239,\"String:Message: \":647,\"PreparedStatement.executeQuery()\":300,\"int:1\":259,\"PreparedStatement.close()\":580,\"UNKNOWN.println()\":666,\"SQLException.getMessage()\":665,\"ResultSet.getInt()\":536},\"rawCode\":\"public ArrayList\\u003cBook\\u003e searchBookByCallID(String callNumber) {\\r\\n\\t\\tArrayList\\u003cBook\\u003e books \\u003d new ArrayList\\u003cBook\\u003e();\\r\\n\\t\\tPreparedStatement  ps;\\r\\n\\t\\tResultSet rs;\\r\\n\\r\\n\\t\\ttry {\\r\\n\\t\\t\\tps \\u003d con.prepareStatement(\\\"select * from book where callnumber \\u003d ?\\\");\\r\\n\\t\\t\\tps.setString(1, callNumber);\\r\\n\\t\\t\\trs \\u003d ps.executeQuery();\\r\\n\\r\\n\\t\\t\\twhile(rs.next())\\r\\n\\t\\t\\t{\\r\\n\\r\\n\\t\\t\\t\\tBook b \\u003d new Book(rs.getString(\\\"callnumber\\\"),\\r\\n\\t\\t\\t\\t\\t\\trs.getString(\\\"isbn\\\"),\\r\\n\\t\\t\\t\\t\\t\\trs.getString(\\\"title\\\"),\\r\\n\\t\\t\\t\\t\\t\\trs.getString(\\\"mainauthor\\\"),\\r\\n\\t\\t\\t\\t\\t\\trs.getString(\\\"publisher\\\"),\\r\\n\\t\\t\\t\\t\\t\\trs.getInt(\\\"year\\\"));\\r\\n\\t\\t\\t\\tbooks.add(b);\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tps.close();\\r\\n\\t\\t} catch (SQLException ex) {\\r\\n\\t\\t\\tSystem.out.println(\\\"Message: \\\" + ex.getMessage());\\r\\n\\t\\t}\\r\\n\\t\\treturn books;\\r\\n\\t}\"}","149":"{\"expressionStart\":{\"PreparedStatement.setString()\":242,\"String:title\":458,\"Book.\\u003cinit\\u003e\":372,\"ResultSet.getString()\":510,\"String\":523,\"\\u003creturn\\u003e\":699,\"ResultSet.next()\":341,\"ArrayList.\\u003cinit\\u003e\":86,\"ArrayList.add()\":569,\"Connection.prepareStatement()\":172,\"String:Message: \":659,\"PreparedStatement.executeQuery()\":276,\"int:1\":255,\"UNKNOWN.println()\":301,\"PreparedStatement.close()\":593,\"SQLException.getMessage()\":673,\"ResultSet.getInt()\":544},\"expressionEnd\":{\"PreparedStatement.setString()\":265,\"String:title\":465,\"Book.\\u003cinit\\u003e\":562,\"ResultSet.getString()\":535,\"String\":534,\"\\u003creturn\\u003e\":712,\"ResultSet.next()\":350,\"ArrayList.\\u003cinit\\u003e\":107,\"ArrayList.add()\":581,\"Connection.prepareStatement()\":236,\"String:Message: \":670,\"PreparedStatement.executeQuery()\":293,\"int:1\":256,\"UNKNOWN.println()\":327,\"PreparedStatement.close()\":603,\"SQLException.getMessage()\":688,\"ResultSet.getInt()\":561},\"rawCode\":\"public ArrayList\\u003cBook\\u003e searchBookByAuthor(String author) {\\r\\n\\t\\tArrayList\\u003cBook\\u003e books \\u003d new ArrayList\\u003cBook\\u003e();\\r\\n\\t\\tPreparedStatement  ps;\\r\\n\\t\\tResultSet rs;\\r\\n\\r\\n\\t\\ttry {\\r\\n\\t\\t\\tps \\u003d con.prepareStatement(\\\"select * from book where mainauthor \\u003d ? \\\");\\r\\n\\t\\t\\tps.setString(1, author);\\r\\n\\t\\t\\trs \\u003d ps.executeQuery();\\r\\n\\r\\n\\t\\t\\tSystem.out.println(author);\\r\\n\\r\\n\\t\\t\\twhile(rs.next())\\r\\n\\t\\t\\t{\\r\\n\\t\\t\\t\\tBook b \\u003d new Book(rs.getString(\\\"callnumber\\\"),\\r\\n\\t\\t\\t\\t\\t\\trs.getString(\\\"isbn\\\"),\\r\\n\\t\\t\\t\\t\\t\\trs.getString(\\\"title\\\"),\\r\\n\\t\\t\\t\\t\\t\\trs.getString(\\\"mainauthor\\\"),\\r\\n\\t\\t\\t\\t\\t\\trs.getString(\\\"publisher\\\"),\\r\\n\\t\\t\\t\\t\\t\\trs.getInt(\\\"year\\\"));\\r\\n\\t\\t\\t\\tbooks.add(b);\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tps.close();\\r\\n\\t\\t} catch (SQLException ex) {\\r\\n\\t\\t\\tSystem.out.println(\\\"Message: \\\" + ex.getMessage());\\r\\n\\t\\t}\\r\\n\\t\\treturn books;\\r\\n\\t}\"}","150":"{\"expressionStart\":{\"Connection.prepareStatement()\":95,\"PreparedStatement.executeQuery()\":200,\"ResultSet.getString()\":251,\"null:null\":373,\"PreparedStatement.setInt()\":172,\"String\":116,\"int:1\":182,\"\\u003creturn\\u003e\":366,\"ResultSet.next()\":227,\"UNKNOWN.println()\":322,\"SQLException.getMessage()\":341},\"expressionEnd\":{\"Connection.prepareStatement()\":166,\"PreparedStatement.executeQuery()\":217,\"ResultSet.getString()\":279,\"null:null\":377,\"PreparedStatement.setInt()\":189,\"String\":165,\"int:1\":183,\"\\u003creturn\\u003e\":378,\"ResultSet.next()\":236,\"UNKNOWN.println()\":356,\"SQLException.getMessage()\":355},\"rawCode\":\"public String getEmail(int bid){\\r\\n\\t\\tPreparedStatement ps;\\r\\n\\t\\tResultSet rs;\\r\\n\\r\\n\\t\\ttry {\\r\\n\\t\\t\\tps \\u003d con.prepareStatement(\\\"Select emailaddress from borrower where bid \\u003d ?\\\");\\r\\n\\t\\t\\tps.setInt(1, bid);\\r\\n\\t\\t\\trs \\u003d ps.executeQuery();\\r\\n\\t\\t\\tif (rs.next()){\\r\\n\\t\\t\\t\\treturn rs.getString(\\\"emailaddress\\\");\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}catch (SQLException e) {\\r\\n\\t\\t\\tSystem.out.println(e.getMessage());\\r\\n\\t\\t}\\r\\n\\t\\treturn null;\\r\\n\\t}\"}","151":"{\"expressionStart\":{\"Fine.\\u003cinit\\u003e\":264,\"ResultSet.getString()\":326,\"String\":339,\"Connection.createStatement()\":146,\"\\u003creturn\\u003e\":562,\"ResultSet.next()\":231,\"ArrayList.\\u003cinit\\u003e\":61,\"Statement.close()\":447,\"ArrayList.add()\":419,\"String:Message: \":521,\"Statement.executeQuery()\":178,\"UNKNOWN.println()\":502,\"ResultSet.getInt()\":298,\"SQLException.getMessage()\":535},\"expressionEnd\":{\"Fine.\\u003cinit\\u003e\":412,\"ResultSet.getString()\":351,\"String\":350,\"Connection.createStatement()\":167,\"\\u003creturn\\u003e\":575,\"ResultSet.next()\":240,\"ArrayList.\\u003cinit\\u003e\":82,\"Statement.close()\":459,\"ArrayList.add()\":431,\"String:Message: \":532,\"Statement.executeQuery()\":217,\"UNKNOWN.println()\":551,\"ResultSet.getInt()\":317,\"SQLException.getMessage()\":550},\"rawCode\":\"public ArrayList\\u003cFine\\u003e getFine(){\\r\\n\\t\\tArrayList\\u003cFine\\u003e fines \\u003d new ArrayList\\u003cFine\\u003e();\\r\\n\\t\\tStatement stmt;\\r\\n\\t\\tResultSet  rs;\\r\\n\\r\\n\\t\\ttry\\r\\n\\t\\t{\\r\\n\\t\\t\\tstmt \\u003d con.createStatement();\\r\\n\\t\\t\\trs \\u003d stmt.executeQuery(\\\"SELECT * FROM fine\\\");\\r\\n\\r\\n\\t\\t\\twhile(rs.next())\\r\\n\\t\\t\\t{\\r\\n\\r\\n\\t\\t\\t\\tFine f \\u003d new Fine(rs.getInt(\\\"fid\\\"),\\r\\n\\t\\t\\t\\t\\t\\trs.getInt(\\\"amount\\\"),\\r\\n\\t\\t\\t\\t\\t\\trs.getString(\\\"issueDate\\\"),\\r\\n\\t\\t\\t\\t\\t\\trs.getString(\\\"paidDate\\\"),\\r\\n\\t\\t\\t\\t\\t\\trs.getInt(\\\"borid\\\"));\\r\\n\\t\\t\\t\\tfines.add(f);\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tstmt.close();\\r\\n\\t\\t}\\r\\n\\t\\tcatch (SQLException ex)\\r\\n\\t\\t{\\r\\n\\t\\t\\tSystem.out.println(\\\"Message: \\\" + ex.getMessage());\\r\\n\\t\\t}\\t\\r\\n\\t\\treturn fines;\\r\\n\\t}\"}","152":"{\"expressionStart\":{\"ResultSet.getString()\":341,\"String\":380,\"Connection.createStatement()\":187,\"\\u003creturn\\u003e\":556,\"ResultSet.next()\":282,\"ArrayList.\\u003cinit\\u003e\":93,\"Statement.close()\":441,\"BorrowerType.\\u003cinit\\u003e\":324,\"ArrayList.add()\":404,\"String:Message: \":515,\"String:type\":354,\"UNKNOWN.println()\":496,\"Statement.executeQuery()\":221,\"SQLException.getMessage()\":529,\"ResultSet.getInt()\":370},\"expressionEnd\":{\"ResultSet.getString()\":361,\"String\":395,\"Connection.createStatement()\":208,\"\\u003creturn\\u003e\":577,\"ResultSet.next()\":291,\"ArrayList.\\u003cinit\\u003e\":122,\"Statement.close()\":453,\"BorrowerType.\\u003cinit\\u003e\":397,\"ArrayList.add()\":425,\"String:Message: \":526,\"String:type\":360,\"UNKNOWN.println()\":545,\"Statement.executeQuery()\":268,\"SQLException.getMessage()\":544,\"ResultSet.getInt()\":396},\"rawCode\":\"public ArrayList\\u003cBorrowerType\\u003e getBorrowerType(){\\r\\n\\t\\tArrayList\\u003cBorrowerType\\u003e borrowertypes \\u003d new ArrayList\\u003cBorrowerType\\u003e();\\r\\n\\t\\tStatement  stmt;\\r\\n\\t\\tResultSet  rs;\\r\\n\\r\\n\\t\\ttry\\r\\n\\t\\t{\\r\\n\\t\\t\\tstmt \\u003d con.createStatement();\\r\\n\\r\\n\\t\\t\\trs \\u003d stmt.executeQuery(\\\"SELECT * FROM borrowertype\\\");\\r\\n\\r\\n\\t\\t\\twhile(rs.next())\\r\\n\\t\\t\\t{\\r\\n\\r\\n\\t\\t\\t\\tBorrowerType bt \\u003d new BorrowerType(rs.getString(\\\"type\\\"),\\r\\n\\t\\t\\t\\t\\t\\trs.getInt(\\\"bookTimeLimit\\\"));\\r\\n\\t\\t\\t\\tborrowertypes.add(bt);\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tstmt.close();\\r\\n\\t\\t}\\r\\n\\t\\tcatch (SQLException ex)\\r\\n\\t\\t{\\r\\n\\t\\t\\tSystem.out.println(\\\"Message: \\\" + ex.getMessage());\\r\\n\\t\\t}\\t\\r\\n\\t\\treturn borrowertypes;\\r\\n\\t}\"}","153":"{\"expressionStart\":{\"ResultSet.getString()\":418,\"String\":431,\"Connection.createStatement()\":291,\"\\u003creturn\\u003e\":973,\"ResultSet.next()\":381,\"JDBCManager.stringToCalendarYear()\":463,\"ArrayList.\\u003cinit\\u003e\":166,\"Statement.close()\":856,\"String:callNumber\":691,\"ArrayList.add()\":814,\"String:bid\":661,\"String:Message: \":931,\"Integer.equals()\":566,\"Statement.executeQuery()\":323,\"UNKNOWN.println()\":912,\"Borrowing.\\u003cinit\\u003e\":608,\"ResultSet.getInt()\":716,\"SQLException.getMessage()\":945},\"expressionEnd\":{\"ResultSet.getString()\":441,\"String\":440,\"Connection.createStatement()\":312,\"\\u003creturn\\u003e\":991,\"ResultSet.next()\":390,\"JDBCManager.stringToCalendarYear()\":488,\"ArrayList.\\u003cinit\\u003e\":201,\"Statement.close()\":868,\"String:callNumber\":703,\"ArrayList.add()\":831,\"String:bid\":666,\"String:Message: \":942,\"Integer.equals()\":583,\"Statement.executeQuery()\":367,\"UNKNOWN.println()\":961,\"Borrowing.\\u003cinit\\u003e\":805,\"ResultSet.getInt()\":735,\"SQLException.getMessage()\":960},\"rawCode\":\"public ArrayList\\u003cBorrowing\\u003e getBorrowingByYear(Integer year) {\\r\\n\\t\\tArrayList\\u003cBorrowing\\u003e borrowings \\u003d new ArrayList\\u003cBorrowing\\u003e();\\r\\n\\t\\tArrayList\\u003cBorrowingFrequency\\u003e bf \\u003d new ArrayList\\u003cBorrowingFrequency\\u003e();\\r\\n\\t\\tStatement  stmt;\\r\\n\\t\\tResultSet  rs;\\r\\n\\t\\tPreparedStatement ps;\\r\\n\\r\\n\\t\\ttry\\r\\n\\t\\t{\\r\\n\\t\\t\\tstmt \\u003d con.createStatement();\\r\\n\\t\\t\\trs \\u003d stmt.executeQuery(\\\"SELECT * FROM borrowing\\\");\\r\\n\\r\\n\\t\\t\\twhile(rs.next())\\r\\n\\t\\t\\t{\\r\\n\\r\\n\\t\\t\\t\\tString out \\u003d rs.getString(\\\"outDate\\\");\\r\\n\\t\\t\\t\\tInteger iOut \\u003d stringToCalendarYear(out);\\r\\n\\t\\t\\t\\t//Integer in \\u003d stringToCalendarYear(rs.getString(\\\"inDate\\\")); \\r\\n\\t\\t\\t\\tif (iOut.equals(year)) { \\r\\n\\t\\t\\t\\t\\tBorrowing b \\u003d new Borrowing(rs.getInt(\\\"borid\\\"), \\r\\n\\t\\t\\t\\t\\t\\t\\trs.getInt(\\\"bid\\\"), \\r\\n\\t\\t\\t\\t\\t\\t\\trs.getString(\\\"callNumber\\\"),  \\r\\n\\t\\t\\t\\t\\t\\t\\trs.getInt(\\\"copyNo\\\"),  \\r\\n\\t\\t\\t\\t\\t\\t\\trs.getString(\\\"outDate\\\"),  \\r\\n\\t\\t\\t\\t\\t\\t\\trs.getString(\\\"inDate\\\")); \\r\\n\\t\\t\\t\\t\\tborrowings.add(b);\\r\\n\\t\\t\\t\\t}}\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\t\\t\\t\\tstmt.close();\\r\\n\\t\\t\\t}\\r\\n\\t\\tcatch (SQLException ex)\\r\\n\\t\\t{\\r\\n\\t\\t\\tSystem.out.println(\\\"Message: \\\" + ex.getMessage());\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn borrowings;\\r\\n\\r\\n\\t}\"}","154":"{\"expressionStart\":{\"PreparedStatement.setString()\":238,\"boolean:false\":558,\"ResultSet.getString()\":351,\"UNKNOWN.equals()\":351,\"PreparedStatement.setInt()\":271,\"String\":166,\"\\u003creturn\\u003e\":397,\"ResultSet.next()\":329,\"boolean:true\":404,\"Connection.prepareStatement()\":145,\"PreparedStatement.executeQuery()\":302,\"int:2\":281,\"int:1\":251,\"PreparedStatement.close()\":420,\"UNKNOWN.println()\":473,\"SQLException.getMessage()\":524},\"expressionEnd\":{\"PreparedStatement.setString()\":265,\"boolean:false\":563,\"ResultSet.getString()\":373,\"UNKNOWN.equals()\":388,\"PreparedStatement.setInt()\":291,\"String\":231,\"\\u003creturn\\u003e\":409,\"ResultSet.next()\":338,\"boolean:true\":408,\"Connection.prepareStatement()\":232,\"PreparedStatement.executeQuery()\":319,\"int:2\":282,\"int:1\":252,\"PreparedStatement.close()\":430,\"UNKNOWN.println()\":540,\"SQLException.getMessage()\":539},\"rawCode\":\"public boolean isBookCopyStatus(String callNumber, int copyNo, String status) {\\r\\n\\t\\tPreparedStatement ps;\\r\\n\\t\\tResultSet rs;\\r\\n\\r\\n\\t\\ttry\\r\\n\\t\\t{\\r\\n\\t\\t\\tps \\u003d con.prepareStatement(\\\"SELECT status FROM bookcopy WHERE callNumber \\u003d ? AND copyNo \\u003d ?\\\");\\r\\n\\t\\t\\tps.setString(1, callNumber);\\r\\n\\t\\t\\tps.setInt(2, copyNo);\\r\\n\\t\\t\\trs \\u003d ps.executeQuery();\\r\\n\\t\\t\\tif (rs.next()) {\\r\\n\\t\\t\\t\\tif (rs.getString(\\\"status\\\").equals(status)) \\r\\n\\t\\t\\t\\t\\treturn true;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tps.close();\\r\\n\\t\\t}\\r\\n\\t\\tcatch (SQLException ex)\\r\\n\\t\\t{\\r\\n\\t\\t\\tSystem.out.println(\\\"Message from IsBookCopyIn: \\\" + ex.getMessage());\\r\\n\\t\\t}\\t\\r\\n\\t\\treturn false;\\r\\n\\t}\"}","155":"{\"expressionStart\":{\"ResultSet.getString()\":308,\"String\":321,\"Connection.createStatement()\":167,\"\\u003creturn\\u003e\":548,\"ResultSet.next()\":258,\"ArrayList.\\u003cinit\\u003e\":77,\"Statement.close()\":433,\"ArrayList.add()\":401,\"String:Message: \":507,\"BookCopy.\\u003cinit\\u003e\":295,\"Statement.executeQuery()\":201,\"UNKNOWN.println()\":488,\"SQLException.getMessage()\":521,\"ResultSet.getInt()\":343},\"expressionEnd\":{\"ResultSet.getString()\":334,\"String\":333,\"Connection.createStatement()\":188,\"\\u003creturn\\u003e\":565,\"ResultSet.next()\":267,\"ArrayList.\\u003cinit\\u003e\":102,\"Statement.close()\":445,\"ArrayList.add()\":417,\"String:Message: \":518,\"BookCopy.\\u003cinit\\u003e\":394,\"Statement.executeQuery()\":244,\"UNKNOWN.println()\":537,\"SQLException.getMessage()\":536,\"ResultSet.getInt()\":362},\"rawCode\":\"public ArrayList\\u003cBookCopy\\u003e getBookCopy(){\\r\\n\\t\\tArrayList\\u003cBookCopy\\u003e bookcopys \\u003d new ArrayList\\u003cBookCopy\\u003e();\\r\\n\\t\\tStatement  stmt;\\r\\n\\t\\tResultSet  rs;\\r\\n\\r\\n\\t\\ttry\\r\\n\\t\\t{\\r\\n\\t\\t\\tstmt \\u003d con.createStatement();\\r\\n\\r\\n\\t\\t\\trs \\u003d stmt.executeQuery(\\\"SELECT * FROM bookcopy\\\");\\r\\n\\r\\n\\t\\t\\twhile(rs.next())\\r\\n\\t\\t\\t{\\r\\n\\r\\n\\t\\t\\t\\tBookCopy b \\u003d new BookCopy(rs.getString(\\\"callnumber\\\"),\\r\\n\\t\\t\\t\\t\\t\\trs.getInt(\\\"copyNo\\\"),\\r\\n\\t\\t\\t\\t\\t\\trs.getString(\\\"status\\\"));\\r\\n\\t\\t\\t\\tbookcopys.add(b);\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tstmt.close();\\r\\n\\t\\t}\\r\\n\\t\\tcatch (SQLException ex)\\r\\n\\t\\t{\\r\\n\\t\\t\\tSystem.out.println(\\\"Message: \\\" + ex.getMessage());\\r\\n\\t\\t}\\t\\r\\n\\t\\treturn bookcopys;\\r\\n\\t}\"}","156":"{\"expressionStart\":{\"PreparedStatement.setString()\":248,\"ArrayList.add()\":329,\"Connection.prepareStatement()\":180,\"PreparedStatement.executeQuery()\":282,\"ResultSet.getString()\":340,\"String\":353,\"\\u003creturn\\u003e\":418,\"int:1\":261,\"ResultSet.next()\":312,\"ArrayList.\\u003cinit\\u003e\":95},\"expressionEnd\":{\"PreparedStatement.setString()\":271,\"ArrayList.add()\":367,\"Connection.prepareStatement()\":242,\"PreparedStatement.executeQuery()\":299,\"ResultSet.getString()\":366,\"String\":365,\"\\u003creturn\\u003e\":432,\"int:1\":262,\"ResultSet.next()\":321,\"ArrayList.\\u003cinit\\u003e\":118},\"rawCode\":\"public ArrayList\\u003cString\\u003e getCallNumberByCoAuthor(String author){\\r\\n\\t\\tArrayList\\u003cString\\u003e result \\u003d new ArrayList\\u003cString\\u003e();\\r\\n\\t\\tPreparedStatement ps;\\r\\n\\t\\tResultSet rs;\\r\\n\\t\\ttry {\\r\\n\\t\\t\\tps \\u003d con.prepareStatement(\\\"select * from hasauthor where name \\u003d ?\\\");\\r\\n\\t\\t\\tps.setString(1, author);\\r\\n\\t\\t\\trs \\u003d ps.executeQuery();\\r\\n\\t\\t\\twhile (rs.next()){\\r\\n\\t\\t\\t\\tresult.add(rs.getString(\\\"callnumber\\\"));\\r\\n\\t\\t\\t}\\r\\n\\t\\t} catch(SQLException ex){\\r\\n\\t\\t\\t;\\r\\n\\t\\t}\\r\\n\\t\\treturn result;\\r\\n\\t}\"}","157":"{\"expressionStart\":{\"String:title\":353,\"Book.\\u003cinit\\u003e\":267,\"ResultSet.getString()\":405,\"String\":418,\"Connection.createStatement()\":147,\"\\u003creturn\\u003e\":607,\"ResultSet.next()\":234,\"ArrayList.\\u003cinit\\u003e\":61,\"Statement.close()\":492,\"ArrayList.add()\":464,\"String:Message: \":566,\"UNKNOWN.println()\":547,\"Statement.executeQuery()\":181,\"SQLException.getMessage()\":580,\"ResultSet.getInt()\":439},\"expressionEnd\":{\"String:title\":360,\"Book.\\u003cinit\\u003e\":457,\"ResultSet.getString()\":430,\"String\":429,\"Connection.createStatement()\":168,\"\\u003creturn\\u003e\":620,\"ResultSet.next()\":243,\"ArrayList.\\u003cinit\\u003e\":82,\"Statement.close()\":504,\"ArrayList.add()\":476,\"String:Message: \":577,\"UNKNOWN.println()\":596,\"Statement.executeQuery()\":220,\"SQLException.getMessage()\":595,\"ResultSet.getInt()\":456},\"rawCode\":\"public ArrayList\\u003cBook\\u003e getBook(){\\r\\n\\t\\tArrayList\\u003cBook\\u003e books \\u003d new ArrayList\\u003cBook\\u003e();\\r\\n\\t\\tStatement  stmt;\\r\\n\\t\\tResultSet  rs;\\r\\n\\r\\n\\t\\ttry\\r\\n\\t\\t{\\r\\n\\t\\t\\tstmt \\u003d con.createStatement();\\r\\n\\r\\n\\t\\t\\trs \\u003d stmt.executeQuery(\\\"SELECT * FROM book\\\");\\r\\n\\r\\n\\t\\t\\twhile(rs.next())\\r\\n\\t\\t\\t{\\r\\n\\r\\n\\t\\t\\t\\tBook b \\u003d new Book(rs.getString(\\\"callnumber\\\"),\\r\\n\\t\\t\\t\\t\\t\\trs.getString(\\\"isbn\\\"),\\r\\n\\t\\t\\t\\t\\t\\trs.getString(\\\"title\\\"),\\r\\n\\t\\t\\t\\t\\t\\trs.getString(\\\"mainauthor\\\"),\\r\\n\\t\\t\\t\\t\\t\\trs.getString(\\\"publisher\\\"),\\r\\n\\t\\t\\t\\t\\t\\trs.getInt(\\\"year\\\"));\\r\\n\\t\\t\\t\\tbooks.add(b);\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tstmt.close();\\r\\n\\t\\t}\\r\\n\\t\\tcatch (SQLException ex)\\r\\n\\t\\t{\\r\\n\\t\\t\\tSystem.out.println(\\\"Message: \\\" + ex.getMessage());\\r\\n\\t\\t}\\t\\r\\n\\t\\treturn books;\\r\\n\\t}\"}","158":"{\"expressionStart\":{\"String.equals()\":863,\"\\u003cr\\u003e\":689,\"String\":440,\"Connection.createStatement()\":220,\"ArrayList.get()\":788,\"ResultSet.next()\":651,\"JDBCManager.getHasSubject()\":622,\"Statement.close()\":1192,\"String:callNumber\":894,\"UNKNOWN.getSubject()\":738,\"String:Message: \":1266,\"Borrowing.\\u003cinit\\u003e\":933,\"int:0\":686,\"ResultSet.getInt()\":1041,\"ArrayList.size()\":693,\"ResultSet.getString()\":1072,\"\\u003creturn\\u003e\":1307,\"ArrayList.\\u003cinit\\u003e\":106,\"ArrayList.add()\":1139,\"String:bid\":986,\"Connection.prepareStatement()\":419,\"PreparedStatement.executeQuery()\":529,\"\\u003ca\\u003e\":704,\"UNKNOWN.getCallNumber()\":788,\"UNKNOWN.println()\":1247,\"SQLException.getMessage()\":1280},\"expressionEnd\":{\"String.equals()\":908,\"\\u003cr\\u003e\":702,\"String\":485,\"Connection.createStatement()\":241,\"ArrayList.get()\":797,\"ResultSet.next()\":660,\"JDBCManager.getHasSubject()\":637,\"Statement.close()\":1204,\"String:callNumber\":906,\"UNKNOWN.getSubject()\":760,\"String:Message: \":1277,\"Borrowing.\\u003cinit\\u003e\":1130,\"int:0\":687,\"ResultSet.getInt()\":1060,\"ArrayList.size()\":702,\"ResultSet.getString()\":1095,\"\\u003creturn\\u003e\":1324,\"ArrayList.\\u003cinit\\u003e\":132,\"ArrayList.add()\":1155,\"String:bid\":991,\"Connection.prepareStatement()\":486,\"PreparedStatement.executeQuery()\":546,\"\\u003ca\\u003e\":707,\"UNKNOWN.getCallNumber()\":813,\"UNKNOWN.println()\":1296,\"SQLException.getMessage()\":1295},\"rawCode\":\"public ArrayList\\u003cBorrowing\\u003e getBorrowingAllBySubject(String subject){\\r\\n\\t\\tArrayList\\u003cBorrowing\\u003e borrowing \\u003d new ArrayList\\u003cBorrowing\\u003e();\\r\\n\\t\\tStatement  stmt;\\r\\n\\t\\tResultSet  rs;\\r\\n\\t\\tPreparedStatement ps;\\r\\n\\t\\ttry\\r\\n\\t\\t{\\r\\n\\t\\t\\tstmt \\u003d con.createStatement();\\r\\n\\t\\t\\t//ps \\u003d con.prepareStatement(\\\"SELECT * FROM borrowing inner join hassubject WHERE borrowing.callNumber \\u003d hassubject.callNumber, subject \\u003d  ? ORDER BY callNumber\\\");\\r\\n\\t\\t\\tps \\u003d con.prepareStatement(\\\"SELECT * FROM borrowing ORDER BY callNumber\\\");\\r\\n\\t\\t\\t//ps.setString(1, subject);\\r\\n\\t\\t\\trs \\u003d ps.executeQuery();\\r\\n\\t\\t\\t\\r\\n\\t\\t\\tArrayList\\u003cHasSubject\\u003e hs \\u003d new ArrayList\\u003cHasSubject\\u003e();\\r\\n\\t\\t\\ths \\u003d getHasSubject();\\r\\n\\r\\n\\t\\t\\twhile(rs.next())\\r\\n\\t\\t\\t{\\r\\n\\t\\t\\t\\tfor (int i \\u003d 0; i \\u003c hs.size(); i++) {\\r\\n\\t\\t\\t\\t\\tString subjectItem \\u003d hs.get(i).getSubject();\\r\\n\\t\\t\\t\\t\\tString callNumber \\u003d hs.get(i).getCallNumber();\\r\\n\\t\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t\\tif (subjectItem.equals(subject) \\u0026\\u0026 callNumber.equals(rs.getString(\\\"callNumber\\\"))) {\\r\\n\\t\\t\\t\\t\\t\\tBorrowing b \\u003d new Borrowing(rs.getInt(\\\"borid\\\"),\\r\\n\\t\\t\\t\\t\\t\\t\\t\\trs.getInt(\\\"bid\\\"),\\r\\n\\t\\t\\t\\t\\t\\t\\t\\trs.getString(\\\"callNumber\\\"), \\r\\n\\t\\t\\t\\t\\t\\t\\t\\trs.getInt(\\\"copyNo\\\"), \\r\\n\\t\\t\\t\\t\\t\\t\\t\\trs.getString(\\\"outDate\\\"), \\r\\n\\t\\t\\t\\t\\t\\t\\t\\trs.getString(\\\"inDate\\\"));\\r\\n\\t\\t\\t\\t\\t\\tborrowing.add(b);\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tstmt.close();\\r\\n\\t\\t}\\r\\n\\t\\tcatch (SQLException ex)\\r\\n\\t\\t{\\r\\n\\t\\t\\tSystem.out.println(\\\"Message: \\\" + ex.getMessage());\\r\\n\\t\\t}\\t\\r\\n\\t\\treturn borrowing;\\r\\n\\t}\"}","159":"{\"expressionStart\":{\"HoldRequest.\\u003cinit\\u003e\":313,\"ResultSet.getString()\":414,\"String\":339,\"Connection.createStatement()\":181,\"\\u003creturn\\u003e\":598,\"ResultSet.next()\":275,\"ArrayList.\\u003cinit\\u003e\":88,\"Statement.close()\":483,\"String:callNumber\":392,\"ArrayList.add()\":449,\"String:bid\":364,\"String:Message: \":557,\"Statement.executeQuery()\":215,\"UNKNOWN.println()\":538,\"ResultSet.getInt()\":329,\"SQLException.getMessage()\":571},\"expressionEnd\":{\"HoldRequest.\\u003cinit\\u003e\":440,\"ResultSet.getString()\":439,\"String\":344,\"Connection.createStatement()\":202,\"\\u003creturn\\u003e\":617,\"ResultSet.next()\":284,\"ArrayList.\\u003cinit\\u003e\":116,\"Statement.close()\":495,\"String:callNumber\":404,\"ArrayList.add()\":467,\"String:bid\":369,\"String:Message: \":568,\"Statement.executeQuery()\":261,\"UNKNOWN.println()\":587,\"ResultSet.getInt()\":345,\"SQLException.getMessage()\":586},\"rawCode\":\"public ArrayList\\u003cHoldRequest\\u003e getHoldRequest(){\\r\\n\\t\\tArrayList\\u003cHoldRequest\\u003e holdRequest \\u003d new ArrayList\\u003cHoldRequest\\u003e();\\r\\n\\t\\tStatement  stmt;\\r\\n\\t\\tResultSet  rs;\\r\\n\\r\\n\\t\\ttry\\r\\n\\t\\t{\\r\\n\\t\\t\\tstmt \\u003d con.createStatement();\\r\\n\\r\\n\\t\\t\\trs \\u003d stmt.executeQuery(\\\"SELECT * FROM holdrequest\\\");\\r\\n\\r\\n\\t\\t\\twhile(rs.next())\\r\\n\\t\\t\\t{\\r\\n\\t\\t\\t\\tHoldRequest h \\u003d new HoldRequest(rs.getInt(\\\"hid\\\"),\\r\\n\\t\\t\\t\\t\\t\\trs.getInt(\\\"bid\\\"),\\r\\n\\t\\t\\t\\t\\t\\trs.getString(\\\"callNumber\\\"),\\r\\n\\t\\t\\t\\t\\t\\trs.getString(\\\"issueDate\\\"));\\r\\n\\r\\n\\t\\t\\t\\tholdRequest.add(h);\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tstmt.close();\\r\\n\\t\\t}\\r\\n\\t\\tcatch (SQLException ex)\\r\\n\\t\\t{\\r\\n\\t\\t\\tSystem.out.println(\\\"Message: \\\" + ex.getMessage());\\r\\n\\t\\t}\\t\\r\\n\\t\\treturn holdRequest;\\r\\n\\t}\"}","160":"{\"expressionStart\":{\"ResultSet.getString()\":417,\"PreparedStatement.setInt()\":254,\"String\":528,\"\\u003creturn\\u003e\":691,\"ResultSet.next()\":313,\"ArrayList.\\u003cinit\\u003e\":92,\"String:callNumber\":430,\"ArrayList.add()\":545,\"Connection.prepareStatement()\":187,\"String:Message: \":650,\"String:bid\":402,\"PreparedStatement.executeQuery()\":282,\"int:1\":264,\"UNKNOWN.println()\":631,\"Borrowing.\\u003cinit\\u003e\":351,\"PreparedStatement.close()\":578,\"ResultSet.getInt()\":392,\"SQLException.getMessage()\":664},\"expressionEnd\":{\"ResultSet.getString()\":443,\"PreparedStatement.setInt()\":271,\"String\":536,\"\\u003creturn\\u003e\":709,\"ResultSet.next()\":322,\"ArrayList.\\u003cinit\\u003e\":118,\"String:callNumber\":442,\"ArrayList.add()\":562,\"Connection.prepareStatement()\":248,\"String:Message: \":661,\"String:bid\":407,\"PreparedStatement.executeQuery()\":299,\"int:1\":265,\"UNKNOWN.println()\":680,\"Borrowing.\\u003cinit\\u003e\":538,\"PreparedStatement.close()\":588,\"ResultSet.getInt()\":408,\"SQLException.getMessage()\":679},\"rawCode\":\"public ArrayList\\u003cBorrowing\\u003e getBorrowingByID(int bid){\\r\\n\\t\\tArrayList\\u003cBorrowing\\u003e borrowings \\u003d new ArrayList\\u003cBorrowing\\u003e();\\r\\n\\t\\tPreparedStatement  ps;\\r\\n\\t\\tResultSet  rs;\\r\\n\\r\\n\\t\\ttry\\r\\n\\t\\t{\\r\\n\\t\\t\\tps \\u003d con.prepareStatement(\\\"SELECT * FROM borrowing WHERE bid \\u003d ?\\\");\\r\\n\\t\\t\\tps.setInt(1, bid);\\r\\n\\t\\t\\trs \\u003d ps.executeQuery();\\r\\n\\r\\n\\t\\t\\twhile(rs.next())\\r\\n\\t\\t\\t{\\r\\n\\r\\n\\t\\t\\t\\tBorrowing b \\u003d new Borrowing(rs.getInt(\\\"borid\\\"),\\r\\n\\t\\t\\t\\t\\t\\trs.getInt(\\\"bid\\\"),\\r\\n\\t\\t\\t\\t\\t\\trs.getString(\\\"callNumber\\\"), \\r\\n\\t\\t\\t\\t\\t\\trs.getInt(\\\"copyNo\\\"), \\r\\n\\t\\t\\t\\t\\t\\trs.getString(\\\"outDate\\\"), \\r\\n\\t\\t\\t\\t\\t\\trs.getString(\\\"inDate\\\"));\\r\\n\\t\\t\\t\\tborrowings.add(b);\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tps.close();\\r\\n\\t\\t}\\r\\n\\t\\tcatch (SQLException ex)\\r\\n\\t\\t{\\r\\n\\t\\t\\tSystem.out.println(\\\"Message: \\\" + ex.getMessage());\\r\\n\\t\\t}\\t\\r\\n\\t\\treturn borrowings;\\r\\n\\t}\"}","161":"{\"expressionStart\":{\"PreparedStatement.setString()\":248,\"String:title\":434,\"Book.\\u003cinit\\u003e\":348,\"ResultSet.getString()\":451,\"String\":530,\"\\u003creturn\\u003e\":686,\"ResultSet.next()\":315,\"ArrayList.\\u003cinit\\u003e\":90,\"ArrayList.add()\":545,\"Connection.prepareStatement()\":179,\"String:Message: \":645,\"PreparedStatement.executeQuery()\":286,\"int:1\":261,\"UNKNOWN.println()\":626,\"PreparedStatement.close()\":573,\"ResultSet.getInt()\":520,\"SQLException.getMessage()\":659},\"expressionEnd\":{\"PreparedStatement.setString()\":275,\"String:title\":441,\"Book.\\u003cinit\\u003e\":538,\"ResultSet.getString()\":477,\"String\":536,\"\\u003creturn\\u003e\":699,\"ResultSet.next()\":324,\"ArrayList.\\u003cinit\\u003e\":111,\"ArrayList.add()\":557,\"Connection.prepareStatement()\":242,\"String:Message: \":656,\"PreparedStatement.executeQuery()\":303,\"int:1\":262,\"UNKNOWN.println()\":675,\"PreparedStatement.close()\":583,\"ResultSet.getInt()\":537,\"SQLException.getMessage()\":674},\"rawCode\":\"public ArrayList\\u003cBook\\u003e getBookByCallNumber(String callNumber){\\r\\n\\t\\tArrayList\\u003cBook\\u003e books \\u003d new ArrayList\\u003cBook\\u003e();\\r\\n\\t\\tPreparedStatement ps;\\r\\n\\t\\tResultSet  rs;\\r\\n\\r\\n\\t\\ttry\\r\\n\\t\\t{\\r\\n\\t\\t\\tps \\u003d con.prepareStatement(\\\"SELECT * FROM book where callnumber \\u003d ?\\\");\\r\\n\\t\\t\\tps.setString(1, callNumber);\\r\\n\\t\\t\\trs \\u003d ps.executeQuery();\\r\\n\\t\\t\\twhile(rs.next())\\r\\n\\t\\t\\t{\\r\\n\\r\\n\\t\\t\\t\\tBook b \\u003d new Book(rs.getString(\\\"callnumber\\\"),\\r\\n\\t\\t\\t\\t\\t\\trs.getString(\\\"isbn\\\"),\\r\\n\\t\\t\\t\\t\\t\\trs.getString(\\\"title\\\"),\\r\\n\\t\\t\\t\\t\\t\\trs.getString(\\\"mainauthor\\\"),\\r\\n\\t\\t\\t\\t\\t\\trs.getString(\\\"publisher\\\"),\\r\\n\\t\\t\\t\\t\\t\\trs.getInt(\\\"year\\\"));\\r\\n\\t\\t\\t\\tbooks.add(b);\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tps.close();\\r\\n\\t\\t}\\r\\n\\t\\tcatch (SQLException ex)\\r\\n\\t\\t{\\r\\n\\t\\t\\tSystem.out.println(\\\"Message: \\\" + ex.getMessage());\\r\\n\\t\\t}\\t\\r\\n\\t\\treturn books;\\r\\n\\t}\"}","162":"{\"expressionStart\":{\"PreparedStatement.setString()\":240,\"ResultSet.getString()\":322,\"PreparedStatement.setInt()\":217,\"String\":335,\"\\u003creturn\\u003e\":315,\"ResultSet.next()\":304,\"String:Message: \":421,\"Connection.prepareStatement()\":127,\"PreparedStatement.executeQuery()\":278,\"null:null\":469,\"int:2\":253,\"int:1\":227,\"PreparedStatement.close()\":349,\"UNKNOWN.println()\":402,\"SQLException.getMessage()\":435},\"expressionEnd\":{\"PreparedStatement.setString()\":267,\"ResultSet.getString()\":341,\"PreparedStatement.setInt()\":234,\"String\":340,\"\\u003creturn\\u003e\":342,\"ResultSet.next()\":313,\"String:Message: \":432,\"Connection.prepareStatement()\":211,\"PreparedStatement.executeQuery()\":295,\"null:null\":473,\"int:2\":254,\"int:1\":228,\"PreparedStatement.close()\":359,\"UNKNOWN.println()\":451,\"SQLException.getMessage()\":450},\"rawCode\":\"public String getHidOfHoldRequest(String callNumber,int bid){\\r\\n\\t\\tPreparedStatement ps;\\r\\n\\t\\tResultSet rs;\\r\\n\\r\\n\\t\\ttry\\r\\n\\t\\t{\\r\\n\\t\\t\\tps \\u003d con.prepareStatement(\\\"SELECT hid FROM holdrequest WHERE bid \\u003d ? AND callNumber \\u003d ?\\\");\\r\\n\\t\\t\\tps.setInt(1, bid);\\r\\n\\t\\t\\tps.setString(2, callNumber);\\r\\n\\t\\t\\trs \\u003d ps.executeQuery();\\r\\n\\t\\t\\tif(rs.next()) return rs.getString(\\\"hid\\\");\\r\\n\\r\\n\\t\\t\\tps.close();\\r\\n\\t\\t}\\r\\n\\t\\tcatch (SQLException ex)\\r\\n\\t\\t{\\r\\n\\t\\t\\tSystem.out.println(\\\"Message: \\\" + ex.getMessage());\\r\\n\\t\\t}\\t\\r\\n\\t\\treturn null;\\r\\n\\t}\"}","163":"{\"expressionStart\":{\"String.equals()\":346,\"\\u003cthrow\\u003e\":460,\"boolean:false\":620,\"SQLException.\\u003cinit\\u003e\":466,\"ResultSet.getString()\":311,\"PreparedStatement.setInt()\":219,\"String\":324,\"\\u003creturn\\u003e\":613,\"ResultSet.next()\":276,\"boolean:true\":394,\"Connection.prepareStatement()\":146,\"String:Message: \":573,\"PreparedStatement.executeQuery()\":247,\"int:1\":229,\"UNKNOWN.println()\":554,\"SQLException.getMessage()\":587},\"expressionEnd\":{\"String.equals()\":378,\"\\u003cthrow\\u003e\":506,\"boolean:false\":625,\"SQLException.\\u003cinit\\u003e\":505,\"ResultSet.getString()\":335,\"PreparedStatement.setInt()\":236,\"String\":334,\"\\u003creturn\\u003e\":626,\"ResultSet.next()\":285,\"boolean:true\":398,\"Connection.prepareStatement()\":213,\"String:Message: \":584,\"PreparedStatement.executeQuery()\":264,\"int:1\":230,\"UNKNOWN.println()\":603,\"SQLException.getMessage()\":602},\"rawCode\":\"public boolean checkPassword(String password, int bid){\\r\\n\\t\\tPreparedStatement ps;\\r\\n\\t\\tResultSet rs;\\r\\n\\t\\tString correctPassword;\\r\\n\\t\\ttry\\r\\n\\t\\t{\\r\\n\\t\\t\\tps \\u003d con.prepareStatement(\\\"SELECT password FROM borrower WHERE bid \\u003d ?\\\");\\r\\n\\t\\t\\tps.setInt(1, bid);\\r\\n\\t\\t\\trs \\u003d ps.executeQuery();\\r\\n\\r\\n\\t\\t\\tif (rs.next()){\\r\\n\\t\\t\\t\\tcorrectPassword \\u003d rs.getString(\\\"password\\\");\\r\\n\\t\\t\\t\\tif (password.equals(correctPassword)){\\r\\n\\t\\t\\t\\t\\treturn true;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\telse \\r\\n\\t\\t\\t\\t\\treturn false;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\telse {\\r\\n\\t\\t\\t\\tthrow new SQLException(\\\"User doesn\\u0027t exist!\\\");\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tcatch (SQLException ex)\\r\\n\\t\\t{\\r\\n\\t\\t\\tSystem.out.println(\\\"Message: \\\" + ex.getMessage());\\r\\n\\t\\t}\\r\\n\\t\\treturn false;\\r\\n\\t}\"}","164":"{\"expressionStart\":{\"HasSubject.\\u003cinit\\u003e\":307,\"ResultSet.getString()\":322,\"String\":363,\"Connection.createStatement()\":177,\"\\u003creturn\\u003e\":528,\"ResultSet.next()\":270,\"ArrayList.\\u003cinit\\u003e\":85,\"Statement.close()\":413,\"String:callNumber\":335,\"ArrayList.add()\":381,\"String:Message: \":487,\"Statement.executeQuery()\":211,\"UNKNOWN.println()\":468,\"SQLException.getMessage()\":501},\"expressionEnd\":{\"HasSubject.\\u003cinit\\u003e\":374,\"ResultSet.getString()\":348,\"String\":372,\"Connection.createStatement()\":198,\"\\u003creturn\\u003e\":547,\"ResultSet.next()\":279,\"ArrayList.\\u003cinit\\u003e\":112,\"Statement.close()\":425,\"String:callNumber\":347,\"ArrayList.add()\":399,\"String:Message: \":498,\"Statement.executeQuery()\":256,\"UNKNOWN.println()\":517,\"SQLException.getMessage()\":516},\"rawCode\":\"public ArrayList\\u003cHasSubject\\u003e getHasSubject(){\\r\\n\\t\\tArrayList\\u003cHasSubject\\u003e hasSubjects \\u003d new ArrayList\\u003cHasSubject\\u003e();\\r\\n\\t\\tStatement  stmt;\\r\\n\\t\\tResultSet  rs;\\r\\n\\r\\n\\t\\ttry\\r\\n\\t\\t{\\r\\n\\t\\t\\tstmt \\u003d con.createStatement();\\r\\n\\r\\n\\t\\t\\trs \\u003d stmt.executeQuery(\\\"SELECT * FROM hassubject\\\");\\r\\n\\r\\n\\t\\t\\twhile(rs.next())\\r\\n\\t\\t\\t{\\r\\n\\t\\t\\t\\tHasSubject h \\u003d new HasSubject(rs.getString(\\\"callNumber\\\"), rs.getString(\\\"subject\\\"));\\r\\n\\t\\t\\t\\thasSubjects.add(h);\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tstmt.close();\\r\\n\\t\\t}\\r\\n\\t\\tcatch (SQLException ex)\\r\\n\\t\\t{\\r\\n\\t\\t\\tSystem.out.println(\\\"Message: \\\" + ex.getMessage());\\r\\n\\t\\t}\\t\\r\\n\\t\\treturn hasSubjects;\\r\\n\\t}\"}","165":"{\"expressionStart\":{\"\\u003cthrow\\u003e\":1211,\"PSQLException.\\u003cinit\\u003e\":1020,\"\\u003cr\\u003e\":90,\"PreparedStatement.setInt()\":780,\"Character.\\u003cinit\\u003e\":1357,\"Character.\\u003ccast\\u003e\":165,\"String\":1044,\"ResultSet.next()\":1188,\"BaseConnection.prepareStatement()\":732,\"GT.tr()\":1038,\"Character.charValue()\":1482,\"Integer.\\u003cinit\\u003e\":202,\"ResultSet.close()\":1454,\"int:1\":815,\"\\u003cnullcheck\\u003e\":299,\"int:0\":1380,\"Map.get()\":177,\"Map.put()\":1394,\"BaseStatement.\\u003ccast\\u003e\":903,\"PreparedStatement.getResultSet()\":1131,\"ResultSet.getString()\":1324,\"\\u003creturn\\u003e\":126,\"BaseConnection.haveMinimumServerVersion()\":378,\"String.charAt()\":1371,\"BaseStatement.executeWithFlags()\":902,\"\\u003d\":435,\"char:\\u0027,\\u0027\":133},\"expressionEnd\":{\"\\u003cthrow\\u003e\":1303,\"PSQLException.\\u003cinit\\u003e\":1105,\"\\u003cr\\u003e\":112,\"PreparedStatement.setInt()\":822,\"Character.\\u003cinit\\u003e\":1383,\"Character.\\u003ccast\\u003e\":219,\"String\":1084,\"ResultSet.next()\":1197,\"BaseConnection.prepareStatement()\":759,\"GT.tr()\":1085,\"Character.charValue()\":1499,\"Integer.\\u003cinit\\u003e\":218,\"ResultSet.close()\":1464,\"int:1\":816,\"\\u003cnullcheck\\u003e\":334,\"int:0\":1381,\"Map.get()\":219,\"Map.put()\":1443,\"BaseStatement.\\u003ccast\\u003e\":946,\"PreparedStatement.getResultSet()\":1173,\"ResultSet.getString()\":1339,\"\\u003creturn\\u003e\":137,\"BaseConnection.haveMinimumServerVersion()\":415,\"String.charAt()\":1382,\"BaseStatement.executeWithFlags()\":1000,\"\\u003d\":546,\"char:\\u0027,\\u0027\":136},\"rawCode\":\"public synchronized char getArrayDelimiter(int oid) throws SQLException\\n    {\\n        if (oid \\u003d\\u003d Oid.UNSPECIFIED)\\n            return \\u0027,\\u0027;\\n\\n        Character delim \\u003d (Character) _arrayOidToDelimiter.get(new Integer(oid));\\n        if (delim !\\u003d null)\\n            return delim.charValue();\\n\\n        if (_getArrayDelimiterStatement \\u003d\\u003d null) {\\n            String sql;\\n            if (_conn.haveMinimumServerVersion(\\\"7.3\\\")) {\\n                sql \\u003d \\\"SELECT e.typdelim FROM pg_catalog.pg_type t, pg_catalog.pg_type e WHERE t.oid \\u003d ? and t.typelem \\u003d e.oid\\\";\\n            } else {\\n                sql \\u003d \\\"SELECT e.typdelim FROM pg_type t, pg_type e WHERE t.oid \\u003d ? and t.typelem \\u003d e.oid\\\";\\n            }\\n            _getArrayDelimiterStatement \\u003d _conn.prepareStatement(sql);\\n        }\\n\\n        _getArrayDelimiterStatement.setInt(1, oid);\\n\\n        // Go through BaseStatement to avoid transaction start.\\n        if (!((BaseStatement) _getArrayDelimiterStatement).executeWithFlags(QueryExecutor.QUERY_SUPPRESS_BEGIN))\\n            throw new PSQLException(GT.tr(\\\"No results were returned by the query.\\\"), PSQLState.NO_DATA);\\n\\n        ResultSet rs \\u003d _getArrayDelimiterStatement.getResultSet();\\n        if (!rs.next())\\n            throw new PSQLException(GT.tr(\\\"No results were returned by the query.\\\"), PSQLState.NO_DATA);\\n\\n        String s \\u003d rs.getString(1);\\n        delim \\u003d new Character(s.charAt(0));\\n\\n        _arrayOidToDelimiter.put(new Integer(oid), delim);\\n\\n        rs.close();\\n\\n        return delim.charValue();\\n    }\"}","166":"{\"expressionStart\":{\"\\u003cthrow\\u003e\":1037,\"PSQLException.\\u003cinit\\u003e\":1043,\"\\u003cr\\u003e\":90,\"PreparedStatement.setInt()\":801,\"Integer.\\u003ccast\\u003e\":176,\"String\":1067,\"ResultSet.next()\":1212,\"BaseConnection.prepareStatement()\":753,\"GT.tr()\":1061,\"Integer.\\u003cinit\\u003e\":1346,\"ResultSet.close()\":1546,\"int:2\":1473,\"int:1\":837,\"\\u003cnullcheck\\u003e\":239,\"Map.get()\":186,\"Map.put()\":1494,\"BaseStatement.\\u003ccast\\u003e\":925,\"Integer.intValue()\":274,\"PreparedStatement.getResultSet()\":1154,\"ResultSet.getString()\":1519,\"ResultSet.getLong()\":1363,\"\\u003creturn\\u003e\":1567,\"BaseConnection.haveMinimumServerVersion()\":386,\"int.\\u003ccast\\u003e\":1358,\"BaseStatement.executeWithFlags()\":924,\"\\u003d\":599},\"expressionEnd\":{\"\\u003cthrow\\u003e\":1129,\"PSQLException.\\u003cinit\\u003e\":1128,\"\\u003cr\\u003e\":112,\"PreparedStatement.setInt()\":844,\"Integer.\\u003ccast\\u003e\":224,\"String\":1107,\"ResultSet.next()\":1221,\"BaseConnection.prepareStatement()\":780,\"GT.tr()\":1108,\"Integer.\\u003cinit\\u003e\":1377,\"ResultSet.close()\":1556,\"int:2\":1474,\"int:1\":838,\"\\u003cnullcheck\\u003e\":253,\"Map.get()\":224,\"Map.put()\":1535,\"BaseStatement.\\u003ccast\\u003e\":969,\"Integer.intValue()\":291,\"PreparedStatement.getResultSet()\":1197,\"ResultSet.getString()\":1534,\"ResultSet.getLong()\":1376,\"\\u003creturn\\u003e\":1592,\"BaseConnection.haveMinimumServerVersion()\":423,\"int.\\u003ccast\\u003e\":1376,\"BaseStatement.executeWithFlags()\":1023,\"\\u003d\":694},\"rawCode\":\"public synchronized int getPGArrayElement (int oid) throws SQLException\\n    {\\n        if (oid \\u003d\\u003d Oid.UNSPECIFIED)\\n            return Oid.UNSPECIFIED;\\n\\n        Integer pgType \\u003d (Integer) _pgArrayToPgType.get(new Integer(oid));\\n\\n        if (pgType !\\u003d null)\\n            return pgType.intValue();\\n\\n        if (_getArrayElementOidStatement \\u003d\\u003d null) {\\n            String sql;\\n            if (_conn.haveMinimumServerVersion(\\\"7.3\\\")) {\\n                sql \\u003d \\\"SELECT e.oid, e.typname FROM pg_catalog.pg_type t, pg_catalog.pg_type e WHERE t.oid \\u003d ? and t.typelem \\u003d e.oid\\\";\\n            } else {\\n                sql \\u003d \\\"SELECT e.oid, e.typname FROM pg_type t, pg_type e WHERE t.oid \\u003d ? and t.typelem \\u003d e.oid\\\";\\n            }\\n            _getArrayElementOidStatement \\u003d _conn.prepareStatement(sql);\\n        }\\n\\n        _getArrayElementOidStatement.setInt(1, oid);\\n\\n        // Go through BaseStatement to avoid transaction start.\\n        if (!((BaseStatement) _getArrayElementOidStatement).executeWithFlags(QueryExecutor.QUERY_SUPPRESS_BEGIN))\\n            throw new PSQLException(GT.tr(\\\"No results were returned by the query.\\\"), PSQLState.NO_DATA);\\n\\n        ResultSet rs \\u003d _getArrayElementOidStatement.getResultSet();\\n        if (!rs.next())\\n            throw new PSQLException(GT.tr(\\\"No results were returned by the query.\\\"), PSQLState.NO_DATA);\\n\\n        pgType \\u003d new Integer((int)rs.getLong(1));\\n        _pgArrayToPgType.put(new Integer(oid), pgType);\\n        _pgNameToOid.put(rs.getString(2), pgType);\\n        _oidToPgName.put(pgType, rs.getString(2));\\n\\n        rs.close();\\n\\n        return pgType.intValue();\\n    }\"}","167":"{\"expressionStart\":{\"String.equals()\":1522,\"\\u003cthrow\\u003e\":1023,\"PSQLException.\\u003cinit\\u003e\":1029,\"Integer.\\u003ccast\\u003e\":100,\"String\":1522,\"ResultSet.next()\":1220,\"BaseConnection.prepareStatement()\":744,\"GT.tr()\":1047,\"Integer.\\u003cinit\\u003e\":1472,\"ResultSet.getBoolean()\":1263,\"ResultSet.close()\":1714,\"int:2\":1323,\"int:1\":824,\"\\u003cnullcheck\\u003e\":212,\"Map.get()\":109,\"Map.put()\":1735,\"PreparedStatement.setString()\":792,\"Integer.intValue()\":1791,\"BaseStatement.\\u003ccast\\u003e\":919,\"PreparedStatement.getResultSet()\":1140,\"ResultSet.getString()\":1310,\"\\u003creturn\\u003e\":1784,\"BaseConnection.haveMinimumServerVersion()\":566,\"null:null\":1202,\"BaseStatement.executeWithFlags()\":918},\"expressionEnd\":{\"String.equals()\":1541,\"\\u003cthrow\\u003e\":1115,\"PSQLException.\\u003cinit\\u003e\":1114,\"Integer.\\u003ccast\\u003e\":141,\"String\":1525,\"ResultSet.next()\":1229,\"BaseConnection.prepareStatement()\":771,\"GT.tr()\":1094,\"Integer.\\u003cinit\\u003e\":1497,\"ResultSet.getBoolean()\":1279,\"ResultSet.close()\":1724,\"int:2\":1324,\"int:1\":825,\"\\u003cnullcheck\\u003e\":241,\"Map.get()\":141,\"Map.put()\":1773,\"PreparedStatement.setString()\":838,\"Integer.intValue()\":1806,\"BaseStatement.\\u003ccast\\u003e\":955,\"PreparedStatement.getResultSet()\":1176,\"ResultSet.getString()\":1325,\"\\u003creturn\\u003e\":1807,\"BaseConnection.haveMinimumServerVersion()\":603,\"null:null\":1206,\"BaseStatement.executeWithFlags()\":1009},\"rawCode\":\"public synchronized int getSQLType(String pgTypeName) throws SQLException\\n    {\\n        Integer i \\u003d (Integer)_pgNameToSQLType.get(pgTypeName);\\n        if (i !\\u003d null)\\n            return i.intValue();\\n\\n        if (_getTypeInfoStatement \\u003d\\u003d null) {\\n            // There\\u0027s no great way of telling what\\u0027s an array type.\\n            // People can name their own types starting with _.\\n            // Other types use typelem that aren\\u0027t actually arrays, like box.\\n            //\\n            String sql \\u003d \\\"SELECT typinput\\u003d\\u0027array_in\\u0027::regproc, typtype FROM \\\";\\n            if (_conn.haveMinimumServerVersion(\\\"7.3\\\")) {\\n                sql +\\u003d \\\"pg_catalog.\\\";\\n            }\\n            sql +\\u003d \\\"pg_type WHERE typname \\u003d ?\\\";\\n\\n            _getTypeInfoStatement \\u003d _conn.prepareStatement(sql);\\n        }\\n\\n        _getTypeInfoStatement.setString(1, pgTypeName);\\n\\n        // Go through BaseStatement to avoid transaction start.\\n        if (!((BaseStatement)_getTypeInfoStatement).executeWithFlags(QueryExecutor.QUERY_SUPPRESS_BEGIN))\\n            throw new PSQLException(GT.tr(\\\"No results were returned by the query.\\\"), PSQLState.NO_DATA);\\n\\n        ResultSet rs \\u003d _getTypeInfoStatement.getResultSet();\\n\\n        Integer type \\u003d null;\\n        if (rs.next()) {\\n            boolean isArray \\u003d rs.getBoolean(1);\\n            String typtype \\u003d rs.getString(2);\\n            if (isArray) {\\n                type \\u003d new Integer(Types.ARRAY);\\n            } else if (\\\"c\\\".equals(typtype)) {\\n                type \\u003d new Integer(Types.STRUCT);\\n            } else if (\\\"d\\\".equals(typtype)) {\\n                type \\u003d new Integer(Types.DISTINCT);\\n            }\\n        }\\n\\n        if (type \\u003d\\u003d null) {\\n             type \\u003d new Integer(Types.OTHER);\\n        }\\n        rs.close();\\n\\n        _pgNameToSQLType.put(pgTypeName, type);\\n\\n        return type.intValue();\\n    }\"}","168":"{\"expressionStart\":{\"\\u003cthrow\\u003e\":866,\"BaseStatement.\\u003ccast\\u003e\":766,\"PSQLException.\\u003cinit\\u003e\":872,\"PreparedStatement.getResultSet()\":983,\"ResultSet.getString()\":1067,\"\\u003cr\\u003e\":84,\"PreparedStatement.setInt()\":653,\"String\":896,\"\\u003creturn\\u003e\":1243,\"ResultSet.next()\":1029,\"BaseConnection.haveMinimumServerVersion()\":351,\"BaseConnection.prepareStatement()\":605,\"GT.tr()\":890,\"Integer.\\u003cinit\\u003e\":1173,\"String.\\u003ccast\\u003e\":162,\"ResultSet.close()\":1222,\"null:null\":127,\"BaseStatement.executeWithFlags()\":765,\"int:1\":678,\"\\u003d\":408,\"\\u003cnullcheck\\u003e\":282,\"Map.get()\":170,\"Map.put()\":1156},\"expressionEnd\":{\"\\u003cthrow\\u003e\":958,\"BaseStatement.\\u003ccast\\u003e\":798,\"PSQLException.\\u003cinit\\u003e\":957,\"PreparedStatement.getResultSet()\":1015,\"ResultSet.getString()\":1082,\"\\u003cr\\u003e\":106,\"PreparedStatement.setInt()\":685,\"String\":936,\"\\u003creturn\\u003e\":1261,\"ResultSet.next()\":1038,\"BaseConnection.haveMinimumServerVersion()\":388,\"BaseConnection.prepareStatement()\":632,\"GT.tr()\":937,\"Integer.\\u003cinit\\u003e\":1189,\"String.\\u003ccast\\u003e\":204,\"ResultSet.close()\":1232,\"null:null\":131,\"BaseStatement.executeWithFlags()\":852,\"int:1\":679,\"\\u003d\":468,\"\\u003cnullcheck\\u003e\":307,\"Map.get()\":204,\"Map.put()\":1202},\"rawCode\":\"public synchronized String getPGType(int oid) throws SQLException\\n    {\\n        if (oid \\u003d\\u003d Oid.UNSPECIFIED)\\n            return null;\\n\\n        String pgTypeName \\u003d (String)_oidToPgName.get(new Integer(oid));\\n        if (pgTypeName !\\u003d null)\\n            return pgTypeName;\\n\\n        if (_getNameStatement \\u003d\\u003d null) {\\n            String sql;\\n            if (_conn.haveMinimumServerVersion(\\\"7.3\\\")) {\\n                sql \\u003d \\\"SELECT typname FROM pg_catalog.pg_type WHERE oid \\u003d ?\\\";\\n            } else {\\n                sql \\u003d \\\"SELECT typname FROM pg_type WHERE oid \\u003d ?\\\";\\n            }\\n\\n            _getNameStatement \\u003d _conn.prepareStatement(sql);\\n        }\\n\\n        _getNameStatement.setInt(1, oid);\\n\\n        // Go through BaseStatement to avoid transaction start.\\n        if (!((BaseStatement)_getNameStatement).executeWithFlags(QueryExecutor.QUERY_SUPPRESS_BEGIN))\\n            throw new PSQLException(GT.tr(\\\"No results were returned by the query.\\\"), PSQLState.NO_DATA);\\n\\n        ResultSet rs \\u003d _getNameStatement.getResultSet();\\n        if (rs.next()) {\\n            pgTypeName \\u003d rs.getString(1);\\n            _pgNameToOid.put(pgTypeName, new Integer(oid));\\n            _oidToPgName.put(new Integer(oid), pgTypeName);\\n        }\\n        rs.close();\\n\\n        return pgTypeName;\\n    }\"}","169":"{\"expressionStart\":{\"event_audit_log_subscriber.setstorage_pool_id()\":1155,\"event_audit_log_subscriber.setmethod_id()\":386,\"String\":1082,\"event_audit_log_subscriber.\\u003cinit\\u003e\":140,\"event_audit_log_subscriber.setvm_template_id()\":867,\"event_audit_log_subscriber.setmessage()\":1593,\"event_audit_log_subscriber.setvm_name()\":817,\"event_audit_log_subscriber.setstorage_pool_name()\":1248,\"event_audit_log_subscriber.setseverity()\":1544,\"ResultSet.getTimestamp()\":1506,\"event_audit_log_subscriber.setvm_template_name()\":959,\"event_audit_log_subscriber.setsubscriber_id()\":235,\"ResultSet.getInt()\":404,\"event_audit_log_subscriber.setstorage_domain_id()\":1318,\"Guid.createGuidFromString()\":257,\"NGuid.createGuidFromString()\":1042,\"ResultSet.getString()\":1069,\"event_audit_log_subscriber.setevent_up_name()\":324,\"event_audit_log_subscriber.settag_name()\":501,\"ResultSet.getLong()\":574,\"event_audit_log_subscriber.setevent_type()\":182,\"\\u003creturn\\u003e\":1643,\"event_audit_log_subscriber.setvds_name()\":1103,\"event_audit_log_subscriber.setlog_time()\":1489,\"event_audit_log_subscriber.setmethod_address()\":437,\"event_audit_log_subscriber.setuser_id()\":611,\"event_audit_log_subscriber.setstorage_domain_name()\":1415,\"event_audit_log_subscriber.setvm_id()\":743,\"event_audit_log_subscriber.setaudit_log_id()\":553,\"event_audit_log_subscriber.setvds_id()\":1027,\"event_audit_log_subscriber.setuser_name()\":689},\"expressionEnd\":{\"event_audit_log_subscriber.setstorage_pool_id()\":1238,\"event_audit_log_subscriber.setmethod_id()\":427,\"String\":1090,\"event_audit_log_subscriber.\\u003cinit\\u003e\":172,\"event_audit_log_subscriber.setvm_template_id()\":949,\"event_audit_log_subscriber.setmessage()\":1633,\"event_audit_log_subscriber.setvm_name()\":857,\"event_audit_log_subscriber.setstorage_pool_name()\":1308,\"event_audit_log_subscriber.setseverity()\":1583,\"ResultSet.getTimestamp()\":1533,\"event_audit_log_subscriber.setvm_template_name()\":1017,\"event_audit_log_subscriber.setsubscriber_id()\":314,\"ResultSet.getInt()\":426,\"event_audit_log_subscriber.setstorage_domain_id()\":1405,\"Guid.createGuidFromString()\":313,\"NGuid.createGuidFromString()\":1092,\"ResultSet.getString()\":1091,\"event_audit_log_subscriber.setevent_up_name()\":376,\"event_audit_log_subscriber.settag_name()\":543,\"ResultSet.getLong()\":600,\"event_audit_log_subscriber.setevent_type()\":225,\"\\u003creturn\\u003e\":1655,\"event_audit_log_subscriber.setvds_name()\":1145,\"event_audit_log_subscriber.setlog_time()\":1534,\"event_audit_log_subscriber.setmethod_address()\":491,\"event_audit_log_subscriber.setuser_id()\":679,\"event_audit_log_subscriber.setstorage_domain_name()\":1479,\"event_audit_log_subscriber.setvm_id()\":807,\"event_audit_log_subscriber.setaudit_log_id()\":601,\"event_audit_log_subscriber.setvds_id()\":1093,\"event_audit_log_subscriber.setuser_name()\":733},\"rawCode\":\"private event_audit_log_subscriber getEventAuditLogSubscriber(ResultSet rs) throws SQLException {\\n        event_audit_log_subscriber eals \\u003d new event_audit_log_subscriber();\\n        eals.setevent_type(rs.getInt(\\\"event_type\\\"));\\n        eals.setsubscriber_id(Guid.createGuidFromString(rs.getString(\\\"subscriber_id\\\")));\\n        eals.setevent_up_name(rs.getString(\\\"event_up_name\\\"));\\n        eals.setmethod_id(rs.getInt(\\\"method_id\\\"));\\n        eals.setmethod_address(rs.getString(\\\"method_address\\\"));\\n        eals.settag_name(rs.getString(\\\"tag_name\\\"));\\n        eals.setaudit_log_id(rs.getLong(\\\"audit_log_id\\\"));\\n        eals.setuser_id(NGuid.createGuidFromString(rs.getString(\\\"user_id\\\")));\\n        eals.setuser_name(rs.getString(\\\"user_name\\\"));\\n        eals.setvm_id(NGuid.createGuidFromString(rs.getString(\\\"vm_id\\\")));\\n        eals.setvm_name(rs.getString(\\\"vm_name\\\"));\\n        eals.setvm_template_id(NGuid.createGuidFromString(rs.getString(\\\"vm_template_id\\\")));\\n        eals.setvm_template_name(rs.getString(\\\"vm_template_name\\\"));\\n        eals.setvds_id(NGuid.createGuidFromString(rs.getString(\\\"vds_id\\\")));\\n        eals.setvds_name(rs.getString(\\\"vds_name\\\"));\\n        eals.setstorage_pool_id(Guid.createGuidFromString(rs.getString(\\\"storage_pool_id\\\")));\\n        eals.setstorage_pool_name(rs.getString(\\\"storage_pool_name\\\"));\\n        eals.setstorage_domain_id(Guid.createGuidFromString(rs.getString(\\\"storage_domain_id\\\")));\\n        eals.setstorage_domain_name(rs.getString(\\\"storage_domain_name\\\"));\\n        eals.setlog_time(rs.getTimestamp(\\\"log_time\\\"));\\n        eals.setseverity(rs.getInt(\\\"severity\\\"));\\n        eals.setmessage(rs.getString(\\\"message\\\"));\\n        return eals;\\n    }\"}","170":"{\"expressionStart\":{\"String.format()\":685,\"ResultSet.getString()\":911,\"DbUser.\\u003cinit\\u003e\":822,\"String\":699,\"Log.error()\":1116,\"\\u003creturn\\u003e\":1300,\"ResultSet.next()\":784,\"Guid.toString()\":747,\"Statement.close()\":1256,\"ResultSet.close()\":1041,\"null:null\":563,\"DbUser.setemail()\":895,\"ConnectionHelper.getConnection()\":600,\"DbUser.setuser_id()\":852,\"Statement.executeQuery()\":669,\"\\u003cnullcheck\\u003e\":985,\"UNKNOWN.createStatement()\":600},\"expressionEnd\":{\"String.format()\":765,\"ResultSet.getString()\":932,\"DbUser.\\u003cinit\\u003e\":834,\"String\":745,\"Log.error()\":1176,\"\\u003creturn\\u003e\":1314,\"ResultSet.next()\":793,\"Guid.toString()\":764,\"Statement.close()\":1266,\"ResultSet.close()\":1051,\"null:null\":567,\"DbUser.setemail()\":933,\"ConnectionHelper.getConnection()\":632,\"DbUser.setuser_id()\":877,\"Statement.executeQuery()\":766,\"\\u003cnullcheck\\u003e\":995,\"UNKNOWN.createStatement()\":650},\"rawCode\":\"private DbUser getUserByUserId(Guid userId) throws SQLException, NaiveConnectionHelperException {\\n        // Using preparedStatement instead of STP GetUserByUserId to skip handling supporting dialects\\n        // for MSSQL and PG. PG doesn\\u0027t support parameter name which matches a column name. This is supported\\n        // by the backend, since using a plan JDBC, bypassing this issue by prepared statement.\\n        // in additional, required only partial email field of the DbUser\\n        Statement ps \\u003d null;\\n        ResultSet rs \\u003d null;\\n        DbUser dbUser \\u003d null;\\n        try {\\n            ps \\u003d connectionHelper.getConnection().createStatement();\\n            rs \\u003d ps.executeQuery(String.format(\\\"SELECT email FROM users WHERE user_id \\u003d \\u0027%s\\u0027\\\", userId.toString()));\\n            if (rs.next()) {\\n                dbUser \\u003d new DbUser();\\n                dbUser.setuser_id(userId);\\n                dbUser.setemail(rs.getString(\\\"email\\\"));\\n            }\\n        } finally {\\n            if (rs !\\u003d null) {\\n                try {\\n                    rs.close();\\n                } catch (SQLException e) {\\n                    log.error(\\\"Failed to release resultset of db user query\\\", e);\\n                }\\n            }\\n            if (ps !\\u003d null) {\\n                ps.close();\\n            }\\n        }\\n        return dbUser;\\n    }\"}","171":"{\"expressionStart\":{\"String.\\u003cinit\\u003e\":65,\"String:name\":411,\"ResultSet.getString()\":398,\"PreparedStatement.setInt()\":222,\"String\":433,\"ResultSet.next()\":304,\"String:SELECT * FROM \":76,\"ArrayList.add()\":507,\"ResultSet.close()\":551,\"PreparedStatement.executeQuery()\":272,\"UNKNOWN.prepareStatement()\":172,\"int:1\":234,\"ResultSet.getInt()\":477,\"SQLException.printStackTrace()\":600,\"PracticeAchievement.\\u003cinit\\u003e\":356},\"expressionEnd\":{\"String.\\u003cinit\\u003e\":123,\"String:name\":417,\"ResultSet.getString()\":418,\"PreparedStatement.setInt()\":251,\"String\":438,\"ResultSet.next()\":313,\"String:SELECT * FROM \":92,\"ArrayList.add()\":539,\"ResultSet.close()\":561,\"PreparedStatement.executeQuery()\":291,\"UNKNOWN.prepareStatement()\":216,\"int:1\":235,\"ResultSet.getInt()\":499,\"SQLException.printStackTrace()\":619,\"PracticeAchievement.\\u003cinit\\u003e\":500},\"rawCode\":\"public static void loadAllAchievements() {\\r\\n\\t\\tString statement \\u003d new String(\\\"SELECT * FROM \\\" + DBTable + \\\" WHERE type \\u003d ?\\\");\\r\\n\\t\\tPreparedStatement stmt;\\r\\n\\t\\ttry {\\r\\n\\t\\t\\tstmt \\u003d DBConnection.con.prepareStatement(statement);\\r\\n\\t\\t\\tstmt.setInt(1, PRACTICE_TYPE);\\r\\n\\t\\t\\tResultSet rs \\u003d stmt.executeQuery();\\r\\n\\t\\t\\twhile (rs.next()) {\\r\\n\\t\\t\\t\\tPracticeAchievement achievement \\u003d new PracticeAchievement(rs.getInt(\\\"aid\\\"), rs.getString(\\\"name\\\"), rs.getString(\\\"url\\\"),\\r\\n\\t\\t\\t\\t\\t\\trs.getString(\\\"description\\\"), rs.getInt(\\\"threshold\\\"));\\r\\n\\t\\t\\t\\tallAchievements.add(achievement);\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\trs.close();\\t\\t\\t\\r\\n\\t\\t} catch (SQLException e) {\\r\\n\\t\\t\\te.printStackTrace();\\r\\n\\t\\t}\\t\\t\\t\\r\\n\\t}\"}","172":"{\"expressionStart\":{\"String:\\u0027\":170,\"ResultSet.close()\":1080,\"ResultSet.getString()\":968,\"String\":572,\"Connection.createStatement()\":343,\"int:1\":985,\"ResultSet.next()\":819,\"UNKNOWN.println()\":949,\"Statement.executeQuery()\":554,\"String.toUpperCase()\":260},\"expressionEnd\":{\"String:\\u0027\":173,\"ResultSet.close()\":1094,\"ResultSet.getString()\":987,\"String\":603,\"Connection.createStatement()\":365,\"int:1\":986,\"ResultSet.next()\":832,\"UNKNOWN.println()\":988,\"Statement.executeQuery()\":743,\"String.toUpperCase()\":278},\"rawCode\":\"/**\\n     * @throws SQLException\\n     */\\n    static void listFiles(Connection conn, String name) throws SQLException {\\n\\n        System.out.println(\\\"Files like \\u0027\\\" + name + \\\"\\u0027\\\");\\n\\n        // Convert to upper case, so the search is case-insensitive\\n        name \\u003d name.toUpperCase();\\n\\n        // Create a statement object\\n        Statement stat \\u003d conn.createStatement();\\n\\n        // Now execute the search query\\n        // UCASE: This is a case insensitive search\\n        // ESCAPE \\u0027:\\u0027 is used so it can be easily searched for \\u0027\\\\\\u0027\\n        ResultSet result \\u003d stat.executeQuery(\\\"SELECT Path FROM Files WHERE \\\"\\n                                             + \\\"UCASE(Path) LIKE \\u0027%\\\" + name\\n                                             + \\\"%\\u0027 ESCAPE \\u0027:\\u0027\\\");\\n\\n        // Moves to the next record until no more records\\n        while (result.next()) {\\n\\n            // Print the first column of the result\\n            // could use also getString(\\\"Path\\\")\\n            System.out.println(result.getString(1));\\n        }\\n\\n        // Close the ResultSet - not really necessary, but recommended\\n        result.close();\\n    }\"}","173":"{\"expressionStart\":{\"String.equals()\":1278,\"DBConnection.getConnection()\":566,\"boolean:false\":1357,\"String:Y\":1292,\"ResultSet.next()\":847,\"int:6\":1185,\"ViewProperty.setIsMaximum()\":1439,\"int:5\":1147,\"int:4\":1112,\"int:3\":1078,\"int:9\":1401,\"int:8\":811,\"ViewProperty.setWidth()\":1088,\"int:7\":1223,\"ViewProperty.setXPosition()\":1157,\"Vector.\\u003cinit\\u003e\":800,\"int:2\":1024,\"int:1\":726,\"\\u003cnullcheck\\u003e\":596,\"ResultSet.getInt()\":1102,\"ViewProperty.setVerticalScrollBarPosition()\":1034,\"PreparedStatement.setString()\":710,\"ViewProperty.setViewID()\":948,\"Vector.addElement()\":1513,\"ViewProperty.setYPosition()\":1195,\"ResultSet.getString()\":925,\"\\u003creturn\\u003e\":613,\"ViewProperty.setHorizontalScrollBarPosition()\":978,\"ViewProperty.setUserID()\":910,\"boolean:true\":1319,\"ViewProperty.setHeight()\":1122,\"Connection.prepareStatement()\":657,\"PreparedStatement.executeQuery()\":759,\"ViewProperty.\\u003cinit\\u003e\":885,\"null:null\":620,\"PreparedStatement.close()\":1550,\"ViewProperty.setIsIcon()\":1304},\"expressionEnd\":{\"String.equals()\":1296,\"DBConnection.getConnection()\":587,\"boolean:false\":1362,\"String:Y\":1295,\"ResultSet.next()\":856,\"int:6\":1186,\"ViewProperty.setIsMaximum()\":1462,\"int:5\":1148,\"int:4\":1113,\"int:3\":1079,\"int:9\":1402,\"int:8\":812,\"ViewProperty.setWidth()\":1115,\"int:7\":1224,\"ViewProperty.setXPosition()\":1188,\"Vector.\\u003cinit\\u003e\":813,\"int:2\":1025,\"int:1\":727,\"\\u003cnullcheck\\u003e\":607,\"ResultSet.getInt()\":1114,\"ViewProperty.setVerticalScrollBarPosition()\":1081,\"PreparedStatement.setString()\":737,\"ViewProperty.setViewID()\":971,\"Vector.addElement()\":1534,\"ViewProperty.setYPosition()\":1226,\"ResultSet.getString()\":940,\"\\u003creturn\\u003e\":625,\"ViewProperty.setHorizontalScrollBarPosition()\":1027,\"ViewProperty.setUserID()\":941,\"boolean:true\":1323,\"ViewProperty.setHeight()\":1150,\"Connection.prepareStatement()\":705,\"PreparedStatement.executeQuery()\":779,\"ViewProperty.\\u003cinit\\u003e\":903,\"null:null\":624,\"PreparedStatement.close()\":1563,\"ViewProperty.setIsIcon()\":1324},\"rawCode\":\"/**\\r\\n\\t *\\tReturns a Vector of all the View Properties for the given view id\\r\\n\\t *\\r\\n\\t *\\t@param DBConnection dbcon com.compendium.core.db.management.DBConnection, the DBConnection object to access the database with.\\r\\n\\t *\\t@param String sViewID, the view id of the view whose ViewProperty records to return.\\r\\n\\t *\\t@return Vector, a list of all the \\u003ccode\\u003eViewProperty\\u003c/code\\u003e objects for the given view id.\\r\\n\\t *\\t@throws java.sql.SQLException\\r\\n\\t */\\r\\n\\tpublic static Vector getAllViewPropertyViews(DBConnection dbcon, String sViewID) throws SQLException {\\r\\n\\r\\n\\t\\tConnection con \\u003d dbcon.getConnection();\\r\\n\\t\\tif (con \\u003d\\u003d null)\\r\\n\\t\\t\\treturn null;\\r\\n\\r\\n\\t\\tPreparedStatement pstmt \\u003d con.prepareStatement(GET_ALL_VIEWPROPERTY_VIEWS);\\r\\n\\t\\tpstmt.setString(1, sViewID);\\r\\n\\r\\n\\t\\tResultSet rs \\u003d pstmt.executeQuery();\\r\\n\\r\\n\\t\\tVector data \\u003d new Vector(8);\\r\\n\\t\\tif (rs !\\u003d null) {\\r\\n\\t\\t\\twhile (rs.next()) {\\r\\n\\t\\t\\t\\tViewProperty view \\u003d new ViewProperty();\\r\\n\\t\\t\\t\\tview.setUserID(rs.getString(1));\\r\\n\\t\\t\\t\\tview.setViewID(sViewID);\\r\\n\\t\\t\\t\\tview.setHorizontalScrollBarPosition(rs.getInt(2));\\r\\n\\t\\t\\t\\tview.setVerticalScrollBarPosition(rs.getInt(3));\\r\\n\\t\\t\\t\\tview.setWidth(rs.getInt(4));\\r\\n\\t\\t\\t\\tview.setHeight(rs.getInt(5));\\r\\n\\t\\t\\t\\tview.setXPosition(rs.getInt(6));\\r\\n\\t\\t\\t\\tview.setYPosition(rs.getInt(7));\\r\\n\\r\\n\\t\\t\\t\\tString  isIcon \\u003d rs.getString(8);\\r\\n\\t\\t\\t\\tif (isIcon.equals(\\\"Y\\\"))\\r\\n\\t\\t\\t\\t\\tview.setIsIcon(true);\\r\\n\\t\\t\\t\\telse\\r\\n\\t\\t\\t\\t\\tview.setIsIcon(false);\\r\\n\\r\\n\\t\\t\\t\\tString  isMax \\u003d rs.getString(9);\\r\\n\\t\\t\\t\\tif (isMax.equals(\\\"Y\\\"))\\r\\n\\t\\t\\t\\t\\tview.setIsMaximum(true);\\r\\n\\t\\t\\t\\telse\\r\\n\\t\\t\\t\\t\\tview.setIsMaximum(false);\\r\\n\\r\\n\\t\\t\\t\\tdata.addElement(view);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tpstmt.close();\\r\\n\\t\\treturn data;\\r\\n\\t}\"}","174":"{\"expressionStart\":{\"String.equals()\":1397,\"DBConnection.getConnection()\":555,\"boolean:false\":1340,\"String:Y\":1275,\"ResultSet.next()\":830,\"int:6\":1168,\"ViewProperty.setIsMaximum()\":1422,\"int:5\":1130,\"int:4\":1095,\"int:3\":1061,\"int:9\":1384,\"int:8\":794,\"ViewProperty.setWidth()\":1071,\"int:7\":1206,\"ViewProperty.setXPosition()\":1140,\"int:2\":1007,\"Vector.\\u003cinit\\u003e\":783,\"int:1\":709,\"\\u003cnullcheck\\u003e\":805,\"ViewProperty.setVerticalScrollBarPosition()\":1017,\"ResultSet.getInt()\":1085,\"PreparedStatement.setString()\":693,\"ViewProperty.setViewID()\":893,\"Vector.addElement()\":1496,\"ViewProperty.setYPosition()\":1178,\"ResultSet.getString()\":908,\"\\u003creturn\\u003e\":602,\"ViewProperty.setHorizontalScrollBarPosition()\":961,\"ViewProperty.setUserID()\":931,\"boolean:true\":1302,\"ViewProperty.setHeight()\":1105,\"Connection.prepareStatement()\":646,\"PreparedStatement.executeQuery()\":742,\"null:null\":609,\"ViewProperty.\\u003cinit\\u003e\":868,\"PreparedStatement.close()\":1533,\"ViewProperty.setIsIcon()\":1287},\"expressionEnd\":{\"String.equals()\":1414,\"DBConnection.getConnection()\":576,\"boolean:false\":1345,\"String:Y\":1278,\"ResultSet.next()\":839,\"int:6\":1169,\"ViewProperty.setIsMaximum()\":1445,\"int:5\":1131,\"int:4\":1096,\"int:3\":1062,\"int:9\":1385,\"int:8\":795,\"ViewProperty.setWidth()\":1098,\"int:7\":1207,\"ViewProperty.setXPosition()\":1171,\"int:2\":1008,\"Vector.\\u003cinit\\u003e\":796,\"int:1\":710,\"\\u003cnullcheck\\u003e\":815,\"ViewProperty.setVerticalScrollBarPosition()\":1064,\"ResultSet.getInt()\":1097,\"PreparedStatement.setString()\":720,\"ViewProperty.setViewID()\":924,\"Vector.addElement()\":1517,\"ViewProperty.setYPosition()\":1209,\"ResultSet.getString()\":923,\"\\u003creturn\\u003e\":614,\"ViewProperty.setHorizontalScrollBarPosition()\":1010,\"ViewProperty.setUserID()\":954,\"boolean:true\":1306,\"ViewProperty.setHeight()\":1133,\"Connection.prepareStatement()\":688,\"PreparedStatement.executeQuery()\":762,\"null:null\":613,\"ViewProperty.\\u003cinit\\u003e\":886,\"PreparedStatement.close()\":1546,\"ViewProperty.setIsIcon()\":1307},\"rawCode\":\"/**\\r\\n\\t *\\tReturns a Vector of all the View Properties for the given user id\\r\\n\\t *\\r\\n\\t *\\t@param DBConnection dbcon com.compendium.core.db.management.DBConnection, the DBConnection object to access the database with.\\r\\n\\t *\\t@param String sUserID, the id of the user whose ViewProperty record to return.\\r\\n\\t *\\t@return Vector, a list of all the \\u003ccode\\u003eViewProperty\\u003c/code\\u003e objects for the given user id.\\r\\n\\t *\\t@throws java.sql.SQLException\\r\\n\\t */\\r\\n\\tpublic static Vector getAllViewProperty(DBConnection dbcon, String sUserID) throws SQLException {\\r\\n\\r\\n\\t\\tConnection con \\u003d dbcon.getConnection();\\r\\n\\t\\tif (con \\u003d\\u003d null)\\r\\n\\t\\t\\treturn null;\\r\\n\\r\\n\\t\\tPreparedStatement pstmt \\u003d con.prepareStatement(GET_ALL_VIEWPROPERTY);\\r\\n\\t\\tpstmt.setString(1, sUserID);\\r\\n\\r\\n\\t\\tResultSet rs \\u003d pstmt.executeQuery();\\r\\n\\r\\n\\t\\tVector data \\u003d new Vector(8);\\r\\n\\t\\tif (rs !\\u003d null) {\\r\\n\\t\\t\\twhile (rs.next()) {\\r\\n\\t\\t\\t\\tViewProperty view \\u003d new ViewProperty();\\r\\n\\t\\t\\t\\tview.setViewID(rs.getString(1));\\r\\n\\t\\t\\t\\tview.setUserID(sUserID);\\r\\n\\t\\t\\t\\tview.setHorizontalScrollBarPosition(rs.getInt(2));\\r\\n\\t\\t\\t\\tview.setVerticalScrollBarPosition(rs.getInt(3));\\r\\n\\t\\t\\t\\tview.setWidth(rs.getInt(4));\\r\\n\\t\\t\\t\\tview.setHeight(rs.getInt(5));\\r\\n\\t\\t\\t\\tview.setXPosition(rs.getInt(6));\\r\\n\\t\\t\\t\\tview.setYPosition(rs.getInt(7));\\r\\n\\r\\n\\t\\t\\t\\tString  isIcon \\u003d rs.getString(8);\\r\\n\\t\\t\\t\\tif (isIcon.equals(\\\"Y\\\"))\\r\\n\\t\\t\\t\\t\\tview.setIsIcon(true);\\r\\n\\t\\t\\t\\telse\\r\\n\\t\\t\\t\\t\\tview.setIsIcon(false);\\r\\n\\r\\n\\t\\t\\t\\tString  isMax \\u003d rs.getString(9);\\r\\n\\t\\t\\t\\tif (isMax.equals(\\\"Y\\\"))\\r\\n\\t\\t\\t\\t\\tview.setIsMaximum(true);\\r\\n\\t\\t\\t\\telse\\r\\n\\t\\t\\t\\t\\tview.setIsMaximum(false);\\r\\n\\r\\n\\t\\t\\t\\tdata.addElement(view);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tpstmt.close();\\r\\n\\t\\treturn data;\\r\\n\\t}\"}","175":"{\"expressionStart\":{\"String.equals()\":1488,\"DBConnection.getConnection()\":642,\"boolean:false\":1572,\"String:Y\":1366,\"ResultSet.next()\":942,\"int:6\":1297,\"int:5\":1259,\"ViewProperty.setIsMaximum()\":1513,\"int:4\":1221,\"int:3\":1186,\"int:8\":1475,\"ViewProperty.setWidth()\":1162,\"int:7\":1339,\"ViewProperty.setXPosition()\":1231,\"int:2\":824,\"int:1\":792,\"\\u003cnullcheck\\u003e\":917,\"ResultSet.getInt()\":1287,\"ViewProperty.setVerticalScrollBarPosition()\":1108,\"PreparedStatement.setString()\":776,\"ViewProperty.setViewID()\":992,\"ViewProperty.setYPosition()\":1269,\"ResultSet.getString()\":1326,\"\\u003creturn\\u003e\":689,\"ViewProperty.setHorizontalScrollBarPosition()\":1052,\"ViewProperty.setUserID()\":1022,\"boolean:true\":1531,\"ViewProperty.setHeight()\":1196,\"Connection.prepareStatement()\":733,\"PreparedStatement.executeQuery()\":857,\"ViewProperty.\\u003cinit\\u003e\":967,\"null:null\":904,\"\\u003cbreak\\u003e\":1587,\"PreparedStatement.close()\":1608,\"ViewProperty.setIsIcon()\":1378},\"expressionEnd\":{\"String.equals()\":1505,\"DBConnection.getConnection()\":663,\"boolean:false\":1577,\"String:Y\":1369,\"ResultSet.next()\":951,\"int:6\":1298,\"int:5\":1260,\"ViewProperty.setIsMaximum()\":1536,\"int:4\":1222,\"int:3\":1187,\"int:8\":1476,\"ViewProperty.setWidth()\":1189,\"int:7\":1340,\"ViewProperty.setXPosition()\":1262,\"int:2\":825,\"int:1\":793,\"\\u003cnullcheck\\u003e\":927,\"ResultSet.getInt()\":1299,\"ViewProperty.setVerticalScrollBarPosition()\":1155,\"PreparedStatement.setString()\":803,\"ViewProperty.setViewID()\":1015,\"ViewProperty.setYPosition()\":1300,\"ResultSet.getString()\":1341,\"\\u003creturn\\u003e\":701,\"ViewProperty.setHorizontalScrollBarPosition()\":1101,\"ViewProperty.setUserID()\":1045,\"boolean:true\":1535,\"ViewProperty.setHeight()\":1224,\"Connection.prepareStatement()\":771,\"PreparedStatement.executeQuery()\":877,\"ViewProperty.\\u003cinit\\u003e\":985,\"null:null\":908,\"\\u003cbreak\\u003e\":1593,\"PreparedStatement.close()\":1621,\"ViewProperty.setIsIcon()\":1398},\"rawCode\":\"/**\\r\\n\\t *\\tReturns a Vector of View Properties for the given user and view id\\r\\n\\t *\\r\\n\\t *\\t@param DBConnection dbcon com.compendium.core.db.management.DBConnection, the DBConnection object to access the database with.\\r\\n\\t *\\t@param String sUserID, the id of the user whose ViewProperty record to return.\\r\\n\\t *\\t@param String sViewID, the id of the view whose properties to get.\\r\\n\\t *\\t@return com.compendium.core.datamodel.ViewProperty, the view\\u0027s properties, else null.\\r\\n\\t *\\t@throws java.sql.SQLException\\r\\n\\t */\\r\\n\\tpublic static ViewProperty getViewPosition(DBConnection dbcon, String sUserID, String sViewID) throws SQLException {\\r\\n\\r\\n\\t\\tConnection con \\u003d dbcon.getConnection();\\r\\n\\t\\tif (con \\u003d\\u003d null)\\r\\n\\t\\t\\treturn null;\\r\\n\\r\\n\\t\\tPreparedStatement pstmt \\u003d con.prepareStatement(GET_VIEWPROPERTY);\\r\\n\\t\\tpstmt.setString(1, sUserID);\\r\\n\\t\\tpstmt.setString(2, sViewID);\\r\\n\\r\\n\\t\\tResultSet rs \\u003d pstmt.executeQuery();\\r\\n\\r\\n\\t\\tViewProperty view \\u003d null;\\r\\n\\t\\tif (rs !\\u003d null) {\\r\\n\\t\\t\\twhile (rs.next()) {\\r\\n\\t\\t\\t\\tview \\u003d new ViewProperty();\\r\\n\\t\\t\\t\\tview.setViewID(sViewID);\\r\\n\\t\\t\\t\\tview.setUserID(sUserID);\\r\\n\\t\\t\\t\\tview.setHorizontalScrollBarPosition(rs.getInt(1));\\r\\n\\t\\t\\t\\tview.setVerticalScrollBarPosition(rs.getInt(2));\\r\\n\\t\\t\\t\\tview.setWidth(rs.getInt(3));\\r\\n\\t\\t\\t\\tview.setHeight(rs.getInt(4));\\r\\n\\t\\t\\t\\tview.setXPosition(rs.getInt(5));\\r\\n\\t\\t\\t\\tview.setYPosition(rs.getInt(6));\\r\\n\\r\\n\\t\\t\\t\\tString  isIcon \\u003d rs.getString(7);\\r\\n\\t\\t\\t\\tif (isIcon.equals(\\\"Y\\\"))\\r\\n\\t\\t\\t\\t\\tview.setIsIcon(true);\\r\\n\\t\\t\\t\\telse\\r\\n\\t\\t\\t\\t\\tview.setIsIcon(false);\\r\\n\\r\\n\\t\\t\\t\\tString  isMax \\u003d rs.getString(8);\\r\\n\\t\\t\\t\\tif (isMax.equals(\\\"Y\\\"))\\r\\n\\t\\t\\t\\t\\tview.setIsMaximum(true);\\r\\n\\t\\t\\t\\telse\\r\\n\\t\\t\\t\\t\\tview.setIsMaximum(false);\\r\\n\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tpstmt.close();\\r\\n\\t\\treturn view;\\r\\n\\t}\"}","176":"{\"expressionStart\":{\"Log.isDebugEnabled()\":421,\"Connection.setAutoCommit()\":2314,\"boolean:false\":916,\"String\":997,\"StringBuilder.append()\":1328,\"Connection.createStatement()\":1075,\"ResultSet.next()\":1176,\"Statement.close()\":1923,\"SQLException.getErrorCode()\":1637,\"BasicSqlService.returnConnection()\":2467,\"ResultSet.close()\":1784,\"Connection.getAutoCommit()\":847,\"int:1\":1283,\"\\u003cnullcheck\\u003e\":1296,\"Statement.executeQuery()\":1111,\"Log.warn()\":1603,\"BasicSqlService.borrowConnection()\":749,\"ResultSet.getString()\":1266,\"Log.debug()\":987,\"\\u003creturn\\u003e\":2503,\"String:Sql.dbReadBinary(): \":1845,\"boolean:true\":1405,\"String:)\":518,\"Connection.rollback()\":2175,\"\\u003d\":1393},\"expressionEnd\":{\"Log.isDebugEnabled()\":441,\"Connection.setAutoCommit()\":2344,\"boolean:false\":921,\"String\":1018,\"StringBuilder.append()\":1344,\"Connection.createStatement()\":1097,\"ResultSet.next()\":1189,\"Statement.close()\":1935,\"SQLException.getErrorCode()\":1653,\"BasicSqlService.returnConnection()\":2489,\"ResultSet.close()\":1798,\"Connection.getAutoCommit()\":867,\"int:1\":1284,\"\\u003cnullcheck\\u003e\":1309,\"Statement.executeQuery()\":1133,\"Log.warn()\":1666,\"BasicSqlService.borrowConnection()\":767,\"ResultSet.getString()\":1285,\"Log.debug()\":1025,\"\\u003creturn\\u003e\":2515,\"String:Sql.dbReadBinary(): \":1867,\"boolean:true\":1409,\"String:)\":521,\"Connection.rollback()\":2190,\"\\u003d\":1409},\"rawCode\":\"/**\\n\\t * Read a single field from the db, from a single record, return the value found, and lock for update.\\n\\t * \\n\\t * @param sql\\n\\t *        The sql statement.\\n\\t * @param field\\n\\t *        A StringBuilder that will be filled with the field.\\n\\t * @return The Connection holding the lock.\\n\\t */\\n\\tpublic Connection dbReadLock(String sql, StringBuilder field)\\n\\t{\\n\\t\\t// Note: does not support TRANSACTION_CONNECTION -ggolden\\n\\n\\t\\tif (LOG.isDebugEnabled())\\n\\t\\t{\\n\\t\\t\\tLOG.debug(\\\"dbReadLock(String \\\" + sql + \\\", StringBuilder \\\" + field + \\\")\\\");\\n\\t\\t}\\n\\n\\t\\tConnection conn \\u003d null;\\n\\t\\tStatement stmt \\u003d null;\\n\\t\\tResultSet result \\u003d null;\\n\\t\\tboolean autoCommit \\u003d false;\\n\\t\\tboolean resetAutoCommit \\u003d false;\\n\\t\\tboolean closeConn \\u003d false;\\n\\n\\t\\ttry\\n\\t\\t{\\n\\t\\t\\t// get a new connection\\n\\t\\t\\tconn \\u003d borrowConnection();\\n\\n\\t\\t\\t// adjust to turn off auto commit - we need a transaction\\n\\t\\t\\tautoCommit \\u003d conn.getAutoCommit();\\n\\t\\t\\tif (autoCommit)\\n\\t\\t\\t{\\n\\t\\t\\t\\tconn.setAutoCommit(false);\\n\\t\\t\\t\\tresetAutoCommit \\u003d true;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (LOG.isDebugEnabled()) LOG.debug(\\\"Sql.dbReadLock():\\\\n\\\" + sql);\\n\\n\\t\\t\\t// create a statement and execute\\n\\t\\t\\tstmt \\u003d conn.createStatement();\\n\\t\\t\\tresult \\u003d stmt.executeQuery(sql);\\n\\n\\t\\t\\t// if we have a result record\\n\\t\\t\\tif (result.next())\\n\\t\\t\\t{\\n\\t\\t\\t\\t// get the result and pack into the return buffer\\n\\t\\t\\t\\tString rv \\u003d result.getString(1);\\n\\t\\t\\t\\tif ((field !\\u003d null) \\u0026\\u0026 (rv !\\u003d null)) field.append(rv);\\n\\t\\t\\t}\\n\\n\\t\\t\\t// otherwise we fail\\n\\t\\t\\telse\\n\\t\\t\\t{\\n\\t\\t\\t\\tcloseConn \\u003d true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// this is likely the error when the record is otherwise locked - we fail\\n\\t\\tcatch (SQLException e)\\n\\t\\t{\\n\\t\\t\\t// Note: ORA-00054 gives an e.getErrorCode() of 54, if anyone cares...\\n\\t\\t\\tLOG.warn(\\\"Sql.dbUpdateLock(): \\\" + e.getErrorCode() + \\\" - \\\" + e);\\n\\t\\t\\tcloseConn \\u003d true;\\n\\t\\t}\\n\\t\\tfinally\\n\\t\\t{\\n\\t\\t\\t// close the result and statement\\n\\t\\t\\tif (result !\\u003d null) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tresult.close();\\n\\t\\t\\t\\t} catch (SQLException e) {\\n\\t\\t\\t\\t\\tLOG.warn(\\\"Sql.dbReadBinary(): \\\" + e);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (null !\\u003d stmt) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tstmt.close();\\n\\t\\t\\t\\t} catch (SQLException e) {\\n\\t\\t\\t\\t\\tLOG.warn(\\\"Sql.dbReadBinary(): \\\" + e);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\t// if we are failing, restore and release the connection\\n\\t\\t\\tif ((closeConn) \\u0026\\u0026 (conn !\\u003d null))\\n\\t\\t\\t{\\n\\t\\t\\t\\t// just in case we got a lock\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tconn.rollback();\\n\\t\\t\\t\\t} catch (SQLException e) {\\n\\t\\t\\t\\t\\tLOG.warn(\\\"Sql.dbReadBinary(): \\\" + e);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (resetAutoCommit)\\n\\t\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\t\\tconn.setAutoCommit(autoCommit);\\n\\t\\t\\t\\t\\t} catch (SQLException e) {\\n\\t\\t\\t\\t\\t\\tLOG.warn(\\\"Sql.dbReadBinary(): \\\" + e);\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\n\\n\\t\\t\\tif (conn !\\u003d null)\\n\\t\\t\\t{\\n\\t\\t\\t\\treturnConnection(conn);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn conn;\\n\\t}\"}","177":"{\"expressionStart\":{\"\\u003cthrow\\u003e\":276,\"SQLException.\\u003cinit\\u003e\":282,\"ResultSet.close()\":383,\"ResultSet.getString()\":231,\"String\":299,\"Connection.createStatement()\":100,\"int:1\":244,\"\\u003creturn\\u003e\":403,\"ResultSet.next()\":198,\"Statement.executeQuery()\":147,\"\\u003cnullcheck\\u003e\":260},\"expressionEnd\":{\"\\u003cthrow\\u003e\":372,\"SQLException.\\u003cinit\\u003e\":371,\"ResultSet.close()\":393,\"ResultSet.getString()\":246,\"String\":309,\"Connection.createStatement()\":122,\"int:1\":245,\"\\u003creturn\\u003e\":415,\"ResultSet.next()\":207,\"Statement.executeQuery()\":188,\"\\u003cnullcheck\\u003e\":272},\"rawCode\":\"private static String getIndexPath(Connection conn) throws SQLException {\\n\\n        Statement stat \\u003d conn.createStatement();\\n        ResultSet rs \\u003d stat.executeQuery(\\\"CALL DATABASE_PATH()\\\");\\n        rs.next();\\n        String path \\u003d rs.getString(1);\\n        if (path \\u003d\\u003d null) { throw new SQLException(\\\"FULLTEXT\\\", \\\"Fulltext search for in-memory databases is not supported.\\\"); }\\n        rs.close();\\n        return path;\\n    }\"}","178":"{\"expressionStart\":{\"String:SELECT * FROM \":419,\"FullTextLucene.init()\":236,\"ResultSet.getString()\":516,\"FullTextLucene.removeAllTriggers()\":256,\"FullTextLucene.indexExistingRows()\":650,\"FullTextLucene.removeIndexFiles()\":305,\"String\":529,\"String:TABLE\":580,\"Connection.createStatement()\":354,\"Statement.executeQuery()\":401,\"ResultSet.next()\":475,\"FullTextLucene.createTrigger()\":602},\"expressionEnd\":{\"String:SELECT * FROM \":435,\"FullTextLucene.init()\":246,\"ResultSet.getString()\":538,\"FullTextLucene.removeAllTriggers()\":295,\"FullTextLucene.indexExistingRows()\":688,\"FullTextLucene.removeIndexFiles()\":327,\"String\":537,\"String:TABLE\":587,\"Connection.createStatement()\":376,\"Statement.executeQuery()\":458,\"ResultSet.next()\":484,\"FullTextLucene.createTrigger()\":636},\"rawCode\":\"/**\\n     * Re-creates the full text index for this database.\\n     * \\n     * @param conn\\n     *            the connection\\n     */\\n    // ## Java 1.4 begin ##\\n    public static void reindex(Connection conn) throws SQLException {\\n\\n        init(conn);\\n        removeAllTriggers(conn, TRIGGER_PREFIX);\\n        removeIndexFiles(conn);\\n        Statement stat \\u003d conn.createStatement();\\n        ResultSet rs \\u003d stat.executeQuery(\\\"SELECT * FROM \\\" + SCHEMA + \\\".INDEXES\\\");\\n        while (rs.next()) {\\n            String schema \\u003d rs.getString(\\\"SCHEMA\\\");\\n            String table \\u003d rs.getString(\\\"TABLE\\\");\\n            createTrigger(conn, schema, table);\\n            indexExistingRows(conn, schema, table);\\n        }\\n    }\"}","179":"{\"expressionStart\":{\"String:DATA_TYPE\":1177,\"ArrayList.addAll()\":2306,\"\\u003cthrow\\u003e\":1517,\"FullTextLucene.getIndexModifier()\":372,\"StringUtils.arraySplit()\":2053,\"String:COLUMN_NAME\":774,\"\\u003cr\\u003e\":2265,\"JdbcUtils.escapeMetaDataPattern()\":595,\"Connection.getMetaData()\":481,\"FullTextLucene.getIndexPath()\":319,\"String\":1540,\"FullTextTrigger.setColumns()\":2406,\"ArrayList.toArray()\":924,\"ResultSet.next()\":1116,\"DatabaseMetaData.getColumns()\":528,\"DatabaseMetaData.getPrimaryKeys()\":1265,\"int:2\":1846,\"int:1\":1803,\"\\u003cnullcheck\\u003e\":1998,\"int:0\":1113,\"ArrayList.size()\":2377,\"{int}\":2369,\"ResultSet.getInt()\":1167,\"PreparedStatement.setString()\":1831,\"SQLException.\\u003cinit\\u003e\":1523,\"ResultSet.getString()\":1416,\"{String}\":881,\"ArrayList.\\u003cinit\\u003e\":681,\"boolean:true\":2090,\"ArrayList.add()\":1404,\"Connection.prepareStatement()\":1680,\"PreparedStatement.executeQuery()\":1878,\"null:null\":1285,\"\\u003ca\\u003e\":1127,\"int[].arrayset()\":1150,\"char:\\u0027,\\u0027\":2085},\"expressionEnd\":{\"String:DATA_TYPE\":1188,\"ArrayList.addAll()\":2334,\"\\u003cthrow\\u003e\":1581,\"FullTextLucene.getIndexModifier()\":394,\"StringUtils.arraySplit()\":2095,\"String:COLUMN_NAME\":787,\"\\u003cr\\u003e\":2286,\"JdbcUtils.escapeMetaDataPattern()\":637,\"Connection.getMetaData()\":499,\"FullTextLucene.getIndexPath()\":337,\"String\":1567,\"FullTextTrigger.setColumns()\":2443,\"ArrayList.toArray()\":951,\"ResultSet.next()\":1125,\"DatabaseMetaData.getColumns()\":644,\"DatabaseMetaData.getPrimaryKeys()\":1346,\"int:2\":1847,\"int:1\":1804,\"\\u003cnullcheck\\u003e\":2013,\"int:0\":1114,\"ArrayList.size()\":2391,\"{int}\":2392,\"ResultSet.getInt()\":1189,\"PreparedStatement.setString()\":1859,\"SQLException.\\u003cinit\\u003e\":1580,\"ResultSet.getString()\":1443,\"{String}\":910,\"ArrayList.\\u003cinit\\u003e\":696,\"boolean:true\":2094,\"ArrayList.add()\":1444,\"Connection.prepareStatement()\":1774,\"PreparedStatement.executeQuery()\":1897,\"null:null\":1289,\"\\u003ca\\u003e\":1130,\"int[].arrayset()\":1164,\"char:\\u0027,\\u0027\":2088},\"rawCode\":\"/**\\n         * INTERNAL\\n         */\\n        // ## Java 1.4 begin ##\\n        public void init(Connection conn, String schemaName, String triggerName, String tableName, boolean before, int type) throws SQLException {\\n\\n            this.schema \\u003d schemaName;\\n            this.table \\u003d tableName;\\n            this.indexPath \\u003d getIndexPath(conn);\\n            this.indexModifier \\u003d getIndexModifier(conn);\\n            ArrayList keyList \\u003d new ArrayList();\\n            DatabaseMetaData meta \\u003d conn.getMetaData();\\n            ResultSet rs \\u003d meta.getColumns(null, JdbcUtils.escapeMetaDataPattern(schemaName), JdbcUtils.escapeMetaDataPattern(tableName), null);\\n            ArrayList columnList \\u003d new ArrayList();\\n            while (rs.next()) {\\n                columnList.add(rs.getString(\\\"COLUMN_NAME\\\"));\\n            }\\n            columnTypes \\u003d new int[columnList.size()];\\n            columns \\u003d new String[columnList.size()];\\n            columnList.toArray(columns);\\n            rs \\u003d meta.getColumns(null, JdbcUtils.escapeMetaDataPattern(schemaName), JdbcUtils.escapeMetaDataPattern(tableName), null);\\n            for (int i \\u003d 0; rs.next(); i++) {\\n                columnTypes[i] \\u003d rs.getInt(\\\"DATA_TYPE\\\");\\n            }\\n            if (keyList.size() \\u003d\\u003d 0) {\\n                rs \\u003d meta.getPrimaryKeys(null, JdbcUtils.escapeMetaDataPattern(schemaName), tableName);\\n                while (rs.next()) {\\n                    keyList.add(rs.getString(\\\"COLUMN_NAME\\\"));\\n                }\\n            }\\n            if (keyList.size() \\u003d\\u003d 0) { throw new SQLException(\\\"No primary key for table \\\" + tableName); }\\n            ArrayList indexList \\u003d new ArrayList\\u003cString\\u003e();\\n            PreparedStatement prep \\u003d conn.prepareStatement(\\\"SELECT COLUMNS FROM \\\" + SCHEMA + \\\".INDEXES WHERE SCHEMA\\u003d? AND TABLE\\u003d?\\\");\\n            prep.setString(1, schemaName);\\n            prep.setString(2, tableName);\\n            rs \\u003d prep.executeQuery();\\n            if (rs.next()) {\\n                String columns \\u003d rs.getString(1);\\n                if (columns !\\u003d null) {\\n                    String[] list \\u003d StringUtils.arraySplit(columns, \\u0027,\\u0027, true);\\n                    for (String element : list) {\\n                        indexList.add(element);\\n                    }\\n                }\\n            }\\n            if (indexList.size() \\u003d\\u003d 0) {\\n                indexList.addAll(columnList);\\n            }\\n            keys \\u003d new int[keyList.size()];\\n            setColumns(keys, keyList, columnList);\\n            indexColumns \\u003d new int[indexList.size()];\\n            setColumns(indexColumns, indexList, columnList);\\n        }\"}","180":"{\"expressionStart\":{\"PreparedStatement.setString()\":314,\"List.contains()\":468,\"ResultSet.getString()\":423,\"DbService.getConnection()\":213,\"\\u003creturn\\u003e\":567,\"ResultSet.next()\":387,\"ReportViewAssociation.cleanUp()\":535,\"ArrayList.\\u003cinit\\u003e\":161,\"List.add()\":495,\"int:3\":441,\"Connection.prepareStatement()\":260,\"PreparedStatement.executeQuery()\":356,\"int:1\":329,\"\\u003cnullcheck\\u003e\":453},\"expressionEnd\":{\"PreparedStatement.setString()\":340,\"List.contains()\":486,\"ResultSet.getString()\":443,\"DbService.getConnection()\":238,\"\\u003creturn\\u003e\":580,\"ResultSet.next()\":401,\"ReportViewAssociation.cleanUp()\":557,\"ArrayList.\\u003cinit\\u003e\":184,\"List.add()\":508,\"int:3\":442,\"Connection.prepareStatement()\":308,\"PreparedStatement.executeQuery()\":375,\"int:1\":330,\"\\u003cnullcheck\\u003e\":463},\"rawCode\":\"public final List\\u003cString\\u003e getViews(String reportId) throws SQLException {\\r\\n\\t\\tPreparedStatement stmt \\u003d null;\\r\\n\\t\\tResultSet results \\u003d null;\\r\\n\\t\\tList\\u003cString\\u003e views \\u003d new ArrayList\\u003cString\\u003e();\\r\\n\\t\\tConnection connection \\u003d DbService.getConnection();\\r\\n\\t\\ttry {\\r\\n\\t\\t\\tstmt \\u003d connection.prepareStatement(FIND_BY_REPORT_STMT);\\r\\n\\t\\t\\tstmt.setString(1,reportId);\\r\\n\\t\\t\\tresults \\u003d stmt.executeQuery();\\r\\n\\t\\t\\twhile(results.next()) { \\r\\n\\t\\t\\t\\tString id \\u003d results.getString(3);\\r\\n\\t\\t\\t\\tif(id !\\u003d null \\u0026\\u0026 !views.contains(id)) \\r\\n\\t\\t\\t\\t\\tviews.add(id);\\r\\n\\t\\t\\t}\\r\\n\\t\\t} finally {\\r\\n\\t\\t\\tcleanUp(stmt, results);\\r\\n\\t\\t}\\r\\n\\t\\treturn views;\\r\\n\\t}\"}","181":"{\"expressionStart\":{\"PreparedStatement.setString()\":310,\"List.contains()\":468,\"ResultSet.getString()\":423,\"DbService.getConnection()\":211,\"\\u003creturn\\u003e\":570,\"ResultSet.next()\":387,\"ReportViewAssociation.cleanUp()\":538,\"List.add()\":496,\"ArrayList.\\u003cinit\\u003e\":159,\"View.getId()\":327,\"Connection.prepareStatement()\":258,\"PreparedStatement.executeQuery()\":356,\"int:2\":441,\"int:1\":325,\"\\u003cnullcheck\\u003e\":453},\"expressionEnd\":{\"PreparedStatement.setString()\":340,\"List.contains()\":488,\"ResultSet.getString()\":443,\"DbService.getConnection()\":236,\"\\u003creturn\\u003e\":585,\"ResultSet.next()\":401,\"ReportViewAssociation.cleanUp()\":560,\"List.add()\":511,\"ArrayList.\\u003cinit\\u003e\":182,\"View.getId()\":339,\"Connection.prepareStatement()\":304,\"PreparedStatement.executeQuery()\":375,\"int:2\":442,\"int:1\":326,\"\\u003cnullcheck\\u003e\":463},\"rawCode\":\"public final List\\u003cString\\u003e getReports(View view) throws SQLException {\\r\\n\\t\\tPreparedStatement stmt \\u003d null;\\r\\n\\t\\tResultSet results \\u003d null;\\r\\n\\t\\tList\\u003cString\\u003e reports \\u003d new ArrayList\\u003cString\\u003e();\\r\\n\\t\\tConnection connection \\u003d DbService.getConnection();\\r\\n\\t\\ttry {\\r\\n\\t\\t\\tstmt \\u003d connection.prepareStatement(FIND_BY_VIEW_STMT);\\r\\n\\t\\t\\tstmt.setString(1,view.getId());\\r\\n\\t\\t\\tresults \\u003d stmt.executeQuery();\\r\\n\\t\\t\\twhile(results.next()) { \\r\\n\\t\\t\\t\\tString id \\u003d results.getString(2);\\r\\n\\t\\t\\t\\tif(id !\\u003d null \\u0026\\u0026 !reports.contains(id))\\r\\n\\t\\t\\t\\t\\treports.add(id);\\r\\n\\t\\t\\t}\\r\\n\\t\\t} finally {\\r\\n\\t\\t\\tcleanUp(stmt, results);\\r\\n\\t\\t}\\r\\n\\t\\treturn reports;\\r\\n\\r\\n\\t}\"}","182":"{\"expressionStart\":{\"ResultSet.getString()\":89,\"\\u003creturn\\u003e\":82,\"int:1\":102},\"expressionEnd\":{\"ResultSet.getString()\":104,\"\\u003creturn\\u003e\":105,\"int:1\":103},\"rawCode\":\"public Object getValidateSource(String id, ResultSet rs) throws SQLException\\n\\t{\\n\\t\\treturn rs.getString(1);\\n\\t}\"}","183":"{\"expressionStart\":{\"long:1L\":283,\"Clob.getSubString()\":265,\"int.\\u003ccast\\u003e\":287,\"Clob.length()\":293,\"ResultSetMetaData.getColumnType()\":150,\"ResultSet.getClob()\":215,\"ResultSet.getMetaData()\":103,\"ResultSet.getString()\":380,\"null:null\":135,\"\\u003creturn\\u003e\":413,\"int:1\":173,\"\\u003cnullcheck\\u003e\":237},\"expressionEnd\":{\"long:1L\":285,\"Clob.getSubString()\":307,\"int.\\u003ccast\\u003e\":306,\"Clob.length()\":306,\"ResultSetMetaData.getColumnType()\":175,\"ResultSet.getClob()\":228,\"ResultSet.getMetaData()\":119,\"ResultSet.getString()\":395,\"null:null\":139,\"\\u003creturn\\u003e\":423,\"int:1\":174,\"\\u003cnullcheck\\u003e\":249},\"rawCode\":\"public Object getSource(String id, ResultSet rs) throws SQLException\\n\\t{\\n\\t\\tResultSetMetaData metadata \\u003d rs.getMetaData();\\n\\t\\tString rv \\u003d null;\\n\\t\\tswitch(metadata.getColumnType(1))\\n\\t\\t{\\n\\t\\tcase Types.CLOB:\\n\\t\\t\\tClob clob \\u003d rs.getClob(1); \\n\\t\\t\\tif(clob !\\u003d null)\\n\\t\\t\\t{\\n\\t\\t\\t\\trv \\u003d clob.getSubString(1L, (int) clob.length());\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t\\tcase Types.LONGVARCHAR:\\n\\t\\tcase Types.VARCHAR:\\n\\t\\t\\trv \\u003d rs.getString(1);\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\treturn rv;\\n\\t}\"}","184":"{\"expressionStart\":{\"Statement.executeUpdate()\":83,\"DBMetaDataTest.assertNotNull()\":2227,\"String:PKCOLUMN_NAME\":743,\"String:FK_NAME\":865,\"String:PKTABLE_NAME\":674,\"DBMetaDataTest.assertTrue()\":1064,\"ResultSet.getString()\":1386,\"String\":1190,\"ResultSet.next()\":1075,\"String:FKCOLUMN_NAME\":1001,\"DBMetaDataTest.assertEquals()\":1363,\"String:parent\":532,\"ResultSet.close()\":2471,\"null:null\":526,\"DBMetaDataTest.assertFalse()\":2428,\"DatabaseMetaData.getExportedKeys()\":499,\"String:PK_NAME\":807,\"String:FKTABLE_NAME\":932},\"expressionEnd\":{\"Statement.executeUpdate()\":174,\"DBMetaDataTest.assertNotNull()\":2275,\"String:PKCOLUMN_NAME\":758,\"String:FK_NAME\":874,\"String:PKTABLE_NAME\":688,\"DBMetaDataTest.assertTrue()\":1095,\"ResultSet.getString()\":1424,\"String\":1195,\"ResultSet.next()\":1094,\"String:FKCOLUMN_NAME\":1016,\"DBMetaDataTest.assertEquals()\":1425,\"String:parent\":540,\"ResultSet.close()\":2491,\"null:null\":530,\"DBMetaDataTest.assertFalse()\":2460,\"DatabaseMetaData.getExportedKeys()\":541,\"String:PK_NAME\":816,\"String:FKTABLE_NAME\":946},\"rawCode\":\"@Test\\n    public void numberOfgetExportedKeysCols() throws SQLException {\\n\\n        stat.executeUpdate(\\\"create table parent (id1 integer, id2 integer, primary key(id1, id2))\\\");\\n        stat.executeUpdate(\\\"create table child1 (id1 integer, id2 integer, foreign key(id1) references parent(id1), foreign key(id2) references parent(id2))\\\");\\n        stat.executeUpdate(\\\"create table child2 (id1 integer, id2 integer, foreign key(id2, id1) references parent(id2, id1))\\\");\\n\\n        ResultSet exportedKeys \\u003d meta.getExportedKeys(null, null, \\\"parent\\\");\\n\\n        //1st fk (simple) - child1\\n        assertTrue(exportedKeys.next());\\n        assertEquals(\\\"parent\\\", exportedKeys.getString(\\\"PKTABLE_NAME\\\"));\\n        assertEquals(\\\"id2\\\", exportedKeys.getString(\\\"PKCOLUMN_NAME\\\"));\\n        assertNotNull(exportedKeys.getString(\\\"PK_NAME\\\"));\\n        assertNotNull(exportedKeys.getString(\\\"FK_NAME\\\"));\\n        assertEquals(\\\"child1\\\", exportedKeys.getString(\\\"FKTABLE_NAME\\\"));\\n        assertEquals(\\\"id2\\\", exportedKeys.getString(\\\"FKCOLUMN_NAME\\\"));\\n\\n        //2nd fk (simple) - child1\\n        assertTrue(exportedKeys.next());\\n        assertEquals(\\\"parent\\\", exportedKeys.getString(\\\"PKTABLE_NAME\\\"));\\n        assertEquals(\\\"id1\\\", exportedKeys.getString(\\\"PKCOLUMN_NAME\\\"));\\n        assertNotNull(exportedKeys.getString(\\\"PK_NAME\\\"));\\n        assertNotNull(exportedKeys.getString(\\\"FK_NAME\\\"));\\n        assertEquals(\\\"child1\\\", exportedKeys.getString(\\\"FKTABLE_NAME\\\"));\\n        assertEquals(\\\"id1\\\", exportedKeys.getString(\\\"FKCOLUMN_NAME\\\"));\\n\\n        //3rd fk (composite) - child2\\n        assertTrue(exportedKeys.next());\\n        assertEquals(\\\"parent\\\", exportedKeys.getString(\\\"PKTABLE_NAME\\\"));\\n        assertEquals(\\\"id2\\\", exportedKeys.getString(\\\"PKCOLUMN_NAME\\\"));\\n        assertNotNull(exportedKeys.getString(\\\"PK_NAME\\\"));\\n        assertNotNull(exportedKeys.getString(\\\"FK_NAME\\\"));\\n        assertEquals(\\\"child2\\\", exportedKeys.getString(\\\"FKTABLE_NAME\\\"));\\n        assertEquals(\\\"id2\\\", exportedKeys.getString(\\\"FKCOLUMN_NAME\\\"));\\n\\n        assertTrue(exportedKeys.next());\\n        assertEquals(\\\"parent\\\", exportedKeys.getString(\\\"PKTABLE_NAME\\\"));\\n        assertEquals(\\\"id1\\\", exportedKeys.getString(\\\"PKCOLUMN_NAME\\\"));\\n        assertNotNull(exportedKeys.getString(\\\"PK_NAME\\\"));\\n        assertNotNull(exportedKeys.getString(\\\"FK_NAME\\\"));\\n        assertEquals(\\\"child2\\\", exportedKeys.getString(\\\"FKTABLE_NAME\\\"));\\n        assertEquals(\\\"id1\\\", exportedKeys.getString(\\\"FKCOLUMN_NAME\\\"));\\n\\n        assertFalse(exportedKeys.next());\\n\\n        exportedKeys.close();\\n    }\"}","185":"{\"expressionStart\":{\"DBMetaDataTest.assertNotNull()\":113,\"DatabaseMetaData.getTableTypes()\":83,\"String:TABLE_TYPE\":197,\"DBMetaDataTest.assertEquals()\":171,\"DBMetaDataTest.assertTrue()\":230,\"ResultSet.getString()\":274,\"String\":302,\"DBMetaDataTest.assertFalse()\":319,\"String:TABLE\":212,\"ResultSet.next()\":331},\"expressionEnd\":{\"DBMetaDataTest.assertNotNull()\":130,\"DatabaseMetaData.getTableTypes()\":103,\"String:TABLE_TYPE\":209,\"DBMetaDataTest.assertEquals()\":220,\"DBMetaDataTest.assertTrue()\":251,\"ResultSet.getString()\":300,\"String\":308,\"DBMetaDataTest.assertFalse()\":341,\"String:TABLE\":219,\"ResultSet.next()\":340},\"rawCode\":\"@Test\\n    public void getTableTypes() throws SQLException {\\n        ResultSet rs \\u003d meta.getTableTypes();\\n        assertNotNull(rs);\\n        assertTrue(rs.next());\\n        assertEquals(rs.getString(\\\"TABLE_TYPE\\\"), \\\"TABLE\\\");\\n        assertTrue(rs.next());\\n        assertEquals(rs.getString(\\\"TABLE_TYPE\\\"), \\\"VIEW\\\");\\n        assertFalse(rs.next());\\n    }\"}","186":"{\"expressionStart\":{\"Statement.executeUpdate()\":84,\"String:PKTABLE_SCHEM\":518,\"DBMetaDataTest.assertNotNull()\":748,\"String:PKCOLUMN_NAME\":921,\"String:PKTABLE_NAME\":853,\"String:FK_NAME\":785,\"DBMetaDataTest.assertTrue()\":359,\"String:default\":319,\"ResultSet.getString()\":424,\"String\":1769,\"String:FKTABLE_SCHEM\":663,\"String:id\":892,\"ResultSet.next()\":1203,\"String:FKCOLUMN_NAME\":1064,\"DBMetaDataTest.assertEquals()\":1021,\"ResultSet.close()\":1092,\"null:null\":1159,\"String:FKTABLE_CAT\":592,\"DBMetaDataTest.assertFalse()\":1191,\"DatabaseMetaData.getExportedKeys()\":1138,\"String:PKTABLE_CAT\":447,\"String:PK_NAME\":727,\"String:FKTABLE_NAME\":995},\"expressionEnd\":{\"Statement.executeUpdate()\":150,\"String:PKTABLE_SCHEM\":533,\"DBMetaDataTest.assertNotNull()\":796,\"String:PKCOLUMN_NAME\":936,\"String:PKTABLE_NAME\":867,\"String:FK_NAME\":794,\"DBMetaDataTest.assertTrue()\":390,\"String:default\":328,\"ResultSet.getString()\":461,\"String\":1773,\"String:FKTABLE_SCHEM\":678,\"String:id\":896,\"ResultSet.next()\":1222,\"String:FKCOLUMN_NAME\":1079,\"DBMetaDataTest.assertEquals()\":1081,\"ResultSet.close()\":1112,\"null:null\":1163,\"String:FKTABLE_CAT\":605,\"DBMetaDataTest.assertFalse()\":1223,\"DatabaseMetaData.getExportedKeys()\":1181,\"String:PKTABLE_CAT\":460,\"String:PK_NAME\":736,\"String:FKTABLE_NAME\":1009},\"rawCode\":\"@Test\\n    public void columnOrderOfgetExportedKeys() throws SQLException {\\n\\n        stat.executeUpdate(\\\"create table person (id integer primary key)\\\");\\n        stat.executeUpdate(\\\"create table address (pid integer, name, foreign key(pid) references person(id))\\\");\\n\\n        ResultSet exportedKeys \\u003d meta.getExportedKeys(\\\"default\\\", \\\"global\\\", \\\"person\\\");\\n        assertTrue(exportedKeys.next());\\n        assertEquals(\\\"default\\\", exportedKeys.getString(\\\"PKTABLE_CAT\\\"));\\n        assertEquals(\\\"global\\\", exportedKeys.getString(\\\"PKTABLE_SCHEM\\\"));\\n        assertEquals(\\\"default\\\", exportedKeys.getString(\\\"FKTABLE_CAT\\\"));\\n        assertEquals(\\\"global\\\", exportedKeys.getString(\\\"FKTABLE_SCHEM\\\"));\\n        assertNotNull(exportedKeys.getString(\\\"PK_NAME\\\"));\\n        assertNotNull(exportedKeys.getString(\\\"FK_NAME\\\"));\\n\\n        assertEquals(\\\"person\\\", exportedKeys.getString(\\\"PKTABLE_NAME\\\"));\\n        assertEquals(\\\"id\\\", exportedKeys.getString(\\\"PKCOLUMN_NAME\\\"));\\n        assertEquals(\\\"address\\\", exportedKeys.getString(\\\"FKTABLE_NAME\\\"));\\n        assertEquals(\\\"pid\\\", exportedKeys.getString(\\\"FKCOLUMN_NAME\\\"));\\n\\n        exportedKeys.close();\\n\\n        exportedKeys \\u003d meta.getExportedKeys(null, null, \\\"address\\\");\\n        assertFalse(exportedKeys.next());\\n        exportedKeys.close();\\n\\n        // With explicit primary column defined.\\n        stat.executeUpdate(\\\"create table REFERRED (ID integer primary key not null)\\\");\\n        stat.executeUpdate(\\\"create table REFERRING (ID integer, RID integer, constraint fk foreign key (RID) references REFERRED(id))\\\");\\n\\n        exportedKeys \\u003d meta.getExportedKeys(null, null, \\\"referred\\\");\\n        assertEquals(\\\"referred\\\", exportedKeys.getString(\\\"PKTABLE_NAME\\\"));\\n        assertEquals(\\\"referring\\\", exportedKeys.getString(\\\"FKTABLE_NAME\\\"));\\n        assertEquals(\\\"fk\\\", exportedKeys.getString(\\\"FK_NAME\\\"));\\n        exportedKeys.close();\\n    }\"}","187":"{\"expressionStart\":{\"DBMetaDataTest.assertNotNull()\":109,\"DatabaseMetaData.getTypeInfo()\":81,\"DBMetaDataTest.assertEquals()\":255,\"String:TYPE_NAME\":193,\"DBMetaDataTest.assertTrue()\":136,\"ResultSet.getString()\":268,\"String\":295,\"DBMetaDataTest.assertFalse()\":579,\"ResultSet.next()\":147},\"expressionEnd\":{\"DBMetaDataTest.assertNotNull()\":126,\"DatabaseMetaData.getTypeInfo()\":99,\"DBMetaDataTest.assertEquals()\":305,\"String:TYPE_NAME\":204,\"DBMetaDataTest.assertTrue()\":157,\"ResultSet.getString()\":293,\"String\":304,\"DBMetaDataTest.assertFalse()\":601,\"ResultSet.next()\":156},\"rawCode\":\"@Test\\n    public void getTypeInfo() throws SQLException {\\n        ResultSet rs \\u003d meta.getTypeInfo();\\n        assertNotNull(rs);\\n        assertTrue(rs.next());\\n        assertEquals(rs.getString(\\\"TYPE_NAME\\\"), \\\"BLOB\\\");\\n        assertTrue(rs.next());\\n        assertEquals(rs.getString(\\\"TYPE_NAME\\\"), \\\"INTEGER\\\");\\n        assertTrue(rs.next());\\n        assertEquals(rs.getString(\\\"TYPE_NAME\\\"), \\\"NULL\\\");\\n        assertTrue(rs.next());\\n        assertEquals(rs.getString(\\\"TYPE_NAME\\\"), \\\"REAL\\\");\\n        assertTrue(rs.next());\\n        assertEquals(rs.getString(\\\"TYPE_NAME\\\"), \\\"TEXT\\\");\\n        assertFalse(rs.next());\\n    }\"}","188":"{\"expressionStart\":{\"Statement.executeUpdate()\":139,\"String:TABLE_SCHEM\":952,\"String:COLUMN_NAME\":1075,\"String:TABLE_CAT\":892,\"DBMetaDataTest.assertTrue()\":1977,\"String:TABLE_NAME\":1014,\"String\":2257,\"ResultSet.next()\":1988,\"ResultSetMetaData.getColumnCount()\":817,\"int:6\":842,\"int:5\":1133,\"int:4\":1071,\"DatabaseMetaData.getPrimaryKeys()\":2225,\"int:3\":1010,\"ResultSetMetaData.getColumnName()\":927,\"ResultSet.close()\":1215,\"DBMetaDataTest.assertFalse()\":2167,\"int:2\":948,\"int:1\":888,\"int:0\":2155,\"String:PK_NAME\":1195,\"ResultSet.getInt()\":2133,\"String:KEY_SEQ\":1137,\"ResultSet.getString()\":2021,\"ResultSet.getMetaData()\":778,\"DBMetaDataTest.assertEquals()\":1157,\"null:null\":2245},\"expressionEnd\":{\"Statement.executeUpdate()\":196,\"String:TABLE_SCHEM\":965,\"String:COLUMN_NAME\":1088,\"String:TABLE_CAT\":903,\"DBMetaDataTest.assertTrue()\":1998,\"String:TABLE_NAME\":1026,\"String\":2262,\"ResultSet.next()\":1997,\"ResultSetMetaData.getColumnCount()\":840,\"int:6\":843,\"int:5\":1134,\"int:4\":1072,\"DatabaseMetaData.getPrimaryKeys()\":2263,\"int:3\":1011,\"ResultSetMetaData.getColumnName()\":950,\"ResultSet.close()\":1225,\"DBMetaDataTest.assertFalse()\":2189,\"int:2\":949,\"int:1\":889,\"int:0\":2156,\"String:PK_NAME\":1204,\"ResultSet.getInt()\":2153,\"String:KEY_SEQ\":1146,\"ResultSet.getString()\":2048,\"ResultSet.getMetaData()\":794,\"DBMetaDataTest.assertEquals()\":1205,\"null:null\":2249},\"rawCode\":\"@Test\\n    public void columnOrderOfgetPrimaryKeys() throws SQLException {\\n        ResultSet rs;\\n        ResultSetMetaData rsmeta;\\n\\n        stat.executeUpdate(\\\"create table nopk (c1, c2, c3, c4);\\\");\\n        stat.executeUpdate(\\\"create table pk1 (col1 primary key, col2, col3);\\\");\\n        stat.executeUpdate(\\\"create table pk2 (col1, col2 primary key, col3);\\\");\\n        stat.executeUpdate(\\\"create table pk3 (col1, col2, col3, col4, primary key (col3, col2  ));\\\");\\n        // extra spaces and mixed case are intentional, do not remove!\\n        stat.executeUpdate(\\\"create table pk4 (col1, col2, col3, col4, \\\" +\\n                \\\"CONSTraint named  primary key   (col3, col2  ));\\\");\\n\\n        rs \\u003d meta.getPrimaryKeys(null, null, \\\"nopk\\\");\\n        assertFalse(rs.next());\\n        rsmeta \\u003d rs.getMetaData();\\n        assertEquals(rsmeta.getColumnCount(), 6);\\n        assertEquals(rsmeta.getColumnName(1), \\\"TABLE_CAT\\\");\\n        assertEquals(rsmeta.getColumnName(2), \\\"TABLE_SCHEM\\\");\\n        assertEquals(rsmeta.getColumnName(3), \\\"TABLE_NAME\\\");\\n        assertEquals(rsmeta.getColumnName(4), \\\"COLUMN_NAME\\\");\\n        assertEquals(rsmeta.getColumnName(5), \\\"KEY_SEQ\\\");\\n        assertEquals(rsmeta.getColumnName(6), \\\"PK_NAME\\\");\\n        rs.close();\\n\\n        rs \\u003d meta.getPrimaryKeys(null, null, \\\"pk1\\\");\\n        assertTrue(rs.next());\\n        assertEquals(rs.getString(\\\"PK_NAME\\\"), null);\\n        assertEquals(rs.getString(\\\"COLUMN_NAME\\\"), \\\"col1\\\");\\n        assertFalse(rs.next());\\n        rs.close();\\n\\n        rs \\u003d meta.getPrimaryKeys(null, null, \\\"pk2\\\");\\n        assertTrue(rs.next());\\n        assertEquals(rs.getString(\\\"PK_NAME\\\"), null);\\n        assertEquals(rs.getString(\\\"COLUMN_NAME\\\"), \\\"col2\\\");\\n        assertFalse(rs.next());\\n        rs.close();\\n\\n        rs \\u003d meta.getPrimaryKeys(null, null, \\\"pk3\\\");\\n        assertTrue(rs.next());\\n        assertEquals(rs.getString(\\\"COLUMN_NAME\\\"), \\\"col2\\\");\\n        assertEquals(rs.getString(\\\"PK_NAME\\\"), null);\\n        assertEquals(rs.getInt(\\\"KEY_SEQ\\\"), 1);\\n        assertTrue(rs.next());\\n        assertEquals(rs.getString(\\\"COLUMN_NAME\\\"), \\\"col3\\\");\\n        assertEquals(rs.getString(\\\"PK_NAME\\\"), null);\\n        assertEquals(rs.getInt(\\\"KEY_SEQ\\\"), 0);\\n        assertFalse(rs.next());\\n        rs.close();\\n\\n        rs \\u003d meta.getPrimaryKeys(null, null, \\\"pk4\\\");\\n        assertTrue(rs.next());\\n        assertEquals(rs.getString(\\\"COLUMN_NAME\\\"), \\\"col2\\\");\\n        assertEquals(rs.getString(\\\"PK_NAME\\\"), \\\"named\\\");\\n        assertEquals(rs.getInt(\\\"KEY_SEQ\\\"), 1);\\n        assertTrue(rs.next());\\n        assertEquals(rs.getString(\\\"COLUMN_NAME\\\"), \\\"col3\\\");\\n        assertEquals(rs.getString(\\\"PK_NAME\\\"), \\\"named\\\");\\n        assertEquals(rs.getInt(\\\"KEY_SEQ\\\"), 0);\\n        assertFalse(rs.next());\\n        rs.close();\\n    }\"}","189":"{\"expressionStart\":{\"String:test\":226,\"DBMetaDataTest.assertNotNull()\":127,\"String:TABLE_TYPE\":274,\"DBMetaDataTest.assertTrue()\":645,\"DatabaseMetaData.getTables()\":595,\"ResultSet.getString()\":418,\"String:TABLE_NAME\":211,\"String\":384,\"ResultSet.next()\":1259,\"{String}\":918,\"DBMetaDataTest.assertEquals()\":1185,\"ResultSet.close()\":1279,\"null:null\":630,\"DBMetaDataTest.assertFalse()\":1247,\"String:TABLE\":289},\"expressionEnd\":{\"String:test\":232,\"DBMetaDataTest.assertNotNull()\":144,\"String:TABLE_TYPE\":286,\"DBMetaDataTest.assertTrue()\":666,\"DatabaseMetaData.getTables()\":635,\"ResultSet.getString()\":444,\"String:TABLE_NAME\":223,\"String\":394,\"ResultSet.next()\":1268,\"{String}\":929,\"DBMetaDataTest.assertEquals()\":1237,\"ResultSet.close()\":1289,\"null:null\":634,\"DBMetaDataTest.assertFalse()\":1269,\"String:TABLE\":296},\"rawCode\":\"@Test\\n    public void getTables() throws SQLException {\\n        ResultSet rs \\u003d meta.getTables(null, null, null, null);\\n        assertNotNull(rs);\\n        assertTrue(rs.next());\\n        assertEquals(rs.getString(\\\"TABLE_NAME\\\"), \\\"test\\\"); // 3\\n        assertEquals(rs.getString(\\\"TABLE_TYPE\\\"), \\\"TABLE\\\"); // 4\\n        assertTrue(rs.next());\\n        assertEquals(rs.getString(\\\"TABLE_NAME\\\"), \\\"testView\\\");\\n        assertEquals(rs.getString(\\\"TABLE_TYPE\\\"), \\\"VIEW\\\");\\n        rs.close();\\n\\n        rs \\u003d meta.getTables(null, null, \\\"bob\\\", null);\\n        assertFalse(rs.next());\\n        rs.close();\\n        rs \\u003d meta.getTables(null, null, \\\"test\\\", null);\\n        assertTrue(rs.next());\\n        assertFalse(rs.next());\\n        rs.close();\\n        rs \\u003d meta.getTables(null, null, \\\"test%\\\", null);\\n        assertTrue(rs.next());\\n        assertTrue(rs.next());\\n        rs.close();\\n\\n        rs \\u003d meta.getTables(null, null, null, new String[] { \\\"table\\\" });\\n        assertTrue(rs.next());\\n        assertEquals(rs.getString(\\\"TABLE_NAME\\\"), \\\"test\\\");\\n        assertFalse(rs.next());\\n        rs.close();\\n\\n        rs \\u003d meta.getTables(null, null, null, new String[] { \\\"view\\\" });\\n        assertTrue(rs.next());\\n        assertEquals(rs.getString(\\\"TABLE_NAME\\\"), \\\"testView\\\");\\n        assertFalse(rs.next());\\n        rs.close();\\n    }\"}","190":"{\"expressionStart\":{\"Statement.executeUpdate()\":83,\"DBMetaDataTest.assertNotNull()\":2277,\"String:PKCOLUMN_NAME\":742,\"String:PKTABLE_NAME\":673,\"String:FK_NAME\":864,\"DBMetaDataTest.assertTrue()\":586,\"ResultSet.getString()\":1259,\"String\":203,\"ResultSet.next()\":1516,\"String:FKCOLUMN_NAME\":1000,\"DBMetaDataTest.assertEquals()\":2207,\"String:parent\":640,\"DatabaseMetaData.getImportedKeys()\":499,\"ResultSet.close()\":2579,\"null:null\":526,\"DBMetaDataTest.assertFalse()\":1504,\"String:PK_NAME\":806,\"String:FKTABLE_NAME\":931},\"expressionEnd\":{\"Statement.executeUpdate()\":174,\"DBMetaDataTest.assertNotNull()\":2325,\"String:PKCOLUMN_NAME\":757,\"String:PKTABLE_NAME\":687,\"String:FK_NAME\":873,\"DBMetaDataTest.assertTrue()\":617,\"ResultSet.getString()\":1292,\"String\":333,\"ResultSet.next()\":1535,\"String:FKCOLUMN_NAME\":1015,\"DBMetaDataTest.assertEquals()\":2267,\"String:parent\":648,\"DatabaseMetaData.getImportedKeys()\":541,\"ResultSet.close()\":2599,\"null:null\":530,\"DBMetaDataTest.assertFalse()\":1536,\"String:PK_NAME\":815,\"String:FKTABLE_NAME\":945},\"rawCode\":\"@Test\\n    public void numberOfgetImportedKeysCols() throws SQLException {\\n\\n        stat.executeUpdate(\\\"create table parent (id1 integer, id2 integer, primary key(id1, id2))\\\");\\n        stat.executeUpdate(\\\"create table child1 (id1 integer, id2 integer, foreign key(id1) references parent(id1), foreign key(id2) references parent(id2))\\\");\\n        stat.executeUpdate(\\\"create table child2 (id1 integer, id2 integer, foreign key(id2, id1) references parent(id2, id1))\\\");\\n\\n        ResultSet importedKeys \\u003d meta.getImportedKeys(null, null, \\\"child1\\\");\\n\\n        //child1: 1st fk (simple)\\n        assertTrue(importedKeys.next());\\n        assertEquals(\\\"parent\\\", importedKeys.getString(\\\"PKTABLE_NAME\\\"));\\n        assertEquals(\\\"id2\\\", importedKeys.getString(\\\"PKCOLUMN_NAME\\\"));\\n        assertNotNull(importedKeys.getString(\\\"PK_NAME\\\"));\\n        assertNotNull(importedKeys.getString(\\\"FK_NAME\\\"));\\n        assertEquals(\\\"child1\\\", importedKeys.getString(\\\"FKTABLE_NAME\\\"));\\n        assertEquals(\\\"id2\\\", importedKeys.getString(\\\"FKCOLUMN_NAME\\\"));\\n\\n        //child1: 2nd fk (simple)\\n        assertTrue(importedKeys.next());\\n        assertEquals(\\\"parent\\\", importedKeys.getString(\\\"PKTABLE_NAME\\\"));\\n        assertEquals(\\\"id1\\\", importedKeys.getString(\\\"PKCOLUMN_NAME\\\"));\\n        assertNotNull(importedKeys.getString(\\\"PK_NAME\\\"));\\n        assertNotNull(importedKeys.getString(\\\"FK_NAME\\\"));\\n        assertEquals(\\\"child1\\\", importedKeys.getString(\\\"FKTABLE_NAME\\\"));\\n        assertEquals(\\\"id1\\\", importedKeys.getString(\\\"FKCOLUMN_NAME\\\"));\\n\\n        assertFalse(importedKeys.next());\\n\\n        importedKeys \\u003d meta.getImportedKeys(null, null, \\\"child2\\\");\\n\\n        //child2: 1st fk (composite)\\n        assertTrue(importedKeys.next());\\n        assertEquals(\\\"parent\\\", importedKeys.getString(\\\"PKTABLE_NAME\\\"));\\n        assertEquals(\\\"id2\\\", importedKeys.getString(\\\"PKCOLUMN_NAME\\\"));\\n        assertNotNull(importedKeys.getString(\\\"PK_NAME\\\"));\\n        assertNotNull(importedKeys.getString(\\\"FK_NAME\\\"));\\n        assertEquals(\\\"child2\\\", importedKeys.getString(\\\"FKTABLE_NAME\\\"));\\n        assertEquals(\\\"id2\\\", importedKeys.getString(\\\"FKCOLUMN_NAME\\\"));\\n\\n        assertTrue(importedKeys.next());\\n        assertEquals(\\\"parent\\\", importedKeys.getString(\\\"PKTABLE_NAME\\\"));\\n        assertEquals(\\\"id1\\\", importedKeys.getString(\\\"PKCOLUMN_NAME\\\"));\\n        assertNotNull(importedKeys.getString(\\\"PK_NAME\\\"));\\n        assertNotNull(importedKeys.getString(\\\"FK_NAME\\\"));\\n        assertEquals(\\\"child2\\\", importedKeys.getString(\\\"FKTABLE_NAME\\\"));\\n        assertEquals(\\\"id1\\\", importedKeys.getString(\\\"FKCOLUMN_NAME\\\"));\\n\\n        assertFalse(importedKeys.next());\\n\\n        importedKeys.close();\\n    }\"}","191":"{\"expressionStart\":{\"String:DATA_TYPE\":414,\"String:test\":108,\"String:%\":1167,\"String:COLUMN_NAME\":246,\"DBMetaDataTest.assertTrue()\":1534,\"ResultSet.getString()\":1578,\"String:0.0\":787,\"String:TABLE_NAME\":188,\"String\":877,\"String:id\":116,\"ResultSet.next()\":552,\"DatabaseMetaData.getColumns()\":2508,\"DBMetaDataTest.assertEquals()\":2237,\"null:null\":863,\"DBMetaDataTest.assertFalse()\":2566,\"String:IS_NULLABLE\":303,\"ResultSet.getInt()\":642},\"expressionEnd\":{\"String:DATA_TYPE\":425,\"String:test\":114,\"String:%\":1170,\"String:COLUMN_NAME\":259,\"DBMetaDataTest.assertTrue()\":1555,\"ResultSet.getString()\":1605,\"String:0.0\":792,\"String:TABLE_NAME\":200,\"String\":881,\"String:id\":120,\"ResultSet.next()\":561,\"DatabaseMetaData.getColumns()\":2556,\"DBMetaDataTest.assertEquals()\":2284,\"null:null\":867,\"DBMetaDataTest.assertFalse()\":2588,\"String:IS_NULLABLE\":316,\"ResultSet.getInt()\":664},\"rawCode\":\"@Test\\n    public void getColumns() throws SQLException {\\n        ResultSet rs \\u003d meta.getColumns(null, null, \\\"test\\\", \\\"id\\\");\\n        assertTrue(rs.next());\\n        assertEquals(rs.getString(\\\"TABLE_NAME\\\"), \\\"test\\\");\\n        assertEquals(rs.getString(\\\"COLUMN_NAME\\\"), \\\"id\\\");\\n        assertEquals(rs.getString(\\\"IS_NULLABLE\\\"), \\\"YES\\\");\\n        assertEquals(rs.getString(\\\"COLUMN_DEF\\\"), null);\\n        assertEquals(rs.getInt(\\\"DATA_TYPE\\\"), Types.INTEGER);\\n        assertFalse(rs.next());\\n\\n        rs \\u003d meta.getColumns(null, null, \\\"test\\\", \\\"fn\\\");\\n        assertTrue(rs.next());\\n        assertEquals(rs.getString(\\\"COLUMN_NAME\\\"), \\\"fn\\\");\\n        assertEquals(rs.getInt(\\\"DATA_TYPE\\\"), Types.FLOAT);\\n        assertEquals(rs.getString(\\\"IS_NULLABLE\\\"), \\\"YES\\\");\\n        assertEquals(rs.getString(\\\"COLUMN_DEF\\\"), \\\"0.0\\\");\\n        assertFalse(rs.next());\\n\\n        rs \\u003d meta.getColumns(null, null, \\\"test\\\", \\\"sn\\\");\\n        assertTrue(rs.next());\\n        assertEquals(rs.getString(\\\"COLUMN_NAME\\\"), \\\"sn\\\");\\n        assertEquals(rs.getString(\\\"IS_NULLABLE\\\"), \\\"NO\\\");\\n        assertEquals(rs.getString(\\\"COLUMN_DEF\\\"), null);\\n        assertFalse(rs.next());\\n\\n        rs \\u003d meta.getColumns(null, null, \\\"test\\\", \\\"%\\\");\\n        assertTrue(rs.next());\\n        assertEquals(rs.getString(\\\"COLUMN_NAME\\\"), \\\"id\\\");\\n        assertTrue(rs.next());\\n        assertEquals(rs.getString(\\\"COLUMN_NAME\\\"), \\\"fn\\\");\\n        assertTrue(rs.next());\\n        assertEquals(rs.getString(\\\"COLUMN_NAME\\\"), \\\"sn\\\");\\n        assertFalse(rs.next());\\n\\n        rs \\u003d meta.getColumns(null, null, \\\"test\\\", \\\"%n\\\");\\n        assertTrue(rs.next());\\n        assertEquals(rs.getString(\\\"COLUMN_NAME\\\"), \\\"fn\\\");\\n        assertTrue(rs.next());\\n        assertEquals(rs.getString(\\\"COLUMN_NAME\\\"), \\\"sn\\\");\\n        assertFalse(rs.next());\\n\\n        rs \\u003d meta.getColumns(null, null, \\\"test%\\\", \\\"%\\\");\\n        assertTrue(rs.next());\\n        assertEquals(rs.getString(\\\"COLUMN_NAME\\\"), \\\"id\\\");\\n        assertTrue(rs.next());\\n        assertEquals(rs.getString(\\\"COLUMN_NAME\\\"), \\\"fn\\\");\\n        assertTrue(rs.next());\\n        assertEquals(rs.getString(\\\"COLUMN_NAME\\\"), \\\"sn\\\");\\n        assertFalse(rs.next());\\n\\n        rs \\u003d meta.getColumns(null, null, \\\"%\\\", \\\"%\\\");\\n        assertTrue(rs.next());\\n        assertEquals(rs.getString(\\\"TABLE_NAME\\\"), \\\"test\\\");\\n        assertEquals(rs.getString(\\\"COLUMN_NAME\\\"), \\\"id\\\");\\n        assertTrue(rs.next());\\n        assertEquals(rs.getString(\\\"COLUMN_NAME\\\"), \\\"fn\\\");\\n        assertTrue(rs.next());\\n        assertEquals(rs.getString(\\\"COLUMN_NAME\\\"), \\\"sn\\\");\\n        assertFalse(rs.next());\\n\\n        rs \\u003d meta.getColumns(null, null, \\\"doesnotexist\\\", \\\"%\\\");\\n        assertFalse(rs.next());\\n    }\"}","192":"{\"expressionStart\":{\"Statement.executeUpdate()\":84,\"String:PKTABLE_SCHEM\":507,\"DBMetaDataTest.assertNotNull()\":805,\"String:PKCOLUMN_NAME\":720,\"String:PKTABLE_NAME\":652,\"String:FK_NAME\":842,\"DBMetaDataTest.assertTrue()\":1104,\"String:default\":307,\"ResultSet.getString()\":484,\"String\":103,\"String:id\":691,\"ResultSet.next()\":1116,\"String:FKCOLUMN_NAME\":979,\"DBMetaDataTest.assertEquals()\":461,\"DatabaseMetaData.getImportedKeys()\":286,\"ResultSet.close()\":1146,\"null:null\":1073,\"String:FKTABLE_CAT\":581,\"String:PKTABLE_CAT\":436,\"String:PK_NAME\":784,\"String:FKTABLE_NAME\":910},\"expressionEnd\":{\"Statement.executeUpdate()\":138,\"String:PKTABLE_SCHEM\":522,\"DBMetaDataTest.assertNotNull()\":853,\"String:PKCOLUMN_NAME\":735,\"String:PKTABLE_NAME\":666,\"String:FK_NAME\":851,\"DBMetaDataTest.assertTrue()\":1136,\"String:default\":316,\"ResultSet.getString()\":523,\"String\":137,\"String:id\":695,\"ResultSet.next()\":1135,\"String:FKCOLUMN_NAME\":994,\"DBMetaDataTest.assertEquals()\":524,\"DatabaseMetaData.getImportedKeys()\":338,\"ResultSet.close()\":1166,\"null:null\":1077,\"String:FKTABLE_CAT\":594,\"String:PKTABLE_CAT\":449,\"String:PK_NAME\":793,\"String:FKTABLE_NAME\":924},\"rawCode\":\"@Test\\n    public void columnOrderOfgetImportedKeys() throws SQLException {\\n\\n        stat.executeUpdate(\\\"create table person (id integer)\\\");\\n        stat.executeUpdate(\\\"create table address (pid integer, name, foreign key(pid) references person(id))\\\");\\n\\n        ResultSet importedKeys \\u003d meta.getImportedKeys(\\\"default\\\", \\\"global\\\", \\\"address\\\");\\n        assertTrue(importedKeys.next());\\n        assertEquals(\\\"default\\\", importedKeys.getString(\\\"PKTABLE_CAT\\\"));\\n        assertEquals(\\\"global\\\", importedKeys.getString(\\\"PKTABLE_SCHEM\\\"));\\n        assertEquals(\\\"default\\\", importedKeys.getString(\\\"FKTABLE_CAT\\\"));\\n        assertEquals(\\\"person\\\", importedKeys.getString(\\\"PKTABLE_NAME\\\"));\\n        assertEquals(\\\"id\\\", importedKeys.getString(\\\"PKCOLUMN_NAME\\\"));\\n        assertNotNull(importedKeys.getString(\\\"PK_NAME\\\"));\\n        assertNotNull(importedKeys.getString(\\\"FK_NAME\\\"));\\n        assertEquals(\\\"address\\\", importedKeys.getString(\\\"FKTABLE_NAME\\\"));\\n        assertEquals(\\\"pid\\\", importedKeys.getString(\\\"FKCOLUMN_NAME\\\"));\\n        importedKeys.close();\\n\\n        importedKeys \\u003d meta.getImportedKeys(null, null, \\\"person\\\");\\n        assertTrue(!importedKeys.next());\\n        importedKeys.close();\\n    }\"}","193":"{\"expressionStart\":{\"Fornecedor.setCodigo()\":614,\"String:%\":433,\"ResultSet.getDate()\":904,\"Fornecedor.setCnpj()\":745,\"Fornecedor.setDataFuncacao()\":877,\"Fornecedor.\\u003cinit\\u003e\":580,\"String\":843,\"Fornecedor.setDataCadastro()\":949,\"Fornecedor.setPessoa()\":1021,\"ResultSet.next()\":527,\"Fornecedor.setInscEstadual()\":803,\"Conexao.criarConexao()\":219,\"Conexao.\\u003cinit\\u003e\":219,\"PessoaDAOIMPL.\\u003cinit\\u003e\":173,\"int:1\":430,\"ResultSet.getInt()\":635,\"PreparedStatement.setString()\":415,\"ResultSet.getString()\":830,\"PessoaDAO.buscarPorCodigo()\":1042,\"\\u003creturn\\u003e\":1213,\"ArrayList.\\u003cinit\\u003e\":114,\"List.add()\":1114,\"Fornecedor.setRazaoSocial()\":673,\"Connection.prepareStatement()\":376,\"PreparedStatement.executeQuery()\":486},\"expressionEnd\":{\"Fornecedor.setCodigo()\":655,\"String:%\":436,\"ResultSet.getDate()\":930,\"Fornecedor.setCnpj()\":785,\"Fornecedor.setDataFuncacao()\":931,\"Fornecedor.\\u003cinit\\u003e\":596,\"String\":857,\"Fornecedor.setDataCadastro()\":1003,\"Fornecedor.setPessoa()\":1096,\"ResultSet.next()\":536,\"Fornecedor.setInscEstadual()\":859,\"Conexao.criarConexao()\":247,\"Conexao.\\u003cinit\\u003e\":232,\"PessoaDAOIMPL.\\u003cinit\\u003e\":192,\"int:1\":431,\"ResultSet.getInt()\":654,\"PreparedStatement.setString()\":457,\"ResultSet.getString()\":858,\"PessoaDAO.buscarPorCodigo()\":1095,\"\\u003creturn\\u003e\":1233,\"ArrayList.\\u003cinit\\u003e\":141,\"List.add()\":1142,\"Fornecedor.setRazaoSocial()\":727,\"Connection.prepareStatement()\":401,\"PreparedStatement.executeQuery()\":505},\"rawCode\":\"@Override\\n    public List\\u003cFornecedor\\u003e buscarPorNome(String razaoSocial) {\\n        List\\u003cFornecedor\\u003e fornecedores \\u003d new ArrayList\\u003cFornecedor\\u003e();\\n        PessoaDAO pessoaDao \\u003d new PessoaDAOIMPL();\\n        Connection con \\u003d new Conexao().criarConexao();\\n        String sql \\u003d \\\"select * from fornecedor where razaoSocial like ? \\\";\\n\\n        try {\\n            PreparedStatement stmt \\u003d con.prepareStatement(sql);\\n            stmt.setString(1, \\\"%\\\" + razaoSocial + \\\"%\\\");\\n            ResultSet rs \\u003d stmt.executeQuery();\\n\\n            while (rs.next()) {\\n                Fornecedor fornecedor \\u003d new Fornecedor();\\n                fornecedor.setCodigo(rs.getInt(\\\"codigo\\\"));\\n                fornecedor.setRazaoSocial(rs.getString(\\\"razaoSocial\\\"));\\n                fornecedor.setCnpj(rs.getString(\\\"cnpj\\\"));\\n                fornecedor.setInscEstadual(rs.getString(\\\"inscEstadual\\\"));\\n                fornecedor.setDataFuncacao(rs.getDate(\\\"dataFundacao\\\"));\\n                fornecedor.setDataCadastro(rs.getDate(\\\"dataCadastro\\\"));\\n                fornecedor.setPessoa(pessoaDao.buscarPorCodigo(rs.getInt(\\\"pessoa_codigo\\\")));\\n                fornecedores.add(fornecedor);\\n            }\\n\\n        } catch (SQLException ex) {\\n        }\\n        return fornecedores;\\n    }\"}","194":"{\"expressionStart\":{\"Fornecedor.setCodigo()\":653,\"ResultSet.getDate()\":943,\"Fornecedor.setCnpj()\":784,\"Fornecedor.setDataFuncacao()\":916,\"ResultSet.getString()\":738,\"Fornecedor.\\u003cinit\\u003e\":619,\"String\":816,\"Fornecedor.setDataCadastro()\":988,\"PessoaDAO.buscarPorCodigo()\":1081,\"Fornecedor.setPessoa()\":1060,\"\\u003creturn\\u003e\":1206,\"Fornecedor.setInscEstadual()\":842,\"ResultSet.next()\":577,\"Fornecedor.setRazaoSocial()\":712,\"PreparedStatement.setLong()\":483,\"Conexao.criarConexao()\":175,\"Connection.prepareStatement()\":444,\"PreparedStatement.executeQuery()\":536,\"Conexao.\\u003cinit\\u003e\":175,\"null:null\":93,\"PessoaDAOIMPL.\\u003cinit\\u003e\":129,\"int:1\":496,\"ResultSet.getInt()\":1107},\"expressionEnd\":{\"Fornecedor.setCodigo()\":694,\"ResultSet.getDate()\":969,\"Fornecedor.setCnpj()\":824,\"Fornecedor.setDataFuncacao()\":970,\"ResultSet.getString()\":765,\"Fornecedor.\\u003cinit\\u003e\":635,\"String\":822,\"Fornecedor.setDataCadastro()\":1042,\"PessoaDAO.buscarPorCodigo()\":1134,\"Fornecedor.setPessoa()\":1135,\"\\u003creturn\\u003e\":1224,\"Fornecedor.setInscEstadual()\":898,\"ResultSet.next()\":586,\"Fornecedor.setRazaoSocial()\":766,\"PreparedStatement.setLong()\":506,\"Conexao.criarConexao()\":203,\"Connection.prepareStatement()\":469,\"PreparedStatement.executeQuery()\":555,\"Conexao.\\u003cinit\\u003e\":188,\"null:null\":97,\"PessoaDAOIMPL.\\u003cinit\\u003e\":148,\"int:1\":497,\"ResultSet.getInt()\":1133},\"rawCode\":\"@Override\\n    public Fornecedor buscaPorId(Integer codigo) {\\n        Fornecedor fornecedor \\u003d null;\\n        PessoaDAO pessoaDao \\u003d new PessoaDAOIMPL();\\n        Connection con \\u003d new Conexao().criarConexao();\\n        String sql \\u003d \\\"select codigo, razaoSocial, cnpj, inscEstadual,\\\"\\n                + \\\"dataFundacao, dataCadastro, pessoa_codigo\\\"\\n                + \\\" from fornecedor where codigo \\u003d ?\\\";\\n        try {\\n            PreparedStatement stmt \\u003d con.prepareStatement(sql);\\n            stmt.setLong(1, codigo);\\n\\n            ResultSet rs \\u003d stmt.executeQuery();\\n\\n            while (rs.next()) {\\n                fornecedor \\u003d new Fornecedor();\\n                fornecedor.setCodigo(rs.getInt(\\\"codigo\\\"));\\n                fornecedor.setRazaoSocial(rs.getString(\\\"razaoSocial\\\"));\\n                fornecedor.setCnpj(rs.getString(\\\"cnpj\\\"));\\n                fornecedor.setInscEstadual(rs.getString(\\\"inscEstadual\\\"));\\n                fornecedor.setDataFuncacao(rs.getDate(\\\"dataFundacao\\\"));\\n                fornecedor.setDataCadastro(rs.getDate(\\\"dataCadastro\\\"));\\n                fornecedor.setPessoa(pessoaDao.buscarPorCodigo(rs.getInt(\\\"pessoa_codigo\\\")));\\n            }\\n\\n        } catch (SQLException ex) {\\n        }\\n        return fornecedor;\\n    }\"}","195":"{\"expressionStart\":{\"Fornecedor.setCodigo()\":614,\"ResultSet.getDate()\":976,\"Fornecedor.setCnpj()\":745,\"Fornecedor.setDataFuncacao()\":877,\"ResultSet.getString()\":764,\"Fornecedor.\\u003cinit\\u003e\":580,\"String\":987,\"PessoaDAO.buscarPorCodigo()\":1042,\"Fornecedor.setDataCadastro()\":949,\"\\u003creturn\\u003e\":1214,\"Fornecedor.setPessoa()\":1021,\"Fornecedor.setInscEstadual()\":803,\"ResultSet.next()\":527,\"ArrayList.\\u003cinit\\u003e\":94,\"List.add()\":1115,\"Fornecedor.setRazaoSocial()\":673,\"Conexao.criarConexao()\":200,\"Connection.prepareStatement()\":432,\"PreparedStatement.executeQuery()\":486,\"Conexao.\\u003cinit\\u003e\":200,\"PessoaDAOIMPL.\\u003cinit\\u003e\":153,\"ResultSet.getInt()\":635},\"expressionEnd\":{\"Fornecedor.setCodigo()\":655,\"ResultSet.getDate()\":1002,\"Fornecedor.setCnpj()\":785,\"Fornecedor.setDataFuncacao()\":931,\"ResultSet.getString()\":784,\"Fornecedor.\\u003cinit\\u003e\":596,\"String\":1001,\"PessoaDAO.buscarPorCodigo()\":1095,\"Fornecedor.setDataCadastro()\":1003,\"\\u003creturn\\u003e\":1234,\"Fornecedor.setPessoa()\":1096,\"Fornecedor.setInscEstadual()\":859,\"ResultSet.next()\":536,\"ArrayList.\\u003cinit\\u003e\":121,\"List.add()\":1143,\"Fornecedor.setRazaoSocial()\":727,\"Conexao.criarConexao()\":228,\"Connection.prepareStatement()\":457,\"PreparedStatement.executeQuery()\":505,\"Conexao.\\u003cinit\\u003e\":213,\"PessoaDAOIMPL.\\u003cinit\\u003e\":172,\"ResultSet.getInt()\":654},\"rawCode\":\"@Override\\n    public List\\u003cFornecedor\\u003e buscarTodos() {\\n        List\\u003cFornecedor\\u003e fornecedores \\u003d new ArrayList\\u003cFornecedor\\u003e();\\n        PessoaDAO pessoaDao \\u003d new PessoaDAOIMPL();\\n\\n        Connection con \\u003d new Conexao().criarConexao();\\n        String sql \\u003d \\\"select codigo, razaoSocial, cnpj, inscEstadual,\\\"\\n                + \\\"dataFundacao, dataCadastro, pessoa_codigo from fornecedor\\\";\\n\\n        try {\\n            PreparedStatement stmt \\u003d con.prepareStatement(sql);\\n            ResultSet rs \\u003d stmt.executeQuery();\\n\\n            while (rs.next()) {\\n                Fornecedor fornecedor \\u003d new Fornecedor();\\n                fornecedor.setCodigo(rs.getInt(\\\"codigo\\\"));\\n                fornecedor.setRazaoSocial(rs.getString(\\\"razaoSocial\\\"));\\n                fornecedor.setCnpj(rs.getString(\\\"cnpj\\\"));\\n                fornecedor.setInscEstadual(rs.getString(\\\"inscEstadual\\\"));\\n                fornecedor.setDataFuncacao(rs.getDate(\\\"dataFundacao\\\"));\\n                fornecedor.setDataCadastro(rs.getDate(\\\"dataCadastro\\\"));\\n                fornecedor.setPessoa(pessoaDao.buscarPorCodigo(rs.getInt(\\\"pessoa_codigo\\\")));\\n\\n                fornecedores.add(fornecedor);\\n            }\\n\\n        } catch (SQLException ex) {\\n        }\\n        return fornecedores;\\n    }\"}","196":"{\"expressionStart\":{\"Statement.close()\":322,\"ArrayList.add()\":280,\"ResultSet.getString()\":295,\"SqlDbConnection.getConnection()\":148,\"Connection.createStatement()\":185,\"int:1\":309,\"\\u003creturn\\u003e\":395,\"Statement.executeQuery()\":228,\"ResultSet.next()\":262,\"ArrayList.\\u003cinit\\u003e\":86,\"SQLException.printStackTrace()\":368},\"expressionEnd\":{\"Statement.close()\":334,\"ArrayList.add()\":312,\"ResultSet.getString()\":311,\"SqlDbConnection.getConnection()\":163,\"Connection.createStatement()\":207,\"int:1\":310,\"\\u003creturn\\u003e\":413,\"Statement.executeQuery()\":250,\"ResultSet.next()\":272,\"ArrayList.\\u003cinit\\u003e\":109,\"SQLException.printStackTrace()\":387},\"rawCode\":\"public ArrayList\\u003cString\\u003e getStringList(String sql) {\\n\\t\\tArrayList\\u003cString\\u003e resultlist \\u003d new ArrayList\\u003cString\\u003e();\\n\\t\\tConnection conn;\\n\\t\\ttry {\\n\\t\\t\\tconn \\u003d getConnection();\\n\\t\\t\\tStatement stat \\u003d conn.createStatement();\\n\\t\\t\\tResultSet res \\u003d stat.executeQuery(sql);\\n\\t\\t\\twhile (res.next()) {\\n\\t\\t\\t\\tresultlist.add(res.getString(1));\\n\\t\\t\\t}\\n\\t\\t\\tstat.close();\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\te.printStackTrace();\\n\\t\\t}\\n\\t\\treturn resultlist;\\n\\t}\"}","197":"{\"expressionStart\":{\"ResultSet.getString()\":149,\"TOSubGrupo.\\u003cinit\\u003e\":80,\"String\":130,\"\\u003creturn\\u003e\":73,\"ResultSet.getInt()\":120},\"expressionEnd\":{\"ResultSet.getString()\":173,\"TOSubGrupo.\\u003cinit\\u003e\":196,\"String\":146,\"\\u003creturn\\u003e\":197,\"ResultSet.getInt()\":147},\"rawCode\":\"private TOSubGrupo construir(ResultSet rs) throws SQLException {\\n        return new TOSubGrupo(rs.getInt(\\\"idSubGrupo\\\"), rs.getInt(\\\"codigoSubGrupo\\\"), rs.getString(\\\"subGrupo\\\"), rs.getInt(\\\"idGrupo\\\"));\\n    }\"}","198":"{\"expressionStart\":{\"SelectItem.\\u003cinit\\u003e\":677,\"ResultSet.getString()\":626,\"String\":588,\"Grupo.\\u003cinit\\u003e\":568,\"Grupo.getGrupo()\":386,\"Connection.createStatement()\":441,\"\\u003creturn\\u003e\":795,\"ResultSet.next()\":531,\"DataSource.getConnection()\":168,\"List.add()\":353,\"ArrayList.\\u003cinit\\u003e\":96,\"Connection.close()\":765,\"Statement.executeQuery()\":480,\"int:0\":311,\"ResultSet.getInt()\":578},\"expressionEnd\":{\"SelectItem.\\u003cinit\\u003e\":716,\"ResultSet.getString()\":647,\"String\":597,\"Grupo.\\u003cinit\\u003e\":648,\"Grupo.getGrupo()\":402,\"Connection.createStatement()\":461,\"\\u003creturn\\u003e\":809,\"ResultSet.next()\":540,\"DataSource.getConnection()\":186,\"List.add()\":404,\"ArrayList.\\u003cinit\\u003e\":123,\"Connection.close()\":775,\"Statement.executeQuery()\":510,\"int:0\":312,\"ResultSet.getInt()\":598},\"rawCode\":\"public List\\u003cSelectItem\\u003e obtenerGrupos() throws SQLException {\\n        List\\u003cSelectItem\\u003e grupos \\u003d new ArrayList\\u003cSelectItem\\u003e();\\n        ResultSet rs \\u003d null;\\n\\n        cn \\u003d ds.getConnection();\\n\\n        String strSQL \\u003d \\\"SELECT * FROM productosGrupos ORDER BY grupo\\\";\\n        try {\\n            Grupo grupo \\u003d new Grupo(0, 0, \\\"SELECCIONE UN GRUPO\\\");\\n            grupos.add(new SelectItem(grupo, grupo.getGrupo()));\\n\\n            Statement sentencia \\u003d cn.createStatement();\\n            rs \\u003d sentencia.executeQuery(strSQL);\\n            while (rs.next()) {\\n                grupo \\u003d new Grupo(rs.getInt(\\\"idGrupo\\\"), rs.getInt(\\\"codigoGrupo\\\"), rs.getString(\\\"grupo\\\"));\\n                grupos.add(new SelectItem(grupo, grupo.getGrupo()));\\n            }\\n        } finally {\\n            cn.close();\\n        }\\n        return grupos;\\n    }\"}","199":"{\"expressionStart\":{\"Connection.close()\":536,\"null:null\":104,\"ResultSet.getString()\":441,\"TOSubGrupo.\\u003cinit\\u003e\":372,\"String\":454,\"Connection.createStatement()\":166,\"\\u003creturn\\u003e\":566,\"Statement.executeQuery()\":230,\"ResultSet.next()\":330,\"DataSource.getConnection()\":123,\"ResultSet.getInt()\":387},\"expressionEnd\":{\"Connection.close()\":546,\"null:null\":108,\"ResultSet.getString()\":465,\"TOSubGrupo.\\u003cinit\\u003e\":488,\"String\":464,\"Connection.createStatement()\":186,\"\\u003creturn\\u003e\":584,\"Statement.executeQuery()\":312,\"ResultSet.next()\":339,\"DataSource.getConnection()\":141,\"ResultSet.getInt()\":410},\"rawCode\":\"public TOSubGrupo obtenerSubGrupo(int idSubGrupo) throws SQLException {\\n        TOSubGrupo toSubGrupo \\u003d null;\\n        cn \\u003d ds.getConnection();\\n        Statement st \\u003d cn.createStatement();\\n        try {\\n\\n            ResultSet rs \\u003d st.executeQuery(\\\"SELECT * FROM productosSubGrupos WHERE idSubGrupo\\u003d\\\" + idSubGrupo);\\n            if (rs.next()) {\\n                toSubGrupo \\u003d new TOSubGrupo(rs.getInt(\\\"idSubGrupo\\\"), rs.getInt(\\\"codigoSubGrupo\\\"), rs.getString(\\\"SubGrupo\\\"), rs.getInt(\\\"idGrupo\\\"));\\n            }\\n        } finally {\\n            cn.close();\\n        }\\n        return toSubGrupo;\\n    }\"}","200":"{\"expressionStart\":{\"Connection.close()\":468,\"ResultSet.getString()\":398,\"null:null\":83,\"String\":360,\"Grupo.\\u003cinit\\u003e\":340,\"Connection.createStatement()\":163,\"\\u003creturn\\u003e\":498,\"Statement.executeQuery()\":212,\"ResultSet.next()\":303,\"DataSource.getConnection()\":102,\"ResultSet.getInt()\":350},\"expressionEnd\":{\"Connection.close()\":478,\"ResultSet.getString()\":419,\"null:null\":87,\"String\":369,\"Grupo.\\u003cinit\\u003e\":420,\"Connection.createStatement()\":183,\"\\u003creturn\\u003e\":511,\"Statement.executeQuery()\":285,\"ResultSet.next()\":312,\"DataSource.getConnection()\":120,\"ResultSet.getInt()\":370},\"rawCode\":\"public Grupo obtenerGrupo(int idGrupo) throws SQLException {\\n        Grupo grupo \\u003d null;\\n        cn \\u003d ds.getConnection();\\n        try {\\n            Statement st \\u003d cn.createStatement();\\n            ResultSet rs \\u003d st.executeQuery(\\\"SELECT * FROM productosGrupos WHERE idGrupo\\u003d\\\" + idGrupo);\\n            if (rs.next()) {\\n                grupo \\u003d new Grupo(rs.getInt(\\\"idGrupo\\\"), rs.getInt(\\\"codigoGrupo\\\"), rs.getString(\\\"grupo\\\"));\\n            }\\n        } finally {\\n            cn.close();\\n        }\\n        return grupo;\\n    }\"}","201":"{\"expressionStart\":{\"long:1L\":283,\"Clob.getSubString()\":265,\"int.\\u003ccast\\u003e\":287,\"Clob.length()\":293,\"ResultSetMetaData.getColumnType()\":150,\"ResultSet.getClob()\":215,\"null:null\":135,\"ResultSet.getString()\":380,\"ResultSet.getMetaData()\":103,\"int:1\":173,\"\\u003creturn\\u003e\":413,\"\\u003cnullcheck\\u003e\":237},\"expressionEnd\":{\"long:1L\":285,\"Clob.getSubString()\":307,\"int.\\u003ccast\\u003e\":306,\"Clob.length()\":306,\"ResultSetMetaData.getColumnType()\":175,\"ResultSet.getClob()\":228,\"null:null\":139,\"ResultSet.getString()\":395,\"ResultSet.getMetaData()\":119,\"int:1\":174,\"\\u003creturn\\u003e\":423,\"\\u003cnullcheck\\u003e\":249},\"rawCode\":\"public Object getSource(String id, ResultSet rs) throws SQLException\\n\\t{\\n\\t\\tResultSetMetaData metadata \\u003d rs.getMetaData();\\n\\t\\tString rv \\u003d null;\\n\\t\\tswitch(metadata.getColumnType(1))\\n\\t\\t{\\n\\t\\tcase Types.CLOB:\\n\\t\\t\\tClob clob \\u003d rs.getClob(1); \\n\\t\\t\\tif(clob !\\u003d null)\\n\\t\\t\\t{\\n\\t\\t\\t\\trv \\u003d clob.getSubString(1L, (int) clob.length());\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t\\tcase Types.LONGVARCHAR:\\n\\t\\tcase Types.VARCHAR:\\n\\t\\t\\trv \\u003d rs.getString(1);\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\treturn rv;\\n\\t}\"}","202":"{\"expressionStart\":{\"ResultSet.getString()\":89,\"int:1\":102,\"\\u003creturn\\u003e\":82},\"expressionEnd\":{\"ResultSet.getString()\":104,\"int:1\":103,\"\\u003creturn\\u003e\":105},\"rawCode\":\"public Object getValidateSource(String id, ResultSet rs) throws SQLException\\n\\t{\\n\\t\\treturn rs.getString(1);\\n\\t}\"}","203":"{\"expressionStart\":{\"ArrayList.remove()\":2075,\"ExtractEContentFromMarc.addExternalLink()\":1946,\"PreparedStatement.executeUpdate()\":2372,\"\\u003cr\\u003e\":1830,\"ProcessorResults.addNote()\":1470,\"String\":1486,\"LinkInfo.setLibraryId()\":607,\"IOException.toString()\":1316,\"LinkInfo.getLibraryId()\":1830,\"MarcRecordDetails.getId()\":1528,\"ResultSet.next()\":413,\"String: \":1310,\"LinkInfo.setItemType()\":676,\"LinkInfo.setItemId()\":487,\"DetectionSettings.getAccessType()\":1616,\"int:1\":304,\"int:0\":1462,\"\\u003cnullcheck\\u003e\":2043,\"ArrayList.size()\":1441,\"SQLException.printStackTrace()\":2484,\"DetectionSettings.getSource()\":1562,\"LinkInfo.getItemId()\":2341,\"ProcessorResults.incErrors()\":1212,\"ResultSet.getString()\":566,\"LinkInfo.setLink()\":546,\"LibrarySpecificLink.getLibrarySystemId()\":1860,\"LinkInfo.\\u003cinit\\u003e\":466,\"ResultSet.getLong()\":509,\"\\u003creturn\\u003e\":931,\"String:id\":533,\"ArrayList.\\u003cinit\\u003e\":228,\"PreparedStatement.setLong()\":2311,\"ArrayList.add()\":746,\"MarcRecordDetails.getSourceUrls()\":1150,\"PreparedStatement.executeQuery()\":358,\"null:null\":1772,\"\\u003d\":1897},\"expressionEnd\":{\"ArrayList.remove()\":2108,\"ExtractEContentFromMarc.addExternalLink()\":2033,\"PreparedStatement.executeUpdate()\":2406,\"\\u003cr\\u003e\":1888,\"ProcessorResults.addNote()\":1650,\"String\":1525,\"LinkInfo.setLibraryId()\":669,\"IOException.toString()\":1329,\"LinkInfo.getLibraryId()\":1856,\"MarcRecordDetails.getId()\":1546,\"ResultSet.next()\":435,\"String: \":1313,\"LinkInfo.setItemType()\":739,\"LinkInfo.setItemId()\":539,\"DetectionSettings.getAccessType()\":1649,\"int:1\":305,\"int:0\":1463,\"\\u003cnullcheck\\u003e\":2067,\"ArrayList.size()\":1458,\"SQLException.printStackTrace()\":2503,\"DetectionSettings.getSource()\":1591,\"LinkInfo.getItemId()\":2364,\"ProcessorResults.incErrors()\":1231,\"ResultSet.getString()\":599,\"LinkInfo.setLink()\":600,\"LibrarySpecificLink.getLibrarySystemId()\":1888,\"LinkInfo.\\u003cinit\\u003e\":480,\"ResultSet.getLong()\":538,\"\\u003creturn\\u003e\":938,\"String:id\":537,\"ArrayList.\\u003cinit\\u003e\":253,\"PreparedStatement.setLong()\":2365,\"ArrayList.add()\":771,\"MarcRecordDetails.getSourceUrls()\":1176,\"PreparedStatement.executeQuery()\":400,\"null:null\":1776,\"\\u003d\":1927},\"rawCode\":\"protected synchronized void setupExternalLinks(MarcRecordDetails recordInfo, long eContentRecordId, DetectionSettings detectionSettings, Logger logger) {\\r\\n\\t\\t//Get existing links from the record\\r\\n\\t\\tArrayList\\u003cLinkInfo\\u003e allLinks \\u003d new ArrayList\\u003cLinkInfo\\u003e();\\r\\n\\t\\ttry {\\r\\n\\t\\t\\texistingEContentRecordLinks.setLong(1, eContentRecordId);\\r\\n\\t\\t\\tResultSet allExistingUrls \\u003d existingEContentRecordLinks.executeQuery();\\r\\n\\t\\t\\twhile (allExistingUrls.next()){\\r\\n\\t\\t\\t\\tLinkInfo curLinkInfo \\u003d new LinkInfo();\\r\\n\\t\\t\\t\\tcurLinkInfo.setItemId(allExistingUrls.getLong(\\\"id\\\"));\\r\\n\\t\\t\\t\\tcurLinkInfo.setLink(allExistingUrls.getString(\\\"link\\\"));\\r\\n\\t\\t\\t\\tcurLinkInfo.setLibraryId(allExistingUrls.getLong(\\\"libraryId\\\"));\\r\\n\\t\\t\\t\\tcurLinkInfo.setItemType(allExistingUrls.getString(\\\"item_type\\\"));\\r\\n\\t\\t\\t\\tallLinks.add(curLinkInfo);\\r\\n\\t\\t\\t}\\r\\n\\t\\t} catch (SQLException e) {\\r\\n\\t\\t\\tresults.incErrors();\\r\\n\\t\\t\\tresults.addNote(\\\"Could not load existing links for eContentRecord \\\" + eContentRecordId);\\r\\n\\t\\t\\treturn;\\r\\n\\t\\t}\\r\\n\\t\\t//logger.debug(\\\"Found \\\" + allLinks.size() + \\\" existing links\\\");\\r\\n\\t\\t\\r\\n\\t\\t//Add the links that are currently available for the record\\r\\n\\t\\tArrayList\\u003cLibrarySpecificLink\\u003e sourceUrls;\\r\\n\\t\\ttry {\\r\\n\\t\\t\\tsourceUrls \\u003d recordInfo.getSourceUrls();\\r\\n\\t\\t} catch (IOException e1) {\\r\\n\\t\\t\\tresults.incErrors();\\r\\n\\t\\t\\tresults.addNote(\\\"Could not load source URLs for \\\" + recordInfo.getId() + \\\" \\\" + e1.toString());\\r\\n\\t\\t\\treturn;\\r\\n\\t\\t}\\r\\n\\t\\t//logger.debug(\\\"Found \\\" + sourceUrls.size() + \\\" urls for \\\" + recordInfo.getId());\\r\\n\\t\\tif (sourceUrls.size() \\u003d\\u003d 0){\\r\\n\\t\\t\\tresults.addNote(\\\"Warning, could not find any urls for \\\" + recordInfo.getId() + \\\" source \\\" + detectionSettings.getSource() + \\\" protection type \\\" + detectionSettings.getAccessType());\\r\\n\\t\\t}\\r\\n\\t\\tfor (LibrarySpecificLink curLink : sourceUrls){\\r\\n\\t\\t\\t//Look for an existing link\\r\\n\\t\\t\\tLinkInfo linkForSourceUrl \\u003d null;\\r\\n\\t\\t\\tfor (LinkInfo tmpLinkInfo : allLinks){\\r\\n\\t\\t\\t\\tif (tmpLinkInfo.getLibraryId() \\u003d\\u003d curLink.getLibrarySystemId()){\\r\\n\\t\\t\\t\\t\\tlinkForSourceUrl \\u003d tmpLinkInfo;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\taddExternalLink(linkForSourceUrl, curLink, eContentRecordId, detectionSettings, logger);\\r\\n\\t\\t\\tif (linkForSourceUrl !\\u003d null){\\r\\n\\t\\t\\t\\tallLinks.remove(linkForSourceUrl);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\t\\r\\n\\t\\t//Remove any links that no longer exist\\r\\n\\t\\t//logger.debug(\\\"There are \\\" + allLinks.size() + \\\" links that need to be deleted\\\");\\r\\n\\t\\tfor (LinkInfo tmpLinkInfo : allLinks){\\r\\n\\t\\t\\ttry {\\r\\n\\t\\t\\t\\tdeleteEContentItem.setLong(1, tmpLinkInfo.getItemId());\\r\\n\\t\\t\\t\\tdeleteEContentItem.executeUpdate();\\r\\n\\t\\t\\t} catch (SQLException e) {\\r\\n\\t\\t\\t\\t// TODO Auto-generated catch block\\r\\n\\t\\t\\t\\te.printStackTrace();\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\"}","204":"{\"expressionStart\":{\"String:\":614,\"ResultSet.getMetaData()\":371,\"ResultSet.getString()\":532,\"\\u003cr\\u003e\":480,\"UNKNOWN.equals()\":161,\"\\u003creturn\\u003e\":828,\"ResultSet.next()\":304,\"ResultSetMetaData.getColumnCount()\":430,\"ResultSet.previous()\":680,\"FilterComparison.testFilterComparison()\":737,\"boolean:true\":865,\"DatabaseConnector.getInfoDataType()\":215,\"null:null\":290,\"int:2\":556,\"\\u003d\":602,\"int:1\":498},\"expressionEnd\":{\"String:\":616,\"ResultSet.getMetaData()\":398,\"ResultSet.getString()\":558,\"\\u003cr\\u003e\":499,\"UNKNOWN.equals()\":193,\"\\u003creturn\\u003e\":840,\"ResultSet.next()\":324,\"ResultSetMetaData.getColumnCount()\":457,\"ResultSet.previous()\":704,\"FilterComparison.testFilterComparison()\":800,\"boolean:true\":869,\"DatabaseConnector.getInfoDataType()\":265,\"null:null\":294,\"int:2\":557,\"\\u003d\":616,\"int:1\":499},\"rawCode\":\"private boolean filterOnInfoTable(String infoName, ResultSet entryInfoData) throws Exception {\\n\\n\\t\\tfor( FilterParameter param : this.entryParameters )\\n\\t\\t{\\n\\t\\t\\tif (param.tableName.equals(infoName))\\n\\t\\t\\t{\\n\\t\\t\\t\\tint type \\u003d this.nestedConnection2.getInfoDataType( infoName );\\n\\t\\t\\t\\tString testValue \\u003d null;\\n\\t\\t\\t\\tif (entryInfoData.next())\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t    ResultSetMetaData rsMetaData \\u003d entryInfoData.getMetaData();\\n\\t\\t\\t\\t    int numberOfColumns \\u003d rsMetaData.getColumnCount();\\n\\t\\t\\t    \\t\\n\\t\\t\\t\\t    if (numberOfColumns \\u003e 1)\\n\\t\\t\\t\\t    {\\n\\t\\t\\t\\t    \\ttestValue \\u003d entryInfoData.getString(2);\\n\\t\\t\\t\\t    }\\n\\t\\t\\t\\t    else\\n\\t\\t\\t\\t    {\\n\\t\\t\\t\\t    \\ttestValue \\u003d \\\"\\\";\\n\\t\\t\\t\\t    }\\n\\t\\t\\t\\t\\t//move cursor to the first for later uses\\n\\t\\t\\t\\t\\tentryInfoData.previous();\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tboolean pass \\u003d comparisonHandler.testFilterComparison(type, param, testValue );\\n\\t\\t\\t\\tif (!pass)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\treturn pass;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn true;\\n\\t}\"}","205":"{\"expressionStart\":{\"DatabaseConnector.getIndividualDatum()\":689,\"FilterApplier.filterOnGenotype()\":796,\"\\u003cr\\u003e\":1396,\"ResultSet.getString()\":221,\"ResultSet.getLong()\":505,\"FilterApplier.processUntestedIndividual()\":1223,\"String\":239,\"\\u003creturn\\u003e\":1554,\"ArrayList.get()\":642,\"ResultSet.next()\":437,\"FilterApplier.processPassingIndividual()\":1008,\"ArrayList.\\u003cinit\\u003e\":282,\"boolean:true\":126,\"String.split()\":325,\"Arrays.asList()\":310,\"DatabaseConnector.getIndividuals()\":379,\"ResultSet.close()\":952,\"\\u003ca\\u003e\":610,\"FilterApplier.processFailingIndividual()\":1263,\"\\u003cbreak\\u003e\":1303,\"FilterApplier.processUntestedIndividualData()\":892,\"int:0\":150,\"ArrayList.size()\":592},\"expressionEnd\":{\"DatabaseConnector.getIndividualDatum()\":749,\"FilterApplier.filterOnGenotype()\":837,\"\\u003cr\\u003e\":1425,\"ResultSet.getString()\":248,\"ResultSet.getLong()\":533,\"FilterApplier.processUntestedIndividual()\":1255,\"String\":247,\"\\u003creturn\\u003e\":1571,\"ArrayList.get()\":658,\"ResultSet.next()\":455,\"FilterApplier.processPassingIndividual()\":1034,\"ArrayList.\\u003cinit\\u003e\":348,\"boolean:true\":130,\"String.split()\":345,\"Arrays.asList()\":347,\"DatabaseConnector.getIndividuals()\":426,\"ResultSet.close()\":972,\"\\u003ca\\u003e\":613,\"FilterApplier.processFailingIndividual()\":1289,\"\\u003cbreak\\u003e\":1309,\"FilterApplier.processUntestedIndividualData()\":946,\"int:0\":151,\"ArrayList.size()\":608},\"rawCode\":\"private boolean testIndividual( ResultSet entries, long entryId)\\n\\t\\t\\tthrows SQLException, Exception {\\n\\t\\t\\n\\t\\tboolean entryPass \\u003d true;\\n\\t\\tint failCount \\u003d 0;\\n\\t\\tint passCount \\u003d 0;\\n\\t\\t\\t\\t\\n\\t\\t//individual level\\n\\t\\tString indFormat \\u003d entries.getString(\\\"Format\\\");\\n\\t\\tArrayList\\u003cString\\u003e genotypes \\u003d new ArrayList\\u003cString\\u003e( \\n\\t\\t\\t\\tArrays.asList( indFormat.split(\\\":\\\") ));\\n\\t\\t\\n\\t\\tResultSet individuals \\u003d this.nestedConnection.getIndividuals( entryId );\\n\\t\\twhile (individuals.next() )\\n\\t\\t{\\n\\t\\t\\tboolean passing \\u003d true;\\n\\t\\t\\tlong indId \\u003d individuals.getLong(\\\"IndID\\\");\\n\\t\\t\\tprocessUntestedIndividual(indId);\\n\\t\\t\\tfor (int k\\u003d0; k\\u003c genotypes.size(); k++)\\n\\t\\t\\t{\\n\\t\\t\\t\\tString genoName \\u003d genotypes.get(k);\\n\\t\\t\\t\\tResultSet genotypeData \\u003d this.nestedConnection2.getIndividualDatum( indId, genoName );\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t//test genotype level\\n\\t\\t\\t\\tpassing \\u003d filterOnGenotype( genoName, genotypeData);\\n\\t\\t\\t\\tif ( !passing )\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tprocessUntestedIndividualData( genoName, genotypeData);\\n\\t\\t\\t\\tgenotypeData.close();\\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t\\tif (passing)\\n\\t\\t\\t{\\n\\t\\t\\t\\tprocessPassingIndividual();\\n\\t\\t\\t\\tpassCount++;\\n\\t\\t\\t\\tif (passCount \\u003d\\u003d this.passExactly)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t//fail remaining without test\\n\\t\\t\\t\\t\\twhile (individuals.next() )\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tindId \\u003d individuals.getLong(\\\"IndID\\\");\\n\\t\\t\\t\\t\\t\\tprocessUntestedIndividual(indId);\\n\\t\\t\\t\\t\\t\\tprocessFailingIndividual();\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t}\\n\\t\\t\\telse\\n\\t\\t\\t{\\n\\t\\t\\t\\tprocessFailingIndividual();\\n\\t\\t\\t\\tfailCount++;\\n\\t\\t\\t\\tif (failCount \\u003e this.failureAllow )\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t//individuals failed too many times\\n\\t\\t\\t\\t\\tentryPass \\u003d false;\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t\\n\\t\\tindividuals.close();\\n\\t\\treturn entryPass;\\n\\t}\"}","206":"{\"expressionStart\":{\"String.equals()\":565,\"String:\":170,\"\\u003cr\\u003e\":212,\"ResultSet.getString()\":452,\"String\":669,\"\\u003creturn\\u003e\":771,\"ArrayList.\\u003cinit\\u003e\":127,\"int:6\":193,\"String:1\":642,\"ArrayList.add()\":744,\"ResultSet.wasNull()\":486,\"\\u003ca\\u003e\":196,\"int:2\":187,\"\\u003cbreak\\u003e\":539,\"String:.\":343,\"\\u003d\":725,\"String:/\":605,\"int:0\":219,\"String:0\":578},\"expressionEnd\":{\"String.equals()\":582,\"String:\":172,\"\\u003cr\\u003e\":220,\"ResultSet.getString()\":476,\"String\":672,\"\\u003creturn\\u003e\":790,\"ArrayList.\\u003cinit\\u003e\":150,\"int:6\":194,\"String:1\":645,\"ArrayList.add()\":767,\"ResultSet.wasNull()\":507,\"\\u003ca\\u003e\":199,\"int:2\":188,\"\\u003cbreak\\u003e\":545,\"String:.\":346,\"\\u003d\":736,\"String:/\":608,\"int:0\":220,\"String:0\":581},\"rawCode\":\"private ArrayList\\u003cString\\u003e getAllGenoTypeDataGT(ResultSet indGenoData) throws SQLException\\n\\t{\\n\\t\\tArrayList\\u003cString\\u003e gtDataArray \\u003d new ArrayList\\u003cString\\u003e();\\n\\t\\tString gtData \\u003d \\\"\\\";\\n\\t\\tfor( int i\\u003d2; i\\u003c\\u003d6; i++)\\n\\t\\t{\\n\\t\\t\\tif (i%2 \\u003d\\u003d 0)\\n\\t\\t\\t{\\n\\t\\t\\t\\t//allele data\\n\\t\\t\\t\\tString allele \\u003d indGenoData.getString(i);\\n\\t\\t\\t\\tif (indGenoData.wasNull())\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tgtData +\\u003d \\\".\\\";\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tgtData +\\u003d allele;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\telse\\n\\t\\t\\t{\\n\\t\\t\\t\\t//phase data\\n\\t\\t\\t\\tString phase \\u003d indGenoData.getString(i);\\n\\t\\t\\t\\tif (indGenoData.wasNull())\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t//end of data\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse if (phase.equals(\\\"0\\\"))\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tgtData +\\u003d \\\"/\\\";\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse if (phase.equals(\\\"1\\\"))\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tgtData +\\u003d \\\"|\\\";\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t\\n\\t\\tif (gtData.equals(\\\".\\\"))\\n\\t\\t{\\n\\t\\t\\tgtData \\u003d \\\"\\\";\\n\\t\\t}\\n\\t\\tgtDataArray.add(gtData);\\n\\t\\treturn gtDataArray;\\t\\t\\n\\t}\"}","207":"{\"expressionStart\":{\"FilterComparison.testFilterComparison()\":470,\"boolean:true\":598,\"UNKNOWN.contains()\":184,\"DatabaseConnector.getInfoDataType()\":266,\"ResultSet.getString()\":400,\"\\u003creturn\\u003e\":591},\"expressionEnd\":{\"FilterComparison.testFilterComparison()\":533,\"boolean:true\":602,\"UNKNOWN.contains()\":243,\"DatabaseConnector.getInfoDataType()\":323,\"ResultSet.getString()\":436,\"\\u003creturn\\u003e\":603},\"rawCode\":\"private boolean filterOnEntryData(ResultSet entryData) throws Exception {\\n\\n\\t\\tfor( FilterParameter param : this.entryParameters )\\n\\t\\t{\\n\\t\\t\\t//test if filter is on fixed entry data\\n\\t\\t\\tif ( DatabaseConnector.EntryFixedInfo.contains( param.tableName) )\\n\\t\\t\\t{\\n\\t\\t\\t\\tint type \\u003d this.nestedConnection2.getInfoDataType( param.tableName );\\n\\t\\t\\t\\tString testValue \\u003d null;\\n\\t\\t\\t\\t//no need to check next()\\n\\t\\t\\t\\ttestValue \\u003d entryData.getString(param.tableName);\\t\\t\\t\\t    \\n\\t\\t\\t\\t\\n\\t\\t\\t\\tboolean pass \\u003d comparisonHandler.testFilterComparison(type, param, testValue );\\n\\t\\t\\t\\tif (!pass)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\treturn pass;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn true;\\n\\t}\"}","208":"{\"expressionStart\":{\"String.equals()\":114,\"String:\":588,\"ResultSet.getString()\":481,\"\\u003cr\\u003e\":427,\"ResultSet.getMetaData()\":282,\"String\":130,\"\\u003creturn\\u003e\":144,\"FilterApplier.getAllGenoTypeDataGT()\":151,\"ArrayList.\\u003cinit\\u003e\":221,\"ResultSetMetaData.getColumnCount()\":336,\"ArrayList.add()\":467,\"\\u003ca\\u003e\":447,\"int:2\":424,\"int:1\":398},\"expressionEnd\":{\"String.equals()\":135,\"String:\":590,\"ResultSet.getString()\":505,\"\\u003cr\\u003e\":445,\"ResultSet.getMetaData()\":307,\"String\":134,\"\\u003creturn\\u003e\":185,\"FilterApplier.getAllGenoTypeDataGT()\":184,\"ArrayList.\\u003cinit\\u003e\":244,\"ResultSetMetaData.getColumnCount()\":363,\"ArrayList.add()\":507,\"\\u003ca\\u003e\":450,\"int:2\":425,\"int:1\":399},\"rawCode\":\"private ArrayList\\u003cString\\u003e getAllGenotypeData(String genoName, ResultSet indGenoData) throws SQLException\\n\\t{\\n\\t\\tif (genoName.equals(\\\"GT\\\"))\\n\\t\\t{\\n\\t\\t\\treturn getAllGenoTypeDataGT(indGenoData);\\n\\t\\t}\\n\\t\\tArrayList\\u003cString\\u003e genoData \\u003d new ArrayList\\u003cString\\u003e();\\n\\t    ResultSetMetaData rsMetaData \\u003d indGenoData.getMetaData();\\n\\t    int numberOfColumns \\u003d rsMetaData.getColumnCount();\\n    \\t\\n\\t    if (numberOfColumns \\u003e 1)\\n\\t    {\\n\\t    \\tfor(int i\\u003d2; i\\u003c\\u003dnumberOfColumns; i++)\\n\\t    \\t{\\n\\t    \\t\\tgenoData.add( indGenoData.getString(i) );\\n\\t    \\t}\\n\\t    }\\n\\t    else\\n\\t    {\\n\\t    \\t//exists and not null\\n\\t    \\tgenoData.add(\\\"\\\");\\n\\t    }\\n\\t    \\n\\t    return genoData;\\n\\t}\"}","209":"{\"expressionStart\":{\"\\u003cthrow\\u003e\":1482,\"ResultSet.getDate()\":899,\"ProjectStatus.fromString()\":1130,\"String\":1260,\"Project.setDescription()\":1053,\"Connection.createStatement()\":563,\"ResultSet.next()\":661,\"Project.setStatus()\":1112,\"Project.\\u003cinit\\u003e\":700,\"Project.setCompletionDate()\":942,\"Project.setCreationDate()\":810,\"DBConnectionException.getMessage()\":1462,\"Project.setProjectName()\":758,\"Statement.executeQuery()\":617,\"Project.setEstimatedCompletionDate()\":864,\"ResultSet.getString()\":1020,\"ResultSet.getLong()\":733,\"Project.setCustomer()\":1000,\"\\u003creturn\\u003e\":1558,\"Logger.error()\":1427,\"ArrayList.\\u003cinit\\u003e\":461,\"List.add()\":1188,\"DAOReadException.\\u003cinit\\u003e\":1488,\"Project.setId()\":719,\"DefaultProjectDAO.getConnection()\":519,\"SQLException.getMessage()\":1369},\"expressionEnd\":{\"\\u003cthrow\\u003e\":1550,\"ResultSet.getDate()\":935,\"ProjectStatus.fromString()\":1180,\"String\":1295,\"Project.setDescription()\":1106,\"Connection.createStatement()\":591,\"ResultSet.next()\":674,\"Project.setStatus()\":1181,\"Project.\\u003cinit\\u003e\":713,\"Project.setCompletionDate()\":994,\"Project.setCreationDate()\":858,\"DBConnectionException.getMessage()\":1476,\"Project.setProjectName()\":804,\"Statement.executeQuery()\":646,\"Project.setEstimatedCompletionDate()\":936,\"ResultSet.getString()\":1046,\"ResultSet.getLong()\":751,\"Project.setCustomer()\":1047,\"\\u003creturn\\u003e\":1574,\"Logger.error()\":1477,\"ArrayList.\\u003cinit\\u003e\":485,\"List.add()\":1209,\"DAOReadException.\\u003cinit\\u003e\":1549,\"Project.setId()\":752,\"DefaultProjectDAO.getConnection()\":534,\"SQLException.getMessage()\":1383},\"rawCode\":\"/**\\n\\t * Method for getting all project from DB who match the query\\n\\t * @see com.epam.lab.intouch.dao.BaseDAO#getAll()\\n\\t * @param query This is query to DB\\n\\t * @return List\\u003cProject\\u003e \\n\\t * @throws DAOReadException\\n\\t * @exception SQLException if problem in SQL query or other\\n\\t * @exception DBConnectionException if problem with connection\\n\\t */\\n\\t@Override\\n\\tpublic List\\u003cProject\\u003e getAllFromSearch(String query) throws DAOReadException {\\n\\t\\t\\n\\t\\tList\\u003cProject\\u003e projects \\u003d new ArrayList\\u003cProject\\u003e();\\n\\n\\t\\ttry (Connection connection \\u003d getConnection(); \\n\\t\\t\\t\\tStatement statement \\u003d connection.createStatement(); \\n\\t\\t\\t\\tResultSet result \\u003d statement.executeQuery(query)) {\\n\\n\\t\\t\\twhile (result.next()) {\\n\\t\\t\\t\\tProject project \\u003d new Project();\\n\\t\\t\\t\\tproject.setId(result.getLong(ID));\\n\\t\\t\\t\\tproject.setProjectName(result.getString(NAME));\\n\\t\\t\\t\\tproject.setCreationDate(result.getDate(CREATED));\\n\\t\\t\\t\\tproject.setEstimatedCompletionDate(result.getDate(ESTIMATED_COMPLETION));\\n\\t\\t\\t\\tproject.setCompletionDate(result.getDate(COMPLETED));\\n\\t\\t\\t\\tproject.setCustomer(result.getString(CUSTOMER));\\n\\t\\t\\t\\tproject.setDescription(result.getString(DESCRIPTION));\\n\\t\\t\\t\\tproject.setStatus(ProjectStatus.fromString(result.getString(STATUS)));\\n\\n\\t\\t\\t\\tprojects.add(project);\\n\\n\\t\\t\\t}\\n\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tLOG.error(\\\"Problem with getting all Projects\\\", e);\\n\\t\\t\\tthrow new DAOReadException(\\\"Problem with getting all Projects\\\" + e.getMessage());\\n\\t\\t} catch (DBConnectionException e) {\\n\\t\\t\\tLOG.error(\\\"Connection exception\\\" + e.getMessage());\\n\\t\\t\\tthrow new DAOReadException(\\\"Connection exception\\\" + e.getMessage());\\n\\t\\t}\\n\\n\\t\\treturn projects;\\n\\t}\"}","210":"{\"expressionStart\":{\"\\u003cthrow\\u003e\":1343,\"ResultSet.getDate()\":873,\"ProjectStatus.fromString()\":1169,\"String\":1476,\"Connection.createStatement()\":588,\"UNKNOWN.append()\":405,\"StringBuilder.append()\":405,\"Project.setDescription()\":1092,\"ResultSet.next()\":700,\"Project.setStatus()\":1151,\"Project.\\u003cinit\\u003e\":739,\"String:SELECT * FROM \":421,\"Project.setCompletionDate()\":981,\"DBConnectionException.getMessage()\":1501,\"Project.setCreationDate()\":849,\"Project.setProjectName()\":797,\"Statement.executeQuery()\":642,\"StringBuilder.toString()\":665,\"Project.setEstimatedCompletionDate()\":903,\"ResultSet.getString()\":1194,\"StringBuilder.\\u003cinit\\u003e\":382,\"ResultSet.getLong()\":772,\"Project.setCustomer()\":1039,\"Logger.error()\":1466,\"\\u003creturn\\u003e\":1597,\"ArrayList.\\u003cinit\\u003e\":486,\"List.add()\":1227,\"DAOReadException.\\u003cinit\\u003e\":1349,\"Project.setId()\":758,\"DefaultProjectDAO.getConnection()\":544,\"SQLException.getMessage()\":1408},\"expressionEnd\":{\"\\u003cthrow\\u003e\":1424,\"ResultSet.getDate()\":896,\"ProjectStatus.fromString()\":1219,\"String\":1498,\"Connection.createStatement()\":616,\"UNKNOWN.append()\":454,\"StringBuilder.append()\":438,\"Project.setDescription()\":1145,\"ResultSet.next()\":713,\"Project.setStatus()\":1220,\"Project.\\u003cinit\\u003e\":752,\"String:SELECT * FROM \":437,\"Project.setCompletionDate()\":1033,\"DBConnectionException.getMessage()\":1515,\"Project.setCreationDate()\":897,\"Project.setProjectName()\":843,\"Statement.executeQuery()\":685,\"StringBuilder.toString()\":684,\"Project.setEstimatedCompletionDate()\":975,\"ResultSet.getString()\":1218,\"StringBuilder.\\u003cinit\\u003e\":401,\"ResultSet.getLong()\":790,\"Project.setCustomer()\":1086,\"Logger.error()\":1516,\"\\u003creturn\\u003e\":1613,\"ArrayList.\\u003cinit\\u003e\":510,\"List.add()\":1248,\"DAOReadException.\\u003cinit\\u003e\":1423,\"Project.setId()\":791,\"DefaultProjectDAO.getConnection()\":559,\"SQLException.getMessage()\":1422},\"rawCode\":\"/**\\n\\t * Method for getting all project from DB \\n\\t * @see com.epam.lab.intouch.dao.BaseDAO#getAll()\\n\\t * @return List\\u003cProject\\u003e  \\n\\t * @exception SQLException if problem in SQL query or other\\n\\t * @exception DBConnectionException if problem with connection\\n\\t * @throws DAOReadException\\n\\t */\\n\\t@Override\\n\\tpublic List\\u003cProject\\u003e getAll() throws DAOReadException {\\n\\n\\t\\tStringBuilder queryAll \\u003d new StringBuilder();\\n\\t\\tqueryAll.append(\\\"SELECT * FROM \\\").append(PROJECT);\\n\\t\\t\\n\\t\\tList\\u003cProject\\u003e projects \\u003d new ArrayList\\u003cProject\\u003e();\\n\\n\\t\\ttry (Connection connection \\u003d getConnection(); \\n\\t\\t\\t\\tStatement statement \\u003d connection.createStatement(); \\n\\t\\t\\t\\tResultSet result \\u003d statement.executeQuery(queryAll.toString())) {\\n\\n\\t\\t\\twhile (result.next()) {\\n\\t\\t\\t\\tProject project \\u003d new Project();\\n\\t\\t\\t\\tproject.setId(result.getLong(ID));\\n\\t\\t\\t\\tproject.setProjectName(result.getString(NAME));\\n\\t\\t\\t\\tproject.setCreationDate(result.getDate(CREATED));\\n\\t\\t\\t\\tproject.setEstimatedCompletionDate(result.getDate(ESTIMATED_COMPLETION));\\n\\t\\t\\t\\tproject.setCompletionDate(result.getDate(COMPLETED));\\n\\t\\t\\t\\tproject.setCustomer(result.getString(CUSTOMER));\\n\\t\\t\\t\\tproject.setDescription(result.getString(DESCRIPTION));\\n\\t\\t\\t\\tproject.setStatus(ProjectStatus.fromString(result.getString(STATUS)));\\n\\n\\t\\t\\t\\tprojects.add(project);\\n\\n\\t\\t\\t}\\n\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tLOG.error(\\\"Problem with getting all Projects\\\", e);\\n\\t\\t\\tthrow new DAOReadException(\\\"Problem with getting all Projects\\\" + e.getMessage());\\n\\t\\t} catch (DBConnectionException e) {\\n\\t\\t\\tLOG.error(\\\"Connection exception\\\" + e.getMessage());\\n\\t\\t\\tthrow new DAOReadException(\\\"Connection exception\\\" + e.getMessage());\\n\\t\\t}\\n\\n\\t\\treturn projects;\\n\\t}\"}","211":"{\"expressionStart\":{\"\\u003cthrow\\u003e\":1556,\"ResultSet.getDate()\":1014,\"ProjectStatus.fromString()\":1245,\"String\":1511,\"UNKNOWN.append()\":436,\"StringBuilder.append()\":436,\"Project.setDescription()\":1168,\"ResultSet.next()\":784,\"Project.setStatus()\":1227,\"String: WHERE \":494,\"Project.\\u003cinit\\u003e\":815,\"String:SELECT * FROM \":453,\"Project.setCompletionDate()\":1057,\"DBConnectionException.getMessage()\":1536,\"Project.setCreationDate()\":925,\"Project.setProjectName()\":873,\"int:1\":718,\"StringBuilder.toString()\":669,\"Project.setEstimatedCompletionDate()\":979,\"ResultSet.getString()\":1135,\"StringBuilder.\\u003cinit\\u003e\":413,\"ResultSet.getLong()\":848,\"Project.setCustomer()\":1115,\"Logger.error()\":1337,\"\\u003creturn\\u003e\":1632,\"DAOReadException.\\u003cinit\\u003e\":1397,\"Project.setId()\":834,\"PreparedStatement.setLong()\":700,\"DefaultProjectDAO.getConnection()\":590,\"Connection.prepareStatement()\":641,\"PreparedStatement.executeQuery()\":748,\"null:null\":553},\"expressionEnd\":{\"\\u003cthrow\\u003e\":1624,\"ResultSet.getDate()\":1050,\"ProjectStatus.fromString()\":1295,\"String\":1533,\"UNKNOWN.append()\":486,\"StringBuilder.append()\":470,\"Project.setDescription()\":1221,\"ResultSet.next()\":797,\"Project.setStatus()\":1296,\"String: WHERE \":503,\"Project.\\u003cinit\\u003e\":828,\"String:SELECT * FROM \":469,\"Project.setCompletionDate()\":1109,\"DBConnectionException.getMessage()\":1550,\"Project.setCreationDate()\":973,\"Project.setProjectName()\":919,\"int:1\":719,\"StringBuilder.toString()\":689,\"Project.setEstimatedCompletionDate()\":1051,\"ResultSet.getString()\":1161,\"StringBuilder.\\u003cinit\\u003e\":432,\"ResultSet.getLong()\":866,\"Project.setCustomer()\":1162,\"Logger.error()\":1386,\"\\u003creturn\\u003e\":1647,\"DAOReadException.\\u003cinit\\u003e\":1458,\"Project.setId()\":867,\"PreparedStatement.setLong()\":724,\"DefaultProjectDAO.getConnection()\":605,\"Connection.prepareStatement()\":690,\"PreparedStatement.executeQuery()\":772,\"null:null\":557},\"rawCode\":\"/** \\n\\t * This method is get project by id from DB\\n\\t * @see com.epam.lab.intouch.dao.BaseDAO#getById(java.lang.Object)\\n\\t * @param id\\n\\t * @throws DAOReadException \\n\\t * @exception SQLException if problem in SQL query or other\\n\\t * @exception DBConnectionException if problem with connection\\n\\t * @return Project\\n\\t */\\n\\t@Override\\n\\tpublic Project getById(Long id) throws DAOReadException {\\n\\t\\t\\n\\t\\tStringBuilder queryById \\u003d new StringBuilder();\\n\\t\\tqueryById.append(\\\"SELECT * FROM \\\").append(PROJECT).append(\\\" WHERE \\\").append(ID).append(\\\"\\u003d?\\\");\\n\\t\\t\\n\\t\\tProject project \\u003d null;\\n\\t\\ttry (Connection connection \\u003d getConnection();\\n\\t\\t\\t\\tPreparedStatement statement \\u003d connection.prepareStatement(queryById.toString())){\\n\\t\\t\\t\\n\\t\\t\\tstatement.setLong(1, id);\\n\\t\\t\\tResultSet result \\u003d statement.executeQuery();\\n\\t\\t\\twhile (result.next()) {\\n\\t\\t\\t\\tproject \\u003d new Project();\\n\\t\\t\\t\\tproject.setId(result.getLong(ID));\\n\\t\\t\\t\\tproject.setProjectName(result.getString(NAME));\\n\\t\\t\\t\\tproject.setCreationDate(result.getDate(CREATED));\\n\\t\\t\\t\\tproject.setEstimatedCompletionDate(result.getDate(ESTIMATED_COMPLETION));\\n\\t\\t\\t\\tproject.setCompletionDate(result.getDate(COMPLETED));\\n\\t\\t\\t\\tproject.setCustomer(result.getString(CUSTOMER));\\n\\t\\t\\t\\tproject.setDescription(result.getString(DESCRIPTION));\\n\\t\\t\\t\\tproject.setStatus(ProjectStatus.fromString(result.getString(STATUS)));\\n\\n\\t\\t\\t}\\n\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tLOG.error(\\\"Exception with read Project by ID\\\", e);\\n\\t\\t\\tthrow new DAOReadException(\\\"Exception with read Project by ID\\\" + e);\\n\\t\\t} catch (DBConnectionException e) {\\n\\t\\t\\tLOG.error(\\\"Connection exception\\\" + e.getMessage());\\n\\t\\t\\tthrow new DAOReadException(\\\"Connection exception\\\" + e.getMessage());\\n\\t\\t}\\n\\n\\t\\treturn project;\\n\\t}\"}","212":"{\"expressionStart\":{\"String.equals()\":437,\"SQLSettings.getPDS()\":162,\"\\u003cthrow\\u003e\":568,\"boolean:false\":508,\"ResultSet.getString()\":405,\"Connection.getMetaData()\":215,\"\\u003creturn\\u003e\":501,\"ResultSet.next()\":310,\"boolean:true\":480,\"UNKNOWN.getCatalogs()\":215,\"ResultSet.close()\":592,\"null:null\":132,\"UNKNOWN.getConnection()\":162,\"int:1\":425,\"SQLException.printStackTrace()\":544},\"expressionEnd\":{\"String.equals()\":464,\"SQLSettings.getPDS()\":182,\"\\u003cthrow\\u003e\":576,\"boolean:false\":513,\"ResultSet.getString()\":427,\"Connection.getMetaData()\":239,\"\\u003creturn\\u003e\":514,\"ResultSet.next()\":326,\"boolean:true\":484,\"UNKNOWN.getCatalogs()\":253,\"ResultSet.close()\":609,\"null:null\":136,\"UNKNOWN.getConnection()\":198,\"int:1\":426,\"SQLException.printStackTrace()\":563},\"rawCode\":\"@Override\\n\\tpublic boolean exists(String databaseName) throws SQLException {\\n\\t\\tConnection connection \\u003d null;\\n\\t\\tResultSet resultSet \\u003d null;\\n\\t\\ttry {\\n\\t\\t\\tconnection \\u003d SQLSettings.getPDS().getConnection();\\n\\t\\t\\tresultSet \\u003d connection.getMetaData().getCatalogs();\\n\\t\\n\\t\\t\\t//iterate each catalog in the ResultSet\\n\\t\\t\\twhile (resultSet.next()) {\\n\\t\\t\\t  // Get the database name, which is at position 1\\n\\t\\t\\t  String dbName \\u003d resultSet.getString(1);\\n\\t\\t\\t  if(dbName.equals(databaseName)){\\n\\t\\t\\t\\t  return true;\\n\\t\\t\\t  }\\n\\t\\t\\t}\\n\\t\\t\\treturn false;\\n\\t\\t}catch(SQLException e){\\n\\t\\t\\te.printStackTrace();\\n\\t\\t\\tthrow e;\\n\\t\\t}finally{\\n\\t\\t\\tresultSet.close();\\n\\t\\t}\\n\\t}\"}","213":"{\"expressionStart\":{\"Statement.executeUpdate()\":847,\"User.getLogin()\":991,\"MySQLUserViewDAO.\\u003cinit\\u003e\":945,\"\\u003cthrow\\u003e\":1127,\"boolean:false\":1064,\"String\":128,\"Scripts.getCreateUserViews()\":707,\"Connection.createStatement()\":324,\"ResultSet.next()\":499,\"Statement.close()\":1238,\"UserViewDAO.addUserView()\":973,\"ResultSet.close()\":1173,\"Connection.close()\":1309,\"UNKNOWN.getConnection()\":276,\"int:1\":547,\"Statement.executeQuery()\":400,\"\\u003cnullcheck\\u003e\":1291,\"SQLException.printStackTrace()\":1103,\"SQLSettings.getPDS()\":75,\"ResultSet.getString()\":532,\"\\u003creturn\\u003e\":1057,\"User.getId()\":1008,\"User.getPassword()\":438,\"boolean:true\":1039,\"null:null\":380,\"UNKNOWN.println()\":109},\"expressionEnd\":{\"Statement.executeUpdate()\":873,\"User.getLogin()\":1006,\"MySQLUserViewDAO.\\u003cinit\\u003e\":967,\"\\u003cthrow\\u003e\":1135,\"boolean:false\":1069,\"String\":151,\"Scripts.getCreateUserViews()\":739,\"Connection.createStatement()\":352,\"ResultSet.next()\":510,\"Statement.close()\":1250,\"UserViewDAO.addUserView()\":1021,\"ResultSet.close()\":1185,\"Connection.close()\":1327,\"UNKNOWN.getConnection()\":312,\"int:1\":548,\"Statement.executeQuery()\":464,\"\\u003cnullcheck\\u003e\":1307,\"SQLException.printStackTrace()\":1122,\"SQLSettings.getPDS()\":95,\"ResultSet.getString()\":549,\"\\u003creturn\\u003e\":1070,\"User.getId()\":1020,\"User.getPassword()\":456,\"boolean:true\":1043,\"null:null\":384,\"UNKNOWN.println()\":152},\"rawCode\":\"@Override\\n\\tpublic boolean createUser(User user) throws SQLException {\\n\\t\\tif(SQLSettings.getPDS() \\u003d\\u003d null) \\n\\t\\t\\tSystem.err.println(\\\"getPDS() not started.\\\");\\n\\t\\tResultSet rset \\u003d null;\\n\\t\\tint rset2;\\n\\t\\tStatement stmt \\u003d null;\\n\\t\\tConnection connection \\u003d null;\\n\\t\\t\\n\\t\\ttry {\\n\\t\\t\\tconnection \\u003d SQLSettings.getPDS().getConnection();\\n\\t\\t\\tstmt \\u003d connection.createStatement();\\n\\t\\t\\tString encryptedPass \\u003d null;\\t\\t\\n\\t\\n\\t\\t\\trset \\u003d stmt.executeQuery(\\\"select PASSWORD(\\u0027\\\"+user.getPassword()+\\\"\\u0027) ;\\\");\\n\\t\\t\\tif (rset !\\u003d null) {\\n\\t\\t\\t\\twhile(rset.next()){\\n\\t\\t\\t\\t\\tencryptedPass\\u003drset.getString(1);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\trset2 \\u003d stmt.executeUpdate(\\\"create user \\u0027\\\"+user.getLogin()+\\\"\\u0027@\\u0027%\\u0027 IDENTIFIED BY PASSWORD \\u0027\\\"+encryptedPass+\\\"\\u0027 ;\\\");\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tString[] viewCommand \\u003d Scripts.getCreateUserViews(user);\\n\\t\\t\\t\\t// On cree les vues utilisateur et on donne les acces\\n\\t\\t\\t\\tfor(String curcom:viewCommand)\\n\\t\\t\\t\\t\\trset2 \\u003d stmt.executeUpdate(curcom);\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t// on insere le tuple dans user_view\\n\\t\\t\\t\\tUserViewDAO uvdao \\u003d new MySQLUserViewDAO();\\n\\t\\t\\t\\tuvdao.addUserView(user.getLogin(), user.getId());\\n\\t\\t\\t\\t\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t\\treturn false;\\n\\t\\t\\n\\t\\t}catch(SQLException e){\\n\\t\\t\\te.printStackTrace();\\n\\t\\t\\tthrow e;\\n\\t\\t}finally {\\n\\t\\t\\ttry { if(rset!\\u003dnull) rset.close();  } catch (Exception e) {};\\n\\t\\t\\ttry { if(stmt!\\u003dnull) stmt.close();  } catch (Exception e) {};\\n\\t\\t\\ttry { if(connection!\\u003dnull) connection.close();  } catch (Exception e) {};\\n\\t\\t}\\n\\t}\"}","214":"{\"expressionStart\":{\"DateUtils.parseDatabaseDate()\":364,\"Logger.debug()\":590,\"UNKNOWN.withLastModified()\":445,\"UNKNOWN.build()\":445,\"ResultSet.getString()\":392,\"String\":603,\"DatabaseEntryCategory.Builder.\\u003cinit\\u003e\":445,\"ResultSet.next()\":219,\"List.add()\":430,\"UNKNOWN.withTitle()\":445,\"int:3\":412,\"List.size()\":630,\"Connection.prepareStatement()\":98,\"PreparedStatement.executeQuery()\":172,\"int:2\":328,\"Builder.withId()\":445,\"int:1\":277,\"ResultSet.getInt()\":260},\"expressionEnd\":{\"DateUtils.parseDatabaseDate()\":415,\"Logger.debug()\":648,\"UNKNOWN.withLastModified()\":560,\"UNKNOWN.build()\":568,\"ResultSet.getString()\":414,\"String\":628,\"DatabaseEntryCategory.Builder.\\u003cinit\\u003e\":480,\"ResultSet.next()\":235,\"List.add()\":569,\"UNKNOWN.withTitle()\":508,\"int:3\":413,\"List.size()\":647,\"Connection.prepareStatement()\":140,\"PreparedStatement.executeQuery()\":201,\"int:2\":329,\"Builder.withId()\":491,\"int:1\":278,\"ResultSet.getInt()\":279},\"rawCode\":\"private void preLoadCategories() throws SQLException {\\n        PreparedStatement loadCategories \\u003d conn.prepareStatement(SQL_LOAD_CATEGORIES);\\n        ResultSet resultSet \\u003d loadCategories.executeQuery();\\n\\n        while (resultSet.next()) {\\n            int id \\u003d resultSet.getInt(1);\\n            String title \\u003d resultSet.getString(2);\\n            Date lastModified \\u003d DateUtils.parseDatabaseDate(resultSet.getString(3));\\n\\n            categories.add(new DatabaseEntryCategory.Builder().withId(id).withTitle(title).withLastModified(\\n                    lastModified).build());\\n        }\\n\\n        LOGGER.debug(\\\"PreLoaded {} categories\\\", categories.size());\\n    }\"}","215":"{\"expressionStart\":{\"PreparedStatement.setString()\":322,\"DateUtils.parseDatabaseDate()\":551,\"Connection.prepareStatement()\":250,\"PreparedStatement.executeQuery()\":414,\"null:null\":931,\"Connection.isReadOnly()\":87,\"ResultSet.getString()\":507,\"String\":137,\"\\u003creturn\\u003e\":924,\"Logger.error()\":842,\"int:1\":342,\"\\u003cnullcheck\\u003e\":456},\"expressionEnd\":{\"PreparedStatement.setString()\":380,\"DateUtils.parseDatabaseDate()\":587,\"Connection.prepareStatement()\":308,\"PreparedStatement.executeQuery()\":438,\"null:null\":935,\"Connection.isReadOnly()\":104,\"ResultSet.getString()\":526,\"String\":161,\"\\u003creturn\\u003e\":936,\"Logger.error()\":903,\"int:1\":343,\"\\u003cnullcheck\\u003e\":470},\"rawCode\":\"@Override\\n    public Date getLastSynchronizationDate() {\\n        try {\\n            if (conn.isReadOnly()) {\\n                LOGGER.error(\\\"Database is read-only!\\\");\\n                return null;\\n            }\\n\\n            PreparedStatement statement \\u003d conn.prepareStatement(SQL_QUERY_SYNCHRONIZATION_TIMESTAMP);\\n            statement.setString(1, METADATA_SYNCHRONIZATION_TIMESTAMP);\\n\\n            ResultSet result \\u003d statement.executeQuery();\\n            if (result !\\u003d null) {\\n                String rawDate \\u003d result.getString(1);\\n                return DateUtils.parseDatabaseDate(rawDate);\\n            } else {\\n                LOGGER.error(\\\"Did not find a metadata row for \\u0027{}\\u0027 to determine last synchronization timestamp\\\",\\n                    METADATA_SYNCHRONIZATION_TIMESTAMP);\\n            }\\n\\n        } catch (SQLException e) {\\n            LOGGER.error(\\\"Unable to determine synchronization timestamp\\\");\\n        }\\n\\n        return null;\\n    }\"}","216":"{\"expressionStart\":{\"UNKNOWN.withLastModified()\":1109,\"Entry.\\u003ccast\\u003e\":1026,\"String\":1720,\"UNKNOWN.withComment()\":1109,\"ResultSet.next()\":232,\"UNKNOWN.withPassword()\":1109,\"UNKNOWN.withTitle()\":1109,\"int:6\":548,\"int:5\":494,\"int:4\":440,\"int:3\":391,\"DatabaseEntryCategory.\\u003ccast\\u003e\":736,\"int:8\":685,\"int:7\":601,\"Multimap.put()\":1003,\"int:2\":340,\"DatabaseEntry.Builder.\\u003cinit\\u003e\":1109,\"int:1\":290,\"int:0\":213,\"\\u003cnullcheck\\u003e\":806,\"Multimap.get()\":870,\"ResultSet.getInt()\":273,\"DateUtils.parseDatabaseDate()\":637,\"UNKNOWN.withCategory()\":1109,\"Logger.debug()\":1707,\"UNKNOWN.build()\":1109,\"ResultSet.getString()\":528,\"UNKNOWN.withUsername()\":1109,\"Collection.add()\":1620,\"ArrayList.\\u003cinit\\u003e\":964,\"SqliteDataSource.getCategoryById()\":760,\"Connection.prepareStatement()\":92,\"PreparedStatement.executeQuery()\":163,\"\\u003ca\\u003e\":1664,\"Builder.withId()\":1109,\"UNKNOWN.withUrl()\":1109},\"expressionEnd\":{\"UNKNOWN.withLastModified()\":1594,\"Entry.\\u003ccast\\u003e\":1041,\"String\":1742,\"UNKNOWN.withComment()\":1489,\"ResultSet.next()\":248,\"UNKNOWN.withPassword()\":1394,\"UNKNOWN.withTitle()\":1261,\"int:6\":549,\"int:5\":495,\"int:4\":441,\"int:3\":392,\"DatabaseEntryCategory.\\u003ccast\\u003e\":787,\"int:8\":686,\"int:7\":602,\"Multimap.put()\":1042,\"int:2\":341,\"DatabaseEntry.Builder.\\u003cinit\\u003e\":1136,\"int:1\":291,\"int:0\":214,\"\\u003cnullcheck\\u003e\":822,\"Multimap.get()\":892,\"ResultSet.getInt()\":292,\"DateUtils.parseDatabaseDate()\":688,\"UNKNOWN.withCategory()\":1170,\"Logger.debug()\":1751,\"UNKNOWN.build()\":1602,\"ResultSet.getString()\":550,\"UNKNOWN.withUsername()\":1371,\"Collection.add()\":1646,\"ArrayList.\\u003cinit\\u003e\":981,\"SqliteDataSource.getCategoryById()\":787,\"Connection.prepareStatement()\":131,\"PreparedStatement.executeQuery()\":189,\"\\u003ca\\u003e\":1672,\"Builder.withId()\":1147,\"UNKNOWN.withUrl()\":1274},\"rawCode\":\"private void preLoadEntries() throws SQLException {\\n        PreparedStatement loadEntries \\u003d conn.prepareStatement(SQL_LOAD_ENTRIES);\\n        ResultSet resultSet \\u003d loadEntries.executeQuery();\\n\\n        int loaded \\u003d 0;\\n\\n        while (resultSet.next()) {\\n            int id \\u003d resultSet.getInt(1);\\n            int categoryId \\u003d resultSet.getInt(2);\\n            String title \\u003d resultSet.getString(3);\\n            String url \\u003d resultSet.getString(4);\\n            String username \\u003d resultSet.getString(5);\\n            String password \\u003d resultSet.getString(6);\\n            String comment \\u003d resultSet.getString(7);\\n            Date lastModified \\u003d DateUtils.parseDatabaseDate(resultSet.getString(8));\\n\\n            DatabaseEntryCategory category \\u003d (DatabaseEntryCategory) getCategoryById(categoryId);\\n\\n            if (category !\\u003d null) {\\n                Collection\\u003cEntry\\u003e entries \\u003d entryMap.get(category);\\n\\n                if (entries \\u003d\\u003d null) {\\n                    entries \\u003d new ArrayList\\u003c\\u003e();\\n                    entryMap.put(category, (Entry) entries);\\n                }\\n\\n                DatabaseEntry databaseEntry \\u003d new DatabaseEntry.Builder().withId(id).withCategory(category)\\n                                                                         .withTitle(title).withUrl(url)\\n                                                                         .withUsername(username).withPassword(password)\\n                                                                         .withComment(comment)\\n                                                                         .withLastModified(lastModified).build();\\n                entries.add(databaseEntry);\\n                loaded++;\\n            }\\n        }\\n\\n        LOGGER.debug(\\\"PreLoaded {} entries\\\", loaded);\\n    }\"}","217":"{\"expressionStart\":{\"CallableStatement.executeQuery()\":260,\"Multimap.asMap()\":556,\"HashMultimap.create()\":324,\"CallableStatement.setInt()\":210,\"ResultSet.getString()\":464,\"UNKNOWN.prepareCall()\":139,\"String\":479,\"Multimap.put()\":505,\"int:1\":222,\"\\u003creturn\\u003e\":549,\"ResultSet.next()\":363},\"expressionEnd\":{\"CallableStatement.executeQuery()\":279,\"Multimap.asMap()\":571,\"HashMultimap.create()\":345,\"CallableStatement.setInt()\":232,\"ResultSet.getString()\":491,\"UNKNOWN.prepareCall()\":200,\"String\":490,\"Multimap.put()\":529,\"int:1\":223,\"\\u003creturn\\u003e\":572,\"ResultSet.next()\":374},\"rawCode\":\"public Map\\u003cString, Collection\\u003cString\\u003e\\u003e getRecipesByTags(int userId) throws SQLException {\\n        CallableStatement call \\u003d\\n                connection.prepareCall(\\\"{call recipes_from_schmeckttags(?)}\\\");\\n        call.setInt(1, userId);\\n\\n        ResultSet data \\u003d call.executeQuery();\\n        Multimap\\u003cString, String\\u003e recipes \\u003d HashMultimap.create();\\n\\n        while (data.next()) {\\n            String recipe \\u003d data.getString(\\\"gerichte_name\\\");\\n            String tag \\u003d data.getString(\\\"tags_name\\\");\\n            recipes.put(recipe, tag);\\n        }\\n        return recipes.asMap();\\n    }\"}","218":"{\"expressionStart\":{\"HashMap.\\u003cinit\\u003e\":116,\"PreparedStatement.executeQuery()\":520,\"ResultSet.getString()\":603,\"PreparedStatement.setInt()\":464,\"String\":390,\"UNKNOWN.prepareStatement()\":172,\"\\u003creturn\\u003e\":675,\"int:1\":482,\"ResultSet.next()\":562,\"ResultSet.getInt()\":632,\"Map.put()\":589},\"expressionEnd\":{\"HashMap.\\u003cinit\\u003e\":131,\"PreparedStatement.executeQuery()\":545,\"ResultSet.getString()\":630,\"PreparedStatement.setInt()\":492,\"String\":453,\"UNKNOWN.prepareStatement()\":454,\"\\u003creturn\\u003e\":692,\"int:1\":483,\"ResultSet.next()\":573,\"ResultSet.getInt()\":654,\"Map.put()\":655},\"rawCode\":\"public Map\\u003cString, Integer\\u003e getTastyTags(int userId) throws SQLException {\\n        Map\\u003cString, Integer\\u003e tastyTags \\u003d new HashMap\\u003c\\u003e();\\n        PreparedStatement pStatement \\u003d connection.prepareStatement(\\n                \\\"SELECT tags_name, COUNT(gerichte_name) AS counter from schmeckt \\\" +\\n                        \\\"INNER JOIN gerichte_has_tags USING (gerichte_name) \\\" +\\n                        \\\"WHERE active \\u003d 1 AND schmeckt.users_id \\u003d ? GROUP BY tags_name\\\");\\n        pStatement.setInt(1, userId);\\n\\n        ResultSet data \\u003d pStatement.executeQuery();\\n        while (data.next()) {\\n            tastyTags.put(data.getString(\\\"tags_name\\\"), data.getInt(\\\"counter\\\"));\\n        }\\n        return tastyTags;\\n    }\"}","219":"{\"expressionStart\":{\"Action.getId()\":1381,\"UNKNOWN.executeUpdate()\":1575,\"String:\\u0027\":333,\"ConnectionDbMySQL.getConnection()\":1012,\"DAOFactoryMySQL.getActionDAO()\":935,\"\\u003cr\\u003e\":685,\"String\":1198,\"UNKNOWN.executeQuery()\":100,\"ResultSet.next()\":1542,\"ResultSet.deleteRow()\":820,\"CommandDAOMySQL.retrieve()\":1985,\"\\u003cnullcheck\\u003e\":935,\"int:0\":753,\"UNKNOWN.createStatement()\":1012,\"String:\\u0027)\":1398,\"Command.getId()\":1999,\"UNKNOWN.create()\":935,\"ResultSet.getString()\":685,\"StringBuilder.\\u003cinit\\u003e\":378,\"UNKNOWN.compareTo()\":685,\"\\u003creturn\\u003e\":2138,\"Logger.error()\":2072,\"Command.getActionList()\":468,\"ResultSet.beforeFirst()\":1501,\"String:\\u0027;\":1941,\"UNKNOWN.toString()\":725},\"expressionEnd\":{\"Action.getId()\":1395,\"UNKNOWN.executeUpdate()\":1946,\"String:\\u0027\":336,\"ConnectionDbMySQL.getConnection()\":1039,\"DAOFactoryMySQL.getActionDAO()\":961,\"\\u003cr\\u003e\":754,\"String\":1252,\"UNKNOWN.executeQuery()\":337,\"ResultSet.next()\":1555,\"ResultSet.deleteRow()\":838,\"CommandDAOMySQL.retrieve()\":2015,\"\\u003cnullcheck\\u003e\":984,\"int:0\":754,\"UNKNOWN.createStatement()\":1150,\"String:\\u0027)\":1402,\"Command.getId()\":2014,\"UNKNOWN.create()\":976,\"ResultSet.getString()\":714,\"StringBuilder.\\u003cinit\\u003e\":397,\"UNKNOWN.compareTo()\":751,\"\\u003creturn\\u003e\":2153,\"Logger.error()\":2118,\"Command.getActionList()\":491,\"ResultSet.beforeFirst()\":1521,\"String:\\u0027;\":1945,\"UNKNOWN.toString()\":750},\"rawCode\":\"@Override\\n    public Command update(Command command) {\\n        try {\\n            ResultSet result \\u003d _connection.getConnection()\\n                    .createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_UPDATABLE)\\n                    .executeQuery(\\\"SELECT * FROM commands_actions WHERE id_command\\u003d\\u0027\\\" + command.getId() + \\\"\\u0027\\\");\\n\\n            StringBuilder statement \\u003d new StringBuilder();\\n\\n            // Update actions list\\n            for (Action action : command.getActionList()) {\\n                result.beforeFirst();\\n                boolean exist \\u003d false;\\n                while (result.next()) {\\n                    // if action exist \\u003d\\u003e update\\n                    if (result.getString(\\\"id_action\\\").compareTo(action.getId().toString())\\u003d\\u003d0) {\\n                        exist \\u003d true;\\n                        result.deleteRow();\\n                    }\\n                }\\n\\n                if (!exist) {\\n                    if (_daoFactory.getActionDAO().create(action) !\\u003d null) {\\n                        _connection.getConnection()\\n                                .createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_UPDATABLE)\\n                                .executeUpdate(\\\"INSERT INTO commands_actions (id_command, id_action)\\\"\\n                                        + \\\" VALUES(\\u0027\\\" + command.getId() + \\\"\\u0027,\\\"\\n                                        + \\\" \\u0027\\\" + action.getId() + \\\"\\u0027)\\\");\\n                    }\\n                }\\n            }\\n\\n            // Delete others\\n            result.beforeFirst();\\n            while (result.next()) {\\n                _connection.getConnection()\\n                        .createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_UPDATABLE)\\n                        .executeUpdate(\\\"DELETE FROM commands_actions \\\" +\\n                                \\\"WHERE id_command\\u003d\\u0027\\\"+ command.getId() +\\\"\\u0027 \\\" +\\n                                \\\"AND id_action\\u003d\\u0027\\\" + result.getString(\\\"id_action\\\") + \\\"\\u0027;\\\");\\n            }\\n\\n            command \\u003d this.retrieve(command.getId());\\n        } catch (SQLException exception) {\\n            logger.error(\\\"Command update error\\\",exception);\\n        }\\n        return command;\\n    }\"}","220":"{\"expressionStart\":{\"UUID.fromString()\":776,\"ConnectionDbMySQL.getConnection()\":135,\"String:\\u0027\":563,\"DAOFactoryMySQL.getActionDAO()\":740,\"ResultSet.getString()\":792,\"String\":539,\"ResultSet.getLong()\":1054,\"UNKNOWN.executeQuery()\":135,\"Logger.error()\":1143,\"\\u003creturn\\u003e\":1212,\"LinkedList.add()\":725,\"ResultSet.first()\":846,\"ResultSet.next()\":692,\"UNKNOWN.retrieve()\":740,\"ResultSet.beforeFirst()\":581,\"int:5\":1069,\"int:4\":1010,\"int:3\":950,\"LinkedList.\\u003cinit\\u003e\":647,\"Category.valueOf()\":916,\"Command.\\u003cinit\\u003e\":890,\"int:2\":809,\"UNKNOWN.createStatement()\":135},\"expressionEnd\":{\"UUID.fromString()\":812,\"ConnectionDbMySQL.getConnection()\":162,\"String:\\u0027\":566,\"DAOFactoryMySQL.getActionDAO()\":766,\"ResultSet.getString()\":811,\"String\":555,\"ResultSet.getLong()\":1071,\"UNKNOWN.executeQuery()\":567,\"Logger.error()\":1192,\"\\u003creturn\\u003e\":1227,\"LinkedList.add()\":814,\"ResultSet.first()\":860,\"ResultSet.next()\":705,\"UNKNOWN.retrieve()\":813,\"ResultSet.beforeFirst()\":601,\"int:5\":1070,\"int:4\":1011,\"int:3\":951,\"LinkedList.\\u003cinit\\u003e\":671,\"Category.valueOf()\":953,\"Command.\\u003cinit\\u003e\":1072,\"int:2\":810,\"UNKNOWN.createStatement()\":261},\"rawCode\":\"@Override\\n    public Command retrieve(UUID id) {\\n        Command command \\u003d new Command();\\n        try {\\n            ResultSet result \\u003d _connection.getConnection()\\n                    .createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_UPDATABLE)\\n                    .executeQuery(\\\"SELECT id_command, id_action, category, `lock`, time_out \\\" +\\n                                    \\\"FROM commands c \\\" +\\n                                    \\\"JOIN commands_actions ca ON c.id\\u003dca.id_command \\\" +\\n                                    \\\"WHERE c.id \\u003d \\u0027\\\" + id + \\\"\\u0027\\\");\\n            result.beforeFirst();\\n            LinkedList\\u003cAction\\u003e actionList \\u003d new LinkedList\\u003cAction\\u003e();\\n            while (result.next()) {\\n                actionList.add(_daoFactory.getActionDAO().retrieve(UUID.fromString(result.getString(2))));\\n            }\\n\\n            if(result.first()) {\\n                command \\u003d new Command(id,actionList,Category.valueOf(result.getString(3)),\\n                                        result.getLong(4),\\n                                        result.getLong(5));\\n            }\\n        } catch (SQLException exception) {\\n            logger.error(\\\"Command retrieve error\\\", exception);\\n        }\\n        return command;\\n    }\"}","221":"{\"expressionStart\":{\"CallableStatement.getMoreResults()\":467,\"StoredProcedureTests.given()\":461,\"UNKNOWN.willReturn()\":281,\"boolean:false\":520,\"StoredProcedureTests.mock()\":141,\"String\":675,\"CallableStatement.getResultSet()\":402,\"ResultSet.next()\":172,\"StoredProcedureTests.verify()\":1193,\"Map.size()\":1026,\"StoredProcedureWithResultSetMapped.\\u003cinit\\u003e\":872,\"StoredProcedureWithResultSetMapped.execute()\":959,\"List.get()\":1143,\"List.size()\":1108,\"JdbcTemplate.\\u003cinit\\u003e\":750,\"UNKNOWN.close()\":1193,\"int:2\":249,\"JdbcTemplate.setSkipUndeclaredResults()\":782,\"int:1\":390,\"Map.get()\":1075,\"int:0\":1151,\"StoredProcedureTests.assertEquals()\":1092,\"Connection.prepareCall()\":600,\"ResultSet.getString()\":229,\"CallableStatement.execute()\":287,\"String:{call \":623,\"boolean:true\":327,\"CallableStatement.getUpdateCount()\":536,\"List.\\u003ccast\\u003e\":1060},\"expressionEnd\":{\"CallableStatement.getMoreResults()\":501,\"StoredProcedureTests.given()\":502,\"UNKNOWN.willReturn()\":332,\"boolean:false\":525,\"StoredProcedureTests.mock()\":162,\"String\":680,\"CallableStatement.getResultSet()\":434,\"ResultSet.next()\":188,\"StoredProcedureTests.verify()\":1210,\"Map.size()\":1036,\"StoredProcedureWithResultSetMapped.\\u003cinit\\u003e\":929,\"StoredProcedureWithResultSetMapped.execute()\":974,\"List.get()\":1153,\"List.size()\":1118,\"JdbcTemplate.\\u003cinit\\u003e\":778,\"UNKNOWN.close()\":1218,\"int:2\":250,\"JdbcTemplate.setSkipUndeclaredResults()\":825,\"int:1\":391,\"Map.get()\":1088,\"int:0\":1152,\"StoredProcedureTests.assertEquals()\":1119,\"Connection.prepareCall()\":681,\"ResultSet.getString()\":251,\"CallableStatement.execute()\":314,\"String:{call \":631,\"boolean:true\":331,\"CallableStatement.getUpdateCount()\":570,\"List.\\u003ccast\\u003e\":1088},\"rawCode\":\"@Test\\n\\t@SuppressWarnings(\\\"unchecked\\\")\\n\\tpublic void testStoredProcedureSkippingUndeclaredResults() throws Exception {\\n\\t\\tResultSet resultSet \\u003d mock(ResultSet.class);\\n\\t\\tgiven(resultSet.next()).willReturn(true, true, false);\\n\\t\\tgiven(resultSet.getString(2)).willReturn(\\\"Foo\\\", \\\"Bar\\\");\\n\\t\\tgiven(callableStatement.execute()).willReturn(true);\\n\\t\\tgiven(callableStatement.getUpdateCount()).willReturn(-1);\\n\\t\\tgiven(callableStatement.getResultSet()).willReturn(resultSet);\\n\\t\\tgiven(callableStatement.getMoreResults()).willReturn(true, false);\\n\\t\\tgiven(callableStatement.getUpdateCount()).willReturn(-1, -1);\\n\\t\\tgiven(connection.prepareCall(\\\"{call \\\" + StoredProcedureWithResultSetMapped.SQL + \\\"()}\\\")\\n\\t\\t\\t\\t).willReturn(callableStatement);\\n\\n\\t\\tJdbcTemplate jdbcTemplate \\u003d new JdbcTemplate(dataSource);\\n\\t\\tjdbcTemplate.setSkipUndeclaredResults(true);\\n\\t\\tStoredProcedureWithResultSetMapped sproc \\u003d new StoredProcedureWithResultSetMapped(\\n\\t\\t\\t\\tjdbcTemplate);\\n\\t\\tMap\\u003cString, Object\\u003e res \\u003d sproc.execute();\\n\\n\\t\\tassertEquals(\\\"incorrect number of returns\\\", 1, res.size());\\n\\t\\tList\\u003cString\\u003e rs1 \\u003d (List\\u003cString\\u003e) res.get(\\\"rs\\\");\\n\\t\\tassertEquals(2, rs1.size());\\n\\t\\tassertEquals(\\\"Foo\\\", rs1.get(0));\\n\\t\\tassertEquals(\\\"Bar\\\", rs1.get(1));\\n\\t\\tverify(resultSet).close();\\n\\t}\"}","222":"{\"expressionStart\":{\"StoredProcedureTests.given()\":578,\"CallableStatement.getMoreResults()\":461,\"UNKNOWN.willReturn()\":330,\"boolean:false\":207,\"StoredProcedureTests.mock()\":135,\"String\":659,\"CallableStatement.getResultSet()\":396,\"ResultSet.next()\":166,\"StoredProcedureTests.verify()\":995,\"StoredProcedureWithResultSetMapped.\\u003cinit\\u003e\":748,\"StoredProcedureWithResultSetMapped.execute()\":828,\"List.get()\":947,\"List.size()\":913,\"UNKNOWN.close()\":995,\"int:2\":243,\"int:1\":384,\"int:0\":954,\"Map.get()\":880,\"StoredProcedureTests.assertEquals()\":897,\"Connection.prepareCall()\":584,\"ResultSet.getString()\":223,\"CallableStatement.execute()\":281,\"String:{call \":607,\"boolean:true\":195,\"CallableStatement.getUpdateCount()\":524,\"List.\\u003ccast\\u003e\":865},\"expressionEnd\":{\"StoredProcedureTests.given()\":671,\"CallableStatement.getMoreResults()\":495,\"UNKNOWN.willReturn()\":386,\"boolean:false\":212,\"StoredProcedureTests.mock()\":156,\"String\":664,\"CallableStatement.getResultSet()\":428,\"ResultSet.next()\":182,\"StoredProcedureTests.verify()\":1012,\"StoredProcedureWithResultSetMapped.\\u003cinit\\u003e\":798,\"StoredProcedureWithResultSetMapped.execute()\":843,\"List.get()\":956,\"List.size()\":922,\"UNKNOWN.close()\":1020,\"int:2\":244,\"int:1\":385,\"int:0\":955,\"Map.get()\":893,\"StoredProcedureTests.assertEquals()\":923,\"Connection.prepareCall()\":665,\"ResultSet.getString()\":245,\"CallableStatement.execute()\":308,\"String:{call \":615,\"boolean:true\":199,\"CallableStatement.getUpdateCount()\":558,\"List.\\u003ccast\\u003e\":893},\"rawCode\":\"@Test\\n\\t@SuppressWarnings(\\\"unchecked\\\")\\n\\tpublic void testStoredProcedureWithResultSetMapped() throws Exception {\\n\\t\\tResultSet resultSet \\u003d mock(ResultSet.class);\\n\\t\\tgiven(resultSet.next()).willReturn(true, true, false);\\n\\t\\tgiven(resultSet.getString(2)).willReturn(\\\"Foo\\\", \\\"Bar\\\");\\n\\t\\tgiven(callableStatement.execute()).willReturn(true);\\n\\t\\tgiven(callableStatement.getUpdateCount()).willReturn(-1);\\n\\t\\tgiven(callableStatement.getResultSet()).willReturn(resultSet);\\n\\t\\tgiven(callableStatement.getMoreResults()).willReturn(false);\\n\\t\\tgiven(callableStatement.getUpdateCount()).willReturn(-1);\\n\\t\\tgiven(connection.prepareCall(\\\"{call \\\" + StoredProcedureWithResultSetMapped.SQL + \\\"()}\\\")\\n\\t\\t\\t\\t).willReturn(callableStatement);\\n\\t\\tStoredProcedureWithResultSetMapped sproc \\u003d new StoredProcedureWithResultSetMapped(dataSource);\\n\\t\\tMap\\u003cString, Object\\u003e res \\u003d sproc.execute();\\n\\t\\tList\\u003cString\\u003e rs \\u003d (List\\u003cString\\u003e) res.get(\\\"rs\\\");\\n\\t\\tassertEquals(2, rs.size());\\n\\t\\tassertEquals(\\\"Foo\\\", rs.get(0));\\n\\t\\tassertEquals(\\\"Bar\\\", rs.get(1));\\n\\t\\tverify(resultSet).close();\\n\\t}\"}","223":"{\"expressionStart\":{\"ResultSet.getString()\":93,\"int:2\":106,\"\\u003creturn\\u003e\":86},\"expressionEnd\":{\"ResultSet.getString()\":108,\"int:2\":107,\"\\u003creturn\\u003e\":109},\"rawCode\":\"@Override\\n\\t\\t\\tpublic String mapRow(ResultSet rs, int rowNum) throws SQLException {\\n\\t\\t\\t\\treturn rs.getString(2);\\n\\t\\t\\t}\"}","224":"{\"expressionStart\":{\"StoredProcedureTests.given()\":1007,\"CallableStatement.getMoreResults()\":1013,\"UNKNOWN.willReturn()\":1007,\"boolean:false\":1073,\"StoredProcedureTests.mock()\":138,\"Number.\\u003ccast\\u003e\":1977,\"String\":1771,\"CallableStatement.getResultSet()\":935,\"ResultSet.next()\":169,\"StoredProcedureTests.verify()\":2071,\"ResultSetMetaData.getColumnCount()\":358,\"Map.size()\":1472,\"StoredProcedureWithResultSetMapped.\\u003cinit\\u003e\":1325,\"Number.intValue()\":2054,\"ResultSet.getObject()\":713,\"int:3\":1469,\"StoredProcedureWithResultSetMapped.execute()\":1405,\"List.get()\":1746,\"List.size()\":1555,\"UNKNOWN.close()\":2071,\"int:2\":248,\"int:1\":450,\"Map.get()\":1906,\"int:0\":1144,\"StoredProcedureTests.assertEquals()\":1539,\"Connection.prepareCall()\":1160,\"Map.\\u003cinstanceof\\u003e\":1810,\"ResultSet.getString()\":227,\"ResultSet.getMetaData()\":596,\"CallableStatement.execute()\":820,\"String:{call \":1183,\"boolean:true\":1060,\"ResultSetMetaData.getColumnLabel()\":417,\"CallableStatement.getUpdateCount()\":875,\"StoredProcedureTests.assertTrue()\":1760,\"List.\\u003ccast\\u003e\":1660,\"Map.\\u003ccast\\u003e\":1857},\"expressionEnd\":{\"StoredProcedureTests.given()\":1048,\"CallableStatement.getMoreResults()\":1047,\"UNKNOWN.willReturn()\":1079,\"boolean:false\":1078,\"StoredProcedureTests.mock()\":159,\"Number.\\u003ccast\\u003e\":2012,\"String\":1808,\"CallableStatement.getResultSet()\":967,\"ResultSet.next()\":186,\"StoredProcedureTests.verify()\":2089,\"ResultSetMetaData.getColumnCount()\":392,\"Map.size()\":1482,\"StoredProcedureWithResultSetMapped.\\u003cinit\\u003e\":1375,\"Number.intValue()\":2066,\"ResultSet.getObject()\":736,\"int:3\":1470,\"StoredProcedureWithResultSetMapped.execute()\":1420,\"List.get()\":1756,\"List.size()\":1565,\"UNKNOWN.close()\":2097,\"int:2\":249,\"int:1\":451,\"Map.get()\":1920,\"int:0\":1145,\"StoredProcedureTests.assertEquals()\":1566,\"Connection.prepareCall()\":1241,\"Map.\\u003cinstanceof\\u003e\":1827,\"ResultSet.getString()\":250,\"ResultSet.getMetaData()\":620,\"CallableStatement.execute()\":847,\"String:{call \":1191,\"boolean:true\":1064,\"ResultSetMetaData.getColumnLabel()\":452,\"CallableStatement.getUpdateCount()\":909,\"StoredProcedureTests.assertTrue()\":1828,\"List.\\u003ccast\\u003e\":1699,\"Map.\\u003ccast\\u003e\":1881},\"rawCode\":\"@Test\\n\\t@SuppressWarnings(\\\"unchecked\\\")\\n\\tpublic void testStoredProcedureWithUndeclaredResults() throws Exception {\\n\\t\\tResultSet resultSet1 \\u003d mock(ResultSet.class);\\n\\t\\tgiven(resultSet1.next()).willReturn(true, true, false);\\n\\t\\tgiven(resultSet1.getString(2)).willReturn(\\\"Foo\\\", \\\"Bar\\\");\\n\\n\\t\\tResultSetMetaData resultSetMetaData \\u003d mock(ResultSetMetaData.class);\\n\\t\\tgiven(resultSetMetaData.getColumnCount()).willReturn(2);\\n\\t\\tgiven(resultSetMetaData.getColumnLabel(1)).willReturn(\\\"spam\\\");\\n\\t\\tgiven(resultSetMetaData.getColumnLabel(2)).willReturn(\\\"eggs\\\");\\n\\n\\t\\tResultSet resultSet2 \\u003d mock(ResultSet.class);\\n\\t\\tgiven(resultSet2.getMetaData()).willReturn(resultSetMetaData);\\n\\t\\tgiven(resultSet2.next()).willReturn(true, false);\\n\\t\\tgiven(resultSet2.getObject(1)).willReturn(\\\"Spam\\\");\\n\\t\\tgiven(resultSet2.getObject(2)).willReturn(\\\"Eggs\\\");\\n\\n\\t\\tgiven(callableStatement.execute()).willReturn(true);\\n\\t\\tgiven(callableStatement.getUpdateCount()).willReturn(-1);\\n\\t\\tgiven(callableStatement.getResultSet()).willReturn(resultSet1, resultSet2);\\n\\t\\tgiven(callableStatement.getMoreResults()).willReturn(true, false, false);\\n\\t\\tgiven(callableStatement.getUpdateCount()).willReturn(-1, -1, 0, -1);\\n\\t\\tgiven(connection.prepareCall(\\\"{call \\\" + StoredProcedureWithResultSetMapped.SQL + \\\"()}\\\")\\n\\t\\t\\t\\t).willReturn(callableStatement);\\n\\n\\t\\tStoredProcedureWithResultSetMapped sproc \\u003d new StoredProcedureWithResultSetMapped(dataSource);\\n\\t\\tMap\\u003cString, Object\\u003e res \\u003d sproc.execute();\\n\\n\\t\\tassertEquals(\\\"incorrect number of returns\\\", 3, res.size());\\n\\n\\t\\tList\\u003cString\\u003e rs1 \\u003d (List\\u003cString\\u003e) res.get(\\\"rs\\\");\\n\\t\\tassertEquals(2, rs1.size());\\n\\t\\tassertEquals(\\\"Foo\\\", rs1.get(0));\\n\\t\\tassertEquals(\\\"Bar\\\", rs1.get(1));\\n\\n\\t\\tList\\u003cObject\\u003e rs2 \\u003d (List\\u003cObject\\u003e) res.get(\\\"#result-set-2\\\");\\n\\t\\tassertEquals(1, rs2.size());\\n\\t\\tObject o2 \\u003d rs2.get(0);\\n\\t\\tassertTrue(\\\"wron type returned for result set 2\\\", o2 instanceof Map);\\n\\t\\tMap\\u003cString, String\\u003e m2 \\u003d (Map\\u003cString, String\\u003e) o2;\\n\\t\\tassertEquals(\\\"Spam\\\", m2.get(\\\"spam\\\"));\\n\\t\\tassertEquals(\\\"Eggs\\\", m2.get(\\\"eggs\\\"));\\n\\n\\t\\tNumber n \\u003d (Number) res.get(\\\"#update-count-1\\\");\\n\\t\\tassertEquals(\\\"wrong update count\\\", 0, n.intValue());\\n\\t\\tverify(resultSet1).close();\\n\\t\\tverify(resultSet2).close();\\n\\t}\"}","225":"{\"expressionStart\":{\"StandardAnalyzer.\\u003cinit\\u003e\":409,\"RAMDirectory.\\u003cinit\\u003e\":569,\"String\":944,\"Connection.createStatement()\":250,\"Utility.createTFIDF()\":3000,\"Utility.getDBConnection()\":138,\"ResultSet.next()\":1084,\"Document.\\u003cinit\\u003e\":1303,\"Map.size()\":3023,\"HashMap.\\u003cinit\\u003e\":1581,\"Map.entrySet()\":2812,\"Connection.close()\":3082,\"IndexWriter.addDocument()\":1402,\"int:1\":3073,\"CharArraySet.\\u003cinit\\u003e\":1942,\"int:0\":333,\"Utility.createTF()\":2206,\"Map.get()\":2619,\"Statement.executeQuery()\":1039,\"\\u003cnullcheck\\u003e\":2697,\"Map.put()\":2660,\"Document.add()\":1323,\"Map.Entry.getKey()\":2236,\"IndexWriter.commit()\":1437,\"StandardTokenizer.\\u003cinit\\u003e\":2034,\"ResultSet.getString()\":1116,\"IndexWriter.\\u003cinit\\u003e\":614,\"Utility.createStopWordsSet()\":1978,\"StopFilter.\\u003cinit\\u003e\":2123,\"KeywordConfig.setWeightedFreq()\":2414,\"Field.\\u003cinit\\u003e\":1336,\"List.add()\":2460,\"UNKNOWN.split()\":1828,\"ArrayList.\\u003cinit\\u003e\":1672,\"ResultSet.getFloat()\":1142,\"KeywordConfig.getWeightedFreq()\":2712,\"KeywordConfig.\\u003cinit\\u003e\":2349,\"StringReader.\\u003cinit\\u003e\":2075,\"boolean:true\":2011,\"IndexWriterConfig.\\u003cinit\\u003e\":485,\"Utility.\\u003cinit\\u003e\":92,\"KeywordConfig.getKeyword()\":2637,\"String[].arrayget()\":3068,\"Map.Entry.getValue()\":1881,\"Exception.printStackTrace()\":3131,\"KeywordConfig.setKeyword()\":2375},\"expressionEnd\":{\"StandardAnalyzer.\\u003cinit\\u003e\":448,\"RAMDirectory.\\u003cinit\\u003e\":587,\"String\":1018,\"Connection.createStatement()\":271,\"Utility.createTFIDF()\":3076,\"Utility.getDBConnection()\":166,\"ResultSet.next()\":1093,\"Document.\\u003cinit\\u003e\":1317,\"Map.size()\":3037,\"HashMap.\\u003cinit\\u003e\":1609,\"Map.entrySet()\":2836,\"Connection.close()\":3093,\"IndexWriter.addDocument()\":1431,\"int:1\":3074,\"CharArraySet.\\u003cinit\\u003e\":2016,\"int:0\":334,\"Utility.createTF()\":2265,\"Map.get()\":2654,\"Statement.executeQuery()\":1072,\"\\u003cnullcheck\\u003e\":2708,\"Map.put()\":2766,\"Document.add()\":1396,\"Map.Entry.getKey()\":2248,\"IndexWriter.commit()\":1453,\"StandardTokenizer.\\u003cinit\\u003e\":2106,\"ResultSet.getString()\":1140,\"IndexWriter.\\u003cinit\\u003e\":658,\"Utility.createStopWordsSet()\":2009,\"StopFilter.\\u003cinit\\u003e\":2188,\"KeywordConfig.setWeightedFreq()\":2453,\"Field.\\u003cinit\\u003e\":1395,\"List.add()\":2482,\"UNKNOWN.split()\":1854,\"ArrayList.\\u003cinit\\u003e\":1702,\"ResultSet.getFloat()\":1163,\"KeywordConfig.getWeightedFreq()\":2733,\"KeywordConfig.\\u003cinit\\u003e\":2368,\"StringReader.\\u003cinit\\u003e\":2105,\"boolean:true\":2015,\"IndexWriterConfig.\\u003cinit\\u003e\":537,\"Utility.\\u003cinit\\u003e\":105,\"KeywordConfig.getKeyword()\":2653,\"String[].arrayget()\":3075,\"Map.Entry.getValue()\":1895,\"Exception.printStackTrace()\":3150,\"KeywordConfig.setKeyword()\":2407},\"rawCode\":\"/**\\n\\t * @param args\\n\\t */\\n\\n\\tpublic static void main(String[] args)\\n\\t{\\n\\t\\tUtility utilityObj \\u003d new Utility();\\n\\t\\ttry \\n\\t\\t{\\n\\t\\t\\tConnection con \\u003d utilityObj.getDBConnection();\\n\\t\\t\\tMap\\u003cString,Float\\u003e rowData \\u003d new HashMap\\u003cString, Float\\u003e();\\n\\n\\t\\t\\tStatement stmt \\u003d con.createStatement();\\n\\t\\t\\t//String personId \\u003d \\\"1632672\\\";\\n\\t\\t\\tString personId \\u003d args[0];\\n\\n\\t\\t\\t// Creation of a Index Directory.\\n\\t\\t\\tStandardAnalyzer docAnalyzer \\u003d new StandardAnalyzer(Version.LUCENE_36);\\n\\t\\t\\tIndexWriterConfig indexConfig \\u003d new IndexWriterConfig(Version.LUCENE_36,docAnalyzer);\\n\\t\\t\\tDirectory indexDirectory \\u003d new RAMDirectory();\\n\\t\\t\\tIndexWriter indexWr \\u003d new IndexWriter(indexDirectory, indexConfig);\\n\\n\\t\\t\\tString doc\\u003d\\\"\\\";\\n\\n\\t\\t\\tString query_authorid \\u003d \\n\\t\\t\\t\\t\\t\\\"select p.abstract,p.year/year(current_date) as weight from papers p join \\\" +  \\n\\t\\t\\t\\t\\t\\t\\t\\\"(select distinct w.paperid from \\\" + \\n\\t\\t\\t\\t\\t\\t\\t\\\"authors a join writtenby w where a.personid \\u003d w.personid and a.personid \\u003d \\\" + personId  + \\n\\t\\t\\t\\t\\t\\t\\t\\\" order by paperid) T1 on p.paperid \\u003d T1.paperid where p.abstract !\\u003d \\\\\\\"\\\\\\\"\\\";\\n\\n\\t\\t\\tResultSet rs \\u003d stmt.executeQuery(query_authorid);\\n\\t\\t\\twhile (rs.next())\\n\\t\\t\\t{\\n\\t\\t\\t\\trowData.put(rs.getString(\\\"abstract\\\"), rs.getFloat(\\\"weight\\\"));\\n\\t\\t\\t\\t// Adding a field \\u0027doc\\u0027 from the abstract to create an indexed document.\\n\\t\\t\\t\\tdoc \\u003d rs.getString(\\\"abstract\\\");\\n\\t\\t\\t\\tDocument document \\u003d new Document();\\n\\t\\t\\t\\tdocument.add(new Field(\\\"doc\\\", doc, Field.Store.YES,Field.Index.ANALYZED));\\n\\t\\t\\t\\tindexWr.addDocument(document);\\n\\t\\t\\t\\tindexWr.commit();\\n\\t\\t\\t}\\n\\n\\t\\t\\tCharArraySet stopWordsCharArrSet;\\n\\t\\t\\tTokenStream docStream;\\n\\t\\t\\tTokenStream keywords;\\n\\t\\t\\tMap\\u003cString,Float\\u003e termFreq \\u003d new HashMap\\u003cString, Float\\u003e();\\n\\t\\t\\tKeywordConfig config;\\n\\t\\t\\tList\\u003cKeywordConfig\\u003e configList \\u003d new ArrayList\\u003cKeywordConfig\\u003e();\\n\\t\\t\\tfloat weightedNoOfWords \\u003d 0;\\n\\n\\t\\t\\tfor (Map.Entry\\u003cString, Float\\u003e abs : rowData.entrySet()) \\n\\t\\t\\t{\\n\\t\\t\\t\\tString[] rowDataArr \\u003d abs.getKey().split(\\\"[ ]+\\\");\\n\\t\\t\\t\\tweightedNoOfWords +\\u003d abs.getValue()*rowDataArr.length;\\n\\n\\t\\t\\t\\tstopWordsCharArrSet \\u003d new CharArraySet(Version.LUCENE_36, utilityObj.createStopWordsSet(), true);\\n\\t\\t\\t\\tdocStream \\u003d new StandardTokenizer(Version.LUCENE_36, new StringReader(abs.getKey()));\\n\\t\\t\\t\\tkeywords \\u003d new StopFilter(Version.LUCENE_36, docStream ,stopWordsCharArrSet);\\n\\n\\t\\t\\t\\ttermFreq \\u003d utilityObj.createTF(keywords, abs.getKey(), abs.getValue());\\n\\n\\t\\t\\t\\tfor(Map.Entry\\u003cString, Float\\u003e keys : termFreq.entrySet())\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tconfig \\u003d new KeywordConfig();\\n\\t\\t\\t\\t\\tconfig.setKeyword(keys.getKey());\\n\\t\\t\\t\\t\\tconfig.setWeightedFreq(keys.getValue());\\n\\t\\t\\t\\t\\tconfigList.add(config);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tMap\\u003cString,Float\\u003e termFinalFreq \\u003d new HashMap\\u003cString, Float\\u003e();\\n\\n\\t\\t\\tfor (KeywordConfig itr: configList){\\n\\t\\t\\t\\tFloat val \\u003d termFinalFreq.get(itr.getKeyword());\\n\\t\\t\\t\\ttermFinalFreq.put(itr.getKeyword(), (val \\u003d\\u003d null) ? itr.getWeightedFreq() : (val + itr.getWeightedFreq()));\\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t\\tfor(Map.Entry\\u003cString, Float\\u003e k: termFinalFreq.entrySet()){\\n\\t\\t\\t\\ttermFinalFreq.put(k.getKey(), k.getValue()/weightedNoOfWords);\\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t\\t//Calling the method createTFIDF to create the TF and the TF-IDF vector output\\n\\t\\t\\tutilityObj.createTFIDF(rowData.size(),indexDirectory, termFinalFreq,args[1]);\\n\\n\\t\\t\\tcon.close();\\n\\n\\t\\t}\\n\\n\\t\\tcatch (Exception e) \\n\\t\\t{\\n\\t\\t\\te.printStackTrace();\\n\\t\\t}\\n\\t}\"}","226":"{\"expressionStart\":{\"Rating.\\u003cinit\\u003e\":869,\"Rating.setTotalReviews()\":981,\"String\":342,\"Connection.createStatement()\":302,\"Rating.setTotalRatings()\":933,\"HashMap.put()\":1465,\"ResultSet.next()\":436,\"Statement.close()\":1572,\"H2DB.getConnection()\":256,\"int:6\":670,\"int:5\":629,\"int:4\":588,\"int:3\":551,\"Rating.setAverageRating()\":888,\"HashMap.\\u003cinit\\u003e\":105,\"int:9\":798,\"int:8\":755,\"int:7\":710,\"ResultSet.close()\":1497,\"int:2\":515,\"int:1\":478,\"ResultSet.getDouble()\":829,\"Statement.executeQuery()\":401,\"SQLException.printStackTrace()\":1543,\"ResultSet.getInt()\":468,\"APOI.\\u003cinit\\u003e\":1365,\"ResultSet.getString()\":502,\"\\u003creturn\\u003e\":1645,\"H2DB.\\u003ccast\\u003e\":147,\"int.\\u003ccast\\u003e\":1004,\"null:null\":1441,\"int:10\":842,\"int:11\":1058},\"expressionEnd\":{\"Rating.\\u003cinit\\u003e\":881,\"Rating.setTotalReviews()\":1023,\"String\":362,\"Connection.createStatement()\":324,\"Rating.setTotalRatings()\":974,\"HashMap.put()\":1485,\"ResultSet.next()\":445,\"Statement.close()\":1584,\"H2DB.getConnection()\":280,\"int:6\":671,\"int:5\":630,\"int:4\":589,\"int:3\":552,\"Rating.setAverageRating()\":926,\"HashMap.\\u003cinit\\u003e\":133,\"int:9\":799,\"int:8\":756,\"int:7\":711,\"ResultSet.close()\":1507,\"int:2\":516,\"int:1\":479,\"ResultSet.getDouble()\":845,\"Statement.executeQuery()\":423,\"SQLException.printStackTrace()\":1562,\"ResultSet.getInt()\":480,\"APOI.\\u003cinit\\u003e\":1458,\"ResultSet.getString()\":517,\"\\u003creturn\\u003e\":1656,\"H2DB.\\u003ccast\\u003e\":173,\"int.\\u003ccast\\u003e\":1022,\"null:null\":1445,\"int:10\":844,\"int:11\":1060},\"rawCode\":\"private HashMap\\u003cInteger, APOI\\u003e readFromGeneratedDB(String dbNameSource) {\\n\\t\\tHashMap\\u003cInteger, APOI\\u003e map \\u003d new HashMap\\u003cInteger, APOI\\u003e();\\n\\t\\tH2DB h2 \\u003d (H2DB) Strategy.dbExternal;\\n\\t\\tString dbName \\u003d Strategy.dbExternal.dbNameSource;\\n\\t\\ttry {\\n\\t\\t\\tConnection conn \\u003d h2.getConnection(dbName);\\n\\t\\t\\tStatement stat \\u003d conn.createStatement();\\n\\t\\t\\tString sql \\u003d \\\"SELECT * FROM item\\\";\\n\\t\\t\\ttry {\\n\\t\\t\\t\\tjava.sql.ResultSet rs \\u003d stat.executeQuery(sql);\\n\\t\\t\\t\\twhile (rs.next()) {\\n\\n\\t\\t\\t\\t\\tint itemID \\u003d rs.getInt(1);\\n\\t\\t\\t\\t\\tString title \\u003d rs.getString(2);\\n\\t\\t\\t\\t\\tString city \\u003d rs.getString(3);\\n\\t\\t\\t\\t\\tString state \\u003d rs.getString(4);\\n\\n\\t\\t\\t\\t\\tdouble latitude \\u003d rs.getDouble(5);\\n\\t\\t\\t\\t\\tdouble longitude \\u003d rs.getDouble(6);\\n\\t\\t\\t\\t\\tdouble distance \\u003d rs.getDouble(7);\\n\\t\\t\\t\\t\\tdouble averageRating \\u003d rs.getDouble(8);\\n\\t\\t\\t\\t\\tdouble totalRating \\u003d rs.getDouble(9);\\n\\t\\t\\t\\t\\tdouble totalReviews \\u003d rs.getDouble(10);\\n\\n\\t\\t\\t\\t\\tRating rating \\u003d new Rating();\\n\\t\\t\\t\\t\\trating.setAverageRating(averageRating);\\n\\t\\t\\t\\t\\trating.setTotalRatings((int) totalRating);\\n\\t\\t\\t\\t\\trating.setTotalReviews((int) totalReviews);\\n\\n\\t\\t\\t\\t\\tint numCrawled \\u003d rs.getInt(11);\\n\\t\\t\\t\\t\\t//\\n\\t\\t\\t\\t\\t// print query result to console\\n\\t\\t\\t\\t\\t// if (logger.isDebugEnabled()) {\\n\\t\\t\\t\\t\\t// logger.debug(\\\"itemID: \\\" + itemID);\\n\\t\\t\\t\\t\\t// logger.debug(\\\"latitude: \\\" + latitude);\\n\\t\\t\\t\\t\\t// logger.debug(\\\"longitude: \\\" + longitude);\\n\\t\\t\\t\\t\\t// logger.debug(\\\"--------------------------\\\");\\n\\t\\t\\t\\t\\t// }\\n\\t\\t\\t\\t\\tAPOI poi \\u003d new APOI(itemID, title, city, state, longitude, latitude, rating, distance, null, numCrawled);\\n\\t\\t\\t\\t\\tmap.put(itemID, poi);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\trs.close();\\n\\t\\t\\t} catch (SQLException e) {\\n\\t\\t\\t\\te.printStackTrace();\\n\\t\\t\\t}\\n\\t\\t\\tstat.close();\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\te.printStackTrace();\\n\\t\\t}\\n\\t\\treturn map;\\n\\t}\"}","227":"{\"expressionStart\":{\"Rating.\\u003cinit\\u003e\":788,\"Rating.setTotalReviews()\":900,\"String\":1046,\"Connection.createStatement()\":219,\"Rating.setTotalRatings()\":852,\"APOI.toString()\":1335,\"ResultSet.next()\":354,\"H2DB.getConnection()\":173,\"Statement.close()\":1437,\"int:6\":588,\"int:5\":547,\"int:4\":506,\"int:3\":469,\"Rating.setAverageRating()\":807,\"int:9\":717,\"int:8\":674,\"int:7\":628,\"ResultSet.close()\":1362,\"int:2\":433,\"int:1\":396,\"ResultSet.getDouble()\":748,\"Statement.executeQuery()\":319,\"ResultSet.getInt()\":386,\"SQLException.printStackTrace()\":1483,\"APOI.\\u003cinit\\u003e\":1223,\"ResultSet.getString()\":420,\"UNKNOWN.info()\":1323,\"H2DB.\\u003ccast\\u003e\":44,\"int.\\u003ccast\\u003e\":923,\"null:null\":1299,\"int:10\":761,\"int:11\":977,\"UNKNOWN.debug()\":1033},\"expressionEnd\":{\"Rating.\\u003cinit\\u003e\":800,\"Rating.setTotalReviews()\":942,\"String\":1056,\"Connection.createStatement()\":241,\"Rating.setTotalRatings()\":893,\"APOI.toString()\":1349,\"ResultSet.next()\":363,\"H2DB.getConnection()\":197,\"Statement.close()\":1449,\"int:6\":589,\"int:5\":548,\"int:4\":507,\"int:3\":470,\"Rating.setAverageRating()\":845,\"int:9\":718,\"int:8\":675,\"int:7\":629,\"ResultSet.close()\":1372,\"int:2\":434,\"int:1\":397,\"ResultSet.getDouble()\":764,\"Statement.executeQuery()\":341,\"ResultSet.getInt()\":398,\"SQLException.printStackTrace()\":1502,\"APOI.\\u003cinit\\u003e\":1316,\"ResultSet.getString()\":435,\"UNKNOWN.info()\":1350,\"H2DB.\\u003ccast\\u003e\":70,\"int.\\u003ccast\\u003e\":941,\"null:null\":1303,\"int:10\":763,\"int:11\":979,\"UNKNOWN.debug()\":1066},\"rawCode\":\"public void printExternalDB() {\\n\\t\\tH2DB h2 \\u003d (H2DB) Strategy.dbExternal;\\n\\t\\tString dbName \\u003d Strategy.dbExternal.dbNameTarget;\\n\\t\\t// TODO check sql\\n\\t\\ttry {\\n\\t\\t\\tConnection conn \\u003d h2.getConnection(dbName);\\n\\t\\t\\tStatement stat \\u003d conn.createStatement();\\n\\n\\t\\t\\tString sql \\u003d \\\"SELECT * FROM item\\\";\\n\\t\\t\\ttry {\\n\\t\\t\\t\\tjava.sql.ResultSet rs \\u003d stat.executeQuery(sql);\\n\\t\\t\\t\\twhile (rs.next()) {\\n\\n\\t\\t\\t\\t\\tint itemID \\u003d rs.getInt(1);\\n\\t\\t\\t\\t\\tString title \\u003d rs.getString(2);\\n\\t\\t\\t\\t\\tString city \\u003d rs.getString(3);\\n\\t\\t\\t\\t\\tString state \\u003d rs.getString(4);\\n\\n\\t\\t\\t\\t\\tdouble latitude \\u003d rs.getDouble(5);\\n\\t\\t\\t\\t\\tdouble longitude \\u003d rs.getDouble(6);\\n\\t\\t\\t\\t\\tdouble distance \\u003d rs.getDouble(7);\\n\\n\\t\\t\\t\\t\\tdouble averageRating \\u003d rs.getDouble(8);\\n\\t\\t\\t\\t\\tdouble totalRating \\u003d rs.getDouble(9);\\n\\t\\t\\t\\t\\tdouble totalReviews \\u003d rs.getDouble(10);\\n\\n\\t\\t\\t\\t\\tRating rating \\u003d new Rating();\\n\\t\\t\\t\\t\\trating.setAverageRating(averageRating);\\n\\t\\t\\t\\t\\trating.setTotalRatings((int) totalRating);\\n\\t\\t\\t\\t\\trating.setTotalReviews((int) totalReviews);\\n\\n\\t\\t\\t\\t\\tint numCrawled \\u003d rs.getInt(11);\\n\\t\\t\\t\\t\\t//\\n\\t\\t\\t\\t\\t// print query result to console\\n\\t\\t\\t\\t\\tlogger.debug(\\\"itemID: \\\" + itemID);\\n\\t\\t\\t\\t\\tlogger.debug(\\\"latitude: \\\" + latitude);\\n\\t\\t\\t\\t\\tlogger.debug(\\\"longitude: \\\" + longitude);\\n\\t\\t\\t\\t\\tlogger.debug(\\\"--------------------------\\\");\\n\\t\\t\\t\\t\\tAPOI poi \\u003d new APOI(itemID, title, city, state, longitude, latitude, rating, distance, null, numCrawled);\\n\\t\\t\\t\\t\\tlogger.info(poi.toString());\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\trs.close();\\n\\t\\t\\t} catch (SQLException e) {\\n\\t\\t\\t\\te.printStackTrace();\\n\\t\\t\\t}\\n\\t\\t\\tstat.close();\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\te.printStackTrace();\\n\\t\\t}\\n\\t}\"}","228":"{\"expressionStart\":{\"DatabaseTableInfo.getConnection()\":228,\"String:COLUMN_NAME\":630,\"String:TABLE_NAME\":528,\"ResultSet.getString()\":718,\"String\":268,\"\\u003creturn\\u003e\":1045,\"ResultSet.next()\":464,\"Map.isEmpty()\":103,\"HashMap.\\u003cinit\\u003e\":914,\"Connection.prepareStatement()\":228,\"PreparedStatement.executeQuery()\":419,\"\\u003cnullcheck\\u003e\":885,\"Map.get()\":850,\"String.toUpperCase()\":664,\"Map.put()\":957},\"expressionEnd\":{\"DatabaseTableInfo.getConnection()\":243,\"String:COLUMN_NAME\":643,\"String:TABLE_NAME\":540,\"ResultSet.getString()\":755,\"String\":390,\"\\u003creturn\\u003e\":1062,\"ResultSet.next()\":480,\"Map.isEmpty()\":122,\"HashMap.\\u003cinit\\u003e\":943,\"Connection.prepareStatement()\":391,\"PreparedStatement.executeQuery()\":451,\"\\u003cnullcheck\\u003e\":897,\"Map.get()\":874,\"String.toUpperCase()\":688,\"Map.put()\":992},\"rawCode\":\"public Map\\u003cString, Map\\u003cString, String\\u003e\\u003e getTableInfos() throws Exception {\\r\\n\\t\\tif (null \\u003d\\u003d tableInfo || tableInfo.isEmpty()) {\\r\\n\\t\\t\\ttableInfo \\u003d new HashMap\\u003cString, Map\\u003cString, String\\u003e\\u003e();\\r\\n\\t\\t\\tPreparedStatement preparedStatement \\u003d getConnection()\\r\\n\\t\\t\\t\\t\\t.prepareStatement(\\\"SELECT TABLE_NAME, COLUMN_NAME, COLUMN_COMMENT, COLUMN_KEY FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA \\u003d \\u0027sample\\u0027\\\");\\r\\n\\t\\t\\tResultSet resultSet \\u003d preparedStatement.executeQuery();\\r\\n\\t\\t\\twhile (resultSet.next()) {\\r\\n\\t\\t\\t\\tString tableName \\u003d resultSet.getString(\\\"TABLE_NAME\\\");\\r\\n\\t\\t\\t\\ttableName \\u003d tableName.toUpperCase();\\r\\n\\t\\t\\t\\tString columnName \\u003d resultSet.getString(\\\"COLUMN_NAME\\\");\\r\\n\\t\\t\\t\\tcolumnName \\u003d columnName.toUpperCase();\\r\\n\\t\\t\\t\\tString columnComment \\u003d resultSet.getString(\\\"COLUMN_COMMENT\\\");\\r\\n//\\t\\t\\t\\tString columnKey \\u003d resultSet.getString(\\\"COLUMN_KEY\\\");\\r\\n\\t\\t\\t\\tMap\\u003cString, String\\u003e info \\u003d tableInfo.get(tableName);\\r\\n\\t\\t\\t\\tif (null \\u003d\\u003d info) {\\r\\n\\t\\t\\t\\t\\tinfo \\u003d new HashMap\\u003cString, String\\u003e();\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tinfo.put(columnName, columnComment);\\r\\n\\t\\t\\t\\ttableInfo.put(tableName, info);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\treturn tableInfo;\\r\\n\\t}\"}","229":"{\"expressionStart\":{\"DatabaseTableInfo.getConnection()\":132,\"DatabaseMetaData.getTables()\":188,\"ResultSet.getString()\":428,\"String:TABLE_NAME\":448,\"\\u003cr\\u003e\":284,\"Connection.getMetaData()\":132,\"String\":501,\"\\u003creturn\\u003e\":621,\"ResultSet.next()\":256,\"List.add()\":523,\"ArrayList.\\u003cinit\\u003e\":76,\"ResultSet.close()\":599,\"null:null\":207,\"\\u003ca\\u003e\":494,\"int:1\":243,\"UNKNOWN.println()\":357},\"expressionEnd\":{\"DatabaseTableInfo.getConnection()\":147,\"DatabaseMetaData.getTables()\":230,\"ResultSet.getString()\":461,\"String:TABLE_NAME\":460,\"\\u003cr\\u003e\":290,\"Connection.getMetaData()\":161,\"String\":504,\"\\u003creturn\\u003e\":635,\"ResultSet.next()\":272,\"List.add()\":544,\"ArrayList.\\u003cinit\\u003e\":99,\"ResultSet.close()\":616,\"null:null\":211,\"\\u003ca\\u003e\":497,\"int:1\":244,\"UNKNOWN.println()\":397},\"rawCode\":\"public List\\u003cString\\u003e getTables() throws Exception {\\r\\n\\t\\tList\\u003cString\\u003e tables \\u003d new ArrayList\\u003cString\\u003e();\\r\\n\\t\\tDatabaseMetaData metaData \\u003d getConnection().getMetaData();\\r\\n\\t\\tResultSet resultSet \\u003d metaData.getTables(null, null, null, null);\\r\\n\\t\\tint i \\u003d 1;\\r\\n\\t\\twhile (resultSet.next()) {\\r\\n\\t\\t\\tif (i \\u003d\\u003d 1) {\\r\\n\\t\\t\\t\\tSystem.out.println(\\\"|库名：\\\" + resultSet.getString(1));\\r\\n\\t\\t\\t\\tSystem.out.println(\\\"+----------------+\\\");\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tString tableName \\u003d resultSet.getString(\\\"TABLE_NAME\\\");\\r\\n\\t\\t\\tSystem.out.println(\\\"|表\\\" + (i++) + \\\":\\\" + tableName);\\r\\n\\t\\t\\ttables.add(tableName);\\r\\n\\t\\t}\\r\\n\\t\\tSystem.out.println(\\\"+----------------+\\\");\\r\\n\\t\\tresultSet.close();\\r\\n\\t\\treturn tables;\\r\\n\\t}\"}","230":"{\"expressionStart\":{\"OurOrder.setId()\":105,\"OurOrder.setMemberId()\":259,\"OurOrder.setOurOrderSheetId()\":194,\"OurOrder.setStatus()\":310,\"ResultSet.getString()\":277,\"String\":233,\"\\u003creturn\\u003e\":381,\"String:id\":131,\"OurOrderStatus.valueOf()\":326,\"OurOrder.setSupplierId()\":141,\"ResultSet.getInt()\":219},\"expressionEnd\":{\"OurOrder.setId()\":137,\"OurOrder.setMemberId()\":306,\"OurOrder.setOurOrderSheetId()\":255,\"OurOrder.setStatus()\":377,\"ResultSet.getString()\":305,\"String\":253,\"\\u003creturn\\u003e\":394,\"String:id\":135,\"OurOrderStatus.valueOf()\":376,\"OurOrder.setSupplierId()\":190,\"ResultSet.getInt()\":254},\"rawCode\":\"@Override\\n\\tprotected OurOrder setProperties(OurOrder order, ResultSet result)\\n\\t\\t\\tthrows SQLException {\\n\\t\\torder.setId(result.getInt(\\\"id\\\"));\\n\\t\\torder.setSupplierId(result.getInt(\\\"supplier_id\\\"));\\n\\t\\torder.setOurOrderSheetId(result.getInt(\\\"our_order_sheet_id\\\"));\\n\\t\\torder.setMemberId(result.getString(\\\"memberId\\\"));\\n\\t\\torder.setStatus(OurOrderStatus.valueOf(result.getString(\\\"status\\\")));\\n\\t\\treturn order;\\n\\t}\"}","231":"{\"expressionStart\":{\"Statement.executeUpdate()\":288,\"\\u003cthrow\\u003e\":453,\"Statement.getGeneratedKeys()\":356,\"String:\":97,\"ResultSet.getString()\":401,\"String\":215,\"Connection.createStatement()\":246,\"\\u003creturn\\u003e\":545,\"String:INSERT INTO \":186,\"ResultSet.next()\":385,\"Statement.close()\":520,\"ResultSet.close()\":492,\"int:1\":414,\"\\u003cnullcheck\\u003e\":511},\"expressionEnd\":{\"Statement.executeUpdate()\":340,\"\\u003cthrow\\u003e\":461,\"Statement.getGeneratedKeys()\":376,\"String:\":99,\"ResultSet.getString()\":416,\"String\":236,\"Connection.createStatement()\":274,\"\\u003creturn\\u003e\":555,\"String:INSERT INTO \":200,\"ResultSet.next()\":394,\"Statement.close()\":529,\"ResultSet.close()\":502,\"int:1\":415,\"\\u003cnullcheck\\u003e\":518},\"rawCode\":\"protected String getId(Connection connection, String tableName) throws Exception{\\r\\n\\t\\tString id \\u003d \\\"\\\";\\r\\n\\t\\tStatement s \\u003d null;\\r\\n\\t\\tResultSet rs \\u003d null;\\r\\n\\t\\tString sql \\u003d \\\"\\\";\\r\\n\\t\\ttry{\\r\\n\\t\\t\\tsql \\u003d \\\"INSERT INTO \\\" + tableName + \\\" (ID) VALUES (NULL)\\\";\\r\\n\\t\\t\\ts \\u003d connection.createStatement();\\r\\n\\t\\t\\tint i \\u003d s.executeUpdate(sql,Statement.RETURN_GENERATED_KEYS);\\r\\n\\t\\t\\t\\r\\n\\t\\t\\trs \\u003d s.getGeneratedKeys();\\r\\n\\t\\t\\tif(rs.next()) id \\u003d rs.getString(1);\\r\\n\\t\\t\\t\\r\\n\\t\\t}catch (Exception e) {\\r\\n\\t\\t\\tthrow e;\\r\\n\\t\\t}finally{\\r\\n\\t\\t\\tif(rs!\\u003dnull) rs.close();\\r\\n\\t\\t\\tif(s!\\u003dnull) s.close();\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t\\r\\n\\t\\treturn id;\\r\\n\\t}\"}","232":"{\"expressionStart\":{\"HPCCColumnMetaData.getColumnName()\":1090,\"String:%\":590,\"HPCCDatabaseMetaData.getDFUFile()\":820,\"String:(\":1494,\"\\u003cr\\u003e\":2921,\"UNKNOWN.equals()\":558,\"String\":260,\"ResultSet.next()\":768,\"\\u003ccontinue\\u003e\":1220,\"Enumeration.nextElement()\":1038,\"DFUFile.getFileName()\":1406,\"HPCCResultSet.\\u003cinit\\u003e\":3152,\"DFUFile.getAllFields()\":899,\"int:1\":2219,\"int:0\":497,\"\\u003cnullcheck\\u003e\":2281,\"Enumeration.hasMoreElements()\":939,\"DFUFile.getIdxFilePosField()\":2281,\"String.length()\":467,\"String:\":2412,\"ResultSet.getString()\":831,\"HPCCDatabaseMetaData.getTables()\":693,\"HPCCJDBCUtils.convertSQLtype2JavaClassName()\":1500,\"DFUFile.getFullyQualifiedName()\":1793,\"HPCCColumnMetaData.\\u003ccast\\u003e\":1017,\"\\u003creturn\\u003e\":3145,\"List.add()\":1632,\"ArrayList.\\u003cinit\\u003e\":1599,\"HPCCColumnMetaData.getIndex()\":2633,\"ArrayList.add()\":2619,\"String.equalsIgnoreCase()\":1153,\"null:null\":2953,\"String:)\":1554,\"String.trim()\":558,\"DFUFile.isKeyFile()\":2261,\"HPCCJDBCUtils.traceoutln()\":1345,\"\\u003cbreak\\u003e\":3105,\"String:.\":1427,\"HPCCColumnMetaData.getSqlType()\":1308},\"expressionEnd\":{\"HPCCColumnMetaData.getColumnName()\":1111,\"String:%\":593,\"HPCCDatabaseMetaData.getDFUFile()\":860,\"String:(\":1497,\"\\u003cr\\u003e\":2950,\"UNKNOWN.equals()\":594,\"String\":279,\"ResultSet.next()\":781,\"\\u003ccontinue\\u003e\":1229,\"Enumeration.nextElement()\":1053,\"DFUFile.getFileName()\":1424,\"HPCCResultSet.\\u003cinit\\u003e\":3229,\"DFUFile.getAllFields()\":918,\"int:1\":2220,\"int:0\":498,\"\\u003cnullcheck\\u003e\":2314,\"Enumeration.hasMoreElements()\":958,\"DFUFile.getIdxFilePosField()\":2306,\"String.length()\":493,\"String:\":2414,\"ResultSet.getString()\":859,\"HPCCDatabaseMetaData.getTables()\":750,\"HPCCJDBCUtils.convertSQLtype2JavaClassName()\":1551,\"DFUFile.getFullyQualifiedName()\":1821,\"HPCCColumnMetaData.\\u003ccast\\u003e\":1053,\"\\u003creturn\\u003e\":3230,\"List.add()\":1654,\"ArrayList.\\u003cinit\\u003e\":1614,\"HPCCColumnMetaData.getIndex()\":2649,\"ArrayList.add()\":2650,\"String.equalsIgnoreCase()\":1198,\"null:null\":2957,\"String:)\":1557,\"String.trim()\":582,\"DFUFile.isKeyFile()\":2277,\"HPCCJDBCUtils.traceoutln()\":1558,\"\\u003cbreak\\u003e\":3111,\"String:.\":1430,\"HPCCColumnMetaData.getSqlType()\":1326},\"rawCode\":\"@Override\\n    public ResultSet getColumns(String catalog, String schemaPattern, String tableNamePattern, String columnNamePattern) throws SQLException\\n    {\\n        HPCCJDBCUtils.traceoutln(Level.FINEST, \\\"HPCCDatabaseMetaData GETCOLUMNS catalog: \\\" + catalog + \\\", schemaPattern: \\\" + schemaPattern\\n                + \\\", tableNamePattern: \\\" + tableNamePattern + \\\", columnNamePattern: \\\" + columnNamePattern);\\n\\n        boolean allfieldsearch \\u003d columnNamePattern \\u003d\\u003d null || columnNamePattern.length() \\u003d\\u003d 0\\n                || columnNamePattern.trim().equals(\\\"*\\\") || columnNamePattern.trim().equals(\\\"%\\\");\\n\\n        List\\u003cList\\u003cString\\u003e\\u003e columns \\u003d new ArrayList\\u003cList\\u003cString\\u003e\\u003e();\\n\\n        ResultSet tables \\u003d getTables(catalog, schemaPattern, tableNamePattern, null);\\n\\n        while (tables.next())\\n        {\\n            DFUFile file \\u003d getDFUFile(tables.getString(TABLE_NAME));\\n\\n            Enumeration\\u003cObject\\u003e e \\u003d file.getAllFields();\\n            while (e.hasMoreElements())\\n            {\\n                HPCCColumnMetaData field \\u003d (HPCCColumnMetaData) e.nextElement();\\n                String fieldname \\u003d field.getColumnName();\\n                if (!allfieldsearch \\u0026\\u0026 !columnNamePattern.equalsIgnoreCase(fieldname))\\n                    continue;\\n\\n                int coltype \\u003d java.sql.Types.NULL;\\n                coltype \\u003d field.getSqlType();\\n\\n                HPCCJDBCUtils.traceoutln(Level.FINEST, \\\"Table col found: \\\" + file.getFileName() + \\\".\\\" + fieldname + \\\" of type: \\\" + coltype\\n                        + \\\"(\\\" + HPCCJDBCUtils.convertSQLtype2JavaClassName(coltype) + \\\")\\\");\\n\\n                ArrayList rowValues \\u003d new ArrayList();\\n                columns.add(rowValues);\\n                /* 1 */rowValues.add(catalog);\\n                /* 2 */rowValues.add(schemaPattern);\\n                /* 3 */rowValues.add(file.getFullyQualifiedName());\\n                /* 4 */rowValues.add(fieldname);\\n                /* 5 */rowValues.add(coltype);\\n                /* 6 */rowValues.add(HPCCJDBCUtils.convertSQLtype2JavaClassName(coltype));\\n                /* 7 */rowValues.add(0);\\n                /* 8 */rowValues.add(\\\"null\\\");\\n                /* 9 */rowValues.add(0);\\n                /* 10 */rowValues.add(0);\\n                /* 11 */rowValues.add(1);\\n                /* 12 */rowValues.add(file.isKeyFile() \\u0026\\u0026 file.getIdxFilePosField() !\\u003d null\\n                        \\u0026\\u0026 file.getIdxFilePosField().equals(fieldname) ? \\\"File Position Field\\\" : \\\"\\\");\\n                /* 13 */rowValues.add(\\\"\\\");\\n                /* 14 */rowValues.add(0);// unused\\n                /* 15 */rowValues.add(0);\\n                /* 16 */rowValues.add(0);\\n                /* 17 */rowValues.add(field.getIndex()); // need to get index\\n                /* 18 */rowValues.add(\\\"YES\\\");\\n                /* 19 */rowValues.add(coltype \\u003d\\u003d java.sql.Types.REF ? null : \\\"\\\");\\n                /* 20 */rowValues.add(coltype \\u003d\\u003d java.sql.Types.REF ? null : \\\"\\\");\\n                /* 21 */rowValues.add(coltype \\u003d\\u003d java.sql.Types.REF ? null : \\\"\\\");\\n                /* 22 */rowValues.add(coltype \\u003d\\u003d java.sql.Types.REF ? null : \\\"\\\");\\n\\n                if (!allfieldsearch)\\n                    break;\\n            }\\n        }\\n\\n        return new HPCCResultSet(columns, tablecolsmetacols, tableNamePattern +\\\"\\u0027s columns\\\");\\n    }\"}","233":"{\"expressionStart\":{\"HPCCDatabaseMetaData.getHpccQuery()\":914,\"HPCCQuery.getAllFields()\":1017,\"HPCCColumnMetaData.getColumnName()\":1224,\"String:%\":707,\"String:(\":1569,\"HPCCQuery.getName()\":1904,\"\\u003cr\\u003e\":2428,\"UNKNOWN.equals()\":635,\"HPCCQuery.getQuerySet()\":1875,\"String\":1897,\"ResultSet.next()\":860,\"Iterator.next()\":1169,\"\\u003ccontinue\\u003e\":1353,\"HPCCResultSet.\\u003cinit\\u003e\":2641,\"int:1\":2329,\"HPCCColumnMetaData.getParamType()\":2428,\"int:0\":614,\"\\u003cnullcheck\\u003e\":555,\"String.length()\":584,\"UNKNOWN.iterator()\":1017,\"ResultSet.getString()\":927,\"HPCCJDBCUtils.convertSQLtype2JavaClassName()\":2113,\"HPCCColumnMetaData.\\u003ccast\\u003e\":1148,\"\\u003creturn\\u003e\":2634,\"ArrayList.\\u003cinit\\u003e\":497,\"List.add()\":1707,\"HPCCColumnMetaData.getIndex()\":2494,\"ArrayList.add()\":2099,\"Iterator.hasNext()\":1070,\"String.equalsIgnoreCase()\":1286,\"String:)\":1629,\"HPCCDatabaseMetaData.getProcedures()\":783,\"String.trim()\":635,\"HPCCJDBCUtils.traceoutln()\":190,\"String:.\":1502,\"\\u003cbreak\\u003e\":2594,\"HPCCColumnMetaData.getSqlType()\":1389},\"expressionEnd\":{\"HPCCDatabaseMetaData.getHpccQuery()\":959,\"HPCCQuery.getAllFields()\":1037,\"HPCCColumnMetaData.getColumnName()\":1243,\"String:%\":710,\"String:(\":1572,\"HPCCQuery.getName()\":1919,\"\\u003cr\\u003e\":2467,\"UNKNOWN.equals()\":671,\"HPCCQuery.getQuerySet()\":1894,\"String\":1901,\"ResultSet.next()\":872,\"Iterator.next()\":1187,\"\\u003ccontinue\\u003e\":1362,\"HPCCResultSet.\\u003cinit\\u003e\":2712,\"int:1\":2330,\"HPCCColumnMetaData.getParamType()\":2446,\"int:0\":615,\"\\u003cnullcheck\\u003e\":580,\"String.length()\":610,\"UNKNOWN.iterator()\":1048,\"ResultSet.getString()\":958,\"HPCCJDBCUtils.convertSQLtype2JavaClassName()\":2164,\"HPCCColumnMetaData.\\u003ccast\\u003e\":1187,\"\\u003creturn\\u003e\":2713,\"ArrayList.\\u003cinit\\u003e\":518,\"List.add()\":1735,\"HPCCColumnMetaData.getIndex()\":2508,\"ArrayList.add()\":2165,\"Iterator.hasNext()\":1091,\"String.equalsIgnoreCase()\":1331,\"String:)\":1632,\"HPCCDatabaseMetaData.getProcedures()\":842,\"String.trim()\":659,\"HPCCJDBCUtils.traceoutln()\":459,\"String:.\":1505,\"\\u003cbreak\\u003e\":2600,\"HPCCColumnMetaData.getSqlType()\":1405},\"rawCode\":\"@Override\\n    public ResultSet getProcedureColumns(String catalog, String schemaPattern, String procedureNamePattern,\\n            String columnNamePattern) throws SQLException\\n    {\\n        HPCCJDBCUtils.traceoutln(Level.FINEST, \\\"HPCCDatabaseMetaData getProcedureColumns catalog: \\\" + catalog\\n                + \\\", schemaPattern: \\\" + schemaPattern + \\\", procedureNamePattern: \\\" + procedureNamePattern\\n                + \\\" columnNamePattern: \\\" + columnNamePattern);\\n\\n        List\\u003cList\\u003e procedurecols \\u003d new ArrayList\\u003cList\\u003e();\\n\\n        boolean allcolumnsearch \\u003d columnNamePattern \\u003d\\u003d null || columnNamePattern.length() \\u003d\\u003d 0\\n                || columnNamePattern.trim().equals(\\\"*\\\") || columnNamePattern.trim().equals(\\\"%\\\");\\n\\n        int coltype \\u003d java.sql.Types.NULL;\\n        ResultSet procs \\u003d getProcedures(catalog, schemaPattern, procedureNamePattern);\\n\\n        while (procs.next())\\n        {\\n            HPCCQuery query \\u003d getHpccQuery(procs.getString(PROCEDURE_NAME));\\n\\n            Iterator\\u003cHPCCColumnMetaData\\u003e queryfields \\u003d query.getAllFields().iterator();\\n\\n            while (queryfields.hasNext())\\n            {\\n                HPCCColumnMetaData col \\u003d (HPCCColumnMetaData) queryfields.next();\\n                String fieldname \\u003d col.getColumnName();\\n                if (!allcolumnsearch \\u0026\\u0026 !columnNamePattern.equalsIgnoreCase(fieldname))\\n                    continue;\\n                coltype \\u003d col.getSqlType();\\n\\n                HPCCJDBCUtils.traceoutln(Level.FINEST, \\\"Proc col Found: \\\" + query.getName() + \\\".\\\" + fieldname + \\\" of type: \\\" + coltype\\n                        + \\\"(\\\" + HPCCJDBCUtils.convertSQLtype2JavaClassName(coltype) + \\\")\\\");\\n\\n                ArrayList rowValues \\u003d new ArrayList();\\n                procedurecols.add(rowValues);\\n\\n                /* 1 */rowValues.add(catalog);\\n                /* 2 */rowValues.add(schemaPattern);\\n                /* 3 */rowValues.add(query.getQuerySet() + \\\"::\\\" + query.getName());\\n                /* 4 */rowValues.add(fieldname);\\n                /* 5 */rowValues.add(col.getParamType());\\n                /* 6 */rowValues.add(coltype);\\n                /* 7 */rowValues.add(HPCCJDBCUtils.convertSQLtype2JavaClassName(coltype));\\n                /* 8 */rowValues.add(0);\\n                /* 9 */rowValues.add(0);\\n                /* 10 */rowValues.add(0);\\n                /* 11 */rowValues.add(1);\\n                /* 12 */rowValues.add(procedureNoNulls);\\n                /* 13 */rowValues.add(col.getParamType() \\u003d\\u003d procedureColumnIn ? \\\"Input param index: \\\" + col.getIndex() + \\\".\\\" : \\\"Output param.\\\");\\n\\n                if (!allcolumnsearch)\\n                    break;\\n            }\\n        }\\n\\n        return new HPCCResultSet(procedurecols, proccolsmetacols, \\\"Procedure Columns\\\");\\n    }\"}","234":"{\"expressionStart\":{\"Account.\\u003cinit\\u003e\":477,\"ResultSet.getString()\":511,\"ResultSet.getMetaData()\":358,\"Account.setFirstName()\":617,\"String\":263,\"Account.setPassword()\":574,\"Connection.createStatement()\":203,\"\\u003creturn\\u003e\":776,\"ResultSet.next()\":441,\"ArrayList.\\u003cinit\\u003e\":143,\"ResultSetMetaData.getColumnCount()\":400,\"int:5\":694,\"DBConnection.\\u003cinit\\u003e\":72,\"int:4\":651,\"ArrayList.add()\":710,\"int:3\":607,\"Account.setLastName()\":661,\"Account.setId()\":497,\"Account.setEmail()\":534,\"DBConnection.getDBConnection()\":72,\"int:2\":564,\"int:1\":524,\"Statement.executeQuery()\":245},\"expressionEnd\":{\"Account.\\u003cinit\\u003e\":490,\"ResultSet.getString()\":526,\"ResultSet.getMetaData()\":374,\"Account.setFirstName()\":654,\"String\":286,\"Account.setPassword()\":610,\"Connection.createStatement()\":224,\"\\u003creturn\\u003e\":792,\"ResultSet.next()\":450,\"ArrayList.\\u003cinit\\u003e\":167,\"ResultSetMetaData.getColumnCount()\":421,\"int:5\":695,\"DBConnection.\\u003cinit\\u003e\":90,\"int:4\":652,\"ArrayList.add()\":731,\"int:3\":608,\"Account.setLastName()\":697,\"Account.setId()\":527,\"Account.setEmail()\":567,\"DBConnection.getDBConnection()\":108,\"int:2\":565,\"int:1\":525,\"Statement.executeQuery()\":287},\"rawCode\":\"public static ArrayList\\u003cAccount\\u003e getAccountList() {\\r\\n\\t\\tConnection con \\u003d new DBConnection().getDBConnection();\\r\\n\\t\\tArrayList\\u003cAccount\\u003e accounts \\u003d new ArrayList\\u003cAccount\\u003e();\\r\\n\\t\\t\\r\\n\\t\\ttry {\\r\\n\\t\\t\\tStatement stmt \\u003d con.createStatement();\\r\\n\\t\\t\\tResultSet rs \\u003d stmt.executeQuery(\\\"SELECT * FROM account\\\");\\r\\n\\t\\t\\t\\r\\n\\t\\t\\t// Get result set meta data\\r\\n\\t\\t    ResultSetMetaData rsmd \\u003d rs.getMetaData();\\r\\n\\t\\t    int numColumns \\u003d rsmd.getColumnCount();\\r\\n\\t\\t    \\r\\n\\t\\t\\twhile(rs.next()) {\\r\\n\\t\\t\\t\\tAccount account \\u003d new Account();\\r\\n\\t\\t\\t\\taccount.setId(rs.getString(1));\\r\\n\\t\\t\\t\\taccount.setEmail(rs.getString(2));\\r\\n\\t\\t\\t\\taccount.setPassword(rs.getString(3));\\r\\n\\t\\t\\t\\taccount.setFirstName(rs.getString(4));\\r\\n\\t\\t\\t\\taccount.setLastName(rs.getString(5));\\r\\n\\t\\t\\t\\t\\r\\n\\t\\t\\t\\taccounts.add(account);\\r\\n\\t\\t\\t}\\r\\n\\t\\t} catch(SQLException e) {}\\r\\n\\t\\t\\r\\n\\t\\treturn accounts;\\r\\n\\t}\"}","235":"{\"expressionStart\":{\"\\u003cr\\u003e\":492,\"ResultSet.getMetaData()\":377,\"ResultSet.getString()\":537,\"Connection.createStatement()\":239,\"\\u003creturn\\u003e\":608,\"ResultSet.next()\":460,\"ResultSetMetaData.getColumnCount()\":419,\"DefaultListModel.\\u003cinit\\u003e\":173,\"DBConnection.\\u003cinit\\u003e\":100,\"\\u003ca\\u003e\":508,\"DefaultListModel.add()\":521,\"DBConnection.getDBConnection()\":100,\"int:1\":489,\"Statement.executeQuery()\":281},\"expressionEnd\":{\"\\u003cr\\u003e\":506,\"ResultSet.getMetaData()\":393,\"ResultSet.getString()\":552,\"Connection.createStatement()\":260,\"\\u003creturn\\u003e\":620,\"ResultSet.next()\":469,\"ResultSetMetaData.getColumnCount()\":440,\"DefaultListModel.\\u003cinit\\u003e\":203,\"DBConnection.\\u003cinit\\u003e\":118,\"\\u003ca\\u003e\":511,\"DefaultListModel.add()\":553,\"DBConnection.getDBConnection()\":136,\"int:1\":490,\"Statement.executeQuery()\":306},\"rawCode\":\"public static DefaultListModel\\u003cString\\u003e queryToDefaultListModel(String sqlCmd) {\\r\\n\\t\\tConnection con \\u003d new DBConnection().getDBConnection();\\r\\n\\t\\tDefaultListModel\\u003cString\\u003e list \\u003d new DefaultListModel\\u003cString\\u003e();\\r\\n\\t\\t\\r\\n\\t\\ttry {\\r\\n\\t\\t\\tStatement stmt \\u003d con.createStatement();\\r\\n\\t\\t\\tResultSet rs \\u003d stmt.executeQuery(sqlCmd);\\r\\n\\t\\t\\t\\r\\n\\t\\t\\t// Get result set meta data\\r\\n\\t\\t    ResultSetMetaData rsmd \\u003d rs.getMetaData();\\r\\n\\t\\t    int numColumns \\u003d rsmd.getColumnCount();\\r\\n\\t\\t    \\r\\n\\t\\t\\twhile(rs.next()) {\\r\\n\\t\\t\\t\\tfor (int i\\u003d1; i\\u003cnumColumns+1; i++) {\\r\\n\\t\\t\\t\\t\\tlist.add(i - 1, rs.getString(i));\\r\\n\\t\\t\\t    }\\r\\n\\t\\t\\t}\\r\\n\\t\\t} catch(SQLException e) {}\\r\\n\\t\\t\\r\\n\\t\\treturn list;\\r\\n\\t}\"}","236":"{\"expressionStart\":{\"Account.\\u003cinit\\u003e\":173,\"String:\\u0027\":362,\"ResultSet.getString()\":722,\"ResultSet.getMetaData()\":437,\"Account.setFirstName()\":658,\"String\":282,\"Account.setPassword()\":615,\"Connection.createStatement()\":222,\"\\u003creturn\\u003e\":783,\"ResultSet.next()\":520,\"ResultSetMetaData.getColumnCount()\":479,\"int:5\":735,\"DBConnection.\\u003cinit\\u003e\":114,\"int:4\":692,\"int:3\":648,\"Account.setLastName()\":702,\"Account.setId()\":538,\"Account.setEmail()\":575,\"DBConnection.getDBConnection()\":114,\"int:2\":605,\"int:1\":565,\"Statement.executeQuery()\":264,\"String.toUpperCase()\":73},\"expressionEnd\":{\"Account.\\u003cinit\\u003e\":186,\"String:\\u0027\":365,\"ResultSet.getString()\":737,\"ResultSet.getMetaData()\":453,\"Account.setFirstName()\":695,\"String\":321,\"Account.setPassword()\":651,\"Connection.createStatement()\":243,\"\\u003creturn\\u003e\":798,\"ResultSet.next()\":529,\"ResultSetMetaData.getColumnCount()\":500,\"int:5\":736,\"DBConnection.\\u003cinit\\u003e\":132,\"int:4\":693,\"int:3\":649,\"Account.setLastName()\":738,\"Account.setId()\":568,\"Account.setEmail()\":608,\"DBConnection.getDBConnection()\":150,\"int:2\":606,\"int:1\":566,\"Statement.executeQuery()\":366,\"String.toUpperCase()\":92},\"rawCode\":\"public static Account getAccount(String email, String pass) {\\r\\n\\t\\temail \\u003d email.toUpperCase();\\r\\n\\t\\tConnection con \\u003d new DBConnection().getDBConnection();\\r\\n\\t\\tAccount account \\u003d new Account();\\r\\n\\t\\t\\r\\n\\t\\ttry {\\r\\n\\t\\t\\tStatement stmt \\u003d con.createStatement();\\r\\n\\t\\t\\tResultSet rs \\u003d stmt.executeQuery(\\\"SELECT * FROM account WHERE email \\u003d \\u0027\\\" + email + \\\"\\u0027 AND password \\u003d \\u0027\\\" + pass + \\\"\\u0027\\\");\\r\\n\\t\\t\\t\\r\\n\\t\\t\\t// Get result set meta data\\r\\n\\t\\t    ResultSetMetaData rsmd \\u003d rs.getMetaData();\\r\\n\\t\\t    int numColumns \\u003d rsmd.getColumnCount();\\r\\n\\t\\t    \\r\\n\\t\\t\\twhile(rs.next()) {\\r\\n\\t\\t\\t\\taccount.setId(rs.getString(1));\\r\\n\\t\\t\\t\\taccount.setEmail(rs.getString(2));\\r\\n\\t\\t\\t\\taccount.setPassword(rs.getString(3));\\r\\n\\t\\t\\t\\taccount.setFirstName(rs.getString(4));\\r\\n\\t\\t\\t\\taccount.setLastName(rs.getString(5));\\r\\n\\t\\t\\t}\\r\\n\\t\\t} catch(SQLException e) {}\\r\\n\\t\\t\\r\\n\\t\\treturn account;\\r\\n\\t}\"}","237":"{\"expressionStart\":{\"Coupon.setQuantity()\":762,\"String:\\u0027\":452,\"\\u003cr\\u003e\":307,\"Coupon.setPrice()\":805,\"String\":393,\"StringBuilder.append()\":379,\"Connection.createStatement()\":262,\"ResultSet.next()\":533,\"Coupon.setCreateDate()\":672,\"int:6\":834,\"Statement.close()\":1011,\"int:5\":794,\"DBConnection.\\u003cinit\\u003e\":87,\"int:4\":751,\"int:3\":706,\"int:9\":957,\"int:8\":916,\"Connection.close()\":1029,\"int:7\":877,\"int:2\":661,\"Coupon.setVendor()\":927,\"int:1\":621,\"int:0\":304,\"Statement.executeQuery()\":478,\"Coupon.setCategory()\":845,\"StringBuilder.toString()\":496,\"ResultSet.getString()\":608,\"StringBuilder.\\u003cinit\\u003e\":207,\"Coupon.setTitle()\":632,\"\\u003creturn\\u003e\":1084,\"Coupon.setId()\":595,\"ArrayList.\\u003cinit\\u003e\":156,\"StringBuilder.delete()\":339,\"ArrayList.add()\":968,\"String[].arrayget()\":437,\"Coupon.\\u003cinit\\u003e\":568,\"\\u003ca\\u003e\":327,\"Coupon.setSold()\":888,\"StringBuilder.length()\":356,\"DBConnection.getDBConnection()\":87,\"Coupon.setExpireDate()\":717},\"expressionEnd\":{\"Coupon.setQuantity()\":797,\"String:\\u0027\":455,\"\\u003cr\\u003e\":325,\"Coupon.setPrice()\":837,\"String\":434,\"StringBuilder.append()\":456,\"Connection.createStatement()\":283,\"ResultSet.next()\":542,\"Coupon.setCreateDate()\":709,\"int:6\":835,\"Statement.close()\":1023,\"int:5\":795,\"DBConnection.\\u003cinit\\u003e\":105,\"int:4\":752,\"int:3\":707,\"int:9\":958,\"int:8\":917,\"Connection.close()\":1040,\"int:7\":878,\"int:2\":662,\"Coupon.setVendor()\":960,\"int:1\":622,\"int:0\":305,\"Statement.executeQuery()\":514,\"Coupon.setCategory()\":880,\"StringBuilder.toString()\":513,\"ResultSet.getString()\":623,\"StringBuilder.\\u003cinit\\u003e\":226,\"Coupon.setTitle()\":664,\"\\u003creturn\\u003e\":1099,\"Coupon.setId()\":624,\"ArrayList.\\u003cinit\\u003e\":179,\"StringBuilder.delete()\":372,\"ArrayList.add()\":987,\"String[].arrayget()\":449,\"Coupon.\\u003cinit\\u003e\":580,\"\\u003ca\\u003e\":330,\"Coupon.setSold()\":919,\"StringBuilder.length()\":371,\"DBConnection.getDBConnection()\":123,\"Coupon.setExpireDate()\":754},\"rawCode\":\"public static ArrayList\\u003cCoupon\\u003e searchCoupon(String[] couponIds) {\\r\\n\\t\\tConnection con \\u003d new DBConnection().getDBConnection();\\r\\n\\t\\tArrayList\\u003cCoupon\\u003e coupons \\u003d new ArrayList\\u003cCoupon\\u003e();\\r\\n\\t\\tStringBuilder sqlCmd \\u003d new StringBuilder();\\r\\n\\t\\t\\r\\n\\t\\ttry {\\r\\n\\t\\t\\tStatement stmt \\u003d con.createStatement();\\r\\n\\t\\t\\t\\r\\n\\t\\t\\tfor(int i\\u003d0; i\\u003ccouponIds.length; i++) {\\r\\n\\t\\t\\t\\tsqlCmd.delete(0, sqlCmd.length());\\r\\n\\t\\t\\t\\tsqlCmd.append(\\\"SELECT * FROM coupon WHERE idCoupon \\u003d \\u0027\\\" + couponIds[i] + \\\"\\u0027\\\");\\r\\n\\t\\t\\t\\tResultSet rs \\u003d stmt.executeQuery(sqlCmd.toString());\\r\\n\\t\\t\\t\\t\\r\\n\\t\\t\\t\\twhile(rs.next()) {\\r\\n\\t\\t\\t\\t\\tCoupon coupon \\u003d new Coupon();\\r\\n\\t\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t\\tcoupon.setId(rs.getString(1));\\r\\n\\t\\t\\t\\t\\tcoupon.setTitle(rs.getString(2));\\r\\n\\t\\t\\t\\t\\tcoupon.setCreateDate(rs.getString(3));\\r\\n\\t\\t\\t\\t\\tcoupon.setExpireDate(rs.getString(4));\\r\\n\\t\\t\\t\\t\\tcoupon.setQuantity(rs.getString(5));\\r\\n\\t\\t\\t\\t\\tcoupon.setPrice(rs.getString(6));\\r\\n\\t\\t\\t\\t\\tcoupon.setCategory(rs.getString(7));\\r\\n\\t\\t\\t\\t\\tcoupon.setSold(rs.getString(8));\\r\\n\\t\\t\\t\\t\\tcoupon.setVendor(rs.getString(9));\\r\\n\\t\\t\\t\\t\\tcoupons.add(coupon);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t\\r\\n\\t\\t\\tstmt.close();\\r\\n\\t\\t\\tcon.close();\\r\\n\\t\\t\\t\\r\\n\\t\\t} catch(SQLException e) {}\\r\\n\\t\\t\\r\\n\\t\\treturn coupons;\\r\\n\\t}\"}","238":"{\"expressionStart\":{\"Transaction.setType()\":561,\"String\":283,\"Connection.createStatement()\":223,\"ResultSet.next()\":328,\"Statement.close()\":682,\"int:6\":626,\"DBConnection.\\u003cinit\\u003e\":80,\"int:5\":588,\"int:4\":551,\"int:3\":514,\"Transaction.\\u003cinit\\u003e\":366,\"Connection.close()\":700,\"Transaction.setEmail()\":598,\"int:2\":470,\"int:1\":426,\"Statement.executeQuery()\":265,\"Transaction.setDate()\":524,\"ResultSet.getString()\":538,\"Transaction.setIdTransAcct()\":436,\"\\u003creturn\\u003e\":755,\"ArrayList.\\u003cinit\\u003e\":159,\"ArrayList.add()\":642,\"Transaction.setIdTransaction()\":390,\"DBConnection.getDBConnection()\":80,\"Transaction.setIdTransCoup()\":480},\"expressionEnd\":{\"Transaction.setType()\":591,\"String\":310,\"Connection.createStatement()\":244,\"ResultSet.next()\":337,\"Statement.close()\":694,\"int:6\":627,\"DBConnection.\\u003cinit\\u003e\":98,\"int:5\":589,\"int:4\":552,\"int:3\":515,\"Transaction.\\u003cinit\\u003e\":383,\"Connection.close()\":711,\"Transaction.setEmail()\":629,\"int:2\":471,\"int:1\":427,\"Statement.executeQuery()\":311,\"Transaction.setDate()\":554,\"ResultSet.getString()\":553,\"Transaction.setIdTransAcct()\":473,\"\\u003creturn\\u003e\":775,\"ArrayList.\\u003cinit\\u003e\":187,\"ArrayList.add()\":665,\"Transaction.setIdTransaction()\":429,\"DBConnection.getDBConnection()\":116,\"Transaction.setIdTransCoup()\":517},\"rawCode\":\"public static ArrayList\\u003cTransaction\\u003e getTransactionList() {\\r\\n\\t\\tConnection con \\u003d new DBConnection().getDBConnection();\\r\\n\\t\\tArrayList\\u003cTransaction\\u003e transactions \\u003d new ArrayList\\u003cTransaction\\u003e();\\r\\n\\t\\t\\r\\n\\t\\ttry {\\r\\n\\t\\t\\tStatement stmt \\u003d con.createStatement();\\r\\n\\t\\t\\tResultSet rs \\u003d stmt.executeQuery(\\\"SELECT * FROM transaction\\\");\\r\\n\\t\\t\\t\\r\\n\\t\\t\\twhile(rs.next()) {\\r\\n\\t\\t\\t\\tTransaction trans \\u003d new Transaction();\\r\\n\\t\\t\\t\\ttrans.setIdTransaction(rs.getString(1));\\r\\n\\t\\t\\t\\ttrans.setIdTransAcct(rs.getString(2));\\r\\n\\t\\t\\t\\ttrans.setIdTransCoup(rs.getString(3));\\r\\n\\t\\t\\t\\ttrans.setDate(rs.getString(4));\\r\\n\\t\\t\\t\\ttrans.setType(rs.getString(5));\\r\\n\\t\\t\\t\\ttrans.setEmail(rs.getString(6));\\r\\n\\t\\t\\t\\t\\r\\n\\t\\t\\t\\ttransactions.add(trans);\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t\\r\\n\\t\\t\\tstmt.close();\\r\\n\\t\\t\\tcon.close();\\r\\n\\t\\t\\t\\r\\n\\t\\t} catch(SQLException e) {}\\r\\n\\t\\t\\r\\n\\t\\treturn transactions;\\r\\n\\t}\"}","239":"{\"expressionStart\":{\"ResultSet.getMetaData()\":328,\"ResultSet.getString()\":486,\"DefaultListModel.clear()\":143,\"\\u003cr\\u003e\":443,\"Connection.createStatement()\":191,\"ResultSet.next()\":411,\"ResultSetMetaData.getColumnCount()\":370,\"DBConnection.\\u003cinit\\u003e\":102,\"DefaultListModel.add()\":470,\"\\u003ca\\u003e\":459,\"DBConnection.getDBConnection()\":102,\"int:1\":440,\"Statement.executeQuery()\":233},\"expressionEnd\":{\"ResultSet.getMetaData()\":344,\"ResultSet.getString()\":501,\"DefaultListModel.clear()\":155,\"\\u003cr\\u003e\":457,\"Connection.createStatement()\":212,\"ResultSet.next()\":420,\"ResultSetMetaData.getColumnCount()\":391,\"DBConnection.\\u003cinit\\u003e\":120,\"DefaultListModel.add()\":502,\"\\u003ca\\u003e\":462,\"DBConnection.getDBConnection()\":138,\"int:1\":441,\"Statement.executeQuery()\":257},\"rawCode\":\"public static void updateQueryList(String query, DefaultListModel\\u003cString\\u003e list) {\\r\\n\\t\\tConnection con \\u003d new DBConnection().getDBConnection();\\r\\n\\t\\tlist.clear();\\r\\n\\t\\t\\r\\n\\t\\ttry {\\r\\n\\t\\t\\tStatement stmt \\u003d con.createStatement();\\r\\n\\t\\t\\tResultSet rs \\u003d stmt.executeQuery(query);\\r\\n\\t\\t\\t\\r\\n\\t\\t\\t// Get result set meta data\\r\\n\\t\\t    ResultSetMetaData rsmd \\u003d rs.getMetaData();\\r\\n\\t\\t    int numColumns \\u003d rsmd.getColumnCount();\\r\\n\\t\\t    \\r\\n\\t\\t\\twhile(rs.next()) {\\r\\n\\t\\t\\t\\tfor (int i\\u003d1; i\\u003cnumColumns+1; i++)\\r\\n\\t\\t\\t\\t\\tlist.add(i - 1, rs.getString(i));\\r\\n\\t\\t\\t}\\r\\n\\t\\t} catch(SQLException e) {}\\r\\n\\t}\"}","240":"{\"expressionStart\":{\"DBConnection.\\u003cinit\\u003e\":66,\"String:)\":247,\"Integer.parseInt()\":297,\"ResultSet.getString()\":314,\"DBConnection.getDBConnection()\":66,\"String\":212,\"Connection.createStatement()\":152,\"\\u003creturn\\u003e\":371,\"int:1\":327,\"ResultSet.next()\":271,\"int:0\":119,\"Statement.executeQuery()\":194},\"expressionEnd\":{\"DBConnection.\\u003cinit\\u003e\":84,\"String:)\":250,\"Integer.parseInt()\":330,\"ResultSet.getString()\":329,\"DBConnection.getDBConnection()\":102,\"String\":236,\"Connection.createStatement()\":173,\"\\u003creturn\\u003e\":384,\"int:1\":328,\"ResultSet.next()\":280,\"int:0\":120,\"Statement.executeQuery()\":251},\"rawCode\":\"public static int getRowCount(String query) {\\r\\n\\t\\tConnection con \\u003d new DBConnection().getDBConnection();\\r\\n\\t\\tint count \\u003d 0;\\r\\n\\t\\ttry {\\r\\n\\t\\t\\tStatement stmt \\u003d con.createStatement();\\r\\n\\t\\t\\tResultSet rs \\u003d stmt.executeQuery(\\\"SELECT COUNT(*) FROM (\\\" + query + \\\")\\\");\\r\\n\\t\\t    \\r\\n\\t\\t\\twhile(rs.next()) {\\r\\n\\t\\t\\t\\tcount \\u003d Integer.parseInt(rs.getString(1));\\r\\n\\t\\t\\t}\\r\\n\\t\\t} catch(SQLException e) {}\\r\\n\\t\\treturn count;\\r\\n\\t}\"}","241":"{\"expressionStart\":{\"Coupon.setQuantity()\":651,\"Coupon.setPrice()\":693,\"String\":258,\"Connection.createStatement()\":198,\"ResultSet.next()\":435,\"ResultSetMetaData.getColumnCount()\":394,\"Coupon.setCreateDate()\":563,\"int:6\":722,\"Statement.close()\":888,\"int:5\":683,\"DBConnection.\\u003cinit\\u003e\":70,\"int:4\":641,\"int:3\":597,\"int:9\":842,\"int:8\":802,\"Connection.close()\":906,\"int:7\":764,\"int:2\":553,\"int:1\":514,\"Coupon.setVendor()\":812,\"Statement.executeQuery()\":240,\"Coupon.setCategory()\":732,\"ResultSet.getString()\":751,\"ResultSet.getMetaData()\":352,\"Coupon.setTitle()\":524,\"\\u003creturn\\u003e\":961,\"Coupon.setId()\":488,\"ArrayList.\\u003cinit\\u003e\":139,\"ArrayList.add()\":852,\"Coupon.\\u003cinit\\u003e\":469,\"Coupon.setSold()\":774,\"DBConnection.getDBConnection()\":70,\"Coupon.setExpireDate()\":607},\"expressionEnd\":{\"Coupon.setQuantity()\":686,\"Coupon.setPrice()\":725,\"String\":280,\"Connection.createStatement()\":219,\"ResultSet.next()\":444,\"ResultSetMetaData.getColumnCount()\":415,\"Coupon.setCreateDate()\":600,\"int:6\":723,\"Statement.close()\":900,\"int:5\":684,\"DBConnection.\\u003cinit\\u003e\":88,\"int:4\":642,\"int:3\":598,\"int:9\":843,\"int:8\":803,\"Connection.close()\":917,\"int:7\":765,\"int:2\":554,\"int:1\":515,\"Coupon.setVendor()\":845,\"Statement.executeQuery()\":281,\"Coupon.setCategory()\":767,\"ResultSet.getString()\":766,\"ResultSet.getMetaData()\":368,\"Coupon.setTitle()\":556,\"\\u003creturn\\u003e\":976,\"Coupon.setId()\":517,\"ArrayList.\\u003cinit\\u003e\":162,\"ArrayList.add()\":871,\"Coupon.\\u003cinit\\u003e\":481,\"Coupon.setSold()\":805,\"DBConnection.getDBConnection()\":106,\"Coupon.setExpireDate()\":644},\"rawCode\":\"public static ArrayList\\u003cCoupon\\u003e getCouponList() {\\r\\n\\t\\tConnection con \\u003d new DBConnection().getDBConnection();\\r\\n\\t\\tArrayList\\u003cCoupon\\u003e coupons \\u003d new ArrayList\\u003cCoupon\\u003e();\\r\\n\\t\\t\\r\\n\\t\\ttry {\\r\\n\\t\\t\\tStatement stmt \\u003d con.createStatement();\\r\\n\\t\\t\\tResultSet rs \\u003d stmt.executeQuery(\\\"SELECT * FROM coupon\\\");\\r\\n\\t\\t\\t\\r\\n\\t\\t\\t// Get result set meta data\\r\\n\\t\\t    ResultSetMetaData rsmd \\u003d rs.getMetaData();\\r\\n\\t\\t    int numColumns \\u003d rsmd.getColumnCount();\\r\\n\\t\\t    \\r\\n\\t\\t\\twhile(rs.next()) {\\r\\n\\t\\t\\t\\tCoupon coupon \\u003d new Coupon();\\r\\n\\t\\t\\t\\tcoupon.setId(rs.getString(1));\\r\\n\\t\\t\\t\\tcoupon.setTitle(rs.getString(2));\\r\\n\\t\\t\\t\\tcoupon.setCreateDate(rs.getString(3));\\r\\n\\t\\t\\t\\tcoupon.setExpireDate(rs.getString(4));\\r\\n\\t\\t\\t\\tcoupon.setQuantity(rs.getString(5));\\r\\n\\t\\t\\t\\tcoupon.setPrice(rs.getString(6));\\r\\n\\t\\t\\t\\tcoupon.setCategory(rs.getString(7));\\r\\n\\t\\t\\t\\tcoupon.setSold(rs.getString(8));\\r\\n\\t\\t\\t\\tcoupon.setVendor(rs.getString(9));\\r\\n\\t\\t\\t\\tcoupons.add(coupon);\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t\\r\\n\\t\\t\\tstmt.close();\\r\\n\\t\\t\\tcon.close();\\r\\n\\t\\t\\t\\r\\n\\t\\t} catch(SQLException e) {}\\r\\n\\t\\t\\r\\n\\t\\treturn coupons;\\r\\n\\t}\"}","242":"{\"expressionStart\":{\"String:\\u0027\":218,\"Coupon.setQuantity()\":522,\"Coupon.setPrice()\":564,\"String\":163,\"Connection.createStatement()\":257,\"ResultSet.next()\":341,\"Coupon.setCreateDate()\":434,\"int:6\":593,\"Statement.close()\":749,\"DBConnection.\\u003cinit\\u003e\":73,\"int:5\":554,\"int:4\":512,\"int:3\":468,\"int:9\":713,\"int:8\":673,\"int:7\":635,\"Connection.close()\":767,\"ResultSet.close()\":733,\"int:2\":424,\"int:1\":385,\"Coupon.setVendor()\":683,\"Statement.executeQuery()\":299,\"Coupon.setCategory()\":603,\"ResultSet.getString()\":660,\"Coupon.setTitle()\":395,\"Coupon.setId()\":359,\"\\u003creturn\\u003e\":822,\"Coupon.\\u003cinit\\u003e\":130,\"Coupon.setSold()\":645,\"DBConnection.getDBConnection()\":73,\"Coupon.setExpireDate()\":478},\"expressionEnd\":{\"String:\\u0027\":221,\"Coupon.setQuantity()\":557,\"Coupon.setPrice()\":596,\"String\":204,\"Connection.createStatement()\":278,\"ResultSet.next()\":350,\"Coupon.setCreateDate()\":471,\"int:6\":594,\"Statement.close()\":761,\"DBConnection.\\u003cinit\\u003e\":91,\"int:5\":555,\"int:4\":513,\"int:3\":469,\"int:9\":714,\"int:8\":674,\"int:7\":636,\"Connection.close()\":778,\"ResultSet.close()\":743,\"int:2\":425,\"int:1\":386,\"Coupon.setVendor()\":716,\"Statement.executeQuery()\":324,\"Coupon.setCategory()\":638,\"ResultSet.getString()\":675,\"Coupon.setTitle()\":427,\"Coupon.setId()\":388,\"\\u003creturn\\u003e\":836,\"Coupon.\\u003cinit\\u003e\":142,\"Coupon.setSold()\":676,\"DBConnection.getDBConnection()\":109,\"Coupon.setExpireDate()\":515},\"rawCode\":\"public static Coupon searchCoupon(String couponId) {\\r\\n\\t\\tConnection con \\u003d new DBConnection().getDBConnection();\\r\\n\\t\\tCoupon coupon \\u003d new Coupon();\\r\\n\\t\\tString sqlCmd \\u003d \\\"SELECT * FROM coupon WHERE idCoupon \\u003d \\u0027\\\" + couponId + \\\"\\u0027\\\";\\r\\n\\t\\t\\r\\n\\t\\ttry {\\r\\n\\t\\t\\tStatement stmt \\u003d con.createStatement();\\r\\n\\t\\t\\tResultSet rs \\u003d stmt.executeQuery(sqlCmd);\\r\\n\\t\\t\\t\\r\\n\\t\\t\\twhile(rs.next()) {\\r\\n\\t\\t\\t\\tcoupon.setId(rs.getString(1));\\r\\n\\t\\t\\t\\tcoupon.setTitle(rs.getString(2));\\r\\n\\t\\t\\t\\tcoupon.setCreateDate(rs.getString(3));\\r\\n\\t\\t\\t\\tcoupon.setExpireDate(rs.getString(4));\\r\\n\\t\\t\\t\\tcoupon.setQuantity(rs.getString(5));\\r\\n\\t\\t\\t\\tcoupon.setPrice(rs.getString(6));\\r\\n\\t\\t\\t\\tcoupon.setCategory(rs.getString(7));\\r\\n\\t\\t\\t\\tcoupon.setSold(rs.getString(8));\\r\\n\\t\\t\\t\\tcoupon.setVendor(rs.getString(9));\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t\\r\\n\\t\\t\\trs.close();\\r\\n\\t\\t\\tstmt.close();\\r\\n\\t\\t\\tcon.close();\\r\\n\\t\\t\\t\\r\\n\\t\\t} catch(SQLException e) {}\\r\\n\\t\\t\\r\\n\\t\\treturn coupon;\\r\\n\\t}\"}","243":"{\"expressionStart\":{\"Account.\\u003cinit\\u003e\":132,\"String:\\u0027\":299,\"ResultSet.getString()\":482,\"Account.setFirstName()\":461,\"String\":241,\"Connection.createStatement()\":181,\"Account.setPassword()\":418,\"\\u003creturn\\u003e\":631,\"ResultSet.next()\":323,\"Statement.close()\":558,\"DBConnection.\\u003cinit\\u003e\":73,\"int:5\":538,\"int:4\":495,\"int:3\":451,\"Account.setLastName()\":505,\"Connection.close()\":576,\"Account.setEmail()\":378,\"Account.setId()\":341,\"DBConnection.getDBConnection()\":73,\"int:2\":408,\"int:1\":368,\"Statement.executeQuery()\":223},\"expressionEnd\":{\"Account.\\u003cinit\\u003e\":145,\"String:\\u0027\":302,\"ResultSet.getString()\":497,\"Account.setFirstName()\":498,\"String\":284,\"Connection.createStatement()\":202,\"Account.setPassword()\":454,\"\\u003creturn\\u003e\":646,\"ResultSet.next()\":332,\"Statement.close()\":570,\"DBConnection.\\u003cinit\\u003e\":91,\"int:5\":539,\"int:4\":496,\"int:3\":452,\"Account.setLastName()\":541,\"Connection.close()\":587,\"Account.setEmail()\":411,\"Account.setId()\":371,\"DBConnection.getDBConnection()\":109,\"int:2\":409,\"int:1\":369,\"Statement.executeQuery()\":303},\"rawCode\":\"public static Account getAccount(String accountId) {\\r\\n\\t\\tConnection con \\u003d new DBConnection().getDBConnection();\\r\\n\\t\\tAccount account \\u003d new Account();\\r\\n\\t\\t\\r\\n\\t\\ttry {\\r\\n\\t\\t\\tStatement stmt \\u003d con.createStatement();\\r\\n\\t\\t\\tResultSet rs \\u003d stmt.executeQuery(\\\"SELECT * FROM account WHERE idAccount \\u003d \\u0027\\\" + accountId + \\\"\\u0027\\\");\\r\\n\\t\\t    \\r\\n\\t\\t\\twhile(rs.next()) {\\r\\n\\t\\t\\t\\taccount.setId(rs.getString(1));\\r\\n\\t\\t\\t\\taccount.setEmail(rs.getString(2));\\r\\n\\t\\t\\t\\taccount.setPassword(rs.getString(3));\\r\\n\\t\\t\\t\\taccount.setFirstName(rs.getString(4));\\r\\n\\t\\t\\t\\taccount.setLastName(rs.getString(5));\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t\\r\\n\\t\\t\\tstmt.close();\\r\\n\\t\\t\\tcon.close();\\r\\n\\t\\t\\t\\r\\n\\t\\t} catch(SQLException e) {}\\r\\n\\t\\t\\r\\n\\t\\treturn account;\\r\\n\\t}\"}","244":"{\"expressionStart\":{\"ResultSet.getMetaData()\":349,\"ResultSet.getString()\":502,\"\\u003cr\\u003e\":464,\"Connection.createStatement()\":211,\"\\u003creturn\\u003e\":573,\"ResultSet.next()\":432,\"ArrayList.\\u003cinit\\u003e\":152,\"ResultSetMetaData.getColumnCount()\":391,\"DBConnection.\\u003cinit\\u003e\":86,\"ArrayList.add()\":493,\"\\u003ca\\u003e\":480,\"DBConnection.getDBConnection()\":86,\"int:1\":461,\"Statement.executeQuery()\":253},\"expressionEnd\":{\"ResultSet.getMetaData()\":365,\"ResultSet.getString()\":517,\"\\u003cr\\u003e\":478,\"Connection.createStatement()\":232,\"\\u003creturn\\u003e\":585,\"ResultSet.next()\":441,\"ArrayList.\\u003cinit\\u003e\":175,\"ResultSetMetaData.getColumnCount()\":412,\"DBConnection.\\u003cinit\\u003e\":104,\"ArrayList.add()\":518,\"\\u003ca\\u003e\":483,\"DBConnection.getDBConnection()\":122,\"int:1\":462,\"Statement.executeQuery()\":278},\"rawCode\":\"public static ArrayList\\u003cString\\u003e queryToArrayList(String sqlCmd) {\\r\\n\\t\\tConnection con \\u003d new DBConnection().getDBConnection();\\r\\n\\t\\tArrayList\\u003cString\\u003e list \\u003d new ArrayList\\u003cString\\u003e();\\r\\n\\t\\t\\r\\n\\t\\ttry {\\r\\n\\t\\t\\tStatement stmt \\u003d con.createStatement();\\r\\n\\t\\t\\tResultSet rs \\u003d stmt.executeQuery(sqlCmd);\\r\\n\\t\\t\\t\\r\\n\\t\\t\\t// Get result set meta data\\r\\n\\t\\t    ResultSetMetaData rsmd \\u003d rs.getMetaData();\\r\\n\\t\\t    int numColumns \\u003d rsmd.getColumnCount();\\r\\n\\t\\t    \\r\\n\\t\\t\\twhile(rs.next()) {\\r\\n\\t\\t\\t\\tfor (int i\\u003d1; i\\u003cnumColumns+1; i++) {\\r\\n\\t\\t\\t\\t\\tlist.add(rs.getString(i));\\r\\n\\t\\t\\t    }\\r\\n\\t\\t\\t}\\r\\n\\t\\t} catch(SQLException e) {}\\r\\n\\t\\t\\r\\n\\t\\treturn list;\\r\\n\\t}\"}","245":"{\"expressionStart\":{\"Statement.executeUpdate()\":145,\"Math.log()\":842,\"ResultSet.getString()\":1445,\"StatementTest.assertEquals()\":1380,\"String\":164,\"Connection.createStatement()\":86,\"ResultSet.next()\":1745,\"int:4\":1505,\"StatementTest.assertTrue()\":601,\"int:3\":860,\"int:2\":878,\"int:1\":253,\"Statement.executeQuery()\":1810,\"int:0\":1609,\"double:0.00001\":882,\"ResultSet.getDouble()\":865},\"expressionEnd\":{\"Statement.executeUpdate()\":230,\"Math.log()\":863,\"ResultSet.getString()\":1460,\"StatementTest.assertEquals()\":1415,\"String\":229,\"Connection.createStatement()\":107,\"ResultSet.next()\":1754,\"int:4\":1506,\"StatementTest.assertTrue()\":622,\"int:3\":861,\"int:2\":879,\"int:1\":254,\"Statement.executeQuery()\":1901,\"int:0\":1610,\"double:0.00001\":889,\"ResultSet.getDouble()\":880},\"rawCode\":\"public void testEscapeProcessing() throws SQLException\\n    {\\n        Statement stmt \\u003d con.createStatement();\\n        int count;\\n\\n        count \\u003d stmt.executeUpdate(\\\"insert into escapetest (ts) values ({ts \\u00271900-01-01 00:00:00\\u0027})\\\");\\n        assertEquals(1, count);\\n\\n        count \\u003d stmt.executeUpdate(\\\"insert into escapetest (d) values ({d \\u00271900-01-01\\u0027})\\\");\\n        assertEquals(1, count);\\n\\n        count \\u003d stmt.executeUpdate(\\\"insert into escapetest (t) values ({t \\u002700:00:00\\u0027})\\\");\\n        assertEquals(1, count);\\n\\n        ResultSet rs \\u003d stmt.executeQuery( \\\"select {fn version()} as version\\\" );\\n        assertTrue(rs.next());\\n        \\n        // check nested and multiple escaped functions\\n        rs \\u003d stmt.executeQuery( \\\"select {fn version()} as version, {fn log({fn log(3.0)})} as log\\\" );\\n        assertTrue(rs.next());\\n        assertEquals(Math.log(Math.log(3)), rs.getDouble(2), 0.00001);\\n\\n        stmt.executeUpdate(\\\"UPDATE escapetest SET \\\\\\\")\\\\\\\" \\u003d \\u0027a\\u0027, \\\\\\\"\\\\\\\"\\\\\\\"){a}\\u0027\\\\\\\" \\u003d \\u0027b\\u0027\\\");\\n        \\n        // check \\\"difficult\\\" values\\n        rs \\u003d stmt.executeQuery(\\\"select {fn concat(\\u0027)\\u0027,escapetest.\\\\\\\")\\\\\\\")} as concat\\\" +\\n                \\\", {fn concat(\\u0027{\\u0027,\\u0027}\\u0027)} \\\" +\\n                \\\", {fn concat(\\u0027\\u0027\\u0027\\u0027,\\u0027\\\\\\\"\\u0027)} \\\" +\\n                \\\", {fn concat(\\\\\\\"\\\\\\\"\\\\\\\"){a}\\u0027\\\\\\\", \\u0027\\u0027\\u0027}\\u0027\\u0027\\u0027)} \\\" +\\n                \\\" FROM escapetest\\\");\\n        assertTrue(rs.next());\\n        assertEquals(\\\")a\\\", rs.getString(1));\\n        assertEquals(\\\"{}\\\", rs.getString(2));\\n        assertEquals(\\\"\\u0027\\\\\\\"\\\", rs.getString(3));\\n        assertEquals(\\\"b\\u0027}\\u0027\\\", rs.getString(4));\\n        \\n        count \\u003d stmt.executeUpdate( \\\"create temp table b (i int)\\\" );\\n        assertEquals(0, count);\\n\\n        rs \\u003d stmt.executeQuery( \\\"select * from {oj test_statement a left outer join b on (a.i\\u003db.i)} \\\");\\n        assertTrue(!rs.next());\\n        // test escape escape character\\n        rs \\u003d stmt.executeQuery(\\\"select str2 from comparisontest where str1 like \\u0027|_abcd\\u0027 {escape \\u0027|\\u0027} \\\");\\n        assertTrue(rs.next());\\n        assertEquals(\\\"_found\\\",rs.getString(1));\\n        rs \\u003d stmt.executeQuery(\\\"select str2 from comparisontest where str1 like \\u0027|%abcd\\u0027 {escape \\u0027|\\u0027} \\\");\\n        assertTrue(rs.next());\\n        assertEquals(\\\"%found\\\",rs.getString(1));\\n    }\"}","246":"{\"expressionStart\":{\"int:5\":171,\"StatementTest.assertTrue()\":228,\"Connection.prepareStatement()\":95,\"PreparedStatement.executeQuery()\":198,\"ResultSet.getString()\":278,\"PreparedStatement.setInt()\":155,\"StatementTest.assertEquals()\":259,\"String\":272,\"int:1\":168,\"ResultSet.next()\":239},\"expressionEnd\":{\"int:5\":172,\"StatementTest.assertTrue()\":249,\"Connection.prepareStatement()\":145,\"PreparedStatement.executeQuery()\":218,\"ResultSet.getString()\":293,\"PreparedStatement.setInt()\":173,\"StatementTest.assertEquals()\":294,\"String\":276,\"int:1\":169,\"ResultSet.next()\":248},\"rawCode\":\"public void testPreparedFunction() throws SQLException\\n    {\\n        PreparedStatement pstmt \\u003d con.prepareStatement(\\\"SELECT {fn concat(\\u0027a\\u0027, ?)}\\\");\\n        pstmt.setInt(1, 5);\\n        ResultSet rs \\u003d pstmt.executeQuery();\\n        assertTrue(rs.next());\\n        assertEquals(\\\"a5\\\", rs.getString(1));\\n    }\"}","247":"{\"expressionStart\":{\"ResultSet.getString()\":330,\"StatementTest.assertEquals()\":520,\"String\":445,\"TestUtil.getDatabase()\":533,\"Connection.createStatement()\":85,\"TestUtil.getUser()\":311,\"ResultSet.next()\":235,\"String:2\":268,\"StatementTest.assertTrue()\":224,\"TestUtil.haveMinimumServerVersion()\":361,\"int:2\":343,\"int:1\":285,\"Statement.executeQuery()\":427},\"expressionEnd\":{\"ResultSet.getString()\":345,\"StatementTest.assertEquals()\":572,\"String\":470,\"TestUtil.getDatabase()\":555,\"Connection.createStatement()\":106,\"TestUtil.getUser()\":329,\"ResultSet.next()\":244,\"String:2\":271,\"StatementTest.assertTrue()\":245,\"TestUtil.haveMinimumServerVersion()\":406,\"int:2\":344,\"int:1\":286,\"Statement.executeQuery()\":471},\"rawCode\":\"public void testSystemFunctions() throws SQLException\\n    {\\n        Statement stmt \\u003d con.createStatement();\\n        ResultSet rs \\u003d stmt.executeQuery(\\\"select {fn ifnull(null,\\u00272\\u0027)}\\\" +\\n                \\\",{fn user()} \\\");\\n        assertTrue(rs.next());\\n        assertEquals(\\\"2\\\",rs.getString(1));\\n        assertEquals(TestUtil.getUser(),rs.getString(2));\\n\\n        if (TestUtil.haveMinimumServerVersion(con, \\\"7.3\\\")) {\\n            rs \\u003d stmt.executeQuery(\\\"select {fn database()} \\\");\\n            assertTrue(rs.next());\\n            assertEquals(TestUtil.getDatabase(),rs.getString(1));\\n        }\\n    }\"}","248":"{\"expressionStart\":{\"String:12\":615,\"ResultSet.getString()\":1530,\"StatementTest.assertEquals()\":1468,\"String\":1481,\"Connection.createStatement()\":85,\"ResultSet.next()\":408,\"int\":441,\"String: \":480,\"int:6\":671,\"int:5\":633,\"int:4\":589,\"StatementTest.assertTrue()\":397,\"TestUtil.haveMinimumServerVersion()\":765,\"int:3\":543,\"int:8\":747,\"int:7\":709,\"int:2\":497,\"int:1\":454,\"Statement.executeQuery()\":1109,\"int:0\":735,\"ResultSet.getInt()\":444},\"expressionEnd\":{\"String:12\":619,\"ResultSet.getString()\":1545,\"StatementTest.assertEquals()\":1502,\"String\":1485,\"Connection.createStatement()\":106,\"ResultSet.next()\":417,\"int\":443,\"String: \":483,\"int:6\":672,\"int:5\":634,\"int:4\":590,\"StatementTest.assertTrue()\":418,\"TestUtil.haveMinimumServerVersion()\":810,\"int:3\":544,\"int:8\":748,\"int:7\":710,\"int:2\":498,\"int:1\":455,\"Statement.executeQuery()\":1337,\"int:0\":736,\"ResultSet.getInt()\":456},\"rawCode\":\"public void testStringFunctions() throws SQLException\\n    {\\n        Statement stmt \\u003d con.createStatement();\\n        ResultSet rs \\u003d stmt.executeQuery(\\\"select {fn ascii(\\u0027 test\\u0027)},{fn char(32)}\\\" +\\n                \\\",{fn concat(\\u0027ab\\u0027,\\u0027cd\\u0027)}\\\" +\\n                \\\",{fn lcase(\\u0027aBcD\\u0027)},{fn left(\\u00271234\\u0027,2)},{fn length(\\u0027123 \\u0027)}\\\" +\\n                \\\",{fn locate(\\u0027bc\\u0027,\\u0027abc\\u0027)},{fn locate(\\u0027bc\\u0027,\\u0027abc\\u0027,3)}\\\");\\n        assertTrue(rs.next());\\n        assertEquals(32,rs.getInt(1));\\n        assertEquals(\\\" \\\",rs.getString(2));\\n        assertEquals(\\\"abcd\\\",rs.getString(3));\\n        assertEquals(\\\"abcd\\\",rs.getString(4));\\n        assertEquals(\\\"12\\\",rs.getString(5));\\n        assertEquals(3,rs.getInt(6));\\n        assertEquals(2,rs.getInt(7));\\n        assertEquals(0,rs.getInt(8));\\n\\n        if (TestUtil.haveMinimumServerVersion(con, \\\"7.3\\\")) {\\n            rs \\u003d stmt.executeQuery(\\\"SELECT {fn insert(\\u0027abcdef\\u0027,3,2,\\u0027xxxx\\u0027)}\\\" +\\n                \\\",{fn replace(\\u0027abcdbc\\u0027,\\u0027bc\\u0027,\\u0027x\\u0027)}\\\");\\n            assertTrue(rs.next());\\n            assertEquals(\\\"abxxxxef\\\",rs.getString(1));\\n            assertEquals(\\\"axdx\\\",rs.getString(2));\\n        }\\n\\n        rs \\u003d stmt.executeQuery(\\\"select {fn ltrim(\\u0027 ab\\u0027)},{fn repeat(\\u0027ab\\u0027,2)}\\\" +\\n                \\\",{fn right(\\u0027abcde\\u0027,2)},{fn rtrim(\\u0027ab \\u0027)}\\\" +\\n                \\\",{fn space(3)},{fn substring(\\u0027abcd\\u0027,2,2)}\\\" +\\n                \\\",{fn ucase(\\u0027aBcD\\u0027)}\\\");\\n        assertTrue(rs.next());\\n        assertEquals(\\\"ab\\\",rs.getString(1));\\n        assertEquals(\\\"abab\\\",rs.getString(2));\\n        assertEquals(\\\"de\\\",rs.getString(3));\\n        assertEquals(\\\"ab\\\",rs.getString(4));\\n        assertEquals(\\\"   \\\",rs.getString(5));\\n        assertEquals(\\\"bc\\\",rs.getString(6));\\n        assertEquals(\\\"ABCD\\\",rs.getString(7));\\n    }\"}","249":"{\"expressionStart\":{\"Location.setCity()\":489,\"DataSource.executeQuery()\":253,\"ResultSet.getString()\":553,\"Location.setPhone()\":635,\"String\":570,\"Location.setStreet()\":583,\"String:id\":477,\"\\u003creturn\\u003e\":1144,\"ArrayList.toArray()\":1088,\"Location.setId()\":448,\"ResultSet.next()\":387,\"ArrayList.\\u003cinit\\u003e\":152,\"{Location}\":1106,\"ArrayList.add()\":740,\"null:null\":932,\"Location.\\u003cinit\\u003e\":428,\"Location.setZip()\":537,\"Location.setEmail()\":685,\"ResultSet.getInt()\":463,\"ArrayList.size()\":1119},\"expressionEnd\":{\"Location.setCity()\":531,\"DataSource.executeQuery()\":303,\"ResultSet.getString()\":576,\"Location.setPhone()\":679,\"String\":575,\"Location.setStreet()\":629,\"String:id\":481,\"\\u003creturn\\u003e\":1166,\"ArrayList.toArray()\":1137,\"Location.setId()\":483,\"ResultSet.next()\":400,\"ArrayList.\\u003cinit\\u003e\":177,\"{Location}\":1136,\"ArrayList.add()\":763,\"null:null\":936,\"Location.\\u003cinit\\u003e\":442,\"Location.setZip()\":577,\"Location.setEmail()\":729,\"ResultSet.getInt()\":482,\"ArrayList.size()\":1135},\"rawCode\":\"/**\\n\\t * Returns all existing locations.\\n\\t * @return Array of locations.\\n\\t */\\n\\tpublic Location[] getAllLocations(){\\n\\t\\t\\n\\t\\tArrayList\\u003cLocation\\u003e locations \\u003d new ArrayList\\u003cLocation\\u003e();\\n\\t\\t\\n\\t\\ttry {\\n\\t\\t\\t//SQL-Query to find out all locations\\n\\t\\t\\tResultSet result \\u003d DataSource.executeQuery(\\\"SELECT * FROM locations\\\");\\n\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t//create a object from each record and add it to the ArrayList\\n\\t\\t\\twhile(result.next()) {\\n\\t\\t\\t\\tLocation location \\u003d new Location();\\n\\t\\t\\t\\tlocation.setId(result.getInt(\\\"id\\\"));\\n\\t\\t\\t\\tlocation.setCity(result.getString(\\\"city\\\"));\\n\\t\\t\\t\\tlocation.setZip(result.getString(\\\"zip\\\"));\\n\\t\\t\\t\\tlocation.setStreet(result.getString(\\\"street\\\"));\\n\\t\\t\\t\\tlocation.setPhone(result.getString(\\\"phone\\\"));\\n\\t\\t\\t\\tlocation.setEmail(result.getString(\\\"email\\\"));\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tlocations.add(location);\\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t} catch (ClassNotFoundException e) {\\n\\t\\t\\t//returns null in error case\\n\\t\\t\\treturn null;\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\t//returns null in error case\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t\\t\\n\\t\\t//converts the ArrayList to an array. This is required because AXIS2 can not transport generic lists over SOAP\\n\\t\\tLocation[] locationsArray \\u003d locations.toArray(new Location[locations.size()]);\\n\\t\\t\\n\\t\\treturn locationsArray;\\n\\t}\"}","250":"{\"expressionStart\":{\"Customer.setZip()\":977,\"Customer.setPassword()\":549,\"ResultSet.getString()\":946,\"DataSource.executeQuery()\":287,\"Customer.setStreet()\":877,\"String\":963,\"Customer.setCity()\":929,\"\\u003creturn\\u003e\":1057,\"String:id\":537,\"ResultSet.first()\":358,\"Customer.setSalutation()\":655,\"Customer.setForename()\":715,\"Customer.setEmail()\":605,\"Customer.\\u003cinit\\u003e\":447,\"null:null\":1153,\"Customer.setLastname()\":771,\"Customer.setId()\":508,\"Customer.setPhone()\":827,\"ResultSet.getInt()\":523},\"expressionEnd\":{\"Customer.setZip()\":1017,\"Customer.setPassword()\":599,\"ResultSet.getString()\":970,\"DataSource.executeQuery()\":352,\"Customer.setStreet()\":923,\"String\":969,\"Customer.setCity()\":971,\"\\u003creturn\\u003e\":1073,\"String:id\":541,\"ResultSet.first()\":372,\"Customer.setSalutation()\":709,\"Customer.setForename()\":765,\"Customer.setEmail()\":649,\"Customer.\\u003cinit\\u003e\":461,\"null:null\":1157,\"Customer.setLastname()\":821,\"Customer.setId()\":543,\"Customer.setPhone()\":871,\"ResultSet.getInt()\":542},\"rawCode\":\"/**\\n\\t * Method to find a specific customer by its customer id.\\n\\t * @param id ID of the customer \\n\\t * @return Returns a specific customer object.\\n\\t */\\n\\tpublic Customer getCustomerById(int id) \\n\\t{\\n\\t\\t\\ttry {\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t//SQL-Query to read the customer from the database\\n\\t\\t\\t\\tResultSet result \\u003d DataSource.executeQuery(\\\"SELECT * FROM customers WHERE id\\u003d\\\" + id);\\n\\t\\t\\t\\tresult.first();\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t//creating a new instance of a customer\\n\\t\\t\\t\\tCustomer customer \\u003d new Customer();\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t//filling customer informations\\n\\t\\t\\t\\tcustomer.setId(result.getInt(\\\"id\\\"));\\n\\t\\t\\t\\tcustomer.setPassword(result.getString(\\\"password\\\"));\\n\\t\\t\\t\\tcustomer.setEmail(result.getString(\\\"email\\\"));\\n\\t\\t\\t\\tcustomer.setSalutation(result.getString(\\\"salutation\\\"));\\n\\t\\t\\t\\tcustomer.setForename(result.getString(\\\"forename\\\"));\\n\\t\\t\\t\\tcustomer.setLastname(result.getString(\\\"lastname\\\"));\\n\\t\\t\\t\\tcustomer.setPhone(result.getString(\\\"phone\\\"));\\n\\t\\t\\t\\tcustomer.setStreet(result.getString(\\\"street\\\"));\\n\\t\\t\\t\\tcustomer.setCity(result.getString(\\\"city\\\"));\\n\\t\\t\\t\\tcustomer.setZip(result.getString(\\\"zip\\\"));\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t//returning the customer\\n\\t\\t\\t\\treturn customer;\\n\\t\\t\\t\\t\\n\\t\\t\\t}\\n\\t\\t\\tcatch (Exception e) {\\n\\t\\t\\t\\t//returns null in error case\\n\\t\\t\\t\\treturn null;\\n\\t\\t\\t}\\n\\t}\"}","251":"{\"expressionStart\":{\"Customer.setZip()\":1156,\"Customer.setPassword()\":1202,\"Customer.getPassword()\":1429,\"String:\\u0027\":575,\"ResultSet.getString()\":915,\"DataSource.executeQuery()\":501,\"Customer.setStreet()\":1056,\"UNKNOWN.equals()\":1429,\"String\":932,\"Customer.setCity()\":1108,\"\\u003creturn\\u003e\":1651,\"String:id\":772,\"ResultSet.next()\":592,\"Customer.setSalutation()\":834,\"Customer.setForename()\":894,\"Customer.setEmail()\":784,\"Customer.\\u003cinit\\u003e\":682,\"null:null\":1658,\"Customer.setLastname()\":950,\"Customer.setId()\":743,\"Customer.setPhone()\":1006,\"ResultSet.getInt()\":758},\"expressionEnd\":{\"Customer.setZip()\":1196,\"Customer.setPassword()\":1252,\"Customer.getPassword()\":1451,\"String:\\u0027\":578,\"ResultSet.getString()\":943,\"DataSource.executeQuery()\":579,\"Customer.setStreet()\":1102,\"UNKNOWN.equals()\":1468,\"String\":942,\"Customer.setCity()\":1150,\"\\u003creturn\\u003e\":1663,\"String:id\":776,\"ResultSet.next()\":605,\"Customer.setSalutation()\":888,\"Customer.setForename()\":944,\"Customer.setEmail()\":828,\"Customer.\\u003cinit\\u003e\":696,\"null:null\":1662,\"Customer.setLastname()\":1000,\"Customer.setId()\":778,\"Customer.setPhone()\":1050,\"ResultSet.getInt()\":777},\"rawCode\":\"/***\\n\\t * Checks if given customer login information agrees with a record in the database.\\n\\t * @param email Email address of customer.\\n\\t * @param password Password of customer.\\n\\t * @return Returns a customer object in case of positive match of email address and password. Otherwise, or in case of errors it returns null.\\n\\t */\\n\\tpublic Customer checkLogin(String email, String password)\\n\\t{\\n\\t\\ttry {\\t\\n\\t\\t\\n\\t\\t\\t//SQL-Query to find a customer with the passed email address in the database\\n\\t\\t\\tResultSet result \\u003d DataSource.executeQuery(\\\"SELECT * FROM customers WHERE email\\u003d\\u0027\\\" + email + \\\"\\u0027\\\");\\n\\t\\t\\t\\n\\t\\t\\tif (result.next()) \\n\\t\\t\\t{\\t\\n\\t\\t\\t\\t//creating a new instance of a customer\\n\\t\\t\\t\\tCustomer customer \\u003d new Customer();\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t//filling customer informations\\n\\t\\t\\t\\tcustomer.setId(result.getInt(\\\"id\\\"));\\n\\t\\t\\t\\tcustomer.setEmail(result.getString(\\\"email\\\"));\\n\\t\\t\\t\\tcustomer.setSalutation(result.getString(\\\"salutation\\\"));\\n\\t\\t\\t\\tcustomer.setForename(result.getString(\\\"forename\\\"));\\n\\t\\t\\t\\tcustomer.setLastname(result.getString(\\\"lastname\\\"));\\n\\t\\t\\t\\tcustomer.setPhone(result.getString(\\\"phone\\\"));\\n\\t\\t\\t\\tcustomer.setStreet(result.getString(\\\"street\\\"));\\n\\t\\t\\t\\tcustomer.setCity(result.getString(\\\"city\\\"));\\n\\t\\t\\t\\tcustomer.setZip(result.getString(\\\"zip\\\"));\\n\\t\\t\\t\\tcustomer.setPassword(result.getString(\\\"password\\\"));\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t//checking if the entered password matches to the customer\\n\\t\\t\\t\\t//in case of matching: returning the customer-instance\\n\\t\\t\\t\\t//in all other cases: returning null\\n\\t\\t\\t\\tif(customer.getPassword().equals(password))\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\treturn customer;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\treturn null;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\telse \\n\\t\\t\\t{\\n\\t\\t\\t\\treturn null;\\n\\t\\t\\t}\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\t//returns null in case of an error\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t}\"}","252":"{\"expressionStart\":{\"Vehicle.setType()\":1867,\"Vehicle.setLocationId()\":1349,\"Vehicle.setId()\":1309,\"String:(\":759,\"String\":1993,\"Vehicle.setSmokers()\":1960,\"Vehicle.setDoors()\":1914,\"Vehicle.setEngineSize()\":1627,\"ArrayList.toArray()\":2793,\"IOUtils.toByteArray()\":2366,\"ResultSet.next()\":1246,\"String: \":721,\"ResultSet.getBinaryStream()\":2229,\"Vehicle.\\u003cinit\\u003e\":1285,\"Vehicle.setManufacturer()\":1406,\"Vehicle.setColor()\":1518,\"\\u003cnullcheck\\u003e\":2229,\"ResultSet.getDouble()\":1649,\"ResultSet.getInt()\":1979,\"ArrayList.size()\":2822,\"Vehicle.setBinaryImage()\":2343,\"{Vehicle}\":2810,\"Vehicle.setEngineType()\":1567,\"ResultSet.getString()\":1883,\"DataSource.executeQuery()\":1162,\"Vehicle.setEngineHp()\":1687,\"Vehicle.setModel()\":1469,\"Vehicle.setNavigationSystem()\":2152,\"Vehicle.setEngineConsum()\":1740,\"\\u003creturn\\u003e\":2619,\"String:id\":1337,\"Vehicle.setClimatic()\":2054,\"ArrayList.\\u003cinit\\u003e\":469,\"ArrayList.add()\":2436,\"Vehicle[].\\u003ccast\\u003e\":2782,\"null:null\":2626,\"String:)\":1073,\"String:type\":1900,\"Vehicle.setPricePerDay()\":1804,\"Vehicle.setSeats()\":2106,\"Vehicle.setGear()\":2010},\"expressionEnd\":{\"Vehicle.setType()\":1908,\"Vehicle.setLocationId()\":1400,\"Vehicle.setId()\":1343,\"String:(\":762,\"String\":2002,\"Vehicle.setSmokers()\":2004,\"Vehicle.setDoors()\":1954,\"Vehicle.setEngineSize()\":1681,\"ArrayList.toArray()\":2839,\"IOUtils.toByteArray()\":2418,\"ResultSet.next()\":1259,\"String: \":724,\"ResultSet.getBinaryStream()\":2260,\"Vehicle.\\u003cinit\\u003e\":1298,\"Vehicle.setManufacturer()\":1463,\"Vehicle.setColor()\":1561,\"\\u003cnullcheck\\u003e\":2268,\"ResultSet.getDouble()\":1680,\"ResultSet.getInt()\":2003,\"ArrayList.size()\":2837,\"Vehicle.setBinaryImage()\":2419,\"{Vehicle}\":2838,\"Vehicle.setEngineType()\":1621,\"ResultSet.getString()\":1907,\"DataSource.executeQuery()\":1192,\"Vehicle.setEngineHp()\":1734,\"Vehicle.setModel()\":1512,\"Vehicle.setNavigationSystem()\":2215,\"Vehicle.setEngineConsum()\":1798,\"\\u003creturn\\u003e\":2631,\"String:id\":1341,\"Vehicle.setClimatic()\":2100,\"ArrayList.\\u003cinit\\u003e\":493,\"ArrayList.add()\":2457,\"Vehicle[].\\u003ccast\\u003e\":2839,\"null:null\":2630,\"String:)\":1076,\"String:type\":1906,\"Vehicle.setPricePerDay()\":1861,\"Vehicle.setSeats()\":2146,\"Vehicle.setGear()\":2048},\"rawCode\":\"/**\\n\\t * This webservice method finds all available vehicles to the passed start and return parameters\\n\\t * @param startDate The start of the renting (date and time).\\n\\t * @param startLocation The location where the vehicle will be taken.\\n\\t * @param returnDate The return of the renting (date and time)\\n\\t * @return An Array of available vehicles.\\n\\t */\\n\\tpublic Vehicle[] findVehicles(String startDate, int startLocation, String returnDate){\\n\\t\\tArrayList\\u003cVehicle\\u003e vehicles \\u003d new ArrayList\\u003cVehicle\\u003e();\\n\\t\\t\\n\\t\\t//In this query is the logic implemented that only cars are found if they are available\\n\\t\\t//in the requested timeframe\\n\\t\\tString query \\u003d \\t\\\"SELECT * FROM vehicles \\\"+ \\n\\t\\t\\t\\t\\t\\t\\\"WHERE \\\" +\\n\\t\\t\\t\\t\\t\\t\\\"location_id\\u003d\\\" + startLocation + \\\" \\\" +\\n\\t\\t\\t\\t\\t\\t\\\"AND NOT EXISTS \\\" +\\n\\t\\t\\t\\t\\t\\t\\\"(\\\"+\\n\\t\\t\\t\\t\\t\\t\\t\\\"SELECT * FROM rentings WHERE \\\"+\\n\\t\\t\\t\\t\\t\\t\\t\\\"vehicle_id \\u003d vehicles.id \\\"+\\n\\t\\t\\t\\t\\t\\t\\t\\\"AND (\\\"+\\n\\t\\t\\t\\t\\t\\t\\t\\\"(\\u0027\\\"+startDate+\\\"\\u0027 BETWEEN start_date AND return_date OR \\u0027\\\"+returnDate+\\\"\\u0027 BETWEEN start_date AND return_date) \\\"+\\n\\t\\t\\t\\t\\t\\t\\t\\\"OR \\\"+\\n\\t\\t\\t\\t\\t\\t\\t\\\"(\\u0027\\\"+startDate+\\\"\\u0027 \\u003c start_date AND \\u0027\\\"+returnDate+\\\"\\u0027 \\u003e return_date))\\\" +\\n\\t\\t\\t\\t\\t\\t\\\")\\\";\\n\\t\\t\\n\\t\\ttry {\\t\\n\\t\\t\\t//SQL-Query to find out the available vehicles\\n\\t\\t\\tResultSet result \\u003d DataSource.executeQuery(query);\\n\\t\\n\\t\\t\\t//creates an object from every record\\n\\t\\t\\twhile(result.next()) {\\n\\t\\t\\t\\tVehicle vehicle \\u003d new Vehicle();\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tvehicle.setId(result.getInt(\\\"id\\\"));\\n\\t\\t\\t\\tvehicle.setLocationId(result.getInt(\\\"location_id\\\"));\\n\\t\\t\\t\\tvehicle.setManufacturer(result.getString(\\\"manufacturer\\\"));\\n\\t\\t\\t\\tvehicle.setModel(result.getString(\\\"model\\\"));\\n\\t\\t\\t\\tvehicle.setColor(result.getString(\\\"color\\\"));\\n\\t\\t\\t\\tvehicle.setEngineType(result.getString(\\\"engine_type\\\"));\\n\\t\\t\\t\\tvehicle.setEngineSize(result.getDouble(\\\"engine_size\\\"));\\n\\t\\t\\t\\tvehicle.setEngineHp(result.getInt(\\\"engine_hp\\\"));\\n\\t\\t\\t\\tvehicle.setEngineConsum(result.getDouble(\\\"engine_consum\\\"));\\n\\t\\t\\t\\tvehicle.setPricePerDay(result.getDouble(\\\"price_per_day\\\"));\\n\\t\\t\\t\\tvehicle.setType(result.getString(\\\"type\\\"));\\n\\t\\t\\t\\tvehicle.setDoors(result.getInt(\\\"doors\\\"));\\n\\t\\t\\t\\tvehicle.setSmokers(result.getInt(\\\"smokers\\\"));\\n\\t\\t\\t\\tvehicle.setGear(result.getInt(\\\"gear\\\"));\\n\\t\\t\\t\\tvehicle.setClimatic(result.getInt(\\\"climatic\\\"));\\n\\t\\t\\t\\tvehicle.setSeats(result.getInt(\\\"seats\\\"));\\n\\t\\t\\t\\tvehicle.setNavigationSystem(result.getInt(\\\"navigation_system\\\"));\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tif(result.getBinaryStream(\\\"image\\\") !\\u003d null){\\n\\t\\t\\t\\t\\t//convert the image (blob) from the database in a bytearray. \\n\\t\\t\\t\\t\\tvehicle.setBinaryImage(IOUtils.toByteArray(result.getBinaryStream(\\\"image\\\")));\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tvehicles.add(vehicle);\\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t} catch (ClassNotFoundException e) {\\n\\t\\t\\t//returns null in error case\\n\\t\\t\\treturn null;\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\t//returns null in error case\\n\\t\\t\\treturn null;\\n\\t\\t} catch (IOException e) {\\n\\t\\t\\t//returns null in error case\\n\\t\\t\\treturn null;\\n\\t\\t} \\n\\t\\t\\n\\t\\t//converts an ArrayList to an array\\n\\t\\tVehicle[] vehiclesArray \\u003d (Vehicle[])vehicles.toArray(new Vehicle[vehicles.size()]);\\n\\t\\t\\n\\t\\treturn vehiclesArray;\\n\\t\\t\\n\\t}\"}","253":"{\"expressionStart\":{\"Renting[].\\u003ccast\\u003e\":1460,\"Renting.setReturnDate()\":1098,\"Renting.setCustomerId()\":983,\"Renting.setId()\":888,\"Renting.setVehicleId()\":928,\"ResultSet.getString()\":1120,\"DataSource.executeQuery()\":383,\"String\":1197,\"\\u003creturn\\u003e\":1524,\"ArrayList.toArray()\":1471,\"String:id\":916,\"Renting.setStartDate()\":1040,\"ResultSet.next()\":822,\"{Renting}\":1488,\"ArrayList.\\u003cinit\\u003e\":263,\"ArrayList.add()\":1271,\"Renting.setRating()\":1218,\"Renting.\\u003cinit\\u003e\":864,\"null:null\":1377,\"Renting.setTotalPrice()\":1158,\"ResultSet.getDouble()\":1180,\"ArrayList.size()\":1500,\"ResultSet.getInt()\":902},\"expressionEnd\":{\"Renting[].\\u003ccast\\u003e\":1517,\"Renting.setReturnDate()\":1152,\"Renting.setCustomerId()\":1034,\"Renting.setId()\":922,\"Renting.setVehicleId()\":977,\"ResultSet.getString()\":1151,\"DataSource.executeQuery()\":765,\"String\":1210,\"\\u003creturn\\u003e\":1544,\"ArrayList.toArray()\":1517,\"String:id\":920,\"Renting.setStartDate()\":1092,\"ResultSet.next()\":835,\"{Renting}\":1516,\"ArrayList.\\u003cinit\\u003e\":287,\"ArrayList.add()\":1292,\"Renting.setRating()\":1260,\"Renting.\\u003cinit\\u003e\":877,\"null:null\":1381,\"Renting.setTotalPrice()\":1212,\"ResultSet.getDouble()\":1211,\"ArrayList.size()\":1515,\"ResultSet.getInt()\":921},\"rawCode\":\"/***\\n\\t * Getting all rentings of a customer.\\n\\t * @param customerId ID of the customer.\\n\\t * @return Returns an array of rentings.\\n\\t */\\n\\tpublic Renting[] getRentingsByCustomerId(int customerId)\\n\\t{\\n\\t\\t//creating an ArrayList-instance \\n\\t\\tArrayList\\u003cRenting\\u003e rentings \\u003d new ArrayList\\u003cRenting\\u003e();\\n\\t\\t\\n\\t\\ttry \\n\\t\\t{\\n\\t\\t\\t//getting all rentings of a customer from the database\\n\\t\\t\\tResultSet result \\u003d DataSource.executeQuery(\\\"SELECT id,\\\" +\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\"vehicle_id, \\\" +\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\"customer_id, \\\" +\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\"DATE_FORMAT(start_date, \\u0027%Y-%m-%d %H:%i:%s\\u0027) as start_date, \\\" +\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\"DATE_FORMAT(return_date, \\u0027%Y-%m-%d %H:%i:%s\\u0027) as return_date, \\\" +\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\"total_price, \\\" +\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\"rating \\\" +\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\"FROM rentings WHERE customer_id\\u003d\\\" + customerId);\\n\\t\\t\\t\\n\\t\\t\\t//adding all rentings to the ArrayList\\n\\t\\t\\twhile(result.next())\\n\\t\\t\\t{\\n\\t\\t\\t\\tRenting renting \\u003d new Renting();\\n\\t\\t\\t\\t\\n\\t\\t\\t\\trenting.setId(result.getInt(\\\"id\\\"));\\n\\t\\t\\t\\trenting.setVehicleId(result.getInt(\\\"vehicle_id\\\"));\\n\\t\\t\\t\\trenting.setCustomerId(result.getInt(\\\"customer_id\\\"));\\n\\t\\t\\t\\trenting.setStartDate(result.getString(\\\"start_date\\\"));\\n\\t\\t\\t\\trenting.setReturnDate(result.getString(\\\"return_date\\\"));\\n\\t\\t\\t\\trenting.setTotalPrice(result.getDouble(\\\"total_price\\\"));\\n\\t\\t\\t\\trenting.setRating(result.getInt(\\\"rating\\\"));\\n\\t\\t\\t\\t\\n\\t\\t\\t\\trentings.add(renting);\\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\t//returns null in case of an error\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t\\t\\n\\t\\t//converting the ArrayList into an Array\\n\\t\\tRenting[] rentingArray \\u003d (Renting[])rentings.toArray(new Renting[rentings.size()]);\\n\\t\\t\\n\\t\\treturn rentingArray;\\n\\t}\"}","254":"{\"expressionStart\":{\"Vehicle.setType()\":966,\"Vehicle.setLocationId()\":457,\"Vehicle.setId()\":418,\"String\":554,\"Vehicle.setSmokers()\":1057,\"Vehicle.setDoors()\":1012,\"Vehicle.setEngineSize()\":730,\"IOUtils.toByteArray()\":1461,\"ResultSet.first()\":316,\"Vehicle.\\u003cinit\\u003e\":396,\"ResultSet.getBinaryStream()\":1392,\"Vehicle.setManufacturer()\":513,\"Vehicle.setColor()\":623,\"ResultSet.getDouble()\":865,\"\\u003cnullcheck\\u003e\":1392,\"ResultSet.getInt()\":809,\"Vehicle.setBinaryImage()\":1438,\"Vehicle.setEngineType()\":671,\"ResultSet.getString()\":537,\"DataSource.executeQuery()\":243,\"Vehicle.setEngineHp()\":789,\"Vehicle.setNavigationSystem()\":1245,\"Vehicle.setEngineConsum()\":841,\"Vehicle.setModel()\":575,\"\\u003creturn\\u003e\":1775,\"String:id\":446,\"Vehicle.setClimatic()\":1149,\"null:null\":1782,\"String:type\":999,\"Vehicle.setPricePerDay()\":904,\"Vehicle.setSeats()\":1200,\"Vehicle.setGear()\":1106},\"expressionEnd\":{\"Vehicle.setType()\":1007,\"Vehicle.setLocationId()\":508,\"Vehicle.setId()\":452,\"String\":568,\"Vehicle.setSmokers()\":1101,\"Vehicle.setDoors()\":1052,\"Vehicle.setEngineSize()\":784,\"IOUtils.toByteArray()\":1513,\"ResultSet.first()\":330,\"Vehicle.\\u003cinit\\u003e\":409,\"ResultSet.getBinaryStream()\":1423,\"Vehicle.setManufacturer()\":570,\"Vehicle.setColor()\":666,\"ResultSet.getDouble()\":898,\"\\u003cnullcheck\\u003e\":1431,\"ResultSet.getInt()\":835,\"Vehicle.setBinaryImage()\":1514,\"Vehicle.setEngineType()\":725,\"ResultSet.getString()\":569,\"DataSource.executeQuery()\":307,\"Vehicle.setEngineHp()\":836,\"Vehicle.setNavigationSystem()\":1308,\"Vehicle.setEngineConsum()\":899,\"Vehicle.setModel()\":618,\"\\u003creturn\\u003e\":1787,\"String:id\":450,\"Vehicle.setClimatic()\":1195,\"null:null\":1786,\"String:type\":1005,\"Vehicle.setPricePerDay()\":961,\"Vehicle.setSeats()\":1240,\"Vehicle.setGear()\":1144},\"rawCode\":\"/**\\n\\t * Method to return a vehicle by its id.\\n\\t * @param id ID of the vehicle.\\n\\t * @return Object of a type vehicle.\\n\\t */\\n\\tpublic Vehicle getVehicleById(int id){\\n\\t\\n\\t\\ttry {\\n\\t\\t\\t//SQL-Query to find out the requested vehicle\\n\\t\\t\\tResultSet result \\u003d DataSource.executeQuery(\\\"SELECT * FROM vehicles WHERE id\\u003d\\\" + id);\\n\\t\\t\\t\\n\\t\\t\\tresult.first();\\n\\t\\t\\t\\n\\t\\t\\t//creates an object from the record\\n\\t\\t\\tVehicle vehicle \\u003d new Vehicle();\\n\\t\\t\\t\\n\\t\\t\\tvehicle.setId(result.getInt(\\\"id\\\"));\\n\\t\\t\\tvehicle.setLocationId(result.getInt(\\\"location_id\\\"));\\n\\t\\t\\tvehicle.setManufacturer(result.getString(\\\"manufacturer\\\"));\\n\\t\\t\\tvehicle.setModel(result.getString(\\\"model\\\"));\\n\\t\\t\\tvehicle.setColor(result.getString(\\\"color\\\"));\\n\\t\\t\\tvehicle.setEngineType(result.getString(\\\"engine_type\\\"));\\n\\t\\t\\tvehicle.setEngineSize(result.getDouble(\\\"engine_size\\\"));\\n\\t\\t\\tvehicle.setEngineHp(result.getInt(\\\"engine_hp\\\"));\\n\\t\\t\\tvehicle.setEngineConsum(result.getDouble(\\\"engine_consum\\\"));\\n\\t\\t\\tvehicle.setPricePerDay(result.getDouble(\\\"price_per_day\\\"));\\n\\t\\t\\tvehicle.setType(result.getString(\\\"type\\\"));\\n\\t\\t\\tvehicle.setDoors(result.getInt(\\\"doors\\\"));\\n\\t\\t\\tvehicle.setSmokers(result.getInt(\\\"smokers\\\"));\\n\\t\\t\\tvehicle.setGear(result.getInt(\\\"gear\\\"));\\n\\t\\t\\tvehicle.setClimatic(result.getInt(\\\"climatic\\\"));\\n\\t\\t\\tvehicle.setSeats(result.getInt(\\\"seats\\\"));\\n\\t\\t\\tvehicle.setNavigationSystem(result.getInt(\\\"navigation_system\\\"));\\n\\t\\t\\t\\n\\t\\t\\t//the image has a binary format an will be converted to a byte-array\\n\\t\\t\\tif(result.getBinaryStream(\\\"image\\\") !\\u003d null){\\n\\t\\t\\t\\tvehicle.setBinaryImage(IOUtils.toByteArray(result.getBinaryStream(\\\"image\\\")));\\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t\\treturn vehicle;\\n\\t\\t\\t\\n\\t\\t} catch (ClassNotFoundException e) {\\n\\t\\t\\t//returns null in error case\\n\\t\\t\\treturn null;\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\t//returns null in error case\\n\\t\\t\\treturn null;\\n\\t\\t} catch (IOException e) {\\n\\t\\t\\t//returns null in error case\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t}\"}","255":"{\"expressionStart\":{\"Renting.setReturnDate()\":1542,\"Renting.setCustomerId()\":1427,\"Renting.setId()\":1332,\"String:\\u0027, \\u0027\":941,\"RentACar_Webservice.isVehicleAvailable()\":614,\"String:\\u0027\":963,\"Renting.setVehicleId()\":1372,\"ResultSet.getString()\":1505,\"DataSource.executeQuery()\":1113,\"DataSource.executeInsert()\":745,\"String\":921,\"\\u003creturn\\u003e\":1838,\"String:id\":1360,\"ResultSet.first()\":1195,\"Renting.setStartDate()\":1484,\"String:, \":901,\"Renting.\\u003cinit\\u003e\":1269,\"null:null\":1845,\"String:)\":997,\"Renting.setTotalPrice()\":1602,\"ResultSet.getDouble()\":1624,\"ResultSet.getInt()\":1393},\"expressionEnd\":{\"Renting.setReturnDate()\":1596,\"Renting.setCustomerId()\":1478,\"Renting.setId()\":1366,\"String:\\u0027, \\u0027\":947,\"RentACar_Webservice.isVehicleAvailable()\":666,\"String:\\u0027\":966,\"Renting.setVehicleId()\":1421,\"ResultSet.getString()\":1535,\"DataSource.executeQuery()\":1184,\"DataSource.executeInsert()\":1001,\"String\":926,\"\\u003creturn\\u003e\":1850,\"String:id\":1364,\"ResultSet.first()\":1209,\"Renting.setStartDate()\":1536,\"String:, \":905,\"Renting.\\u003cinit\\u003e\":1282,\"null:null\":1849,\"String:)\":1000,\"Renting.setTotalPrice()\":1656,\"ResultSet.getDouble()\":1655,\"ResultSet.getInt()\":1420},\"rawCode\":\"/***\\n\\t * Method to reserve a vehicle for a customer in the passed timeframe.\\n\\t * @param vehicleId ID of the vehicle.\\n\\t * @param customerId ID of the customer.\\n\\t * @param startDate Startdate (and time) of the reservation.\\n\\t * @param returnDate Returndate (and time) of the reservation.\\n\\t * @param totalPrice Total price to pay for the reservation.\\n\\t * @return Returns a renting object if successful.\\n\\t */\\t\\t\\t   \\n\\tpublic Renting doReservation(int vehicleId, int customerId, String startDate, String returnDate, double totalPrice)\\n\\t{\\n\\t\\ttry {\\n\\t\\t\\t//at first check if the vehicle is vehicle in the passed timeframe\\n\\t\\t\\tif(isVehicleAvailable(vehicleId, startDate, returnDate)){\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t//SQL-Statement to insert a new renting record\\n\\t\\t\\t\\tint rentingId \\u003d DataSource.executeInsert(\\\"INSERT INTO rentings \\\" +\\n\\t\\t\\t\\t\\t\\t\\\"(vehicle_id, customer_id, start_date, return_date, total_price) \\\" +\\n\\t\\t\\t\\t\\t\\t\\\"VALUES(\\\" + vehicleId + \\\", \\\" + customerId + \\\", \\u0027\\\" + startDate + \\\"\\u0027, \\u0027\\\" + returnDate + \\\"\\u0027\\\" +\\n\\t\\t\\t\\t\\t\\t\\t\\t\\\", \\\" + totalPrice + \\\")\\\");\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t//SQL-Query to read the renting which was inserted by the previous statement \\n\\t\\t\\t\\tResultSet result \\u003d DataSource.executeQuery(\\\"SELECT * FROM rentings WHERE id\\u003d\\\" + rentingId);\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tresult.first();\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t//creates a renting object\\n\\t\\t\\t\\tRenting renting \\u003d new Renting();\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t//fill the object with information\\n\\t\\t\\t\\trenting.setId(result.getInt(\\\"id\\\"));\\n\\t\\t\\t\\trenting.setVehicleId(result.getInt(\\\"vehicle_id\\\"));\\n\\t\\t\\t\\trenting.setCustomerId(result.getInt(\\\"customer_id\\\"));\\n\\t\\t\\t\\trenting.setStartDate(result.getString(\\\"start_date\\\"));\\n\\t\\t\\t\\trenting.setReturnDate(result.getString(\\\"return_date\\\"));\\n\\t\\t\\t\\trenting.setTotalPrice(result.getDouble(\\\"total_price\\\")); \\n\\t\\t\\t\\t\\n\\t\\t\\t\\treturn renting;\\n\\t\\t\\t}else{\\n\\t\\t\\t\\t//returns null if the vehicle is not available\\n\\t\\t\\t\\treturn null;\\n\\t\\t\\t}\\t\\n\\t\\t} \\n\\t\\tcatch (Exception e) {\\n\\t\\t\\t//returns null in case of an error\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t}\"}","256":"{\"expressionStart\":{\"Location.setCity()\":475,\"ResultSet.getString()\":685,\"DataSource.executeQuery()\":254,\"Location.setPhone()\":618,\"String\":509,\"Location.setStreet()\":567,\"\\u003creturn\\u003e\":915,\"Location.setId()\":435,\"String:id\":464,\"ResultSet.first()\":377,\"Location.\\u003cinit\\u003e\":416,\"null:null\":922,\"Location.setZip()\":522,\"Location.setEmail()\":667,\"ResultSet.getInt()\":450},\"expressionEnd\":{\"Location.setCity()\":517,\"ResultSet.getString()\":710,\"DataSource.executeQuery()\":319,\"Location.setPhone()\":662,\"String\":515,\"Location.setStreet()\":613,\"\\u003creturn\\u003e\":927,\"Location.setId()\":470,\"String:id\":468,\"ResultSet.first()\":391,\"Location.\\u003cinit\\u003e\":430,\"null:null\":926,\"Location.setZip()\":562,\"Location.setEmail()\":711,\"ResultSet.getInt()\":469},\"rawCode\":\"/**\\n\\t * Returns the location by the passed id.\\n\\t * @param id ID of the location.\\n\\t * @return Object of a type location.\\n\\t */\\n\\tpublic Location getLocationById(int id){\\n\\t\\t\\n\\t\\ttry {\\n\\t\\t\\t//SQL-Query to find out the corresponding location\\n\\t\\t\\tResultSet result \\u003d DataSource.executeQuery(\\\"SELECT * FROM locations WHERE id\\u003d\\\" + id);\\n\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t//create a location object from the result\\n\\t\\t\\tresult.first();\\n\\t\\t\\tLocation location \\u003d new Location();\\n\\t\\t\\tlocation.setId(result.getInt(\\\"id\\\"));\\n\\t\\t\\tlocation.setCity(result.getString(\\\"city\\\"));\\n\\t\\t\\tlocation.setZip(result.getString(\\\"zip\\\"));\\n\\t\\t\\tlocation.setStreet(result.getString(\\\"street\\\"));\\n\\t\\t\\tlocation.setPhone(result.getString(\\\"phone\\\"));\\n\\t\\t\\tlocation.setEmail(result.getString(\\\"email\\\"));\\n\\t\\n\\t\\t\\t//return the location\\n\\t\\t\\treturn location;\\n\\t\\t\\t\\n\\t\\t} catch (ClassNotFoundException e) {\\n\\t\\t\\t//returns null in error case\\n\\t\\t\\treturn null;\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\t//returns null in error case\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\n\\t}\"}","257":"{\"expressionStart\":{\"TextFormatException.\\u003cinit\\u003e\":308,\"Site.\\u003cinit\\u003e\":1213,\"\\u003cthrow\\u003e\":302,\"Site.getLocation()\":593,\"String:\\u0027\":614,\"ResultSet.getString()\":1243,\"\\u003cr\\u003e\":910,\"DBUtil.executeQuery()\":1134,\"Vector.add()\":1203,\"String\":1018,\"Util.isEmpty()\":705,\"\\u003creturn\\u003e\":1424,\"ResultSet.next()\":1178,\"Site.getRate()\":1031,\"DBUtil.getDBUtil()\":112,\"Site.getBrief()\":839,\"Vector.\\u003cinit\\u003e\":216,\"String: where \":389,\"int:1\":927,\"UNKNOWN.println()\":1091,\"\\u003cnullcheck\\u003e\":278,\"ResultSet.getInt()\":1380},\"expressionEnd\":{\"TextFormatException.\\u003cinit\\u003e\":333,\"Site.\\u003cinit\\u003e\":1403,\"\\u003cthrow\\u003e\":334,\"Site.getLocation()\":611,\"String:\\u0027\":617,\"ResultSet.getString()\":1267,\"\\u003cr\\u003e\":928,\"DBUtil.executeQuery()\":1161,\"Vector.add()\":1404,\"String\":1028,\"Util.isEmpty()\":734,\"\\u003creturn\\u003e\":1437,\"ResultSet.next()\":1187,\"Site.getRate()\":1045,\"DBUtil.getDBUtil()\":130,\"Site.getBrief()\":854,\"Vector.\\u003cinit\\u003e\":234,\"String: where \":398,\"int:1\":928,\"UNKNOWN.println()\":1121,\"\\u003cnullcheck\\u003e\":288,\"ResultSet.getInt()\":1402},\"rawCode\":\"public static Vector\\u003cSite\\u003e selectSite(Site site) throws TextFormatException, SQLException {\\n        DBUtil du \\u003d DBUtil.getDBUtil();\\n        String SQLCommand \\u003d null;\\n        ResultSet rs;\\n        Vector \\u003cSite\\u003e sites\\u003dnew Vector\\u003cSite\\u003e();\\n        boolean isAnd \\u003d false;\\n        if(site\\u003d\\u003dnull)\\n            throw new TextFormatException();\\n        SQLCommand  \\u003d \\\" select * from \\\" + tableName + \\\" where \\\";\\n        //if(site.getLocation() !\\u003d null){\\n        if(Util.isEmpty(site.getLocation())){\\n            if(isAnd)\\n                SQLCommand +\\u003d \\\" and \\\";\\n            SQLCommand +\\u003d \\\" location \\u003d \\u0027\\\" + site.getLocation() + \\\"\\u0027\\\";\\n            isAnd \\u003d true;\\n        }\\n        //if(site.getBrief() !\\u003d null){\\n        if(Util.isEmpty(site.getBrief())){\\n            if(isAnd)\\n                SQLCommand +\\u003d \\\" and \\\";\\n            SQLCommand +\\u003d \\\" brief \\u003d \\u0027\\\" + site.getBrief() + \\\"\\u0027\\\";\\n            isAnd \\u003d true;\\n\\n        }\\n        if(site.getRate()!\\u003d-1){\\n            if(isAnd)\\n                SQLCommand +\\u003d \\\" and \\\";\\n            SQLCommand +\\u003d \\\" rate \\u003d \\\" + site.getRate();\\n            isAnd \\u003d true;\\n        }\\n        System.out.println(SQLCommand);\\n        rs\\u003ddu.executeQuery(SQLCommand);\\n        while (rs.next()){\\n             sites.add(new Site(rs.getInt(\\\"siteID\\\"), rs.getString(\\\"siteName\\\"), rs.getInt(\\\"rate\\\"),rs.getString(\\\"location\\\"), rs.getString(\\\"brief\\\"), rs.getInt(\\\"picture\\\"), rs.getInt(\\\"latitude\\\"),rs.getInt(\\\"longitude\\\")));\\n        }\\n        return sites;\\n    }\"}","258":"{\"expressionStart\":{\"String.valueOf()\":378,\"DBUtil.getDBUtil()\":109,\"String:\\u0027;\":220,\"ResultSet.getString()\":418,\"DBUtil.executeQuery()\":299,\"Vector.add()\":367,\"String\":414,\"Vector.\\u003cinit\\u003e\":256,\"\\u003creturn\\u003e\":463,\"ResultSet.next()\":343,\"ResultSet.getInt()\":393},\"expressionEnd\":{\"String.valueOf()\":413,\"DBUtil.getDBUtil()\":127,\"String:\\u0027;\":224,\"ResultSet.getString()\":442,\"DBUtil.executeQuery()\":326,\"Vector.add()\":443,\"String\":417,\"Vector.\\u003cinit\\u003e\":276,\"\\u003creturn\\u003e\":477,\"ResultSet.next()\":352,\"ResultSet.getInt()\":412},\"rawCode\":\"public static Vector\\u003cString\\u003e selectSiteWithLocation(String location) throws SQLException {\\n        DBUtil du\\u003dDBUtil.getDBUtil();\\n        String SQLCommand \\u003d \\\"select siteID,siteName from site where location \\u003d \\u0027\\\"+location+\\\"\\u0027;\\\";\\n        Vector\\u003cString\\u003e result\\u003dnew Vector\\u003cString\\u003e();\\n        ResultSet rs\\u003ddu.executeQuery(SQLCommand);\\n        while (rs.next()){\\n            result.add(String.valueOf(rs.getInt(\\\"siteID\\\"))+\\\":\\\"+rs.getString(\\\"siteName\\\"));\\n        }\\n        return result;\\n    }\"}","259":"{\"expressionStart\":{\"TextFormatException.\\u003cinit\\u003e\":327,\"Site.\\u003cinit\\u003e\":609,\"\\u003cthrow\\u003e\":321,\"String.length()\":105,\"ResultSet.getString()\":708,\"\\u003cr\\u003e\":105,\"DBUtil.executeQuery()\":518,\"String\":721,\"\\u003creturn\\u003e\":1168,\"Util.isEmpty()\":285,\"int\":124,\"ResultSet.next()\":583,\"DBUtil.getDBUtil()\":167,\"String:\\u0027;\":461,\"UNKNOWN.println()\":475,\"ResultSet.getInt()\":730},\"expressionEnd\":{\"TextFormatException.\\u003cinit\\u003e\":370,\"Site.\\u003cinit\\u003e\":813,\"\\u003cthrow\\u003e\":371,\"String.length()\":122,\"ResultSet.getString()\":729,\"\\u003cr\\u003e\":126,\"DBUtil.executeQuery()\":545,\"String\":728,\"\\u003creturn\\u003e\":1180,\"Util.isEmpty()\":307,\"int\":126,\"ResultSet.next()\":592,\"DBUtil.getDBUtil()\":185,\"String:\\u0027;\":465,\"UNKNOWN.println()\":505,\"ResultSet.getInt()\":750},\"rawCode\":\"public static Site seleteSite(String siteName) throws TextFormatException, SQLException {\\n        assert siteName.length()\\u003c\\u003d40;\\n        Site site;\\n        DBUtil du \\u003d DBUtil.getDBUtil();\\n        String SQLCommand \\u003d null;\\n        ResultSet rs;\\n        //if(siteName \\u003d\\u003d null)\\n        if(Util.isEmpty(siteName))\\n            throw new TextFormatException(\\\"siteName is null\\\");\\n        SQLCommand  \\u003d \\\" select * from \\\" + tableName + \\\" where siteName \\u003d \\u0027\\\" + siteName + \\\"\\u0027;\\\";\\n        System.out.println(SQLCommand);\\n        rs\\u003ddu.executeQuery(SQLCommand);\\n        //while(rs.next()){\\n        rs.next();\\n        site \\u003d new Site(rs.getInt(\\\"siteID\\\"),rs.getString(\\\"siteName\\\"), rs.getInt(\\\"rate\\\"),rs.getString(\\\"location\\\"), rs.getString(\\\"brief\\\"),rs.getInt(\\\"picture\\\"),\\n                rs.getInt(\\\"latitude\\\"),rs.getInt(\\\"longitude\\\")) ;\\n        /*\\n        site \\u003d new Site();\\n        site.setSiteID(rs.getInt(\\\"siteID\\\"));\\n        site.setSiteName(rs.getString(\\\"siteName\\\"));\\n        site.setRate(rs.getInt(\\\"rate\\\"));\\n        site.setLocation(rs.getString(\\\"location\\\"));\\n        site.setBrief(rs.getString(\\\"brief\\\"));\\n        site.setPicture(rs.getInt(\\\"picture\\\"));\\n        */\\n        //}\\n        return site;\\n    }\"}","260":"{\"expressionStart\":{\"String.valueOf()\":798,\"DBUtil.getDBUtil()\":97,\"HashMap.\\u003cinit\\u003e\":284,\"ResultSet.getString()\":603,\"DBUtil.executeQuery()\":217,\"String\":353,\"HashMap.put()\":775,\"\\u003creturn\\u003e\":847,\"ResultSet.next()\":323,\"ResultSet.getInt()\":813},\"expressionEnd\":{\"String.valueOf()\":836,\"DBUtil.getDBUtil()\":115,\"HashMap.\\u003cinit\\u003e\":313,\"ResultSet.getString()\":624,\"DBUtil.executeQuery()\":244,\"String\":361,\"HashMap.put()\":837,\"\\u003creturn\\u003e\":861,\"ResultSet.next()\":332,\"ResultSet.getInt()\":835},\"rawCode\":\"public static HashMap\\u003cString,String\\u003e getSite(int siteID) throws SQLException {\\n        DBUtil du\\u003dDBUtil.getDBUtil();\\n        String SQLCommand\\u003d\\\"select * from \\\"+tableName+\\\" where siteID\\u003d\\\" +siteID;\\n        ResultSet rs\\u003ddu.executeQuery(SQLCommand);\\n        HashMap\\u003cString,String\\u003e result\\u003dnew HashMap\\u003cString, String\\u003e();\\n        rs.next();\\n        result.put(\\\"siteID\\\",String.valueOf(rs.getInt(\\\"siteID\\\")));\\n        result.put(\\\"siteName\\\",rs.getString(\\\"siteName\\\"));\\n        result.put(\\\"rate\\\",String.valueOf(rs.getInt(\\\"rate\\\")));\\n        result.put(\\\"location\\\",rs.getString(\\\"location\\\"));\\n        result.put(\\\"brief\\\",rs.getString(\\\"brief\\\"));\\n        result.put(\\\"pictureID\\\",String.valueOf(rs.getInt(\\\"picture\\\")));\\n        result.put(\\\"latitude\\\",String.valueOf(rs.getInt(\\\"latitude\\\")));\\n        result.put(\\\"longitude\\\",String.valueOf(rs.getInt(\\\"longitude\\\")));\\n        return result;\\n    }\"}","261":"{\"expressionStart\":{\"Site.\\u003cinit\\u003e\":419,\"DBUtil.getDBUtil()\":326,\"ResultSet.getString()\":493,\"Vector.add()\":409,\"String:;\":300,\"String\":506,\"Vector.\\u003cinit\\u003e\":227,\"UNKNOWN.executeQuery()\":326,\"\\u003creturn\\u003e\":650,\"ResultSet.next()\":385,\"ResultSet.getInt()\":584},\"expressionEnd\":{\"Site.\\u003cinit\\u003e\":629,\"DBUtil.getDBUtil()\":344,\"ResultSet.getString()\":517,\"Vector.add()\":630,\"String:;\":303,\"String\":516,\"Vector.\\u003cinit\\u003e\":245,\"UNKNOWN.executeQuery()\":369,\"\\u003creturn\\u003e\":663,\"ResultSet.next()\":394,\"ResultSet.getInt()\":605},\"rawCode\":\"/**\\n     * get all site information\\n     * @param\\n     * @return site information vector\\n     * @throws java.sql.SQLException\\n     */\\n    public static Vector\\u003cSite\\u003e getAllSite() throws SQLException {\\n        Vector\\u003cSite\\u003e sites\\u003dnew Vector\\u003cSite\\u003e();\\n        String SQLCommand\\u003d\\\"select * from \\\"+tableName+\\\";\\\";\\n        ResultSet rs\\u003dDBUtil.getDBUtil().executeQuery(SQLCommand);\\n        while(rs.next()){\\n            sites.add(new Site(rs.getInt(\\\"siteID\\\"), rs.getString(\\\"siteName\\\"), rs.getInt(\\\"rate\\\"),rs.getString(\\\"location\\\"), rs.getString(\\\"brief\\\"), rs.getInt(\\\"picture\\\"),\\n                    rs.getInt(\\\"latitude\\\"),rs.getInt(\\\"longitude\\\")));\\n        }\\n        return sites;\\n    }\"}","262":"{\"expressionStart\":{\"TextFormatException.\\u003cinit\\u003e\":241,\"DBUtil.getDBUtil()\":124,\"Site.\\u003cinit\\u003e\":469,\"\\u003cthrow\\u003e\":235,\"ResultSet.getString()\":542,\"\\u003cr\\u003e\":211,\"DBUtil.executeQuery()\":378,\"String\":488,\"\\u003creturn\\u003e\":680,\"int:0\":220,\"ResultSet.next()\":443,\"ResultSet.getInt()\":524},\"expressionEnd\":{\"TextFormatException.\\u003cinit\\u003e\":282,\"DBUtil.getDBUtil()\":142,\"Site.\\u003cinit\\u003e\":657,\"\\u003cthrow\\u003e\":283,\"ResultSet.getString()\":566,\"\\u003cr\\u003e\":221,\"DBUtil.executeQuery()\":405,\"String\":496,\"\\u003creturn\\u003e\":692,\"int:0\":221,\"ResultSet.next()\":452,\"ResultSet.getInt()\":541},\"rawCode\":\"public static Site seleteSite(int siteID) throws TextFormatException, SQLException {\\n        Site site;\\n        DBUtil du \\u003d DBUtil.getDBUtil();\\n        String SQLCommand \\u003d null;\\n        ResultSet rs;\\n        if(siteID \\u003c 0)\\n            throw new TextFormatException(\\\"siteID is null\\\");\\n        SQLCommand  \\u003d \\\" select * from \\\" + tableName + \\\" where siteID \\u003d \\\" + siteID;\\n        rs\\u003ddu.executeQuery(SQLCommand);\\n        //while(rs.next()){\\n        rs.next();\\n        site \\u003d new Site(rs.getInt(\\\"siteID\\\"),rs.getString(\\\"siteName\\\"), rs.getInt(\\\"rate\\\"),rs.getString(\\\"location\\\"), rs.getString(\\\"brief\\\"),rs.getInt(\\\"picture\\\"), rs.getInt(\\\"latitude\\\"),rs.getInt(\\\"longitude\\\")) ;\\n        //}\\n        return site;\\n    }\"}","263":"{\"expressionStart\":{\"DBUtil.getDBUtil()\":86,\"ResultSet.getString()\":278,\"DBUtil.executeQuery()\":215,\"String\":132,\"\\u003creturn\\u003e\":271,\"int:1\":291,\"ResultSet.next()\":252},\"expressionEnd\":{\"DBUtil.getDBUtil()\":104,\"ResultSet.getString()\":293,\"DBUtil.executeQuery()\":242,\"String\":155,\"\\u003creturn\\u003e\":294,\"int:1\":292,\"ResultSet.next()\":261},\"rawCode\":\"public static String getSiteName(int siteID) throws SQLException {\\n        DBUtil du \\u003dDBUtil.getDBUtil();\\n        String SQLCommand\\u003d\\\"select siteName from \\\" +tableName+\\\" where siteID \\u003d \\\"+siteID;\\n        ResultSet rs\\u003ddu.executeQuery(SQLCommand);\\n        rs.next();\\n        return rs.getString(1);\\n    }\"}","264":"{\"expressionStart\":{\"String.valueOf()\":511,\"DBUtil.getDBUtil()\":100,\"HashMap.\\u003cinit\\u003e\":331,\"ResultSet.getString()\":389,\"DBUtil.executeQuery()\":248,\"String\":432,\"HashMap.put()\":370,\"\\u003creturn\\u003e\":560,\"ResultSet.next()\":285,\"ResultSet.getInt()\":458},\"expressionEnd\":{\"String.valueOf()\":549,\"DBUtil.getDBUtil()\":118,\"HashMap.\\u003cinit\\u003e\":360,\"ResultSet.getString()\":413,\"DBUtil.executeQuery()\":275,\"String\":442,\"HashMap.put()\":414,\"\\u003creturn\\u003e\":571,\"ResultSet.next()\":294,\"ResultSet.getInt()\":479},\"rawCode\":\"public static HashMap\\u003cString,String\\u003e getSitePos(int siteID) throws SQLException {\\n        DBUtil du\\u003dDBUtil.getDBUtil();\\n        String SQLCommand\\u003d\\\"select siteName,latitude,longitude from \\\"+ tableName+\\\" where siteID \\u003d \\\"+siteID;\\n        ResultSet rs\\u003ddu.executeQuery(SQLCommand);\\n        rs.next();\\n        HashMap\\u003cString,String\\u003e map\\u003dnew HashMap\\u003cString, String\\u003e();\\n        map.put(\\\"siteName\\\",rs.getString(\\\"siteName\\\"));\\n        map.put(\\\"latitude\\\",String.valueOf(rs.getInt(\\\"latitude\\\")));\\n        map.put(\\\"longitude\\\",String.valueOf(rs.getInt(\\\"longitude\\\")));\\n        return map;\\n    }\"}","265":"{\"expressionStart\":{\"ResultSet.getString()\":556,\"StatementTest.assertEquals()\":520,\"String\":445,\"TestUtil.getDatabase()\":533,\"Connection.createStatement()\":85,\"TestUtil.getUser()\":311,\"ResultSet.next()\":235,\"String:2\":268,\"TestUtil.haveMinimumServerVersion()\":361,\"StatementTest.assertTrue()\":485,\"int:2\":343,\"int:1\":285,\"Statement.executeQuery()\":427},\"expressionEnd\":{\"ResultSet.getString()\":571,\"StatementTest.assertEquals()\":572,\"String\":470,\"TestUtil.getDatabase()\":555,\"Connection.createStatement()\":106,\"TestUtil.getUser()\":329,\"ResultSet.next()\":244,\"String:2\":271,\"TestUtil.haveMinimumServerVersion()\":406,\"StatementTest.assertTrue()\":506,\"int:2\":344,\"int:1\":286,\"Statement.executeQuery()\":471},\"rawCode\":\"public void testSystemFunctions() throws SQLException\\n    {\\n        Statement stmt \\u003d con.createStatement();\\n        ResultSet rs \\u003d stmt.executeQuery(\\\"select {fn ifnull(null,\\u00272\\u0027)}\\\" +\\n                \\\",{fn user()} \\\");\\n        assertTrue(rs.next());\\n        assertEquals(\\\"2\\\",rs.getString(1));\\n        assertEquals(TestUtil.getUser(),rs.getString(2));\\n\\n        if (TestUtil.haveMinimumServerVersion(con, \\\"7.3\\\")) {\\n            rs \\u003d stmt.executeQuery(\\\"select {fn database()} \\\");\\n            assertTrue(rs.next());\\n            assertEquals(TestUtil.getDatabase(),rs.getString(1));\\n        }\\n    }\"}","266":"{\"expressionStart\":{\"int:5\":171,\"StatementTest.assertTrue()\":228,\"Connection.prepareStatement()\":95,\"PreparedStatement.executeQuery()\":198,\"ResultSet.getString()\":278,\"PreparedStatement.setInt()\":155,\"StatementTest.assertEquals()\":259,\"String\":116,\"int:1\":168,\"ResultSet.next()\":239},\"expressionEnd\":{\"int:5\":172,\"StatementTest.assertTrue()\":249,\"Connection.prepareStatement()\":145,\"PreparedStatement.executeQuery()\":218,\"ResultSet.getString()\":293,\"PreparedStatement.setInt()\":173,\"StatementTest.assertEquals()\":294,\"String\":144,\"int:1\":169,\"ResultSet.next()\":248},\"rawCode\":\"public void testPreparedFunction() throws SQLException\\n    {\\n        PreparedStatement pstmt \\u003d con.prepareStatement(\\\"SELECT {fn concat(\\u0027a\\u0027, ?)}\\\");\\n        pstmt.setInt(1, 5);\\n        ResultSet rs \\u003d pstmt.executeQuery();\\n        assertTrue(rs.next());\\n        assertEquals(\\\"a5\\\", rs.getString(1));\\n    }\"}","267":"{\"expressionStart\":{\"Statement.executeUpdate()\":145,\"Math.log()\":851,\"ResultSet.getString()\":1354,\"StatementTest.assertEquals()\":1335,\"String\":720,\"Connection.createStatement()\":86,\"ResultSet.next()\":1315,\"int:4\":1505,\"StatementTest.assertTrue()\":1304,\"int:3\":860,\"int:2\":878,\"int:1\":253,\"Statement.executeQuery()\":701,\"double:0.00001\":882,\"int:0\":1609,\"ResultSet.getDouble()\":865},\"expressionEnd\":{\"Statement.executeUpdate()\":230,\"Math.log()\":862,\"ResultSet.getString()\":1369,\"StatementTest.assertEquals()\":1370,\"String\":786,\"Connection.createStatement()\":107,\"ResultSet.next()\":1324,\"int:4\":1506,\"StatementTest.assertTrue()\":1325,\"int:3\":861,\"int:2\":879,\"int:1\":254,\"Statement.executeQuery()\":788,\"double:0.00001\":889,\"int:0\":1610,\"ResultSet.getDouble()\":880},\"rawCode\":\"public void testEscapeProcessing() throws SQLException\\n    {\\n        Statement stmt \\u003d con.createStatement();\\n        int count;\\n\\n        count \\u003d stmt.executeUpdate(\\\"insert into escapetest (ts) values ({ts \\u00271900-01-01 00:00:00\\u0027})\\\");\\n        assertEquals(1, count);\\n\\n        count \\u003d stmt.executeUpdate(\\\"insert into escapetest (d) values ({d \\u00271900-01-01\\u0027})\\\");\\n        assertEquals(1, count);\\n\\n        count \\u003d stmt.executeUpdate(\\\"insert into escapetest (t) values ({t \\u002700:00:00\\u0027})\\\");\\n        assertEquals(1, count);\\n\\n        ResultSet rs \\u003d stmt.executeQuery( \\\"select {fn version()} as version\\\" );\\n        assertTrue(rs.next());\\n        \\n        // check nested and multiple escaped functions\\n        rs \\u003d stmt.executeQuery( \\\"select {fn version()} as version, {fn log({fn log(3.0)})} as log\\\" );\\n        assertTrue(rs.next());\\n        assertEquals(Math.log(Math.log(3)), rs.getDouble(2), 0.00001);\\n\\n        stmt.executeUpdate(\\\"UPDATE escapetest SET \\\\\\\")\\\\\\\" \\u003d \\u0027a\\u0027, \\\\\\\"\\\\\\\"\\\\\\\"){a}\\u0027\\\\\\\" \\u003d \\u0027b\\u0027\\\");\\n        \\n        // check \\\"difficult\\\" values\\n        rs \\u003d stmt.executeQuery(\\\"select {fn concat(\\u0027)\\u0027,escapetest.\\\\\\\")\\\\\\\")} as concat\\\" +\\n                \\\", {fn concat(\\u0027{\\u0027,\\u0027}\\u0027)} \\\" +\\n                \\\", {fn concat(\\u0027\\u0027\\u0027\\u0027,\\u0027\\\\\\\"\\u0027)} \\\" +\\n                \\\", {fn concat(\\\\\\\"\\\\\\\"\\\\\\\"){a}\\u0027\\\\\\\", \\u0027\\u0027\\u0027}\\u0027\\u0027\\u0027)} \\\" +\\n                \\\" FROM escapetest\\\");\\n        assertTrue(rs.next());\\n        assertEquals(\\\")a\\\", rs.getString(1));\\n        assertEquals(\\\"{}\\\", rs.getString(2));\\n        assertEquals(\\\"\\u0027\\\\\\\"\\\", rs.getString(3));\\n        assertEquals(\\\"b\\u0027}\\u0027\\\", rs.getString(4));\\n        \\n        count \\u003d stmt.executeUpdate( \\\"create temp table b (i int)\\\" );\\n        assertEquals(0, count);\\n\\n        rs \\u003d stmt.executeQuery( \\\"select * from {oj test_statement a left outer join b on (a.i\\u003db.i)} \\\");\\n        assertTrue(!rs.next());\\n        // test escape escape character\\n        rs \\u003d stmt.executeQuery(\\\"select str2 from comparisontest where str1 like \\u0027|_abcd\\u0027 {escape \\u0027|\\u0027} \\\");\\n        assertTrue(rs.next());\\n        assertEquals(\\\"_found\\\",rs.getString(1));\\n        rs \\u003d stmt.executeQuery(\\\"select str2 from comparisontest where str1 like \\u0027|%abcd\\u0027 {escape \\u0027|\\u0027} \\\");\\n        assertTrue(rs.next());\\n        assertEquals(\\\"%found\\\",rs.getString(1));\\n    }\"}","268":"{\"expressionStart\":{\"String:12\":615,\"ResultSet.getString()\":1619,\"StatementTest.assertEquals()\":1556,\"String\":1614,\"Connection.createStatement()\":85,\"ResultSet.next()\":969,\"int\":441,\"String: \":480,\"int:6\":671,\"int:5\":633,\"int:4\":589,\"int:3\":543,\"StatementTest.assertTrue()\":958,\"TestUtil.haveMinimumServerVersion()\":765,\"int:8\":747,\"int:7\":709,\"int:2\":497,\"int:1\":454,\"Statement.executeQuery()\":831,\"int:0\":735,\"ResultSet.getInt()\":699},\"expressionEnd\":{\"String:12\":619,\"ResultSet.getString()\":1634,\"StatementTest.assertEquals()\":1591,\"String\":1618,\"Connection.createStatement()\":106,\"ResultSet.next()\":978,\"int\":443,\"String: \":483,\"int:6\":672,\"int:5\":634,\"int:4\":590,\"int:3\":544,\"StatementTest.assertTrue()\":979,\"TestUtil.haveMinimumServerVersion()\":810,\"int:8\":748,\"int:7\":710,\"int:2\":498,\"int:1\":455,\"Statement.executeQuery()\":944,\"int:0\":736,\"ResultSet.getInt()\":711},\"rawCode\":\"public void testStringFunctions() throws SQLException\\n    {\\n        Statement stmt \\u003d con.createStatement();\\n        ResultSet rs \\u003d stmt.executeQuery(\\\"select {fn ascii(\\u0027 test\\u0027)},{fn char(32)}\\\" +\\n                \\\",{fn concat(\\u0027ab\\u0027,\\u0027cd\\u0027)}\\\" +\\n                \\\",{fn lcase(\\u0027aBcD\\u0027)},{fn left(\\u00271234\\u0027,2)},{fn length(\\u0027123 \\u0027)}\\\" +\\n                \\\",{fn locate(\\u0027bc\\u0027,\\u0027abc\\u0027)},{fn locate(\\u0027bc\\u0027,\\u0027abc\\u0027,3)}\\\");\\n        assertTrue(rs.next());\\n        assertEquals(32,rs.getInt(1));\\n        assertEquals(\\\" \\\",rs.getString(2));\\n        assertEquals(\\\"abcd\\\",rs.getString(3));\\n        assertEquals(\\\"abcd\\\",rs.getString(4));\\n        assertEquals(\\\"12\\\",rs.getString(5));\\n        assertEquals(3,rs.getInt(6));\\n        assertEquals(2,rs.getInt(7));\\n        assertEquals(0,rs.getInt(8));\\n\\n        if (TestUtil.haveMinimumServerVersion(con, \\\"7.3\\\")) {\\n            rs \\u003d stmt.executeQuery(\\\"SELECT {fn insert(\\u0027abcdef\\u0027,3,2,\\u0027xxxx\\u0027)}\\\" +\\n                \\\",{fn replace(\\u0027abcdbc\\u0027,\\u0027bc\\u0027,\\u0027x\\u0027)}\\\");\\n            assertTrue(rs.next());\\n            assertEquals(\\\"abxxxxef\\\",rs.getString(1));\\n            assertEquals(\\\"axdx\\\",rs.getString(2));\\n        }\\n\\n        rs \\u003d stmt.executeQuery(\\\"select {fn ltrim(\\u0027 ab\\u0027)},{fn repeat(\\u0027ab\\u0027,2)}\\\" +\\n                \\\",{fn right(\\u0027abcde\\u0027,2)},{fn rtrim(\\u0027ab \\u0027)}\\\" +\\n                \\\",{fn space(3)},{fn substring(\\u0027abcd\\u0027,2,2)}\\\" +\\n                \\\",{fn ucase(\\u0027aBcD\\u0027)}\\\");\\n        assertTrue(rs.next());\\n        assertEquals(\\\"ab\\\",rs.getString(1));\\n        assertEquals(\\\"abab\\\",rs.getString(2));\\n        assertEquals(\\\"de\\\",rs.getString(3));\\n        assertEquals(\\\"ab\\\",rs.getString(4));\\n        assertEquals(\\\"   \\\",rs.getString(5));\\n        assertEquals(\\\"bc\\\",rs.getString(6));\\n        assertEquals(\\\"ABCD\\\",rs.getString(7));\\n    }\"}","269":"{\"expressionStart\":{\"String:optimizations\":97,\"Statement.execute()\":437,\"Connection.close()\":478,\"ResultSet.getString()\":396,\"String:drop table test\":450,\"TestOptimizations.assertContains()\":381,\"String\":240,\"Connection.createStatement()\":140,\"TestOptimizations.getConnection()\":83,\"int:1\":409,\"Statement.executeQuery()\":293,\"ResultSet.next()\":362},\"expressionEnd\":{\"String:optimizations\":112,\"Statement.execute()\":468,\"Connection.close()\":490,\"ResultSet.getString()\":411,\"String:drop table test\":467,\"TestOptimizations.assertContains()\":427,\"String\":267,\"Connection.createStatement()\":162,\"TestOptimizations.getConnection()\":113,\"int:1\":410,\"Statement.executeQuery()\":352,\"ResultSet.next()\":371},\"rawCode\":\"private void testIdentityIndexUsage() throws Exception {\\n        Connection conn \\u003d getConnection(\\\"optimizations\\\");\\n        Statement stat \\u003d conn.createStatement();\\n        stat.execute(\\\"create table test(a identity)\\\");\\n        stat.execute(\\\"insert into test values()\\\");\\n        ResultSet rs \\u003d stat.executeQuery(\\\"explain select * from test where a \\u003d 1\\\");\\n        rs.next();\\n        assertContains(rs.getString(1), \\\"PRIMARY_KEY\\\");\\n        stat.execute(\\\"drop table test\\\");\\n        conn.close();\\n    }\"}","270":"{\"expressionStart\":{\"String:optimizations\":108,\"int:10000\":1047,\"\\u003cthrow\\u003e\":1088,\"Thread.sleep()\":1304,\"\\u003cr\\u003e\":441,\"PreparedStatement.setInt()\":833,\"int:1000\":1317,\"String:drop table test\":1407,\"String\":270,\"Connection.createStatement()\":151,\"TestOptimizations.getConnection()\":94,\"Task.get()\":1367,\"ResultSet.next()\":936,\"Exception.\\u003cinit\\u003e\":1094,\"ResultSet.close()\":1187,\"Connection.close()\":1435,\"int:2\":413,\"int:1\":845,\"int:0\":438,\"Math.random()\":789,\"String.length()\":1108,\"ResultSet.getString()\":985,\"UNKNOWN.execute()\":1266,\"{Task}\":404,\"Task.\\u003cinit\\u003e\":489,\"int.\\u003ccast\\u003e\":782,\"Connection.prepareStatement()\":627,\"Statement.execute()\":183,\"PreparedStatement.executeQuery()\":891,\"\\u003ca\\u003e\":459,\"Task[].arrayset()\":478,\"Task[].arrayget()\":1266},\"expressionEnd\":{\"String:optimizations\":123,\"int:10000\":1052,\"\\u003cthrow\\u003e\":1136,\"Thread.sleep()\":1322,\"\\u003cr\\u003e\":457,\"PreparedStatement.setInt()\":850,\"int:1000\":1321,\"String:drop table test\":1424,\"String\":312,\"Connection.createStatement()\":173,\"TestOptimizations.getConnection()\":124,\"Task.get()\":1374,\"ResultSet.next()\":945,\"Exception.\\u003cinit\\u003e\":1135,\"ResultSet.close()\":1197,\"Connection.close()\":1447,\"int:2\":414,\"int:1\":846,\"int:0\":439,\"Math.random()\":802,\"String.length()\":1121,\"ResultSet.getString()\":1000,\"UNKNOWN.execute()\":1284,\"{Task}\":415,\"Task.\\u003cinit\\u003e\":1252,\"int.\\u003ccast\\u003e\":807,\"Connection.prepareStatement()\":712,\"Statement.execute()\":247,\"PreparedStatement.executeQuery()\":910,\"\\u003ca\\u003e\":462,\"Task[].arrayset()\":486,\"Task[].arrayget()\":1274},\"rawCode\":\"private void testQueryCacheConcurrentUse() throws Exception {\\n        final Connection conn \\u003d getConnection(\\\"optimizations\\\");\\n        Statement stat \\u003d conn.createStatement();\\n        stat.execute(\\\"create table test(id int primary key, data clob)\\\");\\n        stat.execute(\\\"insert into test values(0, space(10000))\\\");\\n        stat.execute(\\\"insert into test values(1, space(10001))\\\");\\n        Task[] tasks \\u003d new Task[2];\\n        for (int i \\u003d 0; i \\u003c tasks.length; i++) {\\n            tasks[i] \\u003d new Task() {\\n                @Override\\n                public void call() throws Exception {\\n                    PreparedStatement prep \\u003d conn.prepareStatement(\\n                            \\\"select * from test where id \\u003d ?\\\");\\n                    while (!stop) {\\n                        int x \\u003d (int) (Math.random() * 2);\\n                        prep.setInt(1, x);\\n                        ResultSet rs \\u003d prep.executeQuery();\\n                        rs.next();\\n                        String data \\u003d rs.getString(2);\\n                        if (data.length() !\\u003d 10000 + x) {\\n                            throw new Exception(data.length() + \\\" !\\u003d \\\" + x);\\n                        }\\n                        rs.close();\\n                    }\\n                }\\n            };\\n            tasks[i].execute();\\n        }\\n        Thread.sleep(1000);\\n        for (Task t : tasks) {\\n            t.get();\\n        }\\n        stat.execute(\\\"drop table test\\\");\\n        conn.close();\\n    }\"}","271":"{\"expressionStart\":{\"String:optimizations\":91,\"UNKNOWN.contains()\":752,\"ResultSet.getString()\":752,\"String:drop table test\":835,\"String\":179,\"Connection.createStatement()\":134,\"TestOptimizations.getConnection()\":77,\"ResultSet.next()\":803,\"TestOptimizations.assertTrue()\":547,\"Statement.execute()\":166,\"Connection.close()\":863,\"int:1\":571,\"Statement.executeQuery()\":424},\"expressionEnd\":{\"String:optimizations\":106,\"UNKNOWN.contains()\":791,\"ResultSet.getString()\":767,\"String:drop table test\":852,\"String\":206,\"Connection.createStatement()\":156,\"TestOptimizations.getConnection()\":107,\"ResultSet.next()\":812,\"TestOptimizations.assertTrue()\":597,\"Statement.execute()\":207,\"Connection.close()\":875,\"int:1\":572,\"Statement.executeQuery()\":518},\"rawCode\":\"private void testSortIndex() throws SQLException {\\n        Connection conn \\u003d getConnection(\\\"optimizations\\\");\\n        Statement stat \\u003d conn.createStatement();\\n        stat.execute(\\\"drop table test if exists\\\");\\n        stat.execute(\\\"create table test(id int)\\\");\\n        stat.execute(\\\"create index idx_id_desc on test(id desc)\\\");\\n        stat.execute(\\\"create index idx_id_asc on test(id)\\\");\\n        ResultSet rs;\\n\\n        rs \\u003d stat.executeQuery(\\\"explain select * from test \\\" +\\n                \\\"where id \\u003e 10 order by id\\\");\\n        rs.next();\\n        assertTrue(rs.getString(1).contains(\\\"IDX_ID_ASC\\\"));\\n\\n        rs \\u003d stat.executeQuery(\\\"explain select * from test \\\" +\\n                \\\"where id \\u003c 10 order by id desc\\\");\\n        rs.next();\\n        assertTrue(rs.getString(1).contains(\\\"IDX_ID_DESC\\\"));\\n\\n        rs.next();\\n        stat.execute(\\\"drop table test\\\");\\n        conn.close();\\n    }\"}","272":"{\"expressionStart\":{\"TestOptimizations.assertEquals()\":602,\"String:\":375,\"ResultSet.getString()\":249,\"String.replaceAll()\":340,\"UNKNOWN.toLowerCase()\":249,\"String\":491,\"StringUtils.replaceAll()\":440,\"Connection.createStatement()\":124,\"int:1\":262,\"Statement.executeQuery()\":171,\"ResultSet.next()\":216,\"String: \":319},\"expressionEnd\":{\"TestOptimizations.assertEquals()\":625,\"String:\":377,\"ResultSet.getString()\":264,\"String.replaceAll()\":378,\"UNKNOWN.toLowerCase()\":278,\"String\":497,\"StringUtils.replaceAll()\":498,\"Connection.createStatement()\":146,\"int:1\":263,\"Statement.executeQuery()\":206,\"ResultSet.next()\":225,\"String: \":322},\"rawCode\":\"private void assertExplainRoundTrip(Connection conn, String sql)\\n            throws SQLException {\\n        Statement stat \\u003d conn.createStatement();\\n        ResultSet rs \\u003d stat.executeQuery(\\\"explain \\\" + sql);\\n        rs.next();\\n        String plan \\u003d rs.getString(1).toLowerCase();\\n        plan \\u003d plan.replaceAll(\\\"\\\\\\\\s+\\\", \\\" \\\");\\n        plan \\u003d plan.replaceAll(\\\"/\\\\\\\\*[^\\\\\\\\*]*\\\\\\\\*/\\\", \\\"\\\");\\n        plan \\u003d plan.replaceAll(\\\"\\\\\\\\s+\\\", \\\" \\\");\\n        plan \\u003d StringUtils.replaceAll(plan, \\\"system_range(1, 1)\\\", \\\"dual\\\");\\n        plan \\u003d plan.replaceAll(\\\"\\\\\\\\( \\\", \\\"\\\\\\\\(\\\");\\n        plan \\u003d plan.replaceAll(\\\" \\\\\\\\)\\\", \\\"\\\\\\\\)\\\");\\n        assertEquals(plan, sql);\\n    }\"}","273":"{\"expressionStart\":{\"String:optimizations\":89,\"ResultSet.getString()\":548,\"String:drop table test\":936,\"String\":543,\"Connection.createStatement()\":132,\"TestOptimizations.getConnection()\":75,\"ResultSet.next()\":511,\"int\":792,\"TestOptimizations.assertEquals()\":734,\"Connection.close()\":964,\"Statement.execute()\":164,\"int:2\":600,\"int:1\":561,\"Statement.executeQuery()\":372,\"ResultSet.getInt()\":590},\"expressionEnd\":{\"String:optimizations\":104,\"ResultSet.getString()\":563,\"String:drop table test\":953,\"String\":546,\"Connection.createStatement()\":154,\"TestOptimizations.getConnection()\":105,\"ResultSet.next()\":520,\"int\":794,\"TestOptimizations.assertEquals()\":769,\"Connection.close()\":976,\"Statement.execute()\":314,\"int:2\":601,\"int:1\":562,\"Statement.executeQuery()\":501,\"ResultSet.getInt()\":602},\"rawCode\":\"private void testAnalyzeLob() throws Exception {\\n        Connection conn \\u003d getConnection(\\\"optimizations\\\");\\n        Statement stat \\u003d conn.createStatement();\\n        stat.execute(\\\"create table test(v varchar, b binary, cl clob, bl blob) as \\\" +\\n                \\\"select \\u0027 \\u0027, \\u002700\\u0027, \\u0027 \\u0027, \\u002700\\u0027 from system_range(1, 100)\\\");\\n        stat.execute(\\\"analyze\\\");\\n        ResultSet rs \\u003d stat.executeQuery(\\\"select column_name, selectivity \\\" +\\n                \\\"from information_schema.columns where table_name\\u003d\\u0027TEST\\u0027\\\");\\n        rs.next();\\n        assertEquals(\\\"V\\\", rs.getString(1));\\n        assertEquals(1, rs.getInt(2));\\n        rs.next();\\n        assertEquals(\\\"B\\\", rs.getString(1));\\n        assertEquals(1, rs.getInt(2));\\n        rs.next();\\n        assertEquals(\\\"CL\\\", rs.getString(1));\\n        assertEquals(50, rs.getInt(2));\\n        rs.next();\\n        assertEquals(\\\"BL\\\", rs.getString(1));\\n        assertEquals(50, rs.getInt(2));\\n        stat.execute(\\\"drop table test\\\");\\n        conn.close();\\n    }\"}","274":"{\"expressionStart\":{\"String:optimizations\":73,\"\\u003cr\\u003e\":526,\"ResultSet.getString()\":497,\"String\":381,\"TestOptimizations.fail()\":584,\"Connection.createStatement()\":174,\"TestOptimizations.getConnection()\":117,\"ResultSet.next()\":464,\"String.indexOf()\":526,\"Statement.execute()\":270,\"Connection.close()\":656,\"TestOptimizations.deleteDb()\":64,\"int:1\":510,\"Statement.executeQuery()\":363,\"int:0\":567},\"expressionEnd\":{\"String:optimizations\":88,\"\\u003cr\\u003e\":568,\"ResultSet.getString()\":512,\"String\":400,\"TestOptimizations.fail()\":636,\"Connection.createStatement()\":196,\"TestOptimizations.getConnection()\":147,\"ResultSet.next()\":473,\"String.indexOf()\":564,\"Statement.execute()\":338,\"Connection.close()\":668,\"TestOptimizations.deleteDb()\":89,\"int:1\":511,\"Statement.executeQuery()\":454,\"int:0\":568},\"rawCode\":\"private void testOptimizeInJoin() throws SQLException {\\n        deleteDb(\\\"optimizations\\\");\\n        Connection conn \\u003d getConnection(\\\"optimizations\\\");\\n        Statement stat \\u003d conn.createStatement();\\n\\n        stat.execute(\\\"create table test(id int primary key)\\\");\\n        stat.execute(\\\"insert into test select x from system_range(1, 1000)\\\");\\n        ResultSet rs \\u003d stat.executeQuery(\\\"explain select * \\\" +\\n                \\\"from test where id in (400, 300)\\\");\\n        rs.next();\\n        String plan \\u003d rs.getString(1);\\n        if (plan.indexOf(\\\"/* PUBLIC.PRIMARY_KEY_\\\") \\u003c 0) {\\n            fail(\\\"Expected using the primary key, got: \\\" + plan);\\n        }\\n        conn.close();\\n    }\"}","275":"{\"expressionStart\":{\"String:optimizations\":97,\"Statement.executeUpdate()\":172,\"Connection.close()\":493,\"ResultSet.getString()\":445,\"String\":462,\"TestOptimizations.assertContains()\":430,\"Connection.createStatement()\":140,\"TestOptimizations.getConnection()\":83,\"int:1\":458,\"Statement.executeQuery()\":305,\"ResultSet.next()\":411},\"expressionEnd\":{\"String:optimizations\":112,\"Statement.executeUpdate()\":280,\"Connection.close()\":505,\"ResultSet.getString()\":460,\"String\":482,\"TestOptimizations.assertContains()\":483,\"Connection.createStatement()\":162,\"TestOptimizations.getConnection()\":113,\"int:1\":459,\"Statement.executeQuery()\":401,\"ResultSet.next()\":420},\"rawCode\":\"private void testFastRowIdCondition() throws Exception {\\n        Connection conn \\u003d getConnection(\\\"optimizations\\\");\\n        Statement stat \\u003d conn.createStatement();\\n        stat.executeUpdate(\\\"create table many(id int) \\\" +\\n                \\\"as select x from system_range(1, 10000)\\\");\\n        ResultSet rs \\u003d stat.executeQuery(\\\"explain analyze select * from many \\\" +\\n                \\\"where _rowid_ \\u003d 400\\\");\\n        rs.next();\\n        assertContains(rs.getString(1), \\\"/* scanCount: 2 */\\\");\\n        conn.close();\\n    }\"}","276":"{\"expressionStart\":{\"String:optimizations\":81,\"\\u003cr\\u003e\":1754,\"String\":401,\"int:500\":275,\"Connection.createStatement()\":182,\"TestOptimizations.getConnection()\":125,\"ResultSet.next()\":1637,\"String.indexOf()\":1754,\"ResultSet.wasNull()\":1943,\"TestOptimizations.assertTrue()\":1743,\"Connection.close()\":2213,\"Random.\\u003cinit\\u003e\":230,\"int:2\":2031,\"Random.nextBoolean()\":446,\"int:1\":241,\"Statement.executeQuery()\":1814,\"int:0\":302,\"ResultSet.getInt()\":1913,\"ResultSet.getString()\":1710,\"int\":271,\"TestOptimizations.assertEquals()\":2163,\"Random.nextInt()\":834,\"Statement.execute()\":388,\"String:)\":712,\"\\u003ca\\u003e\":314,\"int:10\":849,\"TestOptimizations.deleteDb()\":72,\"TestOptimizations.getSize()\":263,\"\\u003d\":1975},\"expressionEnd\":{\"String:optimizations\":96,\"\\u003cr\\u003e\":1780,\"String\":427,\"int:500\":278,\"Connection.createStatement()\":204,\"TestOptimizations.getConnection()\":155,\"ResultSet.next()\":1646,\"String.indexOf()\":1776,\"ResultSet.wasNull()\":1955,\"TestOptimizations.assertTrue()\":1781,\"Connection.close()\":2225,\"Random.\\u003cinit\\u003e\":243,\"int:2\":2032,\"Random.nextBoolean()\":466,\"int:1\":242,\"Statement.executeQuery()\":1866,\"int:0\":303,\"ResultSet.getInt()\":1925,\"ResultSet.getString()\":1725,\"int\":273,\"TestOptimizations.assertEquals()\":2193,\"Random.nextInt()\":852,\"Statement.execute()\":428,\"String:)\":715,\"\\u003ca\\u003e\":317,\"int:10\":851,\"TestOptimizations.deleteDb()\":97,\"TestOptimizations.getSize()\":279,\"\\u003d\":1983},\"rawCode\":\"private void testMinMaxNullOptimization() throws SQLException {\\n        deleteDb(\\\"optimizations\\\");\\n        Connection conn \\u003d getConnection(\\\"optimizations\\\");\\n        Statement stat \\u003d conn.createStatement();\\n        Random random \\u003d new Random(1);\\n        int len \\u003d getSize(50, 500);\\n        for (int i \\u003d 0; i \\u003c len; i++) {\\n            stat.execute(\\\"drop table if exists test\\\");\\n            stat.execute(\\\"create table test(x int)\\\");\\n            if (random.nextBoolean()) {\\n                int count \\u003d random.nextBoolean() ? 1 : 1 + random.nextInt(len);\\n                if (count \\u003e 0) {\\n                    stat.execute(\\\"insert into test select null \\\" +\\n                            \\\"from system_range(1, \\\" + count + \\\")\\\");\\n                }\\n            }\\n            int maxExpected \\u003d -1;\\n            int minExpected \\u003d -1;\\n            if (random.nextInt(10) !\\u003d 1) {\\n                minExpected \\u003d 1;\\n                maxExpected \\u003d 1 + random.nextInt(len);\\n                stat.execute(\\\"insert into test select x \\\" +\\n                        \\\"from system_range(1, \\\" + maxExpected + \\\")\\\");\\n            }\\n            String sql \\u003d \\\"create index idx on test(x\\\";\\n            if (random.nextBoolean()) {\\n                sql +\\u003d \\\" desc\\\";\\n            }\\n            if (random.nextBoolean()) {\\n                if (random.nextBoolean()) {\\n                    sql +\\u003d \\\" nulls first\\\";\\n                } else {\\n                    sql +\\u003d \\\" nulls last\\\";\\n                }\\n            }\\n            sql +\\u003d \\\")\\\";\\n            stat.execute(sql);\\n            ResultSet rs \\u003d stat.executeQuery(\\n                    \\\"explain select min(x), max(x) from test\\\");\\n            rs.next();\\n            if (!config.mvcc) {\\n                String plan \\u003d rs.getString(1);\\n                assertTrue(plan.indexOf(\\\"direct\\\") \\u003e 0);\\n            }\\n            rs \\u003d stat.executeQuery(\\\"select min(x), max(x) from test\\\");\\n            rs.next();\\n            int min \\u003d rs.getInt(1);\\n            if (rs.wasNull()) {\\n                min \\u003d -1;\\n            }\\n            int max \\u003d rs.getInt(2);\\n            if (rs.wasNull()) {\\n                max \\u003d -1;\\n            }\\n            assertEquals(minExpected, min);\\n            assertEquals(maxExpected, max);\\n        }\\n        conn.close();\\n    }\"}","277":"{\"expressionStart\":{\"String:optimizations\":83,\"Connection.close()\":587,\"Statement.execute()\":158,\"ResultSet.getString()\":504,\"String:drop table test\":559,\"String\":521,\"TestOptimizations.assertContains()\":489,\"Connection.createStatement()\":126,\"int:1\":517,\"TestOptimizations.getConnection()\":69,\"ResultSet.next()\":416,\"Statement.executeQuery()\":300},\"expressionEnd\":{\"String:optimizations\":98,\"Connection.close()\":599,\"Statement.execute()\":275,\"ResultSet.getString()\":519,\"String:drop table test\":576,\"String\":535,\"TestOptimizations.assertContains()\":536,\"Connection.createStatement()\":148,\"int:1\":518,\"TestOptimizations.getConnection()\":99,\"ResultSet.next()\":425,\"Statement.executeQuery()\":406},\"rawCode\":\"private void testLike() throws Exception {\\n        Connection conn \\u003d getConnection(\\\"optimizations\\\");\\n        Statement stat \\u003d conn.createStatement();\\n        stat.execute(\\\"create table test(name varchar primary key) as \\\" +\\n                \\\"select x from system_range(1, 10)\\\");\\n        ResultSet rs \\u003d stat.executeQuery(\\\"explain select * from test \\\" +\\n                \\\"where name like ? || \\u0027%\\u0027 {1: \\u0027Hello\\u0027}\\\");\\n        rs.next();\\n        // ensure the ID \\u003d 10 part is evaluated first\\n        assertContains(rs.getString(1), \\\"PRIMARY_KEY_\\\");\\n        stat.execute(\\\"drop table test\\\");\\n        conn.close();\\n    }\"}","278":"{\"expressionStart\":{\"String:optimizations\":72,\"ResultSet.getString()\":586,\"String\":219,\"TestOptimizations.assertContains()\":571,\"Connection.createStatement()\":173,\"TestOptimizations.getConnection()\":116,\"ResultSet.next()\":552,\"int:5\":794,\"TestOptimizations.assertEquals()\":781,\"Connection.close()\":821,\"Statement.execute()\":206,\"TestOptimizations.deleteDb()\":63,\"int:1\":599,\"Statement.executeQuery()\":642,\"ResultSet.getInt()\":797},\"expressionEnd\":{\"String:optimizations\":87,\"ResultSet.getString()\":601,\"String\":277,\"TestOptimizations.assertContains()\":626,\"Connection.createStatement()\":195,\"TestOptimizations.getConnection()\":146,\"ResultSet.next()\":561,\"int:5\":795,\"TestOptimizations.assertEquals()\":810,\"Connection.close()\":833,\"Statement.execute()\":278,\"TestOptimizations.deleteDb()\":88,\"int:1\":600,\"Statement.executeQuery()\":752,\"ResultSet.getInt()\":809},\"rawCode\":\"private void testConvertOrToIn() throws SQLException {\\n        deleteDb(\\\"optimizations\\\");\\n        Connection conn \\u003d getConnection(\\\"optimizations\\\");\\n        Statement stat \\u003d conn.createStatement();\\n\\n        stat.execute(\\\"create table test(id int primary key, name varchar(255))\\\");\\n        stat.execute(\\\"insert into test values\\\" +\\n                \\\"(1, \\u00271\\u0027), (2, \\u00272\\u0027), (3, \\u00273\\u0027), (4, \\u00274\\u0027), (5, \\u00275\\u0027)\\\");\\n\\n        ResultSet rs \\u003d stat.executeQuery(\\\"EXPLAIN PLAN FOR SELECT * \\\" +\\n                \\\"FROM test WHERE ID\\u003d1 OR ID\\u003d2 OR ID\\u003d3 OR ID\\u003d4 OR ID\\u003d5\\\");\\n        rs.next();\\n        assertContains(rs.getString(1), \\\"ID IN(1, 2, 3, 4, 5)\\\");\\n\\n        rs \\u003d stat.executeQuery(\\\"SELECT COUNT(*) FROM test \\\" +\\n                \\\"WHERE ID\\u003d1 OR ID\\u003d2 OR ID\\u003d3 OR ID\\u003d4 OR ID\\u003d5\\\");\\n        rs.next();\\n        assertEquals(5, rs.getInt(1));\\n\\n        conn.close();\\n    }\"}","279":"{\"expressionStart\":{\"String:optimizations\":96,\"Statement.execute()\":575,\"Connection.close()\":616,\"ResultSet.getString()\":507,\"String:drop table test\":588,\"TestOptimizations.assertContains()\":532,\"String\":399,\"Connection.createStatement()\":139,\"int:1\":520,\"TestOptimizations.getConnection()\":82,\"ResultSet.next()\":474,\"Statement.executeQuery()\":364},\"expressionEnd\":{\"String:optimizations\":111,\"Statement.execute()\":606,\"Connection.close()\":628,\"ResultSet.getString()\":522,\"String:drop table test\":605,\"TestOptimizations.assertContains()\":565,\"String\":463,\"Connection.createStatement()\":161,\"int:1\":521,\"TestOptimizations.getConnection()\":112,\"ResultSet.next()\":483,\"Statement.executeQuery()\":464},\"rawCode\":\"private void testOrderByExpression() throws Exception {\\n        Connection conn \\u003d getConnection(\\\"optimizations\\\");\\n        Statement stat \\u003d conn.createStatement();\\n        stat.execute(\\\"create table test(id int primary key, name varchar)\\\");\\n        stat.execute(\\\"insert into test values(1, \\u0027Hello\\u0027), (2, \\u0027Hello\\u0027), (3, \\u0027Hello\\u0027)\\\");\\n        ResultSet rs;\\n        rs \\u003d stat.executeQuery(\\n                \\\"explain select name from test where name\\u003d\\u0027Hello\\u0027 order by name\\\");\\n        rs.next();\\n        String plan \\u003d rs.getString(1);\\n        assertContains(plan, \\\"tableScan\\\");\\n        stat.execute(\\\"drop table test\\\");\\n        conn.close();\\n    }\"}","280":"{\"expressionStart\":{\"String:optimizations\":219,\"Statement.execute()\":471,\"Connection.close()\":1390,\"ResultSet.getString()\":1329,\"String\":741,\"TestOptimizations.assertContains()\":709,\"TestOptimizations.deleteDb()\":210,\"Connection.createStatement()\":320,\"int:1\":737,\"TestOptimizations.getConnection()\":263,\"ResultSet.next()\":1295,\"Statement.executeQuery()\":1155},\"expressionEnd\":{\"String:optimizations\":234,\"Statement.execute()\":529,\"Connection.close()\":1402,\"ResultSet.getString()\":1344,\"String\":772,\"TestOptimizations.assertContains()\":773,\"TestOptimizations.deleteDb()\":235,\"Connection.createStatement()\":342,\"int:1\":738,\"TestOptimizations.getConnection()\":293,\"ResultSet.next()\":1304,\"Statement.executeQuery()\":1285},\"rawCode\":\"/**\\n     * Where there are multiple indices, and we have an ORDER BY, select the\\n     * index that already has the required ordering.\\n     */\\n    private void testOrderedIndexes() throws SQLException {\\n        deleteDb(\\\"optimizations\\\");\\n        Connection conn \\u003d getConnection(\\\"optimizations\\\");\\n        Statement stat \\u003d conn.createStatement();\\n\\n        stat.execute(\\\"CREATE TABLE my_table(K1 INT, K2 INT, \\\" +\\n                \\\"VAL VARCHAR, PRIMARY KEY(K1, K2))\\\");\\n        stat.execute(\\\"CREATE INDEX my_index ON my_table(K1, VAL)\\\");\\n        ResultSet rs \\u003d stat.executeQuery(\\n                \\\"EXPLAIN PLAN FOR SELECT * FROM my_table WHERE K1\\u003d7 \\\" +\\n                \\\"ORDER BY K1, VAL\\\");\\n        rs.next();\\n        assertContains(rs.getString(1), \\\"/* PUBLIC.MY_INDEX: K1 \\u003d 7 */\\\");\\n\\n        stat.execute(\\\"DROP TABLE my_table\\\");\\n\\n        // where we have two covering indexes, make sure\\n        // we choose the one that covers more\\n        stat.execute(\\\"CREATE TABLE my_table(K1 INT, K2 INT, VAL VARCHAR)\\\");\\n        stat.execute(\\\"CREATE INDEX my_index1 ON my_table(K1, K2)\\\");\\n        stat.execute(\\\"CREATE INDEX my_index2 ON my_table(K1, K2, VAL)\\\");\\n        rs \\u003d stat.executeQuery(\\n                \\\"EXPLAIN PLAN FOR SELECT * FROM my_table WHERE K1\\u003d7 \\\" +\\n                \\\"ORDER BY K1, K2, VAL\\\");\\n        rs.next();\\n        assertContains(rs.getString(1), \\\"/* PUBLIC.MY_INDEX2: K1 \\u003d 7 */\\\");\\n\\n        conn.close();\\n    }\"}","281":"{\"expressionStart\":{\"String:optimizations\":75,\"String.equals()\":488,\"TestOptimizations.assertFalse()\":476,\"Thread.sleep()\":361,\"ResultSet.getString()\":451,\"String\":223,\"TestOptimizations.getConnection()\":119,\"ResultSet.next()\":421,\"int\":374,\"Connection.prepareStatement()\":184,\"PreparedStatement.executeQuery()\":392,\"Connection.close()\":510,\"TestOptimizations.deleteDb()\":66,\"int:1\":349},\"expressionEnd\":{\"String:optimizations\":90,\"String.equals()\":499,\"TestOptimizations.assertFalse()\":500,\"Thread.sleep()\":377,\"ResultSet.getString()\":466,\"String\":251,\"TestOptimizations.getConnection()\":149,\"ResultSet.next()\":430,\"int\":376,\"Connection.prepareStatement()\":252,\"PreparedStatement.executeQuery()\":411,\"Connection.close()\":522,\"TestOptimizations.deleteDb()\":91,\"int:1\":350},\"rawCode\":\"private void testQueryCacheTimestamp() throws Exception {\\n        deleteDb(\\\"optimizations\\\");\\n        Connection conn \\u003d getConnection(\\\"optimizations\\\");\\n        PreparedStatement prep \\u003d conn.prepareStatement(\\n                \\\"SELECT CURRENT_TIMESTAMP()\\\");\\n        ResultSet rs \\u003d prep.executeQuery();\\n        rs.next();\\n        String a \\u003d rs.getString(1);\\n        Thread.sleep(50);\\n        rs \\u003d prep.executeQuery();\\n        rs.next();\\n        String b \\u003d rs.getString(1);\\n        assertFalse(a.equals(b));\\n        conn.close();\\n    }\"}","282":"{\"expressionStart\":{\"String:optimizations\":93,\"Statement.execute()\":446,\"Connection.close()\":855,\"ResultSet.getString()\":784,\"String\":660,\"TestOptimizations.deleteDb()\":84,\"TestOptimizations.assertContains()\":809,\"Connection.createStatement()\":194,\"TestOptimizations.getConnection()\":137,\"int:1\":797,\"Statement.executeQuery()\":564,\"ResultSet.next()\":751},\"expressionEnd\":{\"String:optimizations\":108,\"Statement.execute()\":527,\"Connection.close()\":867,\"ResultSet.getString()\":799,\"String\":694,\"TestOptimizations.deleteDb()\":109,\"TestOptimizations.assertContains()\":845,\"Connection.createStatement()\":216,\"TestOptimizations.getConnection()\":167,\"int:1\":798,\"Statement.executeQuery()\":741,\"ResultSet.next()\":760},\"rawCode\":\"private void testUseIndexWhenAllColumnsNotInOrderBy() throws SQLException {\\n        deleteDb(\\\"optimizations\\\");\\n        Connection conn \\u003d getConnection(\\\"optimizations\\\");\\n        Statement stat \\u003d conn.createStatement();\\n        stat.execute(\\\"create table test(id int primary key, account int, tx int)\\\");\\n        stat.execute(\\\"insert into test select x, x*100, x from system_range(1, 10000)\\\");\\n        stat.execute(\\\"analyze sample_size 5\\\");\\n        stat.execute(\\\"create unique index idx_test_account_tx on test(account, tx desc)\\\");\\n        ResultSet rs;\\n        rs \\u003d stat.executeQuery(\\\"explain analyze \\\" +\\n                \\\"select tx from test \\\" +\\n                \\\"where account\\u003d22 and tx\\u003c9999999 \\\" +\\n                \\\"order by tx desc limit 25\\\");\\n        rs.next();\\n        String plan \\u003d rs.getString(1);\\n        assertContains(plan, \\\"index sorted\\\");\\n        conn.close();\\n    }\"}","283":"{\"expressionStart\":{\"String:optimizations\":80,\"\\u003cr\\u003e\":729,\"ResultSet.getString()\":693,\"String\":483,\"Connection.createStatement()\":181,\"TestOptimizations.getConnection()\":124,\"ResultSet.next()\":660,\"String.indexOf()\":729,\"TestOptimizations.assertTrue()\":718,\"Statement.execute()\":360,\"Connection.close()\":770,\"TestOptimizations.deleteDb()\":71,\"int:1\":706,\"Statement.executeQuery()\":544,\"int:0\":758},\"expressionEnd\":{\"String:optimizations\":95,\"\\u003cr\\u003e\":759,\"ResultSet.getString()\":708,\"String\":506,\"Connection.createStatement()\":203,\"TestOptimizations.getConnection()\":154,\"ResultSet.next()\":669,\"String.indexOf()\":755,\"TestOptimizations.assertTrue()\":760,\"Statement.execute()\":460,\"Connection.close()\":782,\"TestOptimizations.deleteDb()\":96,\"int:1\":707,\"Statement.executeQuery()\":650,\"int:0\":759},\"rawCode\":\"private void testMultiColumnRangeQuery() throws SQLException {\\n        deleteDb(\\\"optimizations\\\");\\n        Connection conn \\u003d getConnection(\\\"optimizations\\\");\\n        Statement stat \\u003d conn.createStatement();\\n        stat.execute(\\\"CREATE TABLE Logs(id INT PRIMARY KEY, type INT)\\\");\\n        stat.execute(\\\"CREATE unique INDEX type_index ON Logs(type, id)\\\");\\n        stat.execute(\\\"INSERT INTO Logs SELECT X, MOD(X, 3) \\\" +\\n                \\\"FROM SYSTEM_RANGE(1, 1000)\\\");\\n        stat.execute(\\\"ANALYZE SAMPLE_SIZE 0\\\");\\n        ResultSet rs;\\n        rs \\u003d stat.executeQuery(\\\"EXPLAIN SELECT id FROM Logs \\\" +\\n                \\\"WHERE id \\u003c 100 and type\\u003d2 AND id\\u003c100\\\");\\n        rs.next();\\n        String plan \\u003d rs.getString(1);\\n        assertTrue(plan.indexOf(\\\"TYPE_INDEX\\\") \\u003e 0);\\n        conn.close();\\n    }\"}","284":"{\"expressionStart\":{\"String:optimizations\":146,\"TestOptimizations.assertFalse()\":1105,\"ResultSet.getString()\":865,\"String:Hello\":856,\"String:drop table test\":1150,\"String\":1192,\"TestOptimizations.assertContains()\":1539,\"Connection.createStatement()\":189,\"TestOptimizations.getConnection()\":132,\"\\u003creturn\\u003e\":88,\"ResultSet.next()\":2207,\"int\":1030,\"TestOptimizations.assertEquals()\":2168,\"int:3\":2239,\"Statement.execute()\":1137,\"Connection.close()\":2346,\"int:10\":816,\"int:11\":923,\"int:2\":878,\"int:1\":830,\"Statement.executeQuery()\":1445,\"int:0\":2045,\"ResultSet.getInt()\":2242},\"expressionEnd\":{\"String:optimizations\":161,\"TestOptimizations.assertFalse()\":1127,\"ResultSet.getString()\":880,\"String:Hello\":863,\"String:drop table test\":1167,\"String\":1245,\"TestOptimizations.assertContains()\":1595,\"Connection.createStatement()\":211,\"TestOptimizations.getConnection()\":162,\"\\u003creturn\\u003e\":95,\"ResultSet.next()\":2216,\"int\":1032,\"TestOptimizations.assertEquals()\":2197,\"int:3\":2240,\"Statement.execute()\":1168,\"Connection.close()\":2358,\"int:10\":818,\"int:11\":925,\"int:2\":879,\"int:1\":831,\"Statement.executeQuery()\":1510,\"int:0\":2046,\"ResultSet.getInt()\":2254},\"rawCode\":\"private void testRowId() throws SQLException {\\n        if (config.memory) {\\n            return;\\n        }\\n        Connection conn \\u003d getConnection(\\\"optimizations\\\");\\n        Statement stat \\u003d conn.createStatement();\\n        ResultSet rs;\\n\\n        stat.execute(\\\"create table test(data varchar)\\\");\\n        stat.execute(\\\"select min(_rowid_ + 1) from test\\\");\\n        stat.execute(\\\"insert into test(_rowid_, data) values(10, \\u0027Hello\\u0027)\\\");\\n        stat.execute(\\\"insert into test(data) values(\\u0027World\\u0027)\\\");\\n        stat.execute(\\\"insert into test(_rowid_, data) values(20, \\u0027Hello\\u0027)\\\");\\n        stat.execute(\\n                \\\"merge into test(_rowid_, data) key(_rowid_) values(20, \\u0027Hallo\\u0027)\\\");\\n        rs \\u003d stat.executeQuery(\\n                \\\"select _rowid_, data from test order by _rowid_\\\");\\n        rs.next();\\n        assertEquals(10, rs.getInt(1));\\n        assertEquals(\\\"Hello\\\", rs.getString(2));\\n        rs.next();\\n        assertEquals(11, rs.getInt(1));\\n        assertEquals(\\\"World\\\", rs.getString(2));\\n        rs.next();\\n        assertEquals(21, rs.getInt(1));\\n        assertEquals(\\\"Hallo\\\", rs.getString(2));\\n        assertFalse(rs.next());\\n        stat.execute(\\\"drop table test\\\");\\n\\n        stat.execute(\\\"create table test(id int primary key, name varchar)\\\");\\n        stat.execute(\\\"insert into test values(0, \\u0027Hello\\u0027)\\\");\\n        stat.execute(\\\"insert into test values(3, \\u0027Hello\\u0027)\\\");\\n        stat.execute(\\\"insert into test values(2, \\u0027Hello\\u0027)\\\");\\n\\n        rs \\u003d stat.executeQuery(\\\"explain select * from test where _rowid_ \\u003d 2\\\");\\n        rs.next();\\n        assertContains(rs.getString(1), \\\".tableScan: _ROWID_ \\u003d\\\");\\n\\n        rs \\u003d stat.executeQuery(\\\"explain select * from test where _rowid_ \\u003e 2\\\");\\n        rs.next();\\n        assertContains(rs.getString(1), \\\".tableScan: _ROWID_ \\u003e\\\");\\n\\n        rs \\u003d stat.executeQuery(\\\"explain select * from test order by _rowid_\\\");\\n        rs.next();\\n        assertContains(rs.getString(1), \\\"/* index sorted */\\\");\\n        rs \\u003d stat.executeQuery(\\\"select _rowid_, * from test order by _rowid_\\\");\\n        rs.next();\\n        assertEquals(0, rs.getInt(1));\\n        assertEquals(0, rs.getInt(2));\\n        rs.next();\\n        assertEquals(2, rs.getInt(1));\\n        assertEquals(2, rs.getInt(2));\\n        rs.next();\\n        assertEquals(3, rs.getInt(1));\\n        assertEquals(3, rs.getInt(2));\\n\\n        stat.execute(\\\"drop table test\\\");\\n        conn.close();\\n    }\"}","285":"{\"expressionStart\":{\"String:optimizations\":93,\"Statement.execute()\":539,\"Connection.close()\":580,\"ResultSet.getString()\":494,\"String:drop table test\":552,\"TestOptimizations.assertContains()\":479,\"String\":337,\"Connection.createStatement()\":136,\"TestOptimizations.getConnection()\":79,\"int:1\":507,\"Statement.executeQuery()\":271,\"ResultSet.next()\":406},\"expressionEnd\":{\"String:optimizations\":108,\"Statement.execute()\":570,\"Connection.close()\":592,\"ResultSet.getString()\":509,\"String:drop table test\":569,\"TestOptimizations.assertContains()\":529,\"String\":395,\"Connection.createStatement()\":158,\"TestOptimizations.getConnection()\":109,\"int:1\":508,\"Statement.executeQuery()\":396,\"ResultSet.next()\":415},\"rawCode\":\"private void testExistsSubquery() throws Exception {\\n        Connection conn \\u003d getConnection(\\\"optimizations\\\");\\n        Statement stat \\u003d conn.createStatement();\\n        stat.execute(\\\"create table test(id int) as select x from system_range(1, 10)\\\");\\n        ResultSet rs \\u003d stat.executeQuery(\\\"explain select * from test \\\" +\\n                \\\"where exists(select 1 from test, test, test) and id \\u003d 10\\\");\\n        rs.next();\\n        // ensure the ID \\u003d 10 part is evaluated first\\n        assertContains(rs.getString(1), \\\"WHERE (ID \\u003d 10)\\\");\\n        stat.execute(\\\"drop table test\\\");\\n        conn.close();\\n    }\"}","286":"{\"expressionStart\":{\"String:optimizations\":61,\"TestOptimizations.assertFalse()\":1813,\"ResultSet.getString()\":2127,\"String:Hello\":1328,\"PreparedStatement.setInt()\":2343,\"String\":928,\"Connection.createStatement()\":162,\"TestOptimizations.getConnection()\":105,\"ResultSet.next()\":1825,\"TestOptimizations.assertEquals()\":1765,\"UNKNOWN.next()\":804,\"Connection.prepareStatement()\":1853,\"Connection.close()\":2695,\"PreparedStatement.executeQuery()\":2375,\"Statement.execute()\":915,\"TestOptimizations.deleteDb()\":52,\"int:2\":1350,\"int:1\":1208,\"Statement.executeQuery()\":804,\"ResultSet.getInt()\":1292},\"expressionEnd\":{\"String:optimizations\":76,\"TestOptimizations.assertFalse()\":1835,\"ResultSet.getString()\":2142,\"String:Hello\":1335,\"PreparedStatement.setInt()\":2360,\"String\":981,\"Connection.createStatement()\":184,\"TestOptimizations.getConnection()\":135,\"ResultSet.next()\":1834,\"TestOptimizations.assertEquals()\":1803,\"UNKNOWN.next()\":903,\"Connection.prepareStatement()\":1976,\"Connection.close()\":2707,\"PreparedStatement.executeQuery()\":2394,\"Statement.execute()\":982,\"TestOptimizations.deleteDb()\":77,\"int:2\":1351,\"int:1\":1209,\"Statement.executeQuery()\":896,\"ResultSet.getInt()\":1304},\"rawCode\":\"private void testIn() throws SQLException {\\n        deleteDb(\\\"optimizations\\\");\\n        Connection conn \\u003d getConnection(\\\"optimizations\\\");\\n        Statement stat \\u003d conn.createStatement();\\n        PreparedStatement prep;\\n        ResultSet rs;\\n\\n        assertFalse(stat.executeQuery(\\\"select * from dual \\\" +\\n                \\\"where x in()\\\").next());\\n        assertFalse(stat.executeQuery(\\\"select * from dual \\\" +\\n                \\\"where null in(1)\\\").next());\\n        assertFalse(stat.executeQuery(\\\"select * from dual \\\" +\\n                \\\"where null in(null)\\\").next());\\n        assertFalse(stat.executeQuery(\\\"select * from dual \\\" +\\n                \\\"where null in(null, 1)\\\").next());\\n\\n        assertFalse(stat.executeQuery(\\\"select * from dual \\\" +\\n                \\\"where 1+x in(3, 4)\\\").next());\\n        assertFalse(stat.executeQuery(\\\"select * from dual d1, dual d2 \\\" +\\n                \\\"where d1.x in(3, 4)\\\").next());\\n\\n        stat.execute(\\\"create table test(id int primary key, name varchar)\\\");\\n        stat.execute(\\\"insert into test values(1, \\u0027Hello\\u0027)\\\");\\n        stat.execute(\\\"insert into test values(2, \\u0027World\\u0027)\\\");\\n\\n        prep \\u003d conn.prepareStatement(\\\"select * from test t1 where t1.id in(?)\\\");\\n        prep.setInt(1, 1);\\n        rs \\u003d prep.executeQuery();\\n        rs.next();\\n        assertEquals(1, rs.getInt(1));\\n        assertEquals(\\\"Hello\\\", rs.getString(2));\\n        assertFalse(rs.next());\\n\\n        prep \\u003d conn.prepareStatement(\\\"select * from test t1 \\\" +\\n                \\\"where t1.id in(?, ?) order by id\\\");\\n        prep.setInt(1, 1);\\n        prep.setInt(2, 2);\\n        rs \\u003d prep.executeQuery();\\n        rs.next();\\n        assertEquals(1, rs.getInt(1));\\n        assertEquals(\\\"Hello\\\", rs.getString(2));\\n        rs.next();\\n        assertEquals(2, rs.getInt(1));\\n        assertEquals(\\\"World\\\", rs.getString(2));\\n        assertFalse(rs.next());\\n\\n        prep \\u003d conn.prepareStatement(\\\"select * from test t1 where t1.id \\\"\\n                + \\\"in(select t2.id from test t2 where t2.id\\u003d?)\\\");\\n        prep.setInt(1, 2);\\n        rs \\u003d prep.executeQuery();\\n        rs.next();\\n        assertEquals(2, rs.getInt(1));\\n        assertEquals(\\\"World\\\", rs.getString(2));\\n        assertFalse(rs.next());\\n\\n        prep \\u003d conn.prepareStatement(\\\"select * from test t1 where t1.id \\\"\\n                + \\\"in(select t2.id from test t2 where t2.id\\u003d? and t1.id\\u003c\\u003et2.id)\\\");\\n        prep.setInt(1, 2);\\n        rs \\u003d prep.executeQuery();\\n        assertFalse(rs.next());\\n\\n        prep \\u003d conn.prepareStatement(\\\"select * from test t1 where t1.id \\\"\\n                + \\\"in(select t2.id from test t2 where t2.id in(cast(?+10 as varchar)))\\\");\\n        prep.setInt(1, 2);\\n        rs \\u003d prep.executeQuery();\\n        assertFalse(rs.next());\\n\\n        conn.close();\\n    }\"}","287":"{\"expressionStart\":{\"PreparedStatement.setString()\":208,\"QueryResults.getBaseTableName()\":272,\"ResultSet.getString()\":422,\"String\":151,\"\\u003creturn\\u003e\":481,\"ResultSet.next()\":384,\"String[].arrayset()\":399,\"int:3\":313,\"QueryResults.getBaseCatalogName()\":226,\"Connection.prepareStatement()\":129,\"PreparedStatement.executeQuery()\":358,\"ResultSet.close()\":443,\"String[].arrayget()\":488,\"int:2\":269,\"int:1\":83,\"\\u003cnullcheck\\u003e\":65,\"QueryResults.getBaseColumnName()\":316,\"PreparedStatement.close()\":459},\"expressionEnd\":{\"PreparedStatement.setString()\":248,\"QueryResults.getBaseTableName()\":291,\"ResultSet.getString()\":437,\"String\":201,\"\\u003creturn\\u003e\":509,\"ResultSet.next()\":393,\"String[].arrayset()\":419,\"int:3\":314,\"QueryResults.getBaseCatalogName()\":247,\"Connection.prepareStatement()\":202,\"PreparedStatement.executeQuery()\":377,\"ResultSet.close()\":453,\"String[].arrayget()\":508,\"int:2\":270,\"int:1\":84,\"\\u003cnullcheck\\u003e\":93,\"QueryResults.getBaseColumnName()\":336,\"PreparedStatement.close()\":471},\"rawCode\":\"public String getDatatype(int n)  throws SQLException\\n\\t\\t{\\n\\t\\t\\tif (datatypeArray[n - 1] \\u003d\\u003d null)\\n\\t\\t\\t{\\n\\t\\t\\t\\tPreparedStatement stmt \\u003d conn.prepareStatement(\\\"select cas_get_column_external_datatype(?, ?, ?)\\\");\\n\\t\\t\\t\\tstmt.setString(1, getBaseCatalogName(n));\\n\\t\\t\\t\\tstmt.setString(2, getBaseTableName(n));\\n\\t\\t\\t\\tstmt.setString(3, getBaseColumnName(n));\\n\\t\\t\\t\\tResultSet rs \\u003d stmt.executeQuery(); \\n\\t\\t\\t\\trs.next();\\n\\t\\t\\t\\tdatatypeArray[n - 1] \\u003d rs.getString(1);\\n\\t\\t\\t\\trs.close();\\n\\t\\t\\t\\tstmt.close();\\n\\t\\t\\t}\\n\\t\\t\\treturn datatypeArray[n - 1];\\n\\t\\t}\"}","288":"{\"expressionStart\":{\"Statement.getResultSet()\":218,\"ResultSet.getString()\":324,\"String\":106,\"ArrayList.toArray()\":404,\"\\u003creturn\\u003e\":397,\"ResultSet.next()\":298,\"{String}\":366,\"ArrayList.\\u003cinit\\u003e\":265,\"String:\\u0027);\":166,\"ArrayList.add()\":316,\"ResultSet.close()\":383,\"String:\\u0027,\\u0027\":150,\"int:1\":337,\"Statement.executeQuery()\":175},\"expressionEnd\":{\"Statement.getResultSet()\":237,\"ResultSet.getString()\":339,\"String\":137,\"ArrayList.toArray()\":423,\"\\u003creturn\\u003e\":424,\"ResultSet.next()\":307,\"{String}\":379,\"ArrayList.\\u003cinit\\u003e\":288,\"String:\\u0027);\":171,\"ArrayList.add()\":340,\"ResultSet.close()\":393,\"String:\\u0027,\\u0027\":155,\"int:1\":338,\"Statement.executeQuery()\":199},\"rawCode\":\"public String[] getColumnInfos(String catalogName,String tableName) throws SQLException\\n\\t{\\n\\t\\tString query\\u003d\\\"SELECT cas_get_column_infos(\\u0027\\\"+catalogName+\\\"\\u0027,\\u0027\\\"+tableName+\\\"\\u0027);\\\";\\n\\t\\tstmt.executeQuery(query);\\n\\t\\tResultSet rs \\u003d stmt.getResultSet();\\n\\t\\tArrayList\\u003cString\\u003e als \\u003d new ArrayList\\u003cString\\u003e();\\n\\t\\twhile(rs.next())\\n\\t\\t{\\n\\t\\t\\tals.add(rs.getString(1));\\n\\t\\t}\\n\\t\\tString[] result \\u003d new String[1];\\n\\t\\trs.close();\\n\\t\\treturn als.toArray(result);\\n\\t}\"}","289":"{\"expressionStart\":{\"Statement.getResultSet()\":214,\"Logger.debug()\":130,\"ResultSet.getString()\":383,\"String\":143,\"ArrayList.toArray()\":517,\"\\u003creturn\\u003e\":510,\"{String}\":476,\"ResultSet.next()\":298,\"ArrayList.\\u003cinit\\u003e\":263,\"String[].arrayset()\":376,\"int:3\":342,\"ArrayList.add()\":436,\"ResultSet.close()\":496,\"int:2\":396,\"int:1\":369,\"Statement.executeQuery()\":171,\"int:0\":353},\"expressionEnd\":{\"Statement.getResultSet()\":233,\"Logger.debug()\":167,\"ResultSet.getString()\":398,\"String\":160,\"ArrayList.toArray()\":536,\"\\u003creturn\\u003e\":537,\"{String}\":492,\"ResultSet.next()\":307,\"ArrayList.\\u003cinit\\u003e\":288,\"String[].arrayset()\":382,\"int:3\":343,\"ArrayList.add()\":448,\"ResultSet.close()\":506,\"int:2\":397,\"int:1\":370,\"Statement.executeQuery()\":195,\"int:0\":354},\"rawCode\":\"public String[][] getUserNamesAndEmails() throws SQLException\\n\\t{\\n\\t\\tString query\\u003d\\\"SELECT name, fullname, email from user_list;\\\";\\n\\t\\tlogger.debug(\\\"Running query: \\\"+query);\\n\\t\\tstmt.executeQuery(query);\\n\\t\\tResultSet rs \\u003d stmt.getResultSet();\\n\\t\\tArrayList\\u003cString[]\\u003e als \\u003d new ArrayList\\u003cString[]\\u003e();\\n\\t\\twhile(rs.next())\\n\\t\\t{\\n\\t\\t\\tString[] row \\u003d new String[3];\\n\\t\\t\\trow[0]\\u003drs.getString(1);\\n\\t\\t\\trow[1]\\u003drs.getString(2);\\t\\t\\t\\n\\t\\t\\trow[2]\\u003drs.getString(3);\\t\\t\\t\\n\\t\\t\\tals.add(row);\\n\\t\\t}\\n\\t\\tString[][] result \\u003d new String[1][1];\\n\\t\\trs.close();\\n\\t\\treturn als.toArray(result);\\n\\t}\"}","290":"{\"expressionStart\":{\"PreparedStatement.setString()\":167,\"QueryResults.getBaseTableName()\":230,\"String:\":460,\"ResultSet.getString()\":380,\"String\":117,\"\\u003creturn\\u003e\":510,\"ResultSet.next()\":339,\"int:3\":270,\"QueryResults.getBaseCatalogName()\":185,\"Connection.prepareStatement()\":95,\"ResultSet.close()\":472,\"PreparedStatement.executeQuery()\":314,\"int:2\":227,\"int:1\":182,\"\\u003d\":440,\"PreparedStatement.close()\":487,\"\\u003cnullcheck\\u003e\":404,\"QueryResults.getBaseColumnName()\":273},\"expressionEnd\":{\"PreparedStatement.setString()\":207,\"QueryResults.getBaseTableName()\":249,\"String:\":462,\"ResultSet.getString()\":395,\"String\":161,\"\\u003creturn\\u003e\":535,\"ResultSet.next()\":348,\"int:3\":271,\"QueryResults.getBaseCatalogName()\":206,\"Connection.prepareStatement()\":162,\"ResultSet.close()\":482,\"PreparedStatement.executeQuery()\":333,\"int:2\":228,\"int:1\":183,\"\\u003d\":462,\"PreparedStatement.close()\":499,\"\\u003cnullcheck\\u003e\":429,\"QueryResults.getBaseColumnName()\":293},\"rawCode\":\"public String getColumnDescription(int n)  throws SQLException\\n\\t\\t{\\n\\t\\t\\tPreparedStatement stmt \\u003d conn.prepareStatement(\\\"select cas_get_column_description(?, ?, ?)\\\");\\n\\t\\t\\tstmt.setString(1, getBaseCatalogName(n));\\n\\t\\t\\tstmt.setString(2, getBaseTableName(n));\\n\\t\\t\\tstmt.setString(3, getBaseColumnName(n));\\n\\t\\t\\tResultSet rs \\u003d stmt.executeQuery(); \\n\\t\\t\\trs.next();\\n\\t\\t\\tString columnDescription \\u003d rs.getString(1);\\n\\t\\t\\tif (columnDescription \\u003d\\u003d null)\\n\\t\\t\\t{\\n\\t\\t\\t\\tcolumnDescription \\u003d \\\"\\\";\\n\\t\\t\\t}\\n\\t\\t\\trs.close();\\n\\t\\t\\tstmt.close();      \\n\\t\\t\\treturn columnDescription;\\n\\t\\t}\"}","291":"{\"expressionStart\":{\"ResultSet.getMetaData()\":90,\"{String}\":173,\"ResultSetMetaData.getColumnCount()\":124},\"expressionEnd\":{\"ResultSet.getMetaData()\":111,\"{String}\":190,\"ResultSetMetaData.getColumnCount()\":145},\"rawCode\":\"public QueryResults(ResultSet rs) throws SQLException\\n\\t\\t{\\n\\t\\t\\tthis.rs \\u003d rs;\\n\\t\\t\\tthis.rsmd \\u003d this.rs.getMetaData();\\n\\t\\t\\tncols \\u003d rsmd.getColumnCount();\\n\\t\\t\\tbaseCatalogNameArray \\u003d new String[ncols];\\n\\t\\t\\tbaseTableNameArray \\u003d new String[ncols];\\n\\t\\t\\tbaseColumnNameArray \\u003d new String[ncols];\\n\\t\\t\\tcolumnNameArray \\u003d new String[ncols];      \\n\\t\\t\\tucdArray \\u003d new String[ncols];\\n\\t\\t\\tunitArray \\u003d new String[ncols];\\n\\t\\t\\tdatatypeArray \\u003d new String[ncols];\\n\\t\\t}\"}","292":"{\"expressionStart\":{\"Statement.getResultSet()\":198,\"Logger.debug()\":114,\"ResultSet.getString()\":367,\"String\":71,\"ArrayList.toArray()\":471,\"\\u003creturn\\u003e\":464,\"{String}\":315,\"ResultSet.next()\":282,\"ArrayList.\\u003cinit\\u003e\":247,\"String[].arrayset()\":360,\"ArrayList.add()\":390,\"ResultSet.close()\":450,\"int:2\":326,\"int:1\":353,\"int:0\":337,\"Statement.executeQuery()\":155},\"expressionEnd\":{\"Statement.getResultSet()\":217,\"Logger.debug()\":151,\"ResultSet.getString()\":382,\"String\":110,\"ArrayList.toArray()\":490,\"\\u003creturn\\u003e\":491,\"{String}\":328,\"ResultSet.next()\":291,\"ArrayList.\\u003cinit\\u003e\":272,\"String[].arrayset()\":366,\"ArrayList.add()\":402,\"ResultSet.close()\":460,\"int:2\":327,\"int:1\":354,\"int:0\":338,\"Statement.executeQuery()\":179},\"rawCode\":\"public String[][] getUserNames() throws SQLException\\n\\t{\\n\\t\\tString query\\u003d\\\"SELECT name, fullname from user_list;\\\";\\n\\t\\tlogger.debug(\\\"Running query: \\\"+query);\\n\\t\\tstmt.executeQuery(query);\\n\\t\\tResultSet rs \\u003d stmt.getResultSet();\\n\\t\\tArrayList\\u003cString[]\\u003e als \\u003d new ArrayList\\u003cString[]\\u003e();\\n\\t\\twhile(rs.next())\\n\\t\\t{\\n\\t\\t\\tString[] row \\u003d new String[2];\\n\\t\\t\\trow[0]\\u003drs.getString(1);\\n\\t\\t\\trow[1]\\u003drs.getString(2);\\t\\t\\t\\n\\t\\t\\tals.add(row);\\n\\t\\t}\\n\\t\\tString[][] result \\u003d new String[1][1];\\n\\t\\trs.close();\\n\\t\\treturn als.toArray(result);\\n\\t}\"}","293":"{\"expressionStart\":{\"Statement.getResultSet()\":221,\"ResultSet.getString()\":327,\"String\":106,\"ArrayList.toArray()\":407,\"\\u003creturn\\u003e\":400,\"ResultSet.next()\":301,\"{String}\":369,\"ArrayList.\\u003cinit\\u003e\":268,\"String:\\u0027);\":169,\"ArrayList.add()\":319,\"ResultSet.close()\":386,\"String:\\u0027,\\u0027\":153,\"int:1\":340,\"Statement.executeQuery()\":178},\"expressionEnd\":{\"Statement.getResultSet()\":240,\"ResultSet.getString()\":342,\"String\":140,\"ArrayList.toArray()\":426,\"\\u003creturn\\u003e\":427,\"ResultSet.next()\":310,\"{String}\":382,\"ArrayList.\\u003cinit\\u003e\":291,\"String:\\u0027);\":174,\"ArrayList.add()\":343,\"ResultSet.close()\":396,\"String:\\u0027,\\u0027\":158,\"int:1\":341,\"Statement.executeQuery()\":202},\"rawCode\":\"public String[] getColumnNames(String catalogName,String tableName) throws SQLException\\n\\t{\\n\\t\\tString query\\u003d\\\"SELECT cas_get_attribute_names(\\u0027\\\"+catalogName+\\\"\\u0027,\\u0027\\\"+tableName+\\\"\\u0027);\\\";\\n\\t\\tstmt.executeQuery(query);\\n\\t\\tResultSet rs \\u003d stmt.getResultSet();\\n\\t\\tArrayList\\u003cString\\u003e als \\u003d new ArrayList\\u003cString\\u003e();\\n\\t\\twhile(rs.next())\\n\\t\\t{\\n\\t\\t\\tals.add(rs.getString(1));\\n\\t\\t}\\n\\t\\tString[] result \\u003d new String[1];\\n\\t\\trs.close();\\n\\t\\treturn als.toArray(result);\\n\\t}\"}","294":"{\"expressionStart\":{\"Statement.getResultSet()\":211,\"String:\\u0027);\":159,\"ResultSet.close()\":282,\"String:\\u0027,\\u0027\":147,\"ResultSet.getString()\":263,\"String\":102,\"\\u003creturn\\u003e\":296,\"int:1\":276,\"ResultSet.next()\":234,\"Statement.executeQuery()\":168},\"expressionEnd\":{\"Statement.getResultSet()\":230,\"String:\\u0027);\":164,\"ResultSet.close()\":292,\"String:\\u0027,\\u0027\":152,\"ResultSet.getString()\":278,\"String\":138,\"\\u003creturn\\u003e\":310,\"int:1\":277,\"ResultSet.next()\":243,\"Statement.executeQuery()\":192},\"rawCode\":\"public String getTableDescription(String catalog, String table) throws SQLException\\n\\t{\\n\\t\\tString query\\u003d\\\"SELECT cas_get_table_description(\\u0027\\\"+catalog+\\\"\\u0027,\\u0027\\\"+table+\\\"\\u0027);\\\";\\n\\t\\tstmt.executeQuery(query);\\n\\t\\tResultSet rs \\u003d stmt.getResultSet();\\n\\t\\trs.next();\\n\\t\\tString result \\u003d rs.getString(1);\\n\\t\\trs.close();\\n\\t\\treturn result;\\n\\t}\"}","295":"{\"expressionStart\":{\"String[].arrayset()\":138,\"\\u003cr\\u003e\":114,\"ResultSet.getString()\":151,\"\\u003ca\\u003e\":124,\"\\u003creturn\\u003e\":176,\"int:1\":111,\"{String}\":76},\"expressionEnd\":{\"String[].arrayset()\":148,\"\\u003cr\\u003e\":122,\"ResultSet.getString()\":166,\"\\u003ca\\u003e\":127,\"\\u003creturn\\u003e\":187,\"int:1\":112,\"{String}\":93},\"rawCode\":\"public String[] getStringArray()  throws SQLException\\n\\t\\t{\\n\\t\\t\\tString[] arr \\u003d new String[ncols];\\n\\t\\t\\tfor (int i \\u003d 1; i\\u003c\\u003dncols; i++)\\n\\t\\t\\t{\\n\\t\\t\\t\\tarr[i - 1] \\u003d rs.getString(i);\\n\\t\\t\\t}\\n\\t\\t\\treturn arr;\\n\\t\\t}\"}","296":"{\"expressionStart\":{\"Statement.getResultSet()\":281,\"String:\\u0027);\":188,\"Logger.debug()\":197,\"ResultSet.close()\":352,\"String:\\u0027,\\u0027\":168,\"ResultSet.getString()\":333,\"String\":210,\"\\u003creturn\\u003e\":366,\"int:1\":346,\"Statement.executeQuery()\":238,\"ResultSet.next()\":304},\"expressionEnd\":{\"Statement.getResultSet()\":300,\"String:\\u0027);\":193,\"Logger.debug()\":234,\"ResultSet.close()\":362,\"String:\\u0027,\\u0027\":173,\"ResultSet.getString()\":348,\"String\":227,\"\\u003creturn\\u003e\":380,\"int:1\":347,\"Statement.executeQuery()\":262,\"ResultSet.next()\":313},\"rawCode\":\"public String getColumn_ID_MAIN_UCD(String catalogName, String tableName) throws SQLException\\n\\t{\\n\\t\\tString query\\u003d\\\"SELECT cas_get_table_id_main_ucd(\\u0027\\\" + catalogName +\\n\\t\\t\\t\\\"\\u0027,\\u0027\\\" + tableName + \\\"\\u0027);\\\";\\n\\t\\tlogger.debug(\\\"Running query: \\\"+query);\\n\\t\\tstmt.executeQuery(query);\\n\\t\\tResultSet rs \\u003d stmt.getResultSet();\\n\\t\\trs.next();\\n\\t\\tString result \\u003d rs.getString(1);\\n\\t\\trs.close();\\n\\t\\treturn result;\\n\\t}\"}","297":"{\"expressionStart\":{\"Statement.getResultSet()\":183,\"ResultSet.getString()\":289,\"String\":88,\"ArrayList.toArray()\":369,\"\\u003creturn\\u003e\":362,\"ResultSet.next()\":263,\"{String}\":331,\"ArrayList.\\u003cinit\\u003e\":230,\"String:\\u0027);\":131,\"ArrayList.add()\":281,\"ResultSet.close()\":348,\"int:1\":302,\"Statement.executeQuery()\":140},\"expressionEnd\":{\"Statement.getResultSet()\":202,\"ResultSet.getString()\":304,\"String\":118,\"ArrayList.toArray()\":388,\"\\u003creturn\\u003e\":389,\"ResultSet.next()\":272,\"{String}\":344,\"ArrayList.\\u003cinit\\u003e\":253,\"String:\\u0027);\":136,\"ArrayList.add()\":305,\"ResultSet.close()\":358,\"int:1\":303,\"Statement.executeQuery()\":164},\"rawCode\":\"public String[] getTableNames(String catalogName) throws SQLException\\n\\t{\\n\\t\\tString query\\u003d\\\"SELECT cas_get_table_names(\\u0027\\\"+catalogName+\\\"\\u0027);\\\";\\n\\t\\tstmt.executeQuery(query);\\n\\t\\tResultSet rs \\u003d stmt.getResultSet();\\n\\t\\tArrayList\\u003cString\\u003e als \\u003d new ArrayList\\u003cString\\u003e();\\n\\t\\twhile(rs.next())\\n\\t\\t{\\n\\t\\t\\tals.add(rs.getString(1));\\n\\t\\t}\\n\\t\\tString[] result \\u003d new String[1];\\n\\t\\trs.close();\\n\\t\\treturn als.toArray(result);\\n\\t}\"}","298":"{\"expressionStart\":{\"Statement.getResultSet()\":189,\"String:\\u0027);\":137,\"ResultSet.close()\":260,\"ResultSet.getString()\":241,\"String\":90,\"int:1\":254,\"\\u003creturn\\u003e\":274,\"Statement.executeQuery()\":146,\"ResultSet.next()\":212},\"expressionEnd\":{\"Statement.getResultSet()\":208,\"String:\\u0027);\":142,\"ResultSet.close()\":270,\"ResultSet.getString()\":256,\"String\":128,\"int:1\":255,\"\\u003creturn\\u003e\":288,\"Statement.executeQuery()\":170,\"ResultSet.next()\":221},\"rawCode\":\"public String getCatalogDescription(String catalog) throws SQLException\\n\\t{\\n\\t\\tString query\\u003d\\\"SELECT cas_get_catalog_description(\\u0027\\\"+catalog+\\\"\\u0027);\\\";\\n\\t\\tstmt.executeQuery(query);\\n\\t\\tResultSet rs \\u003d stmt.getResultSet();\\n\\t\\trs.next();\\n\\t\\tString result \\u003d rs.getString(1);\\n\\t\\trs.close();\\n\\t\\treturn result;\\n\\t}\"}","299":"{\"expressionStart\":{\"Statement.getResultSet()\":175,\"String:\\u0027);\":123,\"ResultSet.close()\":246,\"ResultSet.getString()\":227,\"String\":83,\"\\u003creturn\\u003e\":260,\"int:1\":240,\"ResultSet.next()\":198,\"Statement.executeQuery()\":132},\"expressionEnd\":{\"Statement.getResultSet()\":194,\"String:\\u0027);\":128,\"ResultSet.close()\":256,\"ResultSet.getString()\":242,\"String\":114,\"\\u003creturn\\u003e\":274,\"int:1\":241,\"ResultSet.next()\":207,\"Statement.executeQuery()\":156},\"rawCode\":\"public String getCatalogInfo(String catalog) throws SQLException\\n\\t{\\n\\t\\tString query\\u003d\\\"SELECT cas_get_catalog_info(\\u0027\\\"+catalog+\\\"\\u0027);\\\";\\n\\t\\tstmt.executeQuery(query);\\n\\t\\tResultSet rs \\u003d stmt.getResultSet();\\n\\t\\trs.next();\\n\\t\\tString result \\u003d rs.getString(1);\\n\\t\\trs.close();\\n\\t\\treturn result;\\n\\t}\"}","300":"{\"expressionStart\":{\"ResultSet.getString()\":68,\"\\u003creturn\\u003e\":61},\"expressionEnd\":{\"ResultSet.getString()\":83,\"\\u003creturn\\u003e\":84},\"rawCode\":\"public String getString(String s) throws SQLException\\n\\t\\t{\\n\\t\\t\\treturn rs.getString(s);\\n\\t\\t}\"}","301":"{\"expressionStart\":{\"DBException.\\u003cinit\\u003e\":319,\"String:\\u0027)\":212,\"\\u003cthrow\\u003e\":313,\"ResultSet.close()\":525,\"ResultSet.getString()\":401,\"String\":335,\"\\u003creturn\\u003e\":539,\"int:1\":414,\"\\u003cnullcheck\\u003e\":424,\"ResultSet.next()\":294,\"Statement.executeQuery()\":261},\"expressionEnd\":{\"DBException.\\u003cinit\\u003e\":369,\"String:\\u0027)\":216,\"\\u003cthrow\\u003e\":370,\"ResultSet.close()\":535,\"ResultSet.getString()\":416,\"String\":355,\"\\u003creturn\\u003e\":565,\"int:1\":415,\"\\u003cnullcheck\\u003e\":450,\"ResultSet.next()\":303,\"Statement.executeQuery()\":285},\"rawCode\":\"private String getInternalDatatype(String columnType) throws SQLException, DBException {\\n\\t\\tString query;\\n\\t\\tResultSet rs;\\n\\t\\tString columnInternalType;\\n\\t\\tquery \\u003d \\\"select cas_get_internal_datatype(\\u0027\\\" + columnType + \\\"\\u0027)\\\";\\n\\t\\t//stmt \\u003d conn.createStatement(); \\n\\t\\trs \\u003d stmt.executeQuery(query);\\n\\t\\tif (!rs.next()) \\n\\t\\t{\\n\\t\\t\\tthrow new DBException(\\\"Unknown datatype: \\\" + columnType);\\n\\t\\t}\\n\\t\\t\\n\\t\\tcolumnInternalType \\u003d rs.getString(1);\\n\\t\\tif (columnInternalType \\u003d\\u003d null) \\n\\t\\t{\\n\\t\\t\\tthrow new DBException(\\\"Unknown datatype: \\\" + columnType);\\n\\t\\t}\\n\\n\\t\\trs.close();\\n\\t\\treturn columnInternalType;\\n\\t}\"}","302":"{\"expressionStart\":{\"Statement.getResultSet()\":442,\"Logger.debug()\":678,\"String:\\u0027\":331,\"ResultSet.getString()\":633,\"String\":691,\"\\u003creturn\\u003e\":769,\"ResultSet.next()\":660,\"{String}\":602,\"String:\\u0027);\":349,\"String[].arrayset()\":722,\"ResultSet.close()\":755,\"null:null\":567,\"int:2\":613,\"int:1\":646,\"int:0\":628,\"Statement.executeQuery()\":399},\"expressionEnd\":{\"Statement.getResultSet()\":461,\"Logger.debug()\":713,\"String:\\u0027\":334,\"ResultSet.getString()\":648,\"String\":712,\"\\u003creturn\\u003e\":785,\"ResultSet.next()\":669,\"{String}\":615,\"String:\\u0027);\":354,\"String[].arrayset()\":733,\"ResultSet.close()\":765,\"null:null\":571,\"int:2\":614,\"int:1\":647,\"int:0\":629,\"Statement.executeQuery()\":423},\"rawCode\":\"/**\\n\\t * \\n\\t * @param catalogName\\n\\t * @param tableName\\n\\t * @return the name of columns having the UCD of ra \\u0026 dec\\n\\t * @throws SQLException\\n\\t */\\n\\tpublic String[] getRaDecColumnsFromUCD(String catalogName, String tableName) throws SQLException\\n\\t{\\n\\t\\tString query\\u003d\\\"SELECT * FROM cas_get_table_ra_dec_from_ucd(\\u0027\\\" + catalogName + \\\"\\u0027,\\\" +\\n\\t\\t\\\"\\u0027\\\" + tableName + \\\"\\u0027);\\\";\\n\\t\\tlogger.debug(\\\"Running query: \\\"+query);\\n\\t\\tstmt.executeQuery(query);\\n\\t\\tResultSet rs \\u003d stmt.getResultSet();\\n\\t\\t\\n\\t\\tif (!rs.next())\\n\\t\\t{\\n\\t\\t\\tlogger.debug(\\\"No columns with alpha delta columns in the table\\\");\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t\\t\\n\\t\\tString raDecArr[] \\u003d new String[2];\\n\\t\\traDecArr[0] \\u003d rs.getString(1);\\n\\t\\t\\n\\t\\tif (!rs.next())\\n\\t\\t{\\n\\t\\t\\tlogger.debug(\\\"Resultset has 1 elt\\\");\\n\\t\\t}\\n\\n\\t\\traDecArr[1] \\u003d rs.getString(1);\\n\\t\\trs.close();\\n\\t\\treturn raDecArr;\\n\\t}\"}","303":"{\"expressionStart\":{\"ResultSet.getString()\":66,\"\\u003creturn\\u003e\":59},\"expressionEnd\":{\"ResultSet.getString()\":81,\"\\u003creturn\\u003e\":82},\"rawCode\":\"public String getString(int n)  throws SQLException\\n\\t\\t{\\n\\t\\t\\treturn rs.getString(n);\\n\\t\\t}\"}","304":"{\"expressionStart\":{\"Statement.getResultSet()\":197,\"String:\\u0027);\":145,\"ResultSet.close()\":268,\"String:\\u0027,\\u0027\":133,\"ResultSet.getString()\":249,\"String\":95,\"\\u003creturn\\u003e\":282,\"int:1\":262,\"Statement.executeQuery()\":154,\"ResultSet.next()\":220},\"expressionEnd\":{\"Statement.getResultSet()\":216,\"String:\\u0027);\":150,\"ResultSet.close()\":278,\"String:\\u0027,\\u0027\":138,\"ResultSet.getString()\":264,\"String\":124,\"\\u003creturn\\u003e\":296,\"int:1\":263,\"Statement.executeQuery()\":178,\"ResultSet.next()\":229},\"rawCode\":\"public String getTableInfo(String catalog, String table) throws SQLException\\n\\t{\\n\\t\\tString query\\u003d\\\"SELECT cas_get_table_info(\\u0027\\\"+catalog+\\\"\\u0027,\\u0027\\\"+table+\\\"\\u0027);\\\";\\n\\t\\tstmt.executeQuery(query);\\n\\t\\tResultSet rs \\u003d stmt.getResultSet();\\n\\t\\trs.next();\\n\\t\\tString result \\u003d rs.getString(1);\\n\\t\\trs.close();\\n\\t\\treturn result;\\n\\t}\"}","305":"{\"expressionStart\":{\"Statement.getResultSet()\":242,\"ResultSet.getString()\":348,\"String\":110,\"ArrayList.toArray()\":428,\"\\u003creturn\\u003e\":421,\"ResultSet.next()\":322,\"{String}\":390,\"ArrayList.\\u003cinit\\u003e\":289,\"String:\\u0027);\":190,\"ArrayList.add()\":340,\"ResultSet.close()\":407,\"String:\\u0027,\\u0027\":174,\"int:1\":361,\"Statement.executeQuery()\":199},\"expressionEnd\":{\"Statement.getResultSet()\":261,\"ResultSet.getString()\":363,\"String\":161,\"ArrayList.toArray()\":447,\"\\u003creturn\\u003e\":448,\"ResultSet.next()\":331,\"{String}\":403,\"ArrayList.\\u003cinit\\u003e\":312,\"String:\\u0027);\":195,\"ArrayList.add()\":364,\"ResultSet.close()\":417,\"String:\\u0027,\\u0027\":179,\"int:1\":362,\"Statement.executeQuery()\":223},\"rawCode\":\"public String[] getColumnDatatypes(String catalogName,String tableName) throws SQLException\\n\\t{\\n\\t\\tString query\\u003d\\\"SELECT * FROM cas_get_column_external_datatypes(\\u0027\\\"+catalogName+\\\"\\u0027,\\u0027\\\"+tableName+\\\"\\u0027);\\\";\\n\\t\\tstmt.executeQuery(query);\\n\\t\\tResultSet rs \\u003d stmt.getResultSet();\\n\\t\\tArrayList\\u003cString\\u003e als \\u003d new ArrayList\\u003cString\\u003e();\\n\\t\\twhile(rs.next())\\n\\t\\t{\\n\\t\\t\\tals.add(rs.getString(1));\\n\\t\\t}\\n\\t\\tString[] result \\u003d new String[1];\\n\\t\\trs.close();\\n\\t\\treturn als.toArray(result);\\n\\t}\"}","306":"{\"expressionStart\":{\"Statement.getResultSet()\":223,\"ResultSet.getString()\":329,\"String\":105,\"ArrayList.toArray()\":409,\"\\u003creturn\\u003e\":402,\"ResultSet.next()\":303,\"{String}\":371,\"ArrayList.\\u003cinit\\u003e\":270,\"String:\\u0027);\":171,\"ArrayList.add()\":321,\"ResultSet.close()\":388,\"String:\\u0027,\\u0027\":155,\"int:1\":342,\"Statement.executeQuery()\":180},\"expressionEnd\":{\"Statement.getResultSet()\":242,\"ResultSet.getString()\":344,\"String\":142,\"ArrayList.toArray()\":428,\"\\u003creturn\\u003e\":429,\"ResultSet.next()\":312,\"{String}\":384,\"ArrayList.\\u003cinit\\u003e\":293,\"String:\\u0027);\":176,\"ArrayList.add()\":345,\"ResultSet.close()\":398,\"String:\\u0027,\\u0027\":160,\"int:1\":343,\"Statement.executeQuery()\":204},\"rawCode\":\"public String[] getColumnUCDs(String catalogName,String tableName) throws SQLException\\n\\t{\\n\\t\\tString query\\u003d\\\"SELECT * FROM cas_get_column_ucds(\\u0027\\\"+catalogName+\\\"\\u0027,\\u0027\\\"+tableName+\\\"\\u0027);\\\";\\n\\t\\tstmt.executeQuery(query);\\n\\t\\tResultSet rs \\u003d stmt.getResultSet();\\n\\t\\tArrayList\\u003cString\\u003e als \\u003d new ArrayList\\u003cString\\u003e();\\n\\t\\twhile(rs.next())\\n\\t\\t{\\n\\t\\t\\tals.add(rs.getString(1));\\n\\t\\t}\\n\\t\\tString[] result \\u003d new String[1];\\n\\t\\trs.close();\\n\\t\\treturn als.toArray(result);\\n\\t}\"}","307":"{\"expressionStart\":{\"Statement.getResultSet()\":152,\"ArrayList.add()\":250,\"ResultSet.close()\":317,\"ResultSet.getString()\":258,\"String\":72,\"ArrayList.toArray()\":338,\"int:1\":271,\"\\u003creturn\\u003e\":331,\"ResultSet.next()\":232,\"Statement.executeQuery()\":109,\"{String}\":300,\"ArrayList.\\u003cinit\\u003e\":199},\"expressionEnd\":{\"Statement.getResultSet()\":171,\"ArrayList.add()\":274,\"ResultSet.close()\":327,\"ResultSet.getString()\":273,\"String\":105,\"ArrayList.toArray()\":357,\"int:1\":272,\"\\u003creturn\\u003e\":358,\"ResultSet.next()\":241,\"Statement.executeQuery()\":133,\"{String}\":313,\"ArrayList.\\u003cinit\\u003e\":222},\"rawCode\":\"public String[] getCatalogNames() throws SQLException\\n\\t{\\n\\t\\tString query\\u003d\\\"SELECT cas_get_catalog_names();\\\";\\n\\t\\tstmt.executeQuery(query);\\n\\t\\tResultSet rs \\u003d stmt.getResultSet();\\n\\t\\tArrayList\\u003cString\\u003e als \\u003d new ArrayList\\u003cString\\u003e();\\n\\t\\twhile(rs.next())\\n\\t\\t{\\n\\t\\t\\tals.add(rs.getString(1));\\n\\t\\t}\\n\\t\\tString[] result \\u003d new String[1];\\n\\t\\trs.close();\\n\\t\\treturn als.toArray(result);\\n\\t}\"}","308":"{\"expressionStart\":{\"Statement.getResultSet()\":612,\"Logger.debug()\":289,\"ResultSet.getString()\":712,\"String\":453,\"\\u003creturn\\u003e\":786,\"{String}\":362,\"ResultSet.next()\":642,\"List.add()\":732,\"ArrayList.\\u003cinit\\u003e\":411,\"String[].arrayset()\":696,\"ResultSet.close()\":772,\"String:\\u0027,\\u0027\":506,\"int:2\":373,\"int:1\":689,\"int:0\":673,\"Statement.executeQuery()\":569},\"expressionEnd\":{\"Statement.getResultSet()\":631,\"Logger.debug()\":333,\"ResultSet.getString()\":727,\"String\":497,\"\\u003creturn\\u003e\":808,\"{String}\":375,\"ResultSet.next()\":651,\"List.add()\":764,\"ArrayList.\\u003cinit\\u003e\":436,\"String[].arrayset()\":711,\"ResultSet.close()\":782,\"String:\\u0027,\\u0027\":511,\"int:2\":374,\"int:1\":690,\"int:0\":674,\"Statement.executeQuery()\":593},\"rawCode\":\"/**\\n\\t * This function just do the bulk get of properties for the table\\n\\t * in the catalogue\\n\\t * @param catalog -- the name of the catalogue\\n\\t * @throws SQLException\\n\\t */\\n\\tpublic List\\u003cString[]\\u003e getAttributeProperties(String catalog, String table, String attribute) throws SQLException\\n\\t{\\n\\t\\tlogger.debug(\\\"Getting column properties...\\\");\\n\\n\\t\\tString []propertyPair \\u003d new String[2];\\n\\t\\tList\\u003cString[]\\u003e propertiesList \\u003d new ArrayList\\u003cString[]\\u003e();\\n\\t\\tString query\\u003d\\\"SELECT * FROM cas_get_column_properties (\\u0027\\\"+catalog+\\\"\\u0027,\\u0027\\\"+table+\\\"\\u0027,\\u0027\\\"+attribute+\\\"\\u0027) as (a varchar, b varchar);\\\";\\n\\t\\tstmt.executeQuery(query);\\n\\t\\tResultSet rs \\u003d stmt.getResultSet();\\n\\n\\t\\twhile(rs.next())\\n\\t\\t{\\n\\t\\t\\tpropertyPair[0]\\u003drs.getString(1);\\n\\t\\t\\tpropertyPair[1]\\u003drs.getString(2);\\n\\t\\t\\tpropertiesList.add(propertyPair);\\n\\t\\t}\\n\\t\\trs.close();\\n\\t\\treturn propertiesList;\\n\\t}\"}","309":"{\"expressionStart\":{\"Statement.getResultSet()\":232,\"ResultSet.getString()\":338,\"String\":113,\"\\u003creturn\\u003e\":411,\"ArrayList.toArray()\":418,\"ResultSet.next()\":312,\"{String}\":380,\"ArrayList.\\u003cinit\\u003e\":279,\"String:\\u0027);\":180,\"ArrayList.add()\":330,\"ResultSet.close()\":397,\"String:\\u0027,\\u0027\":164,\"int:1\":351,\"Statement.executeQuery()\":189},\"expressionEnd\":{\"Statement.getResultSet()\":251,\"ResultSet.getString()\":353,\"String\":151,\"\\u003creturn\\u003e\":438,\"ArrayList.toArray()\":437,\"ResultSet.next()\":321,\"{String}\":393,\"ArrayList.\\u003cinit\\u003e\":302,\"String:\\u0027);\":185,\"ArrayList.add()\":354,\"ResultSet.close()\":407,\"String:\\u0027,\\u0027\":169,\"int:1\":352,\"Statement.executeQuery()\":213},\"rawCode\":\"public String[] getColumnDescriptions(String catalogName,String tableName) throws SQLException\\n\\t{\\n\\t\\tString query\\u003d\\\"SELECT cas_get_column_descriptions(\\u0027\\\"+catalogName+\\\"\\u0027,\\u0027\\\"+tableName+\\\"\\u0027);\\\";\\n\\t\\tstmt.executeQuery(query);\\n\\t\\tResultSet rs \\u003d stmt.getResultSet();\\n\\t\\tArrayList\\u003cString\\u003e als \\u003d new ArrayList\\u003cString\\u003e();\\n\\t\\twhile(rs.next())\\n\\t\\t{\\n\\t\\t\\tals.add(rs.getString(1));\\n\\t\\t}\\n\\t\\tString[] result \\u003d new String[1];\\n\\t\\trs.close();\\n\\t\\treturn als.toArray(result);\\n\\t}\"}","310":"{\"expressionStart\":{\"String:\\u0027)\":230,\"Logger.debug()\":238,\"ResultSet.getString()\":609,\"String\":251,\"\\u003creturn\\u003e\":642,\"ResultSet.next()\":559,\"{String}\":542,\"String[].arrayset()\":600,\"ResultSet.close()\":628,\"String:\\u0027,\\u0027\":214,\"int:2\":553,\"int:1\":594,\"int:0\":576,\"Statement.executeQuery()\":498},\"expressionEnd\":{\"String:\\u0027)\":234,\"Logger.debug()\":275,\"ResultSet.getString()\":624,\"String\":268,\"\\u003creturn\\u003e\":653,\"ResultSet.next()\":568,\"{String}\":555,\"String[].arrayset()\":606,\"ResultSet.close()\":638,\"String:\\u0027,\\u0027\":219,\"int:2\":554,\"int:1\":595,\"int:0\":577,\"Statement.executeQuery()\":522},\"rawCode\":\"public String[] getRaDecColumns(String catalogName, String tableName) throws SQLException\\n\\t{\\n//\\t\\tString query\\u003d\\\"?\\u003dCALL cas_get_table_ra_dec(?,?)\\\";\\n\\t\\tString query \\u003d \\\"SELECT * from cas_get_table_ra_dec(\\u0027\\\"+catalogName+\\\"\\u0027,\\u0027\\\"+tableName+\\\"\\u0027)\\\";\\n\\t\\tlogger.debug(\\\"Running query: \\\"+query);\\n/*\\t\\tStatement stmt \\u003d conn.prepareCall(query);\\n\\t\\tstmt.setString(2,catalogName);\\n\\t\\tstmt.setString(3,tableName);\\n\\t\\tstmt.registerOutParameter(1,Types.VARCHAR);\\n\\t\\tstmt.registerOutParameter(4,Types.VARCHAR);*/\\n\\t\\tResultSet rs \\u003d stmt.executeQuery(query);\\n\\t\\tString [] res \\u003d new String[2];\\n\\t\\trs.next();\\n\\t\\tres[0] \\u003d rs.getString(1);\\n\\t\\tres[1] \\u003d rs.getString(2);\\n\\t\\trs.close();\\n\\t\\treturn res;\\n\\t}\"}","311":"{\"expressionStart\":{\"PreparedStatement.setString()\":226,\"QueryResults.getBaseTableName()\":244,\"String:\":449,\"ResultSet.getString()\":389,\"String\":137,\"\\u003creturn\\u003e\":503,\"ResultSet.next()\":356,\"String[].arrayset()\":371,\"int:3\":285,\"QueryResults.getBaseCatalogName()\":198,\"Connection.prepareStatement()\":115,\"String[].arrayget()\":510,\"PreparedStatement.executeQuery()\":330,\"ResultSet.close()\":465,\"int:2\":241,\"int:1\":71,\"\\u003cnullcheck\\u003e\":414,\"QueryResults.getBaseColumnName()\":288,\"PreparedStatement.close()\":481},\"expressionEnd\":{\"PreparedStatement.setString()\":264,\"QueryResults.getBaseTableName()\":263,\"String:\":451,\"ResultSet.getString()\":404,\"String\":173,\"\\u003creturn\\u003e\":524,\"ResultSet.next()\":365,\"String[].arrayset()\":386,\"int:3\":286,\"QueryResults.getBaseCatalogName()\":219,\"Connection.prepareStatement()\":174,\"String[].arrayget()\":523,\"PreparedStatement.executeQuery()\":349,\"ResultSet.close()\":475,\"int:2\":242,\"int:1\":72,\"\\u003cnullcheck\\u003e\":433,\"QueryResults.getBaseColumnName()\":308,\"PreparedStatement.close()\":493},\"rawCode\":\"public String getUcd(int n)  throws SQLException\\n\\t\\t{\\n\\t\\t\\tif (ucdArray[n-1]\\u003d\\u003dnull)\\n\\t\\t\\t{\\n\\t\\t\\t\\tPreparedStatement stmt \\u003d conn.prepareStatement(\\\"select cas_get_column_ucd(?, ?, ?)\\\");\\n\\t\\t\\t\\tstmt.setString(1, getBaseCatalogName(n));\\n\\t\\t\\t\\tstmt.setString(2, getBaseTableName(n));\\n\\t\\t\\t\\tstmt.setString(3, getBaseColumnName(n));\\n\\t\\t\\t\\tResultSet rs \\u003d stmt.executeQuery(); \\n\\t\\t\\t\\trs.next();\\n\\t\\t\\t\\tucdArray[n - 1] \\u003d rs.getString(1);\\n\\t\\t\\t\\tif (ucdArray[n-1]\\u003d\\u003dnull) ucdArray[n-1]\\u003d\\\"\\\";        \\n\\t\\t\\t\\trs.close();\\n\\t\\t\\t\\tstmt.close();\\n\\t\\t\\t}\\n\\t\\t\\treturn ucdArray[n-1];\\n\\t\\t}\"}","312":"{\"expressionStart\":{\"PreparedStatement.setString()\":183,\"QueryResults.getBaseTableName()\":247,\"String:\":475,\"ResultSet.getString()\":393,\"String\":139,\"\\u003creturn\\u003e\":527,\"ResultSet.next()\":359,\"String[].arrayset()\":374,\"int:3\":288,\"QueryResults.getBaseCatalogName()\":201,\"Connection.prepareStatement()\":117,\"String[].arrayget()\":61,\"PreparedStatement.executeQuery()\":333,\"ResultSet.close()\":489,\"int:2\":244,\"int:1\":73,\"\\u003cnullcheck\\u003e\":418,\"QueryResults.getBaseColumnName()\":291,\"PreparedStatement.close()\":505},\"expressionEnd\":{\"PreparedStatement.setString()\":223,\"QueryResults.getBaseTableName()\":266,\"String:\":477,\"ResultSet.getString()\":408,\"String\":176,\"\\u003creturn\\u003e\":549,\"ResultSet.next()\":368,\"String[].arrayset()\":390,\"int:3\":289,\"QueryResults.getBaseCatalogName()\":222,\"Connection.prepareStatement()\":177,\"String[].arrayget()\":75,\"PreparedStatement.executeQuery()\":352,\"ResultSet.close()\":499,\"int:2\":245,\"int:1\":74,\"\\u003cnullcheck\\u003e\":442,\"QueryResults.getBaseColumnName()\":311,\"PreparedStatement.close()\":517},\"rawCode\":\"public String getUnit(int n)  throws SQLException\\n\\t\\t{\\n\\t\\t\\tif (unitArray[n-1]\\u003d\\u003dnull)\\n\\t\\t\\t{\\n\\t\\t\\t\\tPreparedStatement stmt \\u003d conn.prepareStatement(\\\"select cas_get_column_unit(?, ?, ?)\\\");\\n\\t\\t\\t\\tstmt.setString(1, getBaseCatalogName(n));\\n\\t\\t\\t\\tstmt.setString(2, getBaseTableName(n));\\n\\t\\t\\t\\tstmt.setString(3, getBaseColumnName(n));\\n\\t\\t\\t\\tResultSet rs \\u003d stmt.executeQuery(); \\n\\t\\t\\t\\trs.next();\\n\\t\\t\\t\\tunitArray[n - 1] \\u003d rs.getString(1);\\n\\t\\t\\t\\tif (unitArray[n - 1] \\u003d\\u003d null) \\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tunitArray[n - 1] \\u003d \\\"\\\";\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\trs.close();\\n\\t\\t\\t\\tstmt.close();\\n\\t\\t\\t}\\n\\t\\t\\treturn unitArray[n-1];\\n\\t\\t}\"}","313":"{\"expressionStart\":{\"Statement.getResultSet()\":545,\"String:\\u0027)\":494,\"Logger.debug()\":267,\"ResultSet.getString()\":609,\"String\":430,\"\\u003creturn\\u003e\":719,\"{String}\":339,\"ResultSet.next()\":575,\"List.add()\":665,\"ArrayList.\\u003cinit\\u003e\":388,\"String[].arrayset()\":629,\"ResultSet.close()\":705,\"String:\\u0027,\\u0027\":482,\"int:2\":350,\"int:1\":622,\"int:0\":606,\"Statement.executeQuery()\":502},\"expressionEnd\":{\"Statement.getResultSet()\":564,\"String:\\u0027)\":498,\"Logger.debug()\":310,\"ResultSet.getString()\":624,\"String\":473,\"\\u003creturn\\u003e\":741,\"{String}\":352,\"ResultSet.next()\":584,\"List.add()\":697,\"ArrayList.\\u003cinit\\u003e\":413,\"String[].arrayset()\":644,\"ResultSet.close()\":715,\"String:\\u0027,\\u0027\":487,\"int:2\":351,\"int:1\":623,\"int:0\":607,\"Statement.executeQuery()\":526},\"rawCode\":\"/**\\n\\t * This function just do the bulk get of properties for the table\\n\\t * in the catalogue\\n\\t * @param catalog -- the name of the catalogue\\n\\t * @throws SQLException\\n\\t */\\n\\tpublic List\\u003cString[]\\u003e getTableProperties(String catalog, String table) throws SQLException\\n\\t{\\n\\t\\tlogger.debug(\\\"Getting table properties...\\\");\\n\\n\\t\\tString []propertyPair \\u003d new String[2];\\n\\t\\tList\\u003cString[]\\u003e propertiesList \\u003d new ArrayList\\u003cString[]\\u003e();\\n\\t\\tString query\\u003d\\\"SELECT * FROM cas_get_table_properties (\\u0027\\\"+catalog+\\\"\\u0027,\\u0027\\\"+table+\\\"\\u0027)\\\";\\n\\t\\tstmt.executeQuery(query);\\n\\t\\tResultSet rs \\u003d stmt.getResultSet();\\n\\n\\t\\twhile(rs.next())\\n\\t\\t{\\n\\t\\t\\tpropertyPair[0]\\u003drs.getString(1);\\n\\t\\t\\tpropertyPair[1]\\u003drs.getString(2);\\n\\t\\t\\tpropertiesList.add(propertyPair);\\n\\t\\t}\\n\\t\\trs.close();\\n\\t\\treturn propertiesList;\\n\\t}\"}","314":"{\"expressionStart\":{\"PreparedStatement.setString()\":244,\"QueryResults.getBaseTableName()\":219,\"String:\":431,\"ResultSet.getString()\":364,\"String\":111,\"\\u003creturn\\u003e\":476,\"ResultSet.next()\":330,\"int:3\":260,\"QueryResults.getBaseCatalogName()\":173,\"Connection.prepareStatement()\":89,\"PreparedStatement.executeQuery()\":304,\"ResultSet.close()\":443,\"int:2\":216,\"\\u003d\":418,\"int:1\":170,\"PreparedStatement.close()\":458,\"\\u003cnullcheck\\u003e\":388,\"QueryResults.getBaseColumnName()\":263},\"expressionEnd\":{\"PreparedStatement.setString()\":284,\"QueryResults.getBaseTableName()\":238,\"String:\":433,\"ResultSet.getString()\":379,\"String\":148,\"\\u003creturn\\u003e\":494,\"ResultSet.next()\":339,\"int:3\":261,\"QueryResults.getBaseCatalogName()\":194,\"Connection.prepareStatement()\":149,\"PreparedStatement.executeQuery()\":324,\"ResultSet.close()\":453,\"int:2\":217,\"\\u003d\":433,\"int:1\":171,\"PreparedStatement.close()\":471,\"\\u003cnullcheck\\u003e\":406,\"QueryResults.getBaseColumnName()\":283},\"rawCode\":\"public String getColumnInfo(int n)  throws SQLException\\n\\t\\t{\\n\\t\\t\\tPreparedStatement pstmt \\u003d conn.prepareStatement(\\\"select cas_get_column_info(?, ?, ?)\\\");\\n\\t\\t\\tpstmt.setString(1, getBaseCatalogName(n));\\n\\t\\t\\tpstmt.setString(2, getBaseTableName(n));\\n\\t\\t\\tpstmt.setString(3, getBaseColumnName(n));\\n\\t\\t\\tResultSet rs \\u003d pstmt.executeQuery(); \\n\\t\\t\\trs.next();\\n\\t\\t\\tString columnInfo \\u003d rs.getString(1);\\n\\t\\t\\tif (columnInfo \\u003d\\u003d null) \\n\\t\\t\\t{\\n\\t\\t\\t\\tcolumnInfo \\u003d \\\"\\\";\\n\\t\\t\\t}\\n\\t\\t\\trs.close();\\n\\t\\t\\tpstmt.close();\\n\\t\\t\\treturn columnInfo;\\n\\t\\t}\"}","315":"{\"expressionStart\":{\"Statement.getResultSet()\":178,\"String:\\u0027)\":154,\"ResultSet.close()\":249,\"ResultSet.getString()\":230,\"String\":85,\"\\u003creturn\\u003e\":263,\"int:1\":243,\"Statement.executeQuery()\":67,\"ResultSet.next()\":201},\"expressionEnd\":{\"Statement.getResultSet()\":197,\"String:\\u0027)\":158,\"ResultSet.close()\":259,\"ResultSet.getString()\":245,\"String\":142,\"\\u003creturn\\u003e\":277,\"int:1\":244,\"Statement.executeQuery()\":159,\"ResultSet.next()\":210},\"rawCode\":\"public String getUserMetaDataSchemaName() throws SQLException\\n\\t{\\n\\t\\tstmt.executeQuery(\\\"SELECT cas_metadata.cas_get_user_metadata_schema_name(\\u0027\\\"+userLogged+\\\"\\u0027)\\\");\\n\\t\\tResultSet rs \\u003d stmt.getResultSet();\\n\\t\\trs.next();\\n\\t\\tString result \\u003d rs.getString(1);\\n\\t\\trs.close();\\n\\t\\treturn result;\\n\\t}\"}","316":"{\"expressionStart\":{\"Statement.getResultSet()\":170,\"String:\\u0027)\":146,\"ResultSet.close()\":241,\"ResultSet.getString()\":222,\"String\":81,\"int:1\":235,\"\\u003creturn\\u003e\":255,\"Statement.executeQuery()\":63,\"ResultSet.next()\":193},\"expressionEnd\":{\"Statement.getResultSet()\":189,\"String:\\u0027)\":150,\"ResultSet.close()\":251,\"ResultSet.getString()\":237,\"String\":134,\"int:1\":236,\"\\u003creturn\\u003e\":269,\"Statement.executeQuery()\":151,\"ResultSet.next()\":202},\"rawCode\":\"public String getUserDataSchemaName() throws SQLException\\n\\t{\\n\\t\\tstmt.executeQuery(\\\"SELECT cas_metadata.cas_get_user_data_schema_name(\\u0027\\\"+userLogged+\\\"\\u0027)\\\");\\n\\t\\tResultSet rs \\u003d stmt.getResultSet();\\n\\t\\trs.next();\\n\\t\\tString result \\u003d rs.getString(1);\\n\\t\\trs.close();\\n\\t\\treturn result;\\n\\t}\"}","317":"{\"expressionStart\":{\"Statement.getResultSet()\":277,\"Logger.debug()\":193,\"ResultSet.getString()\":445,\"String\":206,\"ArrayList.toArray()\":549,\"\\u003creturn\\u003e\":542,\"{String}\":508,\"ResultSet.next()\":393,\"ArrayList.\\u003cinit\\u003e\":326,\"String:\\u0027);\":184,\"String[].arrayset()\":438,\"ArrayList.add()\":468,\"ResultSet.close()\":528,\"String:\\u0027,\\u0027\":164,\"int:2\":381,\"int:1\":431,\"int:0\":415,\"Statement.executeQuery()\":234},\"expressionEnd\":{\"Statement.getResultSet()\":296,\"Logger.debug()\":230,\"ResultSet.getString()\":460,\"String\":223,\"ArrayList.toArray()\":568,\"\\u003creturn\\u003e\":569,\"{String}\":524,\"ResultSet.next()\":402,\"ArrayList.\\u003cinit\\u003e\":351,\"String:\\u0027);\":189,\"String[].arrayset()\":444,\"ArrayList.add()\":480,\"ResultSet.close()\":538,\"String:\\u0027,\\u0027\":169,\"int:2\":382,\"int:1\":432,\"int:0\":416,\"Statement.executeQuery()\":258},\"rawCode\":\"public String[][] getIndexes(String catalogName, String tableName) throws SQLException\\n\\t{\\n\\t\\tString query\\u003d\\\"SELECT * FROM cas_get_table_indexes(\\u0027\\\" + catalogName +\\n\\t\\t\\t\\\"\\u0027,\\u0027\\\" + tableName + \\\"\\u0027);\\\";\\n\\t\\tlogger.debug(\\\"Running query: \\\"+query);\\n\\t\\tstmt.executeQuery(query);\\n\\t\\tResultSet rs \\u003d stmt.getResultSet();\\n\\t\\tArrayList\\u003cString[]\\u003e als \\u003d new ArrayList\\u003cString[]\\u003e();\\n\\t\\tString[] row \\u003d new String[2];\\n\\t\\twhile(rs.next())\\n\\t\\t{\\n\\t\\t\\trow[0]\\u003drs.getString(1);\\n\\t\\t\\trow[1]\\u003drs.getString(2);\\t\\t\\t\\n\\t\\t\\tals.add(row);\\n\\t\\t}\\n\\t\\tString[][] result \\u003d new String[1][1];\\n\\t\\trs.close();\\n\\t\\treturn als.toArray(result);\\n\\t}\"}","318":"{\"expressionStart\":{\"Statement.getResultSet()\":225,\"ResultSet.getString()\":331,\"String\":106,\"ArrayList.toArray()\":411,\"\\u003creturn\\u003e\":404,\"ResultSet.next()\":305,\"{String}\":373,\"ArrayList.\\u003cinit\\u003e\":272,\"String:\\u0027);\":173,\"ArrayList.add()\":323,\"ResultSet.close()\":390,\"String:\\u0027,\\u0027\":157,\"int:1\":344,\"Statement.executeQuery()\":182},\"expressionEnd\":{\"Statement.getResultSet()\":244,\"ResultSet.getString()\":346,\"String\":144,\"ArrayList.toArray()\":430,\"\\u003creturn\\u003e\":431,\"ResultSet.next()\":314,\"{String}\":386,\"ArrayList.\\u003cinit\\u003e\":295,\"String:\\u0027);\":178,\"ArrayList.add()\":347,\"ResultSet.close()\":400,\"String:\\u0027,\\u0027\":162,\"int:1\":345,\"Statement.executeQuery()\":206},\"rawCode\":\"public String[] getColumnUnits(String catalogName,String tableName) throws SQLException\\n\\t{\\n\\t\\tString query\\u003d\\\"SELECT * FROM cas_get_column_units(\\u0027\\\"+catalogName+\\\"\\u0027,\\u0027\\\"+tableName+\\\"\\u0027);\\\";\\n\\t\\tstmt.executeQuery(query);\\n\\t\\tResultSet rs \\u003d stmt.getResultSet();\\n\\t\\tArrayList\\u003cString\\u003e als \\u003d new ArrayList\\u003cString\\u003e();\\n\\t\\twhile(rs.next())\\n\\t\\t{\\n\\t\\t\\tals.add(rs.getString(1));\\n\\t\\t}\\n\\t\\tString[] result \\u003d new String[1];\\n\\t\\trs.close();\\n\\t\\treturn als.toArray(result);\\n\\t}\"}","319":"{\"expressionStart\":{\"Statement.getResultSet()\":534,\"Logger.debug()\":238,\"ResultSet.getString()\":598,\"String\":403,\"\\u003creturn\\u003e\":708,\"ResultSet.next()\":564,\"{String}\":312,\"List.add()\":654,\"ArrayList.\\u003cinit\\u003e\":361,\"String[].arrayset()\":618,\"ResultSet.close()\":694,\"int:2\":323,\"int:1\":611,\"Statement.executeQuery()\":491,\"int:0\":595},\"expressionEnd\":{\"Statement.getResultSet()\":553,\"Logger.debug()\":283,\"ResultSet.getString()\":613,\"String\":448,\"\\u003creturn\\u003e\":730,\"ResultSet.next()\":573,\"{String}\":325,\"List.add()\":686,\"ArrayList.\\u003cinit\\u003e\":386,\"String[].arrayset()\":633,\"ResultSet.close()\":704,\"int:2\":324,\"int:1\":612,\"Statement.executeQuery()\":515,\"int:0\":596},\"rawCode\":\"/**\\n\\t * This function just do the bulk get of properties for the catalogue\\n\\t * @param catalog -- the name of the catalogue\\n\\t * @throws SQLException\\n\\t */\\n\\tpublic List\\u003cString[]\\u003e getCatalogProperties(String catalog) throws SQLException\\n\\t{\\n\\t\\tlogger.debug(\\\"Getting catalog properties...\\\");\\n\\n\\t\\tString []propertyPair \\u003d new String[2];\\n\\t\\tList\\u003cString[]\\u003e propertiesList \\u003d new ArrayList\\u003cString[]\\u003e();\\n\\t\\tString query\\u003d\\\"SELECT * FROM cas_get_catalog_properties (\\u0027\\\"+catalog+\\\"\\u0027) as (a varchar,b varchar);\\\";\\n\\t\\tstmt.executeQuery(query);\\n\\t\\tResultSet rs \\u003d stmt.getResultSet();\\n\\n\\t\\twhile(rs.next())\\n\\t\\t{\\n\\t\\t\\tpropertyPair[0]\\u003drs.getString(1);\\n\\t\\t\\tpropertyPair[1]\\u003drs.getString(2);\\n\\t\\t\\tpropertiesList.add(propertyPair);\\n\\t\\t}\\n\\t\\trs.close();\\n\\t\\treturn propertiesList;\\n\\t}\"}","320":"{\"expressionStart\":{\"String:C\":685,\"ResultSet.getString()\":672,\"\\u003cr\\u003e\":496,\"String\":537,\"int:500\":256,\"Connection.createStatement()\":204,\"\\u003creturn\\u003e\":93,\"ResultSet.next()\":647,\"String:lob\":128,\"Statement.execute()\":280,\"Connection.close()\":709,\"TestLob.deleteDb()\":119,\"null:null\":172,\"\\u003ca\\u003e\":261,\"TestLob.reconnect()\":162,\"int:0\":249,\"Statement.executeQuery()\":591},\"expressionEnd\":{\"String:C\":688,\"ResultSet.getString()\":689,\"\\u003cr\\u003e\":503,\"String\":551,\"int:500\":259,\"Connection.createStatement()\":226,\"\\u003creturn\\u003e\":100,\"ResultSet.next()\":656,\"String:lob\":133,\"Statement.execute()\":335,\"Connection.close()\":721,\"TestLob.deleteDb()\":134,\"null:null\":176,\"\\u003ca\\u003e\":264,\"TestLob.reconnect()\":177,\"int:0\":250,\"Statement.executeQuery()\":630},\"rawCode\":\"private void testLobDrop() throws SQLException {\\n        if (config.networked) {\\n            return;\\n        }\\n        deleteDb(\\\"lob\\\");\\n        Connection conn \\u003d reconnect(null);\\n        Statement stat \\u003d conn.createStatement();\\n        for (int i \\u003d 0; i \\u003c 500; i++) {\\n            stat.execute(\\\"CREATE TABLE T\\\" + i + \\\"(ID INT, C CLOB)\\\");\\n        }\\n        stat.execute(\\\"CREATE TABLE TEST(ID INT, C CLOB)\\\");\\n        stat.execute(\\\"INSERT INTO TEST VALUES(1, SPACE(10000))\\\");\\n        for (int i \\u003d 0; i \\u003c 500; i++) {\\n            stat.execute(\\\"DROP TABLE T\\\" + i);\\n        }\\n        ResultSet rs \\u003d stat.executeQuery(\\\"SELECT * FROM TEST\\\");\\n        while (rs.next()) {\\n            rs.getString(\\\"C\\\");\\n        }\\n        conn.close();\\n    }\"}","321":"{\"expressionStart\":{\"Clob.length()\":1851,\"TestLob.assertEquals()\":1833,\"String\":825,\"Connection.createStatement()\":789,\"UNKNOWN.executeQuery()\":789,\"ResultSet.next()\":868,\"ResultSet.getClob()\":1637,\"TestLob.deleteDb()\":51,\"Connection.close()\":1907,\"TestLob.assertEqualReaders()\":1062,\"PreparedStatement.setCharacterStream()\":651,\"int:2\":700,\"int:1\":328,\"TestLob.reconnect()\":749,\"String:C\":923,\"CharArrayReader.\\u003cinit\\u003e\":1081,\"String.length()\":505,\"ResultSet.getString()\":910,\"ResultSet.getCharacterStream()\":1131,\"UNKNOWN.execute()\":133,\"int\":704,\"TestLob.getRandomReader()\":1681,\"String:lob\":60,\"Clob.getCharacterStream()\":1707,\"Connection.prepareStatement()\":240,\"String.toCharArray()\":1101,\"null:null\":118,\"PreparedStatement.execute()\":718,\"TestLob.assertFalse()\":1875},\"expressionEnd\":{\"Clob.length()\":1864,\"TestLob.assertEquals()\":1865,\"String\":857,\"Connection.createStatement()\":811,\"UNKNOWN.executeQuery()\":858,\"ResultSet.next()\":877,\"ResultSet.getClob()\":1652,\"TestLob.deleteDb()\":66,\"Connection.close()\":1919,\"TestLob.assertEqualReaders()\":1162,\"PreparedStatement.setCharacterStream()\":708,\"int:2\":701,\"int:1\":329,\"TestLob.reconnect()\":764,\"String:C\":926,\"CharArrayReader.\\u003cinit\\u003e\":1129,\"String.length()\":527,\"ResultSet.getString()\":927,\"ResultSet.getCharacterStream()\":1157,\"UNKNOWN.execute()\":205,\"int\":707,\"TestLob.getRandomReader()\":1705,\"String:lob\":65,\"Clob.getCharacterStream()\":1732,\"Connection.prepareStatement()\":294,\"String.toCharArray()\":1128,\"null:null\":122,\"PreparedStatement.execute()\":732,\"TestLob.assertFalse()\":1897},\"rawCode\":\"private void testClob() throws Exception {\\n        deleteDb(\\\"lob\\\");\\n        Connection conn;\\n        conn \\u003d reconnect(null);\\n        conn.createStatement().execute(\\\"CREATE TABLE TEST(ID IDENTITY, C CLOB)\\\");\\n        PreparedStatement prep \\u003d conn.prepareStatement(\\\"INSERT INTO TEST(C) VALUES(?)\\\");\\n        prep.setCharacterStream(1, new CharArrayReader(\\\"Bohlen\\\".toCharArray()), \\\"Bohlen\\\".length());\\n        prep.execute();\\n        prep.setCharacterStream(1, new CharArrayReader(\\\"B\\\\u00f6hlen\\\".toCharArray()), \\\"B\\\\u00f6hlen\\\".length());\\n        prep.execute();\\n        prep.setCharacterStream(1, getRandomReader(501, 1), -1);\\n        prep.execute();\\n        prep.setCharacterStream(1, getRandomReader(1501, 2), 401);\\n        prep.execute();\\n        conn \\u003d reconnect(conn);\\n        ResultSet rs \\u003d conn.createStatement().executeQuery(\\\"SELECT * FROM TEST ORDER BY ID\\\");\\n        rs.next();\\n        assertEquals(\\\"Bohlen\\\", rs.getString(\\\"C\\\"));\\n        assertEqualReaders(new CharArrayReader(\\\"Bohlen\\\".toCharArray()), rs.getCharacterStream(\\\"C\\\"), -1);\\n        rs.next();\\n        assertEqualReaders(new CharArrayReader(\\\"B\\\\u00f6hlen\\\".toCharArray()), rs.getCharacterStream(\\\"C\\\"), -1);\\n        rs.next();\\n        assertEqualReaders(getRandomReader(501, 1), rs.getCharacterStream(\\\"C\\\"), -1);\\n        Clob clob \\u003d rs.getClob(\\\"C\\\");\\n        assertEqualReaders(getRandomReader(501, 1), clob.getCharacterStream(), -1);\\n        assertEquals(501, clob.length());\\n        rs.next();\\n        assertEqualReaders(getRandomReader(401, 2), rs.getCharacterStream(\\\"C\\\"), -1);\\n        assertEqualReaders(getRandomReader(1500, 2), rs.getCharacterStream(\\\"C\\\"), 401);\\n        clob \\u003d rs.getClob(\\\"C\\\");\\n        assertEqualReaders(getRandomReader(1501, 2), clob.getCharacterStream(), 401);\\n        assertEqualReaders(getRandomReader(401, 2), clob.getCharacterStream(), 401);\\n        assertEquals(401, clob.length());\\n        assertFalse(rs.next());\\n        conn.close();\\n    }\"}","322":"{\"expressionStart\":{\"IOUtils.readStringAndClose()\":1426,\"TestLob.assertEquals()\":1257,\"\\u003cr\\u003e\":749,\"PreparedStatement.setInt()\":952,\"int:1000\":753,\"String\":1629,\"StringBuilder.append()\":778,\"Connection.createStatement()\":1116,\"UNKNOWN.executeQuery()\":1116,\"StringUtils.xmlNode()\":790,\"ResultSet.next()\":1194,\"int:5\":662,\"Connection.close()\":1682,\"TestLob.deleteDb()\":77,\"int:2\":998,\"TestLob.reconnect()\":134,\"int:1\":964,\"int:0\":746,\"File.\\u003cinit\\u003e\":1785,\"ResultSet.getInt()\":1276,\"PreparedStatement.setString()\":983,\"StringBuilder.toString()\":883,\"TestLob.trace()\":1623,\"File.length()\":1785,\"System.currentTimeMillis()\":535,\"ResultSet.getString()\":1290,\"ResultSet.getCharacterStream()\":1364,\"UNKNOWN.execute()\":272,\"StringBuilder.\\u003cinit\\u003e\":704,\"int\":593,\"TestLob.getSize()\":581,\"String:lob\":86,\"Connection.prepareStatement()\":459,\"TestLob.getBaseDir()\":1794,\"null:null\":144,\"PreparedStatement.execute()\":1023,\"\\u003ca\\u003e\":1082,\"int:10\":589,\"\\u003d\":656},\"expressionEnd\":{\"IOUtils.readStringAndClose()\":1459,\"TestLob.assertEquals()\":1306,\"\\u003cr\\u003e\":757,\"PreparedStatement.setInt()\":969,\"int:1000\":757,\"String\":1637,\"StringBuilder.append()\":850,\"Connection.createStatement()\":1138,\"UNKNOWN.executeQuery()\":1173,\"StringUtils.xmlNode()\":849,\"ResultSet.next()\":1203,\"int:5\":663,\"Connection.close()\":1694,\"TestLob.deleteDb()\":92,\"int:2\":999,\"TestLob.reconnect()\":149,\"int:1\":965,\"int:0\":747,\"File.\\u003cinit\\u003e\":1822,\"ResultSet.getInt()\":1288,\"PreparedStatement.setString()\":1009,\"StringBuilder.toString()\":898,\"TestLob.trace()\":1672,\"File.length()\":1831,\"System.currentTimeMillis()\":561,\"ResultSet.getString()\":1305,\"ResultSet.getCharacterStream()\":1388,\"UNKNOWN.execute()\":325,\"StringBuilder.\\u003cinit\\u003e\":723,\"int\":595,\"TestLob.getSize()\":596,\"String:lob\":91,\"Connection.prepareStatement()\":513,\"TestLob.getBaseDir()\":1806,\"null:null\":148,\"PreparedStatement.execute()\":1037,\"\\u003ca\\u003e\":1085,\"int:10\":591,\"\\u003d\":663},\"rawCode\":\"private void testLobCompression(boolean compress) throws Exception {\\n        deleteDb(\\\"lob\\\");\\n        Connection conn;\\n        conn \\u003d reconnect(null);\\n        if (compress) {\\n            conn.createStatement().execute(\\\"SET COMPRESS_LOB LZF\\\");\\n        } else {\\n            conn.createStatement().execute(\\\"SET COMPRESS_LOB NO\\\");\\n        }\\n        conn.createStatement().execute(\\\"CREATE TABLE TEST(ID INT PRIMARY KEY, C CLOB)\\\");\\n        PreparedStatement prep \\u003d conn.prepareStatement(\\\"INSERT INTO TEST VALUES(?, ?)\\\");\\n        long time \\u003d System.currentTimeMillis();\\n        int len \\u003d getSize(10, 40);\\n        if (config.networked \\u0026\\u0026 config.big) {\\n            len \\u003d 5;\\n        }\\n        StringBuilder buff \\u003d new StringBuilder();\\n        for (int i \\u003d 0; i \\u003c 1000; i++) {\\n            buff.append(StringUtils.xmlNode(\\\"content\\\", null, \\\"This is a test \\\" + i));\\n        }\\n        String xml \\u003d buff.toString();\\n        for (int i \\u003d 0; i \\u003c len; i++) {\\n            prep.setInt(1, i);\\n            prep.setString(2, xml + i);\\n            prep.execute();\\n        }\\n        for (int i \\u003d 0; i \\u003c len; i++) {\\n            ResultSet rs \\u003d conn.createStatement().executeQuery(\\\"SELECT * FROM TEST\\\");\\n            while (rs.next()) {\\n                if (i \\u003d\\u003d 0) {\\n                    assertEquals(xml + rs.getInt(1), rs.getString(2));\\n                } else {\\n                    Reader r \\u003d rs.getCharacterStream(2);\\n                    String result \\u003d IOUtils.readStringAndClose(r, -1);\\n                    assertEquals(xml + rs.getInt(1), result);\\n                }\\n            }\\n        }\\n        time \\u003d System.currentTimeMillis() - time;\\n        trace(\\\"time: \\\" + time + \\\" compress: \\\" + compress);\\n        conn.close();\\n        if (!config.memory \\u0026\\u0026 SysProperties.LOB_IN_DATABASE) {\\n            long length \\u003d new File(getBaseDir() + \\\"/lob.h2.db\\\").length();\\n            trace(\\\"len: \\\" + length + \\\" compress: \\\" + compress);\\n        }\\n    }\"}","323":"{\"expressionStart\":{\"String:\\u0027)\":1002,\"StringBuilder.toString()\":925,\"TestLob.assertEquals()\":573,\"ResultSet.getString()\":1174,\"\\u003cr\\u003e\":844,\"StringBuilder.\\u003cinit\\u003e\":799,\"int:1000\":848,\"char:\\u0027 \\u0027\":885,\"String:drop table test\":1213,\"String\":1543,\"Connection.createStatement()\":172,\"StringBuilder.append()\":873,\"ResultSet.next()\":649,\"String:lob\":82,\"Statement.execute()\":1200,\"Connection.close()\":1561,\"TestLob.deleteDb()\":73,\"null:null\":140,\"\\u003ca\\u003e\":854,\"TestLob.assertFalse()\":637,\"TestLob.reconnect()\":361,\"int:1\":624,\"Statement.executeQuery()\":1246,\"int:0\":841},\"expressionEnd\":{\"String:\\u0027)\":1006,\"StringBuilder.toString()\":940,\"TestLob.assertEquals()\":627,\"ResultSet.getString()\":1189,\"\\u003cr\\u003e\":852,\"StringBuilder.\\u003cinit\\u003e\":818,\"int:1000\":852,\"char:\\u0027 \\u0027\":888,\"String:drop table test\":1230,\"String\":1549,\"Connection.createStatement()\":194,\"StringBuilder.append()\":889,\"ResultSet.next()\":658,\"String:lob\":87,\"Statement.execute()\":1231,\"Connection.close()\":1573,\"TestLob.deleteDb()\":88,\"null:null\":144,\"\\u003ca\\u003e\":857,\"TestLob.assertFalse()\":659,\"TestLob.reconnect()\":376,\"int:1\":625,\"Statement.executeQuery()\":1286,\"int:0\":842},\"rawCode\":\"private void testLobCopy(boolean compress) throws SQLException {\\n        deleteDb(\\\"lob\\\");\\n        Connection conn;\\n        conn \\u003d reconnect(null);\\n        Statement stat \\u003d conn.createStatement();\\n        if (compress) {\\n            stat.execute(\\\"SET COMPRESS_LOB LZF\\\");\\n        } else {\\n            stat.execute(\\\"SET COMPRESS_LOB NO\\\");\\n        }\\n        conn \\u003d reconnect(conn);\\n        stat \\u003d conn.createStatement();\\n        ResultSet rs;\\n        rs \\u003d stat.executeQuery(\\\"select value from information_schema.settings where NAME\\u003d\\u0027COMPRESS_LOB\\u0027\\\");\\n        rs.next();\\n        assertEquals(compress ? \\\"LZF\\\" : \\\"NO\\\", rs.getString(1));\\n        assertFalse(rs.next());\\n        stat.execute(\\\"create table test(text clob)\\\");\\n        stat.execute(\\\"create table test2(text clob)\\\");\\n        StringBuilder buff \\u003d new StringBuilder();\\n        for (int i \\u003d 0; i \\u003c 1000; i++) {\\n            buff.append(\\u0027 \\u0027);\\n        }\\n        String spaces \\u003d buff.toString();\\n        stat.execute(\\\"insert into test values(\\u0027\\\" + spaces + \\\"\\u0027)\\\");\\n        stat.execute(\\\"insert into test2 select * from test\\\");\\n        rs \\u003d stat.executeQuery(\\\"select * from test2\\\");\\n        rs.next();\\n        assertEquals(spaces, rs.getString(1));\\n        stat.execute(\\\"drop table test\\\");\\n        rs \\u003d stat.executeQuery(\\\"select * from test2\\\");\\n        rs.next();\\n        assertEquals(spaces, rs.getString(1));\\n        stat.execute(\\\"alter table test2 add column id int before text\\\");\\n        rs \\u003d stat.executeQuery(\\\"select * from test2\\\");\\n        rs.next();\\n        assertEquals(spaces, rs.getString(\\\"text\\\"));\\n        conn.close();\\n    }\"}","324":"{\"expressionStart\":{\"int:10000\":694,\"TestLob.assertEquals()\":681,\"ResultSet.getString()\":701,\"String\":298,\"Connection.createStatement()\":253,\"\\u003creturn\\u003e\":87,\"TestLob.getConnection()\":539,\"ResultSet.next()\":662,\"String:lob\":122,\"Statement.execute()\":285,\"Connection.close()\":510,\"TestLob.deleteDb()\":113,\"UNKNOWN.length()\":701,\"int:2\":714,\"Statement.executeQuery()\":613},\"expressionEnd\":{\"int:10000\":699,\"TestLob.assertEquals()\":726,\"ResultSet.getString()\":716,\"String\":367,\"Connection.createStatement()\":275,\"\\u003creturn\\u003e\":94,\"TestLob.getConnection()\":559,\"ResultSet.next()\":671,\"String:lob\":127,\"Statement.execute()\":368,\"Connection.close()\":522,\"TestLob.deleteDb()\":128,\"UNKNOWN.length()\":725,\"int:2\":715,\"Statement.executeQuery()\":652},\"rawCode\":\"private void testCopyLob() throws Exception {\\n        if (config.memory) {\\n            return;\\n        }\\n        deleteDb(\\\"lob\\\");\\n        Connection conn;\\n        Statement stat;\\n        ResultSet rs;\\n        conn \\u003d getConnection(\\\"lob\\\");\\n        stat \\u003d conn.createStatement();\\n        stat.execute(\\\"create table test(id identity, data clob) as select 1, space(10000)\\\");\\n        stat.execute(\\\"insert into test(id, data) select 2, data from test\\\");\\n        stat.execute(\\\"delete from test where id \\u003d 1\\\");\\n        conn.close();\\n        conn \\u003d getConnection(\\\"lob\\\");\\n        stat \\u003d conn.createStatement();\\n        rs \\u003d stat.executeQuery(\\\"select * from test\\\");\\n        rs.next();\\n        assertEquals(10000, rs.getString(2).length());\\n        conn.close();\\n    }\"}","325":"{\"expressionStart\":{\"TestLob.assertEquals()\":727,\"String:\":447,\"ResultSet.getString()\":451,\"String:drop table test\":490,\"String\":279,\"Connection.createStatement()\":172,\"TestLob.getConnection()\":135,\"ResultSet.next()\":708,\"String:lob\":63,\"Connection.close()\":771,\"Statement.execute()\":266,\"TestLob.deleteDb()\":54,\"int:1\":464,\"Statement.executeQuery()\":642},\"expressionEnd\":{\"TestLob.assertEquals()\":760,\"String:\":449,\"ResultSet.getString()\":466,\"String:drop table test\":507,\"String\":311,\"Connection.createStatement()\":194,\"TestLob.getConnection()\":155,\"ResultSet.next()\":717,\"String:lob\":68,\"Connection.close()\":783,\"Statement.execute()\":312,\"TestLob.deleteDb()\":69,\"int:1\":465,\"Statement.executeQuery()\":698},\"rawCode\":\"private void testConvert() throws Exception {\\n        deleteDb(\\\"lob\\\");\\n        Connection conn;\\n        Statement stat;\\n        conn \\u003d getConnection(\\\"lob\\\");\\n        stat \\u003d conn.createStatement();\\n        stat.execute(\\\"create table test(id int, data blob)\\\");\\n        stat.execute(\\\"insert into test values(1, \\u0027\\u0027)\\\");\\n        ResultSet rs;\\n        rs \\u003d stat.executeQuery(\\\"select cast(data as clob) from test\\\");\\n        rs.next();\\n        assertEquals(\\\"\\\", rs.getString(1));\\n        stat.execute(\\\"drop table test\\\");\\n\\n        stat.execute(\\\"create table test(id int, data clob)\\\");\\n        stat.execute(\\\"insert into test values(1, \\u0027\\u0027)\\\");\\n        rs \\u003d stat.executeQuery(\\\"select cast(data as blob) from test\\\");\\n        rs.next();\\n        assertEquals(\\\"\\\", rs.getString(1));\\n\\n        conn.close();\\n    }\"}","326":"{\"expressionStart\":{\"Connection.setAutoCommit()\":2379,\"TestLob.assertEquals()\":2762,\"boolean:false\":2398,\"int:100\":388,\"\\u003cr\\u003e\":2025,\"String\":680,\"Connection.createStatement()\":550,\"UNKNOWN.executeQuery()\":2540,\"ResultSet.next()\":2618,\"TestLob.deleteDb()\":77,\"Connection.close()\":2817,\"Random.\\u003cinit\\u003e\":296,\"Connection.commit()\":1391,\"TestLob.reconnect()\":120,\"int:0\":307,\"\\u003cnullcheck\\u003e\":1839,\"String:\\u0027)\":693,\"TestLob.trace()\":1873,\"ResultSet.getString()\":2716,\"UNKNOWN.execute()\":550,\"int\":393,\"TestLob.getSize()\":380,\"String:lob\":86,\"Random.nextInt()\":459,\"null:null\":356,\"\\u003ca\\u003e\":716,\"int:10\":474,\"Connection.setSavepoint()\":1755,\"Connection.rollback()\":1925,\"UNKNOWN.trim()\":2716},\"expressionEnd\":{\"Connection.setAutoCommit()\":2404,\"TestLob.assertEquals()\":2782,\"boolean:false\":2403,\"int:100\":391,\"\\u003cr\\u003e\":2033,\"String\":686,\"Connection.createStatement()\":572,\"UNKNOWN.executeQuery()\":2597,\"ResultSet.next()\":2627,\"TestLob.deleteDb()\":92,\"Connection.close()\":2829,\"Random.\\u003cinit\\u003e\":309,\"Connection.commit()\":1404,\"TestLob.reconnect()\":135,\"int:0\":308,\"\\u003cnullcheck\\u003e\":1849,\"String:\\u0027)\":697,\"TestLob.trace()\":1903,\"ResultSet.getString()\":2737,\"UNKNOWN.execute()\":698,\"int\":396,\"TestLob.getSize()\":397,\"String:lob\":91,\"Random.nextInt()\":477,\"null:null\":360,\"\\u003ca\\u003e\":722,\"int:10\":476,\"Connection.setSavepoint()\":1774,\"Connection.rollback()\":1942,\"UNKNOWN.trim()\":2744},\"rawCode\":\"private void testLobTransactions(int spaceLen) throws SQLException {\\n        deleteDb(\\\"lob\\\");\\n        Connection conn \\u003d reconnect(null);\\n        conn.createStatement().execute(\\\"CREATE TABLE TEST(ID IDENTITY, DATA CLOB, DATA2 VARCHAR)\\\");\\n        conn.setAutoCommit(false);\\n        Random random \\u003d new Random(0);\\n        int rows \\u003d 0;\\n        Savepoint sp \\u003d null;\\n        int len \\u003d getSize(100, 400);\\n        for (int i \\u003d 0; i \\u003c len; i++) {\\n            switch (random.nextInt(10)) {\\n            case 0:\\n                trace(\\\"insert\\\");\\n                conn.createStatement().execute(\\n                        \\\"INSERT INTO TEST(DATA, DATA2) VALUES(\\u0027\\\" + i + \\\"\\u0027 || SPACE(\\\" + spaceLen + \\\"), \\u0027\\\" + i + \\\"\\u0027)\\\");\\n                rows++;\\n                break;\\n            case 1:\\n                if (rows \\u003e 0) {\\n                    trace(\\\"delete\\\");\\n                    conn.createStatement().execute(\\\"DELETE FROM TEST WHERE ID\\u003d\\\" + random.nextInt(rows));\\n                }\\n                break;\\n            case 2:\\n                if (rows \\u003e 0) {\\n                    trace(\\\"update\\\");\\n                    conn.createStatement().execute(\\n                            \\\"UPDATE TEST SET DATA\\u003d\\u0027x\\u0027 || DATA, DATA2\\u003d\\u0027x\\u0027 || DATA2 WHERE ID\\u003d\\\" + random.nextInt(rows));\\n                }\\n                break;\\n            case 3:\\n                if (rows \\u003e 0) {\\n                    trace(\\\"commit\\\");\\n                    conn.commit();\\n                    sp \\u003d null;\\n                }\\n                break;\\n            case 4:\\n                if (rows \\u003e 0) {\\n                    trace(\\\"rollback\\\");\\n                    conn.rollback();\\n                    sp \\u003d null;\\n                }\\n                break;\\n            case 5:\\n                trace(\\\"savepoint\\\");\\n                sp \\u003d conn.setSavepoint();\\n                break;\\n            case 6:\\n                if (sp !\\u003d null) {\\n                    trace(\\\"rollback to savepoint\\\");\\n                    conn.rollback(sp);\\n                }\\n                break;\\n            case 7:\\n                if (rows \\u003e 0) {\\n                    trace(\\\"checkpoint\\\");\\n                    conn.createStatement().execute(\\\"CHECKPOINT\\\");\\n                    trace(\\\"shutdown immediately\\\");\\n                    conn.createStatement().execute(\\\"SHUTDOWN IMMEDIATELY\\\");\\n                    trace(\\\"shutdown done\\\");\\n                    conn \\u003d reconnect(conn);\\n                    conn.setAutoCommit(false);\\n                    sp \\u003d null;\\n                }\\n                break;\\n            default:\\n            }\\n            ResultSet rs \\u003d conn.createStatement().executeQuery(\\\"SELECT * FROM TEST\\\");\\n            while (rs.next()) {\\n                String d1 \\u003d rs.getString(\\\"DATA\\\").trim();\\n                String d2 \\u003d rs.getString(\\\"DATA2\\\").trim();\\n                assertEquals(d1, d2);\\n            }\\n\\n        }\\n        conn.close();\\n    }\"}","327":"{\"expressionStart\":{\"PreparedStatement.setBinaryStream()\":529,\"ByteArrayInputStream.\\u003cinit\\u003e\":553,\"ResultSet.getString()\":732,\"\\u003cr\\u003e\":469,\"int:1000\":473,\"String\":337,\"Connection.createStatement()\":174,\"int\":405,\"ResultSet.next()\":707,\"TestLob.getConnection()\":127,\"Random.nextBytes()\":498,\"String:lob\":79,\"Connection.prepareStatement()\":298,\"Connection.close()\":767,\"TestLob.deleteDb()\":70,\"Statement.execute()\":206,\"Random.\\u003cinit\\u003e\":430,\"PreparedStatement.execute()\":602,\"\\u003ca\\u003e\":479,\"{byte}\":396,\"int:2\":745,\"int:1\":441,\"Statement.executeQuery()\":651,\"int:0\":466},\"expressionEnd\":{\"PreparedStatement.setBinaryStream()\":588,\"ByteArrayInputStream.\\u003cinit\\u003e\":583,\"ResultSet.getString()\":747,\"\\u003cr\\u003e\":477,\"int:1000\":477,\"String\":371,\"Connection.createStatement()\":196,\"int\":408,\"ResultSet.next()\":716,\"TestLob.getConnection()\":147,\"Random.nextBytes()\":515,\"String:lob\":84,\"Connection.prepareStatement()\":372,\"Connection.close()\":779,\"TestLob.deleteDb()\":85,\"Statement.execute()\":263,\"Random.\\u003cinit\\u003e\":443,\"PreparedStatement.execute()\":616,\"\\u003ca\\u003e\":482,\"{byte}\":409,\"int:2\":746,\"int:1\":442,\"Statement.executeQuery()\":690,\"int:0\":467},\"rawCode\":\"private void testReadManyLobs() throws Exception {\\n        //\\n        deleteDb(\\\"lob\\\");\\n        Connection conn;\\n        conn \\u003d getConnection(\\\"lob\\\");\\n        Statement stat \\u003d conn.createStatement();\\n        stat.execute(\\\"create table test(id identity, data clob)\\\");\\n        PreparedStatement prep \\u003d conn.prepareStatement(\\n                \\\"insert into test values(null, ?)\\\");\\n        byte[] data \\u003d new byte[256];\\n        Random r \\u003d new Random(1);\\n        for (int i \\u003d 0; i \\u003c 1000; i++) {\\n            r.nextBytes(data);\\n            prep.setBinaryStream(1, new ByteArrayInputStream(data), -1);\\n            prep.execute();\\n        }\\n        ResultSet rs \\u003d stat.executeQuery(\\\"select * from test\\\");\\n        while (rs.next()) {\\n            rs.getString(2);\\n        }\\n        conn.close();\\n    }\"}","328":"{\"expressionStart\":{\"PreparedStatement.setBinaryStream()\":650,\"int:10000\":690,\"Connection.setAutoCommit()\":861,\"TestLob.getRandomStream()\":674,\"\\u003cr\\u003e\":986,\"PreparedStatement.setInt()\":445,\"String\":1197,\"UNKNOWN.getColumnName()\":1380,\"ResultSet.next()\":1276,\"int:8\":628,\"Connection.close()\":1480,\"TestLob.deleteDb()\":59,\"Connection.commit()\":804,\"int:2\":729,\"TestLob.reconnect()\":116,\"int:1\":457,\"int:0\":415,\"UNKNOWN.getColumnCount()\":1322,\"ResultSet.getMetaData()\":1380,\"ResultSet.getString()\":1431,\"boolean:true\":880,\"String:lob\":68,\"Connection.prepareStatement()\":902,\"PreparedStatement.executeQuery()\":1240,\"PreparedStatement.execute()\":285,\"null:null\":126,\"\\u003ca\\u003e\":1357,\"int:10\":422,\"PreparedStatement.close()\":1145},\"expressionEnd\":{\"PreparedStatement.setBinaryStream()\":703,\"int:10000\":695,\"Connection.setAutoCommit()\":885,\"TestLob.getRandomStream()\":699,\"\\u003cr\\u003e\":992,\"PreparedStatement.setInt()\":462,\"String\":1214,\"UNKNOWN.getColumnName()\":1413,\"ResultSet.next()\":1285,\"int:8\":629,\"Connection.close()\":1492,\"TestLob.deleteDb()\":74,\"Connection.commit()\":817,\"int:2\":730,\"TestLob.reconnect()\":131,\"int:1\":458,\"int:0\":416,\"UNKNOWN.getColumnCount()\":1355,\"ResultSet.getMetaData()\":1396,\"ResultSet.getString()\":1446,\"boolean:true\":884,\"String:lob\":73,\"Connection.prepareStatement()\":960,\"PreparedStatement.executeQuery()\":1259,\"PreparedStatement.execute()\":299,\"null:null\":130,\"\\u003ca\\u003e\":1360,\"int:10\":424,\"PreparedStatement.close()\":1157},\"rawCode\":\"private void testUpdateLob() throws SQLException {\\n        deleteDb(\\\"lob\\\");\\n        Connection conn;\\n        conn \\u003d reconnect(null);\\n\\n        PreparedStatement prep \\u003d conn\\n                .prepareStatement(\\\"CREATE TABLE IF NOT EXISTS p( id int primary key, rawbyte BLOB ); \\\");\\n        prep.execute();\\n        prep.close();\\n\\n        prep \\u003d conn.prepareStatement(\\\"INSERT INTO p(id) VALUES(?);\\\");\\n        for (int i \\u003d 0; i \\u003c 10; i++) {\\n            prep.setInt(1, i);\\n            prep.execute();\\n        }\\n        prep.close();\\n\\n        prep \\u003d conn.prepareStatement(\\\"UPDATE p set rawbyte\\u003d? WHERE id\\u003d?\\\");\\n        for (int i \\u003d 0; i \\u003c 8; i++) {\\n            prep.setBinaryStream(1, getRandomStream(10000, i), 0);\\n            prep.setInt(2, i);\\n            prep.execute();\\n        }\\n        prep.close();\\n        conn.commit();\\n\\n        conn \\u003d reconnect(conn);\\n\\n        conn.setAutoCommit(true);\\n        prep \\u003d conn.prepareStatement(\\\"UPDATE p set rawbyte\\u003d? WHERE id\\u003d?\\\");\\n        for (int i \\u003d 8; i \\u003c 10; i++) {\\n            prep.setBinaryStream(1, getRandomStream(10000, i), 0);\\n            prep.setInt(2, i);\\n            prep.execute();\\n        }\\n        prep.close();\\n\\n        prep \\u003d conn.prepareStatement(\\\"SELECT * from p\\\");\\n        ResultSet rs \\u003d prep.executeQuery();\\n        while (rs.next()) {\\n            for (int i \\u003d 1; i \\u003c\\u003d rs.getMetaData().getColumnCount(); i++) {\\n                rs.getMetaData().getColumnName(i);\\n                rs.getString(i);\\n            }\\n        }\\n        conn.close();\\n    }\"}","329":"{\"expressionStart\":{\"int:10000\":702,\"Connection.setAutoCommit()\":309,\"boolean:false\":328,\"TestLob.assertEquals()\":689,\"ResultSet.getString()\":709,\"UNKNOWN.execute()\":344,\"String\":375,\"Connection.createStatement()\":225,\"UNKNOWN.executeQuery()\":569,\"ResultSet.next()\":647,\"String:lob\":74,\"TestLob.deleteDb()\":65,\"Connection.close()\":744,\"null:null\":118,\"TestLob.assertTrue()\":636,\"UNKNOWN.length()\":709,\"int:2\":722,\"TestLob.reconnect()\":529,\"int:1\":677,\"ResultSet.getInt()\":667},\"expressionEnd\":{\"int:10000\":707,\"Connection.setAutoCommit()\":334,\"boolean:false\":333,\"TestLob.assertEquals()\":734,\"ResultSet.getString()\":724,\"UNKNOWN.execute()\":394,\"String\":393,\"Connection.createStatement()\":247,\"UNKNOWN.executeQuery()\":626,\"ResultSet.next()\":656,\"String:lob\":79,\"TestLob.deleteDb()\":80,\"Connection.close()\":756,\"null:null\":122,\"TestLob.assertTrue()\":657,\"UNKNOWN.length()\":733,\"int:2\":723,\"TestLob.reconnect()\":544,\"int:1\":678,\"ResultSet.getInt()\":679},\"rawCode\":\"private void testLobRollbackStop() throws SQLException {\\n        deleteDb(\\\"lob\\\");\\n        Connection conn \\u003d reconnect(null);\\n        conn.createStatement().execute(\\\"CREATE TABLE TEST(ID INT PRIMARY KEY, DATA CLOB)\\\");\\n        conn.createStatement().execute(\\\"INSERT INTO TEST VALUES(1, SPACE(10000))\\\");\\n        conn.setAutoCommit(false);\\n        conn.createStatement().execute(\\\"DELETE FROM TEST\\\");\\n        conn.createStatement().execute(\\\"CHECKPOINT\\\");\\n        conn.createStatement().execute(\\\"SHUTDOWN IMMEDIATELY\\\");\\n        conn \\u003d reconnect(conn);\\n        ResultSet rs \\u003d conn.createStatement().executeQuery(\\\"SELECT * FROM TEST\\\");\\n        assertTrue(rs.next());\\n        rs.getInt(1);\\n        assertEquals(10000, rs.getString(2).length());\\n        conn.close();\\n    }\"}","330":"{\"expressionStart\":{\"IOUtils.closeResultSet()\":1044,\"DatabaseMetaData.getTables()\":568,\"ResultSet.getString()\":717,\"Connection.getMetaData()\":485,\"String\":833,\"ArrayList.toArray()\":1099,\"\\u003creturn\\u003e\":1092,\"Connection.getCatalog()\":587,\"{String}\":1114,\"ResultSet.next()\":667,\"ArrayList.\\u003cinit\\u003e\":417,\"int:3\":730,\"ArrayList.add()\":949,\"String.toLowerCase()\":891,\"Set.contains()\":866,\"String.equalsIgnoreCase()\":833,\"null:null\":614,\"String:TABLE\":635,\"ArrayList.size()\":1125},\"expressionEnd\":{\"IOUtils.closeResultSet()\":1070,\"DatabaseMetaData.getTables()\":645,\"ResultSet.getString()\":732,\"Connection.getMetaData()\":503,\"String\":837,\"ArrayList.toArray()\":1140,\"\\u003creturn\\u003e\":1141,\"Connection.getCatalog()\":604,\"{String}\":1139,\"ResultSet.next()\":676,\"ArrayList.\\u003cinit\\u003e\":440,\"int:3\":731,\"ArrayList.add()\":965,\"String.toLowerCase()\":923,\"Set.contains()\":924,\"String.equalsIgnoreCase()\":862,\"null:null\":618,\"String:TABLE\":642,\"ArrayList.size()\":1138},\"rawCode\":\"/**\\r\\n     * Get a list of all tables for the given schema.\\r\\n     *\\r\\n     * @param conn   database connection\\r\\n     * @param schema schema name\\r\\n     * @return list of all tables\\r\\n     * @throws SQLException Thrown if an SQL statement failed to be executed.\\r\\n     */\\r\\n    private static String[] getTableNames(final Connection conn, final String schema) throws SQLException {\\r\\n        final ArrayList\\u003cString\\u003e result \\u003d new ArrayList\\u003cString\\u003e();\\r\\n        final DatabaseMetaData metaData \\u003d conn.getMetaData();\\r\\n        ResultSet rs \\u003d null;\\r\\n        try {\\r\\n            rs \\u003d metaData.getTables(conn.getCatalog(), schema, null, new String[] { \\\"TABLE\\\" });\\r\\n            while (rs.next()) {\\r\\n                final String name \\u003d rs.getString(3);\\r\\n                // ignore dynamically created tables for statistics manager\\r\\n                if (!\\\"sm\\\".equalsIgnoreCase(schema) || VALID_SM_TABLES.contains(name.toLowerCase(Locale.ENGLISH))) {\\r\\n                    result.add(name);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        finally {\\r\\n            IOUtils.closeResultSet(rs);\\r\\n        }\\r\\n        return result.toArray(new String[result.size()]);\\r\\n    }\"}","331":"{\"expressionStart\":{\"IOUtils.closeResultSet()\":1188,\"StringBuilder.toString()\":1107,\"ResultSet.getString()\":1038,\"\\u003cr\\u003e\":854,\"StringBuilder.\\u003cinit\\u003e\":796,\"Connection.getMetaData()\":571,\"StringBuilder.append()\":954,\"ArrayList.toArray()\":1243,\"\\u003creturn\\u003e\":1236,\"ResultSet.next()\":734,\"Connection.getCatalog()\":679,\"{String}\":1258,\"ArrayList.\\u003cinit\\u003e\":503,\"int:4\":851,\"ArrayList.add()\":1096,\"DatabaseMetaData.getImportedKeys()\":654,\"char:\\u0027/\\u0027\":971,\"\\u003ca\\u003e\":867,\"StringBuilder.length()\":903,\"int:0\":924,\"int:14\":863,\"ArrayList.size()\":1269},\"expressionEnd\":{\"IOUtils.closeResultSet()\":1214,\"StringBuilder.toString()\":1127,\"ResultSet.getString()\":1057,\"\\u003cr\\u003e\":865,\"StringBuilder.\\u003cinit\\u003e\":815,\"Connection.getMetaData()\":589,\"StringBuilder.append()\":975,\"ArrayList.toArray()\":1284,\"\\u003creturn\\u003e\":1285,\"ResultSet.next()\":743,\"Connection.getCatalog()\":696,\"{String}\":1283,\"ArrayList.\\u003cinit\\u003e\":526,\"int:4\":852,\"ArrayList.add()\":1128,\"DatabaseMetaData.getImportedKeys()\":712,\"char:\\u0027/\\u0027\":974,\"\\u003ca\\u003e\":874,\"StringBuilder.length()\":921,\"int:0\":925,\"int:14\":865,\"ArrayList.size()\":1282},\"rawCode\":\"/**\\r\\n     * Get a list of all foreign keys that are defined for the table.\\r\\n     *\\r\\n     * @param conn   database connection\\r\\n     * @param schema schema name\\r\\n     * @param table  table name\\r\\n     * @return list of all foreign keys\\r\\n     * @throws SQLException Thrown if an SQL statement failed to be executed.\\r\\n     */\\r\\n    private static String[] getImportedKeys(final Connection conn, final String schema, final String table)\\r\\n        throws SQLException {\\r\\n        final ArrayList\\u003cString\\u003e result \\u003d new ArrayList\\u003cString\\u003e();\\r\\n        final DatabaseMetaData metaData \\u003d conn.getMetaData();\\r\\n        ResultSet rs \\u003d null;\\r\\n        try {\\r\\n            rs \\u003d metaData.getImportedKeys(conn.getCatalog(), schema, table);\\r\\n            while (rs.next()) {\\r\\n                final StringBuilder indexInfo \\u003d new StringBuilder();\\r\\n                for (int index \\u003d 4; index \\u003c\\u003d 14; index++) {\\r\\n                    if (indexInfo.length() \\u003e 0) {\\r\\n                        indexInfo.append(\\u0027/\\u0027);\\r\\n                    }\\r\\n                    indexInfo.append(rs.getString(index));\\r\\n                }\\r\\n                result.add(indexInfo.toString());\\r\\n            }\\r\\n        }\\r\\n        finally {\\r\\n            IOUtils.closeResultSet(rs);\\r\\n        }\\r\\n        return result.toArray(new String[result.size()]);\\r\\n    }\"}","332":"{\"expressionStart\":{\"IOUtils.closeResultSet()\":1222,\"StringBuilder.toString()\":1141,\"boolean:false\":734,\"ResultSet.getString()\":1072,\"\\u003cr\\u003e\":888,\"StringBuilder.\\u003cinit\\u003e\":830,\"Connection.getMetaData()\":595,\"StringBuilder.append()\":988,\"ArrayList.toArray()\":1277,\"\\u003creturn\\u003e\":1270,\"Connection.getCatalog()\":700,\"{String}\":1292,\"ResultSet.next()\":768,\"ArrayList.\\u003cinit\\u003e\":527,\"boolean:true\":741,\"int:4\":885,\"DatabaseMetaData.getIndexInfo()\":678,\"ArrayList.add()\":1130,\"char:\\u0027/\\u0027\":1005,\"\\u003ca\\u003e\":901,\"StringBuilder.length()\":937,\"int:10\":897,\"int:0\":958,\"ArrayList.size()\":1303},\"expressionEnd\":{\"IOUtils.closeResultSet()\":1248,\"StringBuilder.toString()\":1161,\"boolean:false\":739,\"ResultSet.getString()\":1091,\"\\u003cr\\u003e\":899,\"StringBuilder.\\u003cinit\\u003e\":849,\"Connection.getMetaData()\":613,\"StringBuilder.append()\":1009,\"ArrayList.toArray()\":1318,\"\\u003creturn\\u003e\":1319,\"Connection.getCatalog()\":717,\"{String}\":1317,\"ResultSet.next()\":777,\"ArrayList.\\u003cinit\\u003e\":550,\"boolean:true\":745,\"int:4\":886,\"DatabaseMetaData.getIndexInfo()\":746,\"ArrayList.add()\":1162,\"char:\\u0027/\\u0027\":1008,\"\\u003ca\\u003e\":908,\"StringBuilder.length()\":955,\"int:10\":899,\"int:0\":959,\"ArrayList.size()\":1316},\"rawCode\":\"/**\\r\\n     * Get a list of all table indexes for the given combination of schema name and table name.\\r\\n     *\\r\\n     * @param conn   database connection\\r\\n     * @param schema schema name\\r\\n     * @param table  table name\\r\\n     * @return list of all table indexes\\r\\n     * @throws SQLException Thrown if an SQL statement failed to be executed.\\r\\n     */\\r\\n    private static String[] getIndexInfo(final Connection conn, final String schema, final String table)\\r\\n        throws SQLException {\\r\\n        final ArrayList\\u003cString\\u003e result \\u003d new ArrayList\\u003cString\\u003e();\\r\\n        final DatabaseMetaData metaData \\u003d conn.getMetaData();\\r\\n        ResultSet rs \\u003d null;\\r\\n        try {\\r\\n            rs \\u003d metaData.getIndexInfo(conn.getCatalog(), schema, table, false, true);\\r\\n            while (rs.next()) {\\r\\n                final StringBuilder indexInfo \\u003d new StringBuilder();\\r\\n                for (int index \\u003d 4; index \\u003c\\u003d 10; index++) {\\r\\n                    if (indexInfo.length() \\u003e 0) {\\r\\n                        indexInfo.append(\\u0027/\\u0027);\\r\\n                    }\\r\\n                    indexInfo.append(rs.getString(index));\\r\\n                }\\r\\n                result.add(indexInfo.toString());\\r\\n            }\\r\\n        }\\r\\n        finally {\\r\\n            IOUtils.closeResultSet(rs);\\r\\n        }\\r\\n        return result.toArray(new String[result.size()]);\\r\\n    }\"}","333":"{\"expressionStart\":{\"IOUtils.closeResultSet()\":1414,\"\\u003cr\\u003e\":965,\"Connection.getMetaData()\":593,\"StringBuilder.append()\":1230,\"ArrayList.toArray()\":1469,\"Connection.getCatalog()\":696,\"ResultSet.next()\":825,\"DatabaseMetaData.getColumns()\":676,\"int:4\":939,\"char:\\u0027/\\u0027\":1172,\"int:0\":1124,\"ArrayList.size()\":1495,\"int:17\":1071,\"StringBuilder.toString()\":1336,\"UNKNOWN.getColumnCount()\":770,\"ResultSet.getMetaData()\":770,\"ResultSet.getString()\":1244,\"StringBuilder.\\u003cinit\\u003e\":884,\"\\u003creturn\\u003e\":1462,\"{String}\":1484,\"int\":974,\"ArrayList.\\u003cinit\\u003e\":525,\"ArrayList.add()\":1325,\"null:null\":730,\"\\u003ca\\u003e\":979,\"StringBuilder.length()\":1106},\"expressionEnd\":{\"IOUtils.closeResultSet()\":1440,\"\\u003cr\\u003e\":976,\"Connection.getMetaData()\":611,\"StringBuilder.append()\":1264,\"ArrayList.toArray()\":1510,\"Connection.getCatalog()\":713,\"ResultSet.next()\":834,\"DatabaseMetaData.getColumns()\":735,\"int:4\":940,\"char:\\u0027/\\u0027\":1175,\"int:0\":1125,\"ArrayList.size()\":1508,\"int:17\":1073,\"StringBuilder.toString()\":1353,\"UNKNOWN.getColumnCount()\":803,\"ResultSet.getMetaData()\":786,\"ResultSet.getString()\":1263,\"StringBuilder.\\u003cinit\\u003e\":903,\"\\u003creturn\\u003e\":1511,\"{String}\":1509,\"int\":976,\"ArrayList.\\u003cinit\\u003e\":548,\"ArrayList.add()\":1354,\"null:null\":734,\"\\u003ca\\u003e\":986,\"StringBuilder.length()\":1121},\"rawCode\":\"/**\\r\\n     * Get a list of all table columns for the given combination of schema name and table name.\\r\\n     *\\r\\n     * @param conn   database connection\\r\\n     * @param schema schema name\\r\\n     * @param table  table name\\r\\n     * @return list of all table columns\\r\\n     * @throws SQLException Thrown if an SQL statement failed to be executed.\\r\\n     */\\r\\n    private static String[] getColumns(final Connection conn, final String schema, final String table)\\r\\n        throws SQLException {\\r\\n        final ArrayList\\u003cString\\u003e result \\u003d new ArrayList\\u003cString\\u003e();\\r\\n        final DatabaseMetaData metaData \\u003d conn.getMetaData();\\r\\n        ResultSet rs \\u003d null;\\r\\n        try {\\r\\n            rs \\u003d metaData.getColumns(conn.getCatalog(), schema, table, null);\\r\\n            final int columns \\u003d rs.getMetaData().getColumnCount();\\r\\n            while (rs.next()) {\\r\\n                final StringBuilder column \\u003d new StringBuilder();\\r\\n                for (int index \\u003d 4; (index \\u003c\\u003d columns) \\u0026\\u0026 (index \\u003c\\u003d 22); index++) {\\r\\n                    // ignore column position\\r\\n                    if (index !\\u003d 17) {\\r\\n                        if (column.length() \\u003e 0) {\\r\\n                            column.append(\\u0027/\\u0027);\\r\\n                        }\\r\\n                        column.append(rs.getString(index));\\r\\n                    }\\r\\n                }\\r\\n                result.add(column.toString());\\r\\n            }\\r\\n        }\\r\\n        finally {\\r\\n            IOUtils.closeResultSet(rs);\\r\\n        }\\r\\n        return result.toArray(new String[result.size()]);\\r\\n    }\"}","334":"{\"expressionStart\":{\"IOUtils.closeResultSet()\":1185,\"StringBuilder.toString()\":1104,\"\\u003cr\\u003e\":852,\"ResultSet.getString()\":1035,\"StringBuilder.\\u003cinit\\u003e\":794,\"Connection.getMetaData()\":570,\"StringBuilder.append()\":951,\"ArrayList.toArray()\":1240,\"\\u003creturn\\u003e\":1233,\"Connection.getCatalog()\":677,\"{String}\":1255,\"ResultSet.next()\":732,\"ArrayList.\\u003cinit\\u003e\":502,\"int:6\":861,\"int:4\":849,\"DatabaseMetaData.getPrimaryKeys()\":653,\"ArrayList.add()\":1093,\"char:\\u0027/\\u0027\":968,\"\\u003ca\\u003e\":864,\"StringBuilder.length()\":900,\"int:0\":921,\"ArrayList.size()\":1266},\"expressionEnd\":{\"IOUtils.closeResultSet()\":1211,\"StringBuilder.toString()\":1124,\"\\u003cr\\u003e\":862,\"ResultSet.getString()\":1054,\"StringBuilder.\\u003cinit\\u003e\":813,\"Connection.getMetaData()\":588,\"StringBuilder.append()\":972,\"ArrayList.toArray()\":1281,\"\\u003creturn\\u003e\":1282,\"Connection.getCatalog()\":694,\"{String}\":1280,\"ResultSet.next()\":741,\"ArrayList.\\u003cinit\\u003e\":525,\"int:6\":862,\"int:4\":850,\"DatabaseMetaData.getPrimaryKeys()\":710,\"ArrayList.add()\":1125,\"char:\\u0027/\\u0027\":971,\"\\u003ca\\u003e\":871,\"StringBuilder.length()\":918,\"int:0\":922,\"ArrayList.size()\":1279},\"rawCode\":\"/**\\r\\n     * Get a list of all primary keys that are defined for the table.\\r\\n     *\\r\\n     * @param conn   database connection\\r\\n     * @param schema schema name\\r\\n     * @param table  table name\\r\\n     * @return list of all primary keys\\r\\n     * @throws SQLException Thrown if an SQL statement failed to be executed.\\r\\n     */\\r\\n    private static String[] getPrimaryKeys(final Connection conn, final String schema, final String table)\\r\\n        throws SQLException {\\r\\n        final ArrayList\\u003cString\\u003e result \\u003d new ArrayList\\u003cString\\u003e();\\r\\n        final DatabaseMetaData metaData \\u003d conn.getMetaData();\\r\\n        ResultSet rs \\u003d null;\\r\\n        try {\\r\\n            rs \\u003d metaData.getPrimaryKeys(conn.getCatalog(), schema, table);\\r\\n            while (rs.next()) {\\r\\n                final StringBuilder indexInfo \\u003d new StringBuilder();\\r\\n                for (int index \\u003d 4; index \\u003c\\u003d 6; index++) {\\r\\n                    if (indexInfo.length() \\u003e 0) {\\r\\n                        indexInfo.append(\\u0027/\\u0027);\\r\\n                    }\\r\\n                    indexInfo.append(rs.getString(index));\\r\\n                }\\r\\n                result.add(indexInfo.toString());\\r\\n            }\\r\\n        }\\r\\n        finally {\\r\\n            IOUtils.closeResultSet(rs);\\r\\n        }\\r\\n        return result.toArray(new String[result.size()]);\\r\\n    }\"}","335":"{\"expressionStart\":{\"IOUtils.closeResultSet()\":831,\"ResultSet.getString()\":613,\"DatabaseMetaData.getSchemas()\":518,\"Connection.getMetaData()\":435,\"ArrayList.toArray()\":886,\"\\u003creturn\\u003e\":879,\"{String}\":901,\"ResultSet.next()\":561,\"ArrayList.\\u003cinit\\u003e\":367,\"ArrayList.add()\":734,\"String.toLowerCase()\":674,\"Set.contains()\":651,\"int:1\":626,\"ArrayList.size()\":912},\"expressionEnd\":{\"IOUtils.closeResultSet()\":857,\"ResultSet.getString()\":628,\"DatabaseMetaData.getSchemas()\":539,\"Connection.getMetaData()\":453,\"ArrayList.toArray()\":927,\"\\u003creturn\\u003e\":928,\"{String}\":926,\"ResultSet.next()\":570,\"ArrayList.\\u003cinit\\u003e\":390,\"ArrayList.add()\":752,\"String.toLowerCase()\":708,\"Set.contains()\":709,\"int:1\":627,\"ArrayList.size()\":925},\"rawCode\":\"/**\\r\\n     * Get a list of all schemas for the given connection.\\r\\n     *\\r\\n     * @param conn database connection\\r\\n     * @return list of all schemas\\r\\n     * @throws SQLException Thrown if an SQL statement failed to be executed.\\r\\n     */\\r\\n    private static String[] getSchemaNames(final Connection conn) throws SQLException {\\r\\n        final ArrayList\\u003cString\\u003e result \\u003d new ArrayList\\u003cString\\u003e();\\r\\n        final DatabaseMetaData metaData \\u003d conn.getMetaData();\\r\\n        ResultSet rs \\u003d null;\\r\\n        try {\\r\\n            rs \\u003d metaData.getSchemas();\\r\\n            while (rs.next()) {\\r\\n                final String schema \\u003d rs.getString(1);\\r\\n                if (KNOWN_SCHEMAS.contains(schema.toLowerCase(Locale.ENGLISH))) {\\r\\n                    result.add(schema);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        finally {\\r\\n            IOUtils.closeResultSet(rs);\\r\\n        }\\r\\n        return result.toArray(new String[result.size()]);\\r\\n    }\"}","336":"{\"expressionStart\":{\"FileInputStream.\\u003cinit\\u003e\":78,\"ResultSet.getString()\":671,\"DriverManager.getConnection()\":495,\"String\":271,\"Connection.createStatement()\":568,\"Properties.getProperty()\":254,\"ResultSet.next()\":646,\"Class.forName()\":451,\"Connection.close()\":740,\"ClassNotFoundException.printStackTrace()\":809,\"int:1\":684,\"UNKNOWN.println()\":691,\"Statement.executeQuery()\":609,\"IOException.printStackTrace()\":175,\"SQLException.printStackTrace()\":866,\"Properties.load()\":68},\"expressionEnd\":{\"FileInputStream.\\u003cinit\\u003e\":139,\"ResultSet.getString()\":686,\"DriverManager.getConnection()\":546,\"String\":281,\"Connection.createStatement()\":589,\"Properties.getProperty()\":282,\"ResultSet.next()\":655,\"Class.forName()\":473,\"Connection.close()\":751,\"ClassNotFoundException.printStackTrace()\":828,\"int:1\":685,\"UNKNOWN.println()\":717,\"Statement.executeQuery()\":633,\"IOException.printStackTrace()\":194,\"SQLException.printStackTrace()\":885,\"Properties.load()\":140},\"rawCode\":\"public void connectToDB(){\\n\\t\\n\\t\\ttry {\\n\\t\\t\\t//load a properties file\\n\\t\\t\\tprop.load(new FileInputStream(\\\"src/main/resources/db.mysql.properties\\\"));\\n\\t\\t\\t} catch (IOException e) {\\n\\t\\t\\t\\te.printStackTrace();\\n\\t\\t\\t}\\n\\t\\tdatabaseUrl \\u003d prop.getProperty(\\\"dburl\\\");\\n\\t\\tuname \\u003d prop.getProperty(\\\"username\\\");\\n\\t\\tpwd \\u003d prop.getProperty(\\\"password\\\");\\n\\t\\tSystem.out.println(\\\"Connected to: \\\" + databaseUrl);\\n\\t\\t//System.out.println(uname);\\n\\t\\t//System.out.println(pwd);\\n\\t\\t\\n\\t\\ttry {\\n\\n\\t\\t\\tClass.forName(dbClass);\\n\\t\\t\\tConnection con \\u003d DriverManager.getConnection (databaseUrl,uname,pwd);\\n\\t\\t\\tStatement stmt \\u003d con.createStatement();\\n\\t\\t\\tResultSet rs \\u003d stmt.executeQuery(query);\\n\\n\\t\\t\\twhile (rs.next()) {\\n\\t\\t\\tdbtime \\u003d rs.getString(1);\\n\\t\\t\\tSystem.out.println(dbtime);\\n\\t\\t\\t} //end while\\n\\n\\t\\t\\tcon.close();\\n\\t\\t\\t} //end try\\n\\n\\t\\t\\tcatch(ClassNotFoundException e) {\\n\\t\\t\\te.printStackTrace();\\n\\t\\t\\t}\\n\\n\\t\\t\\tcatch(SQLException e) {\\n\\t\\t\\te.printStackTrace();\\n\\t\\t\\t}\\n\\t}\"}","337":"{\"expressionStart\":{\"UNKNOWN.executeUpdate()\":104,\"String:Sifra\":1337,\"PreparedStatement.setInt()\":1388,\"String\":141,\"Connection.createStatement()\":104,\"UNKNOWN.executeQuery()\":1153,\"PreparedStatement.addBatch()\":1601,\"ResultSet.next()\":1227,\"int:6\":1439,\"int:5\":1398,\"int:4\":1361,\"int:3\":1324,\"int:9\":1567,\"int:8\":1524,\"PreparedStatement.executeBatch()\":1630,\"int:7\":1481,\"Connection.commit()\":1651,\"int:2\":1287,\"String:Firma\":1300,\"int:1\":1253,\"int:0\":99,\"ResultSet.getInt()\":1256,\"PreparedStatement.setString()\":1554,\"String.format()\":1687,\"ResultSet.getString()\":1570,\"String:ID\":1266,\"Connection.prepareStatement()\":1003,\"String:%-26s -\\u003e %7d\":1701,\"\\u003ca\\u003e\":1619,\"UNKNOWN.println()\":1668},\"expressionEnd\":{\"UNKNOWN.executeUpdate()\":176,\"String:Sifra\":1344,\"PreparedStatement.setInt()\":1421,\"String\":175,\"Connection.createStatement()\":126,\"UNKNOWN.executeQuery()\":1216,\"PreparedStatement.addBatch()\":1614,\"ResultSet.next()\":1236,\"int:6\":1440,\"int:5\":1399,\"int:4\":1362,\"int:3\":1325,\"int:9\":1568,\"int:8\":1525,\"PreparedStatement.executeBatch()\":1647,\"int:7\":1482,\"Connection.commit()\":1664,\"int:2\":1288,\"String:Firma\":1307,\"int:1\":1254,\"int:0\":100,\"ResultSet.getInt()\":1271,\"PreparedStatement.setString()\":1596,\"String.format()\":1733,\"ResultSet.getString()\":1595,\"String:ID\":1270,\"Connection.prepareStatement()\":1134,\"String:%-26s -\\u003e %7d\":1715,\"\\u003ca\\u003e\":1622,\"UNKNOWN.println()\":1734},\"rawCode\":\"private static void doPromVozila(Connection con1, Connection con2) throws SQLException {\\n\\t\\tint i \\u003d 0;\\n\\t\\tcon2.createStatement().executeUpdate(\\\"drop table if exists PromVozila;\\\");\\n\\t\\tcon2.createStatement().executeUpdate(\\\"CREATE TABLE PromVozila(ID INT NOT NULL,Firma INT NOT NULL,Sifra INT NOT NULL,PGRID INT,Status INT,GUID VARCHAR(40),Naziv VARCHAR(40),RegSt VARCHAR(12),LastnikVA VARCHAR(3),LastnikAnalitika INT,VrstaID INT,ZnamkaID INT,TipID INT,ModelID INT,OblikaKaroserije INT,Namena INT,Barva VARCHAR(20),StSasije VARCHAR(30),DrzavaIzdelave INT,LetoIzdelave DATETIME,PrvaRegistracija DATETIME,StSedezev INT,StStojisc INT,StLezisc INT,TezaPraznega INT,MaxTeza INT,MaxHitrost INT,StOsovin INT,VrstaMotorja INT,EuroStandard INT,MocKW INT,Vrtljaji INT,ZapremninaMotorja INT,DimDolzina INT,DimSirina INT,DimVisina INT,DimVolumen INT,StKoles INT,DimezijeGumPrednje VARCHAR(20),DimenzijeGumZadnje VARCHAR(20),VrstaZavor INT,Vleka INT,Vitlo INT,Opomba VARCHAR, PRIMARY KEY (ID))\\\");\\n\\t\\tPreparedStatement ps \\u003d con2.prepareStatement(\\\"INSERT INTO PromVozila (ID,Firma,Sifra,PGRID,Status,GUID,Naziv,RegSt,LastnikVA) VALUES (?,?,?,?,?,?,?,?,?)\\\");\\n\\t\\tResultSet rs \\u003d con1.createStatement().executeQuery(\\\"SELECT * FROM PromVozila\\\");\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tps.setInt(1, rs.getInt(\\\"ID\\\"));\\n\\t\\t\\tps.setInt(2, rs.getInt(\\\"Firma\\\"));\\n\\t\\t\\tps.setInt(3, rs.getInt(\\\"Sifra\\\"));\\n\\t\\t\\tps.setInt(4, rs.getInt(\\\"PGRID\\\"));\\n\\t\\t\\tps.setInt(5, rs.getInt(\\\"Status\\\"));\\n\\t\\t\\tps.setString(6, rs.getString(\\\"GUID\\\"));\\n\\t\\t\\tps.setString(7, rs.getString(\\\"Naziv\\\"));\\n\\t\\t\\tps.setString(8, rs.getString(\\\"RegSt\\\"));\\n\\t\\t\\tps.setString(9, rs.getString(\\\"LastnikVA\\\"));\\n\\t\\t\\tps.addBatch();\\n\\t\\t\\ti++;\\n\\t\\t}\\n\\t\\tps.executeBatch();\\n\\t\\tcon2.commit();\\n\\t\\tSystem.out.println(String.format(\\\"%-26s -\\u003e %7d\\\", \\\"PromVozila\\\", i));\\n\\t}\"}","338":"{\"expressionStart\":{\"UNKNOWN.executeUpdate()\":107,\"String:Sifra\":665,\"PreparedStatement.setInt()\":571,\"String\":144,\"Connection.createStatement()\":186,\"UNKNOWN.executeQuery()\":478,\"PreparedStatement.addBatch()\":766,\"ResultSet.next()\":555,\"int:5\":736,\"int:4\":692,\"int:3\":652,\"PreparedStatement.executeBatch()\":795,\"Connection.commit()\":816,\"int:2\":615,\"int:1\":581,\"int:0\":102,\"ResultSet.getInt()\":584,\"PreparedStatement.setString()\":723,\"String.format()\":852,\"ResultSet.getString()\":739,\"String:ID\":594,\"Connection.prepareStatement()\":390,\"String:%-26s -\\u003e %7d\":866,\"\\u003ca\\u003e\":784,\"UNKNOWN.println()\":833},\"expressionEnd\":{\"UNKNOWN.executeUpdate()\":182,\"String:Sifra\":672,\"PreparedStatement.setInt()\":600,\"String\":181,\"Connection.createStatement()\":208,\"UNKNOWN.executeQuery()\":544,\"PreparedStatement.addBatch()\":779,\"ResultSet.next()\":564,\"int:5\":737,\"int:4\":693,\"int:3\":653,\"PreparedStatement.executeBatch()\":812,\"Connection.commit()\":829,\"int:2\":616,\"int:1\":582,\"int:0\":103,\"ResultSet.getInt()\":599,\"PreparedStatement.setString()\":761,\"String.format()\":901,\"ResultSet.getString()\":760,\"String:ID\":598,\"Connection.prepareStatement()\":459,\"String:%-26s -\\u003e %7d\":880,\"\\u003ca\\u003e\":787,\"UNKNOWN.println()\":902},\"rawCode\":\"private static void doPTDneviVoznje(Connection con1, Connection con2) throws SQLException {\\n\\t\\tint i \\u003d 0;\\n\\t\\tcon2.createStatement().executeUpdate(\\\"drop table if exists PTDneviVoznje;\\\");\\n\\t\\tcon2.createStatement().executeUpdate(\\\"CREATE TABLE PTDneviVoznje(ID INT NOT NULL,PGrid INT NOT NULL,Sifra int not Null, VoziOb varchar(10), Naziv VARCHAR(80),PRIMARY KEY (ID))\\\");\\n\\t\\tPreparedStatement ps \\u003d con2.prepareStatement(\\\"INSERT INTO PTDneviVoznje VALUES (?,?,?,?,?)\\\");\\n\\t\\tResultSet rs \\u003d con1.createStatement().executeQuery(\\\"SELECT * FROM PTDneviVoznje\\\");\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tps.setInt(1, rs.getInt(\\\"ID\\\"));\\n\\t\\t\\tps.setInt(2, rs.getInt(\\\"Pgrid\\\"));\\n\\t\\t\\tps.setInt(3, rs.getInt(\\\"Sifra\\\"));\\n\\t\\t\\tps.setString(4, rs.getString(\\\"VoziOb\\\"));\\n\\t\\t\\tps.setString(5, rs.getString(\\\"Naziv\\\"));\\n\\t\\t\\tps.addBatch();\\n\\t\\t\\ti++;\\n\\t\\t}\\n\\t\\tps.executeBatch();\\n\\t\\tcon2.commit();\\n\\t\\tSystem.out.println(String.format(\\\"%-26s -\\u003e %7d\\\", \\\"PTDneviVoznje\\\", i));\\n\\t}\"}","339":"{\"expressionStart\":{\"UNKNOWN.executeUpdate()\":187,\"String:Sifra\":1181,\"PreparedStatement.setInt()\":2364,\"String\":1262,\"Connection.createStatement()\":2604,\"UNKNOWN.executeQuery()\":987,\"PreparedStatement.addBatch()\":2410,\"ResultSet.next()\":1065,\"int:6\":1291,\"int:5\":1249,\"int:4\":1208,\"int:3\":1165,\"int:9\":1420,\"int:8\":1380,\"int:7\":1341,\"ResultSet.close()\":2805,\"PreparedStatement.executeBatch()\":2439,\"int:20\":1917,\"Connection.commit()\":2714,\"PreparedStatement.setDouble()\":1806,\"int:2\":1125,\"String:Firma\":1138,\"int:1\":1091,\"ResultSet.getDouble()\":1823,\"int:0\":103,\"ResultSet.getInt()\":1252,\"PreparedStatement.setString()\":1195,\"int:16\":1726,\"int:17\":1770,\"String.format()\":2750,\"int:18\":1819,\"ResultSet.getString()\":1211,\"UNKNOWN.execute()\":2604,\"String:ID\":1104,\"int\":1868,\"Connection.prepareStatement()\":848,\"String:%-26s -\\u003e %7d\":2764,\"\\u003ca\\u003e\":2428,\"int:10\":1462,\"int:11\":1502,\"int:12\":1542,\"int:13\":1592,\"UNKNOWN.println()\":2731,\"PreparedStatement.close()\":2819,\"int:14\":1631,\"int:15\":1675},\"expressionEnd\":{\"UNKNOWN.executeUpdate()\":821,\"String:Sifra\":1188,\"PreparedStatement.setInt()\":2405,\"String\":1274,\"Connection.createStatement()\":2626,\"UNKNOWN.executeQuery()\":1054,\"PreparedStatement.addBatch()\":2423,\"ResultSet.next()\":1074,\"int:6\":1292,\"int:5\":1250,\"int:4\":1209,\"int:3\":1166,\"int:9\":1421,\"int:8\":1381,\"int:7\":1342,\"ResultSet.close()\":2815,\"PreparedStatement.executeBatch()\":2456,\"int:20\":1919,\"Connection.commit()\":2727,\"PreparedStatement.setDouble()\":1850,\"int:2\":1126,\"String:Firma\":1145,\"int:1\":1092,\"ResultSet.getDouble()\":1849,\"int:0\":104,\"ResultSet.getInt()\":1275,\"PreparedStatement.setString()\":1234,\"int:16\":1728,\"int:17\":1772,\"String.format()\":2800,\"int:18\":1821,\"ResultSet.getString()\":1233,\"UNKNOWN.execute()\":2710,\"String:ID\":1108,\"int\":1870,\"Connection.prepareStatement()\":968,\"String:%-26s -\\u003e %7d\":2778,\"\\u003ca\\u003e\":2431,\"int:10\":1464,\"int:11\":1504,\"int:12\":1544,\"int:13\":1594,\"UNKNOWN.println()\":2801,\"PreparedStatement.close()\":2829,\"int:14\":1633,\"int:15\":1677},\"rawCode\":\"private static void doPTKTVozneKarte(Connection con1, Connection con2) throws SQLException {\\n\\t\\tint i \\u003d 0;\\n\\t\\tcon2.createStatement().executeUpdate(\\\"drop table if exists PTKTVozneKarte\\\");\\n\\t\\tcon2.createStatement().executeUpdate(\\\"CREATE TABLE PTKTVozneKarte(ID INT NOT NULL , Firma INT NOT NULL,Sifra VARCHAR(10) NOT NULL,Oznaka VARCHAR(16) ,TipKarteID INT NOT NULL,TarifniRazredID INT,Opis VARCHAR(50) ,StVoznji INT,SmerVoznje INT,OdDanaM INT,DoDanaM INT,VeljaDniOdProdaje INT,Status INT,PrevoznikID INT,NacinDolocanjaCene INT,KMPogoja INT,FiksnaCena FLOAT(53),FaktorCene FLOAT(53),PopustProcent FLOAT(53),SifraValute INT,RoundN FLOAT(53),MobilnaProdaja INT,InternetProdaja INT,DOSID INT,CenaRezervacije FLOAT(53),KmRezervacije INT,KratkiOpis VARCHAR(20), ZamjenskaKarta int, ZBVPID int, PrelaznaKarta int,PRIMARY KEY (ID))\\\");\\n\\t\\tPreparedStatement ps \\u003d con2.prepareStatement(\\\"INSERT INTO PTKTVozneKarte VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\\\");\\n\\t\\tResultSet rs \\u003d con1.createStatement().executeQuery(\\\"SELECT * FROM PTKTVozneKarte\\\");\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tps.setInt(1, rs.getInt(\\\"ID\\\"));\\n\\t\\t\\tps.setInt(2, rs.getInt(\\\"Firma\\\"));\\n\\t\\t\\tps.setString(3, rs.getString(\\\"Sifra\\\"));\\n\\t\\t\\tps.setString(4, rs.getString(\\\"Oznaka\\\"));\\n\\t\\t\\tps.setInt(5, rs.getInt(\\\"TipKarteID\\\"));\\n\\t\\t\\tps.setInt(6, rs.getInt(\\\"TarifniRazredID\\\"));\\n\\t\\t\\tps.setString(7, rs.getString(\\\"Opis\\\"));\\n\\t\\t\\tps.setInt(8, rs.getInt(\\\"StVoznji\\\"));\\n\\t\\t\\tps.setInt(9, rs.getInt(\\\"SmerVoznje\\\"));\\n\\t\\t\\tps.setInt(10, rs.getInt(\\\"OdDanaM\\\"));\\n\\t\\t\\tps.setInt(11, rs.getInt(\\\"DoDanaM\\\"));\\n\\t\\t\\tps.setInt(12, rs.getInt(\\\"VeljaDniOdProdaje\\\"));\\n\\t\\t\\tps.setInt(13, rs.getInt(\\\"Status\\\"));\\n\\t\\t\\tps.setInt(14, rs.getInt(\\\"PrevoznikID\\\"));\\n\\t\\t\\tps.setInt(15, rs.getInt(\\\"NacinDolocanjaCene\\\"));\\n\\t\\t\\tps.setInt(16, rs.getInt(\\\"KMPogoja\\\"));\\n\\t\\t\\tps.setDouble(17, rs.getDouble(\\\"FiksnaCena\\\"));\\n\\t\\t\\tps.setDouble(18, rs.getDouble(\\\"FaktorCene\\\"));\\n\\t\\t\\tps.setDouble(19, rs.getDouble(\\\"PopustProcent\\\"));\\n\\t\\t\\tps.setInt(20, rs.getInt(\\\"SifraValute\\\"));\\n\\t\\t\\tps.setDouble(21, rs.getDouble(\\\"RoundN\\\"));\\n\\t\\t\\tps.setInt(22, rs.getInt(\\\"MobilnaProdaja\\\"));\\n\\t\\t\\tps.setInt(23, rs.getInt(\\\"InternetProdaja\\\"));\\n\\t\\t\\tps.setInt(24, rs.getInt(\\\"DOSID\\\"));\\n\\t\\t\\tps.setDouble(25, rs.getDouble(\\\"CenaRezervacije\\\"));\\n\\t\\t\\tps.setInt(26, rs.getInt(\\\"KmRezervacije\\\"));\\n\\t\\t\\tps.setString(27, rs.getString(\\\"KratkiOpis\\\"));\\n\\t\\t\\tps.setInt(28, rs.getInt(\\\"ZamjenskaKarta\\\"));\\n\\t\\t\\tps.setInt(29, rs.getInt(\\\"ZBVPID\\\"));\\n\\t\\t\\tps.setInt(30, rs.getInt(\\\"PrelaznaKarta\\\"));\\n\\t\\t\\tps.addBatch();\\n\\t\\t\\ti++;\\n\\t\\t}\\n\\t\\tps.executeBatch();\\n\\t\\t// con2.createStatement().execute(\\\"insert into PTKTVozneKarte (ID,Firma,Sifra,TipKarteID,kratkiOpis) VALUES (99,5,99,1,\\u0027ZAMJENSKA KARTA\\u0027);\\\");\\n\\t\\tcon2.createStatement().execute(\\\"UPDATE PTKTVozneKarte SET kratkiOpis \\u003d \\u0027Dnevna\\u0027 WHERE kratkiOpis IS NULL\\\");\\n\\t\\tcon2.commit();\\n\\t\\tSystem.out.println(String.format(\\\"%-26s -\\u003e %7d\\\", \\\"PTKTVozneKarte\\\", i));\\n\\t\\trs.close();\\n\\t\\tps.close();\\n\\t}\"}","340":"{\"expressionStart\":{\"UNKNOWN.executeUpdate()\":184,\"String:Sifra\":638,\"PreparedStatement.setInt()\":615,\"String\":488,\"Connection.createStatement()\":452,\"UNKNOWN.executeQuery()\":452,\"PreparedStatement.addBatch()\":695,\"ResultSet.next()\":528,\"int:4\":665,\"int:3\":625,\"PreparedStatement.executeBatch()\":724,\"Connection.commit()\":745,\"int:2\":588,\"int:1\":554,\"String:Firma\":601,\"int:0\":101,\"ResultSet.getInt()\":628,\"PreparedStatement.setString()\":652,\"String.format()\":781,\"ResultSet.getString()\":668,\"String:ID\":567,\"Connection.prepareStatement()\":367,\"String:%-26s -\\u003e %7d\":795,\"\\u003ca\\u003e\":713,\"UNKNOWN.println()\":762},\"expressionEnd\":{\"UNKNOWN.executeUpdate()\":340,\"String:Sifra\":645,\"PreparedStatement.setInt()\":647,\"String\":516,\"Connection.createStatement()\":474,\"UNKNOWN.executeQuery()\":517,\"PreparedStatement.addBatch()\":708,\"ResultSet.next()\":537,\"int:4\":666,\"int:3\":626,\"PreparedStatement.executeBatch()\":741,\"Connection.commit()\":758,\"int:2\":589,\"int:1\":555,\"String:Firma\":608,\"int:0\":102,\"ResultSet.getInt()\":646,\"PreparedStatement.setString()\":690,\"String.format()\":829,\"ResultSet.getString()\":689,\"String:ID\":571,\"Connection.prepareStatement()\":433,\"String:%-26s -\\u003e %7d\":809,\"\\u003ca\\u003e\":716,\"UNKNOWN.println()\":830},\"rawCode\":\"private static void doPTPrevozniki(Connection con1, Connection con2) throws SQLException {\\n\\t\\tint i \\u003d 0;\\n\\t\\tcon2.createStatement().executeUpdate(\\\"drop table if exists PTPrevozniki;\\\");\\n\\t\\tcon2.createStatement().executeUpdate(\\\"CREATE TABLE PTPrevozniki(ID INT NOT NULL,Firma INT NOT NULL,Sifra int not Null, Naziv VARCHAR(40),PRIMARY KEY (ID))\\\");\\n\\t\\tPreparedStatement ps \\u003d con2.prepareStatement(\\\"INSERT INTO PTPrevozniki VALUES (?,?,?,?)\\\");\\n\\t\\tResultSet rs \\u003d con1.createStatement().executeQuery(\\\"SELECT * FROM PTPrevozniki\\\");\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tps.setInt(1, rs.getInt(\\\"ID\\\"));\\n\\t\\t\\tps.setInt(2, rs.getInt(\\\"Firma\\\"));\\n\\t\\t\\tps.setInt(3, rs.getInt(\\\"Sifra\\\"));\\n\\t\\t\\tps.setString(4, rs.getString(\\\"Naziv\\\"));\\n\\t\\t\\tps.addBatch();\\n\\t\\t\\ti++;\\n\\t\\t}\\n\\t\\tps.executeBatch();\\n\\t\\tcon2.commit();\\n\\t\\tSystem.out.println(String.format(\\\"%-26s -\\u003e %7d\\\", \\\"PTPrevozniki\\\", i));\\n\\t}\"}","341":"{\"expressionStart\":{\"UNKNOWN.executeUpdate()\":182,\"String:Sifra\":1082,\"PreparedStatement.setInt()\":1786,\"String\":1854,\"UNKNOWN.executeQuery()\":814,\"Connection.createStatement()\":814,\"PreparedStatement.addBatch()\":1946,\"ResultSet.next()\":966,\"int:6\":1212,\"int:5\":1159,\"int:4\":1109,\"int:3\":1066,\"int:9\":1348,\"int:8\":1305,\"int:7\":1262,\"PreparedStatement.executeBatch()\":1975,\"ResultSet.close()\":2084,\"int:20\":1840,\"Connection.commit()\":1996,\"int:2\":1026,\"int:1\":992,\"String:Firma\":1039,\"int:0\":100,\"ResultSet.getInt()\":1800,\"PreparedStatement.setString()\":1380,\"int:16\":1661,\"int:17\":1706,\"int:18\":1752,\"String.format()\":2032,\"ResultSet.getString()\":1397,\"String:ID\":1005,\"int\":1796,\"Connection.prepareStatement()\":694,\"String:%-26s -\\u003e %7d\":2046,\"\\u003ca\\u003e\":1964,\"int:10\":1393,\"int:11\":1436,\"int:12\":1482,\"int:13\":1522,\"int:14\":1572,\"UNKNOWN.println()\":2013,\"PreparedStatement.close()\":2098,\"int:15\":1616},\"expressionEnd\":{\"UNKNOWN.executeUpdate()\":667,\"String:Sifra\":1089,\"PreparedStatement.setInt()\":1825,\"String\":1860,\"UNKNOWN.executeQuery()\":919,\"Connection.createStatement()\":836,\"PreparedStatement.addBatch()\":1959,\"ResultSet.next()\":975,\"int:6\":1213,\"int:5\":1160,\"int:4\":1110,\"int:3\":1067,\"int:9\":1349,\"int:8\":1306,\"int:7\":1263,\"PreparedStatement.executeBatch()\":1992,\"ResultSet.close()\":2094,\"int:20\":1842,\"Connection.commit()\":2009,\"int:2\":1027,\"int:1\":993,\"String:Firma\":1046,\"int:0\":101,\"ResultSet.getInt()\":1824,\"PreparedStatement.setString()\":1421,\"int:16\":1663,\"int:17\":1708,\"int:18\":1754,\"String.format()\":2079,\"ResultSet.getString()\":1420,\"String:ID\":1009,\"int\":1798,\"Connection.prepareStatement()\":795,\"String:%-26s -\\u003e %7d\":2060,\"\\u003ca\\u003e\":1967,\"int:10\":1395,\"int:11\":1438,\"int:12\":1484,\"int:13\":1524,\"int:14\":1574,\"UNKNOWN.println()\":2080,\"PreparedStatement.close()\":2108,\"int:15\":1618},\"rawCode\":\"private static void doPTVozniRedi(Connection con1, Connection con2) throws SQLException {\\n\\t\\tint i \\u003d 0;\\n\\t\\tcon2.createStatement().executeUpdate(\\\"drop table if exists PTVozniRedi;\\\");\\n\\t\\tcon2.createStatement().executeUpdate(\\\"CREATE TABLE PTVozniRedi(ID INT NOT NULL,Firma INT NOT NULL,Sifra VARCHAR(12)  NOT NULL,OznakaLinije VARCHAR(40) ,PrivitakDozvole VARCHAR(20) ,Registracija VARCHAR(20) ,Opis1 VARCHAR(80)  ,Opis2 VARCHAR(80)  ,VeljaOd DATETIME,VeljaDo DATETIME, SifraOznakeVR INT, VrstaVR INT,KategorijaPrevoza INT,VrstaLinije INT,VrstaPrevoza INT,NacinPrevoza INT,VrstaPosadeID INT,PrevoznikID INT,Kooperacija INT,Pool INT,DOSVRID INT,Stat1 INT,PRIMARY KEY (ID))\\\");\\n\\t\\tPreparedStatement ps \\u003d con2.prepareStatement(\\\"INSERT INTO PTVozniRedi VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\\\");\\n\\t\\tResultSet rs \\u003d con1.createStatement().executeQuery(\\\"select * from PtVozniredi where VrstaVR\\u003d1 and veljaDo \\u003e\\u003d GETDATE()\\\"); // svi danasnji i buduci vozni redi\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tps.setInt(1, rs.getInt(\\\"ID\\\"));\\n\\t\\t\\tps.setInt(2, rs.getInt(\\\"Firma\\\"));\\n\\t\\t\\tps.setString(3, rs.getString(\\\"Sifra\\\"));\\n\\t\\t\\tps.setString(4, rs.getString(\\\"OznakaLinije\\\"));\\n\\t\\t\\tps.setString(5, rs.getString(\\\"PrivitakDozvole\\\"));\\n\\t\\t\\tps.setString(6, rs.getString(\\\"Registracija\\\"));\\n\\t\\t\\tps.setString(7, rs.getString(\\\"Opis1\\\"));\\n\\t\\t\\tps.setString(8, rs.getString(\\\"Opis2\\\"));\\n\\t\\t\\tps.setString(9, rs.getString(\\\"VeljaOD\\\"));\\n\\t\\t\\tps.setString(10, rs.getString(\\\"VeljaDo\\\"));\\n\\t\\t\\tps.setInt(11, rs.getInt(\\\"SifraOznakeVR\\\"));\\n\\t\\t\\tps.setInt(12, rs.getInt(\\\"VrstaVR\\\"));\\n\\t\\t\\tps.setInt(13, rs.getInt(\\\"KategorijaPrevoza\\\"));\\n\\t\\t\\tps.setInt(14, rs.getInt(\\\"VrstaLinije\\\"));\\n\\t\\t\\tps.setInt(15, rs.getInt(\\\"VrstaPrevoza\\\"));\\n\\t\\t\\tps.setInt(16, rs.getInt(\\\"NacinPrevoza\\\"));\\n\\t\\t\\tps.setInt(17, rs.getInt(\\\"VrstaPosadeID\\\"));\\n\\t\\t\\tps.setInt(18, rs.getInt(\\\"PrevoznikID\\\"));\\n\\t\\t\\tps.setInt(19, rs.getInt(\\\"Kooperacija\\\"));\\n\\t\\t\\tps.setInt(20, rs.getInt(\\\"Pool\\\"));\\n\\t\\t\\tps.setInt(21, rs.getInt(\\\"DOSVRID\\\"));\\n\\t\\t\\tps.setInt(22, rs.getInt(\\\"Status\\\"));\\n\\t\\t\\tps.addBatch();\\n\\t\\t\\ti++;\\n\\t\\t}\\n\\t\\tps.executeBatch();\\n\\t\\tcon2.commit();\\n\\t\\tSystem.out.println(String.format(\\\"%-26s -\\u003e %7d\\\", \\\"PTVozniRedi\\\", i));\\n\\t\\trs.close();\\n\\t\\tps.close();\\n\\t}\"}","342":"{\"expressionStart\":{\"UNKNOWN.executeUpdate()\":178,\"String:Sifra\":731,\"PreparedStatement.setInt()\":668,\"String\":215,\"Connection.createStatement()\":368,\"UNKNOWN.executeQuery()\":579,\"PreparedStatement.addBatch()\":952,\"ResultSet.next()\":652,\"int:6\":880,\"int:5\":842,\"int:4\":798,\"int:3\":758,\"PreparedStatement.executeBatch()\":981,\"ResultSet.close()\":1088,\"int:7\":920,\"Connection.commit()\":1002,\"int:2\":715,\"int:1\":678,\"int:0\":98,\"ResultSet.getInt()\":681,\"PreparedStatement.setString()\":745,\"String.format()\":1038,\"ResultSet.getString()\":923,\"String:ID\":691,\"Connection.prepareStatement()\":491,\"String:%-26s -\\u003e %7d\":1052,\"\\u003ca\\u003e\":970,\"UNKNOWN.println()\":1019,\"PreparedStatement.close()\":1102},\"expressionEnd\":{\"UNKNOWN.executeUpdate()\":364,\"String:Sifra\":738,\"PreparedStatement.setInt()\":697,\"String\":363,\"Connection.createStatement()\":390,\"UNKNOWN.executeQuery()\":641,\"PreparedStatement.addBatch()\":965,\"ResultSet.next()\":661,\"int:6\":881,\"int:5\":843,\"int:4\":799,\"int:3\":759,\"PreparedStatement.executeBatch()\":998,\"ResultSet.close()\":1098,\"int:7\":921,\"Connection.commit()\":1015,\"int:2\":716,\"int:1\":679,\"int:0\":99,\"ResultSet.getInt()\":696,\"PreparedStatement.setString()\":783,\"String.format()\":1083,\"ResultSet.getString()\":946,\"String:ID\":695,\"Connection.prepareStatement()\":560,\"String:%-26s -\\u003e %7d\":1066,\"\\u003ca\\u003e\":973,\"UNKNOWN.println()\":1084,\"PreparedStatement.close()\":1112},\"rawCode\":\"private static void doPTPostaje(Connection con1, Connection con2) throws SQLException {\\n\\t\\tint i \\u003d 0;\\n\\t\\tcon2.createStatement().executeUpdate(\\\"drop table if exists PTPostaje;\\\");\\n\\t\\tcon2.createStatement().executeUpdate(\\\"CREATE TABLE PTPostaje(ID INT NOT NULL,Sifra VARCHAR(12),Naziv VARCHAR(50),VrstaPostaje INT,Drzava INT,PGRID INT,Prodaja CHAR(1),PRIMARY KEY (ID))\\\");\\n\\t\\tcon2.createStatement().executeUpdate(\\\"CREATE INDEX [IXPostajeVRNaziv] ON [PTPostaje] ([Naziv])\\\");\\n\\t\\tPreparedStatement ps \\u003d con2.prepareStatement(\\\"INSERT INTO PTPostaje VALUES (?,?,?,?,?,?,?)\\\");\\n\\t\\tResultSet rs \\u003d con1.createStatement().executeQuery(\\\"SELECT * FROM PTPostaje\\\");\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tps.setInt(1, rs.getInt(\\\"ID\\\"));\\n\\t\\t\\tps.setString(2, rs.getString(\\\"Sifra\\\"));\\n\\t\\t\\tps.setString(3, rs.getString(\\\"Naziv\\\"));\\n\\t\\t\\tps.setInt(4, rs.getInt(\\\"VrstaPostaje\\\"));\\n\\t\\t\\tps.setInt(5, rs.getInt(\\\"Drzava\\\"));\\n\\t\\t\\tps.setInt(6, rs.getInt(\\\"PGRID\\\"));\\n\\t\\t\\tps.setString(7, rs.getString(\\\"Prodaja\\\"));\\n\\t\\t\\tps.addBatch();\\n\\t\\t\\ti++;\\n\\t\\t}\\n\\t\\tps.executeBatch();\\n\\t\\tcon2.commit();\\n\\t\\tSystem.out.println(String.format(\\\"%-26s -\\u003e %7d\\\", \\\"PTPostaje\\\", i));\\n\\t\\trs.close();\\n\\t\\tps.close();\\n\\t}\"}","343":"{\"expressionStart\":{\"PreparedStatement.setString()\":910,\"String.format()\":1130,\"UNKNOWN.executeUpdate()\":445,\"ResultSet.getString()\":926,\"PreparedStatement.setInt()\":870,\"String\":714,\"UNKNOWN.executeQuery()\":678,\"Connection.createStatement()\":678,\"String:ID\":859,\"PreparedStatement.addBatch()\":1044,\"ResultSet.next()\":820,\"int:5\":1015,\"int:4\":969,\"int:3\":923,\"Connection.prepareStatement()\":584,\"PreparedStatement.executeBatch()\":1073,\"String:%-26s -\\u003e %7d\":1144,\"\\u003ca\\u003e\":1062,\"Connection.commit()\":1094,\"int:2\":880,\"int:1\":846,\"UNKNOWN.println()\":1111,\"int:0\":108,\"ResultSet.getInt()\":883},\"expressionEnd\":{\"PreparedStatement.setString()\":951,\"String.format()\":1185,\"UNKNOWN.executeUpdate()\":557,\"ResultSet.getString()\":950,\"PreparedStatement.setInt()\":905,\"String\":777,\"UNKNOWN.executeQuery()\":778,\"Connection.createStatement()\":700,\"String:ID\":863,\"PreparedStatement.addBatch()\":1057,\"ResultSet.next()\":829,\"int:5\":1016,\"int:4\":970,\"int:3\":924,\"Connection.prepareStatement()\":659,\"PreparedStatement.executeBatch()\":1090,\"String:%-26s -\\u003e %7d\":1158,\"\\u003ca\\u003e\":1065,\"Connection.commit()\":1107,\"int:2\":881,\"int:1\":847,\"UNKNOWN.println()\":1186,\"int:0\":109,\"ResultSet.getInt()\":904},\"rawCode\":\"private static void doPTStupciVRMirovanja(Connection con1, Connection con2) throws SQLException {\\n\\t\\tint i \\u003d 0;\\n\\t\\tcon2.createStatement().executeUpdate(\\\"drop table if exists PTStupciVRMirovanja;\\\");\\n\\t\\tcon2.createStatement().executeUpdate(\\\"CREATE TABLE PTStupciVRMirovanja(ID INT NOT NULL,StupacID INT NOT NULL,OdDatuma DATETIME,DoDatuma DATETIME,Opis VARCHAR(120),PRIMARY KEY (ID)\\\" +\\n\\t\\t\\t\\t\\\" ,FOREIGN KEY (StupacID) REFERENCES PTStupciVR (ID) )\\\");\\n\\t\\tcon2.createStatement().executeUpdate(\\\"CREATE INDEX [IXMirovanjaStupacID] ON [PTStupciVRMirovanja] ([StupacID])\\\");\\n\\t\\tPreparedStatement ps \\u003d con2.prepareStatement(\\\"INSERT INTO PTStupciVRMirovanja VALUES (?,?,?,?,?)\\\");\\n\\t\\tResultSet rs \\u003d con1.createStatement().executeQuery(\\\"SELECT * FROM PTStupciVRMirovanja WHERE DoDatuma \\u003e\\u003d GETDATE()\\\"); // svi dansanji i buduci su ok\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tps.setInt(1, rs.getInt(\\\"ID\\\"));\\n\\t\\t\\tps.setInt(2, rs.getInt(\\\"StupacID\\\"));\\n\\t\\t\\tps.setString(3, rs.getString(\\\"OdDatuma\\\"));\\n\\t\\t\\tps.setString(4, rs.getString(\\\"DoDatuma\\\"));\\n\\t\\t\\tps.setString(5, rs.getString(\\\"Opis\\\"));\\n\\t\\t\\tps.addBatch();\\n\\t\\t\\ti++;\\n\\t\\t}\\n\\t\\tps.executeBatch();\\n\\t\\tcon2.commit();\\n\\t\\tSystem.out.println(String.format(\\\"%-26s -\\u003e %7d\\\", \\\"PTStupciVRMirovanja\\\", i));\\n\\t}\"}","344":"{\"expressionStart\":{\"UNKNOWN.executeUpdate()\":190,\"String:Sifra\":741,\"PreparedStatement.setInt()\":718,\"String\":940,\"UNKNOWN.executeQuery()\":536,\"Connection.createStatement()\":536,\"PreparedStatement.addBatch()\":992,\"ResultSet.next()\":631,\"int:6\":852,\"int:5\":812,\"int:4\":768,\"int:3\":728,\"int:9\":961,\"int:8\":927,\"int:7\":891,\"PreparedStatement.executeBatch()\":1021,\"Connection.commit()\":1042,\"int:2\":691,\"int:1\":657,\"String:Firma\":704,\"int:0\":104,\"ResultSet.getInt()\":930,\"PreparedStatement.setString()\":799,\"String.format()\":1078,\"ResultSet.getString()\":815,\"String:ID\":670,\"Connection.prepareStatement()\":438,\"String:%-26s -\\u003e %7d\":1092,\"\\u003ca\\u003e\":1010,\"UNKNOWN.println()\":1059},\"expressionEnd\":{\"UNKNOWN.executeUpdate()\":411,\"String:Sifra\":748,\"PreparedStatement.setInt()\":750,\"String\":944,\"UNKNOWN.executeQuery()\":620,\"Connection.createStatement()\":558,\"PreparedStatement.addBatch()\":1005,\"ResultSet.next()\":640,\"int:6\":853,\"int:5\":813,\"int:4\":769,\"int:3\":729,\"int:9\":962,\"int:8\":928,\"int:7\":892,\"PreparedStatement.executeBatch()\":1038,\"Connection.commit()\":1055,\"int:2\":692,\"int:1\":658,\"String:Firma\":711,\"int:0\":105,\"ResultSet.getInt()\":945,\"PreparedStatement.setString()\":837,\"String.format()\":1129,\"ResultSet.getString()\":836,\"String:ID\":674,\"Connection.prepareStatement()\":517,\"String:%-26s -\\u003e %7d\":1106,\"\\u003ca\\u003e\":1013,\"UNKNOWN.println()\":1130},\"rawCode\":\"private static void doPTProdajnaMesta(Connection con1, Connection con2) throws SQLException {\\n\\t\\tint i \\u003d 0;\\n\\t\\tcon2.createStatement().executeUpdate(\\\"drop table if exists PTProdajnaMesta;\\\");\\n\\t\\tcon2.createStatement().executeUpdate(\\\"CREATE TABLE PTProdajnaMesta(ID INT NOT NULL ,Firma INT NOT NULL,Sifra INT NOT NULL, Oznaka VARCHAR(10),Naziv VARCHAR(50),Partner INT,Strm INT,OE INT,PostajaID INT,PRIMARY KEY (ID))\\\");\\n\\t\\tPreparedStatement ps \\u003d con2.prepareStatement(\\\"INSERT INTO PTProdajnaMesta VALUES (?,?,?,?,?,?,?,?,?)\\\");\\n\\t\\tResultSet rs \\u003d con1.createStatement().executeQuery(\\\"SELECT * FROM PTProdajnaMesta WHERE Firma \\u003d 5\\\");\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tps.setInt(1, rs.getInt(\\\"ID\\\"));\\n\\t\\t\\tps.setInt(2, rs.getInt(\\\"Firma\\\"));\\n\\t\\t\\tps.setInt(3, rs.getInt(\\\"Sifra\\\"));\\n\\t\\t\\tps.setString(4, rs.getString(\\\"Oznaka\\\"));\\n\\t\\t\\tps.setString(5, rs.getString(\\\"Naziv\\\"));\\n\\t\\t\\tps.setInt(6, rs.getInt(\\\"Partner\\\"));\\n\\t\\t\\tps.setInt(7, rs.getInt(\\\"Strm\\\"));\\n\\t\\t\\tps.setInt(8, rs.getInt(\\\"OE\\\"));\\n\\t\\t\\tps.setInt(9, rs.getInt(\\\"PostajaID\\\"));\\n\\t\\t\\tps.addBatch();\\n\\t\\t\\ti++;\\n\\t\\t}\\n\\t\\tps.executeBatch();\\n\\t\\tcon2.commit();\\n\\t\\tSystem.out.println(String.format(\\\"%-26s -\\u003e %7d\\\", \\\"PTProdajnaMesta\\\", i));\\n\\t}\"}","345":"{\"expressionStart\":{\"UNKNOWN.executeUpdate()\":1137,\"PreparedStatement.setInt()\":1843,\"Calendar.getTime()\":288,\"String\":2098,\"PreparedStatement.addBatch()\":2396,\"int:6\":1724,\"int:5\":1682,\"int:4\":1644,\"int:3\":1597,\"ResultSet.getShort()\":2358,\"int:9\":1853,\"int:8\":1809,\"int:7\":269,\"PreparedStatement.executeBatch()\":2425,\"int:2\":1560,\"int:1\":1526,\"int:0\":101,\"ResultSet.getInt()\":1856,\"PreparedStatement.setString()\":1631,\"ResultSet.getString()\":2085,\"String:ID\":1539,\"PreparedStatement.setShort()\":2342,\"Connection.prepareStatement()\":1275,\"String:%-26s -\\u003e %7d\":2496,\"\\u003ca\\u003e\":2414,\"UNKNOWN.println()\":2463,\"Connection.createStatement()\":1137,\"UNKNOWN.executeQuery()\":1392,\"ResultSet.next()\":1500,\"Calendar.add()\":244,\"int:20\":2354,\"PreparedStatement.setDouble()\":2020,\"Connection.commit()\":2446,\"String:Firma\":1573,\"ResultSet.getDouble()\":2037,\"int:16\":2161,\"int:17\":2202,\"int:18\":2252,\"String.format()\":2482,\"Calendar.getInstance()\":184,\"int\":2303,\"BaseMaker.PER_String()\":1471,\"String:)\":1015,\"int:10\":1898,\"int:11\":1940,\"int:12\":1984,\"int:13\":2033,\"int:14\":2081,\"int:15\":2122},\"expressionEnd\":{\"UNKNOWN.executeUpdate()\":1247,\"PreparedStatement.setInt()\":1883,\"Calendar.getTime()\":301,\"String\":2105,\"PreparedStatement.addBatch()\":2409,\"int:6\":1725,\"int:5\":1683,\"int:4\":1645,\"int:3\":1598,\"ResultSet.getShort()\":2390,\"int:9\":1854,\"int:8\":1810,\"int:7\":270,\"PreparedStatement.executeBatch()\":2442,\"int:2\":1561,\"int:1\":1527,\"int:0\":102,\"ResultSet.getInt()\":1882,\"PreparedStatement.setString()\":1667,\"ResultSet.getString()\":2106,\"String:ID\":1543,\"PreparedStatement.setShort()\":2391,\"Connection.prepareStatement()\":1373,\"String:%-26s -\\u003e %7d\":2510,\"\\u003ca\\u003e\":2417,\"UNKNOWN.println()\":2531,\"Connection.createStatement()\":1159,\"UNKNOWN.executeQuery()\":1489,\"ResultSet.next()\":1509,\"Calendar.add()\":271,\"int:20\":2356,\"PreparedStatement.setDouble()\":2063,\"Connection.commit()\":2459,\"String:Firma\":1580,\"ResultSet.getDouble()\":2062,\"int:16\":2163,\"int:17\":2204,\"int:18\":2254,\"String.format()\":2530,\"Calendar.getInstance()\":206,\"int\":2305,\"BaseMaker.PER_String()\":1488,\"String:)\":1018,\"int:10\":1900,\"int:11\":1942,\"int:12\":1986,\"int:13\":2035,\"int:14\":2083,\"int:15\":2124},\"rawCode\":\"private static void doPTMesProdaja(Connection con1, Connection con2) throws SQLException {\\n\\t\\tint i \\u003d 0;\\n\\n\\t\\t// **** sva prodaja za zadnja tri mjeseca bude unutra *****\\n\\t\\tCalendar cal \\u003d Calendar.getInstance();\\n\\t\\t// cal.add(Calendar.DATE, -30);\\n\\t\\tcal.add(Calendar.MONTH, -7);\\n\\t\\tDate Datum \\u003d cal.getTime();\\n\\n\\t\\tcon2.createStatement().executeUpdate(\\\"drop table if exists PTMesProdaja;\\\");\\n\\t\\tcon2.createStatement().executeUpdate(\\\"CREATE TABLE PTMesPRodaja(ID INT NOT NULL,Firma INT NOT NULL,SifraMarkice int not null\\\" + \\\",PER varchar(7) not null, MesOsebaID not null, PrevoznikID int, TipKarteID int, VoznaKartaID int\\\" + \\\",MesRelacijaID not null, DistancaM int, BrVoznji int, PcenaKarte FLOAT(53), ZaPlatiti FLOAT(53)\\\" + \\\",Datum DateTime, Storno int, Duplikat int, ProdajnoMestoID int\\\" + \\\",VeljaOdDanaMes Smallint, VeljaDoDanaMes smallint, VeljaDniOdProdaje smallint \\\" + \\\",PRIMARY KEY (ID)\\\" + \\\",FOREIGN KEY (MesOsebaID)    REFERENCES PTMesUporabniki (ID) \\\" + \\\",FOREIGN KEY (MesRelacijaID) REFERENCES PTMesRelacije (ID) \\\" + \\\")\\\");\\n\\t\\tcon2.createStatement().executeUpdate(\\\"CREATE INDEX [IXMesOsebaID] ON [PTMesProdaja] ([MesOsebaID],  [Firma])\\\");\\n\\t\\tcon2.createStatement().executeUpdate(\\\"CREATE INDEX [IXMesMarkica] ON [PTMesProdaja] ([SifraMarkice],[Firma])\\\");\\n\\n\\t\\tPreparedStatement ps \\u003d con2.prepareStatement(\\\"INSERT INTO PTMesProdaja VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\\\");\\n\\t\\tResultSet rs \\u003d con1.createStatement().executeQuery(\\\"SELECT * FROM PTMesProdaja where PER\\u003e\\u003d\\\" + PER_String(Datum));\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tps.setInt(1, rs.getInt(\\\"ID\\\"));\\n\\t\\t\\tps.setInt(2, rs.getInt(\\\"Firma\\\"));\\n\\t\\t\\tps.setInt(3, rs.getInt(\\\"SifraMarkice\\\"));\\n\\t\\t\\tps.setString(4, rs.getString(\\\"PER\\\"));\\n\\t\\t\\tps.setInt(5, rs.getInt(\\\"MesOsebaID\\\"));\\n\\t\\t\\tps.setInt(6, rs.getInt(\\\"PrevoznikID\\\"));\\n\\t\\t\\tps.setInt(7, rs.getInt(\\\"TipKarteID\\\"));\\n\\t\\t\\tps.setInt(8, rs.getInt(\\\"VoznaKartaID\\\"));\\n\\t\\t\\tps.setInt(9, rs.getInt(\\\"MesRelacijaID\\\"));\\n\\t\\t\\tps.setInt(10, rs.getInt(\\\"DistancaM\\\"));\\n\\t\\t\\tps.setInt(11, rs.getInt(\\\"BrVoznji\\\"));\\n\\t\\t\\tps.setDouble(12, rs.getDouble(\\\"PcenaKarte\\\"));\\n\\t\\t\\tps.setDouble(13, rs.getDouble(\\\"ZaPlatiti\\\"));\\n\\t\\t\\tps.setString(14, rs.getString(\\\"Datum\\\"));\\n\\t\\t\\tps.setInt(15, rs.getInt(\\\"Storno\\\"));\\n\\t\\t\\tps.setInt(16, rs.getInt(\\\"Duplikat\\\"));\\n\\t\\t\\tps.setInt(17, rs.getInt(\\\"ProdajnoMestoID\\\"));\\n\\t\\t\\tps.setShort(18, rs.getShort(\\\"VeljaOdDanaMes\\\"));\\n\\t\\t\\tps.setShort(19, rs.getShort(\\\"VeljaDoDanaMes\\\"));\\n\\t\\t\\tps.setShort(20, rs.getShort(\\\"VeljaDniOdProdaje\\\"));\\n\\t\\t\\tps.addBatch();\\n\\t\\t\\ti++;\\n\\t\\t}\\n\\t\\tps.executeBatch();\\n\\t\\tcon2.commit();\\n\\t\\tSystem.out.println(String.format(\\\"%-26s -\\u003e %7d\\\", \\\"PTMesProdaja\\\", i));\\n\\t}\"}","346":"{\"expressionStart\":{\"UNKNOWN.executeUpdate()\":180,\"String:Sifra\":1107,\"PreparedStatement.setInt()\":1047,\"String\":1646,\"Connection.createStatement()\":180,\"UNKNOWN.executeQuery()\":874,\"PreparedStatement.addBatch()\":1789,\"ResultSet.next()\":997,\"int:6\":1217,\"int:5\":1173,\"int:4\":1131,\"int:3\":1094,\"int:9\":1355,\"int:8\":1309,\"PreparedStatement.executeBatch()\":1818,\"int:7\":1262,\"Connection.commit()\":1839,\"int:2\":1057,\"int:1\":1023,\"String:Firma\":1070,\"int:0\":99,\"ResultSet.getInt()\":1060,\"PreparedStatement.setString()\":1616,\"int:16\":1672,\"int:17\":1719,\"int:18\":1760,\"String.format()\":1875,\"ResultSet.getString()\":1633,\"String:ID\":1036,\"Connection.prepareStatement()\":690,\"String:%-26s -\\u003e %7d\":1889,\"\\u003ca\\u003e\":1807,\"int:10\":1396,\"int:11\":1445,\"int:12\":1489,\"int:13\":1532,\"UNKNOWN.println()\":1856,\"int:14\":1583,\"int:15\":1629},\"expressionEnd\":{\"UNKNOWN.executeUpdate()\":663,\"String:Sifra\":1114,\"PreparedStatement.setInt()\":1079,\"String\":1655,\"Connection.createStatement()\":202,\"UNKNOWN.executeQuery()\":986,\"PreparedStatement.addBatch()\":1802,\"ResultSet.next()\":1006,\"int:6\":1218,\"int:5\":1174,\"int:4\":1132,\"int:3\":1095,\"int:9\":1356,\"int:8\":1310,\"PreparedStatement.executeBatch()\":1835,\"int:7\":1263,\"Connection.commit()\":1852,\"int:2\":1058,\"int:1\":1024,\"String:Firma\":1077,\"int:0\":100,\"ResultSet.getInt()\":1078,\"PreparedStatement.setString()\":1657,\"int:16\":1674,\"int:17\":1721,\"int:18\":1762,\"String.format()\":1921,\"ResultSet.getString()\":1656,\"String:ID\":1040,\"Connection.prepareStatement()\":782,\"String:%-26s -\\u003e %7d\":1903,\"\\u003ca\\u003e\":1810,\"int:10\":1398,\"int:11\":1447,\"int:12\":1491,\"int:13\":1534,\"UNKNOWN.println()\":1922,\"int:14\":1585,\"int:15\":1631},\"rawCode\":\"private static void doPTMesOsebe(Connection con1, Connection con2) throws SQLException {\\n\\t\\tint i \\u003d 0;\\n\\t\\tcon2.createStatement().executeUpdate(\\\"drop table if exists PTMesOsebe;\\\");\\n\\t\\tcon2.createStatement().executeUpdate(\\\"CREATE TABLE PTMesOsebe(ID INT NOT NULL,Firma INT NOT NULL, Sifra int not Null,\\\" + \\\"TipKarteID int,VoznaKartaID int,MesRelacijaID int,ProdajnoMestoID int,PrevoznikID int,\\\" + \\\"OIB varchar(20),ImePriimek VARCHAR(30),Ulica varchar(30),Kraj VARCHAR(30),\\\" + \\\"DatumRojstva datetime, VeljaOd datetime, VeljaDo DateTime, \\\" + \\\"StatusBlokiran int, GodSkola int, Razred int,\\\" + \\\"PRIMARY KEY (ID), FOREIGN KEY (MesRelacijaID) REFERENCES PTMesRelacije(ID))\\\");\\n\\t\\tPreparedStatement ps \\u003d con2.prepareStatement(\\\"INSERT INTO PTMesOsebe VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\\\");\\n\\n\\t\\t// svi vazeci zadnjih 3 mjeseci ili koji imaju neograniceno valjanost\\n\\t\\tResultSet rs \\u003d con1.createStatement().executeQuery(\\\"SELECT * FROM PTMesOsebe where VeljaDo \\u003e\\u003d GETDATE()-60 or VeljaDo is null\\\");\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tps.setInt(1, rs.getInt(\\\"ID\\\"));\\n\\t\\t\\tps.setInt(2, rs.getInt(\\\"Firma\\\"));\\n\\t\\t\\tps.setInt(3, rs.getInt(\\\"Sifra\\\"));\\n\\t\\t\\tps.setInt(4, rs.getInt(\\\"TipKarteID\\\"));\\n\\t\\t\\tps.setInt(5, rs.getInt(\\\"VoznaKartaID\\\"));\\n\\t\\t\\tps.setInt(6, rs.getInt(\\\"MesRelacijaID\\\"));\\n\\t\\t\\tps.setInt(7, rs.getInt(\\\"ProdajnoMestoID\\\"));\\n\\t\\t\\tps.setInt(8, rs.getInt(\\\"PrevoznikID\\\"));\\n\\t\\t\\tps.setString(9, rs.getString(\\\"OIB\\\"));\\n\\t\\t\\tps.setString(10, rs.getString(\\\"ImePriimek\\\"));\\n\\t\\t\\tps.setString(11, rs.getString(\\\"Ulica\\\"));\\n\\t\\t\\tps.setString(12, rs.getString(\\\"Kraj\\\"));\\n\\t\\t\\tps.setString(13, rs.getString(\\\"DatumRojstva\\\"));\\n\\t\\t\\tps.setString(14, rs.getString(\\\"VeljaOd\\\"));\\n\\t\\t\\tps.setString(15, rs.getString(\\\"VeljaDo\\\"));\\n\\t\\t\\tps.setInt(16, rs.getInt(\\\"StatusBlokiran\\\"));\\n\\t\\t\\tps.setInt(17, rs.getInt(\\\"GodSkola\\\"));\\n\\t\\t\\tps.setInt(18, rs.getInt(\\\"Razred\\\"));\\n\\t\\t\\tps.addBatch();\\n\\t\\t\\ti++;\\n\\t\\t}\\n\\t\\tps.executeBatch();\\n\\t\\tcon2.commit();\\n\\t\\tSystem.out.println(String.format(\\\"%-26s -\\u003e %7d\\\", \\\"PTMesOsebe\\\", i));\\n\\t}\"}","347":"{\"expressionStart\":{\"UNKNOWN.executeUpdate()\":431,\"PreparedStatement.setInt()\":875,\"String\":940,\"UNKNOWN.executeQuery()\":655,\"Connection.createStatement()\":655,\"PreparedStatement.addBatch()\":1084,\"ResultSet.next()\":825,\"int:6\":1054,\"int:5\":1014,\"int:4\":971,\"int:3\":927,\"ResultSet.close()\":1224,\"PreparedStatement.executeBatch()\":1113,\"Connection.commit()\":1134,\"int:2\":885,\"int:1\":851,\"int:0\":102,\"ResultSet.getInt()\":930,\"PreparedStatement.setString()\":1001,\"String.format()\":1170,\"ResultSet.getString()\":1017,\"String:ID\":864,\"Connection.prepareStatement()\":565,\"String:%-26s -\\u003e %7d\":1184,\"\\u003ca\\u003e\":1102,\"UNKNOWN.println()\":1151,\"PreparedStatement.close()\":1238},\"expressionEnd\":{\"UNKNOWN.executeUpdate()\":538,\"PreparedStatement.setInt()\":912,\"String\":951,\"UNKNOWN.executeQuery()\":811,\"Connection.createStatement()\":677,\"PreparedStatement.addBatch()\":1097,\"ResultSet.next()\":834,\"int:6\":1055,\"int:5\":1015,\"int:4\":972,\"int:3\":928,\"ResultSet.close()\":1234,\"PreparedStatement.executeBatch()\":1130,\"Connection.commit()\":1147,\"int:2\":886,\"int:1\":852,\"int:0\":103,\"ResultSet.getInt()\":952,\"PreparedStatement.setString()\":1039,\"String.format()\":1219,\"ResultSet.getString()\":1038,\"String:ID\":868,\"Connection.prepareStatement()\":636,\"String:%-26s -\\u003e %7d\":1198,\"\\u003ca\\u003e\":1105,\"UNKNOWN.println()\":1220,\"PreparedStatement.close()\":1248},\"rawCode\":\"private static void doPTVarijanteVR(Connection con1, Connection con2) throws SQLException {\\n\\t\\tint i \\u003d 0;\\n\\t\\tcon2.createStatement().executeUpdate(\\\"drop table if exists PTVarijanteVR;\\\");\\n\\t\\tcon2.createStatement().executeUpdate(\\\"CREATE TABLE PTVarijanteVR(ID INT NOT NULL,VozniRedID INT NOT NULL,Varijanta INT NOT NULL,Opis1 VARCHAR,Opis2 VARCHAR,DOSVarID INT,PRIMARY KEY (ID),FOREIGN KEY (VozniRedID) REFERENCES PTVozniRedi (ID))\\\");\\n\\t\\tcon2.createStatement().executeUpdate(\\\"CREATE INDEX [IXVarVRVozniRedID]  ON [PTVarijanteVR] ([VozniRedID])\\\");\\n\\t\\tPreparedStatement ps \\u003d con2.prepareStatement(\\\"INSERT INTO PTVarijanteVR VALUES (?,?,?,?,?,?)\\\");\\n\\t\\tResultSet rs \\u003d con1.createStatement().executeQuery(\\\"select * from PTVarijanteVR where VozniRedID IN (SELECT ID FROM PTVozniRedi WHERE VrstaVR\\u003d1 and veljaDo \\u003e\\u003d GETDATE())\\\"); //\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tps.setInt(1, rs.getInt(\\\"ID\\\"));\\n\\t\\t\\tps.setInt(2, rs.getInt(\\\"VozniRedID\\\"));\\n\\t\\t\\tps.setInt(3, rs.getInt(\\\"Varijanta\\\"));\\n\\t\\t\\tps.setString(4, rs.getString(\\\"Opis1\\\"));\\n\\t\\t\\tps.setString(5, rs.getString(\\\"Opis2\\\"));\\n\\t\\t\\tps.setInt(6, rs.getInt(\\\"DOSVarID\\\"));\\n\\t\\t\\tps.addBatch();\\n\\t\\t\\ti++;\\n\\t\\t}\\n\\t\\tps.executeBatch();\\n\\t\\tcon2.commit();\\n\\t\\tSystem.out.println(String.format(\\\"%-26s -\\u003e %7d\\\", \\\"PTVarijanteVR\\\", i));\\n\\t\\trs.close();\\n\\t\\tps.close();\\n\\t}\"}","348":"{\"expressionStart\":{\"UNKNOWN.executeUpdate()\":102,\"String:Sifra\":706,\"PreparedStatement.setInt()\":612,\"String\":213,\"UNKNOWN.executeQuery()\":524,\"Connection.createStatement()\":176,\"PreparedStatement.addBatch()\":977,\"ResultSet.next()\":596,\"int:6\":812,\"int:5\":773,\"int:4\":733,\"int:3\":693,\"int:9\":949,\"int:8\":897,\"int:7\":851,\"ResultSet.close()\":1112,\"PreparedStatement.executeBatch()\":1006,\"Connection.commit()\":1027,\"int:2\":656,\"int:1\":622,\"int:0\":97,\"ResultSet.getInt()\":815,\"PreparedStatement.setString()\":936,\"String.format()\":1063,\"ResultSet.getString()\":952,\"String:ID\":635,\"Connection.prepareStatement()\":433,\"String:%-26s -\\u003e %7d\":1077,\"\\u003ca\\u003e\":995,\"UNKNOWN.println()\":1044,\"PreparedStatement.close()\":1126},\"expressionEnd\":{\"UNKNOWN.executeUpdate()\":172,\"String:Sifra\":713,\"PreparedStatement.setInt()\":641,\"String\":405,\"UNKNOWN.executeQuery()\":585,\"Connection.createStatement()\":198,\"PreparedStatement.addBatch()\":990,\"ResultSet.next()\":605,\"int:6\":813,\"int:5\":774,\"int:4\":734,\"int:3\":694,\"int:9\":950,\"int:8\":898,\"int:7\":852,\"ResultSet.close()\":1122,\"PreparedStatement.executeBatch()\":1023,\"Connection.commit()\":1040,\"int:2\":657,\"int:1\":623,\"int:0\":98,\"ResultSet.getInt()\":835,\"PreparedStatement.setString()\":972,\"String.format()\":1107,\"ResultSet.getString()\":971,\"String:ID\":639,\"Connection.prepareStatement()\":505,\"String:%-26s -\\u003e %7d\":1091,\"\\u003ca\\u003e\":998,\"UNKNOWN.println()\":1108,\"PreparedStatement.close()\":1136},\"rawCode\":\"private static void doPTVozaci(Connection con1, Connection con2) throws SQLException {\\n\\t\\tint i \\u003d 0;\\n\\t\\tcon2.createStatement().executeUpdate(\\\"drop table if exists PTVozaci;\\\");\\n\\t\\tcon2.createStatement().executeUpdate(\\\"CREATE TABLE PTVozaci(ID INT NOT NULL,PGRID INT NOT NULL,Sifra INT NOT NULL,Naziv VARCHAR,OsebaID INT,JeVozac INT,JeKondukter INT,MobilePassword VARCHAR(40),OIB VARCHAR(15),PRIMARY KEY (ID))\\\");\\n\\t\\tPreparedStatement ps \\u003d con2.prepareStatement(\\\"INSERT INTO PTVozaci VALUES (?,?,?,?,?,?,?,?,?)\\\");\\n\\t\\tResultSet rs \\u003d con1.createStatement().executeQuery(\\\"SELECT * FROM PTVozaci\\\");\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tps.setInt(1, rs.getInt(\\\"ID\\\"));\\n\\t\\t\\tps.setInt(2, rs.getInt(\\\"PGRID\\\"));\\n\\t\\t\\tps.setInt(3, rs.getInt(\\\"Sifra\\\"));\\n\\t\\t\\tps.setString(4, rs.getString(\\\"Naziv\\\"));\\n\\t\\t\\tps.setInt(5, rs.getInt(\\\"OsebaID\\\"));\\n\\t\\t\\tps.setInt(6, rs.getInt(\\\"JeVozac\\\"));\\n\\t\\t\\tps.setInt(7, rs.getInt(\\\"JeKondukter\\\"));\\n\\t\\t\\tps.setString(8, rs.getString(\\\"MobilePassword\\\"));\\n\\t\\t\\tps.setString(9, rs.getString(\\\"OIB\\\"));\\n\\t\\t\\tps.addBatch();\\n\\t\\t\\ti++;\\n\\t\\t}\\n\\t\\tps.executeBatch();\\n\\t\\tcon2.commit();\\n\\t\\tSystem.out.println(String.format(\\\"%-26s -\\u003e %7d\\\", \\\"PTVozaci\\\", i));\\n\\t\\trs.close();\\n\\t\\tps.close();\\n\\t}\"}","349":"{\"expressionStart\":{\"UNKNOWN.executeUpdate()\":186,\"String:Sifra\":730,\"PreparedStatement.setInt()\":707,\"String\":937,\"Connection.createStatement()\":543,\"UNKNOWN.executeQuery()\":543,\"PreparedStatement.addBatch()\":961,\"ResultSet.next()\":620,\"int:6\":841,\"int:5\":798,\"int:4\":757,\"int:3\":717,\"int:8\":924,\"PreparedStatement.executeBatch()\":990,\"int:7\":880,\"Connection.commit()\":1011,\"int:2\":680,\"int:1\":646,\"int:0\":102,\"ResultSet.getInt()\":927,\"PreparedStatement.setString()\":828,\"String.format()\":1047,\"ResultSet.getString()\":844,\"String:ID\":659,\"Connection.prepareStatement()\":449,\"String:%-26s -\\u003e %7d\":1061,\"\\u003ca\\u003e\":979,\"UNKNOWN.println()\":1028},\"expressionEnd\":{\"UNKNOWN.executeUpdate()\":422,\"String:Sifra\":737,\"PreparedStatement.setInt()\":739,\"String\":954,\"Connection.createStatement()\":565,\"UNKNOWN.executeQuery()\":609,\"PreparedStatement.addBatch()\":974,\"ResultSet.next()\":629,\"int:6\":842,\"int:5\":799,\"int:4\":758,\"int:3\":718,\"int:8\":925,\"PreparedStatement.executeBatch()\":1007,\"int:7\":881,\"Connection.commit()\":1024,\"int:2\":681,\"int:1\":647,\"int:0\":103,\"ResultSet.getInt()\":955,\"PreparedStatement.setString()\":865,\"String.format()\":1096,\"ResultSet.getString()\":864,\"String:ID\":663,\"Connection.prepareStatement()\":524,\"String:%-26s -\\u003e %7d\":1075,\"\\u003ca\\u003e\":982,\"UNKNOWN.println()\":1097},\"rawCode\":\"private static void doPTKTTipiKarti(Connection con1, Connection con2) throws SQLException {\\n\\t\\tint i \\u003d 0;\\n\\t\\tcon2.createStatement().executeUpdate(\\\"drop table if exists PTKTTipiKarti;\\\");\\n\\t\\tcon2.createStatement().executeUpdate(\\\"CREATE TABLE PTKTTipiKarti(ID INT NOT NULL,PGRID INT NOT NULL,Sifra INT NOT NULL,Oznaka VARCHAR(10) NOT NULL, Povratna INT,Opis VARCHAR(50) , SkupinaKarte INT,KategorijaKarte INT,PRIMARY KEY (ID))\\\");\\n\\t\\tPreparedStatement ps \\u003d con2.prepareStatement(\\\"INSERT INTO PTKTTipiKarti VALUES (?,?,?,?,?,?,?,?)\\\");\\n\\t\\tResultSet rs \\u003d con1.createStatement().executeQuery(\\\"SELECT * FROM PTKTTipiKarti\\\");\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tps.setInt(1, rs.getInt(\\\"ID\\\"));\\n\\t\\t\\tps.setInt(2, rs.getInt(\\\"PGRID\\\"));\\n\\t\\t\\tps.setInt(3, rs.getInt(\\\"Sifra\\\"));\\n\\t\\t\\tps.setString(4, rs.getString(\\\"Oznaka\\\"));\\n\\t\\t\\tps.setInt(5, rs.getInt(\\\"Povratna\\\"));\\n\\t\\t\\tps.setString(6, rs.getString(\\\"Opis\\\"));\\n\\t\\t\\tps.setInt(7, rs.getInt(\\\"SkupinaKarte\\\"));\\n\\t\\t\\tps.setInt(8, rs.getInt(\\\"KategorijaKarte\\\"));\\n\\t\\t\\tps.addBatch();\\n\\t\\t\\ti++;\\n\\t\\t}\\n\\t\\tps.executeBatch();\\n\\t\\tcon2.commit();\\n\\t\\tSystem.out.println(String.format(\\\"%-26s -\\u003e %7d\\\", \\\"PTKTTipiKarti\\\", i));\\n\\t}\"}","350":"{\"expressionStart\":{\"UNKNOWN.executeUpdate()\":691,\"PreparedStatement.setInt()\":1224,\"String\":1669,\"Connection.createStatement()\":691,\"UNKNOWN.executeQuery()\":949,\"PreparedStatement.addBatch()\":1553,\"ResultSet.next()\":1174,\"int:6\":1405,\"int:5\":1361,\"int:4\":1324,\"int:3\":1277,\"int:9\":1526,\"int:8\":1486,\"ResultSet.close()\":1699,\"int:7\":1446,\"PreparedStatement.executeBatch()\":1582,\"Connection.commit()\":1603,\"int:2\":1234,\"int:1\":1200,\"int:0\":108,\"ResultSet.getInt()\":1237,\"PreparedStatement.setString()\":1473,\"String.format()\":1639,\"ResultSet.getString()\":1489,\"String:ID\":1213,\"Connection.prepareStatement()\":847,\"String:%-26s -\\u003e %7d\":1653,\"\\u003ca\\u003e\":1571,\"UNKNOWN.println()\":1620,\"PreparedStatement.close()\":1713},\"expressionEnd\":{\"UNKNOWN.executeUpdate()\":820,\"PreparedStatement.setInt()\":1262,\"String\":1690,\"Connection.createStatement()\":713,\"UNKNOWN.executeQuery()\":1163,\"PreparedStatement.addBatch()\":1566,\"ResultSet.next()\":1183,\"int:6\":1406,\"int:5\":1362,\"int:4\":1325,\"int:3\":1278,\"int:9\":1527,\"int:8\":1487,\"ResultSet.close()\":1709,\"int:7\":1447,\"PreparedStatement.executeBatch()\":1599,\"Connection.commit()\":1616,\"int:2\":1235,\"int:1\":1201,\"int:0\":109,\"ResultSet.getInt()\":1261,\"PreparedStatement.setString()\":1511,\"String.format()\":1694,\"ResultSet.getString()\":1510,\"String:ID\":1217,\"Connection.prepareStatement()\":930,\"String:%-26s -\\u003e %7d\":1667,\"\\u003ca\\u003e\":1574,\"UNKNOWN.println()\":1695,\"PreparedStatement.close()\":1723},\"rawCode\":\"private static void doPTPostajeVarijantVR(Connection con1, Connection con2) throws SQLException {\\n\\t\\tint i \\u003d 0;\\n\\t\\tcon2.createStatement().executeUpdate(\\\"drop table if exists PTPostajeVarijantVR;\\\");\\n\\t\\tcon2.createStatement().executeUpdate(\\\"CREATE TABLE PTPostajeVarijantVR(ID INT NOT NULL,VarijantaID INT NOT NULL,NodePostajeVRID INT NOT NULL,ZapSt INT,KumDistancaM INT,DistancaM INT,Vozel INT,Staje CHAR,DOSID INT,PRIMARY KEY (ID),FOREIGN KEY (NodePostajeVRID) REFERENCES PTPostajeVR (ID),FOREIGN KEY (VarijantaID) REFERENCES PTVarijanteVR (ID))\\\");\\n\\t\\tcon2.createStatement().executeUpdate(\\\"CREATE INDEX [IXPostajaVarVRVarijantaID] ON [PTPostajeVarijantVR] ([VarijantaID],[NodePostajeVRID])\\\");\\n\\t\\tcon2.createStatement().executeUpdate(\\\"CREATE INDEX [IXPostajaVarVRNodePostajeVRID] ON [PTPostajeVarijantVR] ([NodePostajeVRID])\\\");\\n\\t\\tPreparedStatement ps \\u003d con2.prepareStatement(\\\"INSERT INTO PTPostajeVarijantVR VALUES (?,?,?,?,?,?,?,?,?)\\\");\\n\\t\\tResultSet rs \\u003d con1.createStatement().executeQuery(\\\"SELECT * FROM PTPostajeVarijantVR WHERE VarijantaID IN(select ID from PTVarijanteVR where VozniRedID IN (SELECT ID FROM PTVozniRedi WHERE  VrstaVR\\u003d1 and veljaDo \\u003e\\u003d GETDATE()))\\\");\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tps.setInt(1, rs.getInt(\\\"ID\\\"));\\n\\t\\t\\tps.setInt(2, rs.getInt(\\\"VarijantaID\\\"));\\n\\t\\t\\tps.setInt(3, rs.getInt(\\\"NodePostajeVRID\\\"));\\n\\t\\t\\tps.setInt(4, rs.getInt(\\\"ZapSt\\\"));\\n\\t\\t\\tps.setInt(5, rs.getInt(\\\"KumDistancaM\\\"));\\n\\t\\t\\tps.setInt(6, rs.getInt(\\\"DistancaM\\\"));\\n\\t\\t\\tps.setInt(7, rs.getInt(\\\"Vozel\\\"));\\n\\t\\t\\tps.setString(8, rs.getString(\\\"Staje\\\"));\\n\\t\\t\\tps.setInt(9, rs.getInt(\\\"DOSID\\\"));\\n\\t\\t\\tps.addBatch();\\n\\t\\t\\ti++;\\n\\t\\t}\\n\\t\\tps.executeBatch();\\n\\t\\tcon2.commit();\\n\\t\\tSystem.out.println(String.format(\\\"%-26s -\\u003e %7d\\\", \\\"PTPostajeVarijantVR\\\", i));\\n\\t\\trs.close();\\n\\t\\tps.close();\\n\\t}\"}","351":"{\"expressionStart\":{\"UNKNOWN.executeUpdate()\":178,\"PreparedStatement.setInt()\":746,\"String\":477,\"Connection.createStatement()\":440,\"UNKNOWN.executeQuery()\":657,\"PreparedStatement.addBatch()\":942,\"ResultSet.next()\":730,\"int:5\":906,\"int:4\":867,\"int:3\":827,\"PreparedStatement.executeBatch()\":971,\"Connection.commit()\":992,\"int:2\":790,\"String:Firma\":803,\"int:1\":756,\"int:0\":98,\"ResultSet.getInt()\":759,\"PreparedStatement.setString()\":854,\"String.format()\":1028,\"ResultSet.getString()\":870,\"String:ID\":769,\"Connection.prepareStatement()\":573,\"String:%-26s -\\u003e %7d\":1042,\"\\u003ca\\u003e\":960,\"UNKNOWN.println()\":1009},\"expressionEnd\":{\"UNKNOWN.executeUpdate()\":436,\"PreparedStatement.setInt()\":775,\"String\":545,\"Connection.createStatement()\":462,\"UNKNOWN.executeQuery()\":719,\"PreparedStatement.addBatch()\":955,\"ResultSet.next()\":739,\"int:5\":907,\"int:4\":868,\"int:3\":828,\"PreparedStatement.executeBatch()\":988,\"Connection.commit()\":1005,\"int:2\":791,\"String:Firma\":810,\"int:1\":757,\"int:0\":99,\"ResultSet.getInt()\":774,\"PreparedStatement.setString()\":891,\"String.format()\":1073,\"ResultSet.getString()\":890,\"String:ID\":773,\"Connection.prepareStatement()\":638,\"String:%-26s -\\u003e %7d\":1056,\"\\u003ca\\u003e\":963,\"UNKNOWN.println()\":1074},\"rawCode\":\"private static void doPTMesCode(Connection con1, Connection con2) throws SQLException {\\n\\t\\tint i \\u003d 0;\\n\\t\\tcon2.createStatement().executeUpdate(\\\"drop table if exists PTMesCode;\\\");\\n\\t\\tcon2.createStatement().executeUpdate(\\\"CREATE TABLE PTMesCode(ID INT NOT NULL,Firma INT NOT NULL, Vrsta int not null\\\" + \\\",Code varchar(20) not null, MesUporabnikID not null\\\" + \\\",PRIMARY KEY (ID), FOREIGN KEY (MesUporabnikID) REFERENCES PTMesUporabniki (ID))\\\");\\n\\t\\tcon2.createStatement().executeUpdate(\\\"CREATE INDEX [IXMesCode] ON [PTMesCode] ([Code], [Vrsta], [Firma])\\\");\\n\\t\\tPreparedStatement ps \\u003d con2.prepareStatement(\\\"INSERT INTO PTMesCode VALUES (?,?,?,?,?)\\\");\\n\\t\\tResultSet rs \\u003d con1.createStatement().executeQuery(\\\"SELECT * FROM PTMesCode\\\");\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tps.setInt(1, rs.getInt(\\\"ID\\\"));\\n\\t\\t\\tps.setInt(2, rs.getInt(\\\"Firma\\\"));\\n\\t\\t\\tps.setInt(3, rs.getInt(\\\"Vrsta\\\"));\\n\\t\\t\\tps.setString(4, rs.getString(\\\"Code\\\"));\\n\\t\\t\\tps.setInt(5, rs.getInt(\\\"MesUporabnikID\\\"));\\n\\t\\t\\tps.addBatch();\\n\\t\\t\\ti++;\\n\\t\\t}\\n\\t\\tps.executeBatch();\\n\\t\\tcon2.commit();\\n\\t\\tSystem.out.println(String.format(\\\"%-26s -\\u003e %7d\\\", \\\"PTMesCode\\\", i));\\n\\t}\"}","352":"{\"expressionStart\":{\"UNKNOWN.executeUpdate()\":413,\"PreparedStatement.setInt()\":1058,\"String\":1128,\"UNKNOWN.executeQuery()\":671,\"Connection.createStatement()\":671,\"PreparedStatement.addBatch()\":1259,\"ResultSet.next()\":1008,\"int:6\":1232,\"int:5\":1193,\"int:4\":1154,\"int:3\":1112,\"ResultSet.close()\":1409,\"PreparedStatement.executeBatch()\":1288,\"PreparedStatement.setDouble()\":1180,\"Connection.commit()\":1309,\"int:2\":1068,\"int:1\":1034,\"int:0\":112,\"ResultSet.getDouble()\":1196,\"ResultSet.getInt()\":1071,\"PreparedStatement.setString()\":1099,\"String.format()\":1345,\"ResultSet.getString()\":1115,\"String:ID\":1047,\"Connection.prepareStatement()\":571,\"String:%-26s -\\u003e %7d\":1359,\"\\u003ca\\u003e\":1277,\"UNKNOWN.println()\":1326,\"PreparedStatement.close()\":1423},\"expressionEnd\":{\"UNKNOWN.executeUpdate()\":544,\"PreparedStatement.setInt()\":1094,\"String\":1137,\"UNKNOWN.executeQuery()\":997,\"Connection.createStatement()\":693,\"PreparedStatement.addBatch()\":1272,\"ResultSet.next()\":1017,\"int:6\":1233,\"int:5\":1194,\"int:4\":1155,\"int:3\":1113,\"ResultSet.close()\":1419,\"PreparedStatement.executeBatch()\":1305,\"PreparedStatement.setDouble()\":1217,\"Connection.commit()\":1322,\"int:2\":1069,\"int:1\":1035,\"int:0\":113,\"ResultSet.getDouble()\":1216,\"ResultSet.getInt()\":1093,\"PreparedStatement.setString()\":1139,\"String.format()\":1404,\"ResultSet.getString()\":1138,\"String:ID\":1051,\"Connection.prepareStatement()\":652,\"String:%-26s -\\u003e %7d\":1373,\"\\u003ca\\u003e\":1280,\"UNKNOWN.println()\":1405,\"PreparedStatement.close()\":1433},\"rawCode\":\"private static void doPTKTTarifniRazrediCenik(Connection con1, Connection con2) throws SQLException {\\n\\t\\tint i \\u003d 0;\\n\\t\\tcon2.createStatement().executeUpdate(\\\"drop table if exists PTKTTarifniRazrediCenik;\\\");\\n\\t\\tcon2.createStatement().executeUpdate(\\\"CREATE TABLE PTKTTarifniRazrediCenik(ID INT NOT NULL ,IDRazreda INT NOT NULL,VeljaOd DATETIME NOT NULL,OdKM INT NOT NULL,Cena FLOAT(53),DOSID INT,PRIMARY KEY (ID))\\\");\\n\\t\\tcon2.createStatement().executeUpdate(\\\"CREATE INDEX [IXTarRazCenikIDRazreda]  ON [PTKTTarifniRazrediCenik] ([IDRazreda],[VeljaOd])\\\");\\n\\t\\tPreparedStatement ps \\u003d con2.prepareStatement(\\\"INSERT INTO PTKTTarifniRazrediCenik VALUES (?,?,?,?,?,?)\\\");\\n\\t\\tResultSet rs \\u003d con1.createStatement().executeQuery(\\\"SELECT * FROM PTKTTarifniRazrediCenik a WHERE IDRazreda IN ( SELECT DISTINCT TarifniRazredID FROM PTKTVozneKarte WHERE MobilnaProdaja \\u003d 1) AND VeljaOD \\u003d (SELECT MAX(VeljaOd) FROM PTKTTarifniRazrediCenik b WHERE b.IDRazreda \\u003d a.IDRazreda AND b.OdKM \\u003d a.OdKM AND b.VeljaOd \\u003c\\u003d GETDATE()+15)\\\");\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tps.setInt(1, rs.getInt(\\\"ID\\\"));\\n\\t\\t\\tps.setInt(2, rs.getInt(\\\"IDRazreda\\\"));\\n\\t\\t\\tps.setString(3, rs.getString(\\\"VeljaOd\\\"));\\n\\t\\t\\tps.setInt(4, rs.getInt(\\\"OdKM\\\"));\\n\\t\\t\\tps.setDouble(5, rs.getDouble(\\\"Cena\\\"));\\n\\t\\t\\tps.setInt(6, rs.getInt(\\\"DOSID\\\"));\\n\\t\\t\\tps.addBatch();\\n\\t\\t\\ti++;\\n\\t\\t}\\n\\t\\tps.executeBatch();\\n\\t\\tcon2.commit();\\n\\t\\tSystem.out.println(String.format(\\\"%-26s -\\u003e %7d\\\", \\\"PTKTTarifniRazrediCenik\\\", i));\\n\\t\\trs.close();\\n\\t\\tps.close();\\n\\t}\"}","353":"{\"expressionStart\":{\"UNKNOWN.executeUpdate()\":526,\"PreparedStatement.setInt()\":1136,\"String\":563,\"Connection.createStatement()\":526,\"UNKNOWN.executeQuery()\":763,\"PreparedStatement.addBatch()\":1301,\"ResultSet.next()\":929,\"int:6\":1146,\"int:5\":1105,\"int:4\":1068,\"int:3\":1031,\"int:9\":1274,\"int:8\":1234,\"int:7\":1190,\"ResultSet.close()\":1439,\"PreparedStatement.executeBatch()\":1330,\"Connection.commit()\":1351,\"int:2\":989,\"int:1\":955,\"int:0\":100,\"ResultSet.getInt()\":1149,\"PreparedStatement.setString()\":1221,\"String.format()\":1387,\"ResultSet.getString()\":1237,\"String:ID\":968,\"Connection.prepareStatement()\":669,\"String:%-26s -\\u003e %7d\":1401,\"\\u003ca\\u003e\":1319,\"UNKNOWN.println()\":1368,\"PreparedStatement.close()\":1453},\"expressionEnd\":{\"UNKNOWN.executeUpdate()\":642,\"PreparedStatement.setInt()\":1175,\"String\":641,\"Connection.createStatement()\":548,\"UNKNOWN.executeQuery()\":918,\"PreparedStatement.addBatch()\":1314,\"ResultSet.next()\":938,\"int:6\":1147,\"int:5\":1106,\"int:4\":1069,\"int:3\":1032,\"int:9\":1275,\"int:8\":1235,\"int:7\":1191,\"ResultSet.close()\":1449,\"PreparedStatement.executeBatch()\":1347,\"Connection.commit()\":1364,\"int:2\":990,\"int:1\":956,\"int:0\":101,\"ResultSet.getInt()\":1174,\"PreparedStatement.setString()\":1259,\"String.format()\":1434,\"ResultSet.getString()\":1258,\"String:ID\":972,\"Connection.prepareStatement()\":744,\"String:%-26s -\\u003e %7d\":1415,\"\\u003ca\\u003e\":1322,\"UNKNOWN.println()\":1435,\"PreparedStatement.close()\":1463},\"rawCode\":\"private static void doPTPostajeVR(Connection con1, Connection con2) throws SQLException {\\n\\t\\tint i \\u003d 0;\\n\\t\\tcon2.createStatement().executeUpdate(\\\"drop table if exists PTPostajeVR;\\\");\\n\\t\\tcon2.createStatement().executeUpdate(\\\"CREATE TABLE PTPostajeVR(ID INT NOT NULL,VozniRedID INT NOT NULL,ZapSt INT NOT NULL, Vozel INT NOT NULL,PostajaID INT NOT NULL,KumDistancaM INT,DistancaM INT,Staje CHAR,DosID INT,PRIMARY KEY (ID),FOREIGN KEY (PostajaID) REFERENCES PTPostaje (ID) ,FOREIGN KEY (VozniRedID) REFERENCES PTVozniRedi (ID))\\\");\\n\\t\\tcon2.createStatement().executeUpdate(\\\"CREATE INDEX [IXPostajeVRVozniRedID] ON [PTPostajeVR] ([VozniRedID],[ZapSt])\\\");\\n\\t\\tPreparedStatement ps \\u003d con2.prepareStatement(\\\"INSERT INTO PTPostajeVR VALUES (?,?,?,?,?,?,?,?,?)\\\");\\n\\t\\tResultSet rs \\u003d con1.createStatement().executeQuery(\\\"SELECT * FROM PTPostajeVR WHERE VozniRedID IN (SELECT ID FROM PTVozniRedi WHERE  VrstaVR\\u003d1 and veljaDo \\u003e\\u003d GETDATE())\\\");\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tps.setInt(1, rs.getInt(\\\"ID\\\"));\\n\\t\\t\\tps.setInt(2, rs.getInt(\\\"VozniRedID\\\"));\\n\\t\\t\\tps.setInt(3, rs.getInt(\\\"ZapSt\\\"));\\n\\t\\t\\tps.setInt(4, rs.getInt(\\\"Vozel\\\"));\\n\\t\\t\\tps.setInt(5, rs.getInt(\\\"PostajaID\\\"));\\n\\t\\t\\tps.setInt(6, rs.getInt(\\\"KumDistancaM\\\"));\\n\\t\\t\\tps.setInt(7, rs.getInt(\\\"DistancaM\\\"));\\n\\t\\t\\tps.setString(8, rs.getString(\\\"Staje\\\"));\\n\\t\\t\\tps.setInt(9, rs.getInt(\\\"DosID\\\"));\\n\\t\\t\\tps.addBatch();\\n\\t\\t\\ti++;\\n\\t\\t}\\n\\t\\tps.executeBatch();\\n\\t\\tcon2.commit();\\n\\t\\tSystem.out.println(String.format(\\\"%-26s -\\u003e %7d\\\", \\\"PTPostajeVR\\\", i));\\n\\t\\trs.close();\\n\\t\\tps.close();\\n\\t}\"}","354":"{\"expressionStart\":{\"PreparedStatement.setString()\":625,\"String.format()\":760,\"UNKNOWN.executeUpdate()\":176,\"ResultSet.getString()\":591,\"PreparedStatement.setInt()\":532,\"String\":604,\"Connection.createStatement()\":176,\"UNKNOWN.executeQuery()\":444,\"PreparedStatement.addBatch()\":674,\"ResultSet.next()\":516,\"int:3\":638,\"Connection.prepareStatement()\":365,\"PreparedStatement.executeBatch()\":703,\"ResultSet.close()\":809,\"String:%-26s -\\u003e %7d\":774,\"\\u003ca\\u003e\":692,\"Connection.commit()\":724,\"int:2\":588,\"int:1\":542,\"int:0\":97,\"PreparedStatement.close()\":823,\"UNKNOWN.println()\":741,\"ResultSet.getInt()\":545},\"expressionEnd\":{\"PreparedStatement.setString()\":669,\"String.format()\":804,\"UNKNOWN.executeUpdate()\":338,\"ResultSet.getString()\":619,\"PreparedStatement.setInt()\":570,\"String\":618,\"Connection.createStatement()\":198,\"UNKNOWN.executeQuery()\":505,\"PreparedStatement.addBatch()\":687,\"ResultSet.next()\":525,\"int:3\":639,\"Connection.prepareStatement()\":425,\"PreparedStatement.executeBatch()\":720,\"ResultSet.close()\":819,\"String:%-26s -\\u003e %7d\":788,\"\\u003ca\\u003e\":695,\"Connection.commit()\":737,\"int:2\":589,\"int:1\":543,\"int:0\":98,\"PreparedStatement.close()\":833,\"UNKNOWN.println()\":805,\"ResultSet.getInt()\":569},\"rawCode\":\"private static void doSkValute(Connection con1, Connection con2) throws SQLException {\\n\\t\\tint i \\u003d 0;\\n\\t\\tcon2.createStatement().executeUpdate(\\\"drop table if exists SkValute;\\\");\\n\\t\\tcon2.createStatement().executeUpdate(\\\"CREATE TABLE SkValute(SifraValute INT NOT NULL,OznakaValute VARCHAR(3),NazivValute VARCHAR(30) ,PRIMARY KEY (SifraValute))\\\");\\n\\t\\tPreparedStatement ps \\u003d con2.prepareStatement(\\\"INSERT INTO SkValute VALUES (?,?,?)\\\");\\n\\t\\tResultSet rs \\u003d con1.createStatement().executeQuery(\\\"SELECT * FROM SKValute\\\");\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tps.setInt(1, rs.getInt(\\\"SifraValute\\\"));\\n\\t\\t\\tps.setString(2, rs.getString(\\\"OznakaValute\\\"));\\n\\t\\t\\tps.setString(3, rs.getString(\\\"NazivValute\\\"));\\n\\t\\t\\tps.addBatch();\\n\\t\\t\\ti++;\\n\\t\\t}\\n\\t\\tps.executeBatch();\\n\\t\\tcon2.commit();\\n\\t\\tSystem.out.println(String.format(\\\"%-26s -\\u003e %7d\\\", \\\"SkValute\\\", i));\\n\\t\\trs.close();\\n\\t\\tps.close();\\n\\t}\"}","355":"{\"expressionStart\":{\"UNKNOWN.executeUpdate()\":483,\"PreparedStatement.setInt()\":886,\"String\":754,\"Connection.createStatement()\":718,\"UNKNOWN.executeQuery()\":718,\"PreparedStatement.addBatch()\":1239,\"ResultSet.next()\":793,\"int:6\":1028,\"int:5\":983,\"int:4\":941,\"int:3\":896,\"int:9\":1159,\"int:8\":1113,\"PreparedStatement.executeBatch()\":1268,\"int:7\":1071,\"PreparedStatement.setDouble()\":1194,\"Connection.commit()\":1289,\"int:2\":853,\"int:1\":819,\"ResultSet.getDouble()\":1211,\"int:0\":100,\"ResultSet.getInt()\":1116,\"PreparedStatement.setString()\":1058,\"String.format()\":1325,\"ResultSet.getString()\":1074,\"String:ID\":832,\"Connection.prepareStatement()\":622,\"String:%-26s -\\u003e %7d\":1339,\"\\u003ca\\u003e\":1257,\"int:10\":1207,\"UNKNOWN.println()\":1306},\"expressionEnd\":{\"UNKNOWN.executeUpdate()\":595,\"PreparedStatement.setInt()\":923,\"String\":781,\"Connection.createStatement()\":740,\"UNKNOWN.executeQuery()\":782,\"PreparedStatement.addBatch()\":1252,\"ResultSet.next()\":802,\"int:6\":1029,\"int:5\":984,\"int:4\":942,\"int:3\":897,\"int:9\":1160,\"int:8\":1114,\"PreparedStatement.executeBatch()\":1285,\"int:7\":1072,\"PreparedStatement.setDouble()\":1234,\"Connection.commit()\":1302,\"int:2\":854,\"int:1\":820,\"ResultSet.getDouble()\":1233,\"int:0\":101,\"ResultSet.getInt()\":1143,\"PreparedStatement.setString()\":1098,\"String.format()\":1372,\"ResultSet.getString()\":1097,\"String:ID\":836,\"Connection.prepareStatement()\":699,\"String:%-26s -\\u003e %7d\":1353,\"\\u003ca\\u003e\":1260,\"int:10\":1209,\"UNKNOWN.println()\":1373},\"rawCode\":\"private static void doPTKTPopusti(Connection con1, Connection con2) throws SQLException {\\n\\t\\tint i \\u003d 0;\\n\\t\\tcon2.createStatement().executeUpdate(\\\"drop table if exists PTKTPopusti;\\\");\\n\\t\\tcon2.createStatement().executeUpdate(\\\"CREATE TABLE PTKTPopusti(ID INT NOT NULL , PrevoznikID INT NOT NULL,TipKarteID INT NOT NULL, Opis VARCHAR(40), KratkiOpis VARCHAR(20), StupacID INT, VeljaOd DATETIME NOT NULL, VrstaPopustaID INT NOT NULL, NacinIzracuna INT,Popust FLOAT(53),PRIMARY KEY (ID))\\\");\\n\\t\\tcon2.createStatement().executeUpdate(\\\"CREATE INDEX [IXPopTipKarteID] ON [PTKTPopusti] ([TipKarteID],[VeljaOd])\\\");\\n\\t\\tPreparedStatement ps \\u003d con2.prepareStatement(\\\"INSERT INTO PTKTPopusti VALUES (?,?,?,?,?,?,?,?,?,?)\\\");\\n\\t\\tResultSet rs \\u003d con1.createStatement().executeQuery(\\\"SELECT * FROM PTKTPopusti\\\");\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tps.setInt(1, rs.getInt(\\\"ID\\\"));\\n\\t\\t\\tps.setInt(2, rs.getInt(\\\"PrevoznikID\\\"));\\n\\t\\t\\tps.setInt(3, rs.getInt(\\\"TipKarteID\\\"));\\n\\t\\t\\tps.setString(4, rs.getString(\\\"Opis\\\"));\\n\\t\\t\\tps.setString(5, rs.getString(\\\"KratkiOpis\\\"));\\n\\t\\t\\tps.setInt(6, rs.getInt(\\\"StupacID\\\"));\\n\\t\\t\\tps.setString(7, rs.getString(\\\"VeljaOd\\\"));\\n\\t\\t\\tps.setInt(8, rs.getInt(\\\"VrstaPopustaID\\\"));\\n\\t\\t\\tps.setInt(9, rs.getInt(\\\"NacinIzracuna\\\"));\\n\\t\\t\\tps.setDouble(10, rs.getDouble(\\\"Popust\\\"));\\n\\t\\t\\tps.addBatch();\\n\\t\\t\\ti++;\\n\\t\\t}\\n\\t\\tps.executeBatch();\\n\\t\\tcon2.commit();\\n\\t\\tSystem.out.println(String.format(\\\"%-26s -\\u003e %7d\\\", \\\"PTKTPopusti\\\", i));\\n\\t}\"}","356":"{\"expressionStart\":{\"UNKNOWN.executeUpdate()\":104,\"PreparedStatement.setInt()\":1595,\"String\":1661,\"Connection.createStatement()\":180,\"UNKNOWN.executeQuery()\":1065,\"PreparedStatement.addBatch()\":2077,\"ResultSet.next()\":1285,\"int:6\":1515,\"int:5\":1472,\"int:4\":1424,\"int:3\":1382,\"int:9\":1648,\"int:8\":1605,\"int:7\":1560,\"PreparedStatement.executeBatch()\":2106,\"ResultSet.close()\":2214,\"PreparedStatement.setDouble()\":1855,\"Connection.commit()\":2127,\"int:2\":1345,\"int:1\":1311,\"String:Firma\":1358,\"int:0\":99,\"ResultSet.getDouble()\":1872,\"ResultSet.getInt()\":1651,\"PreparedStatement.setString()\":1951,\"int:16\":1964,\"int:17\":2007,\"String.format()\":2163,\"int:18\":2049,\"ResultSet.getString()\":1968,\"String:ID\":1324,\"Connection.prepareStatement()\":954,\"String:%-26s -\\u003e %7d\":2177,\"\\u003ca\\u003e\":2095,\"int:10\":1692,\"int:11\":1734,\"int:12\":1774,\"int:13\":1819,\"int:14\":1868,\"UNKNOWN.println()\":2144,\"PreparedStatement.close()\":2228,\"int:15\":1918},\"expressionEnd\":{\"UNKNOWN.executeUpdate()\":176,\"PreparedStatement.setInt()\":1633,\"String\":1675,\"Connection.createStatement()\":202,\"UNKNOWN.executeQuery()\":1274,\"PreparedStatement.addBatch()\":2090,\"ResultSet.next()\":1294,\"int:6\":1516,\"int:5\":1473,\"int:4\":1425,\"int:3\":1383,\"int:9\":1649,\"int:8\":1606,\"int:7\":1561,\"PreparedStatement.executeBatch()\":2123,\"ResultSet.close()\":2224,\"PreparedStatement.setDouble()\":1900,\"Connection.commit()\":2140,\"int:2\":1346,\"int:1\":1312,\"String:Firma\":1365,\"int:0\":100,\"ResultSet.getDouble()\":1899,\"ResultSet.getInt()\":1676,\"PreparedStatement.setString()\":1992,\"int:16\":1966,\"int:17\":2009,\"String.format()\":2209,\"int:18\":2051,\"ResultSet.getString()\":1991,\"String:ID\":1328,\"Connection.prepareStatement()\":1046,\"String:%-26s -\\u003e %7d\":2191,\"\\u003ca\\u003e\":2098,\"int:10\":1694,\"int:11\":1736,\"int:12\":1776,\"int:13\":1821,\"int:14\":1870,\"UNKNOWN.println()\":2210,\"PreparedStatement.close()\":2238,\"int:15\":1920},\"rawCode\":\"private static void doPTStupciVR(Connection con1, Connection con2) throws SQLException {\\n\\t\\tint i \\u003d 0;\\n\\t\\tcon2.createStatement().executeUpdate(\\\"drop table if exists PTStupciVR;\\\");\\n\\t\\tcon2.createStatement().executeUpdate(\\\"CREATE TABLE PTStupciVR (ID INT NOT NULL,Firma INT NOT NULL,VozniRedID INT NOT NULL,VarijantaVRID INT NOT NULL,ZapSt VARCHAR NOT NULL,SmerVoznje VARCHAR,DneviVoznjeID INT,PrevoznikID INT,VrstaPrevoza INT,VrstaBusa INT,StBusov INT,NacinPrevoza INT,VrstaPosadeID INT,VremeOdhoda FLOAT, VeljaOd DATETIME,VeljaDo DATETIME,StatusERR INT,DOSID INT,PRIMARY KEY (ID)\\\" +\\n\\t\\t\\t\\t\\\",FOREIGN KEY (VarijantaVRID) REFERENCES PTVarijanteVR (ID) ,FOREIGN KEY (VozniRedID) REFERENCES PTVozniRedi (ID))\\\");\\n\\t\\tcon2.createStatement().executeUpdate(\\\"CREATE INDEX [IXStupciVRVozniRedID]   ON [PTStupciVR] ([VozniRedID])\\\");\\n\\t\\tcon2.createStatement().executeUpdate(\\\"CREATE INDEX [IXStupciVRVarijantaID]  ON [PTStupciVR] ([VarijantaVRID])\\\");\\n\\t\\tPreparedStatement ps \\u003d con2.prepareStatement(\\\"INSERT INTO PTStupciVR VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\\\");\\n\\t\\tResultSet rs \\u003d con1.createStatement().executeQuery(\\\"SELECT * FROM PTStupciVR WHERE VarijantaVRID IN (select ID from PTVarijanteVR where VozniRedID IN (SELECT ID FROM PTVozniRedi WHERE  VrstaVR\\u003d1 and veljaDo \\u003e\\u003d GETDATE())) \\\");\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tps.setInt(1, rs.getInt(\\\"ID\\\"));\\n\\t\\t\\tps.setInt(2, rs.getInt(\\\"Firma\\\"));\\n\\t\\t\\tps.setInt(3, rs.getInt(\\\"VozniRedID\\\"));\\n\\t\\t\\tps.setInt(4, rs.getInt(\\\"VarijantaVRID\\\"));\\n\\t\\t\\tps.setString(5, rs.getString(\\\"ZapSt\\\"));\\n\\t\\t\\tps.setString(6, rs.getString(\\\"SmerVoznje\\\"));\\n\\t\\t\\tps.setInt(7, rs.getInt(\\\"DneviVoznjeID\\\"));\\n\\t\\t\\tps.setInt(8, rs.getInt(\\\"PrevoznikID\\\"));\\n\\t\\t\\tps.setInt(9, rs.getInt(\\\"VrstaPrevoza\\\"));\\n\\t\\t\\tps.setInt(10, rs.getInt(\\\"VrstaBusa\\\"));\\n\\t\\t\\tps.setInt(11, rs.getInt(\\\"StBusov\\\"));\\n\\t\\t\\tps.setInt(12, rs.getInt(\\\"NacinPrevoza\\\"));\\n\\t\\t\\tps.setInt(13, rs.getInt(\\\"VrstaPosadeID\\\"));\\n\\t\\t\\tps.setDouble(14, rs.getDouble(\\\"VremeOdhoda\\\"));\\n\\t\\t\\tps.setString(15, rs.getString(\\\"VeljaOd\\\"));\\n\\t\\t\\tps.setString(16, rs.getString(\\\"VeljaDo\\\"));\\n\\t\\t\\tps.setInt(17, rs.getInt(\\\"StatusERR\\\"));\\n\\t\\t\\tps.setInt(18, rs.getInt(\\\"DOSID\\\"));\\n\\t\\t\\tps.addBatch();\\n\\t\\t\\ti++;\\n\\t\\t}\\n\\t\\tps.executeBatch();\\n\\t\\tcon2.commit();\\n\\t\\tSystem.out.println(String.format(\\\"%-26s -\\u003e %7d\\\", \\\"PTStupciVR\\\", i));\\n\\t\\trs.close();\\n\\t\\tps.close();\\n\\t}\"}","357":"{\"expressionStart\":{\"UNKNOWN.executeUpdate()\":194,\"String:Sifra\":735,\"PreparedStatement.setInt()\":675,\"String\":231,\"Connection.createStatement()\":194,\"UNKNOWN.executeQuery()\":544,\"PreparedStatement.addBatch()\":926,\"ResultSet.next()\":625,\"int:6\":845,\"int:5\":806,\"int:4\":762,\"int:3\":722,\"PreparedStatement.executeBatch()\":955,\"ResultSet.close()\":1070,\"int:7\":893,\"PreparedStatement.setDouble()\":880,\"Connection.commit()\":976,\"int:2\":685,\"int:1\":651,\"String:Firma\":698,\"ResultSet.getDouble()\":896,\"int:0\":106,\"ResultSet.getInt()\":688,\"PreparedStatement.setString()\":793,\"String.format()\":1012,\"ResultSet.getString()\":809,\"String:ID\":664,\"Connection.prepareStatement()\":448,\"String:%-26s -\\u003e %7d\":1026,\"\\u003ca\\u003e\":944,\"UNKNOWN.println()\":993,\"PreparedStatement.close()\":1084},\"expressionEnd\":{\"UNKNOWN.executeUpdate()\":421,\"String:Sifra\":742,\"PreparedStatement.setInt()\":707,\"String\":420,\"Connection.createStatement()\":216,\"UNKNOWN.executeQuery()\":614,\"PreparedStatement.addBatch()\":939,\"ResultSet.next()\":634,\"int:6\":846,\"int:5\":807,\"int:4\":763,\"int:3\":723,\"PreparedStatement.executeBatch()\":972,\"ResultSet.close()\":1080,\"int:7\":894,\"PreparedStatement.setDouble()\":921,\"Connection.commit()\":989,\"int:2\":686,\"int:1\":652,\"String:Firma\":705,\"ResultSet.getDouble()\":920,\"int:0\":107,\"ResultSet.getInt()\":706,\"PreparedStatement.setString()\":830,\"String.format()\":1065,\"ResultSet.getString()\":829,\"String:ID\":668,\"Connection.prepareStatement()\":525,\"String:%-26s -\\u003e %7d\":1040,\"\\u003ca\\u003e\":947,\"UNKNOWN.println()\":1066,\"PreparedStatement.close()\":1094},\"rawCode\":\"private static void doPTKTVrstePopustov(Connection con1, Connection con2) throws SQLException {\\n\\t\\tint i \\u003d 0;\\n\\t\\tcon2.createStatement().executeUpdate(\\\"drop table if exists PTKTVrstePopustov;\\\");\\n\\t\\tcon2.createStatement().executeUpdate(\\\"CREATE TABLE PTKTVrstePopustov(ID INT NOT NULL ,Firma INT NOT NULL,Sifra INT NOT NULL,Oznaka VARCHAR(10)  NOT NULL,Opis VARCHAR(50) ,NacinIzracuna INT,Vrednost FLOAT(53),PRIMARY KEY (ID))\\\");\\n\\t\\tPreparedStatement ps \\u003d con2.prepareStatement(\\\"INSERT INTO PTKTVrstePopustov VALUES (?,?,?,?,?,?,?)\\\");\\n\\t\\tResultSet rs \\u003d con1.createStatement().executeQuery(\\\"SELECT * FROM PTKTVrstePopustov\\\");\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tps.setInt(1, rs.getInt(\\\"ID\\\"));\\n\\t\\t\\tps.setInt(2, rs.getInt(\\\"Firma\\\"));\\n\\t\\t\\tps.setInt(3, rs.getInt(\\\"Sifra\\\"));\\n\\t\\t\\tps.setString(4, rs.getString(\\\"Oznaka\\\"));\\n\\t\\t\\tps.setString(5, rs.getString(\\\"Opis\\\"));\\n\\t\\t\\tps.setInt(6, rs.getInt(\\\"NacinIzracuna\\\"));\\n\\t\\t\\tps.setDouble(7, rs.getDouble(\\\"Vrednost\\\"));\\n\\t\\t\\tps.addBatch();\\n\\t\\t\\ti++;\\n\\t\\t}\\n\\t\\tps.executeBatch();\\n\\t\\tcon2.commit();\\n\\t\\tSystem.out.println(String.format(\\\"%-26s -\\u003e %7d\\\", \\\"PTKTVrstePopustov\\\", i));\\n\\t\\trs.close();\\n\\t\\tps.close();\\n\\t}\"}","358":"{\"expressionStart\":{\"UNKNOWN.executeUpdate()\":186,\"String:Sifra\":908,\"PreparedStatement.setInt()\":922,\"String\":1037,\"Connection.createStatement()\":721,\"UNKNOWN.executeQuery()\":721,\"PreparedStatement.addBatch()\":1362,\"ResultSet.next()\":798,\"int:6\":1021,\"int:5\":978,\"int:4\":932,\"int:3\":895,\"int:9\":1149,\"int:8\":1104,\"int:7\":1061,\"PreparedStatement.executeBatch()\":1391,\"Connection.commit()\":1412,\"int:2\":858,\"int:1\":824,\"int:0\":102,\"ResultSet.getInt()\":827,\"PreparedStatement.setString()\":1008,\"String.format()\":1448,\"ResultSet.getString()\":1024,\"String:ID\":837,\"Connection.prepareStatement()\":548,\"String:%-26s -\\u003e %7d\":1462,\"\\u003ca\\u003e\":1380,\"int:10\":1194,\"int:11\":1238,\"int:12\":1280,\"int:13\":1326,\"UNKNOWN.println()\":1429},\"expressionEnd\":{\"UNKNOWN.executeUpdate()\":521,\"String:Sifra\":915,\"PreparedStatement.setInt()\":960,\"String\":1044,\"Connection.createStatement()\":743,\"UNKNOWN.executeQuery()\":787,\"PreparedStatement.addBatch()\":1375,\"ResultSet.next()\":807,\"int:6\":1022,\"int:5\":979,\"int:4\":933,\"int:3\":896,\"int:9\":1150,\"int:8\":1105,\"int:7\":1062,\"PreparedStatement.executeBatch()\":1408,\"Connection.commit()\":1425,\"int:2\":859,\"int:1\":825,\"int:0\":103,\"ResultSet.getInt()\":842,\"PreparedStatement.setString()\":1046,\"String.format()\":1497,\"ResultSet.getString()\":1045,\"String:ID\":841,\"Connection.prepareStatement()\":633,\"String:%-26s -\\u003e %7d\":1476,\"\\u003ca\\u003e\":1383,\"int:10\":1196,\"int:11\":1240,\"int:12\":1282,\"int:13\":1328,\"UNKNOWN.println()\":1498},\"rawCode\":\"private static void doPTMesRelacije(Connection con1, Connection con2) throws SQLException {\\n\\t\\tint i \\u003d 0;\\n\\t\\tcon2.createStatement().executeUpdate(\\\"drop table if exists PTMesRelacije;\\\");\\n\\t\\tcon2.createStatement().executeUpdate(\\\"CREATE TABLE PTMesRelacije(ID INT NOT NULL,Pgrid INT NOT NULL, Sifra int not Null,PrevoznikKarteID int,\\\" + \\\"Opis1 varchar(80),Opis2 VARCHAR(80),\\\" + \\\"OdPostajeID int, Via1PostajaID int, Via2PostajaID int, DoPostajeID int,\\\" + \\\"DistancaM int, DistancaVia1M int, DistancaVia2M,\\\" + \\\"PRIMARY KEY (ID))\\\");\\n\\t\\tPreparedStatement ps \\u003d con2.prepareStatement(\\\"INSERT INTO PTMesRelacije VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)\\\");\\n\\n\\t\\t// svi vazeci zadnjih 30 dana ili koji imaju neograniceno vazenje\\n\\t\\tResultSet rs \\u003d con1.createStatement().executeQuery(\\\"SELECT * FROM PTMesRelacije\\\");\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tps.setInt(1, rs.getInt(\\\"ID\\\"));\\n\\t\\t\\tps.setInt(2, rs.getInt(\\\"Pgrid\\\"));\\n\\t\\t\\tps.setInt(3, rs.getInt(\\\"Sifra\\\"));\\n\\t\\t\\tps.setInt(4, rs.getInt(\\\"PrevoznikID\\\"));\\n\\t\\t\\tps.setString(5, rs.getString(\\\"Opis1\\\"));\\n\\t\\t\\tps.setString(6, rs.getString(\\\"Opis2\\\"));\\n\\t\\t\\tps.setInt(7, rs.getInt(\\\"OdPostajeID\\\"));\\n\\t\\t\\tps.setInt(8, rs.getInt(\\\"Via1PostajaID\\\"));\\n\\t\\t\\tps.setInt(9, rs.getInt(\\\"Via2PostajaID\\\"));\\n\\t\\t\\tps.setInt(10, rs.getInt(\\\"DoPostajeID\\\"));\\n\\t\\t\\tps.setInt(11, rs.getInt(\\\"DistancaM\\\"));\\n\\t\\t\\tps.setInt(12, rs.getInt(\\\"DistancaVia1M\\\"));\\n\\t\\t\\tps.setInt(13, rs.getInt(\\\"DistancaVia2M\\\"));\\n\\t\\t\\tps.addBatch();\\n\\t\\t\\ti++;\\n\\t\\t}\\n\\t\\tps.executeBatch();\\n\\t\\tcon2.commit();\\n\\t\\tSystem.out.println(String.format(\\\"%-26s -\\u003e %7d\\\", \\\"PTMesRelacije\\\", i));\\n\\t}\"}","359":"{\"expressionStart\":{\"PreparedStatement.setString()\":682,\"String.format()\":811,\"UNKNOWN.executeUpdate()\":188,\"String:Sifra\":668,\"ResultSet.getString()\":698,\"PreparedStatement.setInt()\":574,\"String\":631,\"Connection.createStatement()\":188,\"UNKNOWN.executeQuery()\":481,\"PreparedStatement.addBatch()\":725,\"String:ID\":597,\"ResultSet.next()\":558,\"int:4\":695,\"int:3\":655,\"Connection.prepareStatement()\":372,\"PreparedStatement.executeBatch()\":754,\"String:%-26s -\\u003e %7d\":825,\"\\u003ca\\u003e\":743,\"Connection.commit()\":775,\"int:2\":618,\"int:1\":584,\"UNKNOWN.println()\":792,\"int:0\":104,\"ResultSet.getInt()\":621},\"expressionEnd\":{\"PreparedStatement.setString()\":720,\"String.format()\":860,\"UNKNOWN.executeUpdate()\":345,\"String:Sifra\":675,\"ResultSet.getString()\":719,\"PreparedStatement.setInt()\":603,\"String\":638,\"Connection.createStatement()\":210,\"UNKNOWN.executeQuery()\":547,\"PreparedStatement.addBatch()\":738,\"String:ID\":601,\"ResultSet.next()\":567,\"int:4\":696,\"int:3\":656,\"Connection.prepareStatement()\":462,\"PreparedStatement.executeBatch()\":771,\"String:%-26s -\\u003e %7d\":839,\"\\u003ca\\u003e\":746,\"Connection.commit()\":788,\"int:2\":619,\"int:1\":585,\"UNKNOWN.println()\":861,\"int:0\":105,\"ResultSet.getInt()\":639},\"rawCode\":\"private static void doPromAlmexMasine(Connection con1, Connection con2) throws SQLException {\\n\\t\\tint i \\u003d 0;\\n\\t\\tcon2.createStatement().executeUpdate(\\\"drop table if exists ZBAlmexMasine;\\\");\\n\\t\\tcon2.createStatement().executeUpdate(\\\"CREATE TABLE ZBAlmexMasine(ID INT NOT NULL,Pgrid INT NOT NULL,Sifra INT NOT NULL,Naziv VARCHAR(40), PRIMARY KEY (ID))\\\");\\n\\t\\tPreparedStatement ps \\u003d con2.prepareStatement(\\\"INSERT INTO ZBAlmexMasine (ID,PGRID,Sifra,Naziv) VALUES (?,?,?,?)\\\");\\n\\t\\tResultSet rs \\u003d con1.createStatement().executeQuery(\\\"SELECT * FROM ZBAlmexMasine\\\");\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tps.setInt(1, rs.getInt(\\\"ID\\\"));\\n\\t\\t\\tps.setInt(2, rs.getInt(\\\"PGRID\\\"));\\n\\t\\t\\tps.setInt(3, rs.getInt(\\\"Sifra\\\"));\\n\\t\\t\\tps.setString(4, rs.getString(\\\"Naziv\\\"));\\n\\t\\t\\tps.addBatch();\\n\\t\\t\\ti++;\\n\\t\\t}\\n\\t\\tps.executeBatch();\\n\\t\\tcon2.commit();\\n\\t\\tSystem.out.println(String.format(\\\"%-26s -\\u003e %7d\\\", \\\"ZBAlmexMasine\\\", i));\\n\\t}\"}","360":"{\"expressionStart\":{\"UNKNOWN.executeUpdate()\":506,\"PreparedStatement.setInt()\":1178,\"String\":1034,\"Connection.createStatement()\":753,\"UNKNOWN.executeQuery()\":753,\"PreparedStatement.addBatch()\":1263,\"ResultSet.next()\":833,\"int:6\":1063,\"int:5\":1021,\"int:4\":979,\"int:3\":930,\"int:9\":1188,\"int:8\":1146,\"PreparedStatement.executeBatch()\":1292,\"int:7\":1106,\"ResultSet.close()\":1406,\"PreparedStatement.setDouble()\":1220,\"Connection.commit()\":1313,\"int:2\":893,\"int:1\":859,\"String:Firma\":906,\"ResultSet.getDouble()\":1237,\"int:0\":105,\"ResultSet.getInt()\":1024,\"PreparedStatement.setString()\":966,\"String.format()\":1349,\"ResultSet.getString()\":982,\"String:ID\":872,\"Connection.prepareStatement()\":652,\"String:%-26s -\\u003e %7d\":1363,\"\\u003ca\\u003e\":1281,\"int:10\":1233,\"UNKNOWN.println()\":1330,\"PreparedStatement.close()\":1420},\"expressionEnd\":{\"UNKNOWN.executeUpdate()\":625,\"PreparedStatement.setInt()\":1215,\"String\":1046,\"Connection.createStatement()\":775,\"UNKNOWN.executeQuery()\":822,\"PreparedStatement.addBatch()\":1276,\"ResultSet.next()\":842,\"int:6\":1064,\"int:5\":1022,\"int:4\":980,\"int:3\":931,\"int:9\":1189,\"int:8\":1147,\"PreparedStatement.executeBatch()\":1309,\"int:7\":1107,\"ResultSet.close()\":1416,\"PreparedStatement.setDouble()\":1258,\"Connection.commit()\":1326,\"int:2\":894,\"int:1\":860,\"String:Firma\":913,\"ResultSet.getDouble()\":1257,\"int:0\":106,\"ResultSet.getInt()\":1047,\"PreparedStatement.setString()\":1006,\"String.format()\":1401,\"ResultSet.getString()\":1005,\"String:ID\":876,\"Connection.prepareStatement()\":734,\"String:%-26s -\\u003e %7d\":1377,\"\\u003ca\\u003e\":1284,\"int:10\":1235,\"UNKNOWN.println()\":1402,\"PreparedStatement.close()\":1430},\"rawCode\":\"private static void doPTIzjemeCenikaVR(Connection con1, Connection con2) throws SQLException {\\n\\t\\tint i \\u003d 0;\\n\\t\\tcon2.createStatement().executeUpdate(\\\"drop table if exists PTIzjemeCenikaVR;\\\");\\n\\t\\tcon2.createStatement().executeUpdate(\\\"CREATE TABLE PTIzjemeCenikaVR(ID INT NOT NULL,Firma INT NOT NULL,TarifniCenikID INT NOT NULL,VeljaOd DATETIME NOT NULL,VozniRedID INT NOT NULL,VarijantaID INT NOT NULL,StupacID INT NOT NULL,Postaja1ID INT NOT NULL,Postaja2ID INT NOT NULL,Cena FLOAT(53),PRIMARY KEY (ID))\\\");\\n\\t\\tcon2.createStatement().executeUpdate(\\\"CREATE INDEX [IXIzjemaTRID]  ON [PTIzjemeCenikaVR] ([TarifniCenikID],[VeljaOd])\\\");\\n\\t\\tPreparedStatement ps \\u003d con2.prepareStatement(\\\"INSERT INTO PTIzjemeCenikaVR VALUES (?,?,?,?,?,?,?,?,?,?)\\\");\\n\\t\\tResultSet rs \\u003d con1.createStatement().executeQuery(\\\"SELECT * FROM PTIzjemeCenikaVR\\\");\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tps.setInt(1, rs.getInt(\\\"ID\\\"));\\n\\t\\t\\tps.setInt(2, rs.getInt(\\\"Firma\\\"));\\n\\t\\t\\tps.setInt(3, rs.getInt(\\\"TarifniCenikID\\\"));\\n\\t\\t\\tps.setString(4, rs.getString(\\\"VeljaOd\\\"));\\n\\t\\t\\tps.setInt(5, rs.getInt(\\\"VozniRedID\\\"));\\n\\t\\t\\tps.setInt(6, rs.getInt(\\\"VarijantaID\\\"));\\n\\t\\t\\tps.setInt(7, rs.getInt(\\\"StupacID\\\"));\\n\\t\\t\\tps.setInt(8, rs.getInt(\\\"Postaja1ID\\\"));\\n\\t\\t\\tps.setInt(9, rs.getInt(\\\"Postaja2ID\\\"));\\n\\t\\t\\tps.setDouble(10, rs.getDouble(\\\"Cena\\\"));\\n\\t\\t\\tps.addBatch();\\n\\t\\t\\ti++;\\n\\t\\t}\\n\\t\\tps.executeBatch();\\n\\t\\tcon2.commit();\\n\\t\\tSystem.out.println(String.format(\\\"%-26s -\\u003e %7d\\\", \\\"PTIzjemeCenikaVR\\\", i));\\n\\t\\trs.close();\\n\\t\\tps.close();\\n\\t}\"}","361":"{\"expressionStart\":{\"UNKNOWN.executeUpdate()\":367,\"PreparedStatement.setInt()\":1682,\"String\":1478,\"Connection.createStatement()\":591,\"UNKNOWN.executeQuery()\":591,\"PreparedStatement.addBatch()\":1725,\"ResultSet.next()\":1400,\"int:6\":1653,\"int:5\":1611,\"int:4\":1554,\"int:3\":1514,\"PreparedStatement.executeBatch()\":1754,\"int:7\":1692,\"Connection.commit()\":1775,\"PreparedStatement.setDouble()\":1640,\"int:2\":1465,\"int:1\":1426,\"int:0\":107,\"ResultSet.getDouble()\":1656,\"ResultSet.getInt()\":1468,\"PreparedStatement.setString()\":1501,\"String.format()\":1811,\"ResultSet.getString()\":1517,\"Connection.prepareStatement()\":494,\"String:%-26s -\\u003e %7d\":1825,\"\\u003ca\\u003e\":1743,\"UNKNOWN.println()\":1792},\"expressionEnd\":{\"UNKNOWN.executeUpdate()\":467,\"PreparedStatement.setInt()\":1720,\"String\":1494,\"Connection.createStatement()\":613,\"UNKNOWN.executeQuery()\":1389,\"PreparedStatement.addBatch()\":1738,\"ResultSet.next()\":1409,\"int:6\":1654,\"int:5\":1612,\"int:4\":1555,\"int:3\":1515,\"PreparedStatement.executeBatch()\":1771,\"int:7\":1693,\"Connection.commit()\":1788,\"PreparedStatement.setDouble()\":1677,\"int:2\":1466,\"int:1\":1427,\"int:0\":108,\"ResultSet.getDouble()\":1676,\"ResultSet.getInt()\":1495,\"PreparedStatement.setString()\":1539,\"String.format()\":1865,\"ResultSet.getString()\":1538,\"Connection.prepareStatement()\":572,\"String:%-26s -\\u003e %7d\":1839,\"\\u003ca\\u003e\":1746,\"UNKNOWN.println()\":1866},\"rawCode\":\"private static void doPTMobilnaZaduzenja(Connection con1, Connection con2) throws SQLException {\\n\\t\\tint i \\u003d 0;\\n\\t\\tcon2.createStatement().executeUpdate(\\\"Drop table if exists PTMobilnaZaduzenja;\\\");\\n\\t\\tcon2.createStatement().executeUpdate(\\\"CREATE TABLE PTMobilnaZaduzenja(VozacID int, ZBVPID, Datum DATETIME, OdBroja int, DoBroja Int, Cena FLOAT(53), SifraValute int)\\\");\\n\\t\\tcon2.createStatement().executeUpdate(\\\"CREATE INDEX [IXMZVozac] ON [PTMobilnaZaduzenja] ([VozacID])\\\");\\n\\t\\tPreparedStatement ps \\u003d con2.prepareStatement(\\\"INSERT INTO PTMobilnaZaduzenja VALUES (?,?,?,?,?,?,?)\\\");\\n\\t\\tResultSet rs \\u003d con1.createStatement().executeQuery(\\\"select OBV.VrstaPrometaID, OBR.Datum, OBR.Vozac1ID as VozacID, OBV.zaduzenjeOdBroja as OdBroja, OBV.zaduzenjeDoBroja as DoBroja, \\\" + \\\"OBV.zaduzenjeDoBroja - (coalesce(OBV.ZaduzenjeKomada,0) - coalesce(OBV.BrojKarata,0) - coalesce(OBV.RazduzenjeKomada,0)) + 1 as _OdBroja,Coalesce(OBV.ZaduzenjeCena,0) as Cena, \\\" + \\\"OBV.SifraValute,(coalesce(OBV.ZaduzenjeKomada,0) - coalesce(OBV.BrojKarata,0) - coalesce(OBV.RazduzenjeKomada,0)) as StanjeZaduzenja \\\" + \\\"from ZBObracuniVrstice OBV \\\" + \\\"inner join ZBObracuni OBR ON OBR.ID\\u003dOBV.IDDokumenta \\\" + \\\"inner join ZBVrstePrometa VP ON OBV.VrstaPrometaID\\u003dVP.ID \\\" + \\\"where VP.Zaduzenja\\u003d1 and OBV.ZaduzenjeKomada is not null \\\" + \\\"and (OBV.ZaduzenjeKomada - Coalesce(OBV.BrojKarata,0) - Coalesce(OBV.RazduzenjeKomada,0) \\u003e 0)\\\");\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tps.setInt(1, rs.getInt(\\\"VozacID\\\"));\\n\\t\\t\\tps.setInt(2, rs.getInt(\\\"VrstaPrometaID\\\"));\\n\\t\\t\\tps.setString(3, rs.getString(\\\"Datum\\\"));\\n\\t\\t\\tps.setInt(4, rs.getInt(\\\"_OdBroja\\\")); // calc od broja\\n\\t\\t\\tps.setInt(5, rs.getInt(\\\"DoBroja\\\"));\\n\\t\\t\\tps.setDouble(6, rs.getDouble(\\\"Cena\\\"));\\n\\t\\t\\tps.setInt(7, rs.getInt(\\\"SifraValute\\\"));\\n\\t\\t\\tps.addBatch();\\n\\t\\t\\ti++;\\n\\t\\t}\\n\\t\\tps.executeBatch();\\n\\t\\tcon2.commit();\\n\\t\\tSystem.out.println(String.format(\\\"%-26s -\\u003e %7d\\\", \\\"PTMobilnaZaduzenja\\\", i));\\n\\t}\"}","362":"{\"expressionStart\":{\"BlockEvent.\\u003cinit\\u003e\":843,\"Map.Entry.getKey()\":1122,\"ResultSet.getString()\":270,\"String\":544,\"\\u003creturn\\u003e\":1205,\"ResultSet.next()\":219,\"BlockEvents.\\u003cinit\\u003e\":1106,\"List.add()\":827,\"ArrayList.\\u003cinit\\u003e\":713,\"Timestamp.from()\":337,\"UNKNOWN.toLocalDateTime()\":337,\"Map.size()\":955,\"HashMap.\\u003cinit\\u003e\":183,\"Map.entrySet()\":1050,\"UNKNOWN.valueOf()\":507,\"Map.Entry.getValue()\":1148,\"ResultSet.getTimestamp()\":352,\"Map.get()\":608,\"\\u003cnullcheck\\u003e\":656,\"Map.put()\":752,\"ResultSet.getInt()\":436},\"expressionEnd\":{\"BlockEvent.\\u003cinit\\u003e\":876,\"Map.Entry.getKey()\":1146,\"ResultSet.getString()\":292,\"String\":556,\"\\u003creturn\\u003e\":1219,\"ResultSet.next()\":228,\"BlockEvents.\\u003cinit\\u003e\":1175,\"List.add()\":877,\"ArrayList.\\u003cinit\\u003e\":730,\"Timestamp.from()\":382,\"UNKNOWN.toLocalDateTime()\":400,\"Map.size()\":976,\"HashMap.\\u003cinit\\u003e\":198,\"Map.entrySet()\":1075,\"UNKNOWN.valueOf()\":558,\"Map.Entry.getValue()\":1174,\"ResultSet.getTimestamp()\":381,\"Map.get()\":634,\"\\u003cnullcheck\\u003e\":675,\"Map.put()\":791,\"ResultSet.getInt()\":460},\"rawCode\":\"@Override\\n        public List\\u003cBlockEvents\\u003e extractData(final ResultSet rs) throws SQLException, DataAccessException {\\n            final Map\\u003cString, List\\u003cBlockEvent\\u003e\\u003e blockEventsMap \\u003d new HashMap\\u003c\\u003e();\\n            while (rs.next()) {\\n                final String prefix \\u003d rs.getString(\\\"prefix\\\");\\n                final LocalDateTime time \\u003d Timestamp.from(rs.getTimestamp(\\\"event_time\\\")).toLocalDateTime();\\n                final int limit \\u003d rs.getInt(\\\"daily_limit\\\");\\n                final BlockEvent.Type type \\u003d BlockEvent.Type.valueOf(rs.getString(\\\"event_type\\\"));\\n\\n                List\\u003cBlockEvent\\u003e blockEvents \\u003d blockEventsMap.get(prefix);\\n                if (blockEvents \\u003d\\u003d null) {\\n                    blockEvents \\u003d new ArrayList\\u003c\\u003e();\\n                    blockEventsMap.put(prefix, blockEvents);\\n                }\\n                blockEvents.add(new BlockEvent(time, limit, type));\\n            }\\n\\n            final List\\u003cBlockEvents\\u003e result \\u003d new ArrayList\\u003c\\u003e(blockEventsMap.size());\\n            for (Map.Entry\\u003cString, List\\u003cBlockEvent\\u003e\\u003e blockEventEntry : blockEventsMap.entrySet()) {\\n                result.add(new BlockEvents(blockEventEntry.getKey(), blockEventEntry.getValue()));\\n            }\\n\\n            return result;\\n        }\"}","363":"{\"expressionStart\":{\"IpInterval.parse()\":192,\"IpResourceEntry.\\u003cinit\\u003e\":170,\"ResultSet.getString()\":133,\"\\u003creturn\\u003e\":163,\"int:1\":146},\"expressionEnd\":{\"IpInterval.parse()\":216,\"IpResourceEntry.\\u003cinit\\u003e\":231,\"ResultSet.getString()\":148,\"\\u003creturn\\u003e\":232,\"int:1\":147},\"rawCode\":\"@Override\\n        public IpResourceEntry\\u003cBoolean\\u003e mapRow(ResultSet rs, int rowNum) throws SQLException {\\n            String prefix \\u003d rs.getString(1);\\n\\n            return new IpResourceEntry\\u003c\\u003e(IpInterval.parse(prefix), Boolean.TRUE);\\n        }\"}","364":"{\"expressionStart\":{\"IpInterval.parse()\":230,\"IpResourceEntry.\\u003cinit\\u003e\":208,\"ResultSet.getString()\":133,\"int:2\":184,\"int:1\":146,\"\\u003creturn\\u003e\":201,\"ResultSet.getInt()\":174},\"expressionEnd\":{\"IpInterval.parse()\":254,\"IpResourceEntry.\\u003cinit\\u003e\":262,\"ResultSet.getString()\":148,\"int:2\":185,\"int:1\":147,\"\\u003creturn\\u003e\":263,\"ResultSet.getInt()\":186},\"rawCode\":\"@Override\\n        public IpResourceEntry\\u003cInteger\\u003e mapRow(ResultSet rs, int rowNum) throws SQLException {\\n            String prefix \\u003d rs.getString(1);\\n            int limit \\u003d rs.getInt(2);\\n\\n            return new IpResourceEntry\\u003c\\u003e(IpInterval.parse(prefix), limit);\\n        }\"}","365":"{\"expressionStart\":{\"String.equals()\":558,\"DatabaseMetaDataNotSupportedTest.fail()\":966,\"Statement.execute()\":483,\"DatabaseMetaData.getTables()\":80,\"ResultSet.close()\":689,\"null:null\":107,\"ResultSet.getString()\":192,\"String:TABLE_NAME\":210,\"Connection.getMetaData()\":899,\"String\":971,\"SQLException.toString()\":1000,\"ResultSet.next()\":139},\"expressionEnd\":{\"String.equals()\":585,\"DatabaseMetaDataNotSupportedTest.fail()\":1013,\"Statement.execute()\":529,\"DatabaseMetaData.getTables()\":118,\"ResultSet.close()\":704,\"null:null\":111,\"ResultSet.getString()\":223,\"String:TABLE_NAME\":222,\"Connection.getMetaData()\":917,\"String\":997,\"SQLException.toString()\":1012,\"ResultSet.next()\":153},\"rawCode\":\"private void createTestTables() {\\n        try {\\n            ResultSet userTab \\u003d meta.getTables(null, null, null, null);\\n            while (userTab.next()) {\\n                String tableName \\u003d userTab.getString(\\\"TABLE_NAME\\\");\\n                if (tableName.equals(DatabaseCreator.TEST_TABLE1)) {\\n                    statement.execute(DatabaseCreator.DROP_TABLE1);\\n                } else if (tableName\\n                        .equals(DatabaseCreator.TEST_TABLE3)) {\\n                    statement.execute(DatabaseCreator.DROP_TABLE3);\\n                } else if (tableName.equals(VIEW_NAME)) {\\n                    statement.execute(DROP_VIEW_QUERY);\\n                }\\n            }\\n            userTab.close();\\n            statement.execute(DatabaseCreator.CREATE_TABLE3);\\n            statement.execute(DatabaseCreator.CREATE_TABLE1);\\n            statement.execute(CREATE_VIEW_QUERY);\\n            meta \\u003d conn.getMetaData();\\n        } catch (SQLException e) {\\n            fail(\\\"Unexpected SQLException \\\" + e.toString());\\n        }\\n    }\"}","366":"{\"expressionStart\":{\"String:PRIVILEGE\":1638,\"DatabaseMetaDataNotSupportedTest.assertEquals()\":1742,\"String:TABLE_SCHEM\":1425,\"HashSet.remove()\":1672,\"String:%\":337,\"String:TABLE_CAT\":1350,\"String: FROM \":2324,\"String:TABLE_NAME\":1557,\"\\u003cr\\u003e\":2707,\"String\":1755,\"ResultSet.next()\":668,\"Connection.getCatalog()\":2973,\"HashSet.add()\":2744,\"DatabaseMetaDataNotSupportedTest.assertFalse()\":4558,\"ResultSet.close()\":4624,\"String:GRANTOR\":1863,\"HashSet.\\u003cinit\\u003e\":2660,\"DatabaseMetaData.getTablePrivileges()\":4507,\"int:0\":2704,\"String:GRANTEE\":1987,\"ResultSet.getString()\":1842,\"HashSet.isEmpty()\":2205,\"DatabaseMetaDataNotSupportedTest.assertNull()\":3220,\"{String}\":2482,\"DatabaseMetaDataNotSupportedTest.assertTrue()\":2160,\"Statement.execute()\":2901,\"String[].arrayget()\":2762,\"null:null\":2992,\"\\u003ca\\u003e\":2725},\"expressionEnd\":{\"String:PRIVILEGE\":1649,\"DatabaseMetaDataNotSupportedTest.assertEquals()\":1874,\"String:TABLE_SCHEM\":1438,\"HashSet.remove()\":1727,\"String:%\":340,\"String:TABLE_CAT\":1361,\"String: FROM \":2332,\"String:TABLE_NAME\":1569,\"\\u003cr\\u003e\":2723,\"String\":1770,\"ResultSet.next()\":685,\"Connection.getCatalog()\":2990,\"HashSet.add()\":2771,\"DatabaseMetaDataNotSupportedTest.assertFalse()\":4614,\"ResultSet.close()\":4642,\"String:GRANTOR\":1872,\"HashSet.\\u003cinit\\u003e\":2681,\"DatabaseMetaData.getTablePrivileges()\":4548,\"int:0\":2705,\"String:GRANTEE\":1996,\"ResultSet.getString()\":1873,\"HashSet.isEmpty()\":2228,\"DatabaseMetaDataNotSupportedTest.assertNull()\":3283,\"{String}\":2634,\"DatabaseMetaDataNotSupportedTest.assertTrue()\":2229,\"Statement.execute()\":2925,\"String[].arrayget()\":2770,\"null:null\":2996,\"\\u003ca\\u003e\":2728},\"rawCode\":\"@KnownFailure(\\\"not supported. Privileges are not supported.\\\")\\n    public void test_getTablePrivilegesLjava_lang_StringLjava_lang_StringLjava_lang_String()\\n            throws SQLException {\\n        // case 1. Get privileges when no privilegies exist for one table\\n        ResultSet privileges \\u003d meta.getTablePrivileges(conn.getCatalog(), \\\"%\\\",\\n                DatabaseCreator.TEST_TABLE3);\\n        assertFalse(\\\"Some privilegies exist\\\", privileges.next());\\n        privileges.close();\\n\\n        // case 2. Get privileges when no privilegies exist for all tables\\n        privileges \\u003d meta.getTablePrivileges(null, null, null);\\n        assertFalse(\\\"Some privilegies exist\\\", privileges.next());\\n        privileges.close();\\n\\n        // case 3. grant CREATE and SELECT privileges ang get them\\n        HashSet\\u003cString\\u003e expectedPrivs \\u003d new HashSet\\u003cString\\u003e();\\n        expectedPrivs.add(\\\"CREATE\\\");\\n        expectedPrivs.add(\\\"SELECT\\\");\\n\\n        String query \\u003d \\\"GRANT CREATE, SELECT ON \\\" + DatabaseCreator.TEST_TABLE3\\n                + \\\" TO \\\" + Support_SQL.sqlUser;\\n        statement.execute(query);\\n\\n        privileges \\u003d meta.getTablePrivileges(conn.getCatalog(), null,\\n                DatabaseCreator.TEST_TABLE3);\\n\\n        while (privileges.next()) {\\n            assertEquals(\\\"Wrong catalog name\\\", Support_SQL.sqlCatalog,\\n                    privileges.getString(\\\"TABLE_CAT\\\"));\\n            assertNull(\\\"Wrong schema\\\", privileges.getString(\\\"TABLE_SCHEM\\\"));\\n            assertEquals(\\\"Wrong table name\\\", DatabaseCreator.TEST_TABLE3,\\n                    privileges.getString(\\\"TABLE_NAME\\\"));\\n            assertTrue(\\\"Wrong privilege \\\" + privileges.getString(\\\"PRIVILEGE\\\"),\\n                    expectedPrivs.remove(privileges.getString(\\\"PRIVILEGE\\\")));\\n            assertEquals(\\\"Wrong grantor\\\", Support_SQL.sqlLogin + \\\"@\\\"\\n                    + Support_SQL.sqlHost, privileges.getString(\\\"GRANTOR\\\"));\\n            assertEquals(\\\"Wrong grantee\\\", Support_SQL.sqlUser + \\\"@%\\\",\\n                    privileges.getString(\\\"GRANTEE\\\"));\\n            assertNull(\\\"Wrong value of IS_GRANTABLE\\\", privileges\\n                    .getString(\\\"IS_GRANTABLE\\\"));\\n        }\\n        privileges.close();\\n        assertTrue(\\\"Wrong privileges were returned\\\", expectedPrivs.isEmpty());\\n\\n        query \\u003d \\\"REVOKE CREATE, SELECT ON \\\" + DatabaseCreator.TEST_TABLE3\\n                + \\\" FROM \\\" + Support_SQL.sqlUser;\\n        statement.execute(query);\\n\\n        // case 4. grant all privileges ang get them\\n        String[] privs \\u003d new String[] { \\\"ALTER\\\", \\\"CREATE\\\", \\\"CREATE VIEW\\\",\\n                \\\"DELETE\\\", \\\"DROP\\\", \\\"INDEX\\\", \\\"INSERT\\\", \\\"REFERENCES\\\", \\\"SELECT\\\",\\n                \\\"SHOW VIEW\\\", \\\"UPDATE\\\" };\\n        expectedPrivs \\u003d new HashSet\\u003cString\\u003e();\\n        for (int i \\u003d 0; i \\u003c privs.length; i++) {\\n            expectedPrivs.add(privs[i]);\\n        }\\n        query \\u003d \\\"GRANT ALL ON \\\" + DatabaseCreator.TEST_TABLE3 + \\\" TO \\\"\\n                + Support_SQL.sqlUser;\\n        statement.execute(query);\\n\\n        privileges \\u003d meta.getTablePrivileges(conn.getCatalog(), null,\\n                DatabaseCreator.TEST_TABLE3);\\n\\n        while (privileges.next()) {\\n            assertEquals(\\\"Wrong catalog name\\\", Support_SQL.sqlCatalog,\\n                    privileges.getString(\\\"TABLE_CAT\\\"));\\n            assertNull(\\\"Wrong schema\\\", privileges.getString(\\\"TABLE_SCHEM\\\"));\\n            assertEquals(\\\"Wrong table name\\\", DatabaseCreator.TEST_TABLE3,\\n                    privileges.getString(\\\"TABLE_NAME\\\"));\\n            assertTrue(\\\"Wrong privilege \\\" + privileges.getString(\\\"PRIVILEGE\\\"),\\n                    expectedPrivs.remove(privileges.getString(\\\"PRIVILEGE\\\")));\\n            assertEquals(\\\"Wrong grantor\\\", Support_SQL.sqlLogin + \\\"@\\\"\\n                    + Support_SQL.sqlHost, privileges.getString(\\\"GRANTOR\\\"));\\n            assertEquals(\\\"Wrong grantee\\\", Support_SQL.sqlUser + \\\"@%\\\",\\n                    privileges.getString(\\\"GRANTEE\\\"));\\n            assertNull(\\\"Wrong value of IS_GRANTABLE\\\", privileges\\n                    .getString(\\\"IS_GRANTABLE\\\"));\\n        }\\n        privileges.close();\\n        assertTrue(\\\"Wrong privileges were returned\\\", expectedPrivs.isEmpty());\\n\\n        query \\u003d \\\"REVOKE ALL ON \\\" + DatabaseCreator.TEST_TABLE3 + \\\" FROM \\\"\\n                + Support_SQL.sqlUser;\\n        statement.execute(query);\\n\\n        // case 5. check no privelegies after revoke\\n        privileges \\u003d meta.getTablePrivileges(conn.getCatalog(), \\\"%\\\",\\n                DatabaseCreator.TEST_TABLE3);\\n        assertFalse(\\\"Some privilegies exist\\\", privileges.next());\\n        privileges.close();\\n\\n        privileges \\u003d meta.getTablePrivileges(null, null, null);\\n        assertFalse(\\\"Some privilegies exist\\\", privileges.next());\\n        privileges.close();\\n    }\"}","367":"{\"expressionStart\":{\"DatabaseMetaDataNotSupportedTest.assertEquals()\":1089,\"\\u003cr\\u003e\":813,\"String:UPDATE_RULE\":702,\"String\":1216,\"String:FKTABLE_SCHEM\":625,\"ResultSet.next()\":365,\"Connection.getCatalog()\":200,\"ResultSetMetaData.getColumnCount()\":395,\"String:DEFERRABILITY\":770,\"String:FKCOLUMN_NAME\":658,\"ResultSet.getShort()\":2647,\"ResultSetMetaData.getColumnName()\":900,\"ResultSet.close()\":2711,\"String:FKTABLE_CAT\":594,\"DatabaseMetaDataNotSupportedTest.assertNotNull()\":2370,\"DatabaseMetaData.getExportedKeys()\":179,\"int:1\":810,\"String:PKTABLE_CAT\":513,\"String:PK_NAME\":743,\"String:PKTABLE_SCHEM\":528,\"String:PKCOLUMN_NAME\":577,\"String:FK_NAME\":732,\"String:KEY_SEQ\":675,\"String:PKTABLE_NAME\":561,\"ResultSet.getString()\":1631,\"ResultSet.getMetaData()\":304,\"String:Incorrect number of columns\":439,\"String:Incorrect column name\":855,\"{String}\":511,\"String:DELETE_RULE\":717,\"DatabaseMetaDataNotSupportedTest.assertTrue()\":330,\"String[].arrayget()\":880,\"null:null\":1140,\"\\u003ca\\u003e\":823,\"int:14\":470,\"String:FKTABLE_NAME\":642},\"expressionEnd\":{\"DatabaseMetaDataNotSupportedTest.assertEquals()\":1193,\"\\u003cr\\u003e\":821,\"String:UPDATE_RULE\":715,\"String\":1250,\"String:FKTABLE_SCHEM\":640,\"ResultSet.next()\":374,\"Connection.getCatalog()\":217,\"ResultSetMetaData.getColumnCount()\":416,\"String:DEFERRABILITY\":785,\"String:FKCOLUMN_NAME\":673,\"ResultSet.getShort()\":2700,\"ResultSetMetaData.getColumnName()\":942,\"ResultSet.close()\":2721,\"String:FKTABLE_CAT\":607,\"DatabaseMetaDataNotSupportedTest.assertNotNull()\":2438,\"DatabaseMetaData.getExportedKeys()\":269,\"int:1\":811,\"String:PKTABLE_CAT\":526,\"String:PK_NAME\":752,\"String:PKTABLE_SCHEM\":543,\"String:PKCOLUMN_NAME\":592,\"String:FK_NAME\":741,\"String:KEY_SEQ\":684,\"String:PKTABLE_NAME\":575,\"ResultSet.getString()\":1677,\"ResultSet.getMetaData()\":320,\"String:Incorrect number of columns\":468,\"String:Incorrect column name\":878,\"{String}\":787,\"String:DELETE_RULE\":730,\"DatabaseMetaDataNotSupportedTest.assertTrue()\":375,\"String[].arrayget()\":898,\"null:null\":1144,\"\\u003ca\\u003e\":826,\"int:14\":472,\"String:FKTABLE_NAME\":656},\"rawCode\":\"@KnownFailure(\\\"not supported\\\")\\n     public void test_getExportedKeysLjava_lang_StringLjava_lang_StringLjava_lang_String()\\n            throws SQLException {\\n        ResultSet rs \\u003d meta.getExportedKeys(conn.getCatalog(), null,\\n                DatabaseCreator.TEST_TABLE3);\\n        ResultSetMetaData rsmd \\u003d rs.getMetaData();\\n        assertTrue(\\\"Rows do not obtained\\\", rs.next());\\n        int col \\u003d rsmd.getColumnCount();\\n        assertEquals(\\\"Incorrect number of columns\\\", 14, col);\\n        String[] columnNames \\u003d { \\\"PKTABLE_CAT\\\", \\\"PKTABLE_SCHEM\\\",\\n                \\\"PKTABLE_NAME\\\", \\\"PKCOLUMN_NAME\\\", \\\"FKTABLE_CAT\\\",\\n                \\\"FKTABLE_SCHEM\\\", \\\"FKTABLE_NAME\\\", \\\"FKCOLUMN_NAME\\\", \\\"KEY_SEQ\\\",\\n                \\\"UPDATE_RULE\\\", \\\"DELETE_RULE\\\", \\\"FK_NAME\\\", \\\"PK_NAME\\\",\\n                \\\"DEFERRABILITY\\\" };\\n        for (int c \\u003d 1; c \\u003c\\u003d col; ++c) {\\n            assertEquals(\\\"Incorrect column name\\\", columnNames[c - 1], rsmd\\n                    .getColumnName(c));\\n        }\\n\\n        assertEquals(\\\"Incorrect primary key table catalog\\\", conn.getCatalog(),\\n                rs.getString(\\\"PKTABLE_CAT\\\"));\\n        assertEquals(\\\"Incorrect primary key table schema\\\", null, rs\\n                .getString(\\\"PKTABLE_SCHEM\\\"));\\n        assertEquals(\\\"Incorrect primary key table name\\\",\\n                DatabaseCreator.TEST_TABLE3, rs.getString(\\\"PKTABLE_NAME\\\"));\\n        assertEquals(\\\"Incorrect primary key column name\\\", \\\"fk\\\", rs\\n                .getString(\\\"PKCOLUMN_NAME\\\"));\\n        assertEquals(\\\"Incorrect foreign key table catalog\\\", conn.getCatalog(),\\n                rs.getString(\\\"FKTABLE_CAT\\\"));\\n        assertEquals(\\\"Incorrect foreign key table schema\\\", null, rs\\n                .getString(\\\"FKTABLE_SCHEM\\\"));\\n        assertEquals(\\\"Incorrect foreign key table name\\\",\\n                DatabaseCreator.TEST_TABLE1, rs.getString(\\\"FKTABLE_NAME\\\"));\\n        assertEquals(\\\"Incorrect foreign key column name\\\", \\\"fkey\\\", rs\\n                .getString(\\\"FKCOLUMN_NAME\\\"));\\n        assertEquals(\\\"Incorrect sequence number within foreign key\\\", 1, rs\\n                .getShort(\\\"KEY_SEQ\\\"));\\n        assertEquals(\\\"Incorrect update rule value\\\",\\n                DatabaseMetaData.importedKeyNoAction, rs\\n                        .getShort(\\\"UPDATE_RULE\\\"));\\n        assertEquals(\\\"Incorrect delete rule value\\\",\\n                DatabaseMetaData.importedKeyNoAction, rs\\n                        .getShort(\\\"DELETE_RULE\\\"));\\n        assertNotNull(\\\"Incorrect foreign key name\\\", rs.getString(\\\"FK_NAME\\\"));\\n        assertEquals(\\\"Incorrect primary key name\\\", null, rs\\n                .getString(\\\"PK_NAME\\\"));\\n        assertEquals(\\\"Incorrect deferrability\\\",\\n                DatabaseMetaData.importedKeyNotDeferrable, rs\\n                        .getShort(\\\"DEFERRABILITY\\\"));\\n        rs.close();\\n    }\"}","368":"{\"expressionStart\":{\"String:PRIVILEGE\":1055,\"DatabaseMetaDataNotSupportedTest.assertEquals()\":1638,\"String:TABLE_SCHEM\":973,\"String:COLUMN_NAME\":1018,\"String:TABLE_CAT\":960,\"String:TABLE_NAME\":988,\"\\u003cr\\u003e\":1126,\"String: FROM \":2205,\"UNKNOWN.toLowerCase()\":1851,\"String\":789,\"ResultSet.next()\":813,\"Connection.getCatalog()\":660,\"ResultSetMetaData.getColumnCount()\":843,\"DatabaseMetaDataNotSupportedTest.assertFalse()\":392,\"int:8\":918,\"ResultSetMetaData.getColumnName()\":1213,\"ResultSet.close()\":2280,\"String:GRANTOR\":1033,\"int:1\":1123,\"String:GRANTEE\":1044,\"ResultSet.getMetaData()\":752,\"ResultSet.getString()\":1851,\"String:Incorrect number of columns\":887,\"String:Incorrect column name\":1168,\"String:id\":326,\"{String}\":958,\"DatabaseMetaDataNotSupportedTest.assertTrue()\":778,\"DatabaseMetaData.getColumnPrivileges()\":635,\"Statement.execute()\":2246,\"String[].arrayget()\":1193,\"null:null\":679,\"UNKNOWN.indexOf()\":1947,\"\\u003ca\\u003e\":1136},\"expressionEnd\":{\"String:PRIVILEGE\":1066,\"DatabaseMetaDataNotSupportedTest.assertEquals()\":1741,\"String:TABLE_SCHEM\":986,\"String:COLUMN_NAME\":1031,\"String:TABLE_CAT\":971,\"String:TABLE_NAME\":1000,\"\\u003cr\\u003e\":1134,\"String: FROM \":2213,\"UNKNOWN.toLowerCase()\":1888,\"String\":811,\"ResultSet.next()\":822,\"Connection.getCatalog()\":677,\"ResultSetMetaData.getColumnCount()\":864,\"DatabaseMetaDataNotSupportedTest.assertFalse()\":435,\"int:8\":919,\"ResultSetMetaData.getColumnName()\":1255,\"ResultSet.close()\":2290,\"String:GRANTOR\":1042,\"int:1\":1124,\"String:GRANTEE\":1053,\"ResultSet.getMetaData()\":768,\"ResultSet.getString()\":1874,\"String:Incorrect number of columns\":916,\"String:Incorrect column name\":1191,\"String:id\":330,\"{String}\":1100,\"DatabaseMetaDataNotSupportedTest.assertTrue()\":823,\"DatabaseMetaData.getColumnPrivileges()\":735,\"Statement.execute()\":2270,\"String[].arrayget()\":1211,\"null:null\":683,\"UNKNOWN.indexOf()\":1986,\"\\u003ca\\u003e\":1139},\"rawCode\":\"@KnownFailure(\\\"not supported. Privileges are not supported.\\\")\\n     public void test_getColumnPrivilegesLjava_lang_StringLjava_lang_StringLjava_lang_StringLjava_lang_String()\\n            throws SQLException {\\n        ResultSet rs \\u003d meta.getColumnPrivileges(conn.getCatalog(), null,\\n                DatabaseCreator.TEST_TABLE1, \\\"id\\\");\\n        ResultSetMetaData rsmd \\u003d rs.getMetaData();\\n        assertFalse(\\\"Rows are obtained\\\", rs.next());\\n        rs.close();\\n\\n        String query \\u003d \\\"GRANT REFERENCES(id) ON \\\" + DatabaseCreator.TEST_TABLE1\\n                + \\\" TO \\\" + Support_SQL.sqlLogin;\\n        statement.execute(query);\\n\\n        rs \\u003d meta.getColumnPrivileges(conn.getCatalog(), null,\\n                DatabaseCreator.TEST_TABLE1, \\\"id\\\");\\n        rsmd \\u003d rs.getMetaData();\\n        assertTrue(\\\"Rows do not obtained\\\", rs.next());\\n        int col \\u003d rsmd.getColumnCount();\\n        assertEquals(\\\"Incorrect number of columns\\\", 8, col);\\n        String[] columnNames \\u003d { \\\"TABLE_CAT\\\", \\\"TABLE_SCHEM\\\", \\\"TABLE_NAME\\\",\\n                \\\"COLUMN_NAME\\\", \\\"GRANTOR\\\", \\\"GRANTEE\\\", \\\"PRIVILEGE\\\",\\n                \\\"IS_GRANTABLE\\\" };\\n        for (int c \\u003d 1; c \\u003c\\u003d col; ++c) {\\n            assertEquals(\\\"Incorrect column name\\\", columnNames[c - 1], rsmd\\n                    .getColumnName(c));\\n        }\\n        assertEquals(\\\"Incorrect table catalogue\\\", conn.getCatalog(), rs\\n                .getString(\\\"TABLE_CAT\\\").toLowerCase());\\n        assertEquals(\\\"Incorrect table schema\\\", null, rs\\n                .getString(\\\"TABLE_SCHEM\\\"));\\n        assertEquals(\\\"Incorrect table name\\\", DatabaseCreator.TEST_TABLE1, rs\\n                .getString(\\\"TABLE_NAME\\\").toLowerCase());\\n        assertEquals(\\\"Incorrect column name\\\", \\\"id\\\", rs.getString(\\\"COLUMN_NAME\\\")\\n                .toLowerCase());\\n        assertEquals(\\\"Incorrect grantor\\\", Support_SQL.sqlLogin + \\\"@\\\"\\n                + Support_SQL.sqlHost, rs.getString(\\\"GRANTOR\\\").toLowerCase());\\n        assertTrue(\\\"Incorrect grantee\\\",\\n                rs.getString(\\\"GRANTEE\\\").indexOf(\\\"root\\\") !\\u003d -1);\\n        assertEquals(\\\"Incorrect privilege\\\", \\\"references\\\", rs.getString(\\n                \\\"PRIVILEGE\\\").toLowerCase());\\n\\n        query \\u003d \\\"REVOKE REFERENCES(id) ON \\\" + DatabaseCreator.TEST_TABLE1\\n                + \\\" FROM \\\" + Support_SQL.sqlLogin;\\n        statement.execute(query);\\n        rs.close();\\n    }\"}","369":"{\"expressionStart\":{\"DatabaseMetaDataNotSupportedTest.assertEquals()\":1951,\"String:TABLE_SCHEM\":567,\"String:COLUMN_NAME\":703,\"boolean:false\":179,\"String:TABLE_CAT\":554,\"String:TABLE_NAME\":582,\"\\u003cr\\u003e\":819,\"UNKNOWN.toLowerCase()\":2003,\"String\":2085,\"Connection.getCatalog()\":227,\"ResultSet.next()\":406,\"ResultSetMetaData.getColumnCount()\":436,\"DatabaseMetaData.getIndexInfo()\":209,\"ResultSet.getShort()\":1810,\"ResultSet.getBoolean()\":1354,\"ResultSetMetaData.getColumnName()\":906,\"ResultSet.close()\":2330,\"int:1\":816,\"int:0\":2189,\"ResultSet.getInt()\":2113,\"String:\":1449,\"ResultSet.getString()\":2003,\"ResultSet.getMetaData()\":345,\"String:Incorrect number of columns\":480,\"String:Incorrect column name\":861,\"String:id\":1907,\"{String}\":552,\"boolean:true\":305,\"DatabaseMetaDataNotSupportedTest.assertTrue()\":371,\"String[].arrayget()\":886,\"null:null\":246,\"\\u003ca\\u003e\":829,\"int:13\":511,\"String:ORDINAL_POSITION\":683},\"expressionEnd\":{\"DatabaseMetaDataNotSupportedTest.assertEquals()\":2062,\"String:TABLE_SCHEM\":580,\"String:COLUMN_NAME\":716,\"boolean:false\":184,\"String:TABLE_CAT\":565,\"String:TABLE_NAME\":594,\"\\u003cr\\u003e\":827,\"UNKNOWN.toLowerCase()\":2061,\"String\":2108,\"Connection.getCatalog()\":244,\"ResultSet.next()\":415,\"ResultSetMetaData.getColumnCount()\":457,\"DatabaseMetaData.getIndexInfo()\":310,\"ResultSet.getShort()\":1858,\"ResultSet.getBoolean()\":1398,\"ResultSetMetaData.getColumnName()\":948,\"ResultSet.close()\":2340,\"int:1\":817,\"int:0\":2190,\"ResultSet.getInt()\":2137,\"String:\":1451,\"ResultSet.getString()\":2047,\"ResultSet.getMetaData()\":361,\"String:Incorrect number of columns\":509,\"String:Incorrect column name\":884,\"String:id\":1911,\"{String}\":793,\"boolean:true\":309,\"DatabaseMetaDataNotSupportedTest.assertTrue()\":416,\"String[].arrayget()\":904,\"null:null\":250,\"\\u003ca\\u003e\":832,\"int:13\":513,\"String:ORDINAL_POSITION\":701},\"rawCode\":\"@KnownFailure(\\\"not supported\\\")\\n    public void test_getIndexInfoLjava_lang_StringLjava_lang_StringLjava_lang_StringZZ()\\n            throws SQLException {\\n        boolean unique \\u003d false;\\n        ResultSet rs \\u003d meta.getIndexInfo(conn.getCatalog(), null,\\n                DatabaseCreator.TEST_TABLE1, unique, true);\\n        ResultSetMetaData rsmd \\u003d rs.getMetaData();\\n        assertTrue(\\\"Rows do not obtained\\\", rs.next());\\n        int col \\u003d rsmd.getColumnCount();\\n        assertEquals(\\\"Incorrect number of columns\\\", 13, col);\\n        String[] columnNames \\u003d { \\\"TABLE_CAT\\\", \\\"TABLE_SCHEM\\\", \\\"TABLE_NAME\\\",\\n                \\\"NON_UNIQUE\\\", \\\"INDEX_QUALIFIER\\\", \\\"INDEX_NAME\\\", \\\"TYPE\\\",\\n                \\\"ORDINAL_POSITION\\\", \\\"COLUMN_NAME\\\", \\\"ASC_OR_DESC\\\",\\n                \\\"CARDINALITY\\\", \\\"PAGES\\\", \\\"FILTER_CONDITION\\\" };\\n        for (int c \\u003d 1; c \\u003c\\u003d col; ++c) {\\n            assertEquals(\\\"Incorrect column name\\\", columnNames[c - 1], rsmd\\n                    .getColumnName(c));\\n        }\\n\\n        assertEquals(\\\"Incorrect table catalog\\\", conn.getCatalog(), rs\\n                .getString(\\\"TABLE_CAT\\\"));\\n        assertEquals(\\\"Incorrect table schema\\\", null, rs\\n                .getString(\\\"TABLE_SCHEM\\\"));\\n        assertEquals(\\\"Incorrect table name\\\", DatabaseCreator.TEST_TABLE1, rs\\n                .getString(\\\"TABLE_NAME\\\"));\\n        assertEquals(\\\"Incorrect state of uniquess\\\", unique, rs\\n                .getBoolean(\\\"NON_UNIQUE\\\"));\\n        assertEquals(\\\"Incorrect index catalog\\\", \\\"\\\", rs\\n                .getString(\\\"INDEX_QUALIFIER\\\"));\\n        assertEquals(\\\"Incorrect index name\\\", \\\"primary\\\", rs.getString(\\n                \\\"INDEX_NAME\\\").toLowerCase());\\n        assertEquals(\\\"Incorrect index type\\\", DatabaseMetaData.tableIndexOther,\\n                rs.getShort(\\\"TYPE\\\"));\\n        assertEquals(\\\"Incorrect column sequence number within index\\\", 1, rs\\n                .getShort(\\\"ORDINAL_POSITION\\\"));\\n        assertEquals(\\\"Incorrect column name\\\", \\\"id\\\", rs.getString(\\\"COLUMN_NAME\\\"));\\n        assertEquals(\\\"Incorrect column sort sequence\\\", \\\"a\\\", rs.getString(\\n                \\\"ASC_OR_DESC\\\").toLowerCase());\\n        assertEquals(\\\"Incorrect cardinality\\\", 1, rs.getInt(\\\"CARDINALITY\\\"));\\n        assertEquals(\\\"Incorrect value of pages\\\", 0, rs.getInt(\\\"PAGES\\\"));\\n        assertEquals(\\\"Incorrect filter condition\\\", null, rs\\n                .getString(\\\"FILTER_CONDITION\\\"));\\n        rs.close();\\n    }\"}","370":"{\"expressionStart\":{\"DatabaseMetaDataNotSupportedTest.assertEquals()\":1293,\"DatabaseMetaData.getTables()\":532,\"ResultSet.getString()\":1401,\"String:TABLE_NAME\":799,\"String: FROM \":1076,\"Connection.getMetaData()\":480,\"UNKNOWN.toLowerCase()\":1401,\"String\":1494,\"ResultSet.next()\":623,\"Support_SQL.getConnection()\":339,\"DatabaseCreator.TEST_TABLE1.toLowerCase()\":1358,\"DatabaseMetaDataNotSupportedTest.assertTrue()\":1230,\"DatabaseMetaDataNotSupportedTest.assertFalse()\":1482,\"Statement.execute()\":1740,\"ResultSet.close()\":955,\"DatabaseMetaData.allTablesAreSelectable()\":893,\"Connection.close()\":1774,\"null:null\":551},\"expressionEnd\":{\"DatabaseMetaDataNotSupportedTest.assertEquals()\":1472,\"DatabaseMetaData.getTables()\":574,\"ResultSet.getString()\":1457,\"String:TABLE_NAME\":811,\"String: FROM \":1084,\"Connection.getMetaData()\":502,\"UNKNOWN.toLowerCase()\":1471,\"String\":1516,\"ResultSet.next()\":637,\"Support_SQL.getConnection()\":442,\"DatabaseCreator.TEST_TABLE1.toLowerCase()\":1399,\"DatabaseMetaDataNotSupportedTest.assertTrue()\":1283,\"DatabaseMetaDataNotSupportedTest.assertFalse()\":1552,\"Statement.execute()\":1764,\"ResultSet.close()\":970,\"DatabaseMetaData.allTablesAreSelectable()\":943,\"Connection.close()\":1790,\"null:null\":555},\"rawCode\":\"@KnownFailure(\\\"Not supported ops applied\\\")\\n    public void test_allTablesAreSelectable() throws SQLException {\\n        // grant SELECT privileges\\n\\n        String query \\u003d \\\"GRANT CREATE, SELECT ON \\\" + DatabaseCreator.TEST_TABLE1\\n                + \\\" TO \\\" + Support_SQL.sqlUser;\\n        statement.execute(query);\\n        Connection userConn \\u003d Support_SQL.getConnection(Support_SQL.sqlUrl,\\n                Support_SQL.sqlUser, Support_SQL.sqlUser);\\n        DatabaseMetaData userMeta \\u003d userConn.getMetaData();\\n        ResultSet userTab \\u003d userMeta.getTables(null, null, null, null);\\n\\n        assertTrue(\\\"Tables are not obtained\\\", userTab.next());\\n        assertEquals(\\\"Incorrect name of obtained table\\\",\\n                DatabaseCreator.TEST_TABLE1.toLowerCase(), userTab.getString(\\n                        \\\"TABLE_NAME\\\").toLowerCase());\\n        assertTrue(\\\"Not all of obtained tables are selectable\\\", userMeta\\n                .allTablesAreSelectable());\\n\\n        userTab.close();\\n        // revoke SELECT privileges\\n        query \\u003d \\\"REVOKE SELECT ON \\\" + DatabaseCreator.TEST_TABLE1 + \\\" FROM \\\"\\n                + Support_SQL.sqlUser;\\n        statement.execute(query);\\n\\n        userTab \\u003d userMeta.getTables(null, null, null, null);\\n\\n        assertTrue(\\\"Tables are not obtained\\\", userTab.next());\\n        assertEquals(\\\"Incorrect name of obtained table\\\",\\n                DatabaseCreator.TEST_TABLE1.toLowerCase(), userTab.getString(\\n                        \\\"TABLE_NAME\\\").toLowerCase());\\n        assertFalse(\\\"No SELECT privileges\\\", userMeta.allTablesAreSelectable());\\n\\n        userTab.close();\\n        // revoke CREATE privileges\\n        query \\u003d \\\"REVOKE CREATE ON \\\" + DatabaseCreator.TEST_TABLE1 + \\\" FROM \\\"\\n                + Support_SQL.sqlUser;\\n        statement.execute(query);\\n        userConn.close();\\n    }\"}","371":"{\"expressionStart\":{\"ResultSet.getString()\":1662,\"\\u003cr\\u003e\":572,\"UNKNOWN.arrayset()\":1423,\"String\":957,\"Connection.createStatement()\":542,\"String[][].arrayget()\":1423,\"\\u003creturn\\u003e\":1710,\"{String}\":1345,\"ResultSet.next()\":1585,\"int:6\":1042,\"String.compareTo()\":572,\"int:3\":1361,\"String:\\u0027;\":1567,\"null:null\":476,\"\\u003ca\\u003e\":1412,\"int:10\":821,\"int:2\":1659,\"UNKNOWN.arrayget()\":1554,\"int:1\":1455,\"Statement.executeQuery()\":1178,\"int:0\":511},\"expressionEnd\":{\"ResultSet.getString()\":1682,\"\\u003cr\\u003e\":604,\"UNKNOWN.arrayset()\":1435,\"String\":1021,\"Connection.createStatement()\":563,\"String[][].arrayget()\":1432,\"\\u003creturn\\u003e\":1724,\"{String}\":1363,\"ResultSet.next()\":1599,\"int:6\":1043,\"String.compareTo()\":601,\"int:3\":1362,\"String:\\u0027;\":1571,\"null:null\":480,\"\\u003ca\\u003e\":1415,\"int:10\":823,\"int:2\":1660,\"UNKNOWN.arrayget()\":1566,\"int:1\":1456,\"Statement.executeQuery()\":1299,\"int:0\":512},\"rawCode\":\"/**\\r\\n\\t * Metodo che restituisce la configurazione scelta per un particolare computer ordinato.\\r\\n\\t * @param numOrdine\\t\\t\\t\\tNumero dell\\u0027ordine\\r\\n\\t * @param tipoComputer\\t\\t\\tTipo di computer\\r\\n\\t * @return config\\t\\t\\t\\tLista di componenti costituenti la configurazione scelta\\r\\n\\t * @throws SQLException\\r\\n\\t */\\r\\n\\tpublic String[][] cercaConfigurazioneScelta(int numOrdine, String tipoComputer) throws SQLException{\\r\\n\\t\\tStatement stCercaNomePrezzo \\u003d con.createStatement();\\r\\n\\t\\tResultSet result \\u003d null, result1 \\u003d null;\\r\\n\\t\\tint max \\u003d 0;\\r\\n\\t\\tStatement stStandardPC \\u003d con.createStatement();\\r\\n\\t\\tif (tipoComputer.compareTo(\\\"SER\\\")\\u003d\\u003d0){//{\\\"RAM\\\", \\\"CPU\\\", \\\"MLC\\\", \\\"HD0\\\", \\\"HDD\\\", \\\"HDD\\\", \\\"HDD\\\", \\\"DVD\\\", \\\"PCI\\\", \\\"WAR\\\"}\\r\\n\\t\\t\\tresult \\u003d stStandardPC.executeQuery(\\\"select ram, cpu, mlc, hd1, hd2, hd3, hd4,dvd, pci,war from ordini where codice \\u003d\\\"+numOrdine);\\r\\n\\t\\t\\tmax\\u003d10;\\r\\n\\t\\t}else if(tipoComputer.compareTo(\\\"LAP\\\")\\u003d\\u003d0){//{\\\"RAM\\\", \\\"CPU\\\", \\\"HD0\\\", \\\"GPU\\\", \\\"DVD\\\", \\\"WAR\\\" },\\r\\n\\t\\t\\tresult \\u003d stStandardPC.executeQuery(\\\"select ram, cpu, hd1, gpu, dvd, war from ordini where codice \\u003d\\\"+numOrdine);\\r\\n\\t\\t\\tmax\\u003d6;\\r\\n\\t\\t}else if(tipoComputer.compareTo(\\\"DES\\\")\\u003d\\u003d0){//{\\\"RAM\\\", \\\"CPU\\\", \\\"MOU\\\", \\\"HD0\\\", \\\"HDD\\\", \\\"GPU\\\", \\\"DVD\\\", \\\"WAR\\\", \\\"KEY\\\", \\\"MON\\\"},\\r\\n\\t\\t\\tresult \\u003d stStandardPC.executeQuery(\\\"select ram, cpu, mou, hd1, hd2, gpu, dvd, war, kei, mon from ordini where codice \\u003d\\\"+numOrdine);\\r\\n\\t\\t\\tmax\\u003d10;\\r\\n\\t\\t}\\r\\n\\t\\t\\r\\n\\t\\tString[][] config \\u003d new String[max][3];\\r\\n\\t\\twhile(result.next()){\\r\\n\\t\\t\\tfor(int i\\u003d0;i\\u003cmax;i++){\\r\\n\\t\\t\\t\\tconfig[i][0]\\u003dresult.getString(i+1);\\r\\n\\t\\t\\t\\tresult1 \\u003d stCercaNomePrezzo.executeQuery(\\\"SELECT nome, prezzo from componenti where id\\u003d\\u0027\\\"+config[i][0]+\\\"\\u0027;\\\");\\r\\n\\t\\t\\t\\twhile(result1.next()){\\r\\n\\t\\t\\t\\t\\tconfig[i][1]\\u003dresult1.getString(1);\\r\\n\\t\\t\\t\\t\\tconfig[i][2]\\u003dresult1.getString(2);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\t\\r\\n\\t\\treturn config;\\r\\n\\t}\"}","372":"{\"expressionStart\":{\"String\":1098,\"Connection.createStatement()\":394,\"String[][].arrayget()\":1463,\"ResultSet.next()\":654,\"int:6\":1612,\"int:5\":1552,\"int:4\":1493,\"int:3\":1426,\"int:9\":763,\"int:8\":1750,\"int:7\":1691,\"int:2\":1343,\"int:1\":692,\"ResultSet.getTimestamp()\":1323,\"Statement.executeQuery()\":780,\"int:0\":641,\"ResultSet.getInt()\":1677,\"SQLException.printStackTrace()\":1882,\"ResultSet.getString()\":1476,\"UNKNOWN.arrayset()\":1463,\"\\u003creturn\\u003e\":1919,\"{String}\":749,\"ResultSet.getFloat()\":1410,\"String.valueOf()\":1308,\"String:\\u0027;\":624,\"\\u003ca\\u003e\":1798},\"expressionEnd\":{\"String\":1143,\"Connection.createStatement()\":415,\"String[][].arrayget()\":1472,\"ResultSet.next()\":667,\"int:6\":1613,\"int:5\":1553,\"int:4\":1494,\"int:3\":1427,\"int:9\":764,\"int:8\":1751,\"int:7\":1692,\"int:2\":1344,\"int:1\":693,\"ResultSet.getTimestamp()\":1345,\"Statement.executeQuery()\":1172,\"int:0\":642,\"ResultSet.getInt()\":1693,\"SQLException.printStackTrace()\":1901,\"ResultSet.getString()\":1495,\"UNKNOWN.arrayset()\":1475,\"\\u003creturn\\u003e\":1933,\"{String}\":765,\"ResultSet.getFloat()\":1428,\"String.valueOf()\":1346,\"String:\\u0027;\":628,\"\\u003ca\\u003e\":1801},\"rawCode\":\"/**\\r\\n\\t * Metodo che restituisce gli ordini effettuati da un cliente\\r\\n\\t * @param cf\\t\\t\\tCodice fiscale del cliente\\r\\n\\t * @return ordini\\t\\tOrdini effettuati dal cliente\\r\\n\\t */\\r\\n\\tpublic String[][] consultaOrdini(String cf) {\\r\\n\\t\\t//ordini.codice, ordini.data, ordini.totale, stato, tipo, nome_computer, pagamenti.codice\\r\\n\\t\\tString[][] ordini \\u003d null;\\r\\n\\t\\t\\t\\r\\n\\t\\ttry {\\r\\n\\t\\t\\t//Conta righe\\r\\n\\t\\t\\tstConsultaOrdini \\u003d con.createStatement();\\r\\n\\t\\t\\tResultSet result \\u003d stConsultaOrdini.executeQuery(\\\"select count(*) from pagamenti, ordini where stato\\u003c\\u003e\\u0027ANNULLATO\\u0027 and stato\\u003c\\u003e\\u0027ORDINATO\\u0027\\\" +\\r\\n\\t\\t\\t\\t\\t\\\"and ordini.codice \\u003d ordine_codice and cliente_CF \\u003d \\u0027\\\"+cf+\\\"\\u0027;\\\");\\r\\n\\t\\t\\tint j\\u003d0;\\r\\n\\t\\t\\twhile(result.next()){\\r\\n\\t\\t\\t\\tj\\u003d result.getInt(1);\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t\\r\\n\\t\\t\\t//chiama lista di ordini\\r\\n\\t\\t\\tordini \\u003d new String[j][9];\\r\\n\\t\\t\\tresult \\u003d stConsultaOrdini.executeQuery(\\\"select distinct(ordini.codice), ordini.data, ordini.totale, stato, tipo, nome_computer,\\\" +\\r\\n\\t\\t\\t\\t\\t\\\" pagamenti.codice, standard_computer.prezzo, confermato from pagamenti, ordini, standard_computer where stato\\u003c\\u003e\\u0027ANNULLATO\\u0027 and stato\\u003c\\u003e\\u0027ORDINATO\\u0027 and ordini.codice \\u003d ordine_codice \\\" +\\r\\n\\t\\t\\t\\t\\t\\\"and nome \\u003d nome_computer and cliente_CF \\u003d \\u0027\\\"+cf+\\\"\\u0027 order by ordini.data\\\");\\r\\n\\t\\t\\tj\\u003d0;\\r\\n\\t\\t\\twhile(result.next()){\\r\\n\\t\\t\\t\\tordini[j][0]\\u003dString.valueOf(result.getInt(1)); //ordine.codice e\\u0027 un intero\\r\\n\\t\\t\\t\\tordini[j][1]\\u003dString.valueOf(result.getTimestamp(2));//ordini.data e\\u0027 un timestamp\\r\\n\\t\\t\\t\\tordini[j][2]\\u003dString.valueOf(result.getFloat(3));//ordini.totale e\\u0027 un float\\r\\n\\t\\t\\t\\tordini[j][3]\\u003dresult.getString(4);//stato e\\u0027 un string\\r\\n\\t\\t\\t\\tordini[j][4]\\u003dresult.getString(5); // tipo e\\u0027 un string\\r\\n\\t\\t\\t\\tordini[j][5]\\u003dresult.getString(6);// nomecomputer e\\u0027 un string\\r\\n\\t\\t\\t\\tordini[j][6]\\u003dString.valueOf(result.getInt(7));//pagamenti.codice \\r\\n\\t\\t\\t\\tordini[j][7]\\u003dresult.getString(8);\\r\\n\\t\\t\\t\\tordini[j][8]\\u003dresult.getString(9);\\r\\n\\t\\t\\t\\tj++;\\r\\n\\t\\t\\t}\\r\\n\\t\\t} catch (SQLException e) {\\r\\n\\t\\t\\t// TODO Auto-generated catch block\\r\\n\\t\\t\\te.printStackTrace();\\r\\n\\t\\t}\\r\\n\\t\\t\\r\\n\\t\\t\\r\\n\\t\\treturn ordini;\\r\\n\\t}\"}","373":"{\"expressionStart\":{\"String\":1036,\"Connection.createStatement()\":409,\"String[][].arrayget()\":1417,\"ResultSet.next()\":1139,\"int:6\":1570,\"int:5\":1508,\"int:4\":1447,\"int:3\":1378,\"int:9\":1777,\"int:8\":1723,\"int:7\":1651,\"int:2\":1293,\"ResultSet.getTimestamp()\":1273,\"int:1\":655,\"Statement.executeQuery()\":754,\"int:0\":600,\"ResultSet.getInt()\":1190,\"SQLException.printStackTrace()\":1939,\"ResultSet.getString()\":1706,\"UNKNOWN.arrayset()\":1162,\"\\u003creturn\\u003e\":1984,\"{String}\":720,\"ResultSet.getFloat()\":1362,\"String.valueOf()\":1175,\"ResultSet.getByte()\":1762,\"\\u003ca\\u003e\":1847,\"int:10\":734},\"expressionEnd\":{\"String\":1113,\"Connection.createStatement()\":430,\"String[][].arrayget()\":1426,\"ResultSet.next()\":1152,\"int:6\":1571,\"int:5\":1509,\"int:4\":1448,\"int:3\":1379,\"int:9\":1778,\"int:8\":1724,\"int:7\":1652,\"int:2\":1294,\"ResultSet.getTimestamp()\":1295,\"int:1\":656,\"Statement.executeQuery()\":1114,\"int:0\":601,\"ResultSet.getInt()\":1206,\"SQLException.printStackTrace()\":1958,\"ResultSet.getString()\":1725,\"UNKNOWN.arrayset()\":1174,\"\\u003creturn\\u003e\":1998,\"{String}\":737,\"ResultSet.getFloat()\":1380,\"String.valueOf()\":1207,\"ResultSet.getByte()\":1779,\"\\u003ca\\u003e\":1850,\"int:10\":736},\"rawCode\":\"/**\\r\\n\\t * Metodo che restituisce una lista degli ordini in base al loro stato\\r\\n\\t * @param stato\\t\\tStato dell\\u0027ordine\\r\\n\\t * @return ordini\\tOrdini trovati in base allo stato\\r\\n\\t */\\r\\n\\tpublic String[][] cercaOrdini(String stato) {\\r\\n\\t\\t//ordini.codice, ordini.data, ordini.totale, stato, tipo, nome_computer, pagamenti.codice\\r\\n\\t\\t\\t\\tString[][] ordini \\u003d null;\\r\\n\\t\\t\\t\\t\\t\\r\\n\\t\\t\\t\\ttry {\\r\\n\\t\\t\\t\\t\\t//Conta righe\\r\\n\\t\\t\\t\\t\\tstConsultaOrdini \\u003d con.createStatement();\\r\\n\\t\\t\\t\\t\\tResultSet result \\u003d stConsultaOrdini.executeQuery(\\\"select count(*) from pagamenti, ordini where stato\\u003d\\u0027\\\"+stato+\\\"\\u0027and ordini.codice \\u003d ordine_codice;\\\");\\r\\n\\t\\t\\t\\t\\tint j\\u003d0;\\r\\n\\t\\t\\t\\t\\twhile(result.next()){\\r\\n\\t\\t\\t\\t\\t\\tj\\u003d result.getInt(1);\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t\\t//chiama lista di ordini\\r\\n\\t\\t\\t\\t\\tordini \\u003d new String[j][10];\\r\\n\\t\\t\\t\\t\\tresult \\u003d stConsultaOrdini.executeQuery(\\\"select distinct(ordini.codice), ordini.data, ordini.totale, stato, tipo, nome_computer,\\\" +\\r\\n\\t\\t\\t\\t\\t\\t\\t\\\"pagamenti.codice, cliente_CF, confermato, standard_computer.prezzo from pagamenti, ordini, standard_computer where stato\\u003d\\u0027\\\"+stato+\\\"\\u0027 and \\\" +\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\"ordini.codice \\u003d ordine_codice and nome_computer \\u003d nome order by ordini.data\\\");\\r\\n\\t\\t\\t\\t\\tj\\u003d0;\\r\\n\\t\\t\\t\\t\\twhile(result.next()){\\r\\n\\t\\t\\t\\t\\t\\tordini[j][0]\\u003dString.valueOf(result.getInt(1)); //ordine.codice e\\u0027 un intero\\r\\n\\t\\t\\t\\t\\t\\tordini[j][1]\\u003dString.valueOf(result.getTimestamp(2));//ordini.data e\\u0027 un timestamp\\r\\n\\t\\t\\t\\t\\t\\tordini[j][2]\\u003dString.valueOf(result.getFloat(3));//ordini.totale e\\u0027 un float\\r\\n\\t\\t\\t\\t\\t\\tordini[j][3]\\u003dresult.getString(4);//stato e\\u0027 un string\\r\\n\\t\\t\\t\\t\\t\\tordini[j][4]\\u003dresult.getString(5); // tipo e\\u0027 un string\\r\\n\\t\\t\\t\\t\\t\\tordini[j][5]\\u003dresult.getString(6);// nomecomputer e\\u0027 un string\\r\\n\\t\\t\\t\\t\\t\\tordini[j][6]\\u003dString.valueOf(result.getInt(7));//pagamenti.codice e\\u0027 un float\\r\\n\\t\\t\\t\\t\\t\\tordini[j][7]\\u003dresult.getString(8);\\r\\n\\t\\t\\t\\t\\t\\tordini[j][8]\\u003dString.valueOf(result.getByte(9));\\r\\n\\t\\t\\t\\t\\t\\tordini[j][9]\\u003dString.valueOf(result.getString(10));\\r\\n\\t\\t\\t\\t\\t\\tj++;\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t} catch (SQLException e) {\\r\\n\\t\\t\\t\\t\\t// TODO Auto-generated catch block\\r\\n\\t\\t\\t\\t\\te.printStackTrace();\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t\\r\\n\\t\\t\\t\\treturn ordini;\\r\\n\\t}\"}","374":"{\"expressionStart\":{\"String:\\u0027;\":479,\"ResultSet.getString()\":518,\"null:null\":334,\"String\":422,\"Connection.createStatement()\":355,\"int:1\":535,\"\\u003creturn\\u003e\":548,\"ResultSet.next()\":495,\"Statement.executeQuery()\":399},\"expressionEnd\":{\"String:\\u0027;\":483,\"ResultSet.getString()\":537,\"null:null\":338,\"String\":468,\"Connection.createStatement()\":376,\"int:1\":536,\"\\u003creturn\\u003e\":558,\"ResultSet.next()\":508,\"Statement.executeQuery()\":484},\"rawCode\":\"/**\\r\\n\\t * Metodo che restituisce il codice fiscale del cliente che ha effettuato un certo ordine.\\r\\n\\t * @param numOrdine\\t\\t\\tNumero dell\\u0027ordine\\r\\n\\t * @return cf\\t\\t\\t\\tCodice fiscale del cliente che ha effettuato l\\u0027ordine\\r\\n\\t * @throws SQLException\\r\\n\\t */\\r\\n\\tpublic String cercaClienteDalOrdine(int numOrdine) throws SQLException{\\r\\n\\t\\tString cf \\u003d null;\\r\\n\\t\\tstCliente \\u003d con.createStatement();\\r\\n\\t\\tResultSet result \\u003dstCliente.executeQuery(\\\"select cliente_CF from ordini where codice\\u003d\\u0027\\\"+numOrdine+\\\"\\u0027;\\\");\\r\\n\\t\\twhile(result.next()){\\r\\n\\t\\t\\tcf\\u003dresult.getString(1);\\r\\n\\t\\t\\t}\\r\\n\\t\\treturn cf;\\r\\n\\t}\"}","375":"{\"expressionStart\":{\"\\u003cr\\u003e\":480,\"ResultSet.getString()\":511,\"String\":349,\"Connection.createStatement()\":281,\"\\u003creturn\\u003e\":655,\"{String}\":250,\"ResultSet.next()\":443,\"int:6\":261,\"String[].arrayset()\":500,\"String:\\u0027;\":426,\"\\u003ca\\u003e\":487,\"int:1\":530,\"Statement.executeQuery()\":326,\"int:0\":477,\"SQLException.printStackTrace()\":626},\"expressionEnd\":{\"\\u003cr\\u003e\":485,\"ResultSet.getString()\":532,\"String\":422,\"Connection.createStatement()\":302,\"\\u003creturn\\u003e\":670,\"{String}\":263,\"ResultSet.next()\":456,\"int:6\":262,\"String[].arrayset()\":510,\"String:\\u0027;\":430,\"\\u003ca\\u003e\":490,\"int:1\":531,\"Statement.executeQuery()\":431,\"int:0\":478,\"SQLException.printStackTrace()\":645},\"rawCode\":\"/**\\r\\n\\t * Metodo che restituisce un cliente in base al codice fiscale\\r\\n\\t * @param cf\\t\\t\\tCodice fiscale del cliente\\r\\n\\t * @return cliente\\t\\tCliente trovato\\r\\n\\t */\\r\\n\\tpublic String[] cercaCliente(String cf){\\r\\n\\t\\tString[] cliente \\u003d null;\\r\\n\\t\\ttry {\\r\\n\\t\\t\\tcliente\\u003d new String[6];\\r\\n\\t\\t\\tstCliente \\u003d con.createStatement();\\r\\n\\t\\t\\tResultSet result \\u003dstCliente.executeQuery(\\\"select CF,nome,cognome,indirizzo,telefono,email from clienti where CF\\u003d\\u0027\\\"+cf+\\\"\\u0027;\\\");\\r\\n\\t\\t\\twhile(result.next()){\\r\\n\\t\\t\\t\\tfor (int i \\u003d 0; i \\u003c 6; i++) {\\r\\n\\t\\t\\t\\t\\tcliente[i]\\u003dresult.getString(i+1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\r\\n\\t\\t\\t}\\r\\n\\t\\t} catch (SQLException e) {\\r\\n\\t\\t\\t// TODO Auto-generated catch block\\r\\n\\t\\t\\te.printStackTrace();\\r\\n\\t\\t}\\r\\n\\t\\treturn cliente;\\r\\n\\t\\t\\r\\n\\t}\"}","376":"{\"expressionStart\":{\"\\u003cr\\u003e\":660,\"ResultSet.getString()\":903,\"String:;\":641,\"String\":493,\"Connection.createStatement()\":411,\"\\u003creturn\\u003e\":971,\"{String}\":357,\"ResultSet.next()\":873,\"String.compareTo()\":660,\"String[].arrayset()\":893,\"null:null\":456,\"int:2\":368,\"int:1\":920,\"int:0\":506,\"Statement.executeQuery()\":523},\"expressionEnd\":{\"\\u003cr\\u003e\":706,\"ResultSet.getString()\":922,\"String:;\":644,\"String\":503,\"Connection.createStatement()\":432,\"\\u003creturn\\u003e\":983,\"{String}\":370,\"ResultSet.next()\":886,\"String.compareTo()\":703,\"String[].arrayset()\":900,\"null:null\":460,\"int:2\":369,\"int:1\":921,\"int:0\":507,\"Statement.executeQuery()\":645},\"rawCode\":\"/**\\r\\n\\t * Metodo che restituisce i dettagli di un certo pagamento.\\r\\n\\t * @param numPagamento\\t\\t\\tNumero di pagamento\\r\\n\\t * @param tipoPagamento\\t\\t\\tTipo di pagamento\\r\\n\\t * @return args\\t\\t\\t\\t\\tDettagli del pagamento\\r\\n\\t * @throws SQLException\\r\\n\\t */\\r\\n\\tpublic String[] cercaDettagliPagamento(int numPagamento, String tipoPagamento) throws SQLException{\\r\\n\\t\\tString[] args \\u003d new String[2];\\r\\n\\t\\tStatement stCercaDetagliPagamento \\u003d con.createStatement();\\r\\n\\t\\tResultSet result \\u003d null;\\r\\n\\t\\tif (tipoPagamento.compareTo(\\\"BONIFICO\\\")\\u003d\\u003d0){\\r\\n\\t\\t\\tresult \\u003d stCercaDetagliPagamento.executeQuery(\\\"SELECT numeroBonifico, banca FROM bonifico where numeroPagamento\\u003d\\\"+numPagamento+\\\";\\\");\\r\\n\\t\\t}else if (tipoPagamento.compareTo(\\\"CARTA DI CREDITO\\\")\\u003d\\u003d0){\\r\\n\\t\\t\\tresult \\u003d stCercaDetagliPagamento.executeQuery(\\\"select numeroCarta, intestatario from carta_credito where numeroPagamento\\u003d\\\"+numPagamento+\\\";\\\");\\r\\n\\t\\t}\\r\\n\\t\\t\\r\\n\\t\\twhile(result.next()){\\r\\n\\t\\t\\targs[0] \\u003d result.getString(1);\\r\\n\\t\\t\\targs[1] \\u003d result.getString(2);\\r\\n\\t\\t}\\r\\n\\t\\t\\r\\n\\t\\treturn args;\\r\\n\\t}\"}","377":"{\"expressionStart\":{\"String:\\u0027\":717,\"ResultSet.getString()\":1340,\"\\u003cr\\u003e\":747,\"String\":1107,\"Connection.createStatement()\":451,\"\\u003creturn\\u003e\":1378,\"{String}\":1255,\"ResultSet.next()\":1281,\"String.compareTo()\":747,\"int:6\":953,\"String[].arrayset()\":1330,\"null:null\":401,\"\\u003ca\\u003e\":1319,\"int:10\":731,\"int:1\":1359,\"Statement.executeQuery()\":833,\"int:0\":420},\"expressionEnd\":{\"String:\\u0027\":720,\"ResultSet.getString()\":1361,\"\\u003cr\\u003e\":771,\"String\":1201,\"Connection.createStatement()\":472,\"\\u003creturn\\u003e\":1392,\"{String}\":1270,\"ResultSet.next()\":1294,\"String.compareTo()\":768,\"int:6\":954,\"String[].arrayset()\":1339,\"null:null\":405,\"\\u003ca\\u003e\":1322,\"int:10\":733,\"int:1\":1360,\"Statement.executeQuery()\":943,\"int:0\":421},\"rawCode\":\"/**\\r\\n\\t * Metodo che permette di trovare la configurazione standard di un tipo di computer.\\r\\n\\t * @param nome\\t\\t\\t\\tNome computer\\r\\n\\t * @param tipo\\t\\t\\t\\tTipo di computer\\r\\n\\t * @return config           Lista di componenti costituenti la configurazione standard\\r\\n\\t * @throws SQLException\\r\\n\\t */\\r\\n\\tpublic String[] cercaConfigurazioneDefault(String nome, String tipo) throws SQLException{\\r\\n\\t\\t\\r\\n\\t\\tResultSet result \\u003d null;\\r\\n\\t\\tint max \\u003d 0;\\r\\n\\t\\tStatement stStandardPC \\u003d con.createStatement();\\r\\n\\t\\tif (tipo.compareTo(\\\"SER\\\")\\u003d\\u003d0){//{\\\"RAM\\\", \\\"CPU\\\", \\\"MLC\\\", \\\"HD0\\\", \\\"HDD\\\", \\\"HDD\\\", \\\"HDD\\\", \\\"DVD\\\", \\\"PCI\\\", \\\"WAR\\\"}\\r\\n\\t\\t\\tresult \\u003d stStandardPC.executeQuery(\\\"select ram, cpu, mlc, hd1, hd2, hd3, hd4,dvd, pci,war from standard_computer where nome \\u003d\\u0027\\\"+nome+\\\"\\u0027\\\");\\r\\n\\t\\t\\tmax\\u003d10;\\r\\n\\t\\t}else if(tipo.compareTo(\\\"LAP\\\")\\u003d\\u003d0){//{\\\"RAM\\\", \\\"CPU\\\", \\\"HD0\\\", \\\"GPU\\\", \\\"DVD\\\", \\\"WAR\\\" },\\r\\n\\t\\t\\tresult \\u003d stStandardPC.executeQuery(\\\"select ram, cpu, hd1, gpu, dvd, war from standard_computer where nome \\u003d\\u0027\\\"+nome+\\\"\\u0027\\\");\\r\\n\\t\\t\\tmax\\u003d6;\\r\\n\\t\\t}else if(tipo.compareTo(\\\"DES\\\")\\u003d\\u003d0){//{\\\"RAM\\\", \\\"CPU\\\", \\\"MOU\\\", \\\"HD0\\\", \\\"HDD\\\", \\\"GPU\\\", \\\"DVD\\\", \\\"WAR\\\", \\\"KEY\\\", \\\"MON\\\"},\\r\\n\\t\\t\\tresult \\u003d stStandardPC.executeQuery(\\\"select ram, cpu, mou, hd1, hd2, gpu, dvd, war, kei, mon from standard_computer where nome \\u003d\\u0027\\\"+nome+\\\"\\u0027\\\");\\r\\n\\t\\t\\tmax\\u003d10;\\r\\n\\t\\t}\\r\\n\\t\\t\\r\\n\\t\\tString[] config \\u003d new String[max];\\r\\n\\t\\twhile(result.next()){\\r\\n\\t\\t\\tfor(int i\\u003d0;i\\u003cmax;i++){\\r\\n\\t\\t\\t\\tconfig[i]\\u003dresult.getString(i+1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\treturn config;\\r\\n\\t}\"}","378":"{\"expressionStart\":{\"PreparedStatement.setString()\":461,\"ResultSet.getString()\":614,\"UNKNOWN.arrayset()\":639,\"String[][].arrayget()\":639,\"\\u003creturn\\u003e\":710,\"ResultSet.next()\":580,\"{String}\":426,\"PreparedStatement.executeQuery()\":520,\"ResultSet.close()\":691,\"\\u003ca\\u003e\":678,\"int:2\":370,\"int:1\":490,\"int:0\":568},\"expressionEnd\":{\"PreparedStatement.setString()\":506,\"ResultSet.getString()\":633,\"UNKNOWN.arrayset()\":652,\"String[][].arrayget()\":649,\"\\u003creturn\\u003e\":725,\"ResultSet.next()\":593,\"{String}\":452,\"PreparedStatement.executeQuery()\":553,\"ResultSet.close()\":705,\"\\u003ca\\u003e\":681,\"int:2\":371,\"int:1\":491,\"int:0\":569},\"rawCode\":\"/**\\r\\n\\t * Metodo che restituisce i modelli disponibili in base al tipo di computer\\r\\n\\t * selezionato (Laptop, desktop o server)\\r\\n\\t * @param tipoComputer\\t\\t\\tTipo di computer\\r\\n\\t * @param maxCol\\r\\n\\t * @return modelli\\t\\t\\t\\tModelli disponibili\\r\\n\\t * @throws SQLException\\r\\n\\t */\\r\\n\\tpublic String[][] cercaModelli(String tipoComputer, int maxCol) throws SQLException{\\r\\n\\t\\t\\r\\n\\t\\tint maxRig\\u003d2;\\r\\n\\t\\t\\r\\n\\t\\tResultSet result;\\r\\n\\t\\t\\r\\n\\t\\tString[][] modelli \\u003d new String[maxRig][maxCol];\\r\\n\\t\\t\\r\\n\\t\\tstConsultaComputer.setString(1, tipoComputer);\\r\\n\\t\\tresult \\u003d stConsultaComputer.executeQuery();\\r\\n\\t\\t\\r\\n\\t\\tint i\\u003d0;\\r\\n\\t\\twhile(result.next()){\\r\\n\\t\\t\\tmodelli[i][0]\\u003dresult.getString(1);\\r\\n\\t\\t\\tmodelli[i][1]\\u003dresult.getString(2);\\r\\n\\t\\t\\ti++;\\r\\n\\t\\t}\\r\\n\\t\\tresult.close();\\r\\n\\t\\treturn modelli;\\r\\n\\t}\"}","379":"{\"expressionStart\":{\"ResultSet.getString()\":1296,\"UNKNOWN.arrayset()\":1139,\"String\":841,\"Connection.createStatement()\":321,\"\\u003creturn\\u003e\":1497,\"String[][].arrayget()\":967,\"{String}\":706,\"ResultSet.next()\":944,\"ResultSet.getFloat()\":1167,\"int:5\":720,\"String.valueOf()\":1063,\"int:4\":1252,\"int:3\":1183,\"String:\\u0027;\":567,\"\\u003ca\\u003e\":1360,\"int:2\":1098,\"ResultSet.getTimestamp()\":1078,\"int:1\":641,\"Statement.executeQuery()\":739,\"int:0\":586,\"ResultSet.getInt()\":627,\"SQLException.printStackTrace()\":1452},\"expressionEnd\":{\"ResultSet.getString()\":1315,\"UNKNOWN.arrayset()\":1151,\"String\":897,\"Connection.createStatement()\":342,\"\\u003creturn\\u003e\":1511,\"String[][].arrayget()\":976,\"{String}\":722,\"ResultSet.next()\":957,\"ResultSet.getFloat()\":1185,\"int:5\":721,\"String.valueOf()\":1101,\"int:4\":1253,\"int:3\":1184,\"String:\\u0027;\":571,\"\\u003ca\\u003e\":1363,\"int:2\":1099,\"ResultSet.getTimestamp()\":1100,\"int:1\":642,\"Statement.executeQuery()\":919,\"int:0\":587,\"ResultSet.getInt()\":643,\"SQLException.printStackTrace()\":1471},\"rawCode\":\"/**\\r\\n\\t * Metodo che restituisce gli ordini non ancora pagati da un cliente.\\r\\n\\t * @param cf\\t\\t\\tCodice fiscale del cliente\\r\\n\\t * @return ordini\\t\\tOrdini non ancora pagati\\r\\n\\t */\\r\\n\\tpublic String[][] cercaOrdiniNonPagati(String cf){\\r\\n\\r\\n\\t\\t\\t\\tString[][] ordini \\u003d null;\\r\\n\\t\\t\\t\\t\\t\\r\\n\\t\\t\\t\\ttry {\\r\\n\\t\\t\\t\\t\\t//Conta righe\\r\\n\\t\\t\\t\\t\\tstConsultaOrdini \\u003d con.createStatement();//select count(*) from ordini where stato\\u003d\\u0027NON PAGATO\\u0027 and cliente_CF \\u003d \\u0027KJDFS\\u0027 order by data\\r\\n\\t\\t\\t\\t\\tResultSet result \\u003d stConsultaOrdini.executeQuery(\\\"select count(*) from ordini where stato\\u003d\\u0027ORDINATO\\u0027 and cliente_CF \\u003d \\u0027\\\"+cf+\\\"\\u0027;\\\");\\r\\n\\t\\t\\t\\t\\tint j\\u003d0;\\r\\n\\t\\t\\t\\t\\twhile(result.next()){\\r\\n\\t\\t\\t\\t\\t\\tj\\u003d result.getInt(1);\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t\\t//chiama lista di ordini\\r\\n\\t\\t\\t\\t\\tordini \\u003d new String[j][5];\\r\\n\\t\\t\\t\\t\\tresult \\u003d stConsultaOrdini.executeQuery(\\\"select distinct(codice), data, totale, stato, nome_computer\\\" +\\r\\n\\t\\t\\t\\t\\t\\t\\t\\\" from ordini where stato\\u003d\\u0027ORDINATO\\u0027 and cliente_CF \\u003d \\u0027\\\"+cf+\\\"\\u0027 order by data\\\");\\r\\n\\t\\t\\t\\t\\tj\\u003d0;\\r\\n\\t\\t\\t\\t\\twhile(result.next()){\\r\\n\\t\\t\\t\\t\\t\\tordini[j][0]\\u003dString.valueOf(result.getInt(1)); //ordine.codice e\\u0027 un intero\\r\\n\\t\\t\\t\\t\\t\\tordini[j][1]\\u003dString.valueOf(result.getTimestamp(2));//ordini.data e\\u0027 un timestamp\\r\\n\\t\\t\\t\\t\\t\\tordini[j][2]\\u003dString.valueOf(result.getFloat(3));//ordini.totale e\\u0027 un float\\r\\n\\t\\t\\t\\t\\t\\tordini[j][3]\\u003dresult.getString(4);//stato e\\u0027 un string\\r\\n\\t\\t\\t\\t\\t\\tordini[j][4]\\u003dresult.getString(5);// nomecomputer e\\u0027 un string\\r\\n\\t\\t\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t\\t\\tj++;\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t} catch (SQLException e) {\\r\\n\\t\\t\\t\\t\\t// TODO Auto-generated catch block\\r\\n\\t\\t\\t\\t\\te.printStackTrace();\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t\\r\\n\\t\\t\\t\\treturn ordini;\\r\\n\\t}\"}","380":"{\"expressionStart\":{\"PreparedStatement.setString()\":415,\"ResultSet.getString()\":604,\"\\u003cr\\u003e\":568,\"PreparedStatement.setInt()\":376,\"String\":665,\"\\u003creturn\\u003e\":700,\"{String}\":358,\"ResultSet.next()\":532,\"String[].arrayset()\":587,\"int:3\":369,\"PreparedStatement.executeQuery()\":486,\"String[].arrayget()\":678,\"\\u003ca\\u003e\":575,\"int:2\":446,\"int:1\":404,\"UNKNOWN.println()\":646,\"int:0\":565},\"expressionEnd\":{\"PreparedStatement.setString()\":458,\"ResultSet.getString()\":625,\"\\u003cr\\u003e\":573,\"PreparedStatement.setInt()\":410,\"String\":677,\"\\u003creturn\\u003e\":721,\"{String}\":371,\"ResultSet.next()\":545,\"String[].arrayset()\":603,\"int:3\":370,\"PreparedStatement.executeQuery()\":521,\"String[].arrayget()\":694,\"\\u003ca\\u003e\":578,\"int:2\":447,\"int:1\":405,\"UNKNOWN.println()\":695,\"int:0\":566},\"rawCode\":\"/**\\r\\n\\t * Metodo che restituisce i dati di un dipendente dell\\u0027azienda\\r\\n\\t * @param id\\t\\t\\t\\tNumero identificativo del dipendente\\r\\n\\t * @param password\\t\\t\\tPassword del dipendente\\r\\n\\t * @return datiImpiegato\\tDati del dipendente\\r\\n\\t * @throws SQLException\\r\\n\\t */\\r\\n\\tpublic String[] cercaDipendente(int id, String password) throws SQLException{\\r\\n\\t\\tString[] datiImpiegato \\u003d new String[3];\\r\\n\\t\\tstConsultaDipendente.setInt(1, id);\\r\\n\\t\\tstConsultaDipendente.setString(2, password);\\r\\n\\t\\t\\r\\n\\t\\tResultSet result \\u003d stConsultaDipendente.executeQuery();\\r\\n\\t\\twhile(result.next()){\\r\\n\\t\\t\\tfor (int i \\u003d 0; i \\u003c 3; i++) {\\r\\n\\t\\t\\t\\tdatiImpiegato[i]\\u003dresult.getString(i+1);\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t\\r\\n\\t\\t}\\r\\n\\t\\tSystem.out.println(\\\"Impiegato \\\"+datiImpiegato[0]);\\r\\n\\t\\treturn datiImpiegato;\\r\\n\\t\\t\\r\\n\\t}\"}","381":"{\"expressionStart\":{\"PreparedStatement.setString()\":387,\"\\u003cr\\u003e\":567,\"ResultSet.getString()\":606,\"\\u003creturn\\u003e\":651,\"ResultSet.next()\":532,\"{String}\":360,\"String[].arrayset()\":588,\"int:7\":328,\"PreparedStatement.executeQuery()\":489,\"\\u003ca\\u003e\":577,\"int:2\":449,\"int:1\":411,\"int:0\":564},\"expressionEnd\":{\"PreparedStatement.setString()\":420,\"\\u003cr\\u003e\":575,\"ResultSet.getString()\":627,\"\\u003creturn\\u003e\":673,\"ResultSet.next()\":545,\"{String}\":378,\"String[].arrayset()\":605,\"int:7\":329,\"PreparedStatement.executeQuery()\":517,\"\\u003ca\\u003e\":580,\"int:2\":450,\"int:1\":412,\"int:0\":565},\"rawCode\":\"/**\\r\\n\\t * Metodo per cercare un cliente nel DataBase\\r\\n\\t * @param email\\t\\t\\t\\tEmail del cliente\\r\\n\\t * @param password\\t\\t\\tPassword del cliente\\r\\n\\t * @return cliente\\t\\t\\tIl cliente trovato\\r\\n\\t * @throws SQLException\\r\\n\\t */\\r\\n\\tpublic String[] consultaLog(String email, String password) throws SQLException{\\r\\n\\t\\t\\r\\n\\t\\t//Cliente in DB\\r\\n\\t\\tint maxCol\\u003d7;\\r\\n\\t\\tString[] clienteTrovato \\u003d new String[maxCol];\\r\\n\\t\\t\\r\\n\\t\\tstConsultaLog.setString(1, email);\\r\\n\\t\\tstConsultaLog.setString(2, password);\\r\\n\\t\\t\\r\\n\\t\\tResultSet result \\u003d stConsultaLog.executeQuery();\\r\\n\\t\\t\\r\\n\\t\\twhile(result.next()){\\r\\n\\t\\t\\tfor(int i \\u003d 0; i\\u003cmaxCol; i++){\\r\\n\\t\\t\\t\\tclienteTrovato[i]\\u003dresult.getString(i+1);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\t\\r\\n\\t\\t\\r\\n\\t\\treturn clienteTrovato;\\r\\n\\t}\"}","382":"{\"expressionStart\":{\"ResultSet.getString()\":648,\"UNKNOWN.arrayset()\":587,\"String\":379,\"String[][].arrayget()\":587,\"\\u003creturn\\u003e\":752,\"ResultSet.next()\":567,\"{String}\":492,\"ResultSet.last()\":449,\"ResultSet.beforeFirst()\":532,\"int:3\":337,\"ResultSet.getRow()\":503,\"ResultSet.close()\":729,\"\\u003ca\\u003e\":716,\"int:2\":665,\"int:1\":622,\"int:0\":320,\"Statement.executeQuery()\":356},\"expressionEnd\":{\"ResultSet.getString()\":667,\"UNKNOWN.arrayset()\":603,\"String\":427,\"String[][].arrayget()\":600,\"\\u003creturn\\u003e\":770,\"ResultSet.next()\":580,\"{String}\":527,\"ResultSet.last()\":462,\"ResultSet.beforeFirst()\":552,\"int:3\":338,\"ResultSet.getRow()\":518,\"ResultSet.close()\":743,\"\\u003ca\\u003e\":719,\"int:2\":666,\"int:1\":623,\"int:0\":321,\"Statement.executeQuery()\":440},\"rawCode\":\"/**\\r\\n\\t * Metodo che restituisce i componenti configurabili per un determinato tipo di computer.\\r\\n\\t * @param tipo\\t\\t\\t\\tTipo di computer\\r\\n\\t * @return components\\t\\tComponenti configurabili\\r\\n\\t * @throws SQLException\\r\\n\\t */\\r\\n\\tpublic String[][] getComponentiModello(String tipo) throws SQLException{\\r\\n\\t\\tResultSet result;\\r\\n\\t\\tint i\\u003d0;\\r\\n\\t\\tint maxCol\\u003d3;\\r\\n\\t\\t\\r\\n\\t\\tresult \\u003d stModello.executeQuery(\\\"select id, nome, prezzo from componenti where \\\"+tipo+\\\" \\u003d 1\\\");\\r\\n\\t\\t\\r\\n\\t\\tresult.last();\\r\\n\\t\\tString [][] components \\u003d new String[result.getRow()][maxCol];\\r\\n\\t\\tresult.beforeFirst();\\r\\n\\t\\t\\r\\n\\t\\twhile(result.next()){\\r\\n\\t\\t\\tcomponents[i][0]\\u003d result.getString(1);\\r\\n\\t\\t\\tcomponents[i][1]\\u003d result.getString(2);\\r\\n\\t\\t\\tcomponents[i][2]\\u003d result.getString(3);\\r\\n\\t\\t\\ti++;\\r\\n\\t\\t}\\r\\n\\t\\tresult.close();\\r\\n\\t\\t\\r\\n\\t\\treturn components;\\r\\n\\t\\r\\n\\t\\t\\r\\n\\t}\"}","383":"{\"expressionStart\":{\"String[].arrayset()\":434,\"ResultSet.getString()\":444,\"String:;\":399,\"String\":345,\"int:2\":262,\"Connection.createStatement()\":284,\"int:1\":461,\"\\u003creturn\\u003e\":512,\"{String}\":251,\"int:0\":439,\"ResultSet.next()\":414,\"Statement.executeQuery()\":329},\"expressionEnd\":{\"String[].arrayset()\":441,\"ResultSet.getString()\":463,\"String:;\":402,\"String\":391,\"int:2\":263,\"Connection.createStatement()\":305,\"int:1\":462,\"\\u003creturn\\u003e\":524,\"{String}\":264,\"int:0\":440,\"ResultSet.next()\":427,\"Statement.executeQuery()\":403},\"rawCode\":\"/**\\r\\n\\t * Metodo che permette di ottenere la data di un ordine\\r\\n\\t * @param codice\\t\\tNumero d\\u0027ordine\\r\\n\\t * @return data\\t\\t\\tData dell\\u0027ordine\\r\\n\\t * @throws SQLException\\r\\n\\t */\\r\\n\\tpublic String[] getDataOrdine(int codice) throws SQLException{\\r\\n\\t\\tString data[] \\u003d new String[2];\\r\\n\\t\\tStatement st \\u003d con.createStatement();\\r\\n\\t\\tResultSet result \\u003d st.executeQuery(\\\"select data, stato from ordini where codice\\u003d\\\"+codice+\\\";\\\");\\r\\n\\t\\twhile(result.next()){\\r\\n\\t\\t\\tdata[0] \\u003d result.getString(1);\\r\\n\\t\\t\\tdata[1] \\u003d result.getString(2);\\r\\n\\t\\t}\\r\\n\\t\\t\\r\\n\\t\\treturn data;\\r\\n\\t}\"}","384":"{\"expressionStart\":{\"String[].arrayset()\":536,\"ResultSet.getString()\":552,\"String:;\":501,\"String\":413,\"Connection.createStatement()\":346,\"int:2\":313,\"int:1\":569,\"\\u003creturn\\u003e\":626,\"ResultSet.next()\":516,\"Statement.executeQuery()\":390,\"{String}\":302,\"int:0\":549},\"expressionEnd\":{\"String[].arrayset()\":551,\"ResultSet.getString()\":571,\"String:;\":504,\"String\":487,\"Connection.createStatement()\":367,\"int:2\":314,\"int:1\":570,\"\\u003creturn\\u003e\":646,\"ResultSet.next()\":529,\"Statement.executeQuery()\":505,\"{String}\":315,\"int:0\":550},\"rawCode\":\"/**\\r\\n\\t * Metodo che restituisce la fattura di un certo ordine.\\r\\n\\t * @param codiceOrdine\\t\\t\\tNumero dell\\u0027ordine\\r\\n\\t * @return campiFattura\\t\\t\\tContenuto della fattura dell\\u0027ordine\\r\\n\\t * @throws SQLException\\r\\n\\t */\\r\\n\\tpublic String[] cercaFattura(int codiceOrdine) throws SQLException{\\r\\n\\t\\tString[] campiFattura \\u003d new String[2];\\r\\n\\t\\t\\r\\n\\t\\tStatement stFattura \\u003d con.createStatement();\\r\\n\\t\\tResultSet result \\u003dstFattura.executeQuery(\\\"SELECT numero, data_emissione FROM guanabanadb.fattura where cod_ordine\\u003d\\\"+codiceOrdine+\\\";\\\");\\r\\n\\t\\twhile(result.next()){\\r\\n\\t\\t\\tcampiFattura[0]\\u003dresult.getString(1);\\r\\n\\t\\t\\tcampiFattura[1]\\u003dresult.getString(2);\\r\\n\\t\\t}\\r\\n\\t\\t\\r\\n\\t\\treturn campiFattura;\\r\\n\\t\\t\\r\\n\\t}\"}","385":"{\"expressionStart\":{\"String:VendorError: \":1033,\"UNKNOWN.setCursor()\":792,\"ResultSet.next()\":627,\"Statement.close()\":1265,\"SQLException.getErrorCode()\":1051,\"Cursor.\\u003cinit\\u003e\":833,\"ResultSet.close()\":1124,\"Vector.\\u003cinit\\u003e\":169,\"int:2\":746,\"int:1\":670,\"\\u003cnullcheck\\u003e\":1234,\"Statement.executeQuery()\":595,\"UNKNOWN.createStatement()\":214,\"SQLException.printStackTrace()\":407,\"String:\":682,\"String:select \":534,\"ResultSet.getString()\":764,\"Vector.add()\":644,\"Vector.\\u003ccast\\u003e\":1386,\"\\u003creturn\\u003e\":1379,\"String:SQLState: \":977,\"SQLException.getSQLState()\":992,\"String: from \":549,\"String:SQLException: \":918,\"null:null\":1209,\"String: where \":566,\"\\u003d\":1204,\"UNKNOWN.println()\":958,\"SQLException.getMessage()\":937},\"expressionEnd\":{\"String:VendorError: \":1048,\"UNKNOWN.setCursor()\":867,\"ResultSet.next()\":636,\"Statement.close()\":1277,\"SQLException.getErrorCode()\":1068,\"Cursor.\\u003cinit\\u003e\":866,\"ResultSet.close()\":1134,\"Vector.\\u003cinit\\u003e\":189,\"int:2\":747,\"int:1\":671,\"\\u003cnullcheck\\u003e\":1246,\"Statement.executeQuery()\":619,\"UNKNOWN.createStatement()\":335,\"SQLException.printStackTrace()\":426,\"String:\":684,\"String:select \":543,\"ResultSet.getString()\":779,\"Vector.add()\":706,\"Vector.\\u003ccast\\u003e\":1408,\"\\u003creturn\\u003e\":1409,\"String:SQLState: \":989,\"SQLException.getSQLState()\":1008,\"String: from \":557,\"String:SQLException: \":934,\"null:null\":1213,\"String: where \":575,\"\\u003d\":1213,\"UNKNOWN.println()\":1009,\"SQLException.getMessage()\":952},\"rawCode\":\"public static Vector\\u003cString\\u003e holeFeldForUpdate(String tabelle, String feld, String kriterium){\\n\\t\\tStatement stmt \\u003d null;\\n\\t\\tResultSet rs \\u003d null;\\n\\t\\tVector\\u003cString\\u003e retvec \\u003d new Vector\\u003cString\\u003e();\\n\\t\\t\\t\\n\\t\\ttry {\\n\\t\\t\\tstmt \\u003d  ArztBausteine.thisClass.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,\\n\\t\\t\\t            ResultSet.CONCUR_UPDATABLE );\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\t// TODO Auto-generated catch block\\n\\t\\t\\te.printStackTrace();\\n\\t\\t}\\n\\t\\ttry{\\n\\t\\t\\tArztBausteine.thisClass.jFrame.setCursor(new Cursor(Cursor.WAIT_CURSOR));\\n\\t\\t\\tString sstmt \\u003d \\\"select \\\"+feld+\\\" from \\\"+tabelle+\\\" where \\\"+kriterium;\\n\\t\\t\\trs \\u003d stmt.executeQuery(sstmt);\\n\\t\\t\\tif(rs.next()){\\n\\t\\t\\t\\t retvec.add( (rs.getString(1)\\u003d\\u003dnull  ? \\\"\\\" :  rs.getString(1)) );\\t\\t\\t\\t\\t\\t \\n\\t\\t\\t\\t retvec.add( (rs.getString(2)\\u003d\\u003dnull  ? \\\"\\\" :  rs.getString(2)) );\\n\\t\\t\\t}\\n\\t\\t\\tArztBausteine.thisClass.jFrame.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));\\n\\t\\t}catch(SQLException ev){\\n\\t\\t\\tSystem.out.println(\\\"SQLException: \\\" + ev.getMessage());\\n\\t\\t\\tSystem.out.println(\\\"SQLState: \\\" + ev.getSQLState());\\n\\t\\t\\tSystem.out.println(\\\"VendorError: \\\" + ev.getErrorCode());\\n\\t\\t}\\t\\n\\t\\tfinally {\\n\\t\\t\\tif (rs !\\u003d null) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\trs.close();\\n\\t\\t\\t\\t\\trs \\u003d null;\\n\\t\\t\\t\\t} catch (SQLException sqlEx) { // ignore }\\n\\t\\t\\t\\t\\trs \\u003d null;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\t\\n\\t\\t\\tif (stmt !\\u003d null) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tstmt.close();\\n\\t\\t\\t\\t\\tstmt \\u003d null;\\n\\t\\t\\t\\t} catch (SQLException sqlEx) { // ignore }\\n\\t\\t\\t\\t\\tstmt \\u003d null;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn (Vector\\u003cString\\u003e)retvec;\\n\\t}\"}","386":"{\"expressionStart\":{\"\\u003cr\\u003e\":879,\"String:VendorError: \":1432,\"String\":639,\"UNKNOWN.setCursor()\":493,\"ResultSet.next()\":733,\"ResultSetMetaData.getColumnCount()\":827,\"Statement.close()\":1664,\"SQLException.getErrorCode()\":1450,\"List.size()\":705,\"Cursor.\\u003cinit\\u003e\":534,\"ResultSetMetaData.getColumnName()\":966,\"ResultSet.close()\":1523,\"Vector.\\u003cinit\\u003e\":220,\"int:1\":855,\"\\u003cnullcheck\\u003e\":1118,\"Statement.executeQuery()\":659,\"int:0\":927,\"UNKNOWN.createStatement()\":265,\"SQLException.printStackTrace()\":458,\"String:\":1044,\"List.contains()\":942,\"ResultSet.getString()\":1118,\"ResultSet.getMetaData()\":781,\"String:select \":585,\"Vector.add()\":1006,\"Vector.\\u003ccast\\u003e\":1785,\"\\u003creturn\\u003e\":1778,\"String:SQLState: \":1376,\"SQLException.getSQLState()\":1391,\"String: from \":602,\"String:SQLException: \":1317,\"null:null\":1608,\"\\u003ca\\u003e\":899,\"String: where \":619,\"\\u003d\":1603,\"UNKNOWN.println()\":1298,\"SQLException.getMessage()\":1336},\"expressionEnd\":{\"\\u003cr\\u003e\":898,\"String:VendorError: \":1447,\"String\":649,\"UNKNOWN.setCursor()\":565,\"ResultSet.next()\":742,\"ResultSetMetaData.getColumnCount()\":854,\"Statement.close()\":1676,\"SQLException.getErrorCode()\":1467,\"List.size()\":725,\"Cursor.\\u003cinit\\u003e\":564,\"ResultSetMetaData.getColumnName()\":993,\"ResultSet.close()\":1533,\"Vector.\\u003cinit\\u003e\":240,\"int:1\":856,\"\\u003cnullcheck\\u003e\":1139,\"Statement.executeQuery()\":683,\"int:0\":928,\"UNKNOWN.createStatement()\":386,\"SQLException.printStackTrace()\":477,\"String:\":1046,\"List.contains()\":994,\"ResultSet.getString()\":1133,\"ResultSet.getMetaData()\":797,\"String:select \":594,\"Vector.add()\":1068,\"Vector.\\u003ccast\\u003e\":1807,\"\\u003creturn\\u003e\":1808,\"String:SQLState: \":1388,\"SQLException.getSQLState()\":1407,\"String: from \":610,\"String:SQLException: \":1333,\"null:null\":1612,\"\\u003ca\\u003e\":902,\"String: where \":628,\"\\u003d\":1612,\"UNKNOWN.println()\":1352,\"SQLException.getMessage()\":1351},\"rawCode\":\"/*******************************/\\n\\tpublic static Vector\\u003cString\\u003e holeSatz(String tabelle, String felder, String kriterium, List\\u003c?\\u003e ausschliessen){\\n\\t\\tStatement stmt \\u003d null;\\n\\t\\tResultSet rs \\u003d null;\\n\\t\\tVector\\u003cString\\u003e retvec \\u003d new Vector\\u003cString\\u003e();\\n\\t\\t\\t\\n\\t\\ttry {\\n\\t\\t\\tstmt \\u003d  ArztBausteine.thisClass.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,\\n\\t\\t\\t            ResultSet.CONCUR_UPDATABLE );\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\t// TODO Auto-generated catch block\\n\\t\\t\\te.printStackTrace();\\n\\t\\t}\\n\\t\\ttry{\\n\\t\\t\\tArztBausteine.thisClass.jFrame.setCursor(new Cursor(Cursor.WAIT_CURSOR));\\n\\t\\t\\tString sstmt \\u003d \\\"select \\\"+felder+\\\" from \\\"+tabelle+\\\" where \\\"+kriterium+\\\" LIMIT 1\\\";\\n\\t\\t\\trs \\u003d stmt.executeQuery(sstmt);\\n\\t\\t\\tint nichtlesen \\u003d ausschliessen.size();\\n\\t\\t\\tif(rs.next()){\\n\\t\\t\\t\\t ResultSetMetaData rsMetaData \\u003d rs.getMetaData() ;\\n\\t\\t\\t\\t int numberOfColumns \\u003d rsMetaData.getColumnCount()+1;\\n\\t\\t\\t\\t for(int i \\u003d 1 ; i \\u003c numberOfColumns;i++){\\n\\t\\t\\t\\t\\t if(nichtlesen \\u003e 0){\\n\\t\\t\\t\\t\\t\\t if(!ausschliessen.contains( rsMetaData.getColumnName(i)) ){\\n\\t\\t\\t\\t\\t\\t\\t retvec.add( (rs.getString(i)\\u003d\\u003dnull  ? \\\"\\\" :  rs.getString(i)) );\\t\\t\\t\\t\\t\\t \\n\\t\\t\\t\\t\\t\\t }\\n\\t\\t\\t\\t\\t }else{\\n\\t\\t\\t\\t\\t\\t retvec.add((rs.getString(i)\\u003d\\u003dnull  ? \\\"\\\" :  rs.getString(i)));\\n\\t\\t\\t\\t\\t }\\n\\t\\t\\t\\t }\\n\\t\\t\\t}\\n\\t\\t\\tArztBausteine.thisClass.jFrame.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));\\n\\t\\t}catch(SQLException ev){\\n\\t\\t\\tSystem.out.println(\\\"SQLException: \\\" + ev.getMessage());\\n\\t\\t\\tSystem.out.println(\\\"SQLState: \\\" + ev.getSQLState());\\n\\t\\t\\tSystem.out.println(\\\"VendorError: \\\" + ev.getErrorCode());\\n\\t\\t}\\t\\n\\t\\tfinally {\\n\\t\\t\\tif (rs !\\u003d null) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\trs.close();\\n\\t\\t\\t\\t\\trs \\u003d null;\\n\\t\\t\\t\\t} catch (SQLException sqlEx) { // ignore }\\n\\t\\t\\t\\t\\trs \\u003d null;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\t\\n\\t\\t\\tif (stmt !\\u003d null) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tstmt.close();\\n\\t\\t\\t\\t\\tstmt \\u003d null;\\n\\t\\t\\t\\t} catch (SQLException sqlEx) { // ignore }\\n\\t\\t\\t\\t\\tstmt \\u003d null;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn (Vector\\u003cString\\u003e)retvec;\\n\\t}\"}","387":"{\"expressionStart\":{\"String:\":159,\"ResultSet.getString()\":625,\"String:VendorError: \":929,\"UNKNOWN.setCursor()\":425,\"\\u003creturn\\u003e\":1329,\"ResultSet.next()\":567,\"Statement.close()\":1215,\"String:SQLState: \":873,\"SQLException.getErrorCode()\":947,\"Cursor.\\u003cinit\\u003e\":466,\"SQLException.getSQLState()\":888,\"String:SQLException: \":814,\"ResultSet.close()\":1074,\"null:null\":138,\"\\u003d\":1014,\"int:1\":607,\"\\u003cbreak\\u003e\":658,\"Statement.executeQuery()\":532,\"\\u003cnullcheck\\u003e\":1045,\"UNKNOWN.println()\":854,\"UNKNOWN.trim()\":593,\"UNKNOWN.createStatement()\":221,\"SQLException.getMessage()\":833,\"SQLException.printStackTrace()\":376},\"expressionEnd\":{\"String:\":161,\"ResultSet.getString()\":640,\"String:VendorError: \":944,\"UNKNOWN.setCursor()\":497,\"\\u003creturn\\u003e\":1340,\"ResultSet.next()\":576,\"Statement.close()\":1227,\"String:SQLState: \":885,\"SQLException.getErrorCode()\":964,\"Cursor.\\u003cinit\\u003e\":496,\"SQLException.getSQLState()\":904,\"String:SQLException: \":830,\"ResultSet.close()\":1084,\"null:null\":142,\"\\u003d\":1031,\"int:1\":608,\"\\u003cbreak\\u003e\":664,\"Statement.executeQuery()\":556,\"\\u003cnullcheck\\u003e\":1055,\"UNKNOWN.println()\":905,\"UNKNOWN.trim()\":648,\"UNKNOWN.createStatement()\":342,\"SQLException.getMessage()\":848,\"SQLException.printStackTrace()\":395},\"rawCode\":\"/*****************************************/\\n\\tpublic static String holeEinzelFeld(String xstmt){\\n\\t\\tStatement stmt \\u003d null;\\n\\t\\tResultSet rs \\u003d null;\\n\\t\\tString ret \\u003d \\\"\\\";\\n\\t\\tResultSetMetaData rsMetaData \\u003d null;\\n\\t\\ttry {\\n\\t\\t\\tstmt \\u003d  ArztBausteine.thisClass.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,\\n\\t\\t\\t            ResultSet.CONCUR_UPDATABLE );\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\te.printStackTrace();\\n\\t\\t\\treturn \\\"\\\";\\n\\t\\t}\\n\\t\\ttry{\\n\\t\\t\\tArztBausteine.thisClass.jFrame.setCursor(new Cursor(Cursor.WAIT_CURSOR));\\n\\t\\t\\tString sstmt \\u003d xstmt;\\n\\t\\t\\trs \\u003d stmt.executeQuery(sstmt);\\n\\t\\t\\twhile(rs.next()){\\n\\t\\t\\t\\t\\t\\t ret \\u003d  (rs.getString(1)\\u003d\\u003dnull  ? \\\"\\\" :  rs.getString(1)).trim() ;\\n\\t\\t\\t\\t\\t\\t break;\\n\\t\\t\\t}\\n\\t\\t\\tArztBausteine.thisClass.jFrame.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));\\n\\t\\t\\treturn ret;\\n\\t\\t}catch(SQLException ev){\\n\\t\\t\\tSystem.out.println(\\\"SQLException: \\\" + ev.getMessage());\\n\\t\\t\\tSystem.out.println(\\\"SQLState: \\\" + ev.getSQLState());\\n\\t\\t\\tSystem.out.println(\\\"VendorError: \\\" + ev.getErrorCode());\\n\\t\\t}\\n\\t\\tfinally {\\n\\t\\t\\tif(rsMetaData !\\u003d null){\\n\\t\\t\\t\\trsMetaData \\u003d null;\\n\\t\\t\\t}\\n\\t\\t\\tif (rs !\\u003d null) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\trs.close();\\n\\t\\t\\t\\t\\trs \\u003d null;\\n\\t\\t\\t\\t} catch (SQLException sqlEx) { // ignore }\\n\\t\\t\\t\\t\\trs \\u003d null;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\t\\n\\t\\t\\tif (stmt !\\u003d null) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tstmt.close();\\n\\t\\t\\t\\t\\tstmt \\u003d null;\\n\\t\\t\\t\\t} catch (SQLException sqlEx) { // ignore }\\n\\t\\t\\t\\t\\tstmt \\u003d null;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn ret;\\n\\t}\"}","388":"{\"expressionStart\":{\"List.contains()\":478,\"ResultSet.getString()\":616,\"Vector.add()\":539,\"UNKNOWN.toLowerCase()\":498,\"String\":404,\"\\u003creturn\\u003e\":1021,\"ResultSet.next()\":435,\"Statement.close()\":907,\"ResultSet.close()\":766,\"null:null\":998,\"Vector.\\u003cinit\\u003e\":167,\"int:1\":511,\"\\u003d\":991,\"\\u003cnullcheck\\u003e\":737,\"Statement.executeQuery()\":386,\"SQLException.printStackTrace()\":693,\"UNKNOWN.createStatement()\":256},\"expressionEnd\":{\"List.contains()\":529,\"ResultSet.getString()\":631,\"Vector.add()\":579,\"UNKNOWN.toLowerCase()\":527,\"String\":415,\"\\u003creturn\\u003e\":1032,\"ResultSet.next()\":444,\"Statement.close()\":919,\"ResultSet.close()\":776,\"null:null\":1002,\"Vector.\\u003cinit\\u003e\":187,\"int:1\":512,\"\\u003d\":1002,\"\\u003cnullcheck\\u003e\":747,\"Statement.executeQuery()\":424,\"SQLException.printStackTrace()\":712,\"UNKNOWN.createStatement()\":376},\"rawCode\":\"/*****************************************/\\n\\tpublic static Vector\\u003cString\\u003e holeFeldNamen(String tabelle, boolean ausnahmen, List\\u003c?\\u003e lausnahmen){\\n\\t\\tVector\\u003cString\\u003e vec \\u003d new Vector\\u003cString\\u003e();\\n\\t\\tStatement stmt \\u003d null;\\n\\t\\tResultSet rs \\u003d null;\\n\\t\\ttry {\\n\\t\\t\\tstmt \\u003d  ArztBausteine.thisClass.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,\\n\\t\\t            ResultSet.CONCUR_UPDATABLE );\\n\\t\\t\\trs \\u003d stmt.executeQuery(\\\"describe \\\"+tabelle);\\n\\t\\t\\twhile(rs.next()){\\n\\t\\t\\t\\t if(ausnahmen){\\n\\t\\t\\t\\t\\t if(! lausnahmen.contains(rs.getString(1).toLowerCase() )){\\n\\t\\t\\t\\t\\t\\t vec.add( rs.getString(1).toLowerCase() );\\n\\t\\t\\t\\t\\t }\\n\\t\\t\\t\\t }else{\\n\\t\\t\\t\\t\\t vec.add( rs.getString(1).toLowerCase() );\\n\\t\\t\\t\\t }\\n\\t\\t\\t}\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\te.printStackTrace();\\n\\t\\t}\\n\\t\\tfinally {\\n\\t\\t\\tif (rs !\\u003d null) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\trs.close();\\n\\t\\t\\t\\t\\trs \\u003d null;\\n\\t\\t\\t\\t} catch (SQLException sqlEx) { // ignore }\\n\\t\\t\\t\\t\\trs \\u003d null;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\t\\n\\t\\t\\tif (stmt !\\u003d null) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tstmt.close();\\n\\t\\t\\t\\t\\tstmt \\u003d null;\\n\\t\\t\\t\\t} catch (SQLException sqlEx) { // ignore }\\n\\t\\t\\t\\t\\tstmt \\u003d null;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn vec;\\n\\t}\"}","389":"{\"expressionStart\":{\"\\u003cr\\u003e\":1007,\"String:VendorError: \":1610,\"UNKNOWN.setCursor()\":588,\"ResultSet.next()\":824,\"ResultSetMetaData.getColumnCount()\":920,\"Statement.close()\":1898,\"SQLException.getErrorCode()\":1628,\"Cursor.\\u003cinit\\u003e\":629,\"List.size()\":793,\"ResultSetMetaData.getColumnName()\":1059,\"ResultSet.close()\":1757,\"Vector.\\u003cinit\\u003e\":280,\"int:1\":948,\"\\u003cnullcheck\\u003e\":1867,\"int:0\":1020,\"Statement.executeQuery()\":743,\"SQLException.printStackTrace()\":553,\"UNKNOWN.createStatement()\":360,\"Vector.clone()\":1307,\"Vector.clear()\":840,\"List.contains()\":1035,\"String:\":1137,\"ResultSet.getMetaData()\":874,\"ResultSet.getString()\":1243,\"String:select \":680,\"Vector.add()\":1283,\"Vector.\\u003ccast\\u003e\":1299,\"\\u003creturn\\u003e\":2012,\"String:SQLState: \":1554,\"SQLException.getSQLState()\":1569,\"String:SQLException: \":1495,\"String: from \":697,\"null:null\":335,\"\\u003ca\\u003e\":992,\"String: where \":714,\"\\u003d\":1982,\"UNKNOWN.println()\":1535,\"SQLException.getMessage()\":1514},\"expressionEnd\":{\"\\u003cr\\u003e\":1021,\"String:VendorError: \":1625,\"UNKNOWN.setCursor()\":660,\"ResultSet.next()\":833,\"ResultSetMetaData.getColumnCount()\":947,\"Statement.close()\":1910,\"SQLException.getErrorCode()\":1645,\"Cursor.\\u003cinit\\u003e\":659,\"List.size()\":813,\"ResultSetMetaData.getColumnName()\":1086,\"ResultSet.close()\":1767,\"Vector.\\u003cinit\\u003e\":300,\"int:1\":949,\"\\u003cnullcheck\\u003e\":1879,\"int:0\":1021,\"Statement.executeQuery()\":767,\"SQLException.printStackTrace()\":572,\"UNKNOWN.createStatement()\":481,\"Vector.clone()\":1321,\"Vector.clear()\":854,\"List.contains()\":1087,\"String:\":1139,\"ResultSet.getMetaData()\":890,\"ResultSet.getString()\":1258,\"String:select \":689,\"Vector.add()\":1322,\"Vector.\\u003ccast\\u003e\":1321,\"\\u003creturn\\u003e\":2039,\"String:SQLState: \":1566,\"SQLException.getSQLState()\":1585,\"String:SQLException: \":1511,\"String: from \":705,\"null:null\":339,\"\\u003ca\\u003e\":995,\"String: where \":723,\"\\u003d\":1993,\"UNKNOWN.println()\":1586,\"SQLException.getMessage()\":1529},\"rawCode\":\"/*******************************/\\n\\tpublic static Vector\\u003cVector\\u003cString\\u003e\\u003e holeSaetze(String tabelle, String felder, String kriterium, List ausschliessen){\\n\\t\\tStatement stmt \\u003d null;\\n\\t\\tResultSet rs \\u003d null;\\n\\t\\tVector\\u003cString\\u003e retvec \\u003d new Vector\\u003cString\\u003e();\\n\\t\\tVector\\u003cVector\\u003e retkomplett \\u003d new Vector\\u003cVector\\u003e();\\n\\t\\tResultSetMetaData rsMetaData \\u003d null;\\n\\t\\ttry {\\n\\t\\t\\tstmt \\u003d  ArztBausteine.thisClass.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,\\n\\t\\t\\t            ResultSet.CONCUR_UPDATABLE );\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\t// TODO Auto-generated catch block\\n\\t\\t\\te.printStackTrace();\\n\\t\\t}\\n\\t\\ttry{\\n\\t\\t\\tArztBausteine.thisClass.jFrame.setCursor(new Cursor(Cursor.WAIT_CURSOR));\\n\\t\\t\\tString sstmt \\u003d \\\"select \\\"+felder+\\\" from \\\"+tabelle+\\\" where \\\"+kriterium;\\n\\t\\t\\trs \\u003d stmt.executeQuery(sstmt);\\n\\t\\t\\t\\n\\t\\t\\tint nichtlesen \\u003d ausschliessen.size();\\n\\t\\t\\twhile(rs.next()){\\n\\t\\t\\t\\tretvec.clear();\\n\\t\\t\\t\\t rsMetaData \\u003d rs.getMetaData() ;\\n\\t\\t\\t\\t int numberOfColumns \\u003d rsMetaData.getColumnCount()+1;\\n\\t\\t\\t\\t for(int i \\u003d 1 ; i \\u003c numberOfColumns;i++){\\n\\t\\t\\t\\t\\t if(nichtlesen \\u003e 0){\\n\\t\\t\\t\\t\\t\\t if(!ausschliessen.contains( rsMetaData.getColumnName(i)) ){\\n\\t\\t\\t\\t\\t\\t\\t retvec.add( (rs.getString(i)\\u003d\\u003dnull  ? \\\"\\\" :  rs.getString(i)) );\\t\\t\\t\\t\\t\\t \\n\\t\\t\\t\\t\\t\\t }\\n\\t\\t\\t\\t\\t }else{\\n\\t\\t\\t\\t\\t\\t retvec.add( (rs.getString(i)\\u003d\\u003dnull  ? \\\"\\\" :  rs.getString(i)) );\\n\\t\\t\\t\\t\\t }\\n\\t\\t\\t\\t }\\n\\t\\t\\t\\t retkomplett.add((Vector)retvec.clone());\\n\\t\\t\\t}\\n\\t\\t\\tretvec.clear();\\n\\t\\t\\tretvec \\u003d null;\\n\\t\\t\\tArztBausteine.thisClass.jFrame.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));\\n\\t\\t}catch(SQLException ev){\\n\\t\\t\\tSystem.out.println(\\\"SQLException: \\\" + ev.getMessage());\\n\\t\\t\\tSystem.out.println(\\\"SQLState: \\\" + ev.getSQLState());\\n\\t\\t\\tSystem.out.println(\\\"VendorError: \\\" + ev.getErrorCode());\\n\\t\\t}\\t\\n\\t\\tfinally {\\n\\t\\t\\tif (rsMetaData !\\u003d null){\\n\\t\\t\\t\\trsMetaData \\u003d null;\\n\\t\\t\\t}\\n\\t\\t\\tif (rs !\\u003d null) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\trs.close();\\n\\t\\t\\t\\t\\trs \\u003d null;\\n\\t\\t\\t\\t} catch (SQLException sqlEx) { // ignore }\\n\\t\\t\\t\\t\\trs \\u003d null;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\t\\n\\t\\t\\tif (stmt !\\u003d null) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tstmt.close();\\n\\t\\t\\t\\t\\tstmt \\u003d null;\\n\\t\\t\\t\\t} catch (SQLException sqlEx) { // ignore }\\n\\t\\t\\t\\t\\tstmt \\u003d null;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn (Vector)retkomplett;\\n\\t}\"}","390":"{\"expressionStart\":{\"String:\":173,\"ResultSet.getString()\":725,\"String:select \":570,\"String:VendorError: \":995,\"String\":585,\"UNKNOWN.setCursor()\":478,\"\\u003creturn\\u003e\":1341,\"ResultSet.next()\":668,\"Statement.close()\":1227,\"String:SQLState: \":939,\"SQLException.getErrorCode()\":1013,\"Cursor.\\u003cinit\\u003e\":519,\"SQLException.getSQLState()\":954,\"String:SQLException: \":880,\"ResultSet.close()\":1086,\"null:null\":1171,\"\\u003d\":1166,\"UNKNOWN.println()\":861,\"Statement.executeQuery()\":635,\"\\u003cnullcheck\\u003e\":1196,\"UNKNOWN.createStatement()\":250,\"SQLException.getMessage()\":899,\"SQLException.printStackTrace()\":443},\"expressionEnd\":{\"String:\":175,\"ResultSet.getString()\":743,\"String:select \":579,\"String:VendorError: \":1010,\"String\":604,\"UNKNOWN.setCursor()\":550,\"\\u003creturn\\u003e\":1352,\"ResultSet.next()\":677,\"Statement.close()\":1239,\"String:SQLState: \":951,\"SQLException.getErrorCode()\":1030,\"Cursor.\\u003cinit\\u003e\":549,\"SQLException.getSQLState()\":970,\"String:SQLException: \":896,\"ResultSet.close()\":1096,\"null:null\":1175,\"\\u003d\":1175,\"UNKNOWN.println()\":915,\"Statement.executeQuery()\":659,\"\\u003cnullcheck\\u003e\":1208,\"UNKNOWN.createStatement()\":371,\"SQLException.getMessage()\":914,\"SQLException.printStackTrace()\":462},\"rawCode\":\"/*****************************************/\\n\\tpublic static String holePatFeld(String feld, String kriterium){\\n\\t\\tStatement stmt \\u003d null;\\n\\t\\tResultSet rs \\u003d null;\\n\\t\\tString ret \\u003d \\\"\\\";\\n\\t\\t//Vector\\u003cString\\u003e retvec \\u003d new Vector\\u003cString\\u003e();\\n\\t\\t\\t\\n\\t\\ttry {\\n\\t\\t\\tstmt \\u003d  ArztBausteine.thisClass.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,\\n\\t\\t\\t            ResultSet.CONCUR_UPDATABLE );\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\t// TODO Auto-generated catch block\\n\\t\\t\\te.printStackTrace();\\n\\t\\t}\\n\\t\\ttry{\\n\\t\\t\\tArztBausteine.thisClass.jFrame.setCursor(new Cursor(Cursor.WAIT_CURSOR));\\n\\t\\t\\tString sstmt \\u003d \\\"select \\\"+feld+\\\" from pat5 where \\\"+kriterium+\\\" LIMIT 1\\\";\\n\\t\\t\\trs \\u003d stmt.executeQuery(sstmt);\\n\\n\\t\\t\\tif(rs.next()){\\n\\t\\t\\t\\tret \\u003d (rs.getString(feld)\\u003d\\u003dnull  ? \\\"\\\" :  rs.getString(feld));\\n\\t\\t\\t}\\n\\t\\t\\tArztBausteine.thisClass.jFrame.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));\\n\\t\\t}catch(SQLException ev){\\n\\t\\t\\tSystem.out.println(\\\"SQLException: \\\" + ev.getMessage());\\n\\t\\t\\tSystem.out.println(\\\"SQLState: \\\" + ev.getSQLState());\\n\\t\\t\\tSystem.out.println(\\\"VendorError: \\\" + ev.getErrorCode());\\n\\t\\t}\\t\\n\\t\\tfinally {\\n\\t\\t\\tif (rs !\\u003d null) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\trs.close();\\n\\t\\t\\t\\t\\trs \\u003d null;\\n\\t\\t\\t\\t} catch (SQLException sqlEx) { // ignore }\\n\\t\\t\\t\\t\\trs \\u003d null;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\t\\n\\t\\t\\tif (stmt !\\u003d null) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tstmt.close();\\n\\t\\t\\t\\t\\tstmt \\u003d null;\\n\\t\\t\\t\\t} catch (SQLException sqlEx) { // ignore }\\n\\t\\t\\t\\t\\tstmt \\u003d null;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn ret;\\n\\t}\"}","391":"{\"expressionStart\":{\"String:\":173,\"ResultSet.getString()\":678,\"String:select \":520,\"String\":535,\"String:VendorError: \":948,\"UNKNOWN.setCursor()\":428,\"\\u003creturn\\u003e\":1294,\"ResultSet.next()\":621,\"Statement.close()\":1180,\"String:SQLState: \":892,\"SQLException.getErrorCode()\":966,\"Cursor.\\u003cinit\\u003e\":469,\"SQLException.getSQLState()\":907,\"String:SQLException: \":833,\"ResultSet.close()\":1039,\"null:null\":1124,\"\\u003d\":1119,\"UNKNOWN.println()\":814,\"\\u003cnullcheck\\u003e\":644,\"Statement.executeQuery()\":588,\"SQLException.getMessage()\":852,\"SQLException.printStackTrace()\":393,\"UNKNOWN.createStatement()\":200},\"expressionEnd\":{\"String:\":175,\"ResultSet.getString()\":696,\"String:select \":529,\"String\":557,\"String:VendorError: \":963,\"UNKNOWN.setCursor()\":500,\"\\u003creturn\\u003e\":1305,\"ResultSet.next()\":630,\"Statement.close()\":1192,\"String:SQLState: \":904,\"SQLException.getErrorCode()\":983,\"Cursor.\\u003cinit\\u003e\":499,\"SQLException.getSQLState()\":923,\"String:SQLException: \":849,\"ResultSet.close()\":1049,\"null:null\":1128,\"\\u003d\":1128,\"UNKNOWN.println()\":868,\"\\u003cnullcheck\\u003e\":668,\"Statement.executeQuery()\":612,\"SQLException.getMessage()\":867,\"SQLException.printStackTrace()\":412,\"UNKNOWN.createStatement()\":321},\"rawCode\":\"/*****************************************/\\n\\tpublic static String holeRezFeld(String feld, String kriterium){\\n\\t\\tStatement stmt \\u003d null;\\n\\t\\tResultSet rs \\u003d null;\\n\\t\\tString ret \\u003d \\\"\\\";\\n\\t\\t\\t\\n\\t\\ttry {\\n\\t\\t\\tstmt \\u003d  ArztBausteine.thisClass.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,\\n\\t\\t\\t            ResultSet.CONCUR_UPDATABLE );\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\t// TODO Auto-generated catch block\\n\\t\\t\\te.printStackTrace();\\n\\t\\t}\\n\\t\\ttry{\\n\\t\\t\\tArztBausteine.thisClass.jFrame.setCursor(new Cursor(Cursor.WAIT_CURSOR));\\n\\t\\t\\tString sstmt \\u003d \\\"select \\\"+feld+\\\" from verordn where \\\"+kriterium+\\\" LIMIT 1\\\";\\n\\t\\t\\trs \\u003d stmt.executeQuery(sstmt);\\n\\n\\t\\t\\tif(rs.next()){\\n\\t\\t\\t\\tret \\u003d (rs.getString(feld)\\u003d\\u003dnull  ? \\\"\\\" :  rs.getString(feld));\\n\\t\\t\\t}\\n\\t\\t\\tArztBausteine.thisClass.jFrame.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));\\n\\t\\t}catch(SQLException ev){\\n\\t\\t\\tSystem.out.println(\\\"SQLException: \\\" + ev.getMessage());\\n\\t\\t\\tSystem.out.println(\\\"SQLState: \\\" + ev.getSQLState());\\n\\t\\t\\tSystem.out.println(\\\"VendorError: \\\" + ev.getErrorCode());\\n\\t\\t}\\t\\n\\t\\tfinally {\\n\\t\\t\\tif (rs !\\u003d null) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\trs.close();\\n\\t\\t\\t\\t\\trs \\u003d null;\\n\\t\\t\\t\\t} catch (SQLException sqlEx) { // ignore }\\n\\t\\t\\t\\t\\trs \\u003d null;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\t\\n\\t\\t\\tif (stmt !\\u003d null) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tstmt.close();\\n\\t\\t\\t\\t\\tstmt \\u003d null;\\n\\t\\t\\t\\t} catch (SQLException sqlEx) { // ignore }\\n\\t\\t\\t\\t\\tstmt \\u003d null;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn ret;\\n\\t}\"}","392":"{\"expressionStart\":{\"\\u003cr\\u003e\":892,\"String:VendorError: \":1337,\"UNKNOWN.setCursor()\":1059,\"ResultSet.next()\":748,\"ResultSetMetaData.getColumnCount()\":840,\"Statement.close()\":1624,\"SQLException.getErrorCode()\":1355,\"Cursor.\\u003cinit\\u003e\":1100,\"ResultSet.close()\":1483,\"Vector.\\u003cinit\\u003e\":262,\"int:1\":868,\"\\u003cnullcheck\\u003e\":938,\"Statement.executeQuery()\":713,\"SQLException.printStackTrace()\":571,\"UNKNOWN.createStatement()\":378,\"Vector.clone()\":1034,\"Vector.clear()\":1139,\"String:\":171,\"ResultSet.getString()\":938,\"ResultSet.getMetaData()\":798,\"Vector.add()\":1002,\"Vector.\\u003ccast\\u003e\":1745,\"\\u003creturn\\u003e\":1738,\"String:SQLState: \":1281,\"SQLException.getSQLState()\":1296,\"String:SQLException: \":1222,\"null:null\":1568,\"\\u003ca\\u003e\":912,\"\\u003d\":1563,\"UNKNOWN.println()\":1262,\"SQLException.getMessage()\":1241},\"expressionEnd\":{\"\\u003cr\\u003e\":911,\"String:VendorError: \":1352,\"UNKNOWN.setCursor()\":1134,\"ResultSet.next()\":757,\"ResultSetMetaData.getColumnCount()\":867,\"Statement.close()\":1636,\"SQLException.getErrorCode()\":1372,\"Cursor.\\u003cinit\\u003e\":1133,\"ResultSet.close()\":1493,\"Vector.\\u003cinit\\u003e\":290,\"int:1\":869,\"\\u003cnullcheck\\u003e\":959,\"Statement.executeQuery()\":737,\"SQLException.printStackTrace()\":590,\"UNKNOWN.createStatement()\":499,\"Vector.clone()\":1048,\"Vector.clear()\":1153,\"String:\":173,\"ResultSet.getString()\":953,\"ResultSet.getMetaData()\":814,\"Vector.add()\":1049,\"Vector.\\u003ccast\\u003e\":1781,\"\\u003creturn\\u003e\":1782,\"String:SQLState: \":1293,\"SQLException.getSQLState()\":1312,\"String:SQLException: \":1238,\"null:null\":1572,\"\\u003ca\\u003e\":915,\"\\u003d\":1572,\"UNKNOWN.println()\":1313,\"SQLException.getMessage()\":1256},\"rawCode\":\"/*****************************************/\\n\\tpublic static Vector\\u003cVector\\u003cString\\u003e\\u003e holeFelder(String xstmt){\\n\\t\\tStatement stmt \\u003d null;\\n\\t\\tResultSet rs \\u003d null;\\n\\t\\tString ret \\u003d \\\"\\\";\\n\\t\\tVector\\u003cString\\u003e retvec \\u003d new Vector\\u003cString\\u003e();\\n\\t\\tVector\\u003cVector\\u003cString\\u003e\\u003e retkomplett \\u003d new Vector\\u003cVector\\u003cString\\u003e\\u003e();\\t\\n\\t\\tResultSetMetaData rsMetaData \\u003d null;\\n\\t\\tint numberOfColumns \\u003d 0;\\n\\t\\ttry {\\n\\t\\t\\tstmt \\u003d  ArztBausteine.thisClass.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,\\n\\t\\t\\t            ResultSet.CONCUR_UPDATABLE );\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\t// TODO Auto-generated catch block\\n\\t\\t\\te.printStackTrace();\\n\\t\\t}\\n\\t\\ttry{\\n\\t\\t\\tArztBausteine.thisClass.jFrame.setCursor(new Cursor(Cursor.WAIT_CURSOR));\\n\\t\\t\\tString sstmt \\u003d xstmt;\\n\\t\\t\\trs \\u003d stmt.executeQuery(sstmt);\\n\\t\\t\\twhile(rs.next()){\\n\\t\\t\\t\\tretvec.clear();\\n\\t\\t\\t\\t rsMetaData \\u003d rs.getMetaData() ;\\n\\t\\t\\t\\t numberOfColumns \\u003d rsMetaData.getColumnCount()+1;\\n\\t\\t\\t\\t for(int i \\u003d 1 ; i \\u003c numberOfColumns;i++){\\n\\t\\t\\t\\t\\t\\t retvec.add( (rs.getString(i)\\u003d\\u003dnull  ? \\\"\\\" :  rs.getString(i)) );\\n\\n\\t\\t\\t\\t }\\n\\t\\t\\t\\t retkomplett.add((Vector\\u003cString\\u003e)retvec.clone());\\n\\t\\t\\t}\\n\\t\\t\\tArztBausteine.thisClass.jFrame.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));\\n\\t\\t\\tretvec.clear();\\n\\t\\t\\tretvec \\u003d null;\\n\\t\\t}catch(SQLException ev){\\n\\t\\t\\tSystem.out.println(\\\"SQLException: \\\" + ev.getMessage());\\n\\t\\t\\tSystem.out.println(\\\"SQLState: \\\" + ev.getSQLState());\\n\\t\\t\\tSystem.out.println(\\\"VendorError: \\\" + ev.getErrorCode());\\n\\t\\t}\\n\\n\\t\\tfinally {\\n\\t\\t\\tif(rsMetaData !\\u003d null){\\n\\t\\t\\t\\trsMetaData \\u003d null;\\n\\t\\t\\t}\\n\\t\\t\\tif (rs !\\u003d null) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\trs.close();\\n\\t\\t\\t\\t\\trs \\u003d null;\\n\\t\\t\\t\\t} catch (SQLException sqlEx) { // ignore }\\n\\t\\t\\t\\t\\trs \\u003d null;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\t\\n\\t\\t\\tif (stmt !\\u003d null) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tstmt.close();\\n\\t\\t\\t\\t\\tstmt \\u003d null;\\n\\t\\t\\t\\t} catch (SQLException sqlEx) { // ignore }\\n\\t\\t\\t\\t\\tstmt \\u003d null;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn (Vector\\u003cVector\\u003cString\\u003e\\u003e) retkomplett;\\n\\t}\"}","393":"{\"expressionStart\":{\"\\u003cr\\u003e\":1098,\"String\":794,\"String:VendorError: \":1653,\"ResultSet.next()\":952,\"ResultSetMetaData.getColumnCount()\":1046,\"String: \":780,\"Integer.toString()\":839,\"Statement.close()\":1885,\"SQLException.getErrorCode()\":1671,\"List.size()\":924,\"ResultSetMetaData.getColumnName()\":1185,\"ResultSet.close()\":1744,\"Vector.\\u003cinit\\u003e\":237,\"int:1\":862,\"int:0\":827,\"\\u003cnullcheck\\u003e\":1715,\"Statement.executeQuery()\":878,\"UNKNOWN.createStatement()\":282,\"SQLException.printStackTrace()\":617,\"List.contains()\":1161,\"String:\":866,\"ResultSet.getString()\":1269,\"ResultSet.getMetaData()\":1000,\"String:select \":746,\"Vector.add()\":1325,\"Vector.\\u003ccast\\u003e\":2006,\"\\u003creturn\\u003e\":1999,\"int[].arrayget()\":856,\"String:SQLState: \":1597,\"SQLException.getSQLState()\":1612,\"String:SQLException: \":1538,\"String: from \":763,\"null:null\":1976,\"\\u003ca\\u003e\":1118,\"String:,\":835,\"\\u003d\":1824,\"UNKNOWN.println()\":1634,\"SQLException.getMessage()\":1557},\"expressionEnd\":{\"\\u003cr\\u003e\":1117,\"String\":803,\"String:VendorError: \":1668,\"ResultSet.next()\":961,\"ResultSetMetaData.getColumnCount()\":1073,\"String: \":783,\"Integer.toString()\":865,\"Statement.close()\":1897,\"SQLException.getErrorCode()\":1688,\"List.size()\":944,\"ResultSetMetaData.getColumnName()\":1212,\"ResultSet.close()\":1754,\"Vector.\\u003cinit\\u003e\":257,\"int:1\":863,\"int:0\":828,\"\\u003cnullcheck\\u003e\":1725,\"Statement.executeQuery()\":902,\"UNKNOWN.createStatement()\":402,\"SQLException.printStackTrace()\":636,\"List.contains()\":1213,\"String:\":868,\"ResultSet.getString()\":1284,\"ResultSet.getMetaData()\":1016,\"String:select \":755,\"Vector.add()\":1385,\"Vector.\\u003ccast\\u003e\":2028,\"\\u003creturn\\u003e\":2029,\"int[].arrayget()\":864,\"String:SQLState: \":1609,\"SQLException.getSQLState()\":1628,\"String:SQLException: \":1554,\"String: from \":771,\"null:null\":1980,\"\\u003ca\\u003e\":1121,\"String:,\":838,\"\\u003d\":1833,\"UNKNOWN.println()\":1689,\"SQLException.getMessage()\":1572},\"rawCode\":\"/*******************************/\\n\\tpublic static Vector\\u003cString\\u003e holeSatzLimit(String tabelle, String felder, String kriterium,int[] limit, List\\u003c?\\u003e ausschliessen){\\n\\t\\tStatement stmt \\u003d null;\\n\\t\\tResultSet rs \\u003d null;\\n\\t\\tVector\\u003cString\\u003e retvec \\u003d new Vector\\u003cString\\u003e();\\n\\t\\t\\t\\n\\t\\ttry {\\n\\t\\t\\tstmt \\u003d  ArztBausteine.thisClass.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,\\n\\t\\t            ResultSet.CONCUR_UPDATABLE );\\n/*\\t\\t\\t\\n\\t\\t\\tstmt \\u003d  ArztBausteine.thisClass.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,\\n\\t\\t\\t            ResultSet.CONCUR_UPDATABLE );\\n*/\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\t// TODO Auto-generated catch block\\n\\t\\t\\te.printStackTrace();\\n\\t\\t}\\n\\t\\ttry{\\n\\t\\t\\t//ArztBausteine.thisClass.jFrame.setCursor(new Cursor(Cursor.WAIT_CURSOR));\\n\\t\\t\\tString sstmt \\u003d \\\"select \\\"+felder+\\\" from \\\"+tabelle+\\\" \\\"+kriterium+\\\" LIMIT \\\"+Integer.toString(limit[0])+\\n\\t\\t\\t\\\",\\\"+Integer.toString(limit[1])+\\\"\\\";\\n\\t\\t\\trs \\u003d stmt.executeQuery(sstmt);\\n\\t\\t\\tint nichtlesen \\u003d ausschliessen.size();\\n\\t\\t\\tif(rs.next()){\\n\\t\\t\\t\\t ResultSetMetaData rsMetaData \\u003d rs.getMetaData() ;\\n\\t\\t\\t\\t int numberOfColumns \\u003d rsMetaData.getColumnCount()+1;\\n\\t\\t\\t\\t for(int i \\u003d 1 ; i \\u003c numberOfColumns;i++){\\n\\t\\t\\t\\t\\t if(nichtlesen \\u003e 0){\\n\\t\\t\\t\\t\\t\\t if(!ausschliessen.contains( rsMetaData.getColumnName(i)) ){\\n\\t\\t\\t\\t\\t\\t\\t retvec.add( (rs.getString(i)\\u003d\\u003dnull  ? \\\"\\\" :  rs.getString(i)) );\\t\\t\\t\\t\\t\\t \\n\\t\\t\\t\\t\\t\\t }\\n\\t\\t\\t\\t\\t }else{\\n\\t\\t\\t\\t\\t\\t retvec.add((rs.getString(i)\\u003d\\u003dnull  ? \\\"\\\" :  rs.getString(i)));\\n\\t\\t\\t\\t\\t }\\n\\t\\t\\t\\t }\\n\\t\\t\\t}\\n\\t\\t\\t//ArztBausteine.thisClass.jFrame.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));\\n\\t\\t}catch(SQLException ev){\\n\\t\\t\\tSystem.out.println(\\\"SQLException: \\\" + ev.getMessage());\\n\\t\\t\\tSystem.out.println(\\\"SQLState: \\\" + ev.getSQLState());\\n\\t\\t\\tSystem.out.println(\\\"VendorError: \\\" + ev.getErrorCode());\\n\\t\\t}\\t\\n\\t\\tfinally {\\n\\t\\t\\tif (rs !\\u003d null) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\trs.close();\\n\\t\\t\\t\\t\\trs \\u003d null;\\n\\t\\t\\t\\t} catch (SQLException sqlEx) { // ignore }\\n\\t\\t\\t\\t\\trs \\u003d null;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\t\\n\\t\\t\\tif (stmt !\\u003d null) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tstmt.close();\\n\\t\\t\\t\\t\\tstmt \\u003d null;\\n\\t\\t\\t\\t} catch (SQLException sqlEx) { // ignore }\\n\\t\\t\\t\\t\\tstmt \\u003d null;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn (Vector\\u003cString\\u003e)retvec;\\n\\t}\"}","394":"{\"expressionStart\":{\"Student.\\u003cinit\\u003e\":101,\"Student.setDegreeDesc()\":416,\"Student.setStudentID()\":118,\"Student.setMiddleName()\":222,\"ResultSet.getString()\":296,\"Student.setDegree()\":371,\"String\":309,\"Student.setEmail()\":328,\"Student.setLastName()\":276,\"\\u003creturn\\u003e\":473,\"Student.setFirstName()\":170},\"expressionEnd\":{\"Student.\\u003cinit\\u003e\":114,\"Student.setDegreeDesc()\":466,\"Student.setStudentID()\":166,\"Student.setMiddleName()\":272,\"ResultSet.getString()\":321,\"Student.setDegree()\":412,\"String\":320,\"Student.setEmail()\":367,\"Student.setLastName()\":322,\"\\u003creturn\\u003e\":488,\"Student.setFirstName()\":218},\"rawCode\":\"@Override\\n\\tpublic Student mapRow(ResultSet rs, int rowNum) throws SQLException {\\n\\t\\tStudent student \\u003d new Student();\\n\\t\\tstudent.setStudentID(rs.getString(\\\"student_id\\\"));\\n\\t\\tstudent.setFirstName(rs.getString(\\\"first_name\\\"));\\n\\t\\tstudent.setMiddleName(rs.getString(\\\"middle_name\\\"));\\n\\t\\tstudent.setLastName(rs.getString(\\\"last_name\\\"));\\t\\t\\n\\t\\tstudent.setEmail(rs.getString(\\\"email\\\"));\\n\\t\\tstudent.setDegree(rs.getString(\\\"degree\\\"));\\n\\t\\tstudent.setDegreeDesc(rs.getString(\\\"degree_name\\\"));\\n\\t\\t\\n\\t\\treturn student;\\n\\t}\"}","395":"{\"expressionStart\":{\"\\u003cthrow\\u003e\":1249,\"\\u003cr\\u003e\":834,\"PreparedStatement.setInt()\":560,\"String\":1301,\"ResultSet.next()\":638,\"int:3\":783,\"KAMStoreDaoImpl.getObjectsTextById()\":913,\"int:2\":735,\"int:1\":570,\"\\u003cnullcheck\\u003e\":817,\"Map.get()\":224,\"int:0\":465,\"ResultSet.getInt()\":771,\"Map.put()\":1768,\"KAMStoreDaoImpl.getPreparedStatement()\":500,\"String:\":1598,\"SQLException.\\u003cinit\\u003e\":1255,\"ResultSet.getString()\":720,\"SymmetricEncryptionService.decrypt()\":1138,\"\\u003creturn\\u003e\":217,\"KAMStoreDaoImpl.close()\":1648,\"PreparedStatement.executeQuery()\":603,\"Map.containsKey()\":163,\"null:null\":290,\"\\u003d\":1580},\"expressionEnd\":{\"\\u003cthrow\\u003e\":1349,\"\\u003cr\\u003e\":852,\"PreparedStatement.setInt()\":582,\"String\":1344,\"ResultSet.next()\":649,\"int:3\":784,\"KAMStoreDaoImpl.getObjectsTextById()\":946,\"int:2\":736,\"int:1\":571,\"\\u003cnullcheck\\u003e\":830,\"Map.get()\":254,\"int:0\":466,\"ResultSet.getInt()\":785,\"Map.put()\":1822,\"KAMStoreDaoImpl.getPreparedStatement()\":546,\"String:\":1600,\"SQLException.\\u003cinit\\u003e\":1348,\"ResultSet.getString()\":737,\"SymmetricEncryptionService.decrypt()\":1170,\"\\u003creturn\\u003e\":255,\"KAMStoreDaoImpl.close()\":1659,\"PreparedStatement.executeQuery()\":620,\"Map.containsKey()\":201,\"null:null\":294,\"\\u003d\":1600},\"rawCode\":\"/**\\n     * {@inheritDoc}\\n     */\\n    private String getObjectValueById(Integer objectId) throws SQLException {\\n\\n        // See if the object is cached\\n        if (objectValueCache.containsKey(objectId)) {\\n            return objectValueCache.get(objectId);\\n        }\\n\\n        String value \\u003d null;\\n        String decryptedString \\u003d value;\\n        //Integer typeId \\u003d null;\\n        PreparedStatement ps \\u003d null;\\n        ResultSet rset \\u003d null;\\n        int objectsTextId \\u003d 0;\\n\\n        try {\\n            ps \\u003d getPreparedStatement(SELECT_OBJECTS_VALUE_SQL);\\n            ps.setInt(1, objectId);\\n            rset \\u003d ps.executeQuery();\\n            if (rset.next()) {\\n                //typeId \\u003d rset.getInt(1);\\n                value \\u003d rset.getString(2);\\n                objectsTextId \\u003d rset.getInt(3);\\n            }\\n            if (value \\u003d\\u003d null \\u0026\\u0026 objectsTextId !\\u003d 0) { //value is in objects_text table\\n                value \\u003d getObjectsTextById(objectsTextId);\\n            }\\n            //decrypt object table string\\n            if (value !\\u003d null) {\\n                decryptedString \\u003d value;\\n                try {\\n                    decryptedString \\u003d encryptionService.decrypt(value);\\n                } catch (EncryptionServiceException e) {\\n                    throw new SQLException(\\n                            \\\"Unable to decrypt data from object table.\\\", e);\\n                }\\n            } else {\\n                // set decryptedString to empty to translate back from database null.\\n                // this is a valid entry since we are storing an empty \\\"\\\" on the way in.\\n                decryptedString \\u003d \\\"\\\";\\n            }\\n        } finally {\\n            close(rset);\\n        }\\n\\n        // Push into the cache\\n        objectValueCache.put(objectId, decryptedString);\\n        objectValueReverseCache.put(decryptedString, objectId);\\n\\n        return decryptedString;\\n    }\"}","396":"{\"expressionStart\":{\"int:3\":301,\"ResultSet.getString()\":217,\"KAMStoreDaoImpl.getObjectValueById()\":270,\"Namespace.\\u003cinit\\u003e\":322,\"int:2\":232,\"int:1\":189,\"\\u003creturn\\u003e\":315,\"ResultSet.getInt()\":289},\"expressionEnd\":{\"int:3\":302,\"ResultSet.getString()\":234,\"KAMStoreDaoImpl.getObjectValueById()\":304,\"Namespace.\\u003cinit\\u003e\":374,\"int:2\":233,\"int:1\":190,\"\\u003creturn\\u003e\":375,\"ResultSet.getInt()\":303},\"rawCode\":\"/**\\n     * @param rset\\n     * @return\\n     * @throws SQLException\\n     */\\n    private Namespace getNamespace(ResultSet rset) throws SQLException {\\n        Integer namespaceId \\u003d rset.getInt(1);\\n        String prefix \\u003d rset.getString(2);\\n        String resourceLocation \\u003d getObjectValueById(rset.getInt(3));\\n\\n        return new Namespace(namespaceId, prefix, resourceLocation);\\n    }\"}","397":"{\"expressionStart\":{\"KAMStoreDaoImpl.getNamespacesByDocumentId()\":745,\"KAMStoreDaoImpl.getAnnotationTypesByDocumentId()\":661,\"ResultSet.getString()\":534,\"\\u003creturn\\u003e\":796,\"int:6\":453,\"int:5\":406,\"int:4\":360,\"int:3\":316,\"int:9\":593,\"int:8\":549,\"int:7\":501,\"BelDocumentInfo.\\u003cinit\\u003e\":803,\"int:2\":268,\"int:1\":227,\"ResultSet.getInt()\":215},\"expressionEnd\":{\"KAMStoreDaoImpl.getNamespacesByDocumentId()\":785,\"KAMStoreDaoImpl.getAnnotationTypesByDocumentId()\":706,\"ResultSet.getString()\":551,\"\\u003creturn\\u003e\":985,\"int:6\":454,\"int:5\":407,\"int:4\":361,\"int:3\":317,\"int:9\":594,\"int:8\":550,\"int:7\":502,\"BelDocumentInfo.\\u003cinit\\u003e\":984,\"int:2\":269,\"int:1\":228,\"ResultSet.getInt()\":229},\"rawCode\":\"/**\\n     *\\n     * @param belTermId\\n     * @return\\n     * @throws SQLException\\n     */\\n    private BelDocumentInfo getBelDocumentInfo(ResultSet rset)\\n            throws SQLException {\\n        Integer belDocumentId \\u003d rset.getInt(1);\\n        String name \\u003d rset.getString(2);\\n        String description \\u003d rset.getString(3);\\n        String version \\u003d rset.getString(4);\\n        String copyright \\u003d rset.getString(5);\\n        String disclaimer \\u003d rset.getString(6);\\n        String contactInfo \\u003d rset.getString(7);\\n        String licenseInfo \\u003d rset.getString(8);\\n        String authors \\u003d rset.getString(9);\\n\\n        List\\u003cAnnotationType\\u003e annotationTypes \\u003d\\n                getAnnotationTypesByDocumentId(belDocumentId);\\n        List\\u003cNamespace\\u003e namespaces \\u003d getNamespacesByDocumentId(belDocumentId);\\n\\n        return new BelDocumentInfo(belDocumentId, name, description, version,\\n                copyright, disclaimer, contactInfo, licenseInfo, authors,\\n                annotationTypes, namespaces);\\n    }\"}","398":"{\"expressionStart\":{\"AnnotationDefinitionType.fromValue()\":634,\"ResultSet.getString()\":478,\"PreparedStatement.setInt()\":1020,\"\\u003creturn\\u003e\":305,\"ResultSet.next()\":1156,\"KAMStoreDaoImpl.close()\":1480,\"int:5\":554,\"int:4\":493,\"int:3\":451,\"AnnotationType.\\u003cinit\\u003e\":1575,\"AnnotationDefinitionType.equals()\":756,\"Map.containsKey()\":240,\"PreparedStatement.executeQuery()\":1079,\"null:null\":1130,\"KAMStoreDaoImpl.getObjectValueById()\":1199,\"int:2\":403,\"int:1\":223,\"Map.get()\":312,\"ResultSet.getInt()\":211,\"KAMStoreDaoImpl.getPreparedStatement()\":941},\"expressionEnd\":{\"AnnotationDefinitionType.fromValue()\":696,\"ResultSet.getString()\":495,\"PreparedStatement.setInt()\":1052,\"\\u003creturn\\u003e\":354,\"ResultSet.next()\":1169,\"KAMStoreDaoImpl.close()\":1493,\"int:5\":555,\"int:4\":494,\"int:3\":452,\"AnnotationType.\\u003cinit\\u003e\":1691,\"AnnotationDefinitionType.equals()\":817,\"Map.containsKey()\":289,\"PreparedStatement.executeQuery()\":1098,\"null:null\":1134,\"KAMStoreDaoImpl.getObjectValueById()\":1235,\"int:2\":404,\"int:1\":224,\"Map.get()\":353,\"ResultSet.getInt()\":225,\"KAMStoreDaoImpl.getPreparedStatement()\":1002},\"rawCode\":\"/**\\n     *\\n     * @param rset\\n     * @return\\n     * @throws SQLException\\n     */\\n    private AnnotationType getAnnotationType(ResultSet rset)\\n            throws SQLException {\\n        Integer annotationTypeId \\u003d rset.getInt(1);\\n\\n        if (annotationTypeCache.containsKey(annotationTypeId)) {\\n            return annotationTypeCache.get(annotationTypeId);\\n        }\\n\\n        String name \\u003d rset.getString(2);\\n        String description \\u003d rset.getString(3);\\n        String usage \\u003d rset.getString(4);\\n        Integer annotationDefinitionTypeId \\u003d rset.getInt(5);\\n        AnnotationDefinitionType annotationDefinitionType \\u003d\\n                AnnotationDefinitionType.fromValue(annotationDefinitionTypeId);\\n\\n        final AnnotationType annotationType;\\n        if (annotationDefinitionType.equals(AnnotationDefinitionType.URL)) {\\n            ResultSet dvrset \\u003d null;\\n            try {\\n                PreparedStatement dvps \\u003d\\n                        getPreparedStatement(SELECT_ANNOTATION_TYPE_DOMAIN_VALUE_SQL);\\n                dvps.setInt(1, annotationTypeId);\\n                dvrset \\u003d dvps.executeQuery();\\n\\n                String url \\u003d null;\\n                if (dvrset.next()) {\\n                    url \\u003d getObjectValueById(dvrset.getInt(1));\\n                }\\n\\n                annotationType \\u003d\\n                        new AnnotationType(annotationTypeId, name, description,\\n                                usage, annotationDefinitionType, url);\\n            } finally {\\n                close(dvrset);\\n            }\\n        } else {\\n            annotationType \\u003d\\n                    new AnnotationType(annotationTypeId, name, description,\\n                            usage, annotationDefinitionType);\\n        }\\n\\n        return annotationType;\\n    }\"}","399":"{\"expressionStart\":{\"KAMStoreDaoImpl.close()\":552,\"PreparedStatement.executeQuery()\":413,\"ResultSet.getString()\":487,\"null:null\":269,\"PreparedStatement.setInt()\":365,\"\\u003creturn\\u003e\":583,\"int:1\":375,\"ResultSet.next()\":448,\"KAMStoreDaoImpl.getPreparedStatement()\":306},\"expressionEnd\":{\"KAMStoreDaoImpl.close()\":563,\"PreparedStatement.executeQuery()\":430,\"ResultSet.getString()\":504,\"null:null\":273,\"PreparedStatement.setInt()\":392,\"\\u003creturn\\u003e\":596,\"int:1\":376,\"ResultSet.next()\":459,\"KAMStoreDaoImpl.getPreparedStatement()\":351},\"rawCode\":\"/**\\n     * @param objectsTextId\\n     * @return\\n     * @throws SQLException\\n     */\\n    private String getObjectsTextById(Integer objectsTextId)\\n            throws SQLException {\\n        PreparedStatement ps \\u003d null;\\n        ResultSet rset \\u003d null;\\n        String value \\u003d null;\\n        try {\\n            ps \\u003d getPreparedStatement(SELECT_OBJECTS_TEXT_SQL);\\n            ps.setInt(1, objectsTextId);\\n            rset \\u003d ps.executeQuery();\\n            if (rset.next()) {\\n                value \\u003d rset.getString(1);\\n            }\\n        } finally {\\n            close(rset);\\n        }\\n        return value;\\n    }\"}","400":"{\"expressionStart\":{\"TestFunctions.deleteDb()\":59,\"String:\\\"\":288,\"String:functions\":68,\"boolean:false\":1057,\"Connection.getMetaData()\":853,\"String\":1325,\"TestFunctions.assertFalse()\":967,\"Connection.createStatement()\":726,\"ResultSet.next()\":1079,\"Connection.close()\":1369,\"TestFunctions.assertTrue()\":1238,\"Class.getName()\":381,\"int:1\":580,\"Statement.executeQuery()\":1004,\"String.contains()\":1150,\"DatabaseMetaData.getProcedures()\":886,\"ResultSet.getString()\":567,\"TestFunctions.getConnection()\":683,\"\\u003creturn\\u003e\":649,\"boolean:true\":1200,\"TestFunctions.assertEquals()\":549,\"String:5\":562,\"Statement.execute()\":1312,\"null:null\":905,\"\\u003d\":1192},\"expressionEnd\":{\"TestFunctions.deleteDb()\":80,\"String:\\\"\":292,\"String:functions\":79,\"boolean:false\":1062,\"Connection.getMetaData()\":871,\"String\":1358,\"TestFunctions.assertFalse()\":989,\"Connection.createStatement()\":748,\"ResultSet.next()\":1088,\"Connection.close()\":1381,\"TestFunctions.assertTrue()\":1255,\"Class.getName()\":409,\"int:1\":581,\"Statement.executeQuery()\":1031,\"String.contains()\":1172,\"DatabaseMetaData.getProcedures()\":926,\"ResultSet.getString()\":582,\"TestFunctions.getConnection()\":709,\"\\u003creturn\\u003e\":656,\"boolean:true\":1204,\"TestFunctions.assertEquals()\":583,\"String:5\":565,\"Statement.execute()\":1359,\"null:null\":909,\"\\u003d\":1204},\"rawCode\":\"private void testAggregate() throws SQLException {\\n        deleteDb(\\\"functions\\\");\\n        Connection conn \\u003d getConnection(\\\"functions\\\");\\n        Statement stat \\u003d conn.createStatement();\\n        stat.execute(\\\"CREATE AGGREGATE MEDIAN FOR \\\\\\\"\\\" +\\n                MedianString.class.getName() + \\\"\\\\\\\"\\\");\\n        stat.execute(\\\"CREATE AGGREGATE IF NOT EXISTS MEDIAN FOR \\\\\\\"\\\" +\\n                MedianString.class.getName() + \\\"\\\\\\\"\\\");\\n        ResultSet rs \\u003d stat.executeQuery(\\n                \\\"SELECT MEDIAN(X) FROM SYSTEM_RANGE(1, 9)\\\");\\n        rs.next();\\n        assertEquals(\\\"5\\\", rs.getString(1));\\n        conn.close();\\n\\n        if (config.memory) {\\n            return;\\n        }\\n\\n        conn \\u003d getConnection(\\\"functions\\\");\\n        stat \\u003d conn.createStatement();\\n        stat.executeQuery(\\\"SELECT MEDIAN(X) FROM SYSTEM_RANGE(1, 9)\\\");\\n        DatabaseMetaData meta \\u003d conn.getMetaData();\\n        rs \\u003d meta.getProcedures(null, null, \\\"MEDIAN\\\");\\n        assertTrue(rs.next());\\n        assertFalse(rs.next());\\n        rs \\u003d stat.executeQuery(\\\"SCRIPT\\\");\\n        boolean found \\u003d false;\\n        while (rs.next()) {\\n            String sql \\u003d rs.getString(1);\\n            if (sql.contains(\\\"MEDIAN\\\")) {\\n                found \\u003d true;\\n            }\\n        }\\n        assertTrue(found);\\n        stat.execute(\\\"DROP AGGREGATE MEDIAN\\\");\\n        stat.execute(\\\"DROP AGGREGATE IF EXISTS MEDIAN\\\");\\n        conn.close();\\n    }\"}","401":"{\"expressionStart\":{\"TestFunctions.assertEquals()\":855,\"String:functions\":88,\"Connection.close()\":659,\"Statement.execute()\":181,\"ResultSet.getString()\":881,\"String\":461,\"Connection.createStatement()\":739,\"TestFunctions.getConnection()\":692,\"int:1\":488,\"Statement.executeQuery()\":506,\"ResultSet.next()\":554},\"expressionEnd\":{\"TestFunctions.assertEquals()\":897,\"String:functions\":99,\"Connection.close()\":671,\"Statement.execute()\":304,\"ResultSet.getString()\":896,\"String\":466,\"Connection.createStatement()\":761,\"TestFunctions.getConnection()\":718,\"int:1\":489,\"Statement.executeQuery()\":544,\"ResultSet.next()\":563},\"rawCode\":\"private void testSource() throws SQLException {\\n        Connection conn \\u003d getConnection(\\\"functions\\\");\\n        Statement stat \\u003d conn.createStatement();\\n        ResultSet rs;\\n        stat.execute(\\\"create force alias sayHi as \\u0027String test(String name) {\\\\n\\\" +\\n                \\\"return \\\\\\\"Hello \\\\\\\" + name;\\\\n}\\u0027\\\");\\n        rs \\u003d stat.executeQuery(\\\"SELECT ALIAS_NAME \\\" +\\n                \\\"FROM INFORMATION_SCHEMA.FUNCTION_ALIASES\\\");\\n        rs.next();\\n        assertEquals(\\\"SAY\\\" + \\\"HI\\\", rs.getString(1));\\n        rs \\u003d stat.executeQuery(\\\"call sayHi(\\u0027Joe\\u0027)\\\");\\n        rs.next();\\n        assertEquals(\\\"Hello Joe\\\", rs.getString(1));\\n        if (!config.memory) {\\n            conn.close();\\n            conn \\u003d getConnection(\\\"functions\\\");\\n            stat \\u003d conn.createStatement();\\n            rs \\u003d stat.executeQuery(\\\"call sayHi(\\u0027Joe\\u0027)\\\");\\n            rs.next();\\n            assertEquals(\\\"Hello Joe\\\", rs.getString(1));\\n        }\\n        stat.execute(\\\"drop alias sayHi\\\");\\n        conn.close();\\n    }\"}","402":"{\"expressionStart\":{\"String:\":1106,\"String:functions\":91,\"ResultSet.getString()\":987,\"String\":569,\"Connection.createStatement()\":130,\"TestFunctions.getConnection()\":77,\"ResultSet.next()\":959,\"TestFunctions.assertEquals()\":1180,\"ResultSet.getObject()\":1337,\"Statement.execute()\":499,\"Connection.close()\":1414,\"ResultSet.close()\":1218,\"TestFunctions.assertNull()\":1012,\"int:1\":908,\"Statement.executeQuery()\":1244},\"expressionEnd\":{\"String:\":1108,\"String:functions\":102,\"ResultSet.getString()\":1002,\"String\":584,\"Connection.createStatement()\":152,\"TestFunctions.getConnection()\":103,\"ResultSet.next()\":968,\"TestFunctions.assertEquals()\":1208,\"ResultSet.getObject()\":1352,\"Statement.execute()\":585,\"Connection.close()\":1426,\"ResultSet.close()\":1228,\"TestFunctions.assertNull()\":1030,\"int:1\":909,\"Statement.executeQuery()\":1297},\"rawCode\":\"private void testTranslate() throws SQLException {\\n        Connection conn \\u003d getConnection(\\\"functions\\\");\\n        Statement stat \\u003d conn.createStatement();\\n\\n        String createSQL \\u003d \\\"CREATE TABLE testTranslate(id BIGINT, \\\" +\\n                \\\"txt1 varchar);\\\";\\n        stat.execute(createSQL);\\n        stat.execute(\\\"insert into testTranslate(id, txt1) \\\" +\\n                \\\"values(1, \\u0027test1\\u0027)\\\");\\n        stat.execute(\\\"insert into testTranslate(id, txt1) \\\" +\\n                \\\"values(2, null)\\\");\\n        stat.execute(\\\"insert into testTranslate(id, txt1) \\\" +\\n                \\\"values(3, \\u0027\\u0027)\\\");\\n        stat.execute(\\\"insert into testTranslate(id, txt1) \\\" +\\n                \\\"values(4, \\u0027caps\\u0027)\\\");\\n\\n        String query \\u003d \\\"SELECT translate(txt1, \\u0027p\\u0027, \\u0027r\\u0027) \\\" +\\n                \\\"FROM testTranslate order by id asc\\\";\\n        ResultSet rs \\u003d stat.executeQuery(query);\\n        rs.next();\\n        String actual \\u003d rs.getString(1);\\n        assertEquals(\\\"test1\\\", actual);\\n        rs.next();\\n        actual \\u003d rs.getString(1);\\n        assertNull(actual);\\n        rs.next();\\n        actual \\u003d rs.getString(1);\\n        assertEquals(\\\"\\\", actual);\\n        rs.next();\\n        actual \\u003d rs.getString(1);\\n        assertEquals(\\\"cars\\\", actual);\\n        rs.close();\\n\\n        rs \\u003d stat.executeQuery(\\\"select translate(null,null,null)\\\");\\n        rs.next();\\n        assertNull(rs.getObject(1));\\n\\n        stat.execute(\\\"drop table testTranslate\\\");\\n        conn.close();\\n    }\"}","403":"{\"expressionStart\":{\"String:functions\":89,\"ResultSet.getString()\":302,\"String\":175,\"TestFunctions.assertFalse()\":382,\"Connection.createStatement()\":128,\"TestFunctions.getConnection()\":75,\"ResultSet.next()\":265,\"Statement.close()\":434,\"Constants.getVersion()\":340,\"TestFunctions.assertEquals()\":327,\"ResultSet.close()\":414,\"Connection.close()\":456,\"TestFunctions.assertTrue()\":254,\"int:1\":315,\"Statement.executeQuery()\":220},\"expressionEnd\":{\"String:functions\":100,\"ResultSet.getString()\":317,\"String\":195,\"TestFunctions.assertFalse()\":404,\"Connection.createStatement()\":150,\"TestFunctions.getConnection()\":101,\"ResultSet.next()\":274,\"Statement.close()\":446,\"Constants.getVersion()\":362,\"TestFunctions.assertEquals()\":372,\"ResultSet.close()\":424,\"Connection.close()\":468,\"TestFunctions.assertTrue()\":275,\"int:1\":316,\"Statement.executeQuery()\":244},\"rawCode\":\"private void testVersion() throws SQLException {\\n        Connection conn \\u003d getConnection(\\\"functions\\\");\\n        Statement stat \\u003d conn.createStatement();\\n        String query \\u003d \\\"select h2version()\\\";\\n        ResultSet rs \\u003d stat.executeQuery(query);\\n        assertTrue(rs.next());\\n        String version \\u003d rs.getString(1);\\n        assertEquals(Constants.getVersion(), version);\\n        assertFalse(rs.next());\\n        rs.close();\\n        stat.close();\\n        conn.close();\\n    }\"}","404":"{\"expressionStart\":{\"String:functions\":87,\"UNKNOWN.getName()\":243,\"ResultSet.getString()\":455,\"String\":193,\"Connection.createStatement()\":126,\"TestFunctions.getConnection()\":73,\"ResultSet.next()\":398,\"TestFunctions.assertEquals()\":417,\"Statement.execute()\":481,\"Connection.close()\":527,\"int:1\":468,\"Statement.executeQuery()\":293,\"TestFunctions.getClass()\":243},\"expressionEnd\":{\"String:functions\":98,\"UNKNOWN.getName()\":263,\"ResultSet.getString()\":470,\"String\":224,\"Connection.createStatement()\":148,\"TestFunctions.getConnection()\":99,\"ResultSet.next()\":407,\"TestFunctions.assertEquals()\":471,\"Statement.execute()\":517,\"Connection.close()\":539,\"int:1\":469,\"Statement.executeQuery()\":388,\"TestFunctions.getClass()\":253},\"rawCode\":\"private void testValue() throws SQLException {\\n        Connection conn \\u003d getConnection(\\\"functions\\\");\\n        Statement stat \\u003d conn.createStatement();\\n        ResultSet rs;\\n        stat.execute(\\\"create alias TO_CHAR_2 for \\\\\\\"\\\" +\\n                getClass().getName() + \\\".toChar\\\\\\\"\\\");\\n        rs \\u003d stat.executeQuery(\\n                \\\"call TO_CHAR_2(TIMESTAMP \\u00272001-02-03 04:05:06\\u0027, \\u0027format\\u0027)\\\");\\n        rs.next();\\n        assertEquals(\\\"2001-02-03 04:05:06.0\\\", rs.getString(1));\\n        stat.execute(\\\"drop alias TO_CHAR_2\\\");\\n        conn.close();\\n    }\"}","405":"{\"expressionStart\":{\"FileUtils.newInputStream()\":1013,\"IOUtils.readStringAndClose()\":1071,\"boolean:false\":317,\"String:functions\":87,\"String\":473,\"Properties.\\u003cinit\\u003e\":702,\"Connection.createStatement()\":126,\"ResultSet.next()\":667,\"OutputStream.close()\":362,\"ResultSet.getBinaryStream()\":736,\"InputStreamReader.\\u003cinit\\u003e\":991,\"Connection.close()\":1145,\"FileUtils.size()\":525,\"FileUtils.newOutputStream()\":281,\"int:1\":561,\"Statement.executeQuery()\":579,\"TestFunctions.getBaseDir()\":176,\"ResultSet.getInt()\":551,\"String:\":349,\"ResultSet.getString()\":944,\"TestFunctions.getConnection()\":73,\"FileUtils.delete()\":1167,\"TestFunctions.assertEquals()\":768,\"System.getProperties()\":230,\"Properties.size()\":781,\"Properties.store()\":333,\"Properties.load()\":728},\"expressionEnd\":{\"FileUtils.newInputStream()\":1047,\"IOUtils.readStringAndClose()\":1104,\"boolean:false\":322,\"String:functions\":98,\"String\":482,\"Properties.\\u003cinit\\u003e\":718,\"Connection.createStatement()\":148,\"ResultSet.next()\":676,\"OutputStream.close()\":373,\"ResultSet.getBinaryStream()\":757,\"InputStreamReader.\\u003cinit\\u003e\":1048,\"Connection.close()\":1157,\"FileUtils.size()\":549,\"FileUtils.newOutputStream()\":323,\"int:1\":562,\"Statement.executeQuery()\":657,\"TestFunctions.getBaseDir()\":188,\"ResultSet.getInt()\":563,\"String:\":351,\"ResultSet.getString()\":959,\"TestFunctions.getConnection()\":99,\"FileUtils.delete()\":1193,\"TestFunctions.assertEquals()\":804,\"System.getProperties()\":252,\"Properties.size()\":792,\"Properties.store()\":352,\"Properties.load()\":758},\"rawCode\":\"private void testFileRead() throws Exception {\\n        Connection conn \\u003d getConnection(\\\"functions\\\");\\n        Statement stat \\u003d conn.createStatement();\\n        String fileName \\u003d getBaseDir() + \\\"/test.txt\\\";\\n        Properties prop \\u003d System.getProperties();\\n        OutputStream out \\u003d FileUtils.newOutputStream(fileName, false);\\n        prop.store(out, \\\"\\\");\\n        out.close();\\n        ResultSet rs \\u003d stat.executeQuery(\\\"SELECT LENGTH(FILE_READ(\\u0027\\\" +\\n                fileName + \\\"\\u0027)) LEN\\\");\\n        rs.next();\\n        assertEquals(FileUtils.size(fileName), rs.getInt(1));\\n        rs \\u003d stat.executeQuery(\\\"SELECT FILE_READ(\\u0027\\\" +\\n                fileName + \\\"\\u0027) PROP\\\");\\n        rs.next();\\n        Properties p2 \\u003d new Properties();\\n        p2.load(rs.getBinaryStream(1));\\n        assertEquals(prop.size(), p2.size());\\n        rs \\u003d stat.executeQuery(\\\"SELECT FILE_READ(\\u0027\\\" +\\n                fileName + \\\"\\u0027, NULL) PROP\\\");\\n        rs.next();\\n        String ps \\u003d rs.getString(1);\\n        InputStreamReader r \\u003d new InputStreamReader(FileUtils.newInputStream(fileName));\\n        String ps2 \\u003d IOUtils.readStringAndClose(r, -1);\\n        assertEquals(ps, ps2);\\n        conn.close();\\n        FileUtils.delete(fileName);\\n    }\"}","406":"{\"expressionStart\":{\"UNKNOWN.contains()\":488,\"String:functions\":98,\"Statement.execute()\":217,\"Connection.close()\":642,\"TestFunctions.assertTrue()\":477,\"ResultSet.getString()\":488,\"String\":529,\"Connection.createStatement()\":137,\"TestFunctions.getConnection()\":84,\"Statement.executeQuery()\":389,\"ResultSet.next()\":458},\"expressionEnd\":{\"UNKNOWN.contains()\":544,\"String:functions\":109,\"Statement.execute()\":285,\"Connection.close()\":654,\"TestFunctions.assertTrue()\":545,\"ResultSet.getString()\":519,\"String\":543,\"Connection.createStatement()\":159,\"TestFunctions.getConnection()\":110,\"Statement.executeQuery()\":448,\"ResultSet.next()\":467},\"rawCode\":\"private void testFunctionInSchema() throws SQLException {\\n        Connection conn \\u003d getConnection(\\\"functions\\\");\\n        Statement stat \\u003d conn.createStatement();\\n\\n        stat.execute(\\\"create schema schema2\\\");\\n        stat.execute(\\\"create alias schema2.func as \\u0027int x() { return 1; }\\u0027\\\");\\n        stat.execute(\\\"create view test as select schema2.func()\\\");\\n        ResultSet rs;\\n        rs \\u003d stat.executeQuery(\\\"select * from information_schema.views\\\");\\n        rs.next();\\n        assertTrue(rs.getString(\\\"VIEW_DEFINITION\\\").contains(\\\"SCHEMA2.FUNC\\\"));\\n\\n        stat.execute(\\\"drop view test\\\");\\n        stat.execute(\\\"drop schema schema2\\\");\\n\\n        conn.close();\\n    }\"}","407":"{\"expressionStart\":{\"String:\":1573,\"String:functions\":90,\"ResultSet.getString()\":1535,\"String\":1187,\"TestFunctions.getConnection()\":76,\"Connection.createStatement()\":129,\"ResultSet.next()\":1507,\"TestFunctions.assertEquals()\":1174,\"ResultSet.getObject()\":1713,\"Statement.execute()\":699,\"ResultSet.close()\":1594,\"Connection.close()\":1787,\"TestFunctions.assertNull()\":1702,\"int:1\":1162,\"Statement.executeQuery()\":1620},\"expressionEnd\":{\"String:\":1575,\"String:functions\":101,\"ResultSet.getString()\":1550,\"String\":1206,\"TestFunctions.getConnection()\":102,\"Connection.createStatement()\":151,\"ResultSet.next()\":1516,\"TestFunctions.assertEquals()\":1215,\"ResultSet.getObject()\":1728,\"Statement.execute()\":811,\"ResultSet.close()\":1604,\"Connection.close()\":1799,\"TestFunctions.assertNull()\":1729,\"int:1\":1163,\"Statement.executeQuery()\":1673},\"rawCode\":\"private void testConcatWs() throws SQLException {\\n        Connection conn \\u003d getConnection(\\\"functions\\\");\\n        Statement stat \\u003d conn.createStatement();\\n\\n        String createSQL \\u003d \\\"CREATE TABLE testConcat(id BIGINT, txt1 \\\" +\\n                \\\"varchar, txt2 varchar, txt3 varchar);\\\";\\n        stat.execute(createSQL);\\n        stat.execute(\\\"insert into testConcat(id, txt1, txt2, txt3) \\\" +\\n                \\\"values(1, \\u0027test1\\u0027, \\u0027test2\\u0027, \\u0027test3\\u0027)\\\");\\n        stat.execute(\\\"insert into testConcat(id, txt1, txt2, txt3) \\\" +\\n                \\\"values(2, \\u0027test1\\u0027, \\u0027test2\\u0027, null)\\\");\\n        stat.execute(\\\"insert into testConcat(id, txt1, txt2, txt3) \\\" +\\n                \\\"values(3, \\u0027test1\\u0027, null, null)\\\");\\n        stat.execute(\\\"insert into testConcat(id, txt1, txt2, txt3) \\\" +\\n                \\\"values(4, null, \\u0027test2\\u0027, null)\\\");\\n        stat.execute(\\\"insert into testConcat(id, txt1, txt2, txt3) \\\" +\\n                \\\"values(5, null, null, null)\\\");\\n\\n        String query \\u003d \\\"SELECT concat_ws(\\u0027_\\u0027,txt1, txt2, txt3), txt1 \\\" +\\n                \\\"FROM testConcat order by id asc\\\";\\n        ResultSet rs \\u003d stat.executeQuery(query);\\n        rs.next();\\n        String actual \\u003d rs.getString(1);\\n        assertEquals(\\\"test1_test2_test3\\\", actual);\\n        rs.next();\\n        actual \\u003d rs.getString(1);\\n        assertEquals(\\\"test1_test2\\\", actual);\\n        rs.next();\\n        actual \\u003d rs.getString(1);\\n        assertEquals(\\\"test1\\\", actual);\\n        rs.next();\\n        actual \\u003d rs.getString(1);\\n        assertEquals(\\\"test2\\\", actual);\\n        rs.next();\\n        actual \\u003d rs.getString(1);\\n        assertEquals(\\\"\\\", actual);\\n        rs.close();\\n\\n        rs \\u003d stat.executeQuery(\\\"select concat_ws(null,null,null)\\\");\\n        rs.next();\\n        assertNull(rs.getObject(1));\\n\\n        stat.execute(\\\"drop table testConcat\\\");\\n        conn.close();\\n    }\"}","408":"{\"expressionStart\":{\"TestFunctions.deleteDb()\":66,\"int:255\":1032,\"String:functions\":75,\"ResultSet.getString()\":1248,\"String\":960,\"Connection.createStatement()\":168,\"TestFunctions.getConnection()\":115,\"ResultSet.next()\":1349,\"int\":1381,\"TestFunctions.assertEquals()\":1221,\"Statement.execute()\":307,\"Connection.close()\":1570,\"int:1\":637,\"Statement.executeQuery()\":942,\"ResultSet.getInt()\":1547},\"expressionEnd\":{\"TestFunctions.deleteDb()\":87,\"int:255\":1035,\"String:functions\":86,\"ResultSet.getString()\":1263,\"String\":988,\"Connection.createStatement()\":190,\"TestFunctions.getConnection()\":141,\"ResultSet.next()\":1358,\"int\":1392,\"TestFunctions.assertEquals()\":1264,\"Statement.execute()\":426,\"Connection.close()\":1582,\"int:1\":638,\"Statement.executeQuery()\":989,\"ResultSet.getInt()\":1559},\"rawCode\":\"private void testSchemaSearchPath() throws SQLException {\\n        deleteDb(\\\"functions\\\");\\n        Connection conn \\u003d getConnection(\\\"functions\\\");\\n        Statement stat \\u003d conn.createStatement();\\n        ResultSet rs;\\n        stat.execute(\\\"CREATE SCHEMA TEST\\\");\\n        stat.execute(\\\"SET SCHEMA TEST\\\");\\n        stat.execute(\\\"CREATE ALIAS PARSE_INT2 FOR \\\" +\\n                \\\"\\\\\\\"java.lang.Integer.parseInt(java.lang.String, int)\\\\\\\";\\\");\\n        rs \\u003d stat.executeQuery(\\\"SELECT ALIAS_NAME FROM \\\" +\\n                \\\"INFORMATION_SCHEMA.FUNCTION_ALIASES WHERE ALIAS_SCHEMA \\u003d\\u0027TEST\\u0027\\\");\\n        rs.next();\\n        assertEquals(\\\"PARSE_INT2\\\", rs.getString(1));\\n        stat.execute(\\\"DROP ALIAS PARSE_INT2\\\");\\n\\n        stat.execute(\\\"SET SCHEMA PUBLIC\\\");\\n        stat.execute(\\\"CREATE ALIAS TEST.PARSE_INT2 FOR \\\" +\\n                \\\"\\\\\\\"java.lang.Integer.parseInt(java.lang.String, int)\\\\\\\";\\\");\\n        stat.execute(\\\"SET SCHEMA_SEARCH_PATH PUBLIC, TEST\\\");\\n\\n        rs \\u003d stat.executeQuery(\\\"CALL PARSE_INT2(\\u0027-FF\\u0027, 16)\\\");\\n        rs.next();\\n        assertEquals(-255, rs.getInt(1));\\n        rs \\u003d stat.executeQuery(\\\"SELECT ALIAS_NAME FROM \\\" +\\n                \\\"INFORMATION_SCHEMA.FUNCTION_ALIASES WHERE ALIAS_SCHEMA \\u003d\\u0027TEST\\u0027\\\");\\n        rs.next();\\n        assertEquals(\\\"PARSE_INT2\\\", rs.getString(1));\\n        rs \\u003d stat.executeQuery(\\\"CALL TEST.PARSE_INT2(\\u0027-2147483648\\u0027, 10)\\\");\\n        rs.next();\\n        assertEquals(-2147483648, rs.getInt(1));\\n        rs \\u003d stat.executeQuery(\\\"CALL FUNCTIONS.TEST.PARSE_INT2(\\u0027-2147483648\\u0027, 10)\\\");\\n        rs.next();\\n        assertEquals(-2147483648, rs.getInt(1));\\n        conn.close();\\n    }\"}","409":"{\"expressionStart\":{\"Connection.setAutoCommit()\":624,\"String:functions\":154,\"boolean:false\":643,\"ResultSet.getString()\":574,\"String:drop table test\":835,\"String\":448,\"TestFunctions.getConnection()\":140,\"Connection.createStatement()\":193,\"\\u003creturn\\u003e\":96,\"ResultSet.next()\":355,\"ResultSet.wasNull()\":601,\"Statement.execute()\":435,\"Connection.close()\":863,\"TestFunctions.assertTrue()\":777,\"int:1\":398,\"Statement.executeQuery()\":706,\"\\u003cnullcheck\\u003e\":574},\"expressionEnd\":{\"Connection.setAutoCommit()\":649,\"String:functions\":165,\"boolean:false\":648,\"ResultSet.getString()\":589,\"String:drop table test\":852,\"String\":476,\"TestFunctions.getConnection()\":166,\"Connection.createStatement()\":215,\"\\u003creturn\\u003e\":103,\"ResultSet.next()\":364,\"ResultSet.wasNull()\":613,\"Statement.execute()\":477,\"Connection.close()\":875,\"TestFunctions.assertTrue()\":812,\"int:1\":399,\"Statement.executeQuery()\":748,\"\\u003cnullcheck\\u003e\":597},\"rawCode\":\"private void testTransactionId() throws SQLException {\\n        if (config.memory) {\\n            return;\\n        }\\n        Connection conn \\u003d getConnection(\\\"functions\\\");\\n        Statement stat \\u003d conn.createStatement();\\n        stat.execute(\\\"create table test(id int)\\\");\\n        ResultSet rs;\\n        rs \\u003d stat.executeQuery(\\\"call transaction_id()\\\");\\n        rs.next();\\n        assertTrue(rs.getString(1) \\u003d\\u003d null \\u0026\\u0026 rs.wasNull());\\n        stat.execute(\\\"insert into test values(1)\\\");\\n        rs \\u003d stat.executeQuery(\\\"call transaction_id()\\\");\\n        rs.next();\\n        assertTrue(rs.getString(1) \\u003d\\u003d null \\u0026\\u0026 rs.wasNull());\\n        conn.setAutoCommit(false);\\n        stat.execute(\\\"delete from test\\\");\\n        rs \\u003d stat.executeQuery(\\\"call transaction_id()\\\");\\n        rs.next();\\n        assertTrue(rs.getString(1) !\\u003d null);\\n        stat.execute(\\\"drop table test\\\");\\n        conn.close();\\n    }\"}","410":"{\"expressionStart\":{\"TestFunctions.assertEquals()\":229,\"ResultSet.getString()\":204,\"String\":150,\"int:1\":217,\"Statement.executeQuery()\":132,\"ResultSet.next()\":174},\"expressionEnd\":{\"TestFunctions.assertEquals()\":254,\"ResultSet.getString()\":219,\"String\":157,\"int:1\":218,\"Statement.executeQuery()\":164,\"ResultSet.next()\":183},\"rawCode\":\"private void assertCallResult(String expected, Statement stat, String sql)\\n            throws SQLException {\\n        ResultSet rs \\u003d stat.executeQuery(\\\"CALL \\\" + sql);\\n        rs.next();\\n        String s \\u003d rs.getString(1);\\n        assertEquals(expected, s);\\n    }\"}","411":"{\"expressionStart\":{\"String:functions\":95,\"UNKNOWN.getName()\":1210,\"ResultSet.getString()\":1374,\"String\":1277,\"TestFunctions.assertFalse()\":1104,\"TestFunctions.setCount()\":675,\"TestFunctions.getConnection()\":81,\"Connection.createStatement()\":134,\"ResultSet.next()\":831,\"String:SELECT * FROM \":957,\"TestFunctions.assertEquals()\":412,\"Statement.execute()\":1136,\"Connection.close()\":1445,\"int:1\":438,\"Statement.executeQuery()\":1259,\"int:0\":304,\"TestFunctions.getClass()\":250,\"ResultSet.getInt()\":866},\"expressionEnd\":{\"String:functions\":106,\"UNKNOWN.getName()\":1230,\"ResultSet.getString()\":1389,\"String\":1324,\"TestFunctions.assertFalse()\":1126,\"TestFunctions.setCount()\":686,\"TestFunctions.getConnection()\":107,\"Connection.createStatement()\":156,\"ResultSet.next()\":840,\"String:SELECT * FROM \":973,\"TestFunctions.assertEquals()\":441,\"Statement.execute()\":1244,\"Connection.close()\":1457,\"int:1\":439,\"Statement.executeQuery()\":1325,\"int:0\":305,\"TestFunctions.getClass()\":260,\"ResultSet.getInt()\":878},\"rawCode\":\"private void testDeterministic() throws SQLException {\\n        Connection conn \\u003d getConnection(\\\"functions\\\");\\n        Statement stat \\u003d conn.createStatement();\\n        ResultSet rs;\\n\\n        stat.execute(\\\"create alias getCount for \\\\\\\"\\\"+\\n                getClass().getName()+\\\".getCount\\\\\\\"\\\");\\n        setCount(0);\\n        rs \\u003d stat.executeQuery(\\\"select getCount() from system_range(1, 2)\\\");\\n        rs.next();\\n        assertEquals(0, rs.getInt(1));\\n        rs.next();\\n        assertEquals(1, rs.getInt(1));\\n        stat.execute(\\\"drop alias getCount\\\");\\n\\n        stat.execute(\\\"create alias getCount deterministic for \\\\\\\"\\\"+\\n                getClass().getName()+\\\".getCount\\\\\\\"\\\");\\n        setCount(0);\\n        rs \\u003d stat.executeQuery(\\\"select getCount() from system_range(1, 2)\\\");\\n        rs.next();\\n        assertEquals(0, rs.getInt(1));\\n        rs.next();\\n        assertEquals(0, rs.getInt(1));\\n        stat.execute(\\\"drop alias getCount\\\");\\n        rs \\u003d stat.executeQuery(\\\"SELECT * FROM \\\" +\\n                \\\"INFORMATION_SCHEMA.FUNCTION_ALIASES \\\" +\\n                \\\"WHERE UPPER(ALIAS_NAME) \\u003d \\u0027GET\\u0027 || \\u0027COUNT\\u0027\\\");\\n        assertFalse(rs.next());\\n        stat.execute(\\\"create alias reverse deterministic for \\\\\\\"\\\"+\\n                getClass().getName()+\\\".reverse\\\\\\\"\\\");\\n        rs \\u003d stat.executeQuery(\\\"select reverse(x) from system_range(700, 700)\\\");\\n        rs.next();\\n        assertEquals(\\\"007\\\", rs.getString(1));\\n        stat.execute(\\\"drop alias reverse\\\");\\n\\n        conn.close();\\n    }\"}","412":"{\"expressionStart\":{\"TestFunctions.deleteDb()\":63,\"String:\\\"\":296,\"boolean:false\":1069,\"String:functions\":72,\"Connection.getMetaData()\":865,\"String\":489,\"TestFunctions.assertFalse()\":979,\"Connection.createStatement()\":738,\"ResultSet.next()\":1091,\"Connection.close()\":1381,\"TestFunctions.assertTrue()\":1250,\"Class.getName()\":389,\"int:1\":592,\"Statement.executeQuery()\":770,\"String.contains()\":1162,\"DatabaseMetaData.getProcedures()\":898,\"ResultSet.getString()\":1129,\"TestFunctions.getConnection()\":112,\"\\u003creturn\\u003e\":661,\"boolean:true\":1212,\"TestFunctions.assertEquals()\":561,\"String:5\":574,\"Statement.execute()\":1277,\"null:null\":917,\"\\u003d\":1204},\"expressionEnd\":{\"TestFunctions.deleteDb()\":84,\"String:\\\"\":300,\"boolean:false\":1074,\"String:functions\":83,\"Connection.getMetaData()\":883,\"String\":531,\"TestFunctions.assertFalse()\":1001,\"Connection.createStatement()\":760,\"ResultSet.next()\":1100,\"Connection.close()\":1393,\"TestFunctions.assertTrue()\":1267,\"Class.getName()\":421,\"int:1\":593,\"Statement.executeQuery()\":831,\"String.contains()\":1184,\"DatabaseMetaData.getProcedures()\":938,\"ResultSet.getString()\":1144,\"TestFunctions.getConnection()\":138,\"\\u003creturn\\u003e\":668,\"boolean:true\":1216,\"TestFunctions.assertEquals()\":595,\"String:5\":577,\"Statement.execute()\":1314,\"null:null\":921,\"\\u003d\":1216},\"rawCode\":\"private void testAggregateType() throws SQLException {\\n        deleteDb(\\\"functions\\\");\\n        Connection conn \\u003d getConnection(\\\"functions\\\");\\n        Statement stat \\u003d conn.createStatement();\\n        stat.execute(\\\"CREATE AGGREGATE MEDIAN FOR \\\\\\\"\\\" +\\n                MedianStringType.class.getName() + \\\"\\\\\\\"\\\");\\n        stat.execute(\\\"CREATE AGGREGATE IF NOT EXISTS MEDIAN FOR \\\\\\\"\\\" +\\n                MedianStringType.class.getName() + \\\"\\\\\\\"\\\");\\n        ResultSet rs \\u003d stat.executeQuery(\\n                \\\"SELECT MEDIAN(X) FROM SYSTEM_RANGE(1, 9)\\\");\\n        rs.next();\\n        assertEquals(\\\"5\\\", rs.getString(1));\\n        conn.close();\\n\\n        if (config.memory) {\\n            return;\\n        }\\n\\n        conn \\u003d getConnection(\\\"functions\\\");\\n        stat \\u003d conn.createStatement();\\n        stat.executeQuery(\\\"SELECT MEDIAN(X) FROM SYSTEM_RANGE(1, 9)\\\");\\n        DatabaseMetaData meta \\u003d conn.getMetaData();\\n        rs \\u003d meta.getProcedures(null, null, \\\"MEDIAN\\\");\\n        assertTrue(rs.next());\\n        assertFalse(rs.next());\\n        rs \\u003d stat.executeQuery(\\\"SCRIPT\\\");\\n        boolean found \\u003d false;\\n        while (rs.next()) {\\n            String sql \\u003d rs.getString(1);\\n            if (sql.contains(\\\"MEDIAN\\\")) {\\n                found \\u003d true;\\n            }\\n        }\\n        assertTrue(found);\\n        stat.execute(\\\"DROP AGGREGATE MEDIAN\\\");\\n        stat.execute(\\\"DROP AGGREGATE IF EXISTS MEDIAN\\\");\\n        conn.close();\\n    }\"}","413":"{\"expressionStart\":{\"double:10.0\":455,\"String:COLUMN_NAME\":1116,\"double:15.0\":500,\"String:functions\":89,\"UNKNOWN.getName()\":2392,\"Connection.getMetaData()\":959,\"String\":2342,\"TestFunctions.assertFalse()\":2296,\"DatabaseMetaData.getProcedureColumns()\":992,\"Connection.createStatement()\":128,\"ResultSet.next()\":2611,\"int:4\":564,\"int:3\":519,\"double:1.0\":411,\"Connection.close()\":2824,\"TestFunctions.assertTrue()\":1141,\"int:2\":474,\"int:1\":429,\"Statement.executeQuery()\":276,\"ResultSet.getDouble()\":551,\"int:0\":1721,\"ResultSet.getInt()\":1815,\"TestFunctions.getClass()\":2392,\"double:20.0\":545,\"String:TYPE_NAME\":1558,\"String:\":1860,\"ResultSet.getString()\":2699,\"TestFunctions.getConnection()\":75,\"String:REMARKS\":1877,\"TestFunctions.assertEquals()\":1423,\"Statement.execute()\":578,\"null:null\":1023,\"String:NULLABLE\":1825,\"String:ORDINAL_POSITION\":2146,\"String:IS_NULLABLE\":2209},\"expressionEnd\":{\"double:10.0\":459,\"String:COLUMN_NAME\":1129,\"double:15.0\":504,\"String:functions\":100,\"UNKNOWN.getName()\":2412,\"Connection.getMetaData()\":977,\"String\":2373,\"TestFunctions.assertFalse()\":2318,\"DatabaseMetaData.getProcedureColumns()\":1043,\"Connection.createStatement()\":150,\"ResultSet.next()\":2620,\"int:4\":565,\"int:3\":520,\"double:1.0\":414,\"Connection.close()\":2836,\"TestFunctions.assertTrue()\":1162,\"int:2\":475,\"int:1\":430,\"Statement.executeQuery()\":369,\"ResultSet.getDouble()\":566,\"int:0\":1722,\"ResultSet.getInt()\":1836,\"TestFunctions.getClass()\":2402,\"double:20.0\":549,\"String:TYPE_NAME\":1569,\"String:\":1862,\"ResultSet.getString()\":2714,\"TestFunctions.getConnection()\":101,\"String:REMARKS\":1886,\"TestFunctions.assertEquals()\":1513,\"Statement.execute()\":671,\"null:null\":1027,\"String:NULLABLE\":1835,\"String:ORDINAL_POSITION\":2164,\"String:IS_NULLABLE\":2222},\"rawCode\":\"private void testVarArgs() throws SQLException {\\n        Connection conn \\u003d getConnection(\\\"functions\\\");\\n        Statement stat \\u003d conn.createStatement();\\n        stat.execute(\\\"CREATE ALIAS mean FOR \\\\\\\"\\\" +\\n                getClass().getName() + \\\".mean\\\\\\\"\\\");\\n        ResultSet rs \\u003d stat.executeQuery(\\n                \\\"select mean(), mean(10), mean(10, 20), mean(10, 20, 30)\\\");\\n        rs.next();\\n        assertEquals(1.0, rs.getDouble(1));\\n        assertEquals(10.0, rs.getDouble(2));\\n        assertEquals(15.0, rs.getDouble(3));\\n        assertEquals(20.0, rs.getDouble(4));\\n\\n        stat.execute(\\\"CREATE ALIAS mean2 FOR \\\\\\\"\\\" +\\n                getClass().getName() + \\\".mean2\\\\\\\"\\\");\\n        rs \\u003d stat.executeQuery(\\n                \\\"select mean2(), mean2(10), mean2(10, 20)\\\");\\n        rs.next();\\n        assertEquals(Double.NaN, rs.getDouble(1));\\n        assertEquals(10.0, rs.getDouble(2));\\n        assertEquals(15.0, rs.getDouble(3));\\n\\n        DatabaseMetaData meta \\u003d conn.getMetaData();\\n        rs \\u003d meta.getProcedureColumns(null, null, \\\"MEAN2\\\", null);\\n        assertTrue(rs.next());\\n        assertEquals(\\\"P0\\\", rs.getString(\\\"COLUMN_NAME\\\"));\\n        assertTrue(rs.next());\\n        assertEquals(\\\"FUNCTIONS\\\", rs.getString(\\\"PROCEDURE_CAT\\\"));\\n        assertEquals(\\\"PUBLIC\\\", rs.getString(\\\"PROCEDURE_SCHEM\\\"));\\n        assertEquals(\\\"MEAN2\\\", rs.getString(\\\"PROCEDURE_NAME\\\"));\\n        assertEquals(\\\"P2\\\", rs.getString(\\\"COLUMN_NAME\\\"));\\n        assertEquals(DatabaseMetaData.procedureColumnIn,\\n                rs.getInt(\\\"COLUMN_TYPE\\\"));\\n        assertEquals(\\\"OTHER\\\", rs.getString(\\\"TYPE_NAME\\\"));\\n        assertEquals(Integer.MAX_VALUE, rs.getInt(\\\"PRECISION\\\"));\\n        assertEquals(Integer.MAX_VALUE, rs.getInt(\\\"LENGTH\\\"));\\n        assertEquals(0, rs.getInt(\\\"SCALE\\\"));\\n        assertEquals(DatabaseMetaData.columnNullable,\\n                rs.getInt(\\\"NULLABLE\\\"));\\n        assertEquals(\\\"\\\", rs.getString(\\\"REMARKS\\\"));\\n        assertEquals(null, rs.getString(\\\"COLUMN_DEF\\\"));\\n        assertEquals(0, rs.getInt(\\\"SQL_DATA_TYPE\\\"));\\n        assertEquals(0, rs.getInt(\\\"SQL_DATETIME_SUB\\\"));\\n        assertEquals(0, rs.getInt(\\\"CHAR_OCTET_LENGTH\\\"));\\n        assertEquals(1, rs.getInt(\\\"ORDINAL_POSITION\\\"));\\n        assertEquals(\\\"YES\\\", rs.getString(\\\"IS_NULLABLE\\\"));\\n        assertEquals(\\\"MEAN2\\\", rs.getString(\\\"SPECIFIC_NAME\\\"));\\n        assertFalse(rs.next());\\n\\n        stat.execute(\\\"CREATE ALIAS printMean FOR \\\\\\\"\\\" +\\n                getClass().getName() + \\\".printMean\\\\\\\"\\\");\\n        rs \\u003d stat.executeQuery(\\n                \\\"select printMean(\\u0027A\\u0027), printMean(\\u0027A\\u0027, 10), \\\" +\\n                \\\"printMean(\\u0027BB\\u0027, 10, 20), printMean (\\u0027CCC\\u0027, 10, 20, 30)\\\");\\n        rs.next();\\n        assertEquals(\\\"A: 0\\\", rs.getString(1));\\n        assertEquals(\\\"A: 10\\\", rs.getString(2));\\n        assertEquals(\\\"BB: 15\\\", rs.getString(3));\\n        assertEquals(\\\"CCC: 20\\\", rs.getString(4));\\n        conn.close();\\n    }\"}","414":"{\"expressionStart\":{\"String:functions\":106,\"UNKNOWN.getName()\":274,\"ResultSet.getString()\":432,\"String\":297,\"TestFunctions.setCount()\":320,\"Connection.createStatement()\":145,\"TestFunctions.getConnection()\":92,\"ResultSet.next()\":402,\"TestFunctions.assertEquals()\":457,\"Statement.execute()\":488,\"Connection.close()\":532,\"int:1\":445,\"int:0\":329,\"Statement.executeQuery()\":346,\"TestFunctions.getClass()\":274},\"expressionEnd\":{\"String:functions\":117,\"UNKNOWN.getName()\":294,\"ResultSet.getString()\":447,\"String\":309,\"TestFunctions.setCount()\":331,\"Connection.createStatement()\":167,\"TestFunctions.getConnection()\":118,\"ResultSet.next()\":411,\"TestFunctions.assertEquals()\":478,\"Statement.execute()\":522,\"Connection.close()\":544,\"int:1\":446,\"int:0\":330,\"Statement.executeQuery()\":392,\"TestFunctions.getClass()\":284},\"rawCode\":\"private void testDynamicArgumentAndReturn() throws SQLException {\\n        Connection conn \\u003d getConnection(\\\"functions\\\");\\n        Statement stat \\u003d conn.createStatement();\\n        ResultSet rs;\\n        stat.execute(\\\"create alias dynamic deterministic for \\\\\\\"\\\" +\\n                getClass().getName() + \\\".dynamic\\\\\\\"\\\");\\n        setCount(0);\\n        rs \\u003d stat.executeQuery(\\\"call dynamic((\\u0027a\\u0027, 1))[0]\\\");\\n        rs.next();\\n        String a \\u003d rs.getString(1);\\n        assertEquals(\\\"a1\\\", a);\\n        stat.execute(\\\"drop alias dynamic\\\");\\n        conn.close();\\n    }\"}","415":"{\"expressionStart\":{\"String:test\":2498,\"String:functions\":86,\"TestFunctions.assertThrows()\":2073,\"ResultSet.getString()\":1618,\"ResultSet.getMetaData()\":2028,\"UNKNOWN.getColumnType()\":1692,\"String\":520,\"UNKNOWN.executeQuery()\":2073,\"TestFunctions.getConnection()\":72,\"Connection.createStatement()\":125,\"ResultSet.next()\":1945,\"TestFunctions.assertEquals()\":1643,\"Statement.execute()\":322,\"ResultSet.close()\":1787,\"Connection.close()\":2632,\"null:null\":1656,\"int:2\":1723,\"int:1\":1355,\"Statement.executeQuery()\":1813},\"expressionEnd\":{\"String:test\":2504,\"String:functions\":97,\"TestFunctions.assertThrows()\":2126,\"ResultSet.getString()\":1633,\"ResultSet.getMetaData()\":2044,\"UNKNOWN.getColumnType()\":1725,\"String\":552,\"UNKNOWN.executeQuery()\":2264,\"TestFunctions.getConnection()\":98,\"Connection.createStatement()\":147,\"ResultSet.next()\":1954,\"TestFunctions.assertEquals()\":1669,\"Statement.execute()\":434,\"ResultSet.close()\":1797,\"Connection.close()\":2644,\"null:null\":1660,\"int:2\":1724,\"int:1\":1356,\"Statement.executeQuery()\":1935},\"rawCode\":\"private void testNvl2() throws SQLException {\\n        Connection conn \\u003d getConnection(\\\"functions\\\");\\n        Statement stat \\u003d conn.createStatement();\\n\\n        String createSQL \\u003d \\\"CREATE TABLE testNvl2(id BIGINT, txt1 \\\" +\\n                \\\"varchar, txt2 varchar, num number(9, 0));\\\";\\n        stat.execute(createSQL);\\n        stat.execute(\\\"insert into testNvl2(id, txt1, txt2, num) \\\" +\\n                \\\"values(1, \\u0027test1\\u0027, \\u0027test2\\u0027, null)\\\");\\n        stat.execute(\\\"insert into testNvl2(id, txt1, txt2, num) \\\" +\\n                \\\"values(2, null, \\u0027test4\\u0027, null)\\\");\\n        stat.execute(\\\"insert into testNvl2(id, txt1, txt2, num) \\\" +\\n                \\\"values(3, \\u0027test5\\u0027, null, null)\\\");\\n        stat.execute(\\\"insert into testNvl2(id, txt1, txt2, num) \\\" +\\n                \\\"values(4, null, null, null)\\\");\\n        stat.execute(\\\"insert into testNvl2(id, txt1, txt2, num) \\\" +\\n                \\\"values(5, \\u00272\\u0027, null, 1)\\\");\\n        stat.execute(\\\"insert into testNvl2(id, txt1, txt2, num) \\\" +\\n                \\\"values(6, \\u00272\\u0027, null, null)\\\");\\n        stat.execute(\\\"insert into testNvl2(id, txt1, txt2, num) \\\" +\\n                \\\"values(7, \\u0027test2\\u0027, null, null)\\\");\\n\\n        String query \\u003d \\\"SELECT NVL2(txt1, txt1, txt2), txt1 \\\" +\\n                \\\"FROM testNvl2 order by id asc\\\";\\n        ResultSet rs \\u003d stat.executeQuery(query);\\n        rs.next();\\n        String actual \\u003d rs.getString(1);\\n        assertEquals(\\\"test1\\\", actual);\\n        rs.next();\\n        actual \\u003d rs.getString(1);\\n        assertEquals(\\\"test4\\\", actual);\\n        rs.next();\\n        actual \\u003d rs.getString(1);\\n        assertEquals(\\\"test5\\\", actual);\\n        rs.next();\\n        actual \\u003d rs.getString(1);\\n        assertEquals(null, actual);\\n        assertEquals(rs.getMetaData().getColumnType(2),\\n                rs.getMetaData().getColumnType(1));\\n        rs.close();\\n\\n        rs \\u003d stat.executeQuery(\\\"SELECT NVL2(num, num, txt1), num \\\" +\\n                \\\"FROM testNvl2 where id in(5, 6) order by id asc\\\");\\n        rs.next();\\n        assertEquals(rs.getMetaData().getColumnType(2),\\n                rs.getMetaData().getColumnType(1));\\n\\n        assertThrows(ErrorCode.DATA_CONVERSION_ERROR_1, stat).\\n                executeQuery(\\\"SELECT NVL2(num, num, txt1), num \\\" +\\n                        \\\"FROM testNvl2 where id \\u003d 7 order by id asc\\\");\\n\\n        // nvl2 should return expr2\\u0027s datatype, if expr2 is character data.\\n        rs \\u003d stat.executeQuery(\\\"SELECT NVL2(1, \\u0027test\\u0027, 123), \\u0027test\\u0027 FROM dual\\\");\\n        rs.next();\\n        actual \\u003d rs.getString(1);\\n        assertEquals(\\\"test\\\", actual);\\n        assertEquals(rs.getMetaData().getColumnType(2),\\n                rs.getMetaData().getColumnType(1));\\n\\n        conn.close();\\n    }\"}","416":"{\"expressionStart\":{\"ResultSet.getString()\":217,\"String\":123,\"ResultSet.getInt()\":70},\"expressionEnd\":{\"ResultSet.getString()\":245,\"String\":132,\"ResultSet.getInt()\":98},\"rawCode\":\"private void buildRecord(ResultSet rs) throws SQLException {\\n    id \\u003d rs.getInt(\\\"page_portlet_id\\\");\\n    pageId \\u003d rs.getInt(\\\"page_id\\\");\\n    portletId \\u003d rs.getInt(\\\"portlet_id\\\");\\n    // lookup_project_portlet\\n    name \\u003d rs.getString(\\\"portlet_name\\\");\\n    loaded \\u003d true;\\n  }\"}","417":"{\"expressionStart\":{\"UNKNOWN.getCatalog()\":911,\"UNKNOWN.executeUpdate()\":701,\"ResultSet.getString()\":1576,\"UNKNOWN.getMetaData()\":326,\"String\":733,\"ResultSet.next()\":1018,\"{String}\":979,\"MetadataTest.assertTrue()\":1529,\"int:3\":1117,\"UNKNOWN.next()\":378,\"String.equalsIgnoreCase()\":1540,\"ResultSet.close()\":1301,\"null:null\":1430,\"UNKNOWN.close()\":1801,\"UNKNOWN.getTables()\":868,\"UNKNOWN.getString()\":428,\"String:TABLE\":981,\"\\u003cbreak\\u003e\":1738,\"int:1\":446,\"\\u003cnullcheck\\u003e\":1274,\"UNKNOWN.getTableTypes()\":326},\"expressionEnd\":{\"UNKNOWN.getCatalog()\":933,\"UNKNOWN.executeUpdate()\":804,\"ResultSet.getString()\":1606,\"UNKNOWN.getMetaData()\":349,\"String\":803,\"ResultSet.next()\":1033,\"{String}\":998,\"MetadataTest.assertTrue()\":1608,\"int:3\":1118,\"UNKNOWN.next()\":392,\"String.equalsIgnoreCase()\":1607,\"ResultSet.close()\":1317,\"null:null\":1434,\"UNKNOWN.close()\":1816,\"UNKNOWN.getTables()\":999,\"UNKNOWN.getString()\":448,\"String:TABLE\":988,\"\\u003cbreak\\u003e\":1744,\"int:1\":447,\"\\u003cnullcheck\\u003e\":1290,\"UNKNOWN.getTableTypes()\":365},\"rawCode\":\"/**\\n\\t * Tests the implementation of metadata for views.\\n\\t * \\n\\t * This test automatically detects whether or not the server it is running\\n\\t * against supports the creation of views.\\n\\t * \\n\\t * @throws SQLException\\n\\t *             if the test fails.\\n\\t */\\n\\tpublic void testViewMetaData() throws SQLException {\\n\\t\\ttry {\\n\\t\\t\\tthis.rs \\u003d this.conn.getMetaData().getTableTypes();\\n\\n\\t\\t\\twhile (this.rs.next()) {\\n\\t\\t\\t\\tif (\\\"VIEW\\\".equalsIgnoreCase(this.rs.getString(1))) {\\n\\n\\t\\t\\t\\t\\tthis.stmt\\n\\t\\t\\t\\t\\t\\t\\t.executeUpdate(\\\"DROP VIEW IF EXISTS vTestViewMetaData\\\");\\n\\t\\t\\t\\t\\tthis.stmt\\n\\t\\t\\t\\t\\t\\t\\t.executeUpdate(\\\"DROP TABLE IF EXISTS testViewMetaData\\\");\\n\\t\\t\\t\\t\\tthis.stmt\\n\\t\\t\\t\\t\\t\\t\\t.executeUpdate(\\\"CREATE TABLE testViewMetaData (field1 INT)\\\");\\n\\t\\t\\t\\t\\tthis.stmt\\n\\t\\t\\t\\t\\t\\t\\t.executeUpdate(\\\"CREATE VIEW vTestViewMetaData AS SELECT field1 FROM testViewMetaData\\\");\\n\\n\\t\\t\\t\\t\\tResultSet tablesRs \\u003d null;\\n\\n\\t\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\t\\ttablesRs \\u003d this.conn.getMetaData().getTables(\\n\\t\\t\\t\\t\\t\\t\\t\\tthis.conn.getCatalog(), null, \\\"%ViewMetaData\\\",\\n\\t\\t\\t\\t\\t\\t\\t\\tnew String[] { \\\"TABLE\\\", \\\"VIEW\\\" });\\n\\t\\t\\t\\t\\t\\tassertTrue(tablesRs.next());\\n\\t\\t\\t\\t\\t\\tassertTrue(\\\"testViewMetaData\\\".equalsIgnoreCase(tablesRs\\n\\t\\t\\t\\t\\t\\t\\t\\t.getString(3)));\\n\\t\\t\\t\\t\\t\\tassertTrue(tablesRs.next());\\n\\t\\t\\t\\t\\t\\tassertTrue(\\\"vTestViewMetaData\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t.equalsIgnoreCase(tablesRs.getString(3)));\\n\\n\\t\\t\\t\\t\\t} finally {\\n\\t\\t\\t\\t\\t\\tif (tablesRs !\\u003d null) {\\n\\t\\t\\t\\t\\t\\t\\ttablesRs.close();\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\t\\ttablesRs \\u003d this.conn.getMetaData().getTables(\\n\\t\\t\\t\\t\\t\\t\\t\\tthis.conn.getCatalog(), null, \\\"%ViewMetaData\\\",\\n\\t\\t\\t\\t\\t\\t\\t\\tnew String[] { \\\"TABLE\\\" });\\n\\t\\t\\t\\t\\t\\tassertTrue(tablesRs.next());\\n\\t\\t\\t\\t\\t\\tassertTrue(\\\"testViewMetaData\\\".equalsIgnoreCase(tablesRs\\n\\t\\t\\t\\t\\t\\t\\t\\t.getString(3)));\\n\\t\\t\\t\\t\\t\\tassertTrue(!tablesRs.next());\\n\\t\\t\\t\\t\\t} finally {\\n\\t\\t\\t\\t\\t\\tif (tablesRs !\\u003d null) {\\n\\t\\t\\t\\t\\t\\t\\ttablesRs.close();\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t} finally {\\n\\t\\t\\tif (this.rs !\\u003d null) {\\n\\t\\t\\t\\tthis.rs.close();\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\"}","418":"{\"expressionStart\":{\"String:\\\"\":3342,\"\\u003cthrow\\u003e\":8778,\"String:(\":4879,\"UNKNOWN.toLowerCase()\":7948,\"String\":6976,\"UNKNOWN.replace()\":6755,\"DBAccess.releaseConnection()\":8512,\"ResultSet.next()\":3105,\"String: \":6782,\"String.lastIndexOf()\":7537,\"Exception.\\u003cinit\\u003e\":8784,\"DBAccess.getConnection()\":285,\"Map.entrySet()\":5289,\"ResultSet.getBoolean()\":3757,\"UNKNOWN.containsKey()\":6436,\"ResultSet.close()\":8605,\"String.replaceAll()\":3619,\"int:1\":1462,\"Map.get()\":6436,\"StringBuffer.\\u003cinit\\u003e\":132,\"\\u003cnullcheck\\u003e\":4407,\"Map.put()\":4050,\"ResultSet.getInt()\":3707,\"PreparedStatement.setString()\":1449,\"UNKNOWN.put()\":6355,\"Map.Entry.getKey()\":7948,\"String:\":7071,\"ResultSet.getString()\":3230,\"String:select \":342,\"LinkedHashMap.\\u003cinit\\u003e\":3008,\"\\u003creturn\\u003e\":8875,\"StringBuffer.toString()\":8882,\"UNKNOWN.entrySet()\":6868,\"String:, \":4897,\"UNKNOWN.get()\":4424,\"Connection.prepareStatement()\":320,\"Map.containsKey()\":3853,\"PreparedStatement.executeQuery()\":1492,\"String:)\":4915,\"\\u003ca\\u003e\":3243,\"Map.Entry.getValue()\":6868,\"StringBuffer.append()\":7832,\"Exception.printStackTrace()\":8332,\"PreparedStatement.close()\":8689},\"expressionEnd\":{\"String:\\\"\":3346,\"\\u003cthrow\\u003e\":8839,\"String:(\":4882,\"UNKNOWN.toLowerCase()\":7975,\"String\":6987,\"UNKNOWN.replace()\":6786,\"DBAccess.releaseConnection()\":8531,\"ResultSet.next()\":3114,\"String: \":6785,\"String.lastIndexOf()\":7565,\"Exception.\\u003cinit\\u003e\":8838,\"DBAccess.getConnection()\":300,\"Map.entrySet()\":5309,\"ResultSet.getBoolean()\":3775,\"UNKNOWN.containsKey()\":6485,\"ResultSet.close()\":8615,\"String.replaceAll()\":3654,\"int:1\":1463,\"Map.get()\":6466,\"StringBuffer.\\u003cinit\\u003e\":150,\"\\u003cnullcheck\\u003e\":4419,\"Map.put()\":4087,\"ResultSet.getInt()\":3721,\"PreparedStatement.setString()\":1473,\"UNKNOWN.put()\":6415,\"Map.Entry.getKey()\":7961,\"String:\":7073,\"ResultSet.getString()\":3247,\"String:select \":351,\"LinkedHashMap.\\u003cinit\\u003e\":3083,\"\\u003creturn\\u003e\":8900,\"StringBuffer.toString()\":8899,\"UNKNOWN.entrySet()\":6894,\"String:, \":4901,\"UNKNOWN.get()\":4459,\"Connection.prepareStatement()\":1435,\"Map.containsKey()\":3886,\"PreparedStatement.executeQuery()\":1509,\"String:)\":4918,\"\\u003ca\\u003e\":3246,\"Map.Entry.getValue()\":6883,\"StringBuffer.append()\":7857,\"Exception.printStackTrace()\":8351,\"PreparedStatement.close()\":8699},\"rawCode\":\"public static String getDBMetaData(String connection, String catalog)\\n        throws Exception\\n    {\\n\\n        StringBuffer result \\u003d new StringBuffer();\\n        Connection conn \\u003d null;\\n        PreparedStatement ps \\u003d null;\\n        ResultSet rs \\u003d null;\\n\\n        try {\\n\\n            conn \\u003d getConnection();\\n\\n            ps \\u003d conn.prepareStatement(\\\"select \\\"\\n                + \\\"case t.table_type \\\"\\n                + \\\"when \\u0027LOCAL TABLE\\u0027 then \\u0027Table\\u0027 \\\"\\n                + \\\"when \\u0027FOREIGN TABLE\\u0027 then \\u0027Foreign_Table\\u0027 \\\"\\n                + \\\"when \\u0027LOCAL VIEW\\u0027 then \\u0027View\\u0027 \\\"\\n                + \\\"else null \\\"\\n                + \\\"end as ObjectType, \\\"\\n                + \\\"s.schema_name, \\\"\\n                + \\\"c.table_name AS Object, \\\"\\n                + \\\"c.column_name AS ColumnName, \\\"\\n                + \\\"c.ordinal_position AS ColumnOrder, \\\"\\n                + \\\"c.\\\\\\\"PRECISION\\\\\\\" AS Length, \\\"\\n                + \\\"c.is_nullable AS Nullable, \\\"\\n                + \\\"c.datatype AS DataType \\\"\\n                + \\\"from localdb.sys_root.dba_schemas s \\\"\\n                + \\\"LEFT OUTER JOIN localdb.sys_root.dba_columns c ON c.schema_name \\u003d s.schema_name AND c.catalog_name \\u003d s.catalog_name \\\"\\n                + \\\"LEFT OUTER JOIN localdb.sys_root.dba_tables t ON t.table_name \\u003d c.table_name AND t.schema_name \\u003d c.schema_name AND t.catalog_name \\u003d c.catalog_name \\\"\\n                + \\\"where s.catalog_name \\u003d ? \\\"\\n                + \\\"order by schema_name,ObjectType,Object,ColumnOrder\\\");\\n            ps.setString(1, catalog);\\n            rs \\u003d ps.executeQuery();\\n\\n            /* This \\u0027monstrosity\\u0027 makes perfect sense if you don\\u0027t think too hard about the data types,\\n             * here\\u0027s a java-less sample:\\n             * meta_data \\u003d\\n             * {\\n             *  \\u0027schema_name\\u0027 : \\n             *                  {\\u0027table_type (either View or Table)\\u0027 :\\n             *                          {  \\u0027table_name\\u0027 :\\n             *                                   {\\u0027column_name\\u0027 : \\u0027column data (e.g. \\\"(INTEGER, NULL)\\\")\\u0027,\\n             *                                   \\u0027column2_name\\u0027 : \\u0027column_data\\u0027,\\n             *                                   \\u0027column3_name\\u0027 : \\u0027column_data\\u0027 }\\n             *                            , \\u0027table2_name\\u0027 : {\\u0027column_name\\u0027 : \\u0027data\\u0027}\\n             *                           }\\n             *                    , \\u0027possible second type\\u0027 : {etc}\\n             *                  }\\n             *  , \\u0027other_schema\\u0027 : {etc}\\n             * }\\n             * \\n             * This makes it super intuitive to build the XML structure looping through these,\\n             * again if you ignore the verbose data typing. Scroll down to the loops and check out\\n             * the xml if you\\u0027re still confused.\\n             *\\n             * TODO: Admittedly we should probably be populating a\\n             * struct/object in domain with the data and not formatting\\n             * the XML directly here. Plus this is really bad XML design.\\n             */\\n\\n            Map\\u003cString, Map\\u003cString, Map\\u003cString, Map\\u003cString, String\\u003e\\u003e\\u003e \\u003e meta_data \\u003d new LinkedHashMap\\u003cString, Map\\u003cString, Map\\u003cString, Map\\u003cString, String\\u003e\\u003e\\u003e \\u003e();\\n\\n            while (rs.next()) {\\n                int c \\u003d 1;\\n                String type \\u003d rs.getString(c++);\\n                String schemaName \\u003d rs.getString(c++);\\n                if (schemaName !\\u003d null)\\n                  schemaName \\u003d schemaName.replaceAll(\\\"\\\\\\\"\\\",\\\"\\u0026quot;\\\");\\n                String name \\u003d rs.getString(c++);\\n                if (name !\\u003d null)\\n                  name \\u003d name.replaceAll(\\\"\\\\\\\"\\\", \\\"\\u0026quot;\\\");\\n                String col_name \\u003d rs.getString(c++);\\n                if (col_name !\\u003d null)\\n                  col_name \\u003d col_name.replaceAll(\\\"\\\\\\\"\\\", \\\"\\u0026quot;\\\");\\n                c++;\\n                int col_len \\u003d rs.getInt(c++);\\n                boolean is_null \\u003d rs.getBoolean(c++);\\n                String data_type \\u003d rs.getString(c++);\\n\\n                if (!meta_data.containsKey(schemaName)) {\\n                  Map\\u003cString, Map\\u003cString, Map\\u003cString, String\\u003e\\u003e \\u003e new_schema \\u003d new LinkedHashMap\\u003cString, Map\\u003cString, Map\\u003cString, String\\u003e\\u003e \\u003e();\\n                  meta_data.put(schemaName, new_schema);\\n                }\\n                if (type !\\u003d null \\u0026\\u0026 !meta_data.get(schemaName).containsKey(type)) {\\n                  Map\\u003cString, Map\\u003cString, String\\u003e \\u003e new_type \\u003d new LinkedHashMap\\u003cString, Map\\u003cString, String\\u003e\\u003e();\\n                  meta_data.get(schemaName).put(type, new_type);\\n                }\\n                if (name !\\u003d null \\u0026\\u0026 !meta_data.get(schemaName).get(type).containsKey(name)) {\\n                  Map\\u003cString, String\\u003e new_table \\u003d new LinkedHashMap\\u003cString, String\\u003e();\\n                  meta_data.get(schemaName).get(type).put(name, new_table);\\n                }\\n                if (col_name !\\u003d null \\u0026\\u0026 !meta_data.get(schemaName).get(type).get(name).containsKey(col_name)) {\\n                  String null_str \\u003d (is_null) ? \\\"NULL\\\" : \\\"NOT NULL\\\";\\n                  String col_info \\u003d \\\"(\\\" + data_type + \\\", \\\" + null_str + \\\")\\\";\\n                  meta_data.get(schemaName).get(type).get(name).put(col_name, col_info);\\n                }\\n\\n            }\\n\\n            // Now build the XML to be returned to the client.\\n            result.append(\\\"\\u003cschemas label\\u003d\\\\\\\"Schemas\\\\\\\"\\u003e\\\\n\\\"); // root node for our metadata\\n\\n            for (Map.Entry\\u003cString, Map\\u003cString, Map\\u003cString, Map\\u003cString, String\\u003e\\u003e\\u003e \\u003e schema : meta_data.entrySet()) {\\n              result.append(\\\"\\u003cschema label\\u003d\\\\\\\"\\\" + schema.getKey() + \\\"\\\\\\\"\\u003e\\\\n\\\");\\n              // Force some children to be added even if we didn\\u0027t get them\\n              // in the query. (They should have a loadInfo defined..)\\n              Map\\u003cString, Map\\u003cString, String\\u003e \\u003e forced_type \\u003d new LinkedHashMap\\u003cString, Map\\u003cString, String\\u003e\\u003e();\\n              if (!meta_data.get(schema.getKey()).containsKey(\\\"Table\\\"))\\n                  meta_data.get(schema.getKey()).put(\\\"Table\\\", forced_type);\\n              if (!meta_data.get(schema.getKey()).containsKey(\\\"View\\\"))\\n                  meta_data.get(schema.getKey()).put(\\\"View\\\", forced_type);\\n              if (!meta_data.get(schema.getKey()).containsKey(\\\"Foreign_Table\\\"))\\n                  meta_data.get(schema.getKey()).put(\\\"Foreign_Table\\\", forced_type);\\n              if (!meta_data.get(schema.getKey()).containsKey(\\\"Function\\\"))\\n                  meta_data.get(schema.getKey()).put(\\\"Function\\\", forced_type);\\n              if (!meta_data.get(schema.getKey()).containsKey(\\\"Procedure\\\"))\\n                  meta_data.get(schema.getKey()).put(\\\"Procedure\\\", forced_type);\\n              if (!meta_data.get(schema.getKey()).containsKey(\\\"Jar\\\"))\\n                  meta_data.get(schema.getKey()).put(\\\"Jar\\\", forced_type);\\n\\n              for (Map.Entry\\u003cString, Map\\u003cString, Map\\u003cString, String\\u003e\\u003e\\u003e type : schema.getValue().entrySet()) {\\n                result.append(\\\"  \\u003c\\\" + type.getKey().toLowerCase() + \\\"s label\\u003d\\\\\\\"\\\" + type.getKey().replace(\\\"_\\\", \\\" \\\") + \\\"s\\\\\\\"\\u003e\\\\n\\\");\\n                for (Map.Entry\\u003cString, Map\\u003cString, String\\u003e\\u003e table : type.getValue().entrySet()) {\\n                  String table_data \\u003d \\\"    \\u003c\\\" + type.getKey().toLowerCase() + \\\" label\\u003d\\\\\\\"\\\" + table.getKey() + \\\"\\\\\\\" sqlquery\\u003d\\\\\\\"SELECT \\\";\\n                  String column_data \\u003d \\\"\\\";\\n                  for (Map.Entry\\u003cString, String\\u003e column : table.getValue().entrySet()) {\\n                    column_data +\\u003d \\\"      \\u003ccolumn column\\u003d\\\\\\\"\\\" + column.getKey() + \\\"\\\\\\\" label\\u003d\\\\\\\"\\\" + column.getKey()\\n                      + \\\" \\\" + column.getValue() + \\\"\\\\\\\" /\\u003e\\\\n\\\";\\n                    table_data +\\u003d \\\"\\u0026quot;\\\" + column.getKey() + \\\"\\u0026quot;, \\\";\\n                  }\\n                  // chop off the last comma-space and finish the node\\n                  int last_ind \\u003d table_data.lastIndexOf(\\\", \\\");\\n                  //if (last_ind !\\u003d -1)\\n                    //table_data \\u003d table_data.substring(0, last_ind);\\n                  table_data +\\u003d \\\" FROM \\u0026quot;\\\" + schema.getKey()\\n                    + \\\"\\u0026quot;.\\u0026quot;\\\" + table.getKey() + \\\"\\u0026quot;\\\\\\\"\\u003e\\\\n\\\";\\n                  result.append(table_data);\\n                  result.append(column_data);\\n                  result.append(\\\"    \\u003c/\\\" + type.getKey().toLowerCase() + \\\"\\u003e\\\\n\\\"); // table\\n                }\\n                result.append(\\\"  \\u003c/\\\" + type.getKey().toLowerCase() + \\\"s\\u003e\\\\n\\\"); // type\\n              }\\n              result.append(\\\"\\u003c/schema\\u003e\\\\n\\\"); // schema\\n            }\\n\\n            result.append(\\\"\\u003c/schemas\\u003e\\\\n\\\"); // root node\\n\\n        } catch (Exception e) {\\n            // TODO Auto-generated catch block\\n            e.printStackTrace();\\n            throw new Exception(\\\"Error Info: No expect error!\\\");\\n        } finally {\\n\\n            try {\\n\\n                if (conn !\\u003d null) {\\n                  releaseConnection();\\n                }\\n                if (rs !\\u003d null) {\\n                    rs.close();\\n                }\\n                if (ps !\\u003d null) {\\n                    ps.close();\\n                }\\n\\n\\n            } catch (SQLException ex) {\\n\\n                throw new Exception(\\\"Error Info: Release db resouce failed\\\");\\n\\n            }\\n\\n        }\\n\\n        return result.toString();\\n    }\"}","419":"{\"expressionStart\":{\"PreparedStatement.setString()\":550,\"ForeignServer.\\u003cinit\\u003e\":684,\"\\u003cthrow\\u003e\":1003,\"ResultSet.getString()\":740,\"String\":340,\"\\u003creturn\\u003e\":1244,\"DBAccess.releaseConnection()\":1180,\"ResultSet.next()\":634,\"List.add()\":885,\"ArrayList.\\u003cinit\\u003e\":130,\"ForeignServer.setName()\":775,\"ForeignServer.setDesc()\":821,\"int:3\":845,\"DBAccess.getConnection()\":282,\"ForeignServer.setWrapperName()\":722,\"Connection.prepareStatement()\":318,\"PreparedStatement.executeQuery()\":594,\"AppException.\\u003cinit\\u003e\":1009,\"int:2\":799,\"int:1\":563,\"\\u003cnullcheck\\u003e\":1151,\"SQLException.printStackTrace()\":969},\"expressionEnd\":{\"PreparedStatement.setString()\":574,\"ForeignServer.\\u003cinit\\u003e\":703,\"\\u003cthrow\\u003e\":1114,\"ResultSet.getString()\":755,\"String\":391,\"\\u003creturn\\u003e\":1258,\"DBAccess.releaseConnection()\":1199,\"ResultSet.next()\":643,\"List.add()\":899,\"ArrayList.\\u003cinit\\u003e\":160,\"ForeignServer.setName()\":802,\"ForeignServer.setDesc()\":848,\"int:3\":846,\"DBAccess.getConnection()\":297,\"ForeignServer.setWrapperName()\":756,\"Connection.prepareStatement()\":535,\"PreparedStatement.executeQuery()\":611,\"AppException.\\u003cinit\\u003e\":1113,\"int:2\":800,\"int:1\":564,\"\\u003cnullcheck\\u003e\":1163,\"SQLException.printStackTrace()\":988},\"rawCode\":\"public static List\\u003cForeignServer\\u003e getForeignServers(String wrapper) throws AppException {\\n    \\t\\n    \\tList\\u003cForeignServer\\u003e retVal \\u003d new ArrayList\\u003cForeignServer\\u003e();\\n    \\t\\n    \\tConnection conn \\u003d null;\\n    \\tPreparedStatement ps;\\n    \\tResultSet rs;\\n    \\t\\n    \\t try {\\n\\n             conn \\u003d getConnection();\\n\\n             ps \\u003d conn.prepareStatement(\\\"select FOREIGN_WRAPPER_NAME, foreign_server_name \\\"\\n            \\t\\t + \\\" , remarks\\\"\\n            \\t\\t + \\\" from localdb.sys_root.dba_foreign_servers\\\"\\n            \\t\\t + \\\" where foreign_wrapper_name \\u003d ?\\\");\\n             ps.setString(1, wrapper);\\n             rs \\u003d ps.executeQuery();\\n\\n             while (rs.next()) {\\n\\n                 ForeignServer fs \\u003d new ForeignServer();\\n                 fs.setWrapperName(rs.getString(1));\\n                 fs.setName(rs.getString(2));\\n                 fs.setDesc(rs.getString(3));\\n                 \\n                 retVal.add(fs);\\n\\n             }\\n\\n         }  catch (SQLException e) {\\n\\n             e.printStackTrace();\\n             throw new AppException(\\n                 \\\"Error Info: The connection was bad or Execute sql statment failed!\\\");\\n         } finally {\\n           if (conn !\\u003d null) {\\n             releaseConnection();\\n           }\\n         }\\n         \\n         return retVal;\\n         \\n    \\t\\n    }\"}","420":"{\"expressionStart\":{\"\\u003cthrow\\u003e\":2456,\"String:\\u0027\":877,\"\\u003cr\\u003e\":1511,\"String\":2950,\"ColumnStats.setCatalogName()\":1909,\"UNKNOWN.append()\":1552,\"DBAccess.releaseConnection()\":2661,\"ResultSet.next()\":1827,\"int:6\":2218,\"int:5\":2149,\"int:4\":2092,\"int:3\":2041,\"DBAccess.getConnection()\":391,\"List.get()\":1661,\"ResultSet.getBoolean()\":2204,\"List.size()\":1415,\"int:8\":2322,\"int:7\":2273,\"ResultSet.close()\":2754,\"ColumnStats.setPercentSampled()\":2239,\"ColumnStats.setColumnName()\":2062,\"int:2\":1991,\"int:1\":1382,\"ResultSet.getDouble()\":2260,\"StringBuffer.\\u003cinit\\u003e\":440,\"\\u003cnullcheck\\u003e\":1210,\"int:0\":1466,\"SQLException.printStackTrace()\":2423,\"ColumnStats.\\u003cinit\\u003e\":1874,\"ColumnStats.setSchemaName()\":1961,\"ResultSet.getString()\":2079,\"ResultSet.getLong()\":2138,\"String.isEmpty()\":937,\"\\u003creturn\\u003e\":3027,\"StringBuffer.toString()\":1754,\"ArrayList.\\u003cinit\\u003e\":501,\"List.add()\":1125,\"ColumnStats.setDistinctValueCountEstimated()\":2170,\"Connection.prepareStatement()\":1732,\"ColumnStats.setTableName()\":2012,\"PreparedStatement.executeQuery()\":1788,\"AppException.\\u003cinit\\u003e\":2462,\"ColumnStats.setDistinctValueCount()\":2113,\"\\u003ca\\u003e\":1479,\"StringBuffer.append()\":1650,\"ColumnStats.setSampleSize()\":2294,\"PreparedStatement.close()\":2838},\"expressionEnd\":{\"\\u003cthrow\\u003e\":2566,\"String:\\u0027\":880,\"\\u003cr\\u003e\":1526,\"String\":2989,\"ColumnStats.setCatalogName()\":1943,\"UNKNOWN.append()\":1599,\"DBAccess.releaseConnection()\":2680,\"ResultSet.next()\":1836,\"int:6\":2219,\"int:5\":2150,\"int:4\":2093,\"int:3\":2042,\"DBAccess.getConnection()\":406,\"List.get()\":1680,\"ResultSet.getBoolean()\":2220,\"List.size()\":1434,\"int:8\":2323,\"int:7\":2274,\"ResultSet.close()\":2764,\"ColumnStats.setPercentSampled()\":2276,\"ColumnStats.setColumnName()\":2095,\"int:2\":1992,\"int:1\":1383,\"ResultSet.getDouble()\":2275,\"StringBuffer.\\u003cinit\\u003e\":458,\"\\u003cnullcheck\\u003e\":1228,\"int:0\":1467,\"SQLException.printStackTrace()\":2442,\"ColumnStats.\\u003cinit\\u003e\":1891,\"ColumnStats.setSchemaName()\":1994,\"ResultSet.getString()\":2094,\"ResultSet.getLong()\":2151,\"String.isEmpty()\":957,\"\\u003creturn\\u003e\":3041,\"StringBuffer.toString()\":1768,\"ArrayList.\\u003cinit\\u003e\":524,\"List.add()\":1177,\"ColumnStats.setDistinctValueCountEstimated()\":2221,\"Connection.prepareStatement()\":1769,\"ColumnStats.setTableName()\":2044,\"PreparedStatement.executeQuery()\":1805,\"AppException.\\u003cinit\\u003e\":2565,\"ColumnStats.setDistinctValueCount()\":2152,\"\\u003ca\\u003e\":1482,\"StringBuffer.append()\":1681,\"ColumnStats.setSampleSize()\":2325,\"PreparedStatement.close()\":2848},\"rawCode\":\"public static List\\u003cColumnStats\\u003e findColumnStats(\\n        String catalogName,\\n        String schemaName,\\n        String tableName,\\n        String columnName)\\n        throws AppException\\n    {\\n\\n        List\\u003cColumnStats\\u003e retVal \\u003d new ArrayList\\u003cColumnStats\\u003e();\\n\\n        Connection conn \\u003d null;\\n        PreparedStatement ps \\u003d null;\\n        ResultSet rs \\u003d null;\\n\\n        try {\\n\\n            conn \\u003d getConnection();\\n\\n            StringBuffer sql \\u003d new StringBuffer();\\n\\n            List\\u003cString\\u003e myConditions \\u003d new ArrayList\\u003cString\\u003e();\\n            sql.append(\\\"select catalog_name, schema_name, table_name, column_name, distinct_value_count, is_distinct_value_count_estimated, percent_sampled, sample_size from localdb.sys_root.dba_column_stats where \\\");\\n            if (catalogName !\\u003d null \\u0026\\u0026 !catalogName.isEmpty()) {\\n                myConditions.add(\\\"catalog_name \\u003d \\u0027\\\" + catalogName + \\\"\\u0027\\\");\\n            }\\n\\n            if (schemaName !\\u003d null \\u0026\\u0026 !schemaName.isEmpty()) {\\n                myConditions.add(\\\"schema_name \\u003d \\u0027\\\" + schemaName + \\\"\\u0027\\\");\\n            }\\n\\n            if (tableName !\\u003d null \\u0026\\u0026 !tableName.isEmpty()) {\\n                myConditions.add(\\\"table_name \\u003d \\u0027\\\" + tableName + \\\"\\u0027\\\");\\n            }\\n\\n            if (columnName !\\u003d null \\u0026\\u0026 !columnName.isEmpty()) {\\n                myConditions.add(\\\"column_name \\u003d \\u0027\\\" + columnName + \\\"\\u0027\\\");\\n            }\\n\\n            if (myConditions.size() \\u003e 1) {\\n\\n                int size \\u003d myConditions.size();\\n\\n                for (int i \\u003d 0; i \\u003c size; i++) {\\n\\n                    if ((size - i) !\\u003d 1)\\n                        sql.append(myConditions.get(i)).append(\\\" and \\\");\\n                    else\\n                        sql.append(myConditions.get(i));\\n                }\\n            }\\n            ps \\u003d conn.prepareStatement(sql.toString());\\n            rs \\u003d ps.executeQuery();\\n\\n            while (rs.next()) {\\n\\n                ColumnStats en \\u003d new ColumnStats();\\n                en.setCatalogName(rs.getString(1));\\n                en.setSchemaName(rs.getString(2));\\n                en.setTableName(rs.getString(3));\\n                en.setColumnName(rs.getString(4));\\n                en.setDistinctValueCount(rs.getLong(5));\\n                en.setDistinctValueCountEstimated(rs.getBoolean(6));\\n                en.setPercentSampled(rs.getDouble(7));\\n                en.setSampleSize(rs.getLong(8));\\n                retVal.add(en);\\n\\n            }\\n\\n        } catch (SQLException e) {\\n\\n            e.printStackTrace();\\n            throw new AppException(\\n                \\\"Error Info: The connection was bad or Execute sql statment failed!\\\");\\n        } finally {\\n\\n            try {\\n\\n                if (conn !\\u003d null) {\\n                  releaseConnection();\\n                }\\n                if (rs !\\u003d null) {\\n                    rs.close();\\n                }\\n                if (ps !\\u003d null) {\\n                    ps.close();\\n                }\\n\\n\\n            } catch (SQLException ex) {\\n\\n                throw new AppException(\\\"Error Info: Release db resouce failed\\\");\\n\\n            }\\n\\n        }\\n\\n        return retVal;\\n\\n    }\"}","421":"{\"expressionStart\":{\"\\u003cthrow\\u003e\":1279,\"SystemParameter.setParamName()\":585,\"ResultSet.getString()\":601,\"String\":360,\"DBAccess.releaseConnection()\":1006,\"\\u003creturn\\u003e\":1379,\"ResultSet.next()\":495,\"ArrayList.\\u003cinit\\u003e\":135,\"List.add()\":686,\"SystemParameter.setParamValue()\":635,\"DBAccess.getConnection()\":303,\"Connection.prepareStatement()\":338,\"PreparedStatement.executeQuery()\":456,\"ResultSet.close()\":1099,\"AppException.\\u003cinit\\u003e\":806,\"int:2\":665,\"SystemParameter.\\u003cinit\\u003e\":546,\"int:1\":614,\"\\u003cnullcheck\\u003e\":1149,\"PreparedStatement.close()\":1183,\"SQLException.printStackTrace()\":767},\"expressionEnd\":{\"\\u003cthrow\\u003e\":1343,\"SystemParameter.setParamName()\":617,\"ResultSet.getString()\":616,\"String\":436,\"DBAccess.releaseConnection()\":1025,\"\\u003creturn\\u003e\":1393,\"ResultSet.next()\":504,\"ArrayList.\\u003cinit\\u003e\":167,\"List.add()\":700,\"SystemParameter.setParamValue()\":668,\"DBAccess.getConnection()\":318,\"Connection.prepareStatement()\":437,\"PreparedStatement.executeQuery()\":473,\"ResultSet.close()\":1109,\"AppException.\\u003cinit\\u003e\":909,\"int:2\":666,\"SystemParameter.\\u003cinit\\u003e\":567,\"int:1\":615,\"\\u003cnullcheck\\u003e\":1159,\"PreparedStatement.close()\":1193,\"SQLException.printStackTrace()\":786},\"rawCode\":\"public static List\\u003cSystemParameter\\u003e getAllSystemParameters()\\n        throws AppException\\n    {\\n\\n        List\\u003cSystemParameter\\u003e retVal \\u003d new ArrayList\\u003cSystemParameter\\u003e();\\n\\n        Connection conn \\u003d null;\\n        PreparedStatement ps \\u003d null;\\n        ResultSet rs \\u003d null;\\n\\n        try {\\n\\n            conn \\u003d getConnection();\\n\\n            ps \\u003d conn.prepareStatement(\\\"select param_name, param_value from localdb.sys_root.dba_system_parameters\\\");\\n            rs \\u003d ps.executeQuery();\\n\\n            while (rs.next()) {\\n\\n                SystemParameter en \\u003d new SystemParameter();\\n                en.setParamName(rs.getString(1));\\n                en.setParamValue(rs.getString(2));\\n                retVal.add(en);\\n\\n            }\\n\\n        }  catch (SQLException e) {\\n\\n            e.printStackTrace();\\n            throw new AppException(\\n                \\\"Error Info: The connection was bad or Execute sql statment failed!\\\");\\n        }  finally {\\n\\n            try {\\n\\n                if (conn !\\u003d null) {\\n                  releaseConnection();\\n                }\\n                if (rs !\\u003d null) {\\n                    rs.close();\\n                }\\n                if (ps !\\u003d null) {\\n                    ps.close();\\n                }\\n        \\n            } catch (SQLException ex) {\\n\\n                throw new AppException(\\\"Error Info: Release db resouce failed\\\");\\n\\n            }\\n\\n        }\\n\\n        return retVal;\\n\\n    }\"}","422":"{\"expressionStart\":{\"\\u003cthrow\\u003e\":706,\"ResultSet.getString()\":519,\"String\":302,\"\\u003creturn\\u003e\":947,\"DBAccess.releaseConnection()\":883,\"ResultSet.next()\":464,\"ArrayList.\\u003cinit\\u003e\":98,\"List.add()\":589,\"DBAccess.getConnection()\":244,\"Connection.prepareStatement()\":280,\"Wrapper.\\u003cinit\\u003e\":507,\"PreparedStatement.executeQuery()\":424,\"AppException.\\u003cinit\\u003e\":712,\"int:2\":549,\"int:1\":532,\"\\u003cnullcheck\\u003e\":854,\"SQLException.printStackTrace()\":672},\"expressionEnd\":{\"\\u003cthrow\\u003e\":817,\"ResultSet.getString()\":534,\"String\":341,\"\\u003creturn\\u003e\":961,\"DBAccess.releaseConnection()\":902,\"ResultSet.next()\":473,\"ArrayList.\\u003cinit\\u003e\":122,\"List.add()\":602,\"DBAccess.getConnection()\":259,\"Connection.prepareStatement()\":404,\"Wrapper.\\u003cinit\\u003e\":552,\"PreparedStatement.executeQuery()\":441,\"AppException.\\u003cinit\\u003e\":816,\"int:2\":550,\"int:1\":533,\"\\u003cnullcheck\\u003e\":866,\"SQLException.printStackTrace()\":691},\"rawCode\":\"public static List\\u003cWrapper\\u003e getWrappers() throws AppException {\\n    \\t\\n    \\tList\\u003cWrapper\\u003e retVal \\u003d new ArrayList\\u003cWrapper\\u003e();\\n    \\t\\n    \\tConnection conn \\u003d null;\\n    \\tPreparedStatement ps;\\n    \\tResultSet rs;\\n    \\t\\n    \\t try {\\n\\n             conn \\u003d getConnection();\\n\\n             ps \\u003d conn.prepareStatement(\\\"select FOREIGN_WRAPPER_NAME, LIBRARY \\\"\\n            \\t\\t + \\\"FROM localdb.SYS_ROOT.DBA_FOREIGN_WRAPPERS\\\");\\n             rs \\u003d ps.executeQuery();\\n\\n             while (rs.next()) {\\n\\n                 Wrapper w \\u003d new Wrapper(rs.getString(1), rs.getString(2));\\n                 \\n                 retVal.add(w);\\n\\n             }\\n\\n         }  catch (SQLException e) {\\n\\n             e.printStackTrace();\\n             throw new AppException(\\n                 \\\"Error Info: The connection was bad or Execute sql statment failed!\\\");\\n         } finally {\\n           if (conn !\\u003d null) {\\n             releaseConnection();\\n           }\\n         }\\n         \\n         return retVal;\\n         \\n    \\t\\n    }\"}","423":"{\"expressionStart\":{\"\\u003cthrow\\u003e\":1217,\"String\":1257,\"ColumnStats.setCatalogName()\":669,\"DBAccess.releaseConnection()\":1423,\"ResultSet.next()\":587,\"int:6\":978,\"int:5\":909,\"int:4\":852,\"int:3\":801,\"DBAccess.getConnection()\":286,\"ResultSet.getBoolean()\":964,\"int:8\":1082,\"int:7\":1033,\"ResultSet.close()\":1516,\"ColumnStats.setPercentSampled()\":999,\"ColumnStats.setColumnName()\":822,\"int:2\":751,\"int:1\":700,\"ResultSet.getDouble()\":1020,\"\\u003cnullcheck\\u003e\":1389,\"SQLException.printStackTrace()\":1184,\"ColumnStats.setSchemaName()\":721,\"ColumnStats.\\u003cinit\\u003e\":634,\"ResultSet.getString()\":788,\"ResultSet.getLong()\":898,\"\\u003creturn\\u003e\":1788,\"List.add()\":1103,\"ArrayList.\\u003cinit\\u003e\":122,\"ColumnStats.setDistinctValueCountEstimated()\":930,\"Connection.prepareStatement()\":321,\"ColumnStats.setTableName()\":772,\"PreparedStatement.executeQuery()\":548,\"AppException.\\u003cinit\\u003e\":1223,\"ColumnStats.setDistinctValueCount()\":873,\"ColumnStats.setSampleSize()\":1054,\"PreparedStatement.close()\":1600},\"expressionEnd\":{\"\\u003cthrow\\u003e\":1327,\"String\":1325,\"ColumnStats.setCatalogName()\":703,\"DBAccess.releaseConnection()\":1442,\"ResultSet.next()\":596,\"int:6\":979,\"int:5\":910,\"int:4\":853,\"int:3\":802,\"DBAccess.getConnection()\":301,\"ResultSet.getBoolean()\":980,\"int:8\":1083,\"int:7\":1034,\"ResultSet.close()\":1526,\"ColumnStats.setPercentSampled()\":1036,\"ColumnStats.setColumnName()\":855,\"int:2\":752,\"int:1\":701,\"ResultSet.getDouble()\":1035,\"\\u003cnullcheck\\u003e\":1401,\"SQLException.printStackTrace()\":1203,\"ColumnStats.setSchemaName()\":754,\"ColumnStats.\\u003cinit\\u003e\":651,\"ResultSet.getString()\":803,\"ResultSet.getLong()\":911,\"\\u003creturn\\u003e\":1802,\"List.add()\":1117,\"ArrayList.\\u003cinit\\u003e\":150,\"ColumnStats.setDistinctValueCountEstimated()\":981,\"Connection.prepareStatement()\":529,\"ColumnStats.setTableName()\":804,\"PreparedStatement.executeQuery()\":565,\"AppException.\\u003cinit\\u003e\":1326,\"ColumnStats.setDistinctValueCount()\":912,\"ColumnStats.setSampleSize()\":1085,\"PreparedStatement.close()\":1610},\"rawCode\":\"public static List\\u003cColumnStats\\u003e getAllColumnStats()\\n        throws AppException\\n    {\\n\\n        List\\u003cColumnStats\\u003e retVal \\u003d new ArrayList\\u003cColumnStats\\u003e();\\n\\n        Connection conn \\u003d null;\\n        PreparedStatement ps \\u003d null;\\n        ResultSet rs \\u003d null;\\n\\n        try {\\n\\n            conn \\u003d getConnection();\\n\\n            ps \\u003d conn.prepareStatement(\\\"select catalog_name, schema_name, table_name, column_name, distinct_value_count, is_distinct_value_count_estimated, percent_sampled, sample_size from localdb.sys_root.dba_column_stats\\\");\\n            rs \\u003d ps.executeQuery();\\n\\n            while (rs.next()) {\\n\\n                ColumnStats en \\u003d new ColumnStats();\\n                en.setCatalogName(rs.getString(1));\\n                en.setSchemaName(rs.getString(2));\\n                en.setTableName(rs.getString(3));\\n                en.setColumnName(rs.getString(4));\\n                en.setDistinctValueCount(rs.getLong(5));\\n                en.setDistinctValueCountEstimated(rs.getBoolean(6));\\n                en.setPercentSampled(rs.getDouble(7));\\n                en.setSampleSize(rs.getLong(8));\\n                retVal.add(en);\\n\\n            }\\n\\n        }  catch (SQLException e) {\\n\\n            e.printStackTrace();\\n            throw new AppException(\\n                \\\"Error Info: The connection was bad or Execute sql statment failed!\\\");\\n        }  finally {\\n\\n            try {\\n\\n                if (conn !\\u003d null) {\\n                  releaseConnection();\\n                }\\n                if (rs !\\u003d null) {\\n                    rs.close();\\n                }\\n                if (ps !\\u003d null) {\\n                    ps.close();\\n                }\\n\\n            } catch (SQLException ex) {\\n\\n                throw new AppException(\\\"Error Info: Release db resouce failed\\\");\\n\\n            }\\n\\n        }\\n\\n        return retVal;\\n\\n    }\"}","424":"{\"expressionStart\":{\"String:\\\"\":1079,\"\\u003cthrow\\u003e\":4394,\"\\u003cr\\u003e\":3781,\"UNKNOWN.equals()\":2471,\"String\":663,\"DBAccess.releaseConnection()\":4600,\"ResultSet.next()\":946,\"int:3\":846,\"List.get()\":4204,\"DBAccess.getConnection()\":340,\"String.toLowerCase()\":2471,\"List.size()\":3429,\"ResultSet.close()\":4693,\"int:2\":809,\"int:1\":767,\"StringBuffer.\\u003cinit\\u003e\":388,\"\\u003cnullcheck\\u003e\":4659,\"int:0\":924,\"SQLException.printStackTrace()\":4361,\"PreparedStatement.setString()\":833,\"DBAccess.createTableSQL()\":1329,\"ResultSet.getString()\":2870,\"ResultSet.getLong()\":988,\"UNKNOWN.size()\":2968,\"UNKNOWN.name.equals()\":3025,\"\\u003creturn\\u003e\":4965,\"StringBuffer.toString()\":726,\"ArrayList.\\u003cinit\\u003e\":2698,\"List.add()\":3264,\"boolean:true\":4972,\"UNKNOWN.get()\":3025,\"Connection.prepareStatement()\":704,\"PreparedStatement.executeQuery()\":2431,\"AppException.\\u003cinit\\u003e\":4400,\"DBAccess.createColumnSQL()\":4188,\"PreparedStatement.execute()\":1469,\"\\u003ca\\u003e\":2990,\"StringBuffer.append()\":653,\"\\u003cbreak\\u003e\":3141,\"String:.\":1246,\"PreparedStatement.close()\":4777},\"expressionEnd\":{\"String:\\\"\":1083,\"\\u003cthrow\\u003e\":4504,\"\\u003cr\\u003e\":3797,\"UNKNOWN.equals()\":2506,\"String\":684,\"DBAccess.releaseConnection()\":4619,\"ResultSet.next()\":955,\"int:3\":847,\"List.get()\":4215,\"DBAccess.getConnection()\":355,\"String.toLowerCase()\":2491,\"List.size()\":3449,\"ResultSet.close()\":4703,\"int:2\":810,\"int:1\":768,\"StringBuffer.\\u003cinit\\u003e\":406,\"\\u003cnullcheck\\u003e\":4669,\"int:0\":925,\"SQLException.printStackTrace()\":4380,\"PreparedStatement.setString()\":855,\"DBAccess.createTableSQL()\":1358,\"ResultSet.getString()\":2885,\"ResultSet.getLong()\":1001,\"UNKNOWN.size()\":2988,\"UNKNOWN.name.equals()\":3066,\"\\u003creturn\\u003e\":4977,\"StringBuffer.toString()\":739,\"ArrayList.\\u003cinit\\u003e\":2722,\"List.add()\":3290,\"boolean:true\":4976,\"UNKNOWN.get()\":3045,\"Connection.prepareStatement()\":740,\"PreparedStatement.executeQuery()\":2448,\"AppException.\\u003cinit\\u003e\":4503,\"DBAccess.createColumnSQL()\":4216,\"PreparedStatement.execute()\":1481,\"\\u003ca\\u003e\":2993,\"StringBuffer.append()\":685,\"\\u003cbreak\\u003e\":3147,\"String:.\":1249,\"PreparedStatement.close()\":4787},\"rawCode\":\"public static boolean postTableDetails(\\n        String catalogName,\\n        String schema,\\n        String table,\\n        TableDetails td)\\n        throws AppException\\n    {\\n        TableDetails retVal \\u003d td;\\n\\n        Connection conn \\u003d null;\\n        PreparedStatement ps \\u003d null;\\n        ResultSet rs \\u003d null;\\n\\n        try {\\n\\n            conn \\u003d getConnection();\\n\\n            StringBuffer sb \\u003d new StringBuffer();\\n            sb.append(\\\"select count(1) from localdb.sys_root.dba_tables where \\\");\\n            sb.append(\\\" TABLE_TYPE \\u003d \\u0027LOCAL TABLE\\u0027\\\");\\n            sb.append(\\\" AND catalog_name \\u003d ? \\\");\\n            sb.append(\\\" AND schema_name \\u003d ? \\\");\\n            sb.append(\\\" AND table_name \\u003d ?\\\");\\n            ps \\u003d conn.prepareStatement(sb.toString());\\n            ps.setString(1, catalogName);\\n            ps.setString(2, schema);\\n            ps.setString(3, table);\\n            rs \\u003d ps.executeQuery();\\n\\n            long isExisting \\u003d 0;\\n            while (rs.next()) {\\n                isExisting \\u003d rs.getLong(1);\\n            }\\n\\n            if (isExisting \\u003d\\u003d 0) {\\n\\n                schema \\u003d \\\"\\\\\\\"\\\" + schema + \\\"\\\\\\\"\\\";\\n                table \\u003d \\\"\\\\\\\"\\\" + table + \\\"\\\\\\\"\\\";\\n\\n                sb \\u003d new StringBuffer();\\n                sb.append(\\\"create table \\\" + catalogName + \\\".\\\" + schema + \\\".\\\"\\n                    + table + \\\" ( \\\");\\n                sb.append(createTableSQL(retVal.column));\\n                sb.append(\\\" )\\\");\\n                ps \\u003d conn.prepareStatement(sb.toString());\\n                ps.execute();\\n\\n            } else {\\n\\n                ps \\u003d conn.prepareStatement(\\\"select dc.lineage_id, dc.column_name, dc.ordinal_position, dc.datatype,\\\"\\n                    + \\\"dc.\\\\\\\"PRECISION\\\\\\\", dc.dec_digits, dc.is_nullable, dc.remarks, dcs.distinct_value_count, dcs.is_distinct_value_count_estimated, \\\"\\n                    + \\\"dcs.last_analyze_time \\\"\\n                    + \\\"from localdb.sys_root.dba_columns dc left join localdb.sys_root.dba_column_stats dcs on dc.table_name \\\"\\n                    + \\\" \\u003d dcs.table_name and dc.schema_name \\u003d dcs.schema_name and dc.catalog_name \\u003d dcs.catalog_name \\\"\\n                    + \\\"and dc.column_name \\u003d dcs.column_name \\\"\\n                    + \\\"where dc.catalog_name \\u003d ? and dc.schema_name \\u003d ? \\\"\\n                    + \\\" and dc.table_name \\u003d ? order by  dc.ordinal_position\\\");\\n                ps.setString(1, catalogName);\\n                ps.setString(2, schema);\\n                ps.setString(3, table);\\n\\n                rs \\u003d ps.executeQuery();\\n\\n                if (schema.toLowerCase().equals(schema))\\n                  schema \\u003d \\\"\\\\\\\"\\\" + schema + \\\"\\\\\\\"\\\";\\n                if (table.toLowerCase().equals(table))\\n                  table \\u003d \\\"\\\\\\\"\\\" + table + \\\"\\\\\\\"\\\";\\n\\n                List\\u003cInteger\\u003e index \\u003d new ArrayList\\u003cInteger\\u003e();\\n\\n                List\\u003cString\\u003e colNameFromDb \\u003d new ArrayList\\u003cString\\u003e();\\n\\n                while (rs.next()) {\\n\\n                    String colName \\u003d rs.getString(2);\\n\\n                    int matchCode \\u003d -1;\\n                    for (int i \\u003d 0; i \\u003c retVal.column.size(); i++) {\\n                        if (retVal.column.get(i).name.equals(colName)) {\\n                            matchCode \\u003d i;\\n                            break;\\n                        }\\n                    }\\n\\n                    if (matchCode \\u003d\\u003d -1) {\\n                        colNameFromDb.add(colName);\\n                    } else {\\n                        index.add(matchCode);\\n                    }\\n\\n                }\\n\\n                if (colNameFromDb.size() !\\u003d 0) {\\n\\n                    throw new AppException(\\\"Cannot remove columns\\\");\\n                }\\n\\n                List\\u003cColumn\\u003e cols \\u003d retVal.column;\\n                int sizeOfCols \\u003d cols.size();\\n\\n                for (int i \\u003d 0; i \\u003c sizeOfCols; i++) {\\n\\n                    boolean match \\u003d false;\\n\\n                    for (int j \\u003d 0; j \\u003c index.size(); j++) {\\n                        if (i \\u003d\\u003d j) {\\n                            match \\u003d true;\\n                            break;\\n                        }\\n                    }\\n                    if (!match) {\\n\\n                        ps \\u003d conn.prepareStatement(\\\"alter table \\\" + catalogName\\n                            + \\\".\\\" + schema + \\\".\\\" + table + \\\" add column \\\"\\n                            + createColumnSQL(cols.get(i)));\\n                        ps.execute();\\n                    }\\n                }\\n            }\\n\\n        }  catch (SQLException e) {\\n\\n            e.printStackTrace();\\n            throw new AppException(\\n                \\\"Error Info: The connection was bad or Execute sql statment failed!\\\");\\n        }  finally {\\n\\n            try {\\n\\n                if (conn !\\u003d null) {\\n                  releaseConnection();\\n                }\\n                if (rs !\\u003d null) {\\n                    rs.close();\\n                }\\n                if (ps !\\u003d null) {\\n                    ps.close();\\n                }\\n\\n            } catch (SQLException ex) {\\n\\n                throw new AppException(\\\"Error Info: Release db resouce failed\\\");\\n\\n            }\\n\\n        }\\n\\n        return true;\\n    }\"}","425":"{\"expressionStart\":{\"PreparedStatement.setString()\":468,\"\\u003cthrow\\u003e\":795,\"SystemParameter.setParamName()\":582,\"ResultSet.getString()\":602,\"String\":835,\"DBAccess.releaseConnection()\":1001,\"\\u003creturn\\u003e\":1383,\"ResultSet.next()\":552,\"SystemParameter.setParamValue()\":636,\"DBAccess.getConnection()\":299,\"Connection.prepareStatement()\":334,\"PreparedStatement.executeQuery()\":513,\"ResultSet.close()\":1094,\"AppException.\\u003cinit\\u003e\":801,\"int:2\":670,\"SystemParameter.\\u003cinit\\u003e\":142,\"\\u003cbreak\\u003e\":691,\"int:1\":481,\"\\u003cnullcheck\\u003e\":1144,\"PreparedStatement.close()\":1178,\"SQLException.printStackTrace()\":762},\"expressionEnd\":{\"PreparedStatement.setString()\":494,\"\\u003cthrow\\u003e\":905,\"SystemParameter.setParamName()\":618,\"ResultSet.getString()\":617,\"String\":903,\"DBAccess.releaseConnection()\":1020,\"\\u003creturn\\u003e\":1397,\"ResultSet.next()\":561,\"SystemParameter.setParamValue()\":673,\"DBAccess.getConnection()\":314,\"Connection.prepareStatement()\":454,\"PreparedStatement.executeQuery()\":530,\"ResultSet.close()\":1104,\"AppException.\\u003cinit\\u003e\":904,\"int:2\":671,\"SystemParameter.\\u003cinit\\u003e\":163,\"\\u003cbreak\\u003e\":697,\"int:1\":482,\"\\u003cnullcheck\\u003e\":1154,\"PreparedStatement.close()\":1188,\"SQLException.printStackTrace()\":781},\"rawCode\":\"public static SystemParameter findSystemParameterByName(String paramName)\\n        throws AppException\\n    {\\n\\n        SystemParameter retVal \\u003d new SystemParameter();\\n\\n        Connection conn \\u003d null;\\n        PreparedStatement ps \\u003d null;\\n        ResultSet rs \\u003d null;\\n\\n        try {\\n\\n            conn \\u003d getConnection();\\n\\n            ps \\u003d conn.prepareStatement(\\\"select param_name, param_value from localdb.sys_root.dba_system_parameters where param_name \\u003d ?\\\");\\n            ps.setString(1, paramName);\\n            rs \\u003d ps.executeQuery();\\n\\n            while (rs.next()) {\\n\\n                retVal.setParamName(rs.getString(1));\\n                retVal.setParamValue(rs.getString(2));\\n                break;\\n\\n            }\\n\\n        } catch (SQLException e) {\\n\\n            e.printStackTrace();\\n            throw new AppException(\\n                \\\"Error Info: The connection was bad or Execute sql statment failed!\\\");\\n        }  finally {\\n\\n            try {\\n\\n                if (conn !\\u003d null) {\\n                  releaseConnection();\\n                }\\n                if (rs !\\u003d null) {\\n                    rs.close();\\n                }\\n                if (ps !\\u003d null) {\\n                    ps.close();\\n                }\\n                \\n\\n            } catch (SQLException ex) {\\n\\n                throw new AppException(\\\"Error Info: Release db resouce failed\\\");\\n\\n            }\\n\\n        }\\n\\n        return retVal;\\n\\n    }\"}","426":"{\"expressionStart\":{\"TipoServicoDAO.pesquisarPorNome()\":103,\"ResultSet.getString()\":193,\"TipoServicoDAOTeste.assertNotNull()\":220,\"String\":206,\"ResultSet.next()\":161,\"SQLException.printStackTrace()\":281},\"expressionEnd\":{\"TipoServicoDAO.pesquisarPorNome()\":143,\"ResultSet.getString()\":213,\"TipoServicoDAOTeste.assertNotNull()\":239,\"String\":212,\"ResultSet.next()\":170,\"SQLException.printStackTrace()\":300},\"rawCode\":\"@Test\\r\\n\\tpublic void pesquisarPorNomeDeTipoServicoDAODeveMostrarServico() {\\r\\n\\t\\ttry {\\r\\n\\t\\t\\tResultSet rs \\u003d servicoDAO.pesquisarPorNome(tiposervico);\\r\\n\\t\\t\\t\\r\\n\\t\\t\\twhile (rs.next()) {\\r\\n\\t\\t\\t\\tString nome \\u003d rs.getString(\\\"nome\\\");\\r\\n\\t\\t\\t\\tassertNotNull(nome);\\r\\n\\t\\t\\t}\\r\\n\\t\\t} catch (SQLException e) {\\r\\n\\t\\t\\te.printStackTrace();\\r\\n\\t\\t}\\r\\n\\t}\"}","427":"{\"expressionStart\":{\"ResultSet.getString()\":205,\"TipoServicoDAO.mostrarTipoServicoCadastrados()\":102,\"String\":218,\"TipoServicoDAOTeste.assertNotNull()\":232,\"ResultSet.next()\":173,\"SQLException.printStackTrace()\":293},\"expressionEnd\":{\"ResultSet.getString()\":225,\"TipoServicoDAO.mostrarTipoServicoCadastrados()\":155,\"String\":224,\"TipoServicoDAOTeste.assertNotNull()\":251,\"ResultSet.next()\":182,\"SQLException.printStackTrace()\":312},\"rawCode\":\"@Test\\r\\n\\tpublic void mostrarServicosDeTipoServicoDAODeveMostrarServico() {\\r\\n\\t\\ttry {\\r\\n\\t\\t\\tResultSet rs \\u003d servicoDAO.mostrarTipoServicoCadastrados(tiposervico);\\r\\n\\t\\t\\t\\r\\n\\t\\t\\twhile (rs.next()) {\\r\\n\\t\\t\\t\\tString nome \\u003d rs.getString(\\\"nome\\\");\\r\\n\\t\\t\\t\\tassertNotNull(nome);\\r\\n\\t\\t\\t}\\r\\n\\t\\t} catch (SQLException e) {\\r\\n\\t\\t\\te.printStackTrace();\\r\\n\\t\\t}\\r\\n\\t}\"}","428":"{\"expressionStart\":{\"ConnectToDB.selectOneColumnUnderOneCondition()\":151,\"ResultSet.getString()\":263,\"null:null\":134,\"\\u003creturn\\u003e\":312,\"ResultSet.next()\":224},\"expressionEnd\":{\"ConnectToDB.selectOneColumnUnderOneCondition()\":208,\"ResultSet.getString()\":292,\"null:null\":138,\"\\u003creturn\\u003e\":325,\"ResultSet.next()\":233},\"rawCode\":\"String getValueForOneColumnUnderOneConditions(Column col,Column cond,String tableName) throws SQLException\\n    {\\n        String value\\u003dnull;\\n        rs\\u003dthis.selectOneColumnUnderOneCondition(col,tableName,cond);\\n        while(rs.next())\\n        {\\n            value\\u003drs.getString(col.columnLabel);\\n        }\\n        return value;\\n\\n    }\"}","429":"{\"expressionStart\":{\"String:DATASOURCETYPE\":372,\"User.getUserName()\":212,\"String:ACUSER_ACDATASOURCE\":168,\"DataSource.\\u003cinit\\u003e\":329,\"Column.\\u003cinit\\u003e\":190,\"String:USERNAME\":201,\"null:null\":114,\"ResultSet.getString()\":359,\"String:DATASOURCENAME\":243,\"ConnectToDB.selectAllColumnsUnderTwoConditions()\":133,\"\\u003creturn\\u003e\":448,\"ResultSet.next()\":292},\"expressionEnd\":{\"String:DATASOURCETYPE\":388,\"User.getUserName()\":230,\"String:ACUSER_ACDATASOURCE\":189,\"DataSource.\\u003cinit\\u003e\":390,\"Column.\\u003cinit\\u003e\":231,\"String:USERNAME\":211,\"null:null\":118,\"ResultSet.getString()\":389,\"String:DATASOURCENAME\":259,\"ConnectToDB.selectAllColumnsUnderTwoConditions()\":276,\"\\u003creturn\\u003e\":458,\"ResultSet.next()\":301},\"rawCode\":\"DataSource getDataSourceForUser(User user,String dataSourceName)throws SQLException\\n    {\\n        DataSource ds \\u003d null;\\n        rs \\u003d selectAllColumnsUnderTwoConditions(\\\"ACUSER_ACDATASOURCE\\\",new Column(\\\"USERNAME\\\",user.getUserName()),new Column(\\\"DATASOURCENAME\\\",dataSourceName));\\n        while(rs.next())\\n        {\\n           ds \\u003d new DataSource(dataSourceName,rs.getString(\\\"DATASOURCETYPE\\\"));                                      \\n        }\\n        return ds;\\n    }\"}","430":"{\"expressionStart\":{\"ConnectToDB.selectOneColumnUnderTwoConditions()\":174,\"null:null\":157,\"ResultSet.getString()\":304,\"\\u003creturn\\u003e\":353,\"ResultSet.next()\":265},\"expressionEnd\":{\"ConnectToDB.selectOneColumnUnderTwoConditions()\":249,\"null:null\":161,\"ResultSet.getString()\":333,\"\\u003creturn\\u003e\":366,\"ResultSet.next()\":274},\"rawCode\":\"String getValueForOneColumnUnderTwoConditions(Column col,Column firstCond,Column secondCond,String tableName) throws SQLException\\n    {\\n        String value\\u003dnull;\\n        rs\\u003dthis.selectOneColumnUnderTwoConditions(col, tableName,firstCond,secondCond);\\n        while(rs.next())\\n        {\\n            value\\u003drs.getString(col.columnLabel);\\n        }\\n        return value;\\n\\n    }\"}","431":"{\"expressionStart\":{\"User.setEmail()\":732,\"String:USERNAME\":318,\"User.setLastName()\":676,\"String:\\u0027\":178,\"ResultSet.getString()\":693,\"User.\\u003cinit\\u003e\":296,\"String\":706,\"\\u003creturn\\u003e\":788,\"ResultSet.next()\":585,\"Statement.executeQuery()\":545,\"User.setFirstName()\":618},\"expressionEnd\":{\"User.setEmail()\":768,\"String:USERNAME\":328,\"User.setLastName()\":718,\"String:\\u0027\":181,\"ResultSet.getString()\":717,\"User.\\u003cinit\\u003e\":330,\"String\":716,\"\\u003creturn\\u003e\":800,\"ResultSet.next()\":594,\"Statement.executeQuery()\":569,\"User.setFirstName()\":662},\"rawCode\":\"User getUserFromDataSource(String datasourcename)throws SQLException\\n    {\\n        String query\\u003d\\\"SELECT USERNAME FROM ACUSER_ACDATASOURCE WHERE DATASOURCENAME \\u003d\\u0027\\\"+datasourcename+\\\"\\u0027\\\";    // get the username for this user\\n        rs \\u003d stmt.executeQuery(query);\\n        rs.next();\\n        User user\\u003dnew User(rs.getString(\\\"USERNAME\\\"));                                     // create what will be returned\\n        query\\u003d\\\"SELECT * FROM ACUSER WHERE USERNAME \\u003d\\u0027\\\"+rs.getString(\\\"USERNAME\\\")+\\\"\\u0027\\\";      // initialize the rest of the information\\n        rs \\u003d stmt.executeQuery(query);\\n        while(rs.next())\\n        {\\n            user.setFirstName(rs.getString(\\\"FIRSTNAME\\\"));\\n            user.setLastName(rs.getString(\\\"LASTNAME\\\"));\\n            user.setEmail(rs.getString(\\\"EMAIL\\\"));\\n        }\\n        return user;\\n    }\"}","432":"{\"expressionStart\":{\"String:DATASOURCETYPE\":204,\"Column.\\u003cinit\\u003e\":245,\"DataSource.\\u003cinit\\u003e\":358,\"String:GROUPNAME\":256,\"ConnectToDB.selectTwoColumnsUnderOneCondition()\":125,\"ResultSet.getString()\":373,\"Vector.add()\":347,\"String\":222,\"String:DATASOURCENAME\":175,\"Vector.\\u003cinit\\u003e\":99,\"\\u003creturn\\u003e\":456,\"ResultSet.next()\":314},\"expressionEnd\":{\"String:DATASOURCETYPE\":220,\"Column.\\u003cinit\\u003e\":279,\"DataSource.\\u003cinit\\u003e\":435,\"String:GROUPNAME\":267,\"ConnectToDB.selectTwoColumnsUnderOneCondition()\":280,\"ResultSet.getString()\":403,\"Vector.add()\":436,\"String\":244,\"String:DATASOURCENAME\":191,\"Vector.\\u003cinit\\u003e\":111,\"\\u003creturn\\u003e\":470,\"ResultSet.next()\":323},\"rawCode\":\"Vector getDataSourceListForGroup(String groupName) throws SQLException\\n    {\\n        Vector dsList\\u003dnew Vector();\\n        rs\\u003d this.selectTwoColumnsUnderOneCondition(new Column(\\\"DATASOURCENAME\\\"),new Column(\\\"DATASOURCETYPE\\\"),\\\"ACGROUP_ACDATASOURCE\\\",new Column(\\\"GROUPNAME\\\", groupName));\\n        //Display\\n        while(rs.next())\\n        {\\n            dsList.add(new DataSource(rs.getString(\\\"DATASOURCENAME\\\"),rs.getString(\\\"DATASOURCETYPE\\\")));\\n        }\\n        return dsList;\\n\\n    }\"}","433":"{\"expressionStart\":{\"User.setEmail()\":360,\"Column.\\u003cinit\\u003e\":165,\"String:USERNAME\":176,\"User.setLastName()\":304,\"ResultSet.getString()\":374,\"String:ACUSER\":156,\"ConnectToDB.selectAllColumnsUnderOneCondition()\":117,\"User.\\u003cinit\\u003e\":84,\"String\":387,\"\\u003creturn\\u003e\":416,\"ResultSet.next()\":213,\"User.setFirstName()\":246},\"expressionEnd\":{\"User.setEmail()\":396,\"Column.\\u003cinit\\u003e\":196,\"String:USERNAME\":186,\"User.setLastName()\":346,\"ResultSet.getString()\":395,\"String:ACUSER\":164,\"ConnectToDB.selectAllColumnsUnderOneCondition()\":197,\"User.\\u003cinit\\u003e\":102,\"String\":394,\"\\u003creturn\\u003e\":428,\"ResultSet.next()\":222,\"User.setFirstName()\":290},\"rawCode\":\"User getUserForUserName(String userName)throws SQLException\\n    {\\n        User user\\u003dnew User(userName);\\n        rs \\u003d this.selectAllColumnsUnderOneCondition(\\\"ACUSER\\\",new Column(\\\"USERNAME\\\",userName));\\n        while(rs.next())\\n        {\\n            user.setFirstName(rs.getString(\\\"FIRSTNAME\\\"));\\n            user.setLastName(rs.getString(\\\"LASTNAME\\\"));\\n            user.setEmail(rs.getString(\\\"EMAIL\\\"));\\n        }\\n        return user;\\n    }\"}","434":"{\"expressionStart\":{\"String:DATASOURCETYPE\":361,\"String:ACUSER_ACDATASOURCE\":188,\"DataSource.\\u003cinit\\u003e\":302,\"String:USERNAME\":221,\"ResultSet.getString()\":450,\"Vector.add()\":291,\"String\":463,\"\\u003creturn\\u003e\":501,\"ResultSet.next()\":258,\"Column.\\u003cinit\\u003e\":210,\"ConnectToDB.selectAllColumnsUnderOneCondition()\":149,\"Vector.\\u003cinit\\u003e\":124,\"String:DATASOURCENAME\":330},\"expressionEnd\":{\"String:DATASOURCETYPE\":377,\"String:ACUSER_ACDATASOURCE\":209,\"DataSource.\\u003cinit\\u003e\":480,\"String:USERNAME\":231,\"ResultSet.getString()\":479,\"Vector.add()\":481,\"String\":478,\"\\u003creturn\\u003e\":515,\"ResultSet.next()\":267,\"Column.\\u003cinit\\u003e\":241,\"ConnectToDB.selectAllColumnsUnderOneCondition()\":242,\"Vector.\\u003cinit\\u003e\":136,\"String:DATASOURCENAME\":346},\"rawCode\":\"Vector getDataSourceListForUser(String userName)throws SQLException\\n    {\\n        String dstype\\u003dnull;\\n        Vector dsList\\u003dnew Vector();\\n        rs\\u003dthis.selectAllColumnsUnderOneCondition(\\\"ACUSER_ACDATASOURCE\\\",new Column(\\\"USERNAME\\\",userName));\\n        while(rs.next())\\n        {\\n            dsList.add(new DataSource(rs.getString(\\\"DATASOURCENAME\\\"),rs.getString(\\\"DATASOURCETYPE\\\"),rs.getString(\\\"FILENAME\\\"),rs.getString(\\\"FILETYPE\\\"),rs.getString(\\\"PATH\\\"),rs.getString(\\\"OWNERDECISION\\\")));\\n        }\\n        return dsList;\\n    }\"}","435":"{\"expressionStart\":{\"ConnectToDB.selectOneColumnUnderOneCondition()\":166,\"ResultSet.getString()\":284,\"Vector.add()\":273,\"Vector.\\u003cinit\\u003e\":141,\"\\u003creturn\\u003e\":334,\"ResultSet.next()\":240},\"expressionEnd\":{\"ConnectToDB.selectOneColumnUnderOneCondition()\":224,\"ResultSet.getString()\":313,\"Vector.add()\":314,\"Vector.\\u003cinit\\u003e\":153,\"\\u003creturn\\u003e\":348,\"ResultSet.next()\":249},\"rawCode\":\"Vector getValuesVectorForOneColumnUnderOneCondition(Column col,Column cond,String tableName) throws SQLException\\n    {\\n        Vector values\\u003dnew Vector();\\n        rs\\u003dthis.selectOneColumnUnderOneCondition(col, tableName,cond);\\n        while(rs.next())\\n        {\\n            values.add(rs.getString(col.columnLabel));\\n        }\\n        return values;\\n    }\"}","436":"{\"expressionStart\":{\"String.equals()\":344,\"boolean:true\":428,\"Column.\\u003cinit\\u003e\":260,\"String:USERNAME\":271,\"boolean:false\":170,\"ConnectToDB.selectOneColumnUnderOneCondition()\":188,\"ResultSet.getString()\":360,\"String:ACUSER\":250,\"String\":237,\"\\u003creturn\\u003e\":466,\"\\u003d\":417,\"ResultSet.next()\":308},\"expressionEnd\":{\"String.equals()\":385,\"boolean:true\":432,\"Column.\\u003cinit\\u003e\":291,\"String:USERNAME\":281,\"boolean:false\":175,\"ConnectToDB.selectOneColumnUnderOneCondition()\":292,\"ResultSet.getString()\":384,\"String:ACUSER\":258,\"String\":247,\"\\u003creturn\\u003e\":484,\"\\u003d\":432,\"ResultSet.next()\":317},\"rawCode\":\"boolean isPasswordCorrectForThisUser(String userName,String password)throws Exception //password is already encrypted when arrives here!\\n    {\\n        boolean passwordOK\\u003dfalse;\\n        rs\\u003dthis.selectOneColumnUnderOneCondition(new Column(\\\"PASSWORD\\\"), \\\"ACUSER\\\", new Column(\\\"USERNAME\\\",userName));\\n        while(rs.next())\\n        {\\n            if(password.equals(rs.getString(\\\"PASSWORD\\\")))\\n            {\\n                passwordOK\\u003dtrue;\\n            }\\n        }\\n        return passwordOK;\\n    }\"}","437":"{\"expressionStart\":{\"String:DATASOURCETYPE\":213,\"ConnectToDB.selectThreeColumnsUnderTwoConditions()\":131,\"String:ACUSER_ACDATASOURCE\":260,\"DataSource.\\u003cinit\\u003e\":410,\"String:USERNAME\":293,\"ResultSet.getString()\":425,\"Vector.add()\":397,\"String\":242,\"\\u003creturn\\u003e\":538,\"ResultSet.next()\":364,\"Column.\\u003cinit\\u003e\":231,\"String:DATASOURCENAME\":184,\"Vector.\\u003cinit\\u003e\":103},\"expressionEnd\":{\"String:DATASOURCETYPE\":229,\"ConnectToDB.selectThreeColumnsUnderTwoConditions()\":348,\"String:ACUSER_ACDATASOURCE\":281,\"DataSource.\\u003cinit\\u003e\":517,\"String:USERNAME\":303,\"ResultSet.getString()\":455,\"Vector.add()\":518,\"String\":257,\"\\u003creturn\\u003e\":554,\"ResultSet.next()\":373,\"Column.\\u003cinit\\u003e\":258,\"String:DATASOURCENAME\":200,\"Vector.\\u003cinit\\u003e\":115},\"rawCode\":\"Vector getDataSourcesForWaitingUser(String userName)throws SQLException\\n    {\\n        Vector dsVector\\u003d new Vector();\\n\\n        rs \\u003d this.selectThreeColumnsUnderTwoConditions(new Column(\\\"DATASOURCENAME\\\"),new Column(\\\"DATASOURCETYPE\\\"),new Column(\\\"OWNERDECISION\\\"), \\\"ACUSER_ACDATASOURCE\\\",new Column(\\\"USERNAME\\\",userName),new Column(\\\"ISUSERWAITING\\\",\\\"yes\\\"));\\n        while(rs.next())\\n        {\\n            dsVector.add(new DataSource(rs.getString(\\\"DATASOURCENAME\\\"),rs.getString(\\\"DATASOURCETYPE\\\"),rs.getString(\\\"OWNERDECISION\\\")));\\n        }\\n        return dsVector;\\n\\n    }\"}","438":"{\"expressionStart\":{\"ParameterSet.valueForName()\":244,\"DataSource.\\u003cinit\\u003e\":341,\"ConnectToDB.selectOneColumn()\":131,\"Column.\\u003cinit\\u003e\":147,\"ResultSet.getString()\":356,\"Vector.add()\":329,\"String\":177,\"Vector.\\u003cinit\\u003e\":104,\"String:DATASOURCENAME\":158,\"\\u003creturn\\u003e\":471,\"ResultSet.next()\":208,\"\\u003cnullcheck\\u003e\":244},\"expressionEnd\":{\"ParameterSet.valueForName()\":291,\"DataSource.\\u003cinit\\u003e\":436,\"ConnectToDB.selectOneColumn()\":192,\"Column.\\u003cinit\\u003e\":175,\"ResultSet.getString()\":386,\"Vector.add()\":437,\"String\":191,\"Vector.\\u003cinit\\u003e\":116,\"String:DATASOURCENAME\":174,\"\\u003creturn\\u003e\":485,\"ResultSet.next()\":217,\"\\u003cnullcheck\\u003e\":297},\"rawCode\":\"Vector getDataSourceListForParameterSet(ParameterSet pm)throws SQLException\\n    {\\n        Vector dsList\\u003dnew Vector();\\n        rs \\u003d selectOneColumn(new Column(\\\"DATASOURCENAME\\\"), \\\"ACDATASOURCE\\\");\\n        while(rs.next())\\n        {\\n            if(pm.valueForName(rs.getString(\\\"DATASOURCENAME\\\"))!\\u003dnull)\\n            {\\n                dsList.add( new DataSource(rs.getString(\\\"DATASOURCENAME\\\"), pm.valueForName(rs.getString(\\\"DATASOURCENAME\\\"))));\\n            }\\n        }\\n        return dsList;\\n    }\"}","439":"{\"expressionStart\":{\"boolean:true\":377,\"boolean:false\":143,\"ConnectToDB.selectOneColumnUnderOneCondition()\":161,\"ResultSet.getString()\":322,\"UNKNOWN.equals()\":299,\"\\u003d\":366,\"\\u003creturn\\u003e\":400,\"ResultSet.next()\":241,\"\\u003cnullcheck\\u003e\":262},\"expressionEnd\":{\"boolean:true\":381,\"boolean:false\":148,\"ConnectToDB.selectOneColumnUnderOneCondition()\":218,\"ResultSet.getString()\":351,\"UNKNOWN.equals()\":352,\"\\u003d\":381,\"\\u003creturn\\u003e\":418,\"ResultSet.next()\":250,\"\\u003cnullcheck\\u003e\":284},\"rawCode\":\"boolean valueExistsForThisColumnUnderOneCondition(Column col,Column cond,String tableName)throws SQLException\\n    {\\n        boolean valueFound\\u003dfalse;\\n        rs\\u003dthis.selectOneColumnUnderOneCondition(col,tableName,cond);\\n\\n\\t\\t//Display\\n\\t\\twhile(rs.next())\\n\\t\\t{\\n\\t\\t\\tif(col.columnValue!\\u003d null)\\n\\t\\t\\t{\\n\\n\\t\\t\\t\\tif(col.columnValue.equals(rs.getString(col.columnLabel)))\\n\\t\\t\\t\\t{\\n\\n\\t\\t\\t\\t\\tvalueFound\\u003dtrue;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn valueFound;\\n\\n    }\"}","440":"{\"expressionStart\":{\"String:DATASOURCETYPE\":273,\"String.equals()\":633,\"String:ACUSER_ACDATASOURCE\":292,\"DataSource.\\u003cinit\\u003e\":728,\"String:USERNAME\":250,\"ConnectToDB.selectTwoColumnsUnderThreeConditions()\":197,\"boolean:false\":661,\"ResultSet.getString()\":544,\"\\u003cr\\u003e\":633,\"Vector.add()\":698,\"String\":361,\"\\u003creturn\\u003e\":802,\"ResultSet.next()\":442,\"String:4\":655,\"Column.\\u003cinit\\u003e\":314,\"char:\\u00270\\u0027\":626,\"String.charAt()\":599,\"User.\\u003cinit\\u003e\":708,\"Vector.\\u003cinit\\u003e\":105,\"String:DATASOURCENAME\":325,\"int:1\":621},\"expressionEnd\":{\"String:DATASOURCETYPE\":289,\"String.equals()\":659,\"String:ACUSER_ACDATASOURCE\":313,\"DataSource.\\u003cinit\\u003e\":765,\"String:USERNAME\":260,\"ConnectToDB.selectTwoColumnsUnderThreeConditions()\":426,\"boolean:false\":666,\"ResultSet.getString()\":568,\"\\u003cr\\u003e\":666,\"Vector.add()\":767,\"String\":376,\"\\u003creturn\\u003e\":815,\"ResultSet.next()\":451,\"String:4\":658,\"Column.\\u003cinit\\u003e\":349,\"char:\\u00270\\u0027\":629,\"String.charAt()\":623,\"User.\\u003cinit\\u003e\":766,\"Vector.\\u003cinit\\u003e\":117,\"String:DATASOURCENAME\":341,\"int:1\":622},\"rawCode\":\"Vector getUsersWaitingForThisOwnerDecision(String dsname)throws SQLException\\n    {\\n        Vector users\\u003d new Vector();\\n        String dataSourceType\\u003dnull;\\n        String userName\\u003dnull;\\n        rs \\u003dthis.selectTwoColumnsUnderThreeConditions(new Column(\\\"USERNAME\\\"),new Column(\\\"DATASOURCETYPE\\\"), \\\"ACUSER_ACDATASOURCE\\\",new Column(\\\"DATASOURCENAME\\\",dsname),new Column(\\\"OWNERDECISION\\\",\\\"notreceived\\\"),new Column(\\\"ISUSERWAITING\\\",\\\"yes\\\"));\\n        while(rs.next())\\n        {\\n            dataSourceType\\u003drs.getString(\\\"DATASOURCETYPE\\\");\\n            userName\\u003d rs.getString(\\\"USERNAME\\\");\\n            \\n\\n            if(dataSourceType.charAt(1)!\\u003d(\\u00270\\u0027)\\u0026\\u0026 dataSourceType.equals(\\\"4\\\")\\u003d\\u003dfalse)\\n            {\\n                users.add(new User( userName, new DataSource(dsname,dataSourceType)));\\n\\n            }\\n        }\\n        return users;\\n    }\"}","441":"{\"expressionStart\":{\"DataSource.setPath()\":492,\"String:ACUSER_ACDATASOURCE\":269,\"DataSource.\\u003cinit\\u003e\":122,\"ConnectToDB.getUserForUserName()\":604,\"String:USERNAME\":561,\"ResultSet.getString()\":399,\"String\":180,\"DataSource.setIsCandidate()\":162,\"\\u003creturn\\u003e\":649,\"ResultSet.next()\":351,\"DataSource.setFileType()\":438,\"DataSource.setFileName()\":384,\"Column.\\u003cinit\\u003e\":291,\"null:null\":213,\"ConnectToDB.selectAllColumnsUnderOneCondition()\":230,\"String:DATASOURCENAME\":302,\"DataSource.setOwner()\":592},\"expressionEnd\":{\"DataSource.setPath()\":524,\"String:ACUSER_ACDATASOURCE\":290,\"DataSource.\\u003cinit\\u003e\":152,\"ConnectToDB.getUserForUserName()\":638,\"String:USERNAME\":571,\"ResultSet.getString()\":423,\"String\":185,\"DataSource.setIsCandidate()\":186,\"\\u003creturn\\u003e\":659,\"ResultSet.next()\":360,\"DataSource.setFileType()\":478,\"DataSource.setFileName()\":424,\"Column.\\u003cinit\\u003e\":334,\"null:null\":217,\"ConnectToDB.selectAllColumnsUnderOneCondition()\":335,\"String:DATASOURCENAME\":318,\"DataSource.setOwner()\":639},\"rawCode\":\"DataSource getDataSourceCandidateForDataSourceName(String dataSourceName)throws SQLException\\n    {\\n        DataSource ds\\u003d new DataSource(dataSourceName);\\n        ds.setIsCandidate(\\\"yes\\\");\\n        String ownerName\\u003dnull;\\n        rs\\u003dthis.selectAllColumnsUnderOneCondition(\\\"ACUSER_ACDATASOURCE\\\",new Column(\\\"DATASOURCENAME\\\",dataSourceName));\\n        while(rs.next())\\n        {\\n            ds.setFileName(rs.getString(\\\"FILENAME\\\"));\\n            ds.setFileType(rs.getString(\\\"FILETYPE\\\"));\\n            ds.setPath(rs.getString(\\\"PATH\\\"));\\n            ownerName\\u003drs.getString(\\\"USERNAME\\\");\\n        }\\n        ds.setOwner(this.getUserForUserName(ownerName));\\n        return ds;\\n    }\"}","442":"{\"expressionStart\":{\"ConnectToDB.selectOneColumnUnderTwoConditions()\":191,\"ResultSet.getString()\":321,\"Vector.add()\":310,\"Vector.\\u003cinit\\u003e\":165,\"\\u003creturn\\u003e\":371,\"ResultSet.next()\":277},\"expressionEnd\":{\"ConnectToDB.selectOneColumnUnderTwoConditions()\":261,\"ResultSet.getString()\":350,\"Vector.add()\":351,\"Vector.\\u003cinit\\u003e\":177,\"\\u003creturn\\u003e\":385,\"ResultSet.next()\":286},\"rawCode\":\"Vector getValuesVectorForOneColumnUnderTwoConditions(Column col,Column firstCond,Column secondCond,String tableName) throws SQLException\\n    {\\n        Vector values\\u003dnew Vector();\\n\\n        rs\\u003dselectOneColumnUnderTwoConditions(col, tableName,firstCond,secondCond);\\n        while(rs.next())\\n        {\\n            values.add(rs.getString(col.columnLabel));\\n        }\\n        return values;\\n    }\"}","443":"{\"expressionStart\":{\"ConnectToDB.selectOneColumn()\":137,\"ResultSet.getString()\":233,\"Vector.add()\":222,\"Vector.\\u003cinit\\u003e\":112,\"\\u003creturn\\u003e\":283,\"ResultSet.next()\":189},\"expressionEnd\":{\"ConnectToDB.selectOneColumn()\":173,\"ResultSet.getString()\":262,\"Vector.add()\":263,\"Vector.\\u003cinit\\u003e\":124,\"\\u003creturn\\u003e\":297,\"ResultSet.next()\":198},\"rawCode\":\"Vector getValuesVectorForOneColumn(Column col,String tableName) throws SQLException\\n    {\\n        Vector values\\u003dnew Vector();\\n        rs\\u003dthis.selectOneColumn(col, tableName);\\n        while(rs.next())\\n        {\\n            values.add(rs.getString(col.columnLabel));\\n        }\\n        return values;\\n    }\"}","444":"{\"expressionStart\":{\"boolean:true\":409,\"boolean:false\":159,\"ConnectToDB.selectOneColumnUnderTwoConditions()\":180,\"ResultSet.getString()\":354,\"UNKNOWN.equals()\":331,\"\\u003d\":398,\"\\u003creturn\\u003e\":432,\"\\u003cnullcheck\\u003e\":294,\"ResultSet.next()\":273},\"expressionEnd\":{\"boolean:true\":413,\"boolean:false\":164,\"ConnectToDB.selectOneColumnUnderTwoConditions()\":250,\"ResultSet.getString()\":383,\"UNKNOWN.equals()\":384,\"\\u003d\":413,\"\\u003creturn\\u003e\":450,\"\\u003cnullcheck\\u003e\":316,\"ResultSet.next()\":282},\"rawCode\":\"boolean valueExistsForThisColumnUnderTwoConditions(Column col,Column firstCond,Column secondCond, String tableName)throws SQLException\\n\\t{\\n\\t\\tboolean valueFound\\u003dfalse;\\n        rs \\u003d  selectOneColumnUnderTwoConditions(col, tableName,firstCond,secondCond);\\n\\n\\t\\t//Display\\n\\t\\twhile(rs.next())\\n\\t\\t{\\n\\t\\t\\tif(col.columnValue!\\u003d null)\\n\\t\\t\\t{\\n\\n\\t\\t\\t\\tif(col.columnValue.equals(rs.getString(col.columnLabel)))\\n\\t\\t\\t\\t{\\n\\n\\t\\t\\t\\t\\tvalueFound\\u003dtrue;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn valueFound;\\n\\n\\t}\"}","445":"{\"expressionStart\":{\"ParameterSet.valueForName()\":251,\"DataSource.\\u003cinit\\u003e\":420,\"boolean:false\":370,\"ResultSet.getString()\":435,\"\\u003cr\\u003e\":309,\"UNKNOWN.equals()\":309,\"Vector.add()\":408,\"String\":184,\"\\u003creturn\\u003e\":550,\"ResultSet.next()\":215,\"Column.\\u003cinit\\u003e\":154,\"ConnectToDB.selectOneColumn()\":138,\"String:DATASOURCENAME\":165,\"Vector.\\u003cinit\\u003e\":111,\"\\u003cnullcheck\\u003e\":251,\"String:0\":364},\"expressionEnd\":{\"ParameterSet.valueForName()\":298,\"DataSource.\\u003cinit\\u003e\":515,\"boolean:false\":375,\"ResultSet.getString()\":465,\"\\u003cr\\u003e\":375,\"UNKNOWN.equals()\":368,\"Vector.add()\":516,\"String\":198,\"\\u003creturn\\u003e\":564,\"ResultSet.next()\":224,\"Column.\\u003cinit\\u003e\":182,\"ConnectToDB.selectOneColumn()\":199,\"String:DATASOURCENAME\":181,\"Vector.\\u003cinit\\u003e\":123,\"\\u003cnullcheck\\u003e\":304,\"String:0\":367},\"rawCode\":\"Vector getChangedDataSourceListForParameterSet(ParameterSet pm)throws SQLException\\n    {\\n        Vector dsList\\u003dnew Vector();\\n        rs \\u003d selectOneColumn(new Column(\\\"DATASOURCENAME\\\"), \\\"ACDATASOURCE\\\");\\n        while(rs.next())\\n        {\\n            if(pm.valueForName(rs.getString(\\\"DATASOURCENAME\\\"))!\\u003dnull \\u0026\\u0026 (pm.valueForName(rs.getString(\\\"DATASOURCENAME\\\")).equals(\\\"0\\\")\\u003d\\u003dfalse))\\n            {\\n                dsList.add( new DataSource(rs.getString(\\\"DATASOURCENAME\\\"), pm.valueForName(rs.getString(\\\"DATASOURCENAME\\\"))));\\n            }\\n        }\\n        return dsList;\\n    }\"}","446":"{\"expressionStart\":{\"String:USERNAME\":965,\"ConnectToDB.getUserForUserName()\":1435,\"User.getEmail()\":2263,\"String:\\u0027\":382,\"\\u003cr\\u003e\":730,\"Emailer.sendEmail()\":2220,\"String\":1657,\"Connection.createStatement()\":413,\"SimpleDateFormat.\\u003cinit\\u003e\":176,\"ResultSet.next()\":582,\"String: \":1576,\"Column.\\u003cinit\\u003e\":1021,\"User.getLastName()\":1582,\"ConnectToDB.deleteUnderTwoConditions()\":1100,\"Statement.executeQuery()\":460,\"int:0\":784,\"String:ACUSER_ACDATASOURCE\":1281,\"StringBuilder.toString()\":730,\"User.getFirstName()\":1548,\"ResultSet.getString()\":755,\"StringBuilder.\\u003cinit\\u003e\":240,\"UNKNOWN.compareTo()\":730,\"SimpleDateFormat.format()\":259,\"String:, \":1608,\"Logger.warn()\":616,\"Emailer.\\u003cinit\\u003e\":1386,\"Date.\\u003cinit\\u003e\":94,\"String:DATASOURCENAME\":654},\"expressionEnd\":{\"String:USERNAME\":975,\"ConnectToDB.getUserForUserName()\":1463,\"User.getEmail()\":2284,\"String:\\u0027\":385,\"\\u003cr\\u003e\":785,\"Emailer.sendEmail()\":2349,\"String\":1672,\"Connection.createStatement()\":434,\"SimpleDateFormat.\\u003cinit\\u003e\":210,\"ResultSet.next()\":592,\"String: \":1579,\"Column.\\u003cinit\\u003e\":1082,\"User.getLastName()\":1606,\"ConnectToDB.deleteUnderTwoConditions()\":1162,\"Statement.executeQuery()\":485,\"int:0\":785,\"String:ACUSER_ACDATASOURCE\":1302,\"StringBuilder.toString()\":744,\"User.getFirstName()\":1573,\"ResultSet.getString()\":780,\"StringBuilder.\\u003cinit\\u003e\":297,\"UNKNOWN.compareTo()\":781,\"SimpleDateFormat.format()\":295,\"String:, \":1612,\"Logger.warn()\":712,\"Emailer.\\u003cinit\\u003e\":1399,\"Date.\\u003cinit\\u003e\":104,\"String:DATASOURCENAME\":670},\"rawCode\":\"public void checkVSDuration(String username) throws SQLException\\n    {\\n        Date dateNow \\u003d new Date(); // get the current date\\n        SimpleDateFormat dateformatYYYYMMDD \\u003d new SimpleDateFormat(\\\"yyyy-MM-dd\\\");\\n        StringBuilder now \\u003d new StringBuilder( dateformatYYYYMMDD.format( dateNow ) );\\n\\n        String query\\u003d\\\"SELECT * FROM ACACCESS_DURATION WHERE USERNAME \\u003d\\u0027\\\"+username+\\\"\\u0027\\\";\\n        Statement stmt2 \\u003d con.createStatement();\\n        ResultSet rs2 \\u003d stmt2.executeQuery(query);         // get the sources that are used by this user and belong to other users\\n\\n        while(rs2.next())\\n        {\\n            logger.warn(\\\"Source  \\\"+ rs2.getString(\\\"DATASOURCENAME\\\")+ \\\" has time \\\"+rs2.getString(\\\"DEADLINE\\\"));\\n            if (now.toString().compareTo(rs2.getString(\\\"DEADLINE\\\")) \\u003e 0) {   // if the current day is after the set deadline\\n                logger.warn(\\\"Will be deleted \\\"+ rs2.getString(\\\"DATASOURCENAME\\\"));\\n                Column column1 \\u003d new Column(\\\"USERNAME\\\", username);\\n                Column column2 \\u003d new Column(\\\"DATASOURCENAME\\\", rs2.getString(\\\"DATASOURCENAME\\\"));\\n                deleteUnderTwoConditions(column1, column2,\\\"ACACCESS_DURATION\\\");           // delete the entries from the respective arrays\\n                deleteUnderTwoConditions(column1, column2,\\\"ACUSER_ACDATASOURCE\\\");\\n                // Send email informing the user\\n                Emailer email \\u003d new Emailer();\\n                User userFromBD \\u003d getUserForUserName(username); // get the details for the Admin account\\n                String msgHead \\u003d \\\"Dear \\\"+ userFromBD.getFirstName() + \\\" \\\" + userFromBD.getLastName() +\\\", \\\"+\\\"\\\\n\\\"+\\\"\\\\n\\\";\\n                String msgTail \\u003d \\\"Best Regards,\\\"+\\\"\\\\n\\\"+\\\"GSN Team\\\";\\n                String msgBody \\u003d \\\"We would like to inform you that you no longer have access to the Virtual Sensor: \\\" + column2.columnValue+\\n                         \\\"\\\\n\\\\nYou can manage your Virtual Sensors by choosing the following options in GSN:\\\\n\\\"+\\n                        \\\"Access Rights Management -\\u003e User Account Management -\\u003e Update Access Rights Form\\\\n\\\"+\\n                        \\\"or via the URL:{sitename}/gsn/MyUserUpdateServlet\\\\n\\\\n\\\";\\n                // first change Emailer class params to use sendEmail\\n                email.sendEmail( \\\"GSN ACCESS \\\", \\\"GSN USER\\\",userFromBD.getEmail(),\\\"Update for a Virtual Sensor access\\\", msgHead, msgBody, msgTail);\\n            }\\n        }\\n    }\"}","447":"{\"expressionStart\":{\"Column.\\u003cinit\\u003e\":243,\"String:USERNAME\":254,\"String:ACUSER_ACGROUP\":226,\"String:GROUPNAME\":188,\"ResultSet.getString()\":384,\"Vector.add()\":358,\"Group.\\u003cinit\\u003e\":374,\"ConnectToDB.selectTwoColumnsUnderTwoConditions()\":137,\"String\":286,\"Vector.\\u003cinit\\u003e\":110,\"\\u003creturn\\u003e\":457,\"ResultSet.next()\":325},\"expressionEnd\":{\"Column.\\u003cinit\\u003e\":274,\"String:USERNAME\":264,\"String:ACUSER_ACGROUP\":242,\"String:GROUPNAME\":199,\"ResultSet.getString()\":409,\"Vector.add()\":437,\"Group.\\u003cinit\\u003e\":436,\"ConnectToDB.selectTwoColumnsUnderTwoConditions()\":309,\"String\":301,\"Vector.\\u003cinit\\u003e\":122,\"\\u003creturn\\u003e\":476,\"ResultSet.next()\":334},\"rawCode\":\"Vector getGroupsForWaitingUserFirstPart(String userName)throws SQLException\\n    {\\n        Vector groupVector\\u003d new Vector();\\n        rs \\u003d this.selectTwoColumnsUnderTwoConditions(new Column(\\\"GROUPNAME\\\"),new Column(\\\"GROUPTYPE\\\"), \\\"ACUSER_ACGROUP\\\",new Column(\\\"USERNAME\\\",userName),new Column(\\\"ISUSERWAITING\\\",\\\"yes\\\"));\\n        while(rs.next())\\n        {\\n            groupVector.add(new Group(rs.getString(\\\"GROUPNAME\\\"),rs.getString(\\\"GROUPTYPE\\\")));\\n        }\\n        return groupVector;\\n\\n    }\"}","448":"{\"expressionStart\":{\"User.setEmail()\":368,\"String:USERNAME\":228,\"User.setLastName()\":312,\"ResultSet.getString()\":272,\"String:ACUSER\":143,\"Vector.add()\":418,\"String\":285,\"\\u003creturn\\u003e\":459,\"User.setFirstName()\":254,\"ResultSet.next()\":168,\"User.\\u003cinit\\u003e\":206,\"Vector.\\u003cinit\\u003e\":94,\"ConnectToDB.selectAllColumns()\":121},\"expressionEnd\":{\"User.setEmail()\":404,\"String:USERNAME\":238,\"User.setLastName()\":354,\"ResultSet.getString()\":297,\"String:ACUSER\":151,\"Vector.add()\":439,\"String\":296,\"\\u003creturn\\u003e\":478,\"User.setFirstName()\":298,\"ResultSet.next()\":177,\"User.\\u003cinit\\u003e\":240,\"Vector.\\u003cinit\\u003e\":106,\"ConnectToDB.selectAllColumns()\":152},\"rawCode\":\"Vector getUsers()throws SQLException\\n    {\\n        User user\\u003dnull;\\n        Vector usersVector\\u003dnew Vector();\\n        rs \\u003d this.selectAllColumns(\\\"ACUSER\\\");\\n        while(rs.next())\\n        {\\n            user\\u003dnew User(rs.getString(\\\"USERNAME\\\"));\\n            user.setFirstName(rs.getString(\\\"FIRSTNAME\\\"));\\n            user.setLastName(rs.getString(\\\"LASTNAME\\\"));\\n            user.setEmail(rs.getString(\\\"EMAIL\\\"));\\n            usersVector.add(user);\\n        }\\n        return usersVector;\\n\\n    }\"}","449":"{\"expressionStart\":{\"String.getBytes()\":370,\"PreparedStatement.setString()\":169,\"Connection.prepareStatement()\":85,\"PreparedStatement.executeQuery()\":226,\"ByteArrayInputStream.\\u003cinit\\u003e\":345,\"null:null\":533,\"ResultSet.getString()\":286,\"String\":303,\"\\u003creturn\\u003e\":338,\"int:1\":184,\"ResultSet.next()\":254,\"PreparedStatement.close()\":400},\"expressionEnd\":{\"String.getBytes()\":389,\"PreparedStatement.setString()\":202,\"Connection.prepareStatement()\":164,\"PreparedStatement.executeQuery()\":245,\"ByteArrayInputStream.\\u003cinit\\u003e\":390,\"null:null\":537,\"ResultSet.getString()\":314,\"String\":313,\"\\u003creturn\\u003e\":391,\"int:1\":185,\"ResultSet.next()\":267,\"PreparedStatement.close()\":412},\"rawCode\":\"public InputStream load(String cacheEntryName) {\\n\\t\\ttry {\\n\\t\\t\\tPreparedStatement stmt \\u003d conn.prepareStatement(\\\"SELECT response FROM \\\" + TABLE_NAME + \\\" WHERE key \\u003d ?;\\\");\\n\\t\\t\\tstmt.setString(1, cacheEntryName);\\n\\t\\t\\tResultSet result \\u003d stmt.executeQuery();\\n\\t\\t\\tif (result.next()) {\\n\\t\\t\\t\\tString s \\u003d result.getString(\\\"response\\\");\\n\\t\\t\\t\\tstmt.close();\\n\\t\\t\\t\\treturn new ByteArrayInputStream(s.getBytes(\\\"UTF-8\\\"));\\n\\t\\t\\t}\\n\\t\\t\\tstmt.close();\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\t// ignore\\n\\t\\t} catch (UnsupportedEncodingException e) {\\n\\t\\t\\t// won\\u0027t happen\\n\\t\\t}\\n\\t\\treturn null;\\n\\t}\"}","450":"{\"expressionStart\":{\"null:null\":166,\"Connection.getMetaData()\":113,\"DatabaseCache.createTable()\":200,\"UNKNOWN.getTables()\":113,\"ResultSet.next()\":180},\"expressionEnd\":{\"null:null\":170,\"Connection.getMetaData()\":131,\"DatabaseCache.createTable()\":213,\"UNKNOWN.getTables()\":171,\"ResultSet.next()\":193},\"rawCode\":\"public DatabaseCache(Connection connection) throws SQLException {\\n\\t\\tthis.conn \\u003d connection;\\n\\t\\tResultSet tables \\u003d conn.getMetaData().getTables(null, null, TABLE_NAME, null);\\n\\t\\tif (!tables.next()) {\\n\\t\\t\\tcreateTable();\\n\\t\\t}\\n\\t}\"}","451":"{\"expressionStart\":{\"DBConnection.getConnection()\":213,\"String:name\":835,\"JSONArray.toString()\":1295,\"JSONArray.\\u003cinit\\u003e\":163,\"ResultSet.getString()\":843,\"JSONArray.add()\":941,\"PreparedStatement.setInt()\":611,\"String\":888,\"\\u003creturn\\u003e\":1288,\"String:id\":783,\"ResultSet.next()\":699,\"JSONObject.put()\":882,\"GroupByTeamBean.getSelectedTeam()\":624,\"Connection.prepareStatement()\":254,\"ResultSet.close()\":1147,\"Connection.close()\":1089,\"PreparedStatement.executeQuery()\":661,\"int:1\":621,\"UNKNOWN.println()\":1213,\"PreparedStatement.close()\":1119,\"SQLException.printStackTrace()\":1015,\"JSONObject.\\u003cinit\\u003e\":743,\"ResultSet.getInt()\":904},\"expressionEnd\":{\"DBConnection.getConnection()\":235,\"String:name\":841,\"JSONArray.toString()\":1310,\"JSONArray.\\u003cinit\\u003e\":178,\"ResultSet.getString()\":863,\"JSONArray.add()\":952,\"PreparedStatement.setInt()\":642,\"String\":902,\"\\u003creturn\\u003e\":1311,\"String:id\":787,\"ResultSet.next()\":708,\"JSONObject.put()\":923,\"GroupByTeamBean.getSelectedTeam()\":641,\"Connection.prepareStatement()\":597,\"ResultSet.close()\":1157,\"Connection.close()\":1101,\"PreparedStatement.executeQuery()\":678,\"int:1\":622,\"UNKNOWN.println()\":1254,\"PreparedStatement.close()\":1129,\"SQLException.printStackTrace()\":1034,\"JSONObject.\\u003cinit\\u003e\":759,\"ResultSet.getInt()\":922},\"rawCode\":\"@SuppressWarnings(\\\"unchecked\\\")\\n    public String getEventsLineChart() {\\n        PreparedStatement st \\u003d null;\\n        ResultSet rs \\u003d null;\\n        JSONArray json \\u003d new JSONArray();\\n        try {\\n            conn \\u003d dbconn.getConnection();\\n            st \\u003d conn.prepareStatement(\\\"SELECT m.event_id, e.name, sum(m.auton_top)*6 + sum(m.auton_middle)*4  + sum(m.auton_bottom)*2 + sum(m.teleop_top)*3 + sum(m.teleop_middle)*2 + sum(m.teleop_bottom) + sum(m.teleop_pyramid)*5 + sum(m.pyramid_level)*10 as total FROM match_record_2013 m, events e WHERE team_id \\u003d ? and m.event_id \\u003d e.id GROUP BY event_id\\\");\\n            st.setInt(1, getSelectedTeam());\\n            rs \\u003d st.executeQuery();\\n            while (rs.next()) {\\n                JSONObject o \\u003d new JSONObject();\\n                o.put(\\\"id\\\", rs.getInt(\\\"event_id\\\"));\\n                o.put(\\\"name\\\", rs.getString(\\\"name\\\"));\\n                o.put(\\\"total_points\\\", rs.getInt(\\\"total\\\"));\\n                json.add(o);\\n            }\\n        } catch (SQLException e) {\\n            e.printStackTrace();\\n        } finally {\\n            try{\\n                conn.close();\\n                st.close();\\n                rs.close();\\n            }catch (SQLException e) {\\n                System.out.println(\\\"Error closing query\\\");\\n            }\\n        }\\n        return json.toString();\\n    }\"}","452":"{\"expressionStart\":{\"DBConnection.getConnection()\":216,\"String:name\":1057,\"JSONArray.toString()\":2657,\"JSONArray.\\u003cinit\\u003e\":166,\"ResultSet.getString()\":1065,\"JSONArray.add()\":2303,\"PreparedStatement.setInt()\":1840,\"String\":1273,\"\\u003creturn\\u003e\":2650,\"String:id\":1005,\"ResultSet.next()\":1925,\"JSONObject.put()\":1215,\"GroupByTeamBean.getSelectedTeam()\":1853,\"Connection.prepareStatement()\":257,\"Connection.close()\":2451,\"PreparedStatement.executeQuery()\":1890,\"ResultSet.close()\":2509,\"int:1\":843,\"UNKNOWN.println()\":2575,\"PreparedStatement.close()\":2481,\"ResultSet.getInt()\":1289,\"SQLException.printStackTrace()\":2377,\"JSONObject.\\u003cinit\\u003e\":1969},\"expressionEnd\":{\"DBConnection.getConnection()\":238,\"String:name\":1063,\"JSONArray.toString()\":2672,\"JSONArray.\\u003cinit\\u003e\":181,\"ResultSet.getString()\":1085,\"JSONArray.add()\":2314,\"PreparedStatement.setInt()\":1871,\"String\":1287,\"\\u003creturn\\u003e\":2673,\"String:id\":1009,\"ResultSet.next()\":1934,\"JSONObject.put()\":1249,\"GroupByTeamBean.getSelectedTeam()\":1870,\"Connection.prepareStatement()\":819,\"Connection.close()\":2463,\"PreparedStatement.executeQuery()\":1907,\"ResultSet.close()\":2519,\"int:1\":844,\"UNKNOWN.println()\":2616,\"PreparedStatement.close()\":2491,\"ResultSet.getInt()\":1307,\"SQLException.printStackTrace()\":2396,\"JSONObject.\\u003cinit\\u003e\":1985},\"rawCode\":\"@SuppressWarnings(\\\"unchecked\\\")\\n    public String getEventAveragesTable() {\\n        PreparedStatement st \\u003d null;\\n        ResultSet rs \\u003d null;\\n        JSONArray json \\u003d new JSONArray();\\n        try {\\n            conn \\u003d dbconn.getConnection();\\n            st \\u003d conn.prepareStatement(\\\"SELECT m.event_id, e.name, avg(m.auton_top)*6 + avg(m.auton_middle)*4  + avg(m.auton_bottom)*2 as auton, avg(m.teleop_top)*3 + avg(m.teleop_middle)*2 + avg(m.teleop_bottom) + avg(m.teleop_pyramid)*5 as teleop, avg(m.pyramid_level)*10 as climb, avg(m.auton_top)*6 + avg(m.auton_middle)*4  + avg(m.auton_bottom)*2 + avg(m.teleop_top)*3 + avg(m.teleop_middle)*2 + avg(m.teleop_bottom) + avg(m.teleop_pyramid)*5 + avg(m.pyramid_level)*10 as total FROM match_record_2013 m, events e WHERE m.team_id \\u003d ? and m.event_id \\u003d e.id GROUP BY event_id\\\");\\n            st.setInt(1, getSelectedTeam());\\n            rs \\u003d st.executeQuery();\\n            while (rs.next()) {\\n                JSONObject o \\u003d new JSONObject();\\n                o.put(\\\"id\\\", rs.getInt(\\\"event_id\\\"));\\n                o.put(\\\"name\\\", rs.getString(\\\"name\\\"));\\n                o.put(\\\"autonomous\\\", rs.getInt(\\\"auton\\\"));\\n                o.put(\\\"teleop\\\", rs.getInt(\\\"teleop\\\"));\\n                o.put(\\\"climb\\\", rs.getInt(\\\"climb\\\"));\\n                o.put(\\\"total_points\\\", rs.getInt(\\\"total\\\"));\\n                json.add(o);\\n            }\\n            st \\u003d conn.prepareStatement(\\\"SELECT avg(auton_top)*6 + avg(auton_middle)*4  + avg(auton_bottom)*2 as auton, avg(teleop_top)*3 + avg(teleop_middle)*2 + avg(teleop_bottom) + avg(teleop_pyramid)*5 as teleop, avg(pyramid_level)*10 as climb, avg(auton_top)*6 + avg(auton_middle)*4  + avg(auton_bottom)*2 + avg(teleop_top)*3 + avg(teleop_middle)*2 + avg(teleop_bottom) + avg(teleop_pyramid)*5 + avg(pyramid_level)*10 as total FROM match_record_2013 where team_id \\u003d ?\\\");\\n            st.setInt(1, getSelectedTeam());\\n            rs \\u003d st.executeQuery();\\n            if (rs.next()) {\\n                JSONObject o \\u003d new JSONObject();\\n                o.put(\\\"id\\\", \\\"total\\\");\\n                o.put(\\\"name\\\", \\\"total\\\");\\n                o.put(\\\"autonomous\\\", rs.getInt(\\\"auton\\\"));\\n                o.put(\\\"teleop\\\", rs.getInt(\\\"teleop\\\"));\\n                o.put(\\\"climb\\\", rs.getInt(\\\"climb\\\"));\\n                o.put(\\\"total_points\\\", rs.getInt(\\\"total\\\"));\\n                json.add(o);\\n            }\\n        } catch (SQLException e) {\\n            e.printStackTrace();\\n        } finally {\\n            try{\\n                conn.close();\\n                st.close();\\n                rs.close();\\n            }catch (SQLException e) {\\n                System.out.println(\\\"Error closing query\\\");\\n            }\\n        }\\n        return json.toString();\\n    }\"}","453":"{\"expressionStart\":{\"DBConnection.getConnection()\":212,\"String:name\":1086,\"JSONArray.toString()\":1750,\"JSONArray.\\u003cinit\\u003e\":162,\"ResultSet.getString()\":1073,\"JSONArray.add()\":1396,\"PreparedStatement.setInt()\":783,\"String\":1343,\"String:id\":955,\"\\u003creturn\\u003e\":1743,\"ResultSet.next()\":871,\"JSONObject.put()\":1285,\"Connection.prepareStatement()\":253,\"GroupByTeamBean.getSelectedTeam()\":796,\"Connection.close()\":1544,\"ResultSet.close()\":1602,\"PreparedStatement.executeQuery()\":833,\"int:1\":793,\"UNKNOWN.println()\":1668,\"PreparedStatement.close()\":1574,\"ResultSet.getInt()\":1300,\"SQLException.printStackTrace()\":1470,\"JSONObject.\\u003cinit\\u003e\":915},\"expressionEnd\":{\"DBConnection.getConnection()\":234,\"String:name\":1092,\"JSONArray.toString()\":1765,\"JSONArray.\\u003cinit\\u003e\":177,\"ResultSet.getString()\":1093,\"JSONArray.add()\":1407,\"PreparedStatement.setInt()\":814,\"String\":1357,\"String:id\":959,\"\\u003creturn\\u003e\":1766,\"ResultSet.next()\":880,\"JSONObject.put()\":1319,\"Connection.prepareStatement()\":769,\"GroupByTeamBean.getSelectedTeam()\":813,\"Connection.close()\":1556,\"ResultSet.close()\":1612,\"PreparedStatement.executeQuery()\":850,\"int:1\":794,\"UNKNOWN.println()\":1709,\"PreparedStatement.close()\":1584,\"ResultSet.getInt()\":1318,\"SQLException.printStackTrace()\":1489,\"JSONObject.\\u003cinit\\u003e\":931},\"rawCode\":\"@SuppressWarnings(\\\"unchecked\\\")\\n    public String getTeamMatchTable() {\\n        PreparedStatement st \\u003d null;\\n        ResultSet rs \\u003d null;\\n        JSONArray json \\u003d new JSONArray();\\n        try {\\n            conn \\u003d dbconn.getConnection();\\n            st \\u003d conn.prepareStatement(\\\"SELECT m.id, m.event_id, e.name, m.match_number, (m.auton_top)*6 + (m.auton_middle)*4  + (m.auton_bottom)*2 as auton, (m.teleop_top)*3 + (m.teleop_middle)*2 + (m.teleop_bottom) + (m.teleop_pyramid)*5 as teleop, (m.pyramid_level)*10 as climb, (m.auton_top)*6 + (m.auton_middle)*4  + (m.auton_bottom)*2 + (m.teleop_top)*3 + (m.teleop_middle)*2 + (m.teleop_bottom) + (m.teleop_pyramid)*5 + (m.pyramid_level)*10 as total FROM match_record_2013 m, events e WHERE team_id \\u003d ? AND m.event_id \\u003d e.id\\\");\\n            st.setInt(1, getSelectedTeam());\\n            rs \\u003d st.executeQuery();\\n            while (rs.next()) {\\n                JSONObject o \\u003d new JSONObject();\\n                o.put(\\\"id\\\", rs.getInt(\\\"id\\\"));\\n                o.put(\\\"event_id\\\", rs.getInt(\\\"event_id\\\"));\\n                o.put(\\\"event_name\\\", rs.getString(\\\"name\\\"));\\n                o.put(\\\"match_id\\\", rs.getInt(\\\"match_number\\\"));\\n                o.put(\\\"autonomous\\\", rs.getInt(\\\"auton\\\"));\\n                o.put(\\\"teleop\\\", rs.getInt(\\\"teleop\\\"));\\n                o.put(\\\"climb\\\", rs.getInt(\\\"climb\\\"));\\n                o.put(\\\"total_points\\\", rs.getInt(\\\"total\\\"));\\n                json.add(o);\\n            }\\n        } catch (SQLException e) {\\n            e.printStackTrace();\\n        } finally {\\n            try{\\n                conn.close();\\n                st.close();\\n                rs.close();\\n            }catch (SQLException e) {\\n                System.out.println(\\\"Error closing query\\\");\\n            }\\n        }\\n        return json.toString();\\n    }\"}","454":"{\"expressionStart\":{\"String:name\":204,\"ConfigurationTemplate.\\u003cinit\\u003e\":108,\"ResultSet.getString()\":239,\"String\":259,\"String:id\":151,\"\\u003creturn\\u003e\":101,\"ResultSet.getInt()\":134},\"expressionEnd\":{\"String:name\":210,\"ConfigurationTemplate.\\u003cinit\\u003e\":274,\"ResultSet.getString()\":273,\"String\":272,\"String:id\":155,\"\\u003creturn\\u003e\":275,\"ResultSet.getInt()\":156},\"rawCode\":\"public ConfigurationTemplate mapRow(ResultSet resultSet, int rowNum) throws SQLException {    \\n\\t\\t    return new ConfigurationTemplate(resultSet.getInt(\\\"id\\\"),\\n\\t\\t                        resultSet.getString(\\\"name\\\"),\\n\\t\\t                        resultSet.getString(\\\"description\\\"));\\n\\t\\t}\"}","455":"{\"expressionStart\":{\"Topic.\\u003cinit\\u003e\":494,\"ResultSet.getString()\":423,\"String\":243,\"\\u003creturn\\u003e\":547,\"ResultSet.next()\":396,\"ArrayList.\\u003cinit\\u003e\":364,\"List.add()\":485,\"DB.getConnection()\":192,\"Connection.prepareStatement()\":221,\"PreparedStatement.executeQuery()\":334,\"Connection.close()\":531,\"int:2\":478,\"int:1\":440},\"expressionEnd\":{\"Topic.\\u003cinit\\u003e\":522,\"ResultSet.getString()\":442,\"String\":319,\"\\u003creturn\\u003e\":559,\"ResultSet.next()\":409,\"ArrayList.\\u003cinit\\u003e\":386,\"List.add()\":523,\"DB.getConnection()\":210,\"Connection.prepareStatement()\":320,\"PreparedStatement.executeQuery()\":353,\"Connection.close()\":543,\"int:2\":479,\"int:1\":441},\"rawCode\":\"public static List\\u003cTopic\\u003e getAllForMentor() throws SQLException {\\n\\t\\tResultSet result;\\n\\t\\tConnection conn;\\n\\t\\tPreparedStatement stmt;\\n\\t\\t\\n\\t\\tString name, description;\\n\\t\\tList\\u003cTopic\\u003e list;\\n\\n\\t\\tconn \\u003d DB.getConnection();\\n\\t\\tstmt \\u003d conn.prepareStatement(\\\"select topic, description from interest where as_mentor \\u003d 1 group by topic\\\"); \\n\\t\\tresult \\u003d stmt.executeQuery();\\n\\t\\tlist \\u003d new ArrayList\\u003cTopic\\u003e();\\n\\t\\twhile(result.next()) {\\n\\t\\t\\tname \\u003d result.getString(1);\\n\\t\\t\\tdescription \\u003d result.getString(2);\\n\\t\\t\\tlist.add(new Topic(name, description));\\n\\t\\t}\\n\\t\\tconn.close();\\n\\t\\treturn list;\\n\\t}\"}","456":"{\"expressionStart\":{\"Topic.\\u003cinit\\u003e\":528,\"ResultSet.getString()\":494,\"\\u003cr\\u003e\":424,\"String\":246,\"\\u003creturn\\u003e\":586,\"ResultSet.next()\":400,\"List.add()\":519,\"ArrayList.\\u003cinit\\u003e\":368,\"DB.getConnection()\":195,\"List.size()\":424,\"Connection.prepareStatement()\":224,\"PreparedStatement.executeQuery()\":338,\"Connection.close()\":570,\"int:10\":438,\"int:2\":511,\"int:1\":472},\"expressionEnd\":{\"Topic.\\u003cinit\\u003e\":556,\"ResultSet.getString()\":513,\"\\u003cr\\u003e\":440,\"String\":323,\"\\u003creturn\\u003e\":598,\"ResultSet.next()\":413,\"List.add()\":557,\"ArrayList.\\u003cinit\\u003e\":390,\"DB.getConnection()\":213,\"List.size()\":435,\"Connection.prepareStatement()\":324,\"PreparedStatement.executeQuery()\":357,\"Connection.close()\":582,\"int:10\":440,\"int:2\":512,\"int:1\":473},\"rawCode\":\"public static List\\u003cTopic\\u003e getAllForStudent10() throws SQLException {\\n\\t\\tResultSet result;\\n\\t\\tConnection conn;\\n\\t\\tPreparedStatement stmt;\\n\\t\\t\\n\\t\\tString name, description;\\n\\t\\tList\\u003cTopic\\u003e list;\\n\\n\\t\\tconn \\u003d DB.getConnection();\\n\\t\\tstmt \\u003d conn.prepareStatement(\\\"select topic, description from interest where as_student \\u003d 1 group by topic\\\"); \\n\\t\\tresult \\u003d stmt.executeQuery();\\n\\t\\tlist \\u003d new ArrayList\\u003cTopic\\u003e();\\n\\t\\twhile(result.next()) {\\n\\t\\t\\tif (list.size() \\u003c 10) {\\n\\t\\t\\t\\tname \\u003d result.getString(1);\\n\\t\\t\\t\\tdescription \\u003d result.getString(2);\\n\\t\\t\\t\\tlist.add(new Topic(name, description));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tconn.close();\\n\\t\\treturn list;\\n\\t}\"}","457":"{\"expressionStart\":{\"Topic.\\u003cinit\\u003e\":599,\"ResultSet.getString()\":566,\"String\":299,\"\\u003creturn\\u003e\":652,\"ResultSet.next()\":501,\"ArrayList.\\u003cinit\\u003e\":469,\"List.add()\":590,\"DB.getConnection()\":248,\"PreparedStatement.setLong()\":394,\"Connection.prepareStatement()\":277,\"PreparedStatement.executeQuery()\":439,\"Connection.close()\":636,\"int:2\":583,\"Authenticator.getCurrentUser()\":158,\"int:1\":407},\"expressionEnd\":{\"Topic.\\u003cinit\\u003e\":627,\"ResultSet.getString()\":585,\"String\":389,\"\\u003creturn\\u003e\":664,\"ResultSet.next()\":514,\"ArrayList.\\u003cinit\\u003e\":491,\"List.add()\":628,\"DB.getConnection()\":266,\"PreparedStatement.setLong()\":425,\"Connection.prepareStatement()\":390,\"PreparedStatement.executeQuery()\":458,\"Connection.close()\":648,\"int:2\":584,\"Authenticator.getCurrentUser()\":188,\"int:1\":408},\"rawCode\":\"public static List\\u003cTopic\\u003e getAllForUserStudent() throws SQLException {\\n\\t\\tResultSet result;\\n\\t\\tConnection conn;\\n\\t\\tPreparedStatement stmt;\\n\\n\\t\\tUser currentUser \\u003d Authenticator.getCurrentUser();\\n\\t\\tString name, description;\\n\\t\\tList\\u003cTopic\\u003e list;\\n\\n\\t\\tconn \\u003d DB.getConnection();\\n\\t\\tstmt \\u003d conn.prepareStatement(\\\"select topic, description from interest where user \\u003d ? and as_student \\u003d 1 group by topic\\\");\\n\\t\\tstmt.setLong(1, currentUser.id); \\n\\t\\tresult \\u003d stmt.executeQuery();\\n\\t\\tlist \\u003d new ArrayList\\u003cTopic\\u003e();\\n\\t\\twhile(result.next()) {\\n\\t\\t\\tname \\u003d result.getString(1);\\n\\t\\t\\tdescription \\u003d result.getString(2);\\n\\t\\t\\tlist.add(new Topic(name, description));\\n\\t\\t}\\n\\t\\tconn.close();\\n\\t\\treturn list;\\n\\t}\"}","458":"{\"expressionStart\":{\"Topic.\\u003cinit\\u003e\":443,\"ResultSet.getString()\":410,\"String\":232,\"\\u003creturn\\u003e\":496,\"ResultSet.next()\":345,\"List.add()\":434,\"ArrayList.\\u003cinit\\u003e\":313,\"DB.getConnection()\":181,\"Connection.prepareStatement()\":210,\"Connection.close()\":480,\"PreparedStatement.executeQuery()\":283,\"int:2\":427,\"int:1\":389},\"expressionEnd\":{\"Topic.\\u003cinit\\u003e\":471,\"ResultSet.getString()\":429,\"String\":269,\"\\u003creturn\\u003e\":508,\"ResultSet.next()\":358,\"List.add()\":472,\"ArrayList.\\u003cinit\\u003e\":335,\"DB.getConnection()\":199,\"Connection.prepareStatement()\":270,\"Connection.close()\":492,\"PreparedStatement.executeQuery()\":302,\"int:2\":428,\"int:1\":390},\"rawCode\":\"public static List\\u003cTopic\\u003e getAll() throws SQLException {\\n\\t\\tResultSet result;\\n\\t\\tConnection conn;\\n\\t\\tPreparedStatement stmt;\\n\\n\\t\\tString name, description;\\n\\t\\tList\\u003cTopic\\u003e list;\\n\\n\\t\\tconn \\u003d DB.getConnection();\\n\\t\\tstmt \\u003d conn.prepareStatement(\\\"select name, description from topic\\\");\\n\\t\\tresult \\u003d stmt.executeQuery();\\n\\t\\tlist \\u003d new ArrayList\\u003cTopic\\u003e();\\n\\t\\twhile(result.next()) {\\n\\t\\t\\tname \\u003d result.getString(1);\\n\\t\\t\\tdescription \\u003d result.getString(2);\\n\\t\\t\\tlist.add(new Topic(name, description));\\n\\t\\t}\\n\\t\\tconn.close();\\n\\t\\treturn list;\\n\\t}\"}","459":"{\"expressionStart\":{\"Topic.\\u003cinit\\u003e\":496,\"ResultSet.getString()\":425,\"String\":244,\"\\u003creturn\\u003e\":549,\"ResultSet.next()\":398,\"ArrayList.\\u003cinit\\u003e\":366,\"List.add()\":487,\"DB.getConnection()\":193,\"Connection.prepareStatement()\":222,\"Connection.close()\":533,\"PreparedStatement.executeQuery()\":336,\"int:2\":480,\"int:1\":442},\"expressionEnd\":{\"Topic.\\u003cinit\\u003e\":524,\"ResultSet.getString()\":444,\"String\":321,\"\\u003creturn\\u003e\":561,\"ResultSet.next()\":411,\"ArrayList.\\u003cinit\\u003e\":388,\"List.add()\":525,\"DB.getConnection()\":211,\"Connection.prepareStatement()\":322,\"Connection.close()\":545,\"PreparedStatement.executeQuery()\":355,\"int:2\":481,\"int:1\":443},\"rawCode\":\"public static List\\u003cTopic\\u003e getAllForStudent() throws SQLException {\\n\\t\\tResultSet result;\\n\\t\\tConnection conn;\\n\\t\\tPreparedStatement stmt;\\n\\t\\t\\n\\t\\tString name, description;\\n\\t\\tList\\u003cTopic\\u003e list;\\n\\n\\t\\tconn \\u003d DB.getConnection();\\n\\t\\tstmt \\u003d conn.prepareStatement(\\\"select topic, description from interest where as_student \\u003d 1 group by topic\\\"); \\n\\t\\tresult \\u003d stmt.executeQuery();\\n\\t\\tlist \\u003d new ArrayList\\u003cTopic\\u003e();\\n\\t\\twhile(result.next()) {\\n\\t\\t\\tname \\u003d result.getString(1);\\n\\t\\t\\tdescription \\u003d result.getString(2);\\n\\t\\t\\tlist.add(new Topic(name, description));\\n\\t\\t}\\n\\t\\tconn.close();\\n\\t\\treturn list;\\n\\t}\"}","460":"{\"expressionStart\":{\"Topic.\\u003cinit\\u003e\":597,\"ResultSet.getString()\":564,\"String\":298,\"\\u003creturn\\u003e\":650,\"ResultSet.next()\":499,\"List.add()\":588,\"ArrayList.\\u003cinit\\u003e\":467,\"DB.getConnection()\":247,\"PreparedStatement.setLong()\":392,\"Connection.prepareStatement()\":276,\"Connection.close()\":634,\"PreparedStatement.executeQuery()\":437,\"Authenticator.getCurrentUser()\":157,\"int:2\":581,\"int:1\":405},\"expressionEnd\":{\"Topic.\\u003cinit\\u003e\":625,\"ResultSet.getString()\":583,\"String\":387,\"\\u003creturn\\u003e\":662,\"ResultSet.next()\":512,\"List.add()\":626,\"ArrayList.\\u003cinit\\u003e\":489,\"DB.getConnection()\":265,\"PreparedStatement.setLong()\":423,\"Connection.prepareStatement()\":388,\"Connection.close()\":646,\"PreparedStatement.executeQuery()\":456,\"Authenticator.getCurrentUser()\":187,\"int:2\":582,\"int:1\":406},\"rawCode\":\"public static List\\u003cTopic\\u003e getAllForUserMentor() throws SQLException {\\n\\t\\tResultSet result;\\n\\t\\tConnection conn;\\n\\t\\tPreparedStatement stmt;\\n\\n\\t\\tUser currentUser \\u003d Authenticator.getCurrentUser();\\n\\t\\tString name, description;\\n\\t\\tList\\u003cTopic\\u003e list;\\n\\n\\t\\tconn \\u003d DB.getConnection();\\n\\t\\tstmt \\u003d conn.prepareStatement(\\\"select topic, description from interest where user \\u003d ? and as_mentor \\u003d 1 group by topic\\\");\\n\\t\\tstmt.setLong(1, currentUser.id); \\n\\t\\tresult \\u003d stmt.executeQuery();\\n\\t\\tlist \\u003d new ArrayList\\u003cTopic\\u003e();\\n\\t\\twhile(result.next()) {\\n\\t\\t\\tname \\u003d result.getString(1);\\n\\t\\t\\tdescription \\u003d result.getString(2);\\n\\t\\t\\tlist.add(new Topic(name, description));\\n\\t\\t}\\n\\t\\tconn.close();\\n\\t\\treturn list;\\n\\t}\"}","461":"{\"expressionStart\":{\"Topic.\\u003cinit\\u003e\":526,\"ResultSet.getString()\":453,\"\\u003cr\\u003e\":422,\"String\":245,\"\\u003creturn\\u003e\":584,\"ResultSet.next()\":398,\"List.add()\":517,\"ArrayList.\\u003cinit\\u003e\":366,\"DB.getConnection()\":194,\"List.size()\":422,\"Connection.prepareStatement()\":223,\"PreparedStatement.executeQuery()\":336,\"Connection.close()\":568,\"int:10\":436,\"int:2\":509,\"int:1\":470},\"expressionEnd\":{\"Topic.\\u003cinit\\u003e\":554,\"ResultSet.getString()\":472,\"\\u003cr\\u003e\":438,\"String\":321,\"\\u003creturn\\u003e\":596,\"ResultSet.next()\":411,\"List.add()\":555,\"ArrayList.\\u003cinit\\u003e\":388,\"DB.getConnection()\":212,\"List.size()\":433,\"Connection.prepareStatement()\":322,\"PreparedStatement.executeQuery()\":355,\"Connection.close()\":580,\"int:10\":438,\"int:2\":510,\"int:1\":471},\"rawCode\":\"public static List\\u003cTopic\\u003e getAllForMentor10() throws SQLException {\\n\\t\\tResultSet result;\\n\\t\\tConnection conn;\\n\\t\\tPreparedStatement stmt;\\n\\t\\t\\n\\t\\tString name, description;\\n\\t\\tList\\u003cTopic\\u003e list;\\n\\n\\t\\tconn \\u003d DB.getConnection();\\n\\t\\tstmt \\u003d conn.prepareStatement(\\\"select topic, description from interest where as_mentor \\u003d 1 group by topic\\\"); \\n\\t\\tresult \\u003d stmt.executeQuery();\\n\\t\\tlist \\u003d new ArrayList\\u003cTopic\\u003e();\\n\\t\\twhile(result.next()) {\\n\\t\\t\\tif (list.size() \\u003c 10) {\\n\\t\\t\\t\\tname \\u003d result.getString(1);\\n\\t\\t\\t\\tdescription \\u003d result.getString(2);\\n\\t\\t\\t\\tlist.add(new Topic(name, description));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tconn.close();\\n\\t\\treturn list;\\n\\t}\"}","462":"{\"expressionStart\":{\"PreparedStatement.setString()\":364,\"ResultSet.getString()\":546,\"ResultSet.getLong()\":509,\"String\":280,\"\\u003creturn\\u003e\":744,\"ResultSet.next()\":465,\"ArrayList.\\u003cinit\\u003e\":430,\"DB.getConnection()\":229,\"Interest.\\u003cinit\\u003e\":652,\"int:4\":636,\"int:3\":599,\"ArrayList.add()\":643,\"ResultSet.getBoolean()\":618,\"User.getByUserId()\":492,\"Connection.prepareStatement()\":258,\"PreparedStatement.executeQuery()\":400,\"Connection.close()\":727,\"int:2\":563,\"int:1\":379},\"expressionEnd\":{\"PreparedStatement.setString()\":387,\"ResultSet.getString()\":565,\"ResultSet.getLong()\":526,\"String\":359,\"\\u003creturn\\u003e\":756,\"ResultSet.next()\":478,\"ArrayList.\\u003cinit\\u003e\":455,\"DB.getConnection()\":247,\"Interest.\\u003cinit\\u003e\":718,\"int:4\":637,\"int:3\":600,\"ArrayList.add()\":719,\"ResultSet.getBoolean()\":638,\"User.getByUserId()\":527,\"Connection.prepareStatement()\":360,\"PreparedStatement.executeQuery()\":419,\"Connection.close()\":739,\"int:2\":564,\"int:1\":380},\"rawCode\":\"public List\\u003cInterest\\u003e getInterests() throws SQLException {\\n\\t\\tResultSet result;\\n\\t\\tConnection conn;\\n\\t\\tPreparedStatement stmt;\\n\\n\\t\\tString description;\\n\\t\\tboolean asMentor, asStudent;\\n\\t\\tUser user;\\n\\t\\tArrayList\\u003cInterest\\u003e list;\\n\\n\\t\\tconn \\u003d DB.getConnection();\\n\\t\\tstmt \\u003d conn.prepareStatement(\\\"select user, description, as_mentor, as_student from interest where topic \\u003d ?\\\");\\n\\t\\tstmt.setString(1, name);\\n\\t\\tresult \\u003d stmt.executeQuery();\\n\\t\\tlist \\u003d new ArrayList\\u003cInterest\\u003e();\\n\\t\\twhile(result.next()) {\\n\\t\\t\\tuser \\u003d User.getByUserId(result.getLong(1));\\n\\t\\t\\tdescription \\u003d result.getString(2);\\n\\t\\t\\tasMentor \\u003d result.getBoolean(3);\\n\\t\\t\\tasStudent \\u003d result.getBoolean(4);\\n\\t\\t\\tlist.add(new Interest(user.id, this.name, description, asMentor, asStudent));\\n\\t\\t}\\n\\t\\tconn.close();\\n\\n\\t\\treturn list;\\n\\t}\"}","463":"{\"expressionStart\":{\"PreparedStatement.setString()\":362,\"boolean:false\":441,\"ResultSet.getString()\":503,\"\\u003cr\\u003e\":424,\"String\":243,\"\\u003creturn\\u003e\":614,\"ResultSet.next()\":424,\"Interest.\\u003cinit\\u003e\":621,\"DB.getConnection()\":192,\"PreparedStatement.setLong()\":334,\"int:3\":591,\"ResultSet.getBoolean()\":573,\"Connection.prepareStatement()\":221,\"PreparedStatement.executeQuery()\":398,\"Connection.close()\":453,\"null:null\":477,\"int:2\":377,\"int:1\":347},\"expressionEnd\":{\"PreparedStatement.setString()\":385,\"boolean:false\":446,\"ResultSet.getString()\":522,\"\\u003cr\\u003e\":446,\"String\":329,\"\\u003creturn\\u003e\":688,\"ResultSet.next()\":437,\"Interest.\\u003cinit\\u003e\":687,\"DB.getConnection()\":210,\"PreparedStatement.setLong()\":358,\"int:3\":592,\"ResultSet.getBoolean()\":593,\"Connection.prepareStatement()\":330,\"PreparedStatement.executeQuery()\":417,\"Connection.close()\":465,\"null:null\":481,\"int:2\":378,\"int:1\":348},\"rawCode\":\"public Interest getInterestOf(User user) throws SQLException {\\n\\t\\tResultSet result;\\n\\t\\tConnection conn;\\n\\t\\tPreparedStatement stmt;\\n\\n\\t\\tString description;\\n\\t\\tboolean asMentor, asStudent;\\n\\n\\t\\tconn \\u003d DB.getConnection();\\n\\t\\tstmt \\u003d conn.prepareStatement(\\\"select description, as_mentor, as_student from interest where user \\u003d ? and topic \\u003d ?\\\");\\n\\t\\tstmt.setLong(1, user.id);\\n\\t\\tstmt.setString(2, name);\\n\\t\\tresult \\u003d stmt.executeQuery();\\n\\t\\tif(result.next() \\u003d\\u003d false) {\\n\\t\\t\\tconn.close();\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t\\tdescription \\u003d result.getString(1);\\n\\t\\tasMentor \\u003d result.getBoolean(2);\\n\\t\\tasStudent \\u003d result.getBoolean(3);\\n\\t\\tconn.close();\\n\\n\\t\\treturn new Interest(user.id, this.name, description, asMentor, asStudent);\\n\\t}\"}","464":"{\"expressionStart\":{\"SqlReaderFinishedException.\\u003cinit\\u003e\":1195,\"PagingPosition.getLast()\":1158,\"\\u003cthrow\\u003e\":214,\"ResultSet.getString()\":125,\"\\u003cr\\u003e\":1150,\"BaseDbDoubleStorage.matchXml()\":365,\"\\u003creturn\\u003e\":838,\"null:null\":845,\"\\u003ca\\u003e\":1026,\"BaseDbDoubleStorage.readResource()\":778,\"Filter.accept()\":978,\"int:1\":142,\"PagingPosition.getFirst()\":1071,\"\\u003cnullcheck\\u003e\":1044,\"int:0\":281},\"expressionEnd\":{\"SqlReaderFinishedException.\\u003cinit\\u003e\":1227,\"PagingPosition.getLast()\":1175,\"\\u003cthrow\\u003e\":253,\"ResultSet.getString()\":144,\"\\u003cr\\u003e\":1175,\"BaseDbDoubleStorage.matchXml()\":391,\"\\u003creturn\\u003e\":850,\"null:null\":849,\"\\u003ca\\u003e\":1033,\"BaseDbDoubleStorage.readResource()\":811,\"Filter.accept()\":1000,\"int:1\":143,\"PagingPosition.getFirst()\":1089,\"\\u003cnullcheck\\u003e\":1059,\"int:0\":282},\"rawCode\":\"public Object readSqlResultRecord(ResultSet result)\\n\\t\\t\\tthrows SqlReaderFinishedException\\n\\t\\t{\\n\\t\\t\\ttry\\n\\t\\t\\t{\\n\\t\\t\\t\\tString theXml \\u003d result.getString(1);\\n\\t\\t\\t\\tif ( m_pager !\\u003d null \\u0026\\u0026 count \\u003e m_pager.getLast() ) \\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tthrow new SqlReaderFinishedException();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tint iTest \\u003d 0;  // Don\\u0027t know if we have a match\\n\\t\\t\\t\\tif ( m_search !\\u003d null )\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tiTest \\u003d matchXml(theXml, m_search);\\n\\t\\t\\t\\t}\\n                \\n\\t\\t\\t\\t// If it is clearly rejected from pre-parse match\\n\\t\\t\\t\\tif ( iTest \\u003d\\u003d -1 ) return null;\\n                \\n\\t\\t\\t\\t// If it is a match and we are just counting - no parsing\\n\\t\\t\\t\\t// needed\\n\\t\\t\\t\\tif ( iTest \\u003d\\u003d 1 \\u0026\\u0026 m_doCount ) return intValue;\\n                \\n\\t\\t\\t\\t// If it is known to be accepted (1) or unsure (0), \\n\\t\\t\\t\\t// parse the Xml and continue\\n\\t\\t\\t\\tEntity entry \\u003d readResource(m_container, theXml);\\n\\t\\t\\t\\tif ( entry \\u003d\\u003d null ) return null;\\n                    \\n\\t\\t\\t\\t// If there is no indication from matchXml\\n\\t\\t\\t\\tif ( iTest \\u003d\\u003d 0 \\u0026\\u0026 m_search !\\u003d null)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tif ( ! m_filter.accept(entry) ) return null;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tcount++;\\n\\t\\t\\t\\tif ( m_pager !\\u003d null \\u0026\\u0026 count \\u003c m_pager.getFirst() ) return null;\\n                \\n\\t\\t\\t\\tif ( m_pager !\\u003d null \\u0026\\u0026 count \\u003e m_pager.getLast() )\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tthrow new SqlReaderFinishedException();\\n\\t\\t\\t\\t}\\n                \\n\\t\\t\\t\\tif ( m_doCount ) return intValue;\\n\\t\\t\\t\\treturn entry;\\n\\t\\t\\t}\\n\\t\\t\\tcatch (SQLException ignore)\\n\\t\\t\\t{\\n\\t\\t\\t\\treturn null;\\n\\t\\t\\t}\\n\\t\\t}\"}","465":"{\"expressionStart\":{\"String.length()\":346,\"String:%\":544,\"ResultSet.getString()\":782,\"\\u003creturn\\u003e\":905,\"String.substring()\":820,\"SqlReader.\\u003cinit\\u003e\":589,\"null:null\":912,\"SqlService.dbRead()\":563,\"Object[].arrayset()\":525,\"int:1\":519,\"DoubleStorageSql.getSelect9Sql()\":409,\"int:0\":532,\"{Object}\":508},\"expressionEnd\":{\"String.length()\":359,\"String:%\":547,\"ResultSet.getString()\":801,\"\\u003creturn\\u003e\":917,\"String.substring()\":838,\"SqlReader.\\u003cinit\\u003e\":932,\"null:null\":916,\"SqlService.dbRead()\":933,\"Object[].arrayset()\":534,\"int:1\":520,\"DoubleStorageSql.getSelect9Sql()\":486,\"int:0\":533,\"{Object}\":521},\"rawCode\":\"/**\\n\\t * Access a list of container ids match (start with) the root.\\n\\t * \\n\\t * @param context\\n\\t *        The id root to match.\\n\\t * @return A List (String) of container id which match the root.\\n\\t */\\n\\tpublic List getContainerIdsMatching(String root)\\n\\t{\\n\\t\\t// the id of each container will be the part that follows the root reference\\n\\t\\tfinal int pos \\u003d root.length();\\n\\n\\t\\t// read all users from the db\\n\\t\\tString sql \\u003d doubleStorageSql.getSelect9Sql(m_containerTableName, m_containerTableIdField);\\n\\t\\tObject fields[] \\u003d new Object[1];\\n\\t\\tfields[0] \\u003d root + \\\"%\\\";\\n\\n\\t\\tList all \\u003d m_sql.dbRead(sql, fields, new SqlReader()\\n\\t\\t{\\n\\t\\t\\tpublic Object readSqlResultRecord(ResultSet result)\\n\\t\\t\\t{\\n\\t\\t\\t\\ttry\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t// get the reference form and pull off the id (what follows after the root)\\n\\t\\t\\t\\t\\tString ref \\u003d result.getString(1);\\n\\t\\t\\t\\t\\tString id \\u003d ref.substring(pos);\\n\\t\\t\\t\\t\\treturn id;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tcatch (SQLException ignore)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\treturn null;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t});\\n\\n\\t\\treturn all;\\n\\t}\"}","466":"{\"expressionStart\":{\"DbConnectionManager.closeConnection()\":1207,\"UNKNOWN.getDomain()\":453,\"ResultSet.getString()\":519,\"Log.error()\":1134,\"ResultSet.getLong()\":1059,\"ResultSet.next()\":344,\"UNKNOWN.getNode()\":423,\"DbConnectionManager.getConnection()\":164,\"int:6\":681,\"int:5\":646,\"JID.\\u003cinit\\u003e\":415,\"int:4\":608,\"PreparedStatement.setLong()\":269,\"int:3\":570,\"Connection.prepareStatement()\":222,\"PreparedStatement.executeQuery()\":309,\"int:7\":1070,\"Workgroup.getJID()\":423,\"int:2\":532,\"\\u003d\":972,\"int:1\":283,\"SQLException.getMessage()\":1144,\"ResultSet.getInt()\":598},\"expressionEnd\":{\"DbConnectionManager.closeConnection()\":1258,\"UNKNOWN.getDomain()\":483,\"ResultSet.getString()\":534,\"Log.error()\":1162,\"ResultSet.getLong()\":1072,\"ResultSet.next()\":353,\"UNKNOWN.getNode()\":451,\"DbConnectionManager.getConnection()\":199,\"int:6\":682,\"int:5\":647,\"JID.\\u003cinit\\u003e\":490,\"int:4\":609,\"PreparedStatement.setLong()\":289,\"int:3\":571,\"Connection.prepareStatement()\":254,\"PreparedStatement.executeQuery()\":329,\"int:7\":1071,\"Workgroup.getJID()\":441,\"int:2\":533,\"\\u003d\":1013,\"int:1\":284,\"SQLException.getMessage()\":1158,\"ResultSet.getInt()\":610},\"rawCode\":\"private void loadQueue() {\\r\\n        Connection con \\u003d null;\\r\\n        PreparedStatement pstmt \\u003d null;\\r\\n        ResultSet rs \\u003d null;\\r\\n        try {\\r\\n            con \\u003d DbConnectionManager.getConnection();\\r\\n            pstmt \\u003d con.prepareStatement(LOAD_QUEUE);\\r\\n            pstmt.setLong(1, id);\\r\\n            rs \\u003d pstmt.executeQuery();\\r\\n            rs.next();\\r\\n            name \\u003d rs.getString(1);\\r\\n            address \\u003d new JID(workgroup.getJID().getNode(), workgroup.getJID().getDomain(), name);\\r\\n            description \\u003d rs.getString(2);\\r\\n            priority \\u003d rs.getInt(3);\\r\\n            maxChats \\u003d rs.getInt(4);\\r\\n            minChats \\u003d rs.getInt(5);\\r\\n            switch (rs.getInt(6)) {\\r\\n                case 1:\\r\\n                    overflowType \\u003d OverflowType.OVERFLOW_RANDOM;\\r\\n                    break;\\r\\n                case 2:\\r\\n                    overflowType \\u003d OverflowType.OVERFLOW_BACKUP;\\r\\n                    break;\\r\\n                default:\\r\\n                    overflowType \\u003d OverflowType.OVERFLOW_NONE;\\r\\n            }\\r\\n            backupQueueID \\u003d rs.getLong(7);\\r\\n\\r\\n        }\\r\\n        catch (SQLException e) {\\r\\n            Log.error(e.getMessage(), e);\\r\\n        }\\r\\n        finally {\\r\\n            DbConnectionManager.closeConnection(rs, pstmt, con);\\r\\n        }\\r\\n    }\"}","467":"{\"expressionStart\":{\"DbConnectionManager.closeConnection()\":563,\"PreparedStatement.setLong()\":277,\"Connection.prepareStatement()\":223,\"PreparedStatement.executeQuery()\":317,\"Set.add()\":391,\"ResultSet.getString()\":402,\"Log.error()\":490,\"int:1\":291,\"Exception.getMessage()\":500,\"ResultSet.next()\":361,\"DbConnectionManager.getConnection()\":165},\"expressionEnd\":{\"DbConnectionManager.closeConnection()\":614,\"PreparedStatement.setLong()\":297,\"Connection.prepareStatement()\":262,\"PreparedStatement.executeQuery()\":337,\"Set.add()\":418,\"ResultSet.getString()\":417,\"Log.error()\":518,\"int:1\":292,\"Exception.getMessage()\":514,\"ResultSet.next()\":370,\"DbConnectionManager.getConnection()\":200},\"rawCode\":\"private void loadGroups() {\\r\\n        Connection con \\u003d null;\\r\\n        PreparedStatement pstmt \\u003d null;\\r\\n        ResultSet rs \\u003d null;\\r\\n        try {\\r\\n            con \\u003d DbConnectionManager.getConnection();\\r\\n            pstmt \\u003d con.prepareStatement(LOAD_QUEUE_GROUPS);\\r\\n            pstmt.setLong(1, id);\\r\\n            rs \\u003d pstmt.executeQuery();\\r\\n\\r\\n            while (rs.next()) {\\r\\n                groups.add(rs.getString(1));\\r\\n            }\\r\\n        }\\r\\n        catch (Exception e) {\\r\\n            Log.error(e.getMessage(), e);\\r\\n        }\\r\\n        finally {\\r\\n            DbConnectionManager.closeConnection(rs, pstmt, con);\\r\\n        }\\r\\n    }\"}","468":"{\"expressionStart\":{\"long:1L\":283,\"Clob.getSubString()\":265,\"Clob.length()\":293,\"int.\\u003ccast\\u003e\":287,\"ResultSetMetaData.getColumnType()\":150,\"ResultSet.getClob()\":215,\"null:null\":135,\"ResultSet.getString()\":380,\"ResultSet.getMetaData()\":103,\"\\u003creturn\\u003e\":413,\"int:1\":173,\"\\u003cnullcheck\\u003e\":237},\"expressionEnd\":{\"long:1L\":285,\"Clob.getSubString()\":307,\"Clob.length()\":306,\"int.\\u003ccast\\u003e\":306,\"ResultSetMetaData.getColumnType()\":175,\"ResultSet.getClob()\":228,\"null:null\":139,\"ResultSet.getString()\":395,\"ResultSet.getMetaData()\":119,\"\\u003creturn\\u003e\":423,\"int:1\":174,\"\\u003cnullcheck\\u003e\":249},\"rawCode\":\"public Object getSource(String id, ResultSet rs) throws SQLException\\n\\t{\\n\\t\\tResultSetMetaData metadata \\u003d rs.getMetaData();\\n\\t\\tString rv \\u003d null;\\n\\t\\tswitch(metadata.getColumnType(1))\\n\\t\\t{\\n\\t\\tcase Types.CLOB:\\n\\t\\t\\tClob clob \\u003d rs.getClob(1); \\n\\t\\t\\tif(clob !\\u003d null)\\n\\t\\t\\t{\\n\\t\\t\\t\\trv \\u003d clob.getSubString(1L, (int) clob.length());\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t\\tcase Types.LONGVARCHAR:\\n\\t\\tcase Types.VARCHAR:\\n\\t\\t\\trv \\u003d rs.getString(1);\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\treturn rv;\\n\\t}\"}","469":"{\"expressionStart\":{\"ResultSet.getString()\":89,\"\\u003creturn\\u003e\":82,\"int:1\":102},\"expressionEnd\":{\"ResultSet.getString()\":104,\"\\u003creturn\\u003e\":105,\"int:1\":103},\"rawCode\":\"public Object getValidateSource(String id, ResultSet rs) throws SQLException\\n\\t{\\n\\t\\treturn rs.getString(1);\\n\\t}\"}","470":"{\"expressionStart\":{\"dataBaseManager.openConnectionPool()\":102,\"String\":296,\"String:VendorError: \":1227,\"ResultSet.next()\":583,\"Tablon.setId()\":663,\"SQLException.getErrorCode()\":1245,\"Tablon.setVisibility()\":733,\"dataBaseManager.getMessagesFromTablon()\":900,\"Tablon.setAllTargetUser()\":938,\"int:1\":397,\"dataBaseManager.getTablonModerateUsers()\":1018,\"ResultSet.getInt()\":754,\"PreparedStatement.setString()\":377,\"Tablon.setName()\":691,\"Tablon.setAllMsg()\":883,\"Tablon.setSpaceId()\":784,\"String:name\":719,\"Tablon.setAllUsers()\":999,\"ResultSet.getString()\":706,\"Tablon.\\u003cinit\\u003e\":609,\"String:id\":652,\"\\u003creturn\\u003e\":1280,\"dataBaseManager.getTablonTargetUsers()\":962,\"String:SQLState: \":1171,\"SQLException.getSQLState()\":1186,\"String:SQLException: \":1112,\"Connection.prepareStatement()\":274,\"PreparedStatement.executeQuery()\":550,\"null:null\":65,\"UNKNOWN.println()\":1152,\"SQLException.getMessage()\":1131},\"expressionEnd\":{\"dataBaseManager.openConnectionPool()\":122,\"String\":332,\"String:VendorError: \":1242,\"ResultSet.next()\":592,\"Tablon.setId()\":685,\"SQLException.getErrorCode()\":1262,\"Tablon.setVisibility()\":778,\"dataBaseManager.getMessagesFromTablon()\":931,\"Tablon.setAllTargetUser()\":993,\"int:1\":398,\"dataBaseManager.getTablonModerateUsers()\":1050,\"ResultSet.getInt()\":777,\"PreparedStatement.setString()\":411,\"Tablon.setName()\":727,\"Tablon.setAllMsg()\":932,\"Tablon.setSpaceId()\":824,\"String:name\":725,\"Tablon.setAllUsers()\":1051,\"ResultSet.getString()\":726,\"Tablon.\\u003cinit\\u003e\":621,\"String:id\":656,\"\\u003creturn\\u003e\":1294,\"dataBaseManager.getTablonTargetUsers()\":992,\"String:SQLState: \":1183,\"SQLException.getSQLState()\":1202,\"String:SQLException: \":1128,\"Connection.prepareStatement()\":333,\"PreparedStatement.executeQuery()\":574,\"null:null\":69,\"UNKNOWN.println()\":1203,\"SQLException.getMessage()\":1146},\"rawCode\":\"public Tablon getTablon(String descriptor){\\n\\t\\t\\n\\t\\tTablon tablon \\u003d null;\\n\\t\\t\\n\\t\\ttry{\\n\\t\\t\\tConnection conn \\u003d openConnectionPool();\\n\\t\\t\\t/***********************************************PARAMETRIZACIÓN*************************************************/\\n\\t\\t\\tPreparedStatement statement \\u003d conn.prepareStatement(\\\"SELECT * FROM Tablon WHERE space\\u003d?\\\"); //AND surname1 \\u003d ? AND surname2 \\u003d ?\\\");\\n\\t\\t\\tstatement.setString(1, descriptor);\\n\\t\\t\\t/****************************************************************************************************************/\\n\\n\\t\\t\\tResultSet rs \\u003d statement.executeQuery();\\n\\t\\t\\tif (rs.next()) {\\n\\t\\t\\t\\ttablon \\u003d new Tablon();\\n\\t\\t\\t\\tint idTablon \\u003d rs.getInt(\\\"id\\\");\\n\\t\\t\\t\\ttablon.setId(idTablon);\\n\\t\\t\\t\\ttablon.setName(rs.getString(\\\"name\\\"));\\n\\t\\t\\t\\ttablon.setVisibility(rs.getInt(\\\"visibility\\\"));\\n\\t\\t\\t\\ttablon.setSpaceId(rs.getString(\\\"space\\\"));\\n\\t\\t\\t\\t//tablon.setPermission(rs.getInt(\\\"permission\\\"));\\n\\t\\t\\t\\ttablon.setAllMsg(getMessagesFromTablon(idTablon));\\n\\t\\t\\t\\ttablon.setAllTargetUser(getTablonTargetUsers(idTablon));\\n\\t\\t\\t\\ttablon.setAllUsers(getTablonModerateUsers(idTablon));\\n\\t\\t\\t}\\n\\n\\t\\t\\t\\n\\t\\t}catch(SQLException ex){\\n\\t\\t\\tSystem.out.println(\\\"SQLException: \\\" + ex.getMessage());\\n\\t\\t\\tSystem.out.println(\\\"SQLState: \\\" + ex.getSQLState());\\n\\t\\t\\tSystem.out.println(\\\"VendorError: \\\" + ex.getErrorCode());\\n\\t\\t}\\n\\t\\t\\n\\t\\t\\n\\t\\t\\n\\t\\treturn tablon;\\n\\t\\t\\n\\t}\"}","471":"{\"expressionStart\":{\"dataBaseManager.openConnectionPool()\":138,\"PreparedStatement.setInt()\":472,\"String\":826,\"String:VendorError: \":1135,\"ResultSet.next()\":675,\"SQLException.getErrorCode()\":1153,\"Vector.\\u003cinit\\u003e\":89,\"int:1\":489,\"ResultSet.getInt()\":730,\"dataBaseManager.closeConnectionPool()\":934,\"User.setName()\":757,\"Vector.addElement()\":899,\"ResultSet.getString()\":813,\"\\u003creturn\\u003e\":1183,\"String:SQLState: \":1078,\"User.setSurName2()\":849,\"User.setSurName1()\":799,\"SQLException.getSQLState()\":1093,\"String:SQLException: \":1018,\"Connection.prepareStatement()\":310,\"User.setId()\":722,\"PreparedStatement.executeQuery()\":640,\"User.\\u003cinit\\u003e\":706,\"UNKNOWN.println()\":999,\"SQLException.getMessage()\":1037},\"expressionEnd\":{\"dataBaseManager.openConnectionPool()\":158,\"PreparedStatement.setInt()\":501,\"String\":841,\"String:VendorError: \":1150,\"ResultSet.next()\":684,\"SQLException.getErrorCode()\":1170,\"Vector.\\u003cinit\\u003e\":107,\"int:1\":490,\"ResultSet.getInt()\":750,\"dataBaseManager.closeConnectionPool()\":959,\"User.setName()\":793,\"Vector.addElement()\":923,\"ResultSet.getString()\":842,\"\\u003creturn\\u003e\":1201,\"String:SQLState: \":1090,\"User.setSurName2()\":893,\"User.setSurName1()\":843,\"SQLException.getSQLState()\":1109,\"String:SQLException: \":1034,\"Connection.prepareStatement()\":466,\"User.setId()\":751,\"PreparedStatement.executeQuery()\":664,\"User.\\u003cinit\\u003e\":716,\"UNKNOWN.println()\":1053,\"SQLException.getMessage()\":1052},\"rawCode\":\"public Vector\\u003cUser\\u003e getTablonModerateUsers(int idTablon){\\n\\t\\t\\n\\t\\tVector\\u003cUser\\u003e moderators \\u003d new Vector\\u003cUser\\u003e();\\n\\n\\t\\ttry{\\n\\t\\t\\tConnection conn \\u003d openConnectionPool();\\n\\t\\t\\t/***********************************************PARAMETRIZACIÓN*************************************************/\\n\\t\\t\\tPreparedStatement statement \\u003d conn.prepareStatement(\\\"SELECT * FROM TablonUserModerates INNER JOIN User ON TablonUserModerates.user_id \\u003d User.id WHERE TablonUserModerates.tablon_id \\u003d ?;\\\"); \\n\\t\\t\\tstatement.setInt(1, idTablon);\\n\\t\\t\\t/****************************************************************************************************************/\\n\\n\\t\\t\\tResultSet rs \\u003d statement.executeQuery();\\n\\t\\t\\twhile(rs.next()) {\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tUser u \\u003d new User();\\n\\t\\t\\t\\tu.setId(rs.getInt(\\\"User.id\\\"));\\n\\t\\t\\t\\tu.setName(rs.getString(\\\"User.name\\\"));\\n\\t\\t\\t\\tu.setSurName1(rs.getString(\\\"User.surname1\\\"));\\n\\t\\t\\t\\tu.setSurName2(rs.getString(\\\"User.surname2\\\"));\\n\\t\\t\\t\\tmoderators.addElement(u);\\n\\t\\t\\t}\\n\\n\\t\\t\\tcloseConnectionPool(conn);\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t}catch(SQLException ex){\\n\\t\\t\\t\\tSystem.out.println(\\\"SQLException: \\\" + ex.getMessage());\\n\\t\\t\\t\\tSystem.out.println(\\\"SQLState: \\\" + ex.getSQLState());\\n\\t\\t\\t\\tSystem.out.println(\\\"VendorError: \\\" + ex.getErrorCode());\\n\\t\\t\\t}\\n\\t\\t\\n\\t\\treturn moderators;\\n\\t\\t\\n\\t\\t\\n\\t}\"}","472":"{\"expressionStart\":{\"dataBaseManager.closeConnectionPool()\":652,\"dataBaseManager.openConnectionPool()\":143,\"Tablon.setName()\":564,\"Vector.addElement()\":614,\"ResultSet.getString()\":579,\"PreparedStatement.setInt()\":368,\"Tablon.\\u003cinit\\u003e\":484,\"String:VendorError: \":853,\"String\":525,\"\\u003creturn\\u003e\":901,\"ResultSet.next()\":451,\"Tablon.setId()\":502,\"String:SQLState: \":796,\"SQLException.getErrorCode()\":871,\"SQLException.getSQLState()\":811,\"String:SQLException: \":736,\"Connection.prepareStatement()\":202,\"PreparedStatement.executeQuery()\":416,\"Vector.\\u003cinit\\u003e\":89,\"int:1\":385,\"UNKNOWN.println()\":834,\"ResultSet.getInt()\":515,\"SQLException.getMessage()\":755},\"expressionEnd\":{\"dataBaseManager.closeConnectionPool()\":677,\"dataBaseManager.openConnectionPool()\":163,\"Tablon.setName()\":607,\"Vector.addElement()\":641,\"ResultSet.getString()\":606,\"PreparedStatement.setInt()\":395,\"Tablon.\\u003cinit\\u003e\":496,\"String:VendorError: \":868,\"String\":556,\"\\u003creturn\\u003e\":917,\"ResultSet.next()\":460,\"Tablon.setId()\":558,\"String:SQLState: \":808,\"SQLException.getErrorCode()\":888,\"SQLException.getSQLState()\":827,\"String:SQLException: \":752,\"Connection.prepareStatement()\":362,\"PreparedStatement.executeQuery()\":440,\"Vector.\\u003cinit\\u003e\":109,\"int:1\":386,\"UNKNOWN.println()\":889,\"ResultSet.getInt()\":557,\"SQLException.getMessage()\":770},\"rawCode\":\"public Vector\\u003cTablon\\u003e getIdTablonUserModerates(int idUser){\\n\\n\\t\\tVector\\u003cTablon\\u003e tablones \\u003d new Vector\\u003cTablon\\u003e();\\n\\t\\t\\n\\n\\t\\ttry{\\n\\t\\t\\tConnection conn \\u003d openConnectionPool();\\n\\t\\t\\t\\n\\t\\t\\tPreparedStatement statement \\u003d conn.prepareStatement(\\\"select * from TablonUserModerates INNER JOIN Tablon ON TablonUserModerates.tablon_id \\u003d Tablon.id WHERE TablonUserModerates.user_id \\u003d ?;\\\"); \\n\\t\\t\\tstatement.setInt(1, idUser);\\n\\n\\t\\t\\tResultSet rs \\u003d statement.executeQuery();\\n\\t\\t\\twhile(rs.next()) {\\n\\t\\t\\t\\tTablon tablon \\u003d new Tablon();\\n\\t\\t\\t\\ttablon.setId(rs.getInt(\\\"TablonUserModerates.tablon_id\\\"));\\n\\t\\t\\t\\ttablon.setName(rs.getString(\\\"Tablon.name\\\"));\\n\\n\\t\\t\\t\\ttablones.addElement(tablon);\\n\\t\\t\\t}\\n\\n\\t\\t\\tcloseConnectionPool(conn);\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t}catch(SQLException ex){\\n\\t\\t\\t\\tSystem.out.println(\\\"SQLException: \\\" + ex.getMessage());\\n\\t\\t\\t\\tSystem.out.println(\\\"SQLState: \\\" + ex.getSQLState());\\n\\t\\t\\t\\tSystem.out.println(\\\"VendorError: \\\" + ex.getErrorCode());\\n\\t\\t\\t}\\n\\t\\t\\n\\t\\treturn tablones;\\n\\n\\n\\n\\t}\"}","473":"{\"expressionStart\":{\"dataBaseManager.openConnectionPool()\":141,\"Message.setId()\":955,\"PreparedStatement.setInt()\":679,\"String\":1058,\"String:VendorError: \":1570,\"ResultSet.next()\":882,\"Message.setMsg()\":993,\"SQLException.getErrorCode()\":1588,\"Message.setCreator()\":1320,\"Vector.\\u003cinit\\u003e\":87,\"int:1\":696,\"ResultSet.getInt()\":1048,\"User.setName()\":1178,\"dataBaseManager.closeConnectionPool()\":1369,\"Vector.addElement()\":1341,\"ResultSet.getString()\":1188,\"\\u003creturn\\u003e\":1618,\"String:SQLState: \":1513,\"User.setSurName2()\":1270,\"User.setSurName1()\":1220,\"SQLException.getSQLState()\":1528,\"Connection.prepareStatement()\":481,\"Message.setVisibility()\":1032,\"String:SQLException: \":1453,\"User.setId()\":1135,\"PreparedStatement.executeQuery()\":847,\"Message.\\u003cinit\\u003e\":911,\"User.\\u003cinit\\u003e\":939,\"UNKNOWN.println()\":1494,\"SQLException.getMessage()\":1472},\"expressionEnd\":{\"dataBaseManager.openConnectionPool()\":161,\"Message.setId()\":987,\"PreparedStatement.setInt()\":708,\"String\":1070,\"String:VendorError: \":1585,\"ResultSet.next()\":891,\"Message.setMsg()\":1026,\"SQLException.getErrorCode()\":1605,\"Message.setCreator()\":1335,\"Vector.\\u003cinit\\u003e\":108,\"int:1\":697,\"ResultSet.getInt()\":1071,\"User.setName()\":1214,\"dataBaseManager.closeConnectionPool()\":1394,\"Vector.addElement()\":1358,\"ResultSet.getString()\":1213,\"\\u003creturn\\u003e\":1629,\"String:SQLState: \":1525,\"User.setSurName2()\":1314,\"User.setSurName1()\":1264,\"SQLException.getSQLState()\":1544,\"Connection.prepareStatement()\":673,\"Message.setVisibility()\":1072,\"String:SQLException: \":1469,\"User.setId()\":1172,\"PreparedStatement.executeQuery()\":871,\"Message.\\u003cinit\\u003e\":924,\"User.\\u003cinit\\u003e\":949,\"UNKNOWN.println()\":1545,\"SQLException.getMessage()\":1487},\"rawCode\":\"public Vector\\u003cMessage\\u003e getMessagesFromTablon(int idTablon){\\n\\t\\t\\n\\t\\tVector\\u003cMessage\\u003e msg \\u003d new Vector\\u003cMessage\\u003e();\\n\\t\\t\\n\\t\\ttry{\\n\\t\\t\\tConnection conn \\u003d openConnectionPool();\\n\\t\\t\\t/*select * from TablonMessage INNER JOIN Message ON TablonMessage.message_id \\u003d Message.id INNER JOIN User ON Message.user_id \\u003d User.id WHERE TablonMessage.id \\u003d ?;*/\\n\\t\\t\\t/***********************************************PARAMETRIZACIÓN*************************************************/\\n\\t\\t\\tPreparedStatement statement \\u003d conn.prepareStatement(\\\"SELECT * FROM TablonMessage INNER JOIN Message ON TablonMessage.message_id \\u003d Message.id INNER JOIN User ON Message.user_id \\u003d User.id WHERE TablonMessage.tablon_id \\u003d ?;\\\"); \\n\\t\\t\\tstatement.setInt(1, idTablon);\\n\\t\\t\\t/****************************************************************************************************************/\\n\\n\\t\\t\\tResultSet rs \\u003d statement.executeQuery();\\n\\t\\t\\twhile(rs.next()) {\\n\\t\\t\\t\\tMessage m \\u003d new Message();\\n\\t\\t\\t\\tUser u \\u003d new User();\\n\\t\\t\\t\\tm.setId(rs.getInt(\\\"message_id\\\"));\\n\\t\\t\\t\\tm.setMsg(rs.getString(\\\"message\\\"));\\n\\t\\t\\t\\tm.setVisibility(rs.getInt(\\\"visibility\\\"));\\n\\t\\t\\t\\t//m.setDate(rs.getTimestamp(\\\"dateTime\\\"));//peta aquí\\n\\t\\t\\t\\tu.setId(rs.getInt(\\\"Message.user_id\\\"));\\n\\t\\t\\t\\tu.setName(rs.getString(\\\"User.name\\\"));\\n\\t\\t\\t\\tu.setSurName1(rs.getString(\\\"User.surname1\\\"));\\n\\t\\t\\t\\tu.setSurName2(rs.getString(\\\"User.surname2\\\"));\\n\\t\\t\\t\\tm.setCreator(u);\\n\\t\\t\\t\\tmsg.addElement(m);\\n\\t\\t\\t}\\n\\n\\t\\t\\tcloseConnectionPool(conn);\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t}catch(SQLException ex){\\n\\t\\t\\t\\tSystem.out.println(\\\"SQLException: \\\" + ex.getMessage());\\n\\t\\t\\t\\tSystem.out.println(\\\"SQLState: \\\" + ex.getSQLState());\\n\\t\\t\\t\\tSystem.out.println(\\\"VendorError: \\\" + ex.getErrorCode());\\n\\t\\t\\t}\\n\\t\\t\\n\\t\\treturn msg;\\n\\t\\t\\n\\t}\"}","474":"{\"expressionStart\":{\"dataBaseManager.openConnectionPool()\":98,\"User.getName()\":393,\"String\":853,\"String:VendorError: \":1240,\"ResultSet.next()\":678,\"SQLException.getErrorCode()\":1258,\"int:1\":390,\"ResultSet.getInt()\":745,\"dataBaseManager.closeConnectionPool()\":1049,\"User.setName()\":767,\"PreparedStatement.setString()\":370,\"String:name\":801,\"ResultSet.getString()\":840,\"\\u003creturn\\u003e\":1290,\"String:id\":755,\"String:SQLState: \":1184,\"User.setSurName2()\":871,\"User.setSurName1()\":815,\"SQLException.getSQLState()\":1199,\"String:SQLException: \":1125,\"Connection.prepareStatement()\":270,\"User.setId()\":726,\"PreparedStatement.executeQuery()\":645,\"User.\\u003cinit\\u003e\":710,\"UNKNOWN.println()\":1106,\"SQLException.getMessage()\":1144},\"expressionEnd\":{\"dataBaseManager.openConnectionPool()\":118,\"User.getName()\":407,\"String\":863,\"String:VendorError: \":1255,\"ResultSet.next()\":687,\"SQLException.getErrorCode()\":1275,\"int:1\":391,\"ResultSet.getInt()\":760,\"dataBaseManager.closeConnectionPool()\":1074,\"User.setName()\":809,\"PreparedStatement.setString()\":408,\"String:name\":807,\"ResultSet.getString()\":864,\"\\u003creturn\\u003e\":1310,\"String:id\":759,\"String:SQLState: \":1196,\"User.setSurName2()\":921,\"User.setSurName1()\":865,\"SQLException.getSQLState()\":1215,\"String:SQLException: \":1141,\"Connection.prepareStatement()\":326,\"User.setId()\":761,\"PreparedStatement.executeQuery()\":669,\"User.\\u003cinit\\u003e\":720,\"UNKNOWN.println()\":1160,\"SQLException.getMessage()\":1159},\"rawCode\":\"public User checkUser(User user) {\\n\\t\\tUser databaseUser\\u003dnew User();\\n\\t\\t\\n\\t\\ttry{\\n\\t\\t\\tConnection conn \\u003d openConnectionPool();\\n\\t\\t\\t/***********************************************PARAMETRIZACIÓN*************************************************/\\n\\t\\t\\tPreparedStatement statement \\u003d conn.prepareStatement(\\\"SELECT * FROM User WHERE name\\u003d?\\\"); //AND surname1 \\u003d ? AND surname2 \\u003d ?\\\");\\n\\t\\t\\tstatement.setString(1, user.getName());\\n\\t\\t\\t/*statement.setString(2, user.getSurName1());\\n\\t\\t\\tstatement.setString(3, user.getSurName2());*/\\n\\t\\t\\t/****************************************************************************************************************/\\n\\n\\t\\t\\tResultSet rs \\u003d statement.executeQuery();\\n\\t\\t\\tif (rs.next()) {\\n\\t\\t\\t\\tdatabaseUser \\u003d new User();\\n\\t\\t\\t\\tdatabaseUser.setId(rs.getInt(\\\"id\\\"));\\n\\t\\t\\t\\tdatabaseUser.setName(rs.getString(\\\"name\\\"));\\n\\t\\t\\t\\tdatabaseUser.setSurName1(rs.getString(\\\"surname1\\\"));\\n\\t\\t\\t\\tdatabaseUser.setSurName2(rs.getString(\\\"surname2\\\"));\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tSystem.out.println(\\\"Lo que hay en la base de datos: \\\");\\n\\t\\t\\tSystem.out.println(\\\"name:\\\" + databaseUser.getName());\\n\\t\\t\\tcloseConnectionPool(conn);\\n\\t\\t}catch(SQLException ex){\\n\\t\\t\\tSystem.out.println(\\\"SQLException: \\\" + ex.getMessage());\\n\\t\\t\\tSystem.out.println(\\\"SQLState: \\\" + ex.getSQLState());\\n\\t\\t\\tSystem.out.println(\\\"VendorError: \\\" + ex.getErrorCode());\\n\\t\\t}\\n\\t\\t\\n\\t\\t\\n\\t\\treturn databaseUser;\\n\\t}\"}","475":"{\"expressionStart\":{\"dataBaseManager.openConnectionPool()\":139,\"PreparedStatement.setInt()\":464,\"String\":333,\"String:VendorError: \":1128,\"ResultSet.next()\":667,\"SQLException.getErrorCode()\":1146,\"Vector.\\u003cinit\\u003e\":88,\"int:1\":481,\"ResultSet.getInt()\":722,\"dataBaseManager.closeConnectionPool()\":927,\"User.setName()\":749,\"Vector.addElement()\":891,\"ResultSet.getString()\":759,\"\\u003creturn\\u003e\":1176,\"String:SQLState: \":1071,\"User.setSurName2()\":841,\"User.setSurName1()\":791,\"SQLException.getSQLState()\":1086,\"String:SQLException: \":1011,\"Connection.prepareStatement()\":311,\"PreparedStatement.executeQuery()\":632,\"User.setId()\":714,\"User.\\u003cinit\\u003e\":698,\"UNKNOWN.println()\":992,\"SQLException.getMessage()\":1030},\"expressionEnd\":{\"dataBaseManager.openConnectionPool()\":159,\"PreparedStatement.setInt()\":493,\"String\":457,\"String:VendorError: \":1143,\"ResultSet.next()\":676,\"SQLException.getErrorCode()\":1163,\"Vector.\\u003cinit\\u003e\":106,\"int:1\":482,\"ResultSet.getInt()\":742,\"dataBaseManager.closeConnectionPool()\":952,\"User.setName()\":785,\"Vector.addElement()\":916,\"ResultSet.getString()\":784,\"\\u003creturn\\u003e\":1195,\"String:SQLState: \":1083,\"User.setSurName2()\":885,\"User.setSurName1()\":835,\"SQLException.getSQLState()\":1102,\"String:SQLException: \":1027,\"Connection.prepareStatement()\":458,\"PreparedStatement.executeQuery()\":656,\"User.setId()\":743,\"User.\\u003cinit\\u003e\":708,\"UNKNOWN.println()\":1046,\"SQLException.getMessage()\":1045},\"rawCode\":\"public Vector\\u003cUser\\u003e getTablonTargetUsers(int idTablon){\\n\\t\\t\\n\\t\\tVector\\u003cUser\\u003e targetUsers \\u003d new Vector\\u003cUser\\u003e();\\n\\t\\t\\n\\t\\ttry{\\n\\t\\t\\tConnection conn \\u003d openConnectionPool();\\n\\t\\t\\t/***********************************************PARAMETRIZACIÓN*************************************************/\\n\\t\\t\\tPreparedStatement statement \\u003d conn.prepareStatement(\\\"SELECT * FROM TablonTargetUser INNER JOIN User ON TablonTargetUser.user_id \\u003d User.id WHERE TablonTargetUser.tablon_id \\u003d ?;\\\"); \\n\\t\\t\\tstatement.setInt(1, idTablon);\\n\\t\\t\\t/****************************************************************************************************************/\\n\\n\\t\\t\\tResultSet rs \\u003d statement.executeQuery();\\n\\t\\t\\twhile(rs.next()) {\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tUser u \\u003d new User();\\n\\t\\t\\t\\tu.setId(rs.getInt(\\\"User.id\\\"));\\n\\t\\t\\t\\tu.setName(rs.getString(\\\"User.name\\\"));\\n\\t\\t\\t\\tu.setSurName1(rs.getString(\\\"User.surname1\\\"));\\n\\t\\t\\t\\tu.setSurName2(rs.getString(\\\"User.surname2\\\"));\\n\\t\\t\\t\\ttargetUsers.addElement(u);\\n\\t\\t\\t}\\n\\n\\t\\t\\tcloseConnectionPool(conn);\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t}catch(SQLException ex){\\n\\t\\t\\t\\tSystem.out.println(\\\"SQLException: \\\" + ex.getMessage());\\n\\t\\t\\t\\tSystem.out.println(\\\"SQLState: \\\" + ex.getSQLState());\\n\\t\\t\\t\\tSystem.out.println(\\\"VendorError: \\\" + ex.getErrorCode());\\n\\t\\t\\t}\\n\\t\\t\\n\\t\\treturn targetUsers;\\n\\t\\t\\n\\t}\"}"}