[{"url": "https://github.com/xxx/toy_analysis/blob/5ae9e535b476ac537804159d4d6cb58669a8ef4b/src/main/java/resource_leaks/WrappedCloseable.java", "rawCode": "package resource_leaks;\n\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.nio.charset.StandardCharsets;\n\npublic class WrappedCloseable {\n\n\tpublic void safe() {\n\t\tInputStreamReader isr = null;\n        try (InputStream inputStreamReader = new FileInputStream(\"data.txt\")) {\n            isr = new InputStreamReader(inputStreamReader, StandardCharsets.UTF_8);\n            isr.read();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        // when inputStreamReader is closed, isr is closed too\n\t}\n}\n", "methodName": "void WrappedCloseable.safe()", "exampleID": 0, "dataset": "infer", "filepath": "src/main/java/resource_leaks/WrappedCloseable.java", "line": 15, "sink": "isr", "source": "java.io.InputStreamReader", "sourceLine": 14, "qualifier": "$$java.io.InputStreamReader/$ could return null, and is @@dereferenced by isr/@", "steps": [{"line": 14, "source": "java.io.InputStreamReader", "filepath": "src/main/java/resource_leaks/WrappedCloseable.java", "methodName": "void WrappedCloseable.safe()", "exampleID": 1}], "line_number": 14, "records": [], "combined_records": [], "infer_explore": [{"level": 0, "filename": "src/main/java/resource_leaks/WrappedCloseable.java", "line_number": 11, "column_number": -1, "description": "start of procedure safe()", "node_tags": [{"tag": "kind", "value": "procedure_start"}, {"tag": "name", "value": "void WrappedCloseable.safe()"}, {"tag": "name_id", "value": "resource_leaks.WrappedCloseable.safe():void.7111d67a41c8e6e696179425f9b74bd9"}], "snippet": "8. public class WrappedCloseable {\n9. \n10. > \tpublic void safe() {\n11. \t\tInputStreamReader isr = null;\n12.         try (InputStream inputStreamReader = new FileInputStream(\"data.txt\")) {\n"}, {"level": 0, "filename": "src/main/java/resource_leaks/WrappedCloseable.java", "line_number": 12, "column_number": -1, "description": "", "node_tags": [], "snippet": "9. \n10. \tpublic void safe() {\n11. > \t\tInputStreamReader isr = null;\n12.         try (InputStream inputStreamReader = new FileInputStream(\"data.txt\")) {\n13.             isr = new InputStreamReader(inputStreamReader, StandardCharsets.UTF_8);\n"}, {"level": 0, "filename": "src/main/java/resource_leaks/WrappedCloseable.java", "line_number": 13, "column_number": -1, "description": "", "node_tags": [], "snippet": "10. \tpublic void safe() {\n11. \t\tInputStreamReader isr = null;\n12. >         try (InputStream inputStreamReader = new FileInputStream(\"data.txt\")) {\n13.             isr = new InputStreamReader(inputStreamReader, StandardCharsets.UTF_8);\n14.             isr.read();\n"}, {"level": 0, "filename": "src/main/java/resource_leaks/WrappedCloseable.java", "line_number": 14, "column_number": -1, "description": "Skipping InputStreamReader(...): unknown method", "node_tags": [], "snippet": "11. \t\tInputStreamReader isr = null;\n12.         try (InputStream inputStreamReader = new FileInputStream(\"data.txt\")) {\n13. >             isr = new InputStreamReader(inputStreamReader, StandardCharsets.UTF_8);\n14.             isr.read();\n15.         } catch (IOException e) {\n"}, {"level": 0, "filename": "src/main/java/resource_leaks/WrappedCloseable.java", "line_number": 15, "column_number": -1, "description": "", "node_tags": [], "snippet": "12.         try (InputStream inputStreamReader = new FileInputStream(\"data.txt\")) {\n13.             isr = new InputStreamReader(inputStreamReader, StandardCharsets.UTF_8);\n14. >             isr.read();\n15.         } catch (IOException e) {\n16.             e.printStackTrace();\n"}]}, {"url": "https://github.com/xxx/toy_analysis/blob/5ae9e535b476ac537804159d4d6cb58669a8ef4b/src/main/java/resource_leaks/WrappedCloseable22.java", "rawCode": "package resource_leaks;\n\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.nio.charset.StandardCharsets;\n\npublic class WrappedCloseable22 {\n\n\tpublic void safe2() {\n\t\tInputStreamReader isr = null;\n        try (InputStream inputStreamReader = new FileInputStream(\"data2.txt\")) {\n            isr = new InputStreamReader(inputStreamReader);\n            isr.read();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        // when inputStreamReader is closed, isr is closed too\n\t}\n}\n", "methodName": "void WrappedCloseable22.safe2()", "exampleID": 2, "dataset": "infer", "filepath": "src/main/java/resource_leaks/WrappedCloseable22.java", "line": 15, "sink": "isr", "source": "java.io.InputStreamReader", "sourceLine": 14, "qualifier": "$$java.io.InputStreamReader/$ could return null, and is @@dereferenced by isr/@", "steps": [{"line": 14, "source": "java.io.InputStreamReader", "filepath": "src/main/java/resource_leaks/WrappedCloseable22.java", "methodName": "void WrappedCloseable22.safe2()", "exampleID": 3}], "line_number": 14, "records": [], "combined_records": [], "infer_explore": [{"level": 0, "filename": "src/main/java/resource_leaks/WrappedCloseable22.java", "line_number": 11, "column_number": -1, "description": "start of procedure safe2()", "node_tags": [{"tag": "kind", "value": "procedure_start"}, {"tag": "name", "value": "void WrappedCloseable22.safe2()"}, {"tag": "name_id", "value": "resource_leaks.WrappedCloseable22.safe2():void.7b8e4e8dc367857689f50e6281c5fc4c"}], "snippet": "8. public class WrappedCloseable22 {\n9. \n10. > \tpublic void safe2() {\n11. \t\tInputStreamReader isr = null;\n12.         try (InputStream inputStreamReader = new FileInputStream(\"data2.txt\")) {\n"}, {"level": 0, "filename": "src/main/java/resource_leaks/WrappedCloseable22.java", "line_number": 12, "column_number": -1, "description": "", "node_tags": [], "snippet": "9. \n10. \tpublic void safe2() {\n11. > \t\tInputStreamReader isr = null;\n12.         try (InputStream inputStreamReader = new FileInputStream(\"data2.txt\")) {\n13.             isr = new InputStreamReader(inputStreamReader);\n"}, {"level": 0, "filename": "src/main/java/resource_leaks/WrappedCloseable22.java", "line_number": 13, "column_number": -1, "description": "", "node_tags": [], "snippet": "10. \tpublic void safe2() {\n11. \t\tInputStreamReader isr = null;\n12. >         try (InputStream inputStreamReader = new FileInputStream(\"data2.txt\")) {\n13.             isr = new InputStreamReader(inputStreamReader);\n14.             isr.read();\n"}, {"level": 0, "filename": "src/main/java/resource_leaks/WrappedCloseable22.java", "line_number": 14, "column_number": -1, "description": "Skipping InputStreamReader(...): unknown method", "node_tags": [], "snippet": "11. \t\tInputStreamReader isr = null;\n12.         try (InputStream inputStreamReader = new FileInputStream(\"data2.txt\")) {\n13. >             isr = new InputStreamReader(inputStreamReader);\n14.             isr.read();\n15.         } catch (IOException e) {\n"}, {"level": 0, "filename": "src/main/java/resource_leaks/WrappedCloseable22.java", "line_number": 15, "column_number": -1, "description": "", "node_tags": [], "snippet": "12.         try (InputStream inputStreamReader = new FileInputStream(\"data2.txt\")) {\n13.             isr = new InputStreamReader(inputStreamReader);\n14. >             isr.read();\n15.         } catch (IOException e) {\n16.             e.printStackTrace();\n"}]}, {"url": "https://github.com/xxx/toy_analysis/blob/5ae9e535b476ac537804159d4d6cb58669a8ef4b/src/main/java/resource_leaks/AutoclosingSockets.java", "rawCode": "package resource_leaks;\n\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.net.Proxy;\nimport java.net.Socket;\n\nimport javax.net.ssl.SSLContext;\n\npublic class AutoclosingSockets {\n\n\tpublic void safe() {\n\t\t\n\t\tSocket socket = new Socket(Proxy.NO_PROXY);\n        try {\n            socket.connect(new InetSocketAddress(\"www.hello.com\", 80), 1000);\n\n            \n            SSLContext sslContext = SSLContext.getDefault(); \n\n            // the last parameter `autoClose` is set to true, thus socket is not leaked.\n            socket = sslContext.getSocketFactory().createSocket(socket, \"www.hello.com\", 80, true);\n        }\n        catch (Throwable t) {\n            // something went wrong, close the socket and rethrow\n            try {\n                socket.close();\n            }\n            catch (IOException e) {\n                t.addSuppressed(e);\n            }\n            \n            throw new RuntimeException(t);\n        }\n\t}\n}\n", "methodName": "void AutoclosingSockets.safe()", "exampleID": 4, "dataset": "infer", "filepath": "src/main/java/resource_leaks/AutoclosingSockets.java", "line": 22, "sink": "socket", "source": "java.net.Socket", "sourceLine": 14, "qualifier": "$$java.net.Socket/$ could return null, and is @@dereferenced by socket/@", "steps": [{"line": 14, "source": "java.net.Socket", "filepath": "src/main/java/resource_leaks/AutoclosingSockets.java", "methodName": "void AutoclosingSockets.safe()", "exampleID": 5}], "line_number": 14, "records": [], "combined_records": [], "infer_explore": [{"level": 0, "filename": "src/main/java/resource_leaks/AutoclosingSockets.java", "line_number": 12, "column_number": -1, "description": "start of procedure safe()", "node_tags": [{"tag": "kind", "value": "procedure_start"}, {"tag": "name", "value": "void AutoclosingSockets.safe()"}, {"tag": "name_id", "value": "resource_leaks.AutoclosingSockets.safe():void.5fef810069616bce74ef7779bc98c8f4"}], "snippet": "9. public class AutoclosingSockets {\n10. \n11. > \tpublic void safe() {\n12. \t\t\n13. \t\tSocket socket = new Socket(Proxy.NO_PROXY);\n"}, {"level": 0, "filename": "src/main/java/resource_leaks/AutoclosingSockets.java", "line_number": 14, "column_number": -1, "description": "Skipping Socket(...): unknown method", "node_tags": [], "snippet": "11. \tpublic void safe() {\n12. \t\t\n13. > \t\tSocket socket = new Socket(Proxy.NO_PROXY);\n14.         try {\n15.             socket.connect(new InetSocketAddress(\"www.hello.com\", 80), 1000);\n"}, {"level": 0, "filename": "src/main/java/resource_leaks/AutoclosingSockets.java", "line_number": 16, "column_number": -1, "description": "Skipping connect(...): unknown method", "node_tags": [], "snippet": "13. \t\tSocket socket = new Socket(Proxy.NO_PROXY);\n14.         try {\n15. >             socket.connect(new InetSocketAddress(\"www.hello.com\", 80), 1000);\n16. \n17.             \n"}, {"level": 0, "filename": "src/main/java/resource_leaks/AutoclosingSockets.java", "line_number": 19, "column_number": -1, "description": "Skipping getDefault(): unknown method", "node_tags": [], "snippet": "16. \n17.             \n18. >             SSLContext sslContext = SSLContext.getDefault(); \n19. \n20.             // the last parameter `autoClose` is set to true, thus socket is not leaked.\n"}, {"level": 0, "filename": "src/main/java/resource_leaks/AutoclosingSockets.java", "line_number": 22, "column_number": -1, "description": "", "node_tags": [], "snippet": "19. \n20.             // the last parameter `autoClose` is set to true, thus socket is not leaked.\n21. >             socket = sslContext.getSocketFactory().createSocket(socket, \"www.hello.com\", 80, true);\n22.         }\n23.         catch (Throwable t) {\n"}]}, {"url": "https://github.com/xxx/toy_analysis/blob/5ae9e535b476ac537804159d4d6cb58669a8ef4b/src/main/java/resource_leaks/AutoclosingSockets2.java", "rawCode": "package resource_leaks;\n\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.net.Proxy;\nimport java.net.Socket;\n\nimport javax.net.ssl.SSLContext;\n\npublic class AutoclosingSockets2 {\n\n\tpublic void safe(SSLContext context) throws IOException {\n\t\t\n\t\tSocket socket = new Socket();\n        try {\n            socket.connect(new InetSocketAddress(\"www.hello1.com\", 81), 1100);\n            // the last parameter `autoClose` is set to true, thus socket is not leaked.\n            socket = context.getSocketFactory().createSocket(socket, \"www.hello1.com\", 81, true);\n        }\n        catch (Throwable t) {\n            // something went wrong, close the socket and rethrow\n            socket.close();\n            throw new RuntimeException(t);\n        }\n\t}\n\t\n\t\n\tpublic void safe2(SSLContext context) throws IOException {\n\t\t\n\t\tSocket socket = new Socket();\n        try {\n        \tInetSocketAddress intAddress = new InetSocketAddress(\"www.hello2.com\", 82);\n            socket.connect(intAddress, 1101);\n            // the last parameter `autoClose` is set to true, thus socket is not leaked.\n            socket = context.getSocketFactory().createSocket(socket, \"www.hello2.com\", 82, true);\n        }\n        catch (Throwable t) {\n            // something went wrong, close the socket and rethrow\n            socket.close();\n            throw new RuntimeException(t);\n        }\n\t}\n}\n", "methodName": "void AutoclosingSockets2.safe(SSLContext)", "exampleID": 6, "dataset": "infer", "filepath": "src/main/java/resource_leaks/AutoclosingSockets2.java", "line": 18, "sink": "socket.inputStream", "source": "java.io.InputStream", "sourceLine": 14, "qualifier": "$$java.io.InputStream/$ could return null, and is @@dereferenced by socket.inputStream/@", "steps": [{"line": 14, "source": "java.io.InputStream", "filepath": "src/main/java/resource_leaks/AutoclosingSockets2.java", "methodName": "void AutoclosingSockets2.safe(SSLContext)", "exampleID": 7}], "line_number": 14, "records": [], "combined_records": [], "infer_explore": [{"level": 0, "filename": "src/main/java/resource_leaks/AutoclosingSockets2.java", "line_number": 12, "column_number": -1, "description": "start of procedure safe(...)", "node_tags": [{"tag": "kind", "value": "procedure_start"}, {"tag": "name", "value": "void AutoclosingSockets2.safe(SSLContext)"}, {"tag": "name_id", "value": "resource_leaks.AutoclosingSockets2.safe(javax.net.ssl.SSLContext):void.000117d3862984e75b7a2c340b5a04d8"}], "snippet": "9. public class AutoclosingSockets2 {\n10. \n11. > \tpublic void safe(SSLContext context) throws IOException {\n12. \t\t\n13. \t\tSocket socket = new Socket();\n"}, {"level": 0, "filename": "src/main/java/resource_leaks/AutoclosingSockets2.java", "line_number": 14, "column_number": -1, "description": "", "node_tags": [], "snippet": "11. \tpublic void safe(SSLContext context) throws IOException {\n12. \t\t\n13. > \t\tSocket socket = new Socket();\n14.         try {\n15.             socket.connect(new InetSocketAddress(\"www.hello1.com\", 81), 1100);\n"}, {"level": 0, "filename": "src/main/java/resource_leaks/AutoclosingSockets2.java", "line_number": 16, "column_number": -1, "description": "Skipping connect(...): unknown method", "node_tags": [], "snippet": "13. \t\tSocket socket = new Socket();\n14.         try {\n15. >             socket.connect(new InetSocketAddress(\"www.hello1.com\", 81), 1100);\n16.             // the last parameter `autoClose` is set to true, thus socket is not leaked.\n17.             socket = context.getSocketFactory().createSocket(socket, \"www.hello1.com\", 81, true);\n"}, {"level": 0, "filename": "src/main/java/resource_leaks/AutoclosingSockets2.java", "line_number": 18, "column_number": -1, "description": "", "node_tags": [], "snippet": "15.             socket.connect(new InetSocketAddress(\"www.hello1.com\", 81), 1100);\n16.             // the last parameter `autoClose` is set to true, thus socket is not leaked.\n17. >             socket = context.getSocketFactory().createSocket(socket, \"www.hello1.com\", 81, true);\n18.         }\n19.         catch (Throwable t) {\n"}]}, {"url": "https://github.com/xxx/toy_analysis/blob/5ae9e535b476ac537804159d4d6cb58669a8ef4b/src/main/java/resource_leaks/ReturnCloseable.java", "rawCode": "package resource_leaks;\n\nimport java.io.Closeable;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\n\npublic class ReturnCloseable {\n\n\tpublic Closeable safe() throws FileNotFoundException {\n\t\t// we can assume that the caller of this function will handle closing the resource\n\t\treturn  new FileInputStream(new File(\"/tmp/hello.txt\"));\n\t}\n\t\n\tpublic void unsafe() throws IOException {\n\t\t\n\t\tFileInputStream fis = new FileInputStream(new File(\"/tmp/hello.txt\"));\n\t\tfis.read();\n\t}\n}\n", "methodName": "void ReturnCloseable.unsafe()", "exampleID": 8, "dataset": "infer", "filepath": "src/main/java/resource_leaks/ReturnCloseable.java", "line": 19, "sink": "fis", "source": "java.io.FileInputStream", "sourceLine": 18, "qualifier": "$$java.io.FileInputStream/$ could return null, and is @@dereferenced by fis/@", "steps": [{"line": 18, "source": "java.io.FileInputStream", "filepath": "src/main/java/resource_leaks/ReturnCloseable.java", "methodName": "void ReturnCloseable.unsafe()", "exampleID": 9}], "line_number": 18, "records": [], "combined_records": [], "infer_explore": [{"level": 0, "filename": "src/main/java/resource_leaks/ReturnCloseable.java", "line_number": 16, "column_number": -1, "description": "start of procedure unsafe()", "node_tags": [{"tag": "kind", "value": "procedure_start"}, {"tag": "name", "value": "void ReturnCloseable.unsafe()"}, {"tag": "name_id", "value": "resource_leaks.ReturnCloseable.unsafe():void.08c6b4e9c73a8b9849af18dbbd7ec7ca"}], "snippet": "13. \t}\n14. \t\n15. > \tpublic void unsafe() throws IOException {\n16. \t\t\n17. \t\tFileInputStream fis = new FileInputStream(new File(\"/tmp/hello.txt\"));\n"}, {"level": 0, "filename": "src/main/java/resource_leaks/ReturnCloseable.java", "line_number": 18, "column_number": -1, "description": "", "node_tags": [], "snippet": "15. \tpublic void unsafe() throws IOException {\n16. \t\t\n17. > \t\tFileInputStream fis = new FileInputStream(new File(\"/tmp/hello.txt\"));\n18. \t\tfis.read();\n19. \t}\n"}, {"level": 0, "filename": "src/main/java/resource_leaks/ReturnCloseable.java", "line_number": 19, "column_number": -1, "description": "", "node_tags": [], "snippet": "16. \t\t\n17. \t\tFileInputStream fis = new FileInputStream(new File(\"/tmp/hello.txt\"));\n18. > \t\tfis.read();\n19. \t}\n20. }\n"}]}, {"url": "https://github.com/xxx/toy_analysis/blob/5ae9e535b476ac537804159d4d6cb58669a8ef4b/src/main/java/resource_leaks/Standard.java", "rawCode": "package resource_leaks;\n\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\n\npublic class Standard {\n\tvoid safe(String[] files) throws IOException, FileNotFoundException {\n\t\tFileInputStream stream;\n\n\t\tstream = new FileInputStream(files[0]);\n\n\t\tstream.close();\n\t}\n\t\n\tvoid unsafe(String[] files) throws IOException, FileNotFoundException {\n\t\tFileInputStream stream;\n\n\t\tstream = new FileInputStream(files[0]);\n\n\t}\n\n}\n", "methodName": "void Standard.unsafe(java.lang.String[])", "exampleID": 10, "dataset": "infer", "filepath": "src/main/java/resource_leaks/Standard.java", "line": 19, "sink": "stream", "source": "java.io.FileInputStream", "sourceLine": 19, "qualifier": "$$java.io.FileInputStream/$ could return null, and is @@dereferenced by stream/@", "steps": [{"line": 19, "source": "java.io.FileInputStream", "filepath": "src/main/java/resource_leaks/Standard.java", "methodName": "void Standard.unsafe(java.lang.String[])", "exampleID": 11}], "line_number": 19, "records": [], "combined_records": [], "infer_explore": [{"level": 0, "filename": "src/main/java/resource_leaks/Standard.java", "line_number": 16, "column_number": -1, "description": "start of procedure unsafe(...)", "node_tags": [{"tag": "kind", "value": "procedure_start"}, {"tag": "name", "value": "void Standard.unsafe(java.lang.String[])"}, {"tag": "name_id", "value": "resource_leaks.Standard.unsafe(java.lang.String[]):void.fb06fae79396bab4c3c8ff8741bc05c5"}], "snippet": "13. \t}\n14. \t\n15. > \tvoid unsafe(String[] files) throws IOException, FileNotFoundException {\n16. \t\tFileInputStream stream;\n17. \n"}, {"level": 0, "filename": "src/main/java/resource_leaks/Standard.java", "line_number": 19, "column_number": -1, "description": "", "node_tags": [], "snippet": "16. \t\tFileInputStream stream;\n17. \n18. > \t\tstream = new FileInputStream(files[0]);\n19. \n20. \t}\n"}]}, {"url": "https://github.com/xxx/toy_analysis/blob/5ae9e535b476ac537804159d4d6cb58669a8ef4b/src/main/java/resource_leaks/ReturnCloseable2.java", "rawCode": "package resource_leaks;\n\nimport java.io.Closeable;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\n\npublic class ReturnCloseable2 {\n\n\tpublic Closeable safe() throws FileNotFoundException {\n\t\t// we can assume that the caller of this function will handle closing the resource\n\t\tFileInputStream var1 = new FileInputStream(new File(\"/tmp/hello1.txt\"));\n\t\treturn var1;\n\t}\n\t\n\tpublic void unsafe() throws IOException {\n\t\t\n\t\tFileInputStream fis = new FileInputStream(new File(\"/tmp/hello1.txt\"));\n\t\tfis.read();\n\t}\n}\n", "methodName": "void ReturnCloseable2.unsafe()", "exampleID": 12, "dataset": "infer", "filepath": "src/main/java/resource_leaks/ReturnCloseable2.java", "line": 20, "sink": "fis", "source": "java.io.FileInputStream", "sourceLine": 19, "qualifier": "$$java.io.FileInputStream/$ could return null, and is @@dereferenced by fis/@", "steps": [{"line": 19, "source": "java.io.FileInputStream", "filepath": "src/main/java/resource_leaks/ReturnCloseable2.java", "methodName": "void ReturnCloseable2.unsafe()", "exampleID": 13}], "line_number": 19, "records": [], "combined_records": [], "infer_explore": [{"level": 0, "filename": "src/main/java/resource_leaks/ReturnCloseable2.java", "line_number": 17, "column_number": -1, "description": "start of procedure unsafe()", "node_tags": [{"tag": "kind", "value": "procedure_start"}, {"tag": "name", "value": "void ReturnCloseable2.unsafe()"}, {"tag": "name_id", "value": "resource_leaks.ReturnCloseable2.unsafe():void.c71e6bce69a8ddef095bb955bb757234"}], "snippet": "14. \t}\n15. \t\n16. > \tpublic void unsafe() throws IOException {\n17. \t\t\n18. \t\tFileInputStream fis = new FileInputStream(new File(\"/tmp/hello1.txt\"));\n"}, {"level": 0, "filename": "src/main/java/resource_leaks/ReturnCloseable2.java", "line_number": 19, "column_number": -1, "description": "", "node_tags": [], "snippet": "16. \tpublic void unsafe() throws IOException {\n17. \t\t\n18. > \t\tFileInputStream fis = new FileInputStream(new File(\"/tmp/hello1.txt\"));\n19. \t\tfis.read();\n20. \t}\n"}, {"level": 0, "filename": "src/main/java/resource_leaks/ReturnCloseable2.java", "line_number": 20, "column_number": -1, "description": "", "node_tags": [], "snippet": "17. \t\t\n18. \t\tFileInputStream fis = new FileInputStream(new File(\"/tmp/hello1.txt\"));\n19. > \t\tfis.read();\n20. \t}\n21. }\n"}]}, {"url": "https://github.com/xxx/toy_analysis/blob/5ae9e535b476ac537804159d4d6cb58669a8ef4b/src/main/java/resource_leaks/ImplementAutoCloseable.java", "rawCode": "package resource_leaks;\n\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.util.zip.ZipFile;\nimport java.util.zip.ZipOutputStream;\n\npublic class ImplementAutoCloseable {\n\n\tpublic static void safe() throws IOException {\n\t\tPath tmpZip = Files.createTempFile(\"here\", null, null);\n\t\ttry (ZipFile zipFile = new ZipFile(\"here1\");\n\t\t\t\tZipOutputStream out = new ZipOutputStream(Files.newOutputStream(tmpZip))) {\n\n\t\t\tSystem.out.println(\"\");\n\t\t}\n\t}\n\n\tpublic static void unsafe() throws IOException {\n\t\tPath tmpZip = Files.createTempFile( \"here\", null, null );\n\t\t\n\t\tZipFile zipFile = new ZipFile( \"here1\" );\n\t\tZipOutputStream out = new ZipOutputStream( Files.newOutputStream( tmpZip ));\n\t\t\n\t\tSystem.out.println(\"\");\n\t\t \n\t}\n}\n", "methodName": "void ImplementAutoCloseable.unsafe()", "exampleID": 14, "dataset": "infer", "filepath": "src/main/java/resource_leaks/ImplementAutoCloseable.java", "line": 23, "sink": "zipFile", "source": "java.util.zip.ZipFile", "sourceLine": 23, "qualifier": "$$java.util.zip.ZipFile/$ could return null, and is @@dereferenced by zipFile/@", "steps": [{"line": 23, "source": "java.util.zip.ZipFile", "filepath": "src/main/java/resource_leaks/ImplementAutoCloseable.java", "methodName": "void ImplementAutoCloseable.unsafe()", "exampleID": 15}], "line_number": 23, "records": [], "combined_records": [], "infer_explore": [{"level": 0, "filename": "src/main/java/resource_leaks/ImplementAutoCloseable.java", "line_number": 20, "column_number": -1, "description": "start of procedure unsafe()", "node_tags": [{"tag": "kind", "value": "procedure_start"}, {"tag": "name", "value": "void ImplementAutoCloseable.unsafe()"}, {"tag": "name_id", "value": "resource_leaks.ImplementAutoCloseable.unsafe():void.2807a99f0d42e3a979e29420fc7758d6"}], "snippet": "17. \t}\n18. \n19. > \tpublic static void unsafe() throws IOException {\n20. \t\tPath tmpZip = Files.createTempFile( \"here\", null, null );\n21. \t\t\n"}, {"level": 0, "filename": "src/main/java/resource_leaks/ImplementAutoCloseable.java", "line_number": 21, "column_number": -1, "description": "Skipping createTempFile(...): unknown method", "node_tags": [], "snippet": "18. \n19. \tpublic static void unsafe() throws IOException {\n20. > \t\tPath tmpZip = Files.createTempFile( \"here\", null, null );\n21. \t\t\n22. \t\tZipFile zipFile = new ZipFile( \"here1\" );\n"}, {"level": 0, "filename": "src/main/java/resource_leaks/ImplementAutoCloseable.java", "line_number": 23, "column_number": -1, "description": "", "node_tags": [], "snippet": "20. \t\tPath tmpZip = Files.createTempFile( \"here\", null, null );\n21. \t\t\n22. > \t\tZipFile zipFile = new ZipFile( \"here1\" );\n23. \t\tZipOutputStream out = new ZipOutputStream( Files.newOutputStream( tmpZip ));\n24. \t\t\n"}]}, {"url": "https://github.com/xxx/toy_analysis/blob/5ae9e535b476ac537804159d4d6cb58669a8ef4b/src/main/java/resource_leaks/ImplementAutoCloseable.java", "rawCode": "package resource_leaks;\n\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.util.zip.ZipFile;\nimport java.util.zip.ZipOutputStream;\n\npublic class ImplementAutoCloseable {\n\n\tpublic static void safe() throws IOException {\n\t\tPath tmpZip = Files.createTempFile(\"here\", null, null);\n\t\ttry (ZipFile zipFile = new ZipFile(\"here1\");\n\t\t\t\tZipOutputStream out = new ZipOutputStream(Files.newOutputStream(tmpZip))) {\n\n\t\t\tSystem.out.println(\"\");\n\t\t}\n\t}\n\n\tpublic static void unsafe() throws IOException {\n\t\tPath tmpZip = Files.createTempFile( \"here\", null, null );\n\t\t\n\t\tZipFile zipFile = new ZipFile( \"here1\" );\n\t\tZipOutputStream out = new ZipOutputStream( Files.newOutputStream( tmpZip ));\n\t\t\n\t\tSystem.out.println(\"\");\n\t\t \n\t}\n}\n", "methodName": "void ImplementAutoCloseable.unsafe()", "exampleID": 16, "dataset": "infer", "filepath": "src/main/java/resource_leaks/ImplementAutoCloseable.java", "line": 24, "sink": "out", "source": "java.util.zip.ZipOutputStream", "sourceLine": 24, "qualifier": "$$java.util.zip.ZipOutputStream/$ could return null, and is @@dereferenced by out/@", "steps": [{"line": 24, "source": "java.util.zip.ZipOutputStream", "filepath": "src/main/java/resource_leaks/ImplementAutoCloseable.java", "methodName": "void ImplementAutoCloseable.unsafe()", "exampleID": 17}], "line_number": 24, "records": [], "combined_records": [], "infer_explore": [{"level": 0, "filename": "src/main/java/resource_leaks/ImplementAutoCloseable.java", "line_number": 20, "column_number": -1, "description": "start of procedure unsafe()", "node_tags": [{"tag": "kind", "value": "procedure_start"}, {"tag": "name", "value": "void ImplementAutoCloseable.unsafe()"}, {"tag": "name_id", "value": "resource_leaks.ImplementAutoCloseable.unsafe():void.2807a99f0d42e3a979e29420fc7758d6"}], "snippet": "17. \t}\n18. \n19. > \tpublic static void unsafe() throws IOException {\n20. \t\tPath tmpZip = Files.createTempFile( \"here\", null, null );\n21. \t\t\n"}, {"level": 0, "filename": "src/main/java/resource_leaks/ImplementAutoCloseable.java", "line_number": 21, "column_number": -1, "description": "Skipping createTempFile(...): unknown method", "node_tags": [], "snippet": "18. \n19. \tpublic static void unsafe() throws IOException {\n20. > \t\tPath tmpZip = Files.createTempFile( \"here\", null, null );\n21. \t\t\n22. \t\tZipFile zipFile = new ZipFile( \"here1\" );\n"}, {"level": 0, "filename": "src/main/java/resource_leaks/ImplementAutoCloseable.java", "line_number": 23, "column_number": -1, "description": "", "node_tags": [], "snippet": "20. \t\tPath tmpZip = Files.createTempFile( \"here\", null, null );\n21. \t\t\n22. > \t\tZipFile zipFile = new ZipFile( \"here1\" );\n23. \t\tZipOutputStream out = new ZipOutputStream( Files.newOutputStream( tmpZip ));\n24. \t\t\n"}, {"level": 0, "filename": "src/main/java/resource_leaks/ImplementAutoCloseable.java", "line_number": 24, "column_number": -1, "description": "Skipping ZipOutputStream(...): unknown method", "node_tags": [], "snippet": "21. \t\t\n22. \t\tZipFile zipFile = new ZipFile( \"here1\" );\n23. > \t\tZipOutputStream out = new ZipOutputStream( Files.newOutputStream( tmpZip ));\n24. \t\t\n25. \t\tSystem.out.println(\"\");\n"}]}, {"url": "https://github.com/xxx/toy_analysis/blob/5ae9e535b476ac537804159d4d6cb58669a8ef4b/src/main/java/resource_leaks/AutoclosingSockets2.java", "rawCode": "package resource_leaks;\n\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.net.Proxy;\nimport java.net.Socket;\n\nimport javax.net.ssl.SSLContext;\n\npublic class AutoclosingSockets2 {\n\n\tpublic void safe(SSLContext context) throws IOException {\n\t\t\n\t\tSocket socket = new Socket();\n        try {\n            socket.connect(new InetSocketAddress(\"www.hello1.com\", 81), 1100);\n            // the last parameter `autoClose` is set to true, thus socket is not leaked.\n            socket = context.getSocketFactory().createSocket(socket, \"www.hello1.com\", 81, true);\n        }\n        catch (Throwable t) {\n            // something went wrong, close the socket and rethrow\n            socket.close();\n            throw new RuntimeException(t);\n        }\n\t}\n\t\n\t\n\tpublic void safe2(SSLContext context) throws IOException {\n\t\t\n\t\tSocket socket = new Socket();\n        try {\n        \tInetSocketAddress intAddress = new InetSocketAddress(\"www.hello2.com\", 82);\n            socket.connect(intAddress, 1101);\n            // the last parameter `autoClose` is set to true, thus socket is not leaked.\n            socket = context.getSocketFactory().createSocket(socket, \"www.hello2.com\", 82, true);\n        }\n        catch (Throwable t) {\n            // something went wrong, close the socket and rethrow\n            socket.close();\n            throw new RuntimeException(t);\n        }\n\t}\n}\n", "methodName": "void AutoclosingSockets2.safe2(SSLContext)", "exampleID": 18, "dataset": "infer", "filepath": "src/main/java/resource_leaks/AutoclosingSockets2.java", "line": 35, "sink": "socket.inputStream", "source": "java.io.InputStream", "sourceLine": 30, "qualifier": "$$java.io.InputStream/$ could return null, and is @@dereferenced by socket.inputStream/@", "steps": [{"line": 30, "source": "java.io.InputStream", "filepath": "src/main/java/resource_leaks/AutoclosingSockets2.java", "methodName": "void AutoclosingSockets2.safe2(SSLContext)", "exampleID": 19}], "line_number": 30, "records": [], "combined_records": [], "infer_explore": [{"level": 0, "filename": "src/main/java/resource_leaks/AutoclosingSockets2.java", "line_number": 28, "column_number": -1, "description": "start of procedure safe2(...)", "node_tags": [{"tag": "kind", "value": "procedure_start"}, {"tag": "name", "value": "void AutoclosingSockets2.safe2(SSLContext)"}, {"tag": "name_id", "value": "resource_leaks.AutoclosingSockets2.safe2(javax.net.ssl.SSLContext):void.2edff826796ebc1d80b6e8b434893a01"}], "snippet": "25. \t\n26. \t\n27. > \tpublic void safe2(SSLContext context) throws IOException {\n28. \t\t\n29. \t\tSocket socket = new Socket();\n"}, {"level": 0, "filename": "src/main/java/resource_leaks/AutoclosingSockets2.java", "line_number": 30, "column_number": -1, "description": "", "node_tags": [], "snippet": "27. \tpublic void safe2(SSLContext context) throws IOException {\n28. \t\t\n29. > \t\tSocket socket = new Socket();\n30.         try {\n31.         \tInetSocketAddress intAddress = new InetSocketAddress(\"www.hello2.com\", 82);\n"}, {"level": 0, "filename": "src/main/java/resource_leaks/AutoclosingSockets2.java", "line_number": 32, "column_number": -1, "description": "Skipping InetSocketAddress(...): unknown method", "node_tags": [], "snippet": "29. \t\tSocket socket = new Socket();\n30.         try {\n31. >         \tInetSocketAddress intAddress = new InetSocketAddress(\"www.hello2.com\", 82);\n32.             socket.connect(intAddress, 1101);\n33.             // the last parameter `autoClose` is set to true, thus socket is not leaked.\n"}, {"level": 0, "filename": "src/main/java/resource_leaks/AutoclosingSockets2.java", "line_number": 33, "column_number": -1, "description": "Skipping connect(...): unknown method", "node_tags": [], "snippet": "30.         try {\n31.         \tInetSocketAddress intAddress = new InetSocketAddress(\"www.hello2.com\", 82);\n32. >             socket.connect(intAddress, 1101);\n33.             // the last parameter `autoClose` is set to true, thus socket is not leaked.\n34.             socket = context.getSocketFactory().createSocket(socket, \"www.hello2.com\", 82, true);\n"}, {"level": 0, "filename": "src/main/java/resource_leaks/AutoclosingSockets2.java", "line_number": 35, "column_number": -1, "description": "", "node_tags": [], "snippet": "32.             socket.connect(intAddress, 1101);\n33.             // the last parameter `autoClose` is set to true, thus socket is not leaked.\n34. >             socket = context.getSocketFactory().createSocket(socket, \"www.hello2.com\", 82, true);\n35.         }\n36.         catch (Throwable t) {\n"}]}]