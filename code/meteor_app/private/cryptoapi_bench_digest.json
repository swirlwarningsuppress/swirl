[{"url": "dummy", "rawCode": "public class AttachmentDatabase extends Database {\n  \n  private static final String TAG = Log.tag(AttachmentDatabase.class);\n\n  public  static final String TABLE_NAME             = \"part\";\n  public  static final String ROW_ID                 = \"_id\";\n          static final String ATTACHMENT_JSON_ALIAS  = \"attachment_json\";\n  public  static final String MMS_ID                 = \"mid\";\n          static final String CONTENT_TYPE           = \"ct\";\n          static final String NAME                   = \"name\";\n          static final String CONTENT_DISPOSITION    = \"cd\";\n          static final String CONTENT_LOCATION       = \"cl\";\n  public  static final String DATA                   = \"_data\";\n          static final String TRANSFER_STATE         = \"pending_push\";\n  private static final String TRANSFER_FILE          = \"transfer_file\";\n  public  static final String SIZE                   = \"data_size\";\n          static final String FILE_NAME              = \"file_name\";\n  public  static final String UNIQUE_ID              = \"unique_id\";\n          static final String DIGEST                 = \"digest\";\n          static final String VOICE_NOTE             = \"voice_note\";\n          static final String BORDERLESS             = \"borderless\";\n          static final String VIDEO_GIF              = \"video_gif\";\n          static final String QUOTE                  = \"quote\";\n  public  static final String STICKER_PACK_ID        = \"sticker_pack_id\";\n  public  static final String STICKER_PACK_KEY       = \"sticker_pack_key\";\n          static final String STICKER_ID             = \"sticker_id\";\n          static final String STICKER_EMOJI          = \"sticker_emoji\";\n          static final String FAST_PREFLIGHT_ID      = \"fast_preflight_id\";\n  public  static final String DATA_RANDOM            = \"data_random\";\n          static final String WIDTH                  = \"width\";\n          static final String HEIGHT                 = \"height\";\n          static final String CAPTION                = \"caption\";\n          static final String DATA_HASH              = \"data_hash\";\n          static final String VISUAL_HASH            = \"blur_hash\";\n          static final String TRANSFORM_PROPERTIES   = \"transform_properties\";\n          static final String DISPLAY_ORDER          = \"display_order\";\n          static final String UPLOAD_TIMESTAMP       = \"upload_timestamp\";\n          static final String CDN_NUMBER             = \"cdn_number\";\n\n  public  static final String DIRECTORY              = \"parts\";\n\n  public static final int TRANSFER_PROGRESS_DONE    = 0;\n  public static final int TRANSFER_PROGRESS_STARTED = 1;\n  public static final int TRANSFER_PROGRESS_PENDING = 2;\n  public static final int TRANSFER_PROGRESS_FAILED  = 3;\n\n  public static final long PREUPLOAD_MESSAGE_ID = -8675309;\n\n  private static final String PART_ID_WHERE     = ROW_ID + \" = ? AND \" + UNIQUE_ID + \" = ?\";\n  private static final String PART_ID_WHERE_NOT = ROW_ID + \" != ? AND \" + UNIQUE_ID + \" != ?\";\n\n  private static final String[] PROJECTION = new String[] {ROW_ID,\n                                                           MMS_ID, CONTENT_TYPE, NAME, CONTENT_DISPOSITION,\n                                                           CDN_NUMBER, CONTENT_LOCATION, DATA,\n                                                           TRANSFER_STATE, SIZE, FILE_NAME, UNIQUE_ID, DIGEST,\n                                                           FAST_PREFLIGHT_ID, VOICE_NOTE, BORDERLESS, VIDEO_GIF, QUOTE, DATA_RANDOM,\n                                                           WIDTH, HEIGHT, CAPTION, STICKER_PACK_ID,\n                                                           STICKER_PACK_KEY, STICKER_ID, STICKER_EMOJI, DATA_HASH, VISUAL_HASH,\n                                                           TRANSFORM_PROPERTIES, TRANSFER_FILE, DISPLAY_ORDER,\n                                                           UPLOAD_TIMESTAMP };\n\n  public static final String CREATE_TABLE = \"CREATE TABLE \" + TABLE_NAME + \" (\" + ROW_ID                 + \" INTEGER PRIMARY KEY, \" +\n                                                                                  MMS_ID                 + \" INTEGER, \" +\n                                                                                  \"seq\"                  + \" INTEGER DEFAULT 0, \" +\n                                                                                  CONTENT_TYPE           + \" TEXT, \" +\n                                                                                  NAME                   + \" TEXT, \" +\n                                                                                  \"chset\"                + \" INTEGER, \" +\n                                                                                  CONTENT_DISPOSITION    + \" TEXT, \" +\n                                                                                  \"fn\"                   + \" TEXT, \" +\n                                                                                  \"cid\"                  + \" TEXT, \"  +\n                                                                                  CONTENT_LOCATION       + \" TEXT, \" +\n                                                                                  \"ctt_s\"                + \" INTEGER, \" +\n                                                                                  \"ctt_t\"                + \" TEXT, \" +\n                                                                                  \"encrypted\"            + \" INTEGER, \" +\n                                                                                  TRANSFER_STATE         + \" INTEGER, \" +\n                                                                                  DATA                   + \" TEXT, \" +\n                                                                                  SIZE                   + \" INTEGER, \" +\n                                                                                  FILE_NAME              + \" TEXT, \" +\n                                                                                  UNIQUE_ID              + \" INTEGER NOT NULL, \" +\n                                                                                  DIGEST                 + \" BLOB, \" +\n                                                                                  FAST_PREFLIGHT_ID      + \" TEXT, \" +\n                                                                                  VOICE_NOTE             + \" INTEGER DEFAULT 0, \" +\n                                                                                  BORDERLESS             + \" INTEGER DEFAULT 0, \" +\n                                                                                  VIDEO_GIF              + \" INTEGER DEFAULT 0, \" +\n                                                                                  DATA_RANDOM            + \" BLOB, \" +\n                                                                                  QUOTE                  + \" INTEGER DEFAULT 0, \" +\n                                                                                  WIDTH                  + \" INTEGER DEFAULT 0, \" +\n                                                                                  HEIGHT                 + \" INTEGER DEFAULT 0, \" +\n                                                                                  CAPTION                + \" TEXT DEFAULT NULL, \" +\n                                                                                  STICKER_PACK_ID        + \" TEXT DEFAULT NULL, \" +\n                                                                                  STICKER_PACK_KEY       + \" DEFAULT NULL, \" +\n                                                                                  STICKER_ID             + \" INTEGER DEFAULT -1, \" +\n                                                                                  STICKER_EMOJI          + \" STRING DEFAULT NULL, \" +\n                                                                                  DATA_HASH              + \" TEXT DEFAULT NULL, \" +\n                                                                                  VISUAL_HASH            + \" TEXT DEFAULT NULL, \" +\n                                                                                  TRANSFORM_PROPERTIES   + \" TEXT DEFAULT NULL, \" +\n                                                                                  TRANSFER_FILE          + \" TEXT DEFAULT NULL, \" +\n                                                                                  DISPLAY_ORDER          + \" INTEGER DEFAULT 0, \" +\n                                                                                  UPLOAD_TIMESTAMP       + \" INTEGER DEFAULT 0, \" +\n                                                                                  CDN_NUMBER             + \" INTEGER DEFAULT 0);\";\n\n  public static final String[] CREATE_INDEXS = {\n    \"CREATE INDEX IF NOT EXISTS part_mms_id_index ON \" + TABLE_NAME + \" (\" + MMS_ID + \");\",\n    \"CREATE INDEX IF NOT EXISTS pending_push_index ON \" + TABLE_NAME + \" (\" + TRANSFER_STATE + \");\",\n    \"CREATE INDEX IF NOT EXISTS part_sticker_pack_id_index ON \" + TABLE_NAME + \" (\" + STICKER_PACK_ID + \");\",\n    \"CREATE INDEX IF NOT EXISTS part_data_hash_index ON \" + TABLE_NAME + \" (\" + DATA_HASH + \");\",\n    \"CREATE INDEX IF NOT EXISTS part_data_index ON \" + TABLE_NAME + \" (\" + DATA + \");\"\n  };\n\n \n  private @NonNull DataInfo setAttachmentData(@NonNull File destination,\n                                              @NonNull InputStream in,\n                                              @Nullable AttachmentId attachmentId)\n      throws MmsException\n  {\n    try {\n      File                       tempFile          = newFile();\n      MessageDigest              messageDigest     = MessageDigest.getInstance(\"SHA-256\");\n      DigestInputStream          digestInputStream = new DigestInputStream(in, messageDigest);\n      Pair<byte[], OutputStream> out               = ModernEncryptingPartOutputStream.createFor(attachmentSecret, tempFile, false);\n      long                       length            = StreamUtil.copy(digestInputStream, out.second);\n      String                     hash              = Base64.encodeBytes(digestInputStream.getMessageDigest().digest());\n\n      if (!tempFile.renameTo(destination)) {\n        Log.w(TAG, \"Couldn't rename \" + tempFile.getPath() + \" to \" + destination.getPath());\n        throw new IllegalStateException(\"Couldn't rename \" + tempFile.getPath() + \" to \" + destination.getPath());\n      }\n\n      SQLiteDatabase     database       = databaseHelper.getSignalWritableDatabase();\n      Optional<DataInfo> sharedDataInfo = findDuplicateDataFileInfo(database, hash, attachmentId);\n      if (sharedDataInfo.isPresent()) {\n        Log.i(TAG, \"[setAttachmentData] Duplicate data file found! \" + sharedDataInfo.get().file.getAbsolutePath());\n        if (!destination.equals(sharedDataInfo.get().file) && destination.delete()) {\n          Log.i(TAG, \"[setAttachmentData] Deleted original file. \" + destination);\n        }\n        return sharedDataInfo.get();\n      } else {\n        Log.i(TAG, \"[setAttachmentData] No matching attachment data found. \" + destination.getAbsolutePath());\n      }\n\n      return new DataInfo(destination, length, out.first, hash);\n    } catch (NoSuchAlgorithmException e) {\n      throw new MmsException(e);\n    } catch (IOException e) {\n      throw new MmsException(e);\n    }\n  }\n\n}", "exampleID": 1000, "dataset": "digest", "filepath": "/Users/xxx/repos/active_learning_interface/GithubExamples/MessageDigest/AttachmentDatabase.java"}, {"url": "dummy", "rawCode": "public class MD5 {\n\n    private MD5() {\n    }\n\n    public final static String getMessageDigest(byte[] buffer) {\n        char[] hexDigits = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};\n        try {\n            MessageDigest mdTemp = MessageDigest.getInstance(\"MD5\");\n            mdTemp.update(buffer);\n            byte[] md = mdTemp.digest();\n            int j = md.length;\n            char[] str = new char[j * 2];\n            int k = 0;\n            for (int i = 0; i < j; i++) {\n                byte byte0 = md[i];\n                str[k++] = hexDigits[byte0 >>> 4 & 0xf];\n                str[k++] = hexDigits[byte0 & 0xf];\n            }\n            return new String(str);\n        } catch (Exception e) {\n            return null;\n        }\n    }\n}", "exampleID": 1001, "dataset": "digest", "filepath": "/Users/xxx/repos/active_learning_interface/GithubExamples/MessageDigest/MD5.java"}, {"url": "dummy", "rawCode": "public final class AlluxioURI implements Comparable<AlluxioURI>, Serializable {\n  private static final long serialVersionUID = -1207227692436086387L;\n\n  public static final String SEPARATOR = \"/\";\n  public static final String CUR_DIR = \".\";\n  public static final String WILDCARD = \"*\";\n\n  public static final AlluxioURI EMPTY_URI = new AlluxioURI(\"\");\n\n  /** A {@link URI} is used to hold the URI components. */\n  private final URI mUri;\n\n  // Cached string version of the AlluxioURI\n  private String mUriString = null;\n\n \n\n  /**\n   * Computes the hash of this URI, with SHA-256, or MD5, or simple hashCode().\n   *\n   * @param uri the alluxio path uri\n   *\n   * @return HEX encoded hash string\n   */\n  public static String hash(String uri) {\n    try {\n      MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n      md.update(uri.getBytes());\n      return Hex.encodeHexString(md.digest()).toLowerCase();\n    } catch (NoSuchAlgorithmException e) {\n      /* No actions. Continue with other hash method. */\n    }\n\n    try {\n      MessageDigest md = MessageDigest.getInstance(\"MD5\");\n      md.update(uri.getBytes());\n      return Hex.encodeHexString(md.digest()).toLowerCase();\n    } catch (NoSuchAlgorithmException e) {\n      /* No actions. Continue with other hash method. */\n    }\n\n    // Cannot find SHA-256 or MD5. Fall back to use simple hashCode, which is probable to conflict.\n    return Hex.encodeHexString(String.valueOf(uri.hashCode()).getBytes()).toLowerCase();\n  }\n}", "exampleID": 1002, "dataset": "digest", "filepath": "/Users/xxx/repos/active_learning_interface/GithubExamples/MessageDigest/AlluxioURI.java"}, {"url": "dummy", "rawCode": "public class Godot extends Fragment implements SensorEventListener, IDownloaderClient {\n\tprivate IStub mDownloaderClientStub;\n\tprivate TextView mStatusText;\n\tprivate TextView mProgressFraction;\n\tprivate TextView mProgressPercent;\n\tprivate TextView mAverageSpeed;\n\tprivate TextView mTimeRemaining;\n\tprivate ProgressBar mPB;\n\tprivate ClipboardManager mClipboard;\n\n\tprivate View mDashboard;\n\tprivate View mCellMessage;\n\n\tprivate Button mPauseButton;\n\tprivate Button mWiFiSettingsButton;\n\n\tprivate XRMode xrMode = XRMode.REGULAR;\n\tprivate boolean use_32_bits = false;\n\tprivate boolean use_immersive = false;\n\tprivate boolean use_debug_opengl = false;\n\tprivate boolean mStatePaused;\n\tprivate boolean activityResumed;\n\tprivate int mState;\n\n\tprivate GodotHost godotHost;\n\tprivate GodotPluginRegistry pluginRegistry;\n\n\tstatic private Intent mCurrentIntent;\n\n\tpublic void onNewIntent(Intent intent) {\n\t\tmCurrentIntent = intent;\n\t}\n\n\tstatic public Intent getCurrentIntent() {\n\t\treturn mCurrentIntent;\n\t}\n\n\tprivate void setState(int newState) {\n\t\tif (mState != newState) {\n\t\t\tmState = newState;\n\t\t\tmStatusText.setText(Helpers.getDownloaderStringResourceIDFromState(newState));\n\t\t}\n\t}\n\n\tprivate void setButtonPausedState(boolean paused) {\n\t\tmStatePaused = paused;\n\t\tint stringResourceID = paused ? R.string.text_button_resume : R.string.text_button_pause;\n\t\tmPauseButton.setText(stringResourceID);\n\t}\n\n\tprivate String[] command_line;\n\tprivate boolean use_apk_expansion;\n\n\tprivate ViewGroup containerLayout;\n\tpublic GodotRenderView mRenderView;\n\tprivate boolean godot_initialized = false;\n\n\tprivate SensorManager mSensorManager;\n\tprivate Sensor mAccelerometer;\n\tprivate Sensor mGravity;\n\tprivate Sensor mMagnetometer;\n\tprivate Sensor mGyroscope;\n\n\tpublic static GodotIO io;\n\tpublic static GodotNetUtils netUtils;\n\n\tpublic interface ResultCallback {\n\t\tvoid callback(int requestCode, int resultCode, Intent data);\n\t}\n\tpublic ResultCallback result_callback;\n\n\n\tprivate boolean obbIsCorrupted(String f, String main_pack_md5) {\n\t\ttry {\n\t\t\tInputStream fis = new FileInputStream(f);\n\n\t\t\t// Create MD5 Hash\n\t\t\tbyte[] buffer = new byte[16384];\n\n\t\t\tMessageDigest complete = MessageDigest.getInstance(\"MD5\");\n\t\t\tint numRead;\n\t\t\tdo {\n\t\t\t\tnumRead = fis.read(buffer);\n\t\t\t\tif (numRead > 0) {\n\t\t\t\t\tcomplete.update(buffer, 0, numRead);\n\t\t\t\t}\n\t\t\t} while (numRead != -1);\n\n\t\t\tfis.close();\n\t\t\tbyte[] messageDigest = complete.digest();\n\n\t\t\t// Create Hex String\n\t\t\tStringBuilder hexString = new StringBuilder();\n\t\t\tfor (int i = 0; i < messageDigest.length; i++) {\n\t\t\t\tString s = Integer.toHexString(0xFF & messageDigest[i]);\n\n\t\t\t\tif (s.length() == 1) {\n\t\t\t\t\ts = \"0\" + s;\n\t\t\t\t}\n\t\t\t\thexString.append(s);\n\t\t\t}\n\t\t\tString md5str = hexString.toString();\n\n\t\t\tif (!md5str.equals(main_pack_md5)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\treturn true;\n\t\t}\n\t}\n\n}", "exampleID": 1003, "dataset": "digest", "filepath": "/Users/xxx/repos/active_learning_interface/GithubExamples/MessageDigest/Godot.java"}, {"url": "dummy", "rawCode": "public class Crypt {\n\tpublic static String md5(String input) {\n\t\ttry {\n\t\t\t// Create MD5 Hash\n\t\t\tMessageDigest digest = MessageDigest.getInstance(\"MD5\");\n\t\t\tdigest.update(input.getBytes());\n\t\t\tbyte[] messageDigest = digest.digest();\n\n\t\t\t// Create Hex String\n\t\t\tStringBuilder hexString = new StringBuilder();\n\t\t\tfor (byte b : messageDigest)\n\t\t\t\thexString.append(Integer.toHexString(0xFF & b));\n\t\t\treturn hexString.toString();\n\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn \"\";\n\t}\n\n}", "exampleID": 1004, "dataset": "digest", "filepath": "/Users/xxx/repos/active_learning_interface/GithubExamples/MessageDigest/Crypt.java"}, {"url": "dummy", "rawCode": "public class NetworkCache {\n\n  @NonNull\n  private final LottieNetworkCacheProvider cacheProvider;\n\n  public NetworkCache(@NonNull LottieNetworkCacheProvider cacheProvider) {\n    this.cacheProvider = cacheProvider;\n  }\n\n  \n  private static String getMD5(String input, int maxLength) {\n    MessageDigest md;\n    try {\n      md = MessageDigest.getInstance(\"MD5\");\n    } catch (NoSuchAlgorithmException e) {\n      // For some reason, md5 doesn't exist, return a substring.\n      // This should never happen.\n      return input.substring(0, maxLength);\n    }\n    byte[] messageDigest = md.digest(input.getBytes());\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < messageDigest.length; i++) {\n      byte b = messageDigest[i];\n      sb.append(String.format(\"%02x\", b));\n    }\n    return sb.toString();\n  }\n}", "exampleID": 1005, "dataset": "digest", "filepath": "/Users/xxx/repos/active_learning_interface/GithubExamples/MessageDigest/NetworkCache.java"}, {"url": "dummy", "rawCode": "public class Test_SO2 {\n  static public byte[] getFileChecksum(File file) {\n        MessageDigest md;\n        try {\n            md = MessageDigest.getInstance(\"SHA-1\");\n        } catch (NoSuchAlgorithmException e) {\n            return null;\n        }\n        FileInputStream inputStream = null;\n        try {\n            byte[] buffer = new byte[2048];\n            int bytesRead;\n            inputStream = new FileInputStream(file);\n            while ((bytesRead = inputStream.read(buffer)) != -1) {\n                md.update(buffer, 0, bytesRead);\n            }\n        } catch (IOException e) {\n            return null;\n        } finally {\n            closeSilently(inputStream);\n        }\n        return md.digest();\n    }\n}", "exampleID": 1006, "dataset": "digest", "filepath": "/Users/xxx/repos/active_learning_interface/GithubExamples/MessageDigest/Test_SO2.java", "test": true}, {"url": "dummy", "rawCode": "public class X509Util {\n    private static final String TAG = \"X509Util\";\n\n    private static final class TrustStorageListener extends BroadcastReceiver {\n        @Override\n        public void onReceive(Context context, Intent intent) {\n            boolean shouldReloadTrustManager = false;\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n                if (KeyChain.ACTION_TRUST_STORE_CHANGED.equals(intent.getAction())) {\n                    shouldReloadTrustManager = true;\n                } else if (KeyChain.ACTION_KEYCHAIN_CHANGED.equals(intent.getAction())) {\n                    X509UtilJni.get().notifyClientCertStoreChanged();\n                } else if (KeyChain.ACTION_KEY_ACCESS_CHANGED.equals(intent.getAction())\n                        && !intent.getBooleanExtra(KeyChain.EXTRA_KEY_ACCESSIBLE, false)) {\n                    // We lost access to a client certificate key. Reload all client certificate\n                    // state as we are not currently able to forget an individual identity.\n                    X509UtilJni.get().notifyClientCertStoreChanged();\n                }\n            } else {\n                @SuppressWarnings(\"deprecation\")\n                String action = KeyChain.ACTION_STORAGE_CHANGED;\n                // Before Android O, KeyChain only emitted a coarse-grained intent. This fires much\n                // more often than it should (https://crbug.com/381912), but there are no APIs to\n                // distinguish the various cases.\n                if (action.equals(intent.getAction())) {\n                    shouldReloadTrustManager = true;\n                    X509UtilJni.get().notifyClientCertStoreChanged();\n                }\n            }\n\n            if (shouldReloadTrustManager) {\n                try {\n                    reloadDefaultTrustManager();\n                } catch (CertificateException e) {\n                    Log.e(TAG, \"Unable to reload the default TrustManager\", e);\n                } catch (KeyStoreException e) {\n                    Log.e(TAG, \"Unable to reload the default TrustManager\", e);\n                } catch (NoSuchAlgorithmException e) {\n                    Log.e(TAG, \"Unable to reload the default TrustManager\", e);\n                }\n            }\n        }\n    }\n\n    private static List<X509Certificate> checkServerTrustedIgnoringRuntimeException(\n            X509TrustManagerExtensions tm, X509Certificate[] chain, String authType, String host)\n            throws CertificateException {\n        try {\n            return tm.checkServerTrusted(chain, authType, host);\n        } catch (RuntimeException e) {\n            // https://crbug.com/937354: checkServerTrusted() can unexpectedly throw runtime\n            // exceptions, most often within conscrypt while parsing certificates.\n            Log.e(TAG, \"checkServerTrusted() unexpectedly threw: %s\", e);\n            throw new CertificateException(e);\n        }\n    }\n\n    private static CertificateFactory sCertificateFactory;\n\n    private static final String OID_TLS_SERVER_AUTH = \"1.3.6.1.5.5.7.3.1\";\n    private static final String OID_ANY_EKU = \"2.5.29.37.0\";\n    // Server-Gated Cryptography (necessary to support a few legacy issuers):\n    //    Netscape:\n    private static final String OID_SERVER_GATED_NETSCAPE = \"2.16.840.1.113730.4.1\";\n    //    Microsoft:\n    private static final String OID_SERVER_GATED_MICROSOFT = \"1.3.6.1.4.1.311.10.3.3\";\n\n    /**\n     * Trust manager backed up by the read-only system certificate store.\n     */\n    private static X509TrustManagerExtensions sDefaultTrustManager;\n\n    /**\n     * BroadcastReceiver that listens to change in the system keystore to invalidate certificate\n     * caches.\n     */\n    private static TrustStorageListener sTrustStorageListener;\n\n    /**\n     * Trust manager backed up by a custom certificate store. We need such manager to plant test\n     * root CA to the trust store in testing.\n     */\n    private static X509TrustManagerExtensions sTestTrustManager;\n    private static KeyStore sTestKeyStore;\n\n    /**\n     * The system key store. This is used to determine whether a trust anchor is a system trust\n     * anchor or user-installed.\n     */\n    private static KeyStore sSystemKeyStore;\n\n    /**\n     * The directory where system certificates are stored. This is used to determine whether a\n     * trust anchor is a system trust anchor or user-installed. The KeyStore API alone is not\n     * sufficient to efficiently query whether a given X500Principal, PublicKey pair is a trust\n     * anchor.\n     */\n    private static File sSystemCertificateDirectory;\n\n    /**\n     * An in-memory cache of which trust anchors are system trust roots. This avoids reading and\n     * decoding the root from disk on every verification. Mirrors a similar in-memory cache in\n     * Conscrypt's X509TrustManager implementation.\n     */\n    private static Set<Pair<X500Principal, PublicKey>> sSystemTrustAnchorCache;\n\n    /**\n     * True if the system key store has been loaded. If the \"AndroidCAStore\" KeyStore instance\n     * was not found, sSystemKeyStore may be null while sLoadedSystemKeyStore is true.\n     */\n    private static boolean sLoadedSystemKeyStore;\n\n    /**\n     * A root that will be installed as a user-trusted root for testing purposes.\n     */\n    private static X509Certificate sTestRoot;\n\n    /**\n     * Lock object used to synchronize all calls that modify or depend on the trust managers.\n     */\n    private static final Object sLock = new Object();\n\n    /**\n     * Ensures that the trust managers and certificate factory are initialized.\n     */\n    private static void ensureInitialized() throws CertificateException,\n            KeyStoreException, NoSuchAlgorithmException {\n        synchronized (sLock) {\n            ensureInitializedLocked();\n        }\n    }\n\n    /**\n     * Ensures that the trust managers and certificate factory are initialized. Must be called with\n     * |sLock| held. Does not initialize test infrastructure.\n     */\n    // FindBugs' static field initialization warnings do not handle methods that are expected to be\n    // called locked.\n    private static void ensureInitializedLocked()\n            throws CertificateException, KeyStoreException, NoSuchAlgorithmException {\n        assert Thread.holdsLock(sLock);\n\n        if (sCertificateFactory == null) {\n            sCertificateFactory = CertificateFactory.getInstance(\"X.509\");\n        }\n        if (sDefaultTrustManager == null) {\n            sDefaultTrustManager = X509Util.createTrustManager(null);\n        }\n        if (!sLoadedSystemKeyStore) {\n            try {\n                sSystemKeyStore = KeyStore.getInstance(\"AndroidCAStore\");\n                try {\n                    sSystemKeyStore.load(null);\n                } catch (IOException e) {\n                    // No IO operation is attempted.\n                }\n                sSystemCertificateDirectory =\n                        new File(System.getenv(\"ANDROID_ROOT\") + \"/etc/security/cacerts\");\n            } catch (KeyStoreException e) {\n                // Could not load AndroidCAStore. Continue anyway; isKnownRoot will always\n                // return false.\n            }\n            sLoadedSystemKeyStore = true;\n        }\n        if (sSystemTrustAnchorCache == null) {\n            sSystemTrustAnchorCache = new HashSet<Pair<X500Principal, PublicKey>>();\n        }\n        if (sTrustStorageListener == null) {\n            sTrustStorageListener = new TrustStorageListener();\n            IntentFilter filter = new IntentFilter();\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n                filter.addAction(KeyChain.ACTION_KEYCHAIN_CHANGED);\n                filter.addAction(KeyChain.ACTION_KEY_ACCESS_CHANGED);\n                filter.addAction(KeyChain.ACTION_TRUST_STORE_CHANGED);\n            } else {\n                @SuppressWarnings(\"deprecation\")\n                String action = KeyChain.ACTION_STORAGE_CHANGED;\n                filter.addAction(action);\n            }\n            ContextUtils.registerProtectedBroadcastReceiver(\n                    ContextUtils.getApplicationContext(), sTrustStorageListener, filter);\n        }\n    }\n\n    /**\n     * Ensures that test  trust managers and certificate factory are initialized. Must be called\n     * with |sLock| held.\n     */\n    private static void ensureTestInitializedLocked()\n            throws CertificateException, KeyStoreException, NoSuchAlgorithmException {\n        assert Thread.holdsLock(sLock);\n        if (sTestKeyStore == null) {\n            sTestKeyStore = KeyStore.getInstance(KeyStore.getDefaultType());\n            try {\n                sTestKeyStore.load(null);\n            } catch (IOException e) {\n                // No IO operation is attempted.\n            }\n        }\n        if (sTestTrustManager == null) {\n            sTestTrustManager = X509Util.createTrustManager(sTestKeyStore);\n        }\n    }\n\n    /**\n     * Creates a X509TrustManagerExtensions backed up by the given key\n     * store. When null is passed as a key store, system default trust store is\n     * used. Returns null if no created TrustManager was suitable.\n     * @throws KeyStoreException, NoSuchAlgorithmException on error initializing the TrustManager.\n     */\n    private static X509TrustManagerExtensions createTrustManager(KeyStore keyStore)\n            throws KeyStoreException, NoSuchAlgorithmException {\n        String algorithm = TrustManagerFactory.getDefaultAlgorithm();\n        TrustManagerFactory tmf = TrustManagerFactory.getInstance(algorithm);\n        tmf.init(keyStore);\n\n        TrustManager[] trustManagers = null;\n        try {\n            trustManagers = tmf.getTrustManagers();\n        } catch (RuntimeException e) {\n            // https://crbug.com/937354: getTrustManagers() can unexpectedly throw runtime\n            // exceptions, most often while processing the network security config XML file.\n            Log.e(TAG, \"TrustManagerFactory.getTrustManagers() unexpectedly threw: %s\", e);\n            throw new KeyStoreException(e);\n        }\n\n        for (TrustManager tm : trustManagers) {\n            if (tm instanceof X509TrustManager) {\n                try {\n                    return new X509TrustManagerExtensions((X509TrustManager) tm);\n                } catch (IllegalArgumentException e) {\n                    String className = tm.getClass().getName();\n                    Log.e(TAG, \"Error creating trust manager (\" + className + \"): \" + e);\n                }\n            }\n        }\n        Log.e(TAG, \"Could not find suitable trust manager\");\n        return null;\n    }\n\n    /**\n     * After each modification of test key store, trust manager has to be generated again.\n     */\n    private static void reloadTestTrustManager()\n            throws KeyStoreException, NoSuchAlgorithmException, CertificateException {\n        assert Thread.holdsLock(sLock);\n        ensureTestInitializedLocked();\n\n        sTestTrustManager = X509Util.createTrustManager(sTestKeyStore);\n    }\n\n    /**\n     * After each modification by the system of the key store, trust manager has to be regenerated.\n     */\n    private static void reloadDefaultTrustManager() throws KeyStoreException,\n            NoSuchAlgorithmException, CertificateException {\n        synchronized (sLock) {\n            sDefaultTrustManager = null;\n            sSystemTrustAnchorCache = null;\n            ensureInitializedLocked();\n        }\n        X509UtilJni.get().notifyTrustStoreChanged();\n    }\n\n    /**\n     * Convert a DER encoded certificate to an X509Certificate.\n     */\n    public static X509Certificate createCertificateFromBytes(byte[] derBytes) throws\n            CertificateException, KeyStoreException, NoSuchAlgorithmException {\n        ensureInitialized();\n        return (X509Certificate) sCertificateFactory.generateCertificate(\n                new ByteArrayInputStream(derBytes));\n    }\n\n    /**\n     * Add a test root certificate for use by the Android Platform verifier.\n     */\n    public static void addTestRootCertificate(byte[] rootCertBytes)\n            throws CertificateException, KeyStoreException, NoSuchAlgorithmException {\n        X509Certificate rootCert = createCertificateFromBytes(rootCertBytes);\n        synchronized (sLock) {\n            ensureTestInitializedLocked();\n            // Add the cert to be used by the Android Platform Verifier.\n            sTestKeyStore.setCertificateEntry(\n                    \"root_cert_\" + Integer.toString(sTestKeyStore.size()), rootCert);\n            reloadTestTrustManager();\n        }\n    }\n\n    /**\n     * Clear test root certificates in use by the Android Platform verifier.\n     */\n    public static void clearTestRootCertificates()\n            throws NoSuchAlgorithmException, CertificateException, KeyStoreException {\n        synchronized (sLock) {\n            ensureTestInitializedLocked();\n            try {\n                sTestKeyStore.load(null);\n                reloadTestTrustManager();\n            } catch (IOException e) {\n                // No IO operation is attempted.\n            }\n        }\n    }\n\n    /**\n     * Set a test root certificate for use by CertVerifierBuiltin.\n     */\n    public static void setTestRootCertificateForBuiltin(byte[] rootCertBytes)\n            throws NoSuchAlgorithmException, CertificateException, KeyStoreException {\n        X509Certificate rootCert = createCertificateFromBytes(rootCertBytes);\n        synchronized (sLock) {\n            // Add the cert to be used by CertVerifierBuiltin.\n            //\n            // This saves the root so it is returned from getUserAddedRoots, for TrustStoreAndroid.\n            // This is done for the Java EmbeddedTestServer implementation and must run before\n            // native code is loaded, when getUserAddedRoots is first run.\n            sTestRoot = rootCert;\n        }\n    }\n\n    private static final char[] HEX_DIGITS = {\n        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n        'a', 'b', 'c', 'd', 'e', 'f',\n    };\n\n    private static String hashPrincipal(X500Principal principal) throws NoSuchAlgorithmException {\n        // Android hashes a principal as the first four bytes of its MD5 digest, encoded in\n        // lowercase hex and reversed. Verified in 4.2, 4.3, and 4.4.\n        byte[] digest = MessageDigest.getInstance(\"MD5\").digest(principal.getEncoded());\n        char[] hexChars = new char[8];\n        for (int i = 0; i < 4; i++) {\n            hexChars[2 * i] = HEX_DIGITS[(digest[3 - i] >> 4) & 0xf];\n            hexChars[2 * i + 1] = HEX_DIGITS[digest[3 - i] & 0xf];\n        }\n        return new String(hexChars);\n    }\n\n    private static boolean isKnownRoot(X509Certificate root)\n            throws NoSuchAlgorithmException, KeyStoreException {\n        assert Thread.holdsLock(sLock);\n\n        // Could not find the system key store. Conservatively report false.\n        if (sSystemKeyStore == null) return false;\n\n        // Check the in-memory cache first; avoid decoding the anchor from disk\n        // if it has been seen before.\n        Pair<X500Principal, PublicKey> key = new Pair<X500Principal, PublicKey>(\n                root.getSubjectX500Principal(), root.getPublicKey());\n\n        if (sSystemTrustAnchorCache.contains(key)) return true;\n\n        // Note: It is not sufficient to call sSystemKeyStore.getCertificiateAlias. If the server\n        // supplies a copy of a trust anchor, X509TrustManagerExtensions returns the server's\n        // version rather than the system one. getCertificiateAlias will then fail to find an anchor\n        // name. This is fixed upstream in https://android-review.googlesource.com/#/c/91605/\n        //\n        // TODO(davidben): When the change trickles into an Android release, query sSystemKeyStore\n        // directly.\n\n        // System trust anchors are stored under a hash of the principal. In case of collisions,\n        // a number is appended.\n        String hash = hashPrincipal(root.getSubjectX500Principal());\n        for (int i = 0; true; i++) {\n            String alias = hash + '.' + i;\n            if (!new File(sSystemCertificateDirectory, alias).exists()) break;\n\n            Certificate anchor = sSystemKeyStore.getCertificate(\"system:\" + alias);\n            // It is possible for this to return null if the user deleted a trust anchor. In\n            // that case, the certificate remains in the system directory but is also added to\n            // another file. Continue iterating as there may be further collisions after the\n            // deleted anchor.\n            if (anchor == null) continue;\n\n            if (!(anchor instanceof X509Certificate)) {\n                // This should never happen.\n                String className = anchor.getClass().getName();\n                Log.e(TAG, \"Anchor \" + alias + \" not an X509Certificate: \" + className);\n                continue;\n            }\n\n            // If the subject and public key match, this is a system root.\n            X509Certificate anchorX509 = (X509Certificate) anchor;\n            if (root.getSubjectX500Principal().equals(anchorX509.getSubjectX500Principal())\n                    && root.getPublicKey().equals(anchorX509.getPublicKey())) {\n                sSystemTrustAnchorCache.add(key);\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * If an EKU extension is present in the end-entity certificate, it MUST contain either the\n     * anyEKU or serverAuth or netscapeSGC or Microsoft SGC EKUs.\n     *\n     * @return true if there is no EKU extension or if any of the EKU extensions is one of the valid\n     * OIDs for web server certificates.\n     *\n     * TODO(palmer): This can be removed after the equivalent change is made to the Android default\n     * TrustManager and that change is shipped to a large majority of Android users.\n     */\n    static boolean verifyKeyUsage(X509Certificate certificate) throws CertificateException {\n        List<String> ekuOids;\n        try {\n            ekuOids = certificate.getExtendedKeyUsage();\n        } catch (NullPointerException e) {\n            // getExtendedKeyUsage() can crash due to an Android platform bug. This probably\n            // happens when the EKU extension data is malformed so return false here.\n            // See http://crbug.com/233610\n            return false;\n        }\n        if (ekuOids == null) return true;\n\n        for (String ekuOid : ekuOids) {\n            if (ekuOid.equals(OID_TLS_SERVER_AUTH)\n                    || ekuOid.equals(OID_ANY_EKU)\n                    || ekuOid.equals(OID_SERVER_GATED_NETSCAPE)\n                    || ekuOid.equals(OID_SERVER_GATED_MICROSOFT)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Get the list of user-added roots.\n     *\n     * @return DER-encoded list of user-added roots.\n     */\n    public static byte[][] getUserAddedRoots() {\n        List<byte[]> userRootBytes = new ArrayList<byte[]>();\n        synchronized (sLock) {\n            try {\n                ensureInitialized();\n            } catch (NoSuchAlgorithmException | KeyStoreException | CertificateException e) {\n                return new byte[0][];\n            }\n\n            if (sSystemKeyStore == null) {\n                return new byte[0][];\n            }\n\n            try {\n                for (Enumeration<String> aliases = sSystemKeyStore.aliases();\n                        aliases.hasMoreElements();) {\n                    String alias = aliases.nextElement();\n                    // We check if its a user added root by looking at the alias; user roots should\n                    // start with 'user:'. Another way of checking this would be to fetch the\n                    // certificate and call X509TrustManagerExtensions.isUserAddedCertificate(), but\n                    // that is imperfect as well because Keystore and X509TrustManagerExtensions\n                    // are actually implemented by two separate systems, and mixing them probably\n                    // works but might not in all cases.\n                    //\n                    // Also, to call X509TrustManagerExtensions.isUserAddedCertificate() we'd need\n                    // to call Keystore.getCertificate on all of the roots, even the system ones.\n                    //\n                    // Since there's no perfect way of doing this we go with the simpler and more\n                    // performant one.\n                    if (alias.startsWith(\"user:\")) {\n                        try {\n                            Certificate anchor = sSystemKeyStore.getCertificate(alias);\n                            if (!(anchor instanceof X509Certificate)) {\n                                Log.w(TAG, \"alias: \" + alias + \" is not a X509 Cert, skipping\");\n                                continue;\n                            }\n                            X509Certificate anchorX509 = (X509Certificate) anchor;\n                            userRootBytes.add(anchorX509.getEncoded());\n                        } catch (KeyStoreException e) {\n                            Log.e(TAG, \"Error reading cert with alias %s, error: %s\", alias, e);\n                        } catch (CertificateEncodingException e) {\n                            Log.e(TAG, \"Error encoding cert with alias %s, error: %s\", alias, e);\n                        }\n                    }\n                }\n            } catch (KeyStoreException e) {\n                Log.e(TAG, \"Error reading cert aliases: %s\", e);\n                return new byte[0][];\n            }\n\n            if (sTestRoot != null) {\n                try {\n                    userRootBytes.add(sTestRoot.getEncoded());\n                } catch (CertificateEncodingException e) {\n                    Log.e(TAG, \"Error encoding test root cert, error %s\", e);\n                }\n            }\n        }\n\n        return userRootBytes.toArray(new byte[0][]);\n    }\n\n    public static AndroidCertVerifyResult verifyServerCertificates(byte[][] certChain,\n                                                                   String authType,\n                                                                   String host)\n            throws KeyStoreException, NoSuchAlgorithmException {\n        if (certChain == null || certChain.length == 0 || certChain[0] == null) {\n            throw new IllegalArgumentException(\"Expected non-null and non-empty certificate \"\n                    + \"chain passed as |certChain|. |certChain|=\" + Arrays.deepToString(certChain));\n        }\n\n\n        try {\n            ensureInitialized();\n        } catch (CertificateException e) {\n            return new AndroidCertVerifyResult(CertVerifyStatusAndroid.FAILED);\n        }\n\n        List<X509Certificate> serverCertificatesList = new ArrayList<X509Certificate>();\n        try {\n            serverCertificatesList.add(createCertificateFromBytes(certChain[0]));\n        } catch (CertificateException e) {\n            return new AndroidCertVerifyResult(CertVerifyStatusAndroid.UNABLE_TO_PARSE);\n        }\n        for (int i = 1; i < certChain.length; ++i) {\n            try {\n                serverCertificatesList.add(createCertificateFromBytes(certChain[i]));\n            } catch (CertificateException e) {\n                Log.w(TAG, \"intermediate \" + i + \" failed parsing\");\n            }\n        }\n        X509Certificate[] serverCertificates =\n                serverCertificatesList.toArray(new X509Certificate[serverCertificatesList.size()]);\n\n        // Expired and not yet valid certificates would be rejected by the trust managers, but the\n        // trust managers report all certificate errors using the general CertificateException. In\n        // order to get more granular error information, cert validity time range is being checked\n        // separately.\n        try {\n            serverCertificates[0].checkValidity();\n            if (!verifyKeyUsage(serverCertificates[0])) {\n                return new AndroidCertVerifyResult(\n                        CertVerifyStatusAndroid.INCORRECT_KEY_USAGE);\n            }\n        } catch (CertificateExpiredException e) {\n            return new AndroidCertVerifyResult(CertVerifyStatusAndroid.EXPIRED);\n        } catch (CertificateNotYetValidException e) {\n            return new AndroidCertVerifyResult(CertVerifyStatusAndroid.NOT_YET_VALID);\n        } catch (CertificateException e) {\n            return new AndroidCertVerifyResult(CertVerifyStatusAndroid.FAILED);\n        }\n\n        synchronized (sLock) {\n            // If no trust manager was found, fail without crashing on the null pointer.\n            if (sDefaultTrustManager == null) {\n                return new AndroidCertVerifyResult(CertVerifyStatusAndroid.FAILED);\n            }\n\n            List<X509Certificate> verifiedChain = null;\n            try {\n                verifiedChain = checkServerTrustedIgnoringRuntimeException(\n                        sDefaultTrustManager, serverCertificates, authType, host);\n            } catch (CertificateException eDefaultManager) {\n                if (sTestTrustManager != null) {\n                    try {\n                        verifiedChain = checkServerTrustedIgnoringRuntimeException(\n                                sTestTrustManager, serverCertificates, authType, host);\n                    } catch (CertificateException eTestManager) {\n                        // See following if block.\n                    }\n                }\n\n                if (verifiedChain == null) {\n                    // Neither of the trust managers confirms the validity of the certificate chain,\n                    // log the error message returned by the system trust manager.\n                    Log.i(TAG, \"Failed to validate the certificate chain, error: \"\n                            + eDefaultManager.getMessage());\n                    return new AndroidCertVerifyResult(\n                            CertVerifyStatusAndroid.NO_TRUSTED_ROOT);\n                }\n            }\n\n            boolean isIssuedByKnownRoot = false;\n            if (verifiedChain.size() > 0) {\n                X509Certificate root = verifiedChain.get(verifiedChain.size() - 1);\n                isIssuedByKnownRoot = isKnownRoot(root);\n            }\n\n            return new AndroidCertVerifyResult(CertVerifyStatusAndroid.OK,\n                                               isIssuedByKnownRoot, verifiedChain);\n        }\n    }\n\n    @NativeMethods\n    interface Natives {\n        /**\n         * Notify the native net::CertDatabase instance that the system database has been updated.\n         */\n        void notifyTrustStoreChanged();\n        void notifyClientCertStoreChanged();\n    }\n}", "exampleID": 1007, "dataset": "digest", "filepath": "/Users/xxx/repos/active_learning_interface/GithubExamples/MessageDigest/X509Util.java"}, {"url": "dummy", "rawCode": "private keys.\n */\npublic class PEMFile {\n\n    private static final StringManager sm = StringManager.getManager(PEMFile.class);\n\n    private static final byte[] OID_EC_PUBLIC_KEY =\n            new byte[] { 0x06, 0x07, 0x2A, (byte) 0x86, 0x48, (byte) 0xCE, 0x3D, 0x02, 0x01 };\n\n    private static final String PBES2 = \"PBES2\";\n\n\n\n    private byte[] deriveKey(int keyLength, String password, byte[] iv) throws NoSuchAlgorithmException {\n        // PBKDF1-MD5 as specified by PKCS#5\n        byte[] key = new byte[keyLength];\n\n        int insertPosition = 0;\n\n        MessageDigest digest = MessageDigest.getInstance(\"MD5\");\n        byte[] pw = password.getBytes(StandardCharsets.UTF_8);\n\n        while (insertPosition < keyLength) {\n            digest.update(pw);\n            digest.update(iv, 0, 8);\n            byte[] round = digest.digest();\n            digest.update(round);\n\n            System.arraycopy(round, 0, key, insertPosition, Math.min(keyLength - insertPosition, round.length));\n            insertPosition += round.length;\n        }\n\n        return key;\n    }\n\n\n\n    private enum Format {\n        PKCS1,\n        PKCS8,\n        RFC5915\n    }\n}", "exampleID": 1008, "dataset": "digest", "filepath": "/Users/xxx/repos/active_learning_interface/GithubExamples/MessageDigest/PEMFile.java"}, {"url": "dummy", "rawCode": "public final class UUID implements java.io.Serializable, Comparable<UUID> {\n\n    /**\n     * Explicit serialVersionUID for interoperability.\n     */\n    @java.io.Serial\n    private static final long serialVersionUID = -4856846361193249489L;\n\n    /*\n     * The most significant 64 bits of this UUID.\n     *\n     * @serial\n     */\n    private final long mostSigBits;\n\n    /*\n     * The least significant 64 bits of this UUID.\n     *\n     * @serial\n     */\n    private final long leastSigBits;\n\n    private static final JavaLangAccess jla = SharedSecrets.getJavaLangAccess();\n\n    /*\n     * The random number generator used by this class to create random\n     * based UUIDs. In a holder class to defer initialization until needed.\n     */\n    private static class Holder {\n        static final SecureRandom numberGenerator = new SecureRandom();\n    }\n\n    // Constructors and Factories\n\n   \n    /**\n     * Static factory to retrieve a type 3 (name based) {@code UUID} based on\n     * the specified byte array.\n     *\n     * @param  name\n     *         A byte array to be used to construct a {@code UUID}\n     *\n     * @return  A {@code UUID} generated from the specified array\n     */\n    public static UUID nameUUIDFromBytes(byte[] name) {\n        MessageDigest md;\n        try {\n            md = MessageDigest.getInstance(\"MD5\");\n        } catch (NoSuchAlgorithmException nsae) {\n            throw new InternalError(\"MD5 not supported\", nsae);\n        }\n        byte[] md5Bytes = md.digest(name);\n        md5Bytes[6]  &= 0x0f;  /* clear version        */\n        md5Bytes[6]  |= 0x30;  /* set to version 3     */\n        md5Bytes[8]  &= 0x3f;  /* clear variant        */\n        md5Bytes[8]  |= (byte) 0x80;  /* set to IETF variant  */\n        return new UUID(md5Bytes);\n    }\n\n}", "exampleID": 1009, "dataset": "digest", "filepath": "/Users/xxx/repos/active_learning_interface/GithubExamples/MessageDigest/UUID.java"}, {"url": "dummy", "rawCode": "public class Utilities {\n\n    public static Pattern pattern = Pattern.compile(\"[\\\\-0-9]+\");\n    public static SecureRandom random = new SecureRandom();\n\n    public static volatile DispatchQueue stageQueue = new DispatchQueue(\"stageQueue\");\n    public static volatile DispatchQueue globalQueue = new DispatchQueue(\"globalQueue\");\n    public static volatile DispatchQueue searchQueue = new DispatchQueue(\"searchQueue\");\n    public static volatile DispatchQueue phoneBookQueue = new DispatchQueue(\"phoneBookQueue\");\n\n    final protected static char[] hexArray = \"0123456789ABCDEF\".toCharArray();\n\n  \n\n    public static byte[] computeSHA1(byte[] convertme, int offset, int len) {\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n            md.update(convertme, offset, len);\n            return md.digest();\n        } catch (Exception e) {\n            FileLog.e(e);\n        }\n        return new byte[20];\n    }\n\n    public static byte[] computeSHA1(ByteBuffer convertme, int offset, int len) {\n        int oldp = convertme.position();\n        int oldl = convertme.limit();\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n            convertme.position(offset);\n            convertme.limit(len);\n            md.update(convertme);\n            return md.digest();\n        } catch (Exception e) {\n            FileLog.e(e);\n        } finally {\n            convertme.limit(oldl);\n            convertme.position(oldp);\n        }\n        return new byte[20];\n    }\n\n\n\n    public static byte[] computeSHA256(byte[] convertme, int offset, int len) {\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n            md.update(convertme, offset, len);\n            return md.digest();\n        } catch (Exception e) {\n            FileLog.e(e);\n        }\n        return new byte[32];\n    }\n\n    public static byte[] computeSHA256(byte[]... args) {\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n            for (int a = 0; a < args.length; a++) {\n                md.update(args[a], 0, args[a].length);\n            }\n            return md.digest();\n        } catch (Exception e) {\n            FileLog.e(e);\n        }\n        return new byte[32];\n    }\n\n    public static byte[] computeSHA512(byte[] convertme) {\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"SHA-512\");\n            md.update(convertme, 0, convertme.length);\n            return md.digest();\n        } catch (Exception e) {\n            FileLog.e(e);\n        }\n        return new byte[64];\n    }\n\n    public static byte[] computeSHA512(byte[] convertme, byte[] convertme2) {\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"SHA-512\");\n            md.update(convertme, 0, convertme.length);\n            md.update(convertme2, 0, convertme2.length);\n            return md.digest();\n        } catch (Exception e) {\n            FileLog.e(e);\n        }\n        return new byte[64];\n    }\n\n    public static byte[] computePBKDF2(byte[] password, byte[] salt) {\n        byte[] dst = new byte[64];\n        Utilities.pbkdf2(password, salt, dst, 100000);\n        return dst;\n    }\n\n    public static byte[] computeSHA512(byte[] convertme, byte[] convertme2, byte[] convertme3) {\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"SHA-512\");\n            md.update(convertme, 0, convertme.length);\n            md.update(convertme2, 0, convertme2.length);\n            md.update(convertme3, 0, convertme3.length);\n            return md.digest();\n        } catch (Exception e) {\n            FileLog.e(e);\n        }\n        return new byte[64];\n    }\n\n    public static byte[] computeSHA256(byte[] b1, int o1, int l1, ByteBuffer b2, int o2, int l2) {\n        int oldp = b2.position();\n        int oldl = b2.limit();\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n            md.update(b1, o1, l1);\n            b2.position(o2);\n            b2.limit(l2);\n            md.update(b2);\n            return md.digest();\n        } catch (Exception e) {\n            FileLog.e(e);\n        } finally {\n            b2.limit(oldl);\n            b2.position(oldp);\n        }\n        return new byte[32];\n    }\n\n    public static String MD5(String md5) {\n        if (md5 == null) {\n            return null;\n        }\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[] array = md.digest(AndroidUtilities.getStringBytes(md5));\n            StringBuilder sb = new StringBuilder();\n            for (int a = 0; a < array.length; a++) {\n                sb.append(Integer.toHexString((array[a] & 0xFF) | 0x100).substring(1, 3));\n            }\n            return sb.toString();\n        } catch (NoSuchAlgorithmException e) {\n            FileLog.e(e);\n        }\n        return null;\n    }\n}", "exampleID": 1010, "dataset": "digest", "filepath": "/Users/xxx/repos/active_learning_interface/GithubExamples/MessageDigest/Utilities.java"}, {"url": "dummy", "rawCode": "public class Schema\n{\n    private static final Logger logger = LoggerFactory.getLogger(Schema.class);\n\n    public static final Schema instance = new Schema();\n\n    /**\n     * longest permissible KS or CF name.  Our main concern is that filename not be more than 255 characters;\n     * the filename will contain both the KS and CF names. Since non-schema-name components only take up\n     * ~64 characters, we could allow longer names than this, but on Windows, the entire path should be not greater than\n     * 255 characters, so a lower limit here helps avoid problems.  See CASSANDRA-4110.\n     */\n    public static final int NAME_LENGTH = 48;\n\n    /* metadata map for faster keyspace lookup */\n    private final Map<String, KSMetaData> keyspaces = new NonBlockingHashMap<String, KSMetaData>();\n\n    /* Keyspace objects, one per keyspace. Only one instance should ever exist for any given keyspace. */\n    private final Map<String, Keyspace> keyspaceInstances = new NonBlockingHashMap<String, Keyspace>();\n\n    /* metadata map for faster ColumnFamily lookup */\n    private final BiMap<Pair<String, String>, UUID> cfIdMap = HashBiMap.create();\n\n    public final UTMetaData userTypes = new UTMetaData();\n\n    private volatile UUID version;\n\n    // 59adb24e-f3cd-3e02-97f0-5b395827453f\n    public static final UUID emptyVersion;\n    public static final ImmutableSet<String> systemKeyspaceNames = ImmutableSet.of(Keyspace.SYSTEM_KS);\n\n    static\n    {\n        try\n        {\n            emptyVersion = UUID.nameUUIDFromBytes(MessageDigest.getInstance(\"MD5\").digest());\n        }\n        catch (NoSuchAlgorithmException e)\n        {\n            throw new AssertionError();\n        }\n    }\n\n   \n\n    /**\n     * Read schema from system keyspace and calculate MD5 digest of every row, resulting digest\n     * will be converted into UUID which would act as content-based version of the schema.\n     */\n    public void updateVersion()\n    {\n        try\n        {\n            MessageDigest versionDigest = MessageDigest.getInstance(\"MD5\");\n\n            for (Row row : SystemKeyspace.serializedSchema())\n            {\n                if (invalidSchemaRow(row) || ignoredSchemaRow(row))\n                    continue;\n\n                row.cf.updateDigest(versionDigest);\n            }\n\n            version = UUID.nameUUIDFromBytes(versionDigest.digest());\n            SystemKeyspace.updateSchemaVersion(version);\n        }\n        catch (Exception e)\n        {\n            throw new RuntimeException(e);\n        }\n    }\n\n}", "exampleID": 1011, "dataset": "digest", "filepath": "/Users/xxx/repos/active_learning_interface/GithubExamples/MessageDigest/Schema.java"}, {"url": "dummy", "rawCode": "public class FileUtil extends cn.hutool.core.io.FileUtil {\n\n    private static final Logger log = LoggerFactory.getLogger(FileUtil.class);\n\n    /**\n     * \u7cfb\u7edf\u4e34\u65f6\u76ee\u5f55\n     * <br>\n     * windows \u5305\u542b\u8def\u5f84\u5206\u5272\u7b26\uff0c\u4f46Linux \u4e0d\u5305\u542b,\n     * \u5728windows \\\\==\\ \u524d\u63d0\u4e0b\uff0c\n     * \u4e3a\u5b89\u5168\u8d77\u89c1 \u540c\u610f\u62fc\u88c5 \u8def\u5f84\u5206\u5272\u7b26\uff0c\n     * <pre>\n     *       java.io.tmpdir\n     *       windows : C:\\Users/xxx\\AppData\\Local\\Temp\\\n     *       linux: /temp\n     * </pre>\n     */\n    public static final String SYS_TEM_DIR = System.getProperty(\"java.io.tmpdir\") + File.separator;\n    /**\n     * \u5b9a\u4e49GB\u7684\u8ba1\u7b97\u5e38\u91cf\n     */\n    private static final int GB = 1024 * 1024 * 1024;\n    /**\n     * \u5b9a\u4e49MB\u7684\u8ba1\u7b97\u5e38\u91cf\n     */\n    private static final int MB = 1024 * 1024;\n    /**\n     * \u5b9a\u4e49KB\u7684\u8ba1\u7b97\u5e38\u91cf\n     */\n    private static final int KB = 1024;\n\n    /**\n     * \u683c\u5f0f\u5316\u5c0f\u6570\n     */\n    private static final DecimalFormat DF = new DecimalFormat(\"0.00\");\n\n    public static final String IMAGE = \"\u56fe\u7247\";\n    public static final String TXT = \"\u6587\u6863\";\n    public static final String MUSIC = \"\u97f3\u4e50\";\n    public static final String VIDEO = \"\u89c6\u9891\";\n    public static final String OTHER = \"\u5176\u4ed6\";\n\n\n    private static String getMd5(byte[] bytes) {\n        // 16\u8fdb\u5236\u5b57\u7b26\n        char[] hexDigits = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};\n        try {\n            MessageDigest mdTemp = MessageDigest.getInstance(\"MD5\");\n            mdTemp.update(bytes);\n            byte[] md = mdTemp.digest();\n            int j = md.length;\n            char[] str = new char[j * 2];\n            int k = 0;\n            // \u79fb\u4f4d \u8f93\u51fa\u5b57\u7b26\u4e32\n            for (byte byte0 : md) {\n                str[k++] = hexDigits[byte0 >>> 4 & 0xf];\n                str[k++] = hexDigits[byte0 & 0xf];\n            }\n            return new String(str);\n        } catch (Exception e) {\n            log.error(e.getMessage(), e);\n        }\n        return null;\n    }\n\n}", "exampleID": 1012, "dataset": "digest", "filepath": "/Users/xxx/repos/active_learning_interface/GithubExamples/MessageDigest/FileUtil.java"}, {"url": "dummy", "rawCode": "public class Utils {\n\n   \n    /**\n     * Compute the SHA-256 hash of the given byte array\n     * @param data the byte array to hash\n     * @return the hashed byte array\n     * @throws NoSuchAlgorithmException\n     */\n    public static byte[] sha256Hash(byte[] data) throws NoSuchAlgorithmException {\n        MessageDigest messageDigest = MessageDigest.getInstance(\"SHA-256\");\n        return messageDigest.digest(data);\n    }\n\n   \n\n}", "exampleID": 1013, "dataset": "digest", "filepath": "/Users/xxx/repos/active_learning_interface/GithubExamples/MessageDigest/Utils.java"}, {"url": "dummy", "rawCode": "public class MD5Util {\n    /**\n    * @Description:    MD5\u52a0\u7801 \u751f\u621032\u4f4dmd5\u7801\n    * @Author:         caoru\n    * @CreateDate:     2018/8/9 14:21\n    */\n    public static String string2MD5(String inStr){\n        MessageDigest md5 = null;\n        try{\n            md5 = MessageDigest.getInstance(\"MD5\");\n        }catch (Exception e){\n            System.out.println(e.toString());\n            e.printStackTrace();\n            return \"\";\n        }\n        char[] charArray = inStr.toCharArray();\n        byte[] byteArray = new byte[charArray.length];\n\n        for (int i = 0; i < charArray.length; i++)\n            byteArray[i] = (byte) charArray[i];\n        byte[] md5Bytes = md5.digest(byteArray);\n        StringBuffer hexValue = new StringBuffer();\n        for (int i = 0; i < md5Bytes.length; i++){\n            int val = ((int) md5Bytes[i]) & 0xff;\n            if (val < 16)\n                hexValue.append(\"0\");\n            hexValue.append(Integer.toHexString(val));\n        }\n        return hexValue.toString();\n\n    }\n\n\n}", "exampleID": 1014, "dataset": "digest", "filepath": "/Users/xxx/repos/active_learning_interface/GithubExamples/MessageDigest/MD5Util.java"}, {"url": "dummy", "rawCode": "public class IdeErrorsDialog extends DialogWrapper implements MessagePoolListener, TypeSafeDataProvider {\n  private static final Logger LOG = Logger.getInstance(IdeErrorsDialog.class.getName());\n  private final boolean myInternalMode;\n  @NonNls private static final String ACTIVE_TAB_OPTION = IdeErrorsDialog.class.getName() + \"activeTab\";\n  public static DataKey<String> CURRENT_TRACE_KEY = DataKey.create(\"current_stack_trace_key\");\n  public static final int COMPONENTS_WIDTH = 670;\n  public static Collection<Developer> ourDevelopersList = Collections.emptyList();\n\n  private JPanel myContentPane;\n  private JPanel myBackButtonPanel;\n  private HyperlinkLabel.Croppable myInfoLabel;\n  private JPanel myNextButtonPanel;\n  private JPanel myTabsPanel;\n  private JLabel myCountLabel;\n  private HyperlinkLabel.Croppable myForeignPluginWarningLabel;\n  private HyperlinkLabel.Croppable myDisableLink;\n  private JPanel myCredentialsPanel;\n  private HyperlinkLabel myCredentialsLabel;\n  private JPanel myForeignPluginWarningPanel;\n  private JPanel myAttachmentWarningPanel;\n  private HyperlinkLabel myAttachmentWarningLabel;\n\n  private int myIndex = 0;\n  private final List<ArrayList<AbstractMessage>> myMergedMessages = new ArrayList<ArrayList<AbstractMessage>>();\n  private List<AbstractMessage> myRawMessages;\n  private final MessagePool myMessagePool;\n  private HeaderlessTabbedPane myTabs;\n  @Nullable\n  private CommentsTabForm myCommentsTabForm;\n  private DetailsTabForm myDetailsTabForm;\n  private AttachmentsTabForm myAttachmentsTabForm;\n\n  private ClearFatalsAction myClearAction = new ClearFatalsAction();\n  private BlameAction myBlameAction;\n  @Nullable\n  private AnalyzeAction myAnalyzeAction;\n  private boolean myMute;\n\n  \n\n  private static String md5(String buffer, @NonNls String key) throws NoSuchAlgorithmException {\n    MessageDigest md5 = MessageDigest.getInstance(\"MD5\");\n    md5.update(buffer.getBytes());\n    byte[] code = md5.digest(key.getBytes());\n    BigInteger bi = new BigInteger(code).abs();\n    return bi.abs().toString(16);\n  }\n\n}", "exampleID": 1015, "dataset": "digest", "filepath": "/Users/xxx/repos/active_learning_interface/GithubExamples/MessageDigest/IdeErrorsDialog.java"}, {"url": "dummy", "rawCode": "public class TieredStoreUtil {\n\n    private static final Logger logger = LoggerFactory.getLogger(TieredStoreUtil.TIERED_STORE_LOGGER_NAME);\n\n    public static final long BYTE = 1L;\n    public static final long KB = BYTE << 10;\n    public static final long MB = KB << 10;\n    public static final long GB = MB << 10;\n    public static final long TB = GB << 10;\n    public static final long PB = TB << 10;\n    public static final long EB = PB << 10;\n\n    public static final String TIERED_STORE_LOGGER_NAME = \"RocketmqTieredStore\";\n    public static final String RMQ_SYS_TIERED_STORE_INDEX_TOPIC = \"rmq_sys_INDEX\";\n    public final static int MSG_ID_LENGTH = 8 + 8;\n\n    private static final DecimalFormat DEC_FORMAT = new DecimalFormat(\"#.##\");\n\n    private final static List<String> SYSTEM_TOPIC_LIST = new LinkedList<String>() {\n        {\n            add(RMQ_SYS_TIERED_STORE_INDEX_TOPIC);\n        }\n    };\n\n    private final static List<String> SYSTEM_TOPIC_WHITE_LIST = new LinkedList<>();\n\n    @VisibleForTesting\n    public volatile static TieredMetadataStore metadataStoreInstance;\n\n    public static String getHash(String str) {\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            md.update(str.getBytes(StandardCharsets.UTF_8));\n            byte[] digest = md.digest();\n            return String.format(\"%032x\", new BigInteger(1, digest)).substring(0, 8);\n        } catch (Exception ignore) {\n            return \"\";\n        }\n    }", "exampleID": 1016, "dataset": "digest", "filepath": "/Users/xxx/repos/active_learning_interface/GithubExamples/MessageDigest/TieredStoreUtil.java"}, {"url": "dummy", "rawCode": "public class UUIDGen\n{\n    // A grand day! millis at 00:00:00.000 15 Oct 1582.\n    private static final long START_EPOCH = -12219292800000L;\n    private static final long clockSeqAndNode = makeClockSeqAndNode();\n\n    /*\n     * The min and max possible lsb for a UUID.\n     * Note that his is not 0 and all 1's because Cassandra TimeUUIDType\n     * compares the lsb parts as a signed byte array comparison. So the min\n     * value is 8 times -128 and the max is 8 times +127.\n     *\n     * Note that we ignore the uuid variant (namely, MIN_CLOCK_SEQ_AND_NODE\n     * have variant 2 as it should, but MAX_CLOCK_SEQ_AND_NODE have variant 0).\n     * I don't think that has any practical consequence and is more robust in\n     * case someone provides a UUID with a broken variant.\n     */\n    private static final long MIN_CLOCK_SEQ_AND_NODE = 0x8080808080808080L;\n    private static final long MAX_CLOCK_SEQ_AND_NODE = 0x7f7f7f7f7f7f7f7fL;\n\n    // placement of this singleton is important.  It needs to be instantiated *AFTER* the other statics.\n    private static final UUIDGen instance = new UUIDGen();\n\n    private long lastNanos;\n\n\n    private static byte[] hash(Collection<InetAddress> data)\n    {\n        try\n        {\n            MessageDigest messageDigest = MessageDigest.getInstance(\"MD5\");\n            for(InetAddress addr : data)\n                messageDigest.update(addr.getAddress());\n\n            return messageDigest.digest();\n        }\n        catch (NoSuchAlgorithmException nsae)\n        {\n            throw new RuntimeException(nsae);\n        }\n    }\n}", "exampleID": 1017, "dataset": "digest", "filepath": "/Users/xxx/repos/active_learning_interface/GithubExamples/MessageDigest/UUIDGen.java"}, {"url": "dummy", "rawCode": "public class ArmsUtils {\n    static public Toast mToast;\n\n    \n    /**\n     * MD5\n     *\n     * @param string\n     * @return\n     * @throws Exception\n     */\n    public static String encodeToMD5(String string) {\n        byte[] hash = new byte[0];\n        try {\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\n                hash = MessageDigest.getInstance(\"MD5\").digest(\n                        string.getBytes(StandardCharsets.UTF_8));\n            } else {\n                hash = MessageDigest.getInstance(\"MD5\").digest(\n                        string.getBytes(\"UTF-8\"));\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        StringBuilder hex = new StringBuilder(hash.length * 2);\n        for (byte b : hash) {\n            if ((b & 0xFF) < 0x10) {\n                hex.append(\"0\");\n            }\n            hex.append(Integer.toHexString(b & 0xFF));\n        }\n        return hex.toString();\n    }\n\n}", "exampleID": 1018, "dataset": "digest", "filepath": "/Users/xxx/repos/active_learning_interface/GithubExamples/MessageDigest/ArmsUtils.java"}, {"url": "dummy", "rawCode": "public class Test_SO1 {\n  public static String getFileChecksum(String file) throws IOException, NoSuchAlgorithmException {\n    FileInputStream fis = new FileInputStream(file);\n    byte[] byteArray = new byte[1024];\n    int bytesCount = 0;\n\n    MessageDigest digest = MessageDigest.getInstance(\"MD5\");\n\n    while ((bytesCount = fis.read(byteArray)) != -1) {\n      digest.update(byteArray, 0, bytesCount);\n    }\n\n    fis.close();\n\n    byte[] bytes = digest.digest();\n    StringBuilder sb = new StringBuilder();\n    for (byte b : bytes) {\n      sb.append(Integer.toString((b & 0xff) + 0x100, 16).substring(1));\n    }\n    return sb.toString();\n  }\n\n}", "exampleID": 1019, "dataset": "digest", "filepath": "/Users/xxx/repos/active_learning_interface/GithubExamples/MessageDigest/Test_SO1.java", "test": true}, {"url": "dummy", "rawCode": "public class SeaweedWrite {\n\n    private static final Logger LOG = LoggerFactory.getLogger(SeaweedWrite.class);\n\n    private static final SecureRandom random = new SecureRandom();\n\n   \n\n    private static String multipartUpload(String targetUrl,\n                                          String auth,\n                                          final byte[] bytes,\n                                          final long bytesOffset, final long bytesLength,\n                                          byte[] cipherKey) throws IOException {\n        MessageDigest md = null;\n        try {\n            md = MessageDigest.getInstance(\"MD5\");\n        } catch (NoSuchAlgorithmException e) {\n        }\n\n        InputStream inputStream = null;\n        if (cipherKey == null || cipherKey.length == 0) {\n            md.update(bytes, (int) bytesOffset, (int) bytesLength);\n            inputStream = new ByteArrayInputStream(bytes, (int) bytesOffset, (int) bytesLength);\n        } else {\n            try {\n                byte[] encryptedBytes = SeaweedCipher.encrypt(bytes, (int) bytesOffset, (int) bytesLength, cipherKey);\n                md.update(encryptedBytes);\n                inputStream = new ByteArrayInputStream(encryptedBytes, 0, encryptedBytes.length);\n            } catch (Exception e) {\n                throw new IOException(\"fail to encrypt data\", e);\n            }\n        }\n\n        HttpPost post = new HttpPost(targetUrl);\n        if (auth != null && auth.length() != 0) {\n            post.addHeader(\"Authorization\", \"BEARER \" + auth);\n        }\n        post.addHeader(\"Content-MD5\", Base64.getEncoder().encodeToString(md.digest()));\n\n        post.setEntity(MultipartEntityBuilder.create()\n                .setMode(HttpMultipartMode.BROWSER_COMPATIBLE)\n                .addBinaryBody(\"upload\", inputStream)\n                .build());\n\n        CloseableHttpResponse response = SeaweedUtil.getClosableHttpClient().execute(post);\n\n        try {\n            if (response.getStatusLine().getStatusCode() / 100 != 2) {\n                if (response.getEntity().getContentType() != null && response.getEntity().getContentType().getValue().equals(\"application/json\")) {\n                    throw new IOException(EntityUtils.toString(response.getEntity(), \"UTF-8\"));\n                } else {\n                    throw new IOException(response.getStatusLine().getReasonPhrase());\n                }\n            }\n\n            String etag = response.getLastHeader(\"ETag\").getValue();\n\n            if (etag != null && etag.startsWith(\"\\\"\") && etag.endsWith(\"\\\"\")) {\n                etag = etag.substring(1, etag.length() - 1);\n            }\n\n            EntityUtils.consume(response.getEntity());\n\n            return etag;\n        } finally {\n            response.close();\n            post.releaseConnection();\n        }\n\n    }\n\n}", "exampleID": 1020, "dataset": "digest", "filepath": "/Users/xxx/repos/active_learning_interface/GithubExamples/MessageDigest/SeaweedWrite.java"}, {"url": "dummy", "rawCode": "public class UUIDGenerator {\n\n    private static final char[] hexArray = \"0123456789ABCDEF\".toCharArray();\n\n\n    public static UUID generateType5UUID(String name) {\n\n        try {\n\n            byte[] bytes = name.getBytes(StandardCharsets.UTF_8);\n            MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n\n            byte[] hash = md.digest(bytes);\n\n            long msb = peekLong(hash, 0, ByteOrder.BIG_ENDIAN);\n            long lsb = peekLong(hash, 8, ByteOrder.BIG_ENDIAN);\n            // Set the version field\n            msb &= ~(0xfL << 12);\n            msb |= ((long) 5) << 12;\n            // Set the variant field to 2\n            lsb &= ~(0x3L << 62);\n            lsb |= 2L << 62;\n            return new UUID(msb, lsb);\n\n        } catch (NoSuchAlgorithmException e) {\n            throw new AssertionError(e);\n        }\n    }\n\n}", "exampleID": 1021, "dataset": "digest", "filepath": "/Users/xxx/repos/active_learning_interface/GithubExamples/MessageDigest/UUIDGenerator.java"}, {"url": "dummy", "rawCode": "public class GlyphPage {\n\tprivate final UnicodeFont unicodeFont;\n\tprivate final int pageWidth, pageHeight;\n\tprivate final Texture texture;\n\tprivate final List<Glyph> pageGlyphs = new ArrayList(32);\n\tprivate final List<String> hashes = new ArrayList(32);\n\tArray<Row> rows = new Array();\n\n\t\n\t/** Loads a single glyph to the backing texture, if it fits. */\n\tprivate boolean renderGlyph (Glyph glyph, int pageX, int pageY, int width, int height) {\n\t\tscratchGraphics.setComposite(AlphaComposite.Clear);\n\t\tscratchGraphics.fillRect(0, 0, MAX_GLYPH_SIZE, MAX_GLYPH_SIZE);\n\t\tscratchGraphics.setComposite(AlphaComposite.SrcOver);\n\n\t\tByteBuffer glyphPixels = scratchByteBuffer;\n\t\tint format;\n\t\tif (unicodeFont.getRenderType() == RenderType.FreeType && unicodeFont.bitmapFont != null) {\n\t\t\tBitmapFontData data = unicodeFont.bitmapFont.getData();\n\t\t\tBitmapFont.Glyph g = data.getGlyph((char)glyph.getCodePoint());\n\t\t\tPixmap fontPixmap = unicodeFont.bitmapFont.getRegions().get(g.page).getTexture().getTextureData().consumePixmap();\n\n\t\t\tint fontWidth = fontPixmap.getWidth();\n\t\t\tint padTop = unicodeFont.getPaddingTop(), padBottom = unicodeFont.getPaddingBottom();\n\t\t\tint padLeftBytes = unicodeFont.getPaddingLeft() * 4;\n\t\t\tint padXBytes = padLeftBytes + unicodeFont.getPaddingRight() * 4;\n\t\t\tint glyphRowBytes = width * 4, fontRowBytes = g.width * 4;\n\n\t\t\tByteBuffer fontPixels = fontPixmap.getPixels();\n\t\t\tbyte[] row = new byte[glyphRowBytes];\n\t\t\t((Buffer)glyphPixels).position(0);\n\t\t\tfor (int i = 0; i < padTop; i++)\n\t\t\t\tglyphPixels.put(row);\n\t\t\t((Buffer)glyphPixels).position((height - padBottom) * glyphRowBytes);\n\t\t\tfor (int i = 0; i < padBottom; i++)\n\t\t\t\tglyphPixels.put(row);\n\t\t\t((Buffer)glyphPixels).position(padTop * glyphRowBytes);\n\t\t\tfor (int y = 0, n = g.height; y < n; y++) {\n\t\t\t\t((Buffer)fontPixels).position(((g.srcY + y) * fontWidth + g.srcX) * 4);\n\t\t\t\tfontPixels.get(row, padLeftBytes, fontRowBytes);\n\t\t\t\tglyphPixels.put(row);\n\t\t\t}\n\t\t\t((Buffer)fontPixels).position(0);\n\t\t\t((Buffer)glyphPixels).position(height * glyphRowBytes);\n\t\t\t((Buffer)glyphPixels).flip();\n\t\t\tformat = GL11.GL_RGBA;\n\t\t} else {\n\t\t\t// Draw the glyph to the scratch image using Java2D.\n\t\t\tif (unicodeFont.getRenderType() == RenderType.Native) {\n\t\t\t\tfor (Iterator iter = unicodeFont.getEffects().iterator(); iter.hasNext();) {\n\t\t\t\t\tEffect effect = (Effect)iter.next();\n\t\t\t\t\tif (effect instanceof ColorEffect) scratchGraphics.setColor(((ColorEffect)effect).getColor());\n\t\t\t\t}\n\t\t\t\tscratchGraphics.setColor(java.awt.Color.white);\n\t\t\t\tscratchGraphics.setFont(unicodeFont.getFont());\n\t\t\t\tscratchGraphics.drawString(\"\" + (char)glyph.getCodePoint(), 0, unicodeFont.getAscent());\n\t\t\t} else if (unicodeFont.getRenderType() == RenderType.Java) {\n\t\t\t\tscratchGraphics.setColor(java.awt.Color.white);\n\t\t\t\tfor (Iterator iter = unicodeFont.getEffects().iterator(); iter.hasNext();)\n\t\t\t\t\t((Effect)iter.next()).draw(scratchImage, scratchGraphics, unicodeFont, glyph);\n\t\t\t\tglyph.setShape(null); // The shape will never be needed again.\n\t\t\t}\n\n\t\t\twidth = Math.min(width, texture.getWidth());\n\t\t\theight = Math.min(height, texture.getHeight());\n\n\t\t\tWritableRaster raster = scratchImage.getRaster();\n\t\t\tint[] row = new int[width];\n\t\t\tfor (int y = 0; y < height; y++) {\n\t\t\t\traster.getDataElements(0, y, width, 1, row);\n\t\t\t\tscratchIntBuffer.put(row);\n\t\t\t}\n\t\t\tformat = GL12.GL_BGRA;\n\t\t}\n\n\t\t// Simple deduplication, doesn't work across pages of course.\n\t\tString hash = \"\";\n\t\ttry {\n\t\t\tMessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n\t\t\tmd.update(glyphPixels);\n\t\t\tBigInteger bigInt = new BigInteger(1, md.digest());\n\t\t\thash = bigInt.toString(16);\n\t\t} catch (NoSuchAlgorithmException ex) {\n\t\t}\n\t\t((Buffer)scratchByteBuffer).clear();\n\t\t((Buffer)scratchIntBuffer).clear();\n\n\t\ttry {\n\t\t\tfor (int i = 0, n = hashes.size(); i < n; i++) {\n\t\t\t\tString other = hashes.get(i);\n\t\t\t\tif (other.equals(hash)) {\n\t\t\t\t\tGlyph dupe = pageGlyphs.get(i);\n\t\t\t\t\tglyph.setTexture(dupe.texture, dupe.u, dupe.v, dupe.u2, dupe.v2);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t} finally {\n\t\t\thashes.add(hash);\n\t\t\tpageGlyphs.add(glyph);\n\t\t}\n\n\t\tGdx.gl.glTexSubImage2D(texture.glTarget, 0, pageX, pageY, width, height, format, GL11.GL_UNSIGNED_BYTE, glyphPixels);\n\n\t\tfloat u = pageX / (float)texture.getWidth();\n\t\tfloat v = pageY / (float)texture.getHeight();\n\t\tfloat u2 = (pageX + width) / (float)texture.getWidth();\n\t\tfloat v2 = (pageY + height) / (float)texture.getHeight();\n\t\tglyph.setTexture(texture, u, v, u2, v2);\n\n\t\treturn true;\n\t}\n\n}", "exampleID": 1022, "dataset": "digest", "filepath": "/Users/xxx/repos/active_learning_interface/GithubExamples/MessageDigest/GlyphPage.java"}, {"url": "dummy", "rawCode": "public class RedissonSortedSet<V> extends RedissonObject implements RSortedSet<V> {\n\n    public static class BinarySearchResult<V> {\n\n        private V value;\n        private int index = -1;\n\n        public BinarySearchResult(V value) {\n            super();\n            this.value = value;\n        }\n\n        public BinarySearchResult() {\n        }\n\n        public void setIndex(Integer index) {\n            this.index = index;\n        }\n        public Integer getIndex() {\n            return index;\n        }\n\n        public V getValue() {\n            return value;\n        }\n\n\n    }\n\n    private Comparator comparator = Comparator.naturalOrder();\n\n    private RLock lock;\n    private RedissonList<V> list;\n    private RBucket<String> comparatorHolder;\n    private RedissonClient redisson;\n\n   \n\n    // TODO cache result\n    private static String calcClassSign(String name) {\n        try {\n            Class<?> clazz = Class.forName(name);\n\n            ByteArrayOutputStream result = new ByteArrayOutputStream();\n            ObjectOutputStream outputStream = new ObjectOutputStream(result);\n            outputStream.writeObject(clazz);\n            outputStream.close();\n\n            MessageDigest crypt = MessageDigest.getInstance(\"SHA-1\");\n            crypt.reset();\n            crypt.update(result.toByteArray());\n\n            return new BigInteger(1, crypt.digest()).toString(16);\n        } catch (Exception e) {\n            throw new IllegalStateException(\"Can't calculate sign of \" + name, e);\n        }\n    }\n\n  \n\n}", "exampleID": 1023, "dataset": "digest", "filepath": "/Users/xxx/repos/active_learning_interface/GithubExamples/MessageDigest/RedissonSortedSet.java"}, {"url": "dummy", "rawCode": "protected by the signing block.\n *\n * <p>The APK contents hash is signed using the stamp key, and is saved as part of the signing\n * block.\n *\n * @hide for internal use only.\n */\npublic abstract class SourceStampVerifier {\n\n    private static final String TAG = \"SourceStampVerifier\";\n\n    private static final int APK_SIGNATURE_SCHEME_V2_BLOCK_ID = 0x7109871a;\n    private static final int APK_SIGNATURE_SCHEME_V3_BLOCK_ID = 0xf05368c0;\n    private static final int SOURCE_STAMP_BLOCK_ID = 0x6dff800d;\n    private static final int PROOF_OF_ROTATION_ATTR_ID = 0x9d6303f7;\n\n    private static final int VERSION_JAR_SIGNATURE_SCHEME = 1;\n    private static final int VERSION_APK_SIGNATURE_SCHEME_V2 = 2;\n    private static final int VERSION_APK_SIGNATURE_SCHEME_V3 = 3;\n\n    /** Name of the SourceStamp certificate hash ZIP entry in APKs. */\n    private static final String SOURCE_STAMP_CERTIFICATE_HASH_ZIP_ENTRY_NAME = \"stamp-cert-sha256\";\n\n    /** Hidden constructor to prevent instantiation. */\n    private SourceStampVerifier() {\n    }\n\n  \n\n    private static byte[] computeSha256Digest(byte[] input) {\n        try {\n            MessageDigest messageDigest = MessageDigest.getInstance(\"SHA-256\");\n            messageDigest.update(input);\n            return messageDigest.digest();\n        } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n}", "exampleID": 1024, "dataset": "digest", "filepath": "/Users/xxx/repos/active_learning_interface/GithubExamples/MessageDigest/SourceStampVerifier.java"}, {"url": "dummy", "rawCode": "public final class CheckForNewAppVersion {\n    private CheckForNewAppVersion() { }\n\n    private static final boolean DEBUG = MainActivity.DEBUG;\n    private static final String TAG = CheckForNewAppVersion.class.getSimpleName();\n\n    private static final String GITHUB_APK_SHA1\n            = \"B0:2E:90:7C:1C:D6:FC:57:C3:35:F0:88:D0:8F:50:5F:94:E4:D2:15\";\n    private static final String NEWPIPE_API_URL = \"https://newpipe.net/api/data.json\";\n\n    /**\n     * Method to get the APK's SHA1 key. See https://stackoverflow.com/questions/9293019/#22506133.\n     *\n     * @param application The application\n     * @return String with the APK's SHA1 fingerprint in hexadecimal\n     */\n    @NonNull\n    private static String getCertificateSHA1Fingerprint(@NonNull final Application application) {\n        final PackageInfo packageInfo;\n        try {\n            packageInfo = application.getPackageManager().getPackageInfo(\n                    application.getPackageName(), PackageManager.GET_SIGNATURES);\n        } catch (final PackageManager.NameNotFoundException e) {\n            ErrorActivity.reportError(application, e, null, null,\n                    ErrorInfo.make(UserAction.SOMETHING_ELSE, \"none\",\n                            \"Could not find package info\", R.string.app_ui_crash));\n            return \"\";\n        }\n\n        final X509Certificate c;\n        try {\n            final Signature[] signatures = packageInfo.signatures;\n            final byte[] cert = signatures[0].toByteArray();\n            final InputStream input = new ByteArrayInputStream(cert);\n            final CertificateFactory cf = CertificateFactory.getInstance(\"X509\");\n            c = (X509Certificate) cf.generateCertificate(input);\n        } catch (final CertificateException e) {\n            ErrorActivity.reportError(application, e, null, null,\n                    ErrorInfo.make(UserAction.SOMETHING_ELSE, \"none\",\n                            \"Certificate error\", R.string.app_ui_crash));\n            return \"\";\n        }\n\n        try {\n            final MessageDigest md = MessageDigest.getInstance(\"SHA1\");\n            final byte[] publicKey = md.digest(c.getEncoded());\n            return byte2HexFormatted(publicKey);\n        } catch (NoSuchAlgorithmException | CertificateEncodingException e) {\n            ErrorActivity.reportError(application, e, null, null,\n                    ErrorInfo.make(UserAction.SOMETHING_ELSE, \"none\",\n                            \"Could not retrieve SHA1 key\", R.string.app_ui_crash));\n            return \"\";\n        }\n    }\n}", "exampleID": 1025, "dataset": "digest", "filepath": "/Users/xxx/repos/active_learning_interface/GithubExamples/MessageDigest/CheckForNewAppVersion.java"}, {"url": "dummy", "rawCode": "public abstract class AbstractEndpoint<S,U> {\n\n    protected String generateCertificateDebug(X509Certificate certificate) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"\\n[\");\n        try {\n            byte[] certBytes = certificate.getEncoded();\n            // SHA-256 fingerprint\n            sb.append(\"\\nSHA-256 fingerprint: \");\n            MessageDigest sha512Digest = MessageDigest.getInstance(\"SHA-256\");\n            sha512Digest.update(certBytes);\n            sb.append(HexUtils.toHexString(sha512Digest.digest()));\n            // SHA-1 fingerprint\n            sb.append(\"\\nSHA-1 fingerprint: \");\n            MessageDigest sha1Digest = MessageDigest.getInstance(\"SHA-1\");\n            sha1Digest.update(certBytes);\n            sb.append(HexUtils.toHexString(sha1Digest.digest()));\n        } catch (CertificateEncodingException e) {\n            getLogCertificate().warn(sm.getString(\"endpoint.tls.cert.encodingError\"), e);\n        } catch (NoSuchAlgorithmException e) {\n            // Unreachable code\n            // All JREs are required to support SHA-1 and SHA-256\n            throw new RuntimeException(e);\n        }\n        sb.append(\"\\n\");\n        sb.append(certificate);\n        sb.append(\"\\n]\");\n        return sb.toString();\n    }\n}", "exampleID": 1026, "dataset": "digest", "filepath": "/Users/xxx/repos/active_learning_interface/GithubExamples/MessageDigest/AbstractEndpoint.java"}]