[{"url": "https://raw.githubusercontent.com/OWASP-Benchmark/BenchmarkJava/master/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00858.java", "rawCode": "public class BenchmarkTest00858 extends HttpServlet {\n\n    private static final long serialVersionUID = 1L;\n\n    @Override\n    public void doGet(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        doPost(request, response);\n    }\n\n    @Override\n    public void doPost(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        response.setContentType(\"text/html;charset=UTF-8\");\n\n        org.owasp.benchmark.helpers.SeparateClassRequest scr =\n                new org.owasp.benchmark.helpers.SeparateClassRequest(request);\n        String param = scr.getTheValue(\"BenchmarkTest00858\");\n\n        String bar;\n\n        // Simple ? condition that assigns constant to bar on true condition\n        int num = 106;\n\n        bar = (7 * 18) + num > 200 ? \"This_should_always_happen\" : param;\n\n        // Code based on example from:\n        // http://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/\n\n        try {\n            Cipher c =\n                    Cipher.getInstance(\n                            \"AES/CCM/NoPadding\", java.security.Security.getProvider(\"BC\"));\n\n            // Prepare the cipher to encrypt\n            javax.crypto.SecretKey key = KeyGenerator.getInstance(\"AES\").generateKey();\n            c.init(Cipher.ENCRYPT_MODE, key);\n\n            // encrypt and store the results\n            byte[] input = {(byte) '?'};\n            Object inputParam = bar;\n            if (inputParam instanceof String) input = ((String) inputParam).getBytes();\n            if (inputParam instanceof java.io.InputStream) {\n                byte[] strInput = new byte[1000];\n                int i = ((java.io.InputStream) inputParam).read(strInput);\n                if (i == -1) {\n                    response.getWriter()\n                            .println(\n                                    \"This input source requires a POST, not a GET. Incompatible UI for the InputStream source.\");\n                    return;\n                }\n                input = java.util.Arrays.copyOf(strInput, i);\n            }\n            byte[] result = c.doFinal(input);\n\n            java.io.File fileTarget =\n                    new java.io.File(\n                            new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR),\n                            \"passwordFile.txt\");\n            java.io.FileWriter fw =\n                    new java.io.FileWriter(fileTarget, true); // the true will append the new data\n            fw.write(\n                    \"secret_value=\"\n                            + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true)\n                            + \"\\n\");\n            fw.close();\n            response.getWriter()\n                    .println(\n                            \"Sensitive value: '\"\n                                    + org.owasp\n                                            .esapi\n                                            .ESAPI\n                                            .encoder()\n                                            .encodeForHTML(new String(input))\n                                    + \"' encrypted and stored<br/>\");\n\n        } catch (java.security.NoSuchAlgorithmException\n                | javax.crypto.NoSuchPaddingException\n                | javax.crypto.IllegalBlockSizeException\n                | javax.crypto.BadPaddingException\n                | java.security.InvalidKeyException e) {\n            response.getWriter()\n                    .println(\n                            \"Problem executing crypto - Cipher.getInstance(java.lang.String,java.security.Provider) Test Case\");\n            e.printStackTrace(response.getWriter());\n            throw new ServletException(e);\n        }\n    }\n}", "exampleID": 108, "dataset": "init", "filepath": "/Users/xxx/repos/active_learning_interface/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00858.java"}, {"url": "https://raw.githubusercontent.com/OWASP-Benchmark/BenchmarkJava/master/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00854.java", "rawCode": "public class BenchmarkTest00854 extends HttpServlet {\n\n    private static final long serialVersionUID = 1L;\n\n    @Override\n    public void doGet(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        doPost(request, response);\n    }\n\n    @Override\n    public void doPost(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        response.setContentType(\"text/html;charset=UTF-8\");\n\n        org.owasp.benchmark.helpers.SeparateClassRequest scr =\n                new org.owasp.benchmark.helpers.SeparateClassRequest(request);\n        String param = scr.getTheValue(\"BenchmarkTest00854\");\n\n        String bar;\n\n        // Simple ? condition that assigns param to bar on false condition\n        int num = 106;\n\n        bar = (7 * 42) - num > 200 ? \"This should never happen\" : param;\n\n        // Code based on example from:\n        // http://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/\n        // AES/GCM example from:\n        // https://javainterviewpoint.com/java-aes-256-gcm-encryption-and-decryption/\n        // 16-byte initialization vector\n        //\t    byte[] iv = {\n        //\t    \t(byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,\n        //\t    \t(byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3,\n        //\t    \t(byte)0xF3, (byte)0x3C, (byte)0x23, (byte)0xB9,\n        //\t    \t(byte)0x9E, (byte)0xC5, (byte)0x77, (byte)0x0B033\n        //\t    };\n        SecureRandom random = new SecureRandom();\n        byte[] iv = random.generateSeed(16);\n\n        try {\n            Cipher c = Cipher.getInstance(\"AES/GCM/NOPADDING\");\n\n            // Prepare the cipher to encrypt\n            javax.crypto.SecretKey key = KeyGenerator.getInstance(\"AES\").generateKey();\n            javax.crypto.spec.GCMParameterSpec paramSpec =\n                    new javax.crypto.spec.GCMParameterSpec(16 * 8, iv);\n            c.init(Cipher.ENCRYPT_MODE, key, paramSpec);\n\n            // encrypt and store the results\n            byte[] input = {(byte) '?'};\n            Object inputParam = bar;\n            if (inputParam instanceof String) input = ((String) inputParam).getBytes();\n            if (inputParam instanceof java.io.InputStream) {\n                byte[] strInput = new byte[1000];\n                int i = ((java.io.InputStream) inputParam).read(strInput);\n                if (i == -1) {\n                    response.getWriter()\n                            .println(\n                                    \"This input source requires a POST, not a GET. Incompatible UI for the InputStream source.\");\n                    return;\n                }\n                input = java.util.Arrays.copyOf(strInput, i);\n            }\n            byte[] result = c.doFinal(input);\n\n            java.io.File fileTarget =\n                    new java.io.File(\n                            new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR),\n                            \"passwordFile.txt\");\n            java.io.FileWriter fw =\n                    new java.io.FileWriter(fileTarget, true); // the true will append the new data\n            fw.write(\n                    \"secret_value=\"\n                            + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true)\n                            + \"\\n\");\n            fw.close();\n            response.getWriter()\n                    .println(\n                            \"Sensitive value: '\"\n                                    + org.owasp\n                                            .esapi\n                                            .ESAPI\n                                            .encoder()\n                                            .encodeForHTML(new String(input))\n                                    + \"' encrypted and stored<br/>\");\n\n        } catch (java.security.NoSuchAlgorithmException e) {\n            response.getWriter()\n                    .println(\n                            \"Problem executing crypto - Cipher.getInstance(java.lang.String) Test Case\");\n            e.printStackTrace(response.getWriter());\n            throw new ServletException(e);\n        } catch (javax.crypto.NoSuchPaddingException e) {\n            response.getWriter()\n                    .println(\n                            \"Problem executing crypto - Cipher.getInstance(java.lang.String) Test Case\");\n            e.printStackTrace(response.getWriter());\n            throw new ServletException(e);\n        } catch (javax.crypto.IllegalBlockSizeException e) {\n            response.getWriter()\n                    .println(\n                            \"Problem executing crypto - Cipher.getInstance(java.lang.String) Test Case\");\n            e.printStackTrace(response.getWriter());\n            throw new ServletException(e);\n        } catch (javax.crypto.BadPaddingException e) {\n            response.getWriter()\n                    .println(\n                            \"Problem executing crypto - Cipher.getInstance(java.lang.String) Test Case\");\n            e.printStackTrace(response.getWriter());\n            throw new ServletException(e);\n        } catch (java.security.InvalidKeyException e) {\n            response.getWriter()\n                    .println(\n                            \"Problem executing crypto - Cipher.getInstance(java.lang.String) Test Case\");\n            e.printStackTrace(response.getWriter());\n            throw new ServletException(e);\n        } catch (java.security.InvalidAlgorithmParameterException e) {\n            response.getWriter()\n                    .println(\n                            \"Problem executing crypto - Cipher.getInstance(java.lang.String) Test Case\");\n            e.printStackTrace(response.getWriter());\n            throw new ServletException(e);\n        }\n        response.getWriter()\n                .println(\"Crypto Test Cipher.getInstance(java.lang.String) executed\");\n    }\n}", "exampleID": 119, "dataset": "init", "filepath": "/Users/xxx/repos/active_learning_interface/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00854.java"}, {"url": "https://raw.githubusercontent.com/OWASP-Benchmark/BenchmarkJava/master/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00005.java", "rawCode": "public class BenchmarkTest00005 extends HttpServlet {\n\n    private static final long serialVersionUID = 1L;\n\n    @Override\n    public void doGet(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        doPost(request, response);\n    }\n\n    @Override\n    public void doPost(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        // some code\n        response.setContentType(\"text/html;charset=UTF-8\");\n\n        String param = \"\";\n        if (request.getHeader(\"BenchmarkTest00005\") != null) {\n            param = request.getHeader(\"BenchmarkTest00005\");\n        }\n\n        // URL Decode the header value since req.getHeader() doesn't. Unlike req.getParameter().\n        param = java.net.URLDecoder.decode(param, \"UTF-8\");\n\n        // Code based on example from:\n        // http://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/\n        // 8-byte initialization vector\n        //\t\tbyte[] iv = {\n        //\t\t\t(byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,\n        //\t\t\t(byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033\n        //\t\t};\n        SecureRandom random = new SecureRandom();\n        byte[] iv = random.generateSeed(8); // DES requires 8 byte keys\n\n        try {\n            Cipher c = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n\n            // Prepare the cipher to encrypt\n            javax.crypto.SecretKey key = KeyGenerator.getInstance(\"DES\").generateKey();\n            java.security.spec.AlgorithmParameterSpec paramSpec =\n                    new javax.crypto.spec.IvParameterSpec(iv);\n            c.init(Cipher.ENCRYPT_MODE, key, paramSpec);\n\n            // encrypt and store the results\n            byte[] input = {(byte) '?'};\n            Object inputParam = param;\n            if (inputParam instanceof String) input = ((String) inputParam).getBytes();\n            if (inputParam instanceof java.io.InputStream) {\n                byte[] strInput = new byte[1000];\n                int i = ((java.io.InputStream) inputParam).read(strInput);\n                if (i == -1) {\n                    response.getWriter()\n                            .println(\n                                    \"This input source requires a POST, not a GET. Incompatible UI for the InputStream source.\");\n                    return;\n                }\n                input = java.util.Arrays.copyOf(strInput, i);\n            }\n            byte[] result = c.doFinal(input);\n\n            java.io.File fileTarget =\n                    new java.io.File(\n                            new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR),\n                            \"passwordFile.txt\");\n            java.io.FileWriter fw =\n                    new java.io.FileWriter(fileTarget, true); // the true will append the new data\n            fw.write(\n                    \"secret_value=\"\n                            + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true)\n                            + \"\\n\");\n            fw.close();\n            response.getWriter()\n                    .println(\n                            \"Sensitive value: '\"\n                                    + org.owasp\n                                            .esapi\n                                            .ESAPI\n                                            .encoder()\n                                            .encodeForHTML(new String(input))\n                                    + \"' encrypted and stored<br/>\");\n\n        } catch (java.security.NoSuchAlgorithmException\n                | javax.crypto.NoSuchPaddingException\n                | javax.crypto.IllegalBlockSizeException\n                | javax.crypto.BadPaddingException\n                | java.security.InvalidKeyException\n                | java.security.InvalidAlgorithmParameterException e) {\n            response.getWriter()\n                    .println(\n                            \"Problem executing crypto - Cipher.getInstance(java.lang.String,java.security.Provider) Test Case\");\n            e.printStackTrace(response.getWriter());\n            throw new ServletException(e);\n        }\n    }\n}", "exampleID": 126, "dataset": "init", "filepath": "/Users/xxx/repos/active_learning_interface/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00005.java"}, {"url": "https://raw.githubusercontent.com/OWASP-Benchmark/BenchmarkJava/master/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02659.java", "rawCode": "public class BenchmarkTest02659 extends HttpServlet {\n\n    private static final long serialVersionUID = 1L;\n\n    @Override\n    public void doGet(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        doPost(request, response);\n    }\n\n    @Override\n    public void doPost(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        response.setContentType(\"text/html;charset=UTF-8\");\n\n        org.owasp.benchmark.helpers.SeparateClassRequest scr =\n                new org.owasp.benchmark.helpers.SeparateClassRequest(request);\n        String param = scr.getTheValue(\"BenchmarkTest02659\");\n\n        String bar = doSomething(request, param);\n\n        // Code based on example from:\n        // http://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/\n        // AES/GCM example from:\n        // https://javainterviewpoint.com/java-aes-256-gcm-encryption-and-decryption/\n        // 16-byte initialization vector\n        //\t    byte[] iv = {\n        //\t    \t(byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,\n        //\t    \t(byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3,\n        //\t    \t(byte)0xF3, (byte)0x3C, (byte)0x23, (byte)0xB9,\n        //\t    \t(byte)0x9E, (byte)0xC5, (byte)0x77, (byte)0x0B033\n        //\t    };\n        SecureRandom random = new SecureRandom();\n        byte[] iv = random.generateSeed(16);\n\n        try {\n            Cipher c = Cipher.getInstance(\"AES/GCM/NOPADDING\");\n\n            // Prepare the cipher to encrypt\n            javax.crypto.SecretKey key = KeyGenerator.getInstance(\"AES\").generateKey();\n            javax.crypto.spec.GCMParameterSpec paramSpec =\n                    new javax.crypto.spec.GCMParameterSpec(16 * 8, iv);\n            c.init(Cipher.ENCRYPT_MODE, key, paramSpec);\n\n            // encrypt and store the results\n            byte[] input = {(byte) '?'};\n            Object inputParam = bar;\n            if (inputParam instanceof String) input = ((String) inputParam).getBytes();\n            if (inputParam instanceof java.io.InputStream) {\n                byte[] strInput = new byte[1000];\n                int i = ((java.io.InputStream) inputParam).read(strInput);\n                if (i == -1) {\n                    response.getWriter()\n                            .println(\n                                    \"This input source requires a POST, not a GET. Incompatible UI for the InputStream source.\");\n                    return;\n                }\n                input = java.util.Arrays.copyOf(strInput, i);\n            }\n            byte[] result = c.doFinal(input);\n\n            java.io.File fileTarget =\n                    new java.io.File(\n                            new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR),\n                            \"passwordFile.txt\");\n            java.io.FileWriter fw =\n                    new java.io.FileWriter(fileTarget, true); // the true will append the new data\n            fw.write(\n                    \"secret_value=\"\n                            + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true)\n                            + \"\\n\");\n            fw.close();\n            response.getWriter()\n                    .println(\n                            \"Sensitive value: '\"\n                                    + org.owasp\n                                            .esapi\n                                            .ESAPI\n                                            .encoder()\n                                            .encodeForHTML(new String(input))\n                                    + \"' encrypted and stored<br/>\");\n\n        } catch (java.security.NoSuchAlgorithmException e) {\n            response.getWriter()\n                    .println(\n                            \"Problem executing crypto - Cipher.getInstance(java.lang.String) Test Case\");\n            e.printStackTrace(response.getWriter());\n            throw new ServletException(e);\n        } catch (javax.crypto.NoSuchPaddingException e) {\n            response.getWriter()\n                    .println(\n                            \"Problem executing crypto - Cipher.getInstance(java.lang.String) Test Case\");\n            e.printStackTrace(response.getWriter());\n            throw new ServletException(e);\n        } catch (javax.crypto.IllegalBlockSizeException e) {\n            response.getWriter()\n                    .println(\n                            \"Problem executing crypto - Cipher.getInstance(java.lang.String) Test Case\");\n            e.printStackTrace(response.getWriter());\n            throw new ServletException(e);\n        } catch (javax.crypto.BadPaddingException e) {\n            response.getWriter()\n                    .println(\n                            \"Problem executing crypto - Cipher.getInstance(java.lang.String) Test Case\");\n            e.printStackTrace(response.getWriter());\n            throw new ServletException(e);\n        } catch (java.security.InvalidKeyException e) {\n            response.getWriter()\n                    .println(\n                            \"Problem executing crypto - Cipher.getInstance(java.lang.String) Test Case\");\n            e.printStackTrace(response.getWriter());\n            throw new ServletException(e);\n        } catch (java.security.InvalidAlgorithmParameterException e) {\n            response.getWriter()\n                    .println(\n                            \"Problem executing crypto - Cipher.getInstance(java.lang.String) Test Case\");\n            e.printStackTrace(response.getWriter());\n            throw new ServletException(e);\n        }\n        response.getWriter()\n                .println(\"Crypto Test Cipher.getInstance(java.lang.String) executed\");\n    } // end doPost\n\n    private static String doSomething(HttpServletRequest request, String param)\n            throws ServletException, IOException {\n\n        String bar = param;\n\n        return bar;\n    }\n}", "exampleID": 188, "dataset": "init", "filepath": "/Users/xxx/repos/active_learning_interface/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02659.java"}, {"url": "https://raw.githubusercontent.com/OWASP-Benchmark/BenchmarkJava/master/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00609.java", "rawCode": "public class BenchmarkTest00609 extends HttpServlet {\n\n    private static final long serialVersionUID = 1L;\n\n    @Override\n    public void doGet(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        doPost(request, response);\n    }\n\n    @Override\n    public void doPost(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        response.setContentType(\"text/html;charset=UTF-8\");\n\n        org.owasp.benchmark.helpers.SeparateClassRequest scr =\n                new org.owasp.benchmark.helpers.SeparateClassRequest(request);\n        String param = scr.getTheParameter(\"BenchmarkTest00609\");\n        if (param == null) param = \"\";\n\n        org.owasp.benchmark.helpers.ThingInterface thing =\n                org.owasp.benchmark.helpers.ThingFactory.createThing();\n        String bar = thing.doSomething(param);\n\n        // Code based on example from:\n        // http://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/\n        // 8-byte initialization vector\n        //\t    byte[] iv = {\n        //\t    \t(byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,\n        //\t    \t(byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033\n        //\t    };\n        SecureRandom random = new SecureRandom();\n        byte[] iv = random.generateSeed(8); // DES requires 8 byte keys\n\n        try {\n            Cipher c =\n                    Cipher.getInstance(\n                            \"DES/CBC/PKCS5PADDING\", java.security.Security.getProvider(\"SunJCE\"));\n\n            // Prepare the cipher to encrypt\n            javax.crypto.SecretKey key = KeyGenerator.getInstance(\"DES\").generateKey();\n            java.security.spec.AlgorithmParameterSpec paramSpec =\n                    new javax.crypto.spec.IvParameterSpec(iv);\n            c.init(Cipher.ENCRYPT_MODE, key, paramSpec);\n\n            // encrypt and store the results\n            byte[] input = {(byte) '?'};\n            Object inputParam = bar;\n            if (inputParam instanceof String) input = ((String) inputParam).getBytes();\n            if (inputParam instanceof java.io.InputStream) {\n                byte[] strInput = new byte[1000];\n                int i = ((java.io.InputStream) inputParam).read(strInput);\n                if (i == -1) {\n                    response.getWriter()\n                            .println(\n                                    \"This input source requires a POST, not a GET. Incompatible UI for the InputStream source.\");\n                    return;\n                }\n                input = java.util.Arrays.copyOf(strInput, i);\n            }\n            byte[] result = c.doFinal(input);\n\n            java.io.File fileTarget =\n                    new java.io.File(\n                            new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR),\n                            \"passwordFile.txt\");\n            java.io.FileWriter fw =\n                    new java.io.FileWriter(fileTarget, true); // the true will append the new data\n            fw.write(\n                    \"secret_value=\"\n                            + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true)\n                            + \"\\n\");\n            fw.close();\n            response.getWriter()\n                    .println(\n                            \"Sensitive value: '\"\n                                    + org.owasp\n                                            .esapi\n                                            .ESAPI\n                                            .encoder()\n                                            .encodeForHTML(new String(input))\n                                    + \"' encrypted and stored<br/>\");\n\n        } catch (java.security.NoSuchAlgorithmException e) {\n            response.getWriter()\n                    .println(\n                            \"Problem executing crypto - Cipher.getInstance(java.lang.String,java.security.Provider) Test Case\");\n            e.printStackTrace(response.getWriter());\n            throw new ServletException(e);\n        } catch (javax.crypto.NoSuchPaddingException e) {\n            response.getWriter()\n                    .println(\n                            \"Problem executing crypto - Cipher.getInstance(java.lang.String,java.security.Provider) Test Case\");\n            e.printStackTrace(response.getWriter());\n            throw new ServletException(e);\n        } catch (javax.crypto.IllegalBlockSizeException e) {\n            response.getWriter()\n                    .println(\n                            \"Problem executing crypto - Cipher.getInstance(java.lang.String,java.security.Provider) Test Case\");\n            e.printStackTrace(response.getWriter());\n            throw new ServletException(e);\n        } catch (javax.crypto.BadPaddingException e) {\n            response.getWriter()\n                    .println(\n                            \"Problem executing crypto - Cipher.getInstance(java.lang.String,java.security.Provider) Test Case\");\n            e.printStackTrace(response.getWriter());\n            throw new ServletException(e);\n        } catch (java.security.InvalidKeyException e) {\n            response.getWriter()\n                    .println(\n                            \"Problem executing crypto - Cipher.getInstance(java.lang.String,java.security.Provider) Test Case\");\n            e.printStackTrace(response.getWriter());\n            throw new ServletException(e);\n        } catch (java.security.InvalidAlgorithmParameterException e) {\n            response.getWriter()\n                    .println(\n                            \"Problem executing crypto - Cipher.getInstance(java.lang.String,java.security.Provider) Test Case\");\n            e.printStackTrace(response.getWriter());\n            throw new ServletException(e);\n        }\n        response.getWriter()\n                .println(\n                        \"Crypto Test Cipher.getInstance(java.lang.String,java.security.Provider) executed\");\n    }\n}", "exampleID": 198, "dataset": "init", "filepath": "/Users/xxx/repos/active_learning_interface/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00609.java"}, {"url": "https://raw.githubusercontent.com/OWASP-Benchmark/BenchmarkJava/master/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00687.java", "rawCode": "public class BenchmarkTest00687 extends HttpServlet {\n\n    private static final long serialVersionUID = 1L;\n\n    @Override\n    public void doGet(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        doPost(request, response);\n    }\n\n    @Override\n    public void doPost(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        response.setContentType(\"text/html;charset=UTF-8\");\n\n        String[] values = request.getParameterValues(\"BenchmarkTest00687\");\n        String param;\n        if (values != null && values.length > 0) param = values[0];\n        else param = \"\";\n\n        String bar;\n\n        // Simple ? condition that assigns param to bar on false condition\n        int num = 106;\n\n        bar = (7 * 42) - num > 200 ? \"This should never happen\" : param;\n\n        // Code based on example from:\n        // http://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/\n        // AES/GCM example from:\n        // https://javainterviewpoint.com/java-aes-256-gcm-encryption-and-decryption/\n        // 16-byte initialization vector\n        //\t    byte[] iv = {\n        //\t    \t(byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,\n        //\t    \t(byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3,\n        //\t    \t(byte)0xF3, (byte)0x3C, (byte)0x23, (byte)0xB9,\n        //\t    \t(byte)0x9E, (byte)0xC5, (byte)0x77, (byte)0x0B033\n        //\t    };\n        SecureRandom random = new SecureRandom();\n        byte[] iv = random.generateSeed(16);\n\n        try {\n            Cipher c = Cipher.getInstance(\"AES/GCM/NOPADDING\");\n\n            // Prepare the cipher to encrypt\n            javax.crypto.SecretKey key = KeyGenerator.getInstance(\"AES\").generateKey();\n            javax.crypto.spec.GCMParameterSpec paramSpec =\n                    new javax.crypto.spec.GCMParameterSpec(16 * 8, iv);\n            c.init(Cipher.ENCRYPT_MODE, key, paramSpec);\n\n            // encrypt and store the results\n            byte[] input = {(byte) '?'};\n            Object inputParam = bar;\n            if (inputParam instanceof String) input = ((String) inputParam).getBytes();\n            if (inputParam instanceof java.io.InputStream) {\n                byte[] strInput = new byte[1000];\n                int i = ((java.io.InputStream) inputParam).read(strInput);\n                if (i == -1) {\n                    response.getWriter()\n                            .println(\n                                    \"This input source requires a POST, not a GET. Incompatible UI for the InputStream source.\");\n                    return;\n                }\n                input = java.util.Arrays.copyOf(strInput, i);\n            }\n            byte[] result = c.doFinal(input);\n\n            java.io.File fileTarget =\n                    new java.io.File(\n                            new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR),\n                            \"passwordFile.txt\");\n            java.io.FileWriter fw =\n                    new java.io.FileWriter(fileTarget, true); // the true will append the new data\n            fw.write(\n                    \"secret_value=\"\n                            + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true)\n                            + \"\\n\");\n            fw.close();\n            response.getWriter()\n                    .println(\n                            \"Sensitive value: '\"\n                                    + org.owasp\n                                            .esapi\n                                            .ESAPI\n                                            .encoder()\n                                            .encodeForHTML(new String(input))\n                                    + \"' encrypted and stored<br/>\");\n\n        } catch (java.security.NoSuchAlgorithmException e) {\n            response.getWriter()\n                    .println(\n                            \"Problem executing crypto - Cipher.getInstance(java.lang.String) Test Case\");\n            e.printStackTrace(response.getWriter());\n            throw new ServletException(e);\n        } catch (javax.crypto.NoSuchPaddingException e) {\n            response.getWriter()\n                    .println(\n                            \"Problem executing crypto - Cipher.getInstance(java.lang.String) Test Case\");\n            e.printStackTrace(response.getWriter());\n            throw new ServletException(e);\n        } catch (javax.crypto.IllegalBlockSizeException e) {\n            response.getWriter()\n                    .println(\n                            \"Problem executing crypto - Cipher.getInstance(java.lang.String) Test Case\");\n            e.printStackTrace(response.getWriter());\n            throw new ServletException(e);\n        } catch (javax.crypto.BadPaddingException e) {\n            response.getWriter()\n                    .println(\n                            \"Problem executing crypto - Cipher.getInstance(java.lang.String) Test Case\");\n            e.printStackTrace(response.getWriter());\n            throw new ServletException(e);\n        } catch (java.security.InvalidKeyException e) {\n            response.getWriter()\n                    .println(\n                            \"Problem executing crypto - Cipher.getInstance(java.lang.String) Test Case\");\n            e.printStackTrace(response.getWriter());\n            throw new ServletException(e);\n        } catch (java.security.InvalidAlgorithmParameterException e) {\n            response.getWriter()\n                    .println(\n                            \"Problem executing crypto - Cipher.getInstance(java.lang.String) Test Case\");\n            e.printStackTrace(response.getWriter());\n            throw new ServletException(e);\n        }\n        response.getWriter()\n                .println(\"Crypto Test Cipher.getInstance(java.lang.String) executed\");\n    }\n}", "exampleID": 202, "dataset": "init", "filepath": "/Users/xxx/repos/active_learning_interface/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00687.java"}, {"url": "https://raw.githubusercontent.com/OWASP-Benchmark/BenchmarkJava/master/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00853.java", "rawCode": "public class BenchmarkTest00853 extends HttpServlet {\n\n    private static final long serialVersionUID = 1L;\n\n    @Override\n    public void doGet(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        doPost(request, response);\n    }\n\n    @Override\n    public void doPost(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        response.setContentType(\"text/html;charset=UTF-8\");\n\n        org.owasp.benchmark.helpers.SeparateClassRequest scr =\n                new org.owasp.benchmark.helpers.SeparateClassRequest(request);\n        String param = scr.getTheValue(\"BenchmarkTest00853\");\n\n        StringBuilder sbxyz83803 = new StringBuilder(param);\n        String bar = sbxyz83803.append(\"_SafeStuff\").toString();\n\n        // Code based on example from:\n        // http://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/\n        // 8-byte initialization vector\n        //\t    byte[] iv = {\n        //\t    \t(byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,\n        //\t    \t(byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033\n        //\t    };\n        SecureRandom random = new SecureRandom();\n        byte[] iv = random.generateSeed(8); // DES requires 8 byte keys\n\n        try {\n            Cipher c =\n                    Cipher.getInstance(\n                            \"DES/CBC/PKCS5PADDING\", java.security.Security.getProvider(\"SunJCE\"));\n\n            // Prepare the cipher to encrypt\n            javax.crypto.SecretKey key = KeyGenerator.getInstance(\"DES\").generateKey();\n            java.security.spec.AlgorithmParameterSpec paramSpec =\n                    new javax.crypto.spec.IvParameterSpec(iv);\n            c.init(Cipher.ENCRYPT_MODE, key, paramSpec);\n\n            // encrypt and store the results\n            byte[] input = {(byte) '?'};\n            Object inputParam = bar;\n            if (inputParam instanceof String) input = ((String) inputParam).getBytes();\n            if (inputParam instanceof java.io.InputStream) {\n                byte[] strInput = new byte[1000];\n                int i = ((java.io.InputStream) inputParam).read(strInput);\n                if (i == -1) {\n                    response.getWriter()\n                            .println(\n                                    \"This input source requires a POST, not a GET. Incompatible UI for the InputStream source.\");\n                    return;\n                }\n                input = java.util.Arrays.copyOf(strInput, i);\n            }\n            byte[] result = c.doFinal(input);\n\n            java.io.File fileTarget =\n                    new java.io.File(\n                            new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR),\n                            \"passwordFile.txt\");\n            java.io.FileWriter fw =\n                    new java.io.FileWriter(fileTarget, true); // the true will append the new data\n            fw.write(\n                    \"secret_value=\"\n                            + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true)\n                            + \"\\n\");\n            fw.close();\n            response.getWriter()\n                    .println(\n                            \"Sensitive value: '\"\n                                    + org.owasp\n                                            .esapi\n                                            .ESAPI\n                                            .encoder()\n                                            .encodeForHTML(new String(input))\n                                    + \"' encrypted and stored<br/>\");\n\n        } catch (java.security.NoSuchAlgorithmException e) {\n            response.getWriter()\n                    .println(\n                            \"Problem executing crypto - Cipher.getInstance(java.lang.String,java.security.Provider) Test Case\");\n            e.printStackTrace(response.getWriter());\n            throw new ServletException(e);\n        } catch (javax.crypto.NoSuchPaddingException e) {\n            response.getWriter()\n                    .println(\n                            \"Problem executing crypto - Cipher.getInstance(java.lang.String,java.security.Provider) Test Case\");\n            e.printStackTrace(response.getWriter());\n            throw new ServletException(e);\n        } catch (javax.crypto.IllegalBlockSizeException e) {\n            response.getWriter()\n                    .println(\n                            \"Problem executing crypto - Cipher.getInstance(java.lang.String,java.security.Provider) Test Case\");\n            e.printStackTrace(response.getWriter());\n            throw new ServletException(e);\n        } catch (javax.crypto.BadPaddingException e) {\n            response.getWriter()\n                    .println(\n                            \"Problem executing crypto - Cipher.getInstance(java.lang.String,java.security.Provider) Test Case\");\n            e.printStackTrace(response.getWriter());\n            throw new ServletException(e);\n        } catch (java.security.InvalidKeyException e) {\n            response.getWriter()\n                    .println(\n                            \"Problem executing crypto - Cipher.getInstance(java.lang.String,java.security.Provider) Test Case\");\n            e.printStackTrace(response.getWriter());\n            throw new ServletException(e);\n        } catch (java.security.InvalidAlgorithmParameterException e) {\n            response.getWriter()\n                    .println(\n                            \"Problem executing crypto - Cipher.getInstance(java.lang.String,java.security.Provider) Test Case\");\n            e.printStackTrace(response.getWriter());\n            throw new ServletException(e);\n        }\n        response.getWriter()\n                .println(\n                        \"Crypto Test Cipher.getInstance(java.lang.String,java.security.Provider) executed\");\n    }\n}", "exampleID": 208, "dataset": "init", "filepath": "/Users/xxx/repos/active_learning_interface/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00853.java"}, {"url": "https://raw.githubusercontent.com/OWASP-Benchmark/BenchmarkJava/master/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00692.java", "rawCode": "public class BenchmarkTest00692 extends HttpServlet {\n\n    private static final long serialVersionUID = 1L;\n\n    @Override\n    public void doGet(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        doPost(request, response);\n    }\n\n    @Override\n    public void doPost(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        response.setContentType(\"text/html;charset=UTF-8\");\n\n        String[] values = request.getParameterValues(\"BenchmarkTest00692\");\n        String param;\n        if (values != null && values.length > 0) param = values[0];\n        else param = \"\";\n\n        String bar = org.apache.commons.lang.StringEscapeUtils.escapeHtml(param);\n\n        // Code based on example from:\n        // http://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/\n        // 8-byte initialization vector\n        //\t\tbyte[] iv = {\n        //\t\t\t(byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,\n        //\t\t\t(byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033\n        //\t\t};\n        SecureRandom random = new SecureRandom();\n        byte[] iv = random.generateSeed(8); // DES requires 8 byte keys\n\n        try {\n            Cipher c = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n\n            // Prepare the cipher to encrypt\n            javax.crypto.SecretKey key = KeyGenerator.getInstance(\"DES\").generateKey();\n            java.security.spec.AlgorithmParameterSpec paramSpec =\n                    new javax.crypto.spec.IvParameterSpec(iv);\n            c.init(Cipher.ENCRYPT_MODE, key, paramSpec);\n\n            // encrypt and store the results\n            byte[] input = {(byte) '?'};\n            Object inputParam = bar;\n            if (inputParam instanceof String) input = ((String) inputParam).getBytes();\n            if (inputParam instanceof java.io.InputStream) {\n                byte[] strInput = new byte[1000];\n                int i = ((java.io.InputStream) inputParam).read(strInput);\n                if (i == -1) {\n                    response.getWriter()\n                            .println(\n                                    \"This input source requires a POST, not a GET. Incompatible UI for the InputStream source.\");\n                    return;\n                }\n                input = java.util.Arrays.copyOf(strInput, i);\n            }\n            byte[] result = c.doFinal(input);\n\n            java.io.File fileTarget =\n                    new java.io.File(\n                            new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR),\n                            \"passwordFile.txt\");\n            java.io.FileWriter fw =\n                    new java.io.FileWriter(fileTarget, true); // the true will append the new data\n            fw.write(\n                    \"secret_value=\"\n                            + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true)\n                            + \"\\n\");\n            fw.close();\n            response.getWriter()\n                    .println(\n                            \"Sensitive value: '\"\n                                    + org.owasp\n                                            .esapi\n                                            .ESAPI\n                                            .encoder()\n                                            .encodeForHTML(new String(input))\n                                    + \"' encrypted and stored<br/>\");\n\n        } catch (java.security.NoSuchAlgorithmException\n                | javax.crypto.NoSuchPaddingException\n                | javax.crypto.IllegalBlockSizeException\n                | javax.crypto.BadPaddingException\n                | java.security.InvalidKeyException\n                | java.security.InvalidAlgorithmParameterException e) {\n            response.getWriter()\n                    .println(\n                            \"Problem executing crypto - Cipher.getInstance(java.lang.String,java.security.Provider) Test Case\");\n            e.printStackTrace(response.getWriter());\n            throw new ServletException(e);\n        }\n    }\n}", "exampleID": 225, "dataset": "init", "filepath": "/Users/xxx/repos/active_learning_interface/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00692.java"}, {"url": "https://raw.githubusercontent.com/OWASP-Benchmark/BenchmarkJava/master/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02461.java", "rawCode": "public class BenchmarkTest02461 extends HttpServlet {\n\n    private static final long serialVersionUID = 1L;\n\n    @Override\n    public void doGet(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        doPost(request, response);\n    }\n\n    @Override\n    public void doPost(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        response.setContentType(\"text/html;charset=UTF-8\");\n\n        String[] values = request.getParameterValues(\"BenchmarkTest02461\");\n        String param;\n        if (values != null && values.length > 0) param = values[0];\n        else param = \"\";\n\n        String bar = doSomething(request, param);\n\n        // Code based on example from:\n        // http://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/\n\n        try {\n            Cipher c =\n                    Cipher.getInstance(\n                            \"AES/CCM/NoPadding\", java.security.Security.getProvider(\"BC\"));\n\n            // Prepare the cipher to encrypt\n            javax.crypto.SecretKey key = KeyGenerator.getInstance(\"AES\").generateKey();\n            c.init(Cipher.ENCRYPT_MODE, key);\n\n            // encrypt and store the results\n            byte[] input = {(byte) '?'};\n            Object inputParam = bar;\n            if (inputParam instanceof String) input = ((String) inputParam).getBytes();\n            if (inputParam instanceof java.io.InputStream) {\n                byte[] strInput = new byte[1000];\n                int i = ((java.io.InputStream) inputParam).read(strInput);\n                if (i == -1) {\n                    response.getWriter()\n                            .println(\n                                    \"This input source requires a POST, not a GET. Incompatible UI for the InputStream source.\");\n                    return;\n                }\n                input = java.util.Arrays.copyOf(strInput, i);\n            }\n            byte[] result = c.doFinal(input);\n\n            java.io.File fileTarget =\n                    new java.io.File(\n                            new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR),\n                            \"passwordFile.txt\");\n            java.io.FileWriter fw =\n                    new java.io.FileWriter(fileTarget, true); // the true will append the new data\n            fw.write(\n                    \"secret_value=\"\n                            + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true)\n                            + \"\\n\");\n            fw.close();\n            response.getWriter()\n                    .println(\n                            \"Sensitive value: '\"\n                                    + org.owasp\n                                            .esapi\n                                            .ESAPI\n                                            .encoder()\n                                            .encodeForHTML(new String(input))\n                                    + \"' encrypted and stored<br/>\");\n\n        } catch (java.security.NoSuchAlgorithmException\n                | javax.crypto.NoSuchPaddingException\n                | javax.crypto.IllegalBlockSizeException\n                | javax.crypto.BadPaddingException\n                | java.security.InvalidKeyException e) {\n            response.getWriter()\n                    .println(\n                            \"Problem executing crypto - Cipher.getInstance(java.lang.String,java.security.Provider) Test Case\");\n            e.printStackTrace(response.getWriter());\n            throw new ServletException(e);\n        }\n    } // end doPost\n\n    private static String doSomething(HttpServletRequest request, String param)\n            throws ServletException, IOException {\n\n        String bar = org.springframework.web.util.HtmlUtils.htmlEscape(param);\n\n        return bar;\n    }\n}", "exampleID": 242, "dataset": "init", "filepath": "/Users/xxx/repos/active_learning_interface/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02461.java"}, {"url": "https://raw.githubusercontent.com/OWASP-Benchmark/BenchmarkJava/master/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01488.java", "rawCode": "public class BenchmarkTest01488 extends HttpServlet {\n\n    private static final long serialVersionUID = 1L;\n\n    @Override\n    public void doGet(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        doPost(request, response);\n    }\n\n    @Override\n    public void doPost(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        response.setContentType(\"text/html;charset=UTF-8\");\n\n        org.owasp.benchmark.helpers.SeparateClassRequest scr =\n                new org.owasp.benchmark.helpers.SeparateClassRequest(request);\n        String param = scr.getTheParameter(\"BenchmarkTest01488\");\n        if (param == null) param = \"\";\n\n        String bar = new Test().doSomething(request, param);\n\n        // Code based on example from:\n        // http://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/\n\n        try {\n            Cipher c =\n                    Cipher.getInstance(\n                            \"AES/CCM/NoPadding\", java.security.Security.getProvider(\"BC\"));\n\n            // Prepare the cipher to encrypt\n            javax.crypto.SecretKey key = KeyGenerator.getInstance(\"AES\").generateKey();\n            c.init(Cipher.ENCRYPT_MODE, key);\n\n            // encrypt and store the results\n            byte[] input = {(byte) '?'};\n            Object inputParam = bar;\n            if (inputParam instanceof String) input = ((String) inputParam).getBytes();\n            if (inputParam instanceof java.io.InputStream) {\n                byte[] strInput = new byte[1000];\n                int i = ((java.io.InputStream) inputParam).read(strInput);\n                if (i == -1) {\n                    response.getWriter()\n                            .println(\n                                    \"This input source requires a POST, not a GET. Incompatible UI for the InputStream source.\");\n                    return;\n                }\n                input = java.util.Arrays.copyOf(strInput, i);\n            }\n            byte[] result = c.doFinal(input);\n\n            java.io.File fileTarget =\n                    new java.io.File(\n                            new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR),\n                            \"passwordFile.txt\");\n            java.io.FileWriter fw =\n                    new java.io.FileWriter(fileTarget, true); // the true will append the new data\n            fw.write(\n                    \"secret_value=\"\n                            + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true)\n                            + \"\\n\");\n            fw.close();\n            response.getWriter()\n                    .println(\n                            \"Sensitive value: '\"\n                                    + org.owasp\n                                            .esapi\n                                            .ESAPI\n                                            .encoder()\n                                            .encodeForHTML(new String(input))\n                                    + \"' encrypted and stored<br/>\");\n\n        } catch (java.security.NoSuchAlgorithmException\n                | javax.crypto.NoSuchPaddingException\n                | javax.crypto.IllegalBlockSizeException\n                | javax.crypto.BadPaddingException\n                | java.security.InvalidKeyException e) {\n            response.getWriter()\n                    .println(\n                            \"Problem executing crypto - Cipher.getInstance(java.lang.String,java.security.Provider) Test Case\");\n            e.printStackTrace(response.getWriter());\n            throw new ServletException(e);\n        }\n    } // end doPost\n\n    private class Test {\n\n        public String doSomething(HttpServletRequest request, String param)\n                throws ServletException, IOException {\n\n            String bar = param;\n            if (param != null && param.length() > 1) {\n                bar = param.substring(0, param.length() - 1);\n            }\n\n            return bar;\n        }\n    } // end innerclass Test\n}", "exampleID": 252, "dataset": "init", "filepath": "/Users/xxx/repos/active_learning_interface/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01488.java"}, {"url": "https://raw.githubusercontent.com/OWASP-Benchmark/BenchmarkJava/master/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00125.java", "rawCode": "public class BenchmarkTest00125 extends HttpServlet {\n\n    private static final long serialVersionUID = 1L;\n\n    @Override\n    public void doGet(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        doPost(request, response);\n    }\n\n    @Override\n    public void doPost(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        response.setContentType(\"text/html;charset=UTF-8\");\n\n        String param = \"\";\n        if (request.getHeader(\"BenchmarkTest00125\") != null) {\n            param = request.getHeader(\"BenchmarkTest00125\");\n        }\n\n        // URL Decode the header value since req.getHeader() doesn't. Unlike req.getParameter().\n        param = java.net.URLDecoder.decode(param, \"UTF-8\");\n\n        String bar = org.apache.commons.lang.StringEscapeUtils.escapeHtml(param);\n\n        // Code based on example from:\n        // http://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/\n        // 8-byte initialization vector\n        //\t\tbyte[] iv = {\n        //\t\t\t(byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,\n        //\t\t\t(byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033\n        //\t\t};\n        SecureRandom random = new SecureRandom();\n        byte[] iv = random.generateSeed(8); // DES requires 8 byte keys\n\n        try {\n            Cipher c = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n\n            // Prepare the cipher to encrypt\n            javax.crypto.SecretKey key = KeyGenerator.getInstance(\"DES\").generateKey();\n            java.security.spec.AlgorithmParameterSpec paramSpec =\n                    new javax.crypto.spec.IvParameterSpec(iv);\n            c.init(Cipher.ENCRYPT_MODE, key, paramSpec);\n\n            // encrypt and store the results\n            byte[] input = {(byte) '?'};\n            Object inputParam = bar;\n            if (inputParam instanceof String) input = ((String) inputParam).getBytes();\n            if (inputParam instanceof java.io.InputStream) {\n                byte[] strInput = new byte[1000];\n                int i = ((java.io.InputStream) inputParam).read(strInput);\n                if (i == -1) {\n                    response.getWriter()\n                            .println(\n                                    \"This input source requires a POST, not a GET. Incompatible UI for the InputStream source.\");\n                    return;\n                }\n                input = java.util.Arrays.copyOf(strInput, i);\n            }\n            byte[] result = c.doFinal(input);\n\n            java.io.File fileTarget =\n                    new java.io.File(\n                            new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR),\n                            \"passwordFile.txt\");\n            java.io.FileWriter fw =\n                    new java.io.FileWriter(fileTarget, true); // the true will append the new data\n            fw.write(\n                    \"secret_value=\"\n                            + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true)\n                            + \"\\n\");\n            fw.close();\n            response.getWriter()\n                    .println(\n                            \"Sensitive value: '\"\n                                    + org.owasp\n                                            .esapi\n                                            .ESAPI\n                                            .encoder()\n                                            .encodeForHTML(new String(input))\n                                    + \"' encrypted and stored<br/>\");\n\n        } catch (java.security.NoSuchAlgorithmException\n                | javax.crypto.NoSuchPaddingException\n                | javax.crypto.IllegalBlockSizeException\n                | javax.crypto.BadPaddingException\n                | java.security.InvalidKeyException\n                | java.security.InvalidAlgorithmParameterException e) {\n            response.getWriter()\n                    .println(\n                            \"Problem executing crypto - Cipher.getInstance(java.lang.String,java.security.Provider) Test Case\");\n            e.printStackTrace(response.getWriter());\n            throw new ServletException(e);\n        }\n    }\n}", "exampleID": 269, "dataset": "init", "filepath": "/Users/xxx/repos/active_learning_interface/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00125.java"}, {"url": "https://raw.githubusercontent.com/OWASP-Benchmark/BenchmarkJava/master/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00129.java", "rawCode": "public class BenchmarkTest00129 extends HttpServlet {\n\n    private static final long serialVersionUID = 1L;\n\n    @Override\n    public void doGet(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        doPost(request, response);\n    }\n\n    @Override\n    public void doPost(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        response.setContentType(\"text/html;charset=UTF-8\");\n\n        String param = \"\";\n        if (request.getHeader(\"BenchmarkTest00129\") != null) {\n            param = request.getHeader(\"BenchmarkTest00129\");\n        }\n\n        // URL Decode the header value since req.getHeader() doesn't. Unlike req.getParameter().\n        param = java.net.URLDecoder.decode(param, \"UTF-8\");\n\n        String bar = org.springframework.web.util.HtmlUtils.htmlEscape(param);\n\n        // Code based on example from:\n        // http://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/\n        // 8-byte initialization vector\n        //\t\tbyte[] iv = {\n        //\t\t\t(byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,\n        //\t\t\t(byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033\n        //\t\t};\n        //\t\tSecureRandom random = new SecureRandom();\n        //\t\tbyte[] iv = random.generateSeed(16);\n\n        try {\n            java.util.Properties benchmarkprops = new java.util.Properties();\n            benchmarkprops.load(\n                    this.getClass().getClassLoader().getResourceAsStream(\"benchmark.properties\"));\n            String algorithm = benchmarkprops.getProperty(\"cryptoAlg2\", \"AES/ECB/PKCS5Padding\");\n            Cipher c = Cipher.getInstance(algorithm);\n\n            // Prepare the cipher to encrypt\n            javax.crypto.SecretKey key = KeyGenerator.getInstance(\"AES\").generateKey();\n            c.init(Cipher.ENCRYPT_MODE, key);\n\n            // encrypt and store the results\n            byte[] input = {(byte) '?'};\n            Object inputParam = bar;\n            if (inputParam instanceof String) input = ((String) inputParam).getBytes();\n            if (inputParam instanceof java.io.InputStream) {\n                byte[] strInput = new byte[1000];\n                int i = ((java.io.InputStream) inputParam).read(strInput);\n                if (i == -1) {\n                    response.getWriter()\n                            .println(\n                                    \"This input source requires a POST, not a GET. Incompatible UI for the InputStream source.\");\n                    return;\n                }\n                input = java.util.Arrays.copyOf(strInput, i);\n            }\n            byte[] result = c.doFinal(input);\n\n            java.io.File fileTarget =\n                    new java.io.File(\n                            new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR),\n                            \"passwordFile.txt\");\n            java.io.FileWriter fw =\n                    new java.io.FileWriter(fileTarget, true); // the true will append the new data\n            fw.write(\n                    \"secret_value=\"\n                            + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true)\n                            + \"\\n\");\n            fw.close();\n            response.getWriter()\n                    .println(\n                            \"Sensitive value: '\"\n                                    + org.owasp\n                                            .esapi\n                                            .ESAPI\n                                            .encoder()\n                                            .encodeForHTML(new String(input))\n                                    + \"' encrypted and stored<br/>\");\n\n        } catch (java.security.NoSuchAlgorithmException\n                | javax.crypto.NoSuchPaddingException\n                | javax.crypto.IllegalBlockSizeException\n                | javax.crypto.BadPaddingException\n                | java.security.InvalidKeyException e) {\n            response.getWriter()\n                    .println(\n                            \"Problem executing crypto - Cipher.getInstance(java.lang.String) Test Case\");\n            e.printStackTrace(response.getWriter());\n            throw new ServletException(e);\n        }\n    }\n}", "exampleID": 284, "dataset": "init", "filepath": "/Users/xxx/repos/active_learning_interface/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00129.java"}, {"url": "https://raw.githubusercontent.com/OWASP-Benchmark/BenchmarkJava/master/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00345.java", "rawCode": "public class BenchmarkTest00345 extends HttpServlet {\n\n    private static final long serialVersionUID = 1L;\n\n    @Override\n    public void doGet(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        doPost(request, response);\n    }\n\n    @Override\n    public void doPost(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        response.setContentType(\"text/html;charset=UTF-8\");\n\n        java.io.InputStream param = request.getInputStream();\n\n        java.io.InputStream bar = param;\n\n        // Code based on example from:\n        // http://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/\n\n        try {\n            Cipher c =\n                    Cipher.getInstance(\n                            \"AES/CCM/NoPadding\", java.security.Security.getProvider(\"BC\"));\n\n            // Prepare the cipher to encrypt\n            javax.crypto.SecretKey key = KeyGenerator.getInstance(\"AES\").generateKey();\n            c.init(Cipher.ENCRYPT_MODE, key);\n\n            // encrypt and store the results\n            byte[] input = {(byte) '?'};\n            Object inputParam = bar;\n            if (inputParam instanceof String) input = ((String) inputParam).getBytes();\n            if (inputParam instanceof java.io.InputStream) {\n                byte[] strInput = new byte[1000];\n                int i = ((java.io.InputStream) inputParam).read(strInput);\n                if (i == -1) {\n                    response.getWriter()\n                            .println(\n                                    \"This input source requires a POST, not a GET. Incompatible UI for the InputStream source.\");\n                    return;\n                }\n                input = java.util.Arrays.copyOf(strInput, i);\n            }\n            byte[] result = c.doFinal(input);\n\n            java.io.File fileTarget =\n                    new java.io.File(\n                            new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR),\n                            \"passwordFile.txt\");\n            java.io.FileWriter fw =\n                    new java.io.FileWriter(fileTarget, true); // the true will append the new data\n            fw.write(\n                    \"secret_value=\"\n                            + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true)\n                            + \"\\n\");\n            fw.close();\n            response.getWriter()\n                    .println(\n                            \"Sensitive value: '\"\n                                    + org.owasp\n                                            .esapi\n                                            .ESAPI\n                                            .encoder()\n                                            .encodeForHTML(new String(input))\n                                    + \"' encrypted and stored<br/>\");\n\n        } catch (java.security.NoSuchAlgorithmException\n                | javax.crypto.NoSuchPaddingException\n                | javax.crypto.IllegalBlockSizeException\n                | javax.crypto.BadPaddingException\n                | java.security.InvalidKeyException e) {\n            response.getWriter()\n                    .println(\n                            \"Problem executing crypto - Cipher.getInstance(java.lang.String,java.security.Provider) Test Case\");\n            e.printStackTrace(response.getWriter());\n            throw new ServletException(e);\n        }\n    }\n}", "exampleID": 285, "dataset": "init", "filepath": "/Users/xxx/repos/active_learning_interface/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00345.java"}, {"url": "https://raw.githubusercontent.com/OWASP-Benchmark/BenchmarkJava/master/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00358.java", "rawCode": "public class BenchmarkTest00358 extends HttpServlet {\n\n    private static final long serialVersionUID = 1L;\n\n    @Override\n    public void doGet(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        doPost(request, response);\n    }\n\n    @Override\n    public void doPost(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        response.setContentType(\"text/html;charset=UTF-8\");\n\n        String param = request.getParameter(\"BenchmarkTest00358\");\n        if (param == null) param = \"\";\n\n        String bar = \"\";\n        if (param != null) bar = param.split(\" \")[0];\n\n        // Code based on example from:\n        // http://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/\n        // 8-byte initialization vector\n        //\t\tbyte[] iv = {\n        //\t\t\t(byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,\n        //\t\t\t(byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033\n        //\t\t};\n        //\t\tSecureRandom random = new SecureRandom();\n        //\t\tbyte[] iv = random.generateSeed(16);\n\n        try {\n            java.util.Properties benchmarkprops = new java.util.Properties();\n            benchmarkprops.load(\n                    this.getClass().getClassLoader().getResourceAsStream(\"benchmark.properties\"));\n            String algorithm = benchmarkprops.getProperty(\"cryptoAlg2\", \"AES/ECB/PKCS5Padding\");\n            Cipher c = Cipher.getInstance(algorithm);\n\n            // Prepare the cipher to encrypt\n            javax.crypto.SecretKey key = KeyGenerator.getInstance(\"AES\").generateKey();\n            c.init(Cipher.ENCRYPT_MODE, key);\n\n            // encrypt and store the results\n            byte[] input = {(byte) '?'};\n            Object inputParam = bar;\n            if (inputParam instanceof String) input = ((String) inputParam).getBytes();\n            if (inputParam instanceof java.io.InputStream) {\n                byte[] strInput = new byte[1000];\n                int i = ((java.io.InputStream) inputParam).read(strInput);\n                if (i == -1) {\n                    response.getWriter()\n                            .println(\n                                    \"This input source requires a POST, not a GET. Incompatible UI for the InputStream source.\");\n                    return;\n                }\n                input = java.util.Arrays.copyOf(strInput, i);\n            }\n            byte[] result = c.doFinal(input);\n\n            java.io.File fileTarget =\n                    new java.io.File(\n                            new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR),\n                            \"passwordFile.txt\");\n            java.io.FileWriter fw =\n                    new java.io.FileWriter(fileTarget, true); // the true will append the new data\n            fw.write(\n                    \"secret_value=\"\n                            + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true)\n                            + \"\\n\");\n            fw.close();\n            response.getWriter()\n                    .println(\n                            \"Sensitive value: '\"\n                                    + org.owasp\n                                            .esapi\n                                            .ESAPI\n                                            .encoder()\n                                            .encodeForHTML(new String(input))\n                                    + \"' encrypted and stored<br/>\");\n\n        } catch (java.security.NoSuchAlgorithmException\n                | javax.crypto.NoSuchPaddingException\n                | javax.crypto.IllegalBlockSizeException\n                | javax.crypto.BadPaddingException\n                | java.security.InvalidKeyException e) {\n            response.getWriter()\n                    .println(\n                            \"Problem executing crypto - Cipher.getInstance(java.lang.String) Test Case\");\n            e.printStackTrace(response.getWriter());\n            throw new ServletException(e);\n        }\n    }\n}", "exampleID": 309, "dataset": "init", "filepath": "/Users/xxx/repos/active_learning_interface/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00358.java"}, {"url": "https://raw.githubusercontent.com/OWASP-Benchmark/BenchmarkJava/master/src/main/java/org/owasp/benchmark/helpers/Utils.java", "rawCode": "public class Utils {\n\n    // Properties used by the generated test suite\n\n    public static final String USERDIR = System.getProperty(\"user.dir\") + File.separator;\n\n    // A 'test' directory that target test files are created in so test cases can use them\n    public static final String TESTFILES_DIR = USERDIR + \"testfiles\" + File.separator;\n\n    // This constant is used by one of the sources for Benchmark 1.2, but not in 1.3+.\n    // It is used to filter out common headers. Whatever is left is considered the custom header\n    // name for header names test cases\n    public static final Set<String> commonHeaders =\n            new HashSet<>(\n                    Arrays.asList(\n                            \"accept\",\n                            \"accept-encoding\",\n                            \"accept-language\",\n                            \"cache-control\",\n                            \"connection\",\n                            \"content-length\",\n                            \"content-type\",\n                            \"cookie\",\n                            \"host\",\n                            \"origin\",\n                            \"pragma\",\n                            \"referer\",\n                            \"sec-ch-ua\",\n                            \"sec-ch-ua-mobile\",\n                            \"sec-ch-ua-platform\",\n                            \"sec-fetch-dest\",\n                            \"sec-fetch-mode\",\n                            \"sec-fetch-site\",\n                            \"user-agent\",\n                            \"x-requested-with\"));\n\n    private static final DocumentBuilderFactory safeDocBuilderFactory =\n            DocumentBuilderFactory.newInstance();\n\n    static {\n        try {\n            // Make DBF safe from XXE by disabling doctype declarations (per OWASP XXE cheat sheet)\n            safeDocBuilderFactory.setFeature(\n                    \"http://apache.org/xml/features/disallow-doctype-decl\", true);\n        } catch (ParserConfigurationException e) {\n            System.out.println(\n                    \"ERROR: couldn't set http://apache.org/xml/features/disallow-doctype-decl\");\n            e.printStackTrace();\n        }\n\n        File tempDir = new File(TESTFILES_DIR);\n        if (!tempDir.exists()) {\n            tempDir.mkdir();\n            File testFile = new File(TESTFILES_DIR + \"FileName\");\n            try {\n                PrintWriter out = new PrintWriter(testFile);\n                out.write(\"Test is a test file.\\n\");\n                out.close();\n            } catch (FileNotFoundException e) {\n                e.printStackTrace();\n            }\n            File testFile2 = new File(TESTFILES_DIR + \"SafeText\");\n            try {\n                PrintWriter out = new PrintWriter(testFile2);\n                out.write(\"Test is a 'safe' test file.\\n\");\n                out.close();\n            } catch (FileNotFoundException e) {\n                e.printStackTrace();\n            }\n            File secreTestFile = new File(TESTFILES_DIR + \"SecretFile\");\n            try {\n                PrintWriter out = new PrintWriter(secreTestFile);\n                out.write(\"Test is a 'secret' file that no one should find.\\n\");\n                out.close();\n            } catch (FileNotFoundException e) {\n                e.printStackTrace();\n            }\n        }\n\n        // The target script is exploded out of the WAR file. When this occurs, the file\n        // loses its execute permissions. So this hack adds the required execute permissions back.\n        if (!System.getProperty(\"os.name\").contains(\"Windows\")) {\n            File script = getFileFromClasspath(\"insecureCmd.sh\", Utils.class.getClassLoader());\n            Set<PosixFilePermission> perms = new HashSet<PosixFilePermission>();\n            perms.add(PosixFilePermission.OWNER_READ);\n            perms.add(PosixFilePermission.OWNER_WRITE);\n            perms.add(PosixFilePermission.OWNER_EXECUTE);\n            perms.add(PosixFilePermission.GROUP_READ);\n            perms.add(PosixFilePermission.GROUP_EXECUTE);\n            perms.add(PosixFilePermission.OTHERS_READ);\n            perms.add(PosixFilePermission.OTHERS_EXECUTE);\n\n            try {\n                Files.setPosixFilePermissions(script.toPath(), perms);\n            } catch (IOException e) {\n                System.out.println(\n                        \"Problem while changing executable permissions: \" + e.getMessage());\n            }\n        }\n    }\n\n    public static String getCookie(HttpServletRequest request, String paramName) {\n        Cookie[] values = request.getCookies();\n        String param = \"none\";\n        if (paramName != null) {\n            for (int i = 0; i < values.length; i++) {\n                if (values[i].getName().equals(paramName)) {\n                    param = values[i].getValue();\n                    break; // break out of for loop when param found\n                }\n            }\n        }\n        return param;\n    }\n\n    public static String getOSCommandString(String append) {\n\n        String command = null;\n        String osName = System.getProperty(\"os.name\");\n        if (osName.indexOf(\"Windows\") != -1) {\n            command = \"cmd.exe /c \" + append + \" \";\n        } else {\n            command = append + \" \";\n        }\n\n        return command;\n    }\n\n    public static String getInsecureOSCommandString(ClassLoader classLoader) {\n        String command = null;\n        String osName = System.getProperty(\"os.name\");\n        if (osName.indexOf(\"Windows\") != -1) {\n            command = Utils.getFileFromClasspath(\"insecureCmd.bat\", classLoader).getAbsolutePath();\n        } else {\n            command = Utils.getFileFromClasspath(\"insecureCmd.sh\", classLoader).getAbsolutePath();\n        }\n        return command;\n    }\n\n    public static List<String> getOSCommandArray(String append) {\n\n        ArrayList<String> cmds = new ArrayList<String>();\n\n        String osName = System.getProperty(\"os.name\");\n        if (osName.indexOf(\"Windows\") != -1) {\n            cmds.add(\"cmd.exe\");\n            cmds.add(\"/c\");\n            if (append != null) {\n                cmds.add(append);\n            }\n        } else {\n            cmds.add(\"sh\");\n            cmds.add(\"-c\");\n            if (append != null) {\n                cmds.add(append);\n            }\n        }\n\n        return cmds;\n    }\n\n    // A method used by the Benchmark JAVA test cases to format OS Command Output\n    public static void printOSCommandResults(java.lang.Process proc, HttpServletResponse response)\n            throws IOException {\n        PrintWriter out = response.getWriter();\n        out.write(\n                \"<!DOCTYPE html PUBLIC \\\"-//W3C//DTD HTML 4.01 Transitional//EN\\\" \\\"http://www.w3.org/TR/html4/loose.dtd\\\">\\n\"\n                        + \"<html>\\n\"\n                        + \"<head>\\n\"\n                        + \"<meta http-equiv=\\\"Content-Type\\\" content=\\\"text/html; charset=UTF-8\\\">\\n\"\n                        + \"</head>\\n\"\n                        + \"<body>\\n\"\n                        + \"<p>\\n\");\n\n        BufferedReader stdInput = new BufferedReader(new InputStreamReader(proc.getInputStream()));\n        BufferedReader stdError = new BufferedReader(new InputStreamReader(proc.getErrorStream()));\n\n        try {\n            // read the output from the command\n            // System.out.println(\"Here is the standard output of the\n            // command:\\n\");\n            out.write(\"Here is the standard output of the command:<br>\");\n            String s = null;\n            while ((s = stdInput.readLine()) != null) {\n                out.write(ESAPI.encoder().encodeForHTML(s));\n                out.write(\"<br>\");\n            }\n\n            // read any errors from the attempted command\n            // System.out.println(\"Here is the standard error of the command (if\n            // any):\\n\");\n            out.write(\"<br>Here is the std err of the command (if any):<br>\");\n            while ((s = stdError.readLine()) != null) {\n                out.write(ESAPI.encoder().encodeForHTML(s));\n                out.write(\"<br>\");\n            }\n        } catch (IOException e) {\n            System.out.println(\"An error occurred while reading OSCommandResults\");\n            e.printStackTrace();\n        }\n    }\n\n    // A method used by the Benchmark JAVA test cases to format OS Command Output\n    // This version is only used by the Web Services test cases.\n    public static void printOSCommandResults(java.lang.Process proc, List<XMLMessage> resp) {\n\n        BufferedReader stdInput = new BufferedReader(new InputStreamReader(proc.getInputStream()));\n        BufferedReader stdError = new BufferedReader(new InputStreamReader(proc.getErrorStream()));\n\n        try {\n            // read the output from the command\n            resp.add(new XMLMessage(\"Here is the standard output of the command:\"));\n            String s = null;\n            StringBuffer out = new StringBuffer();\n            StringBuffer outError = new StringBuffer();\n\n            while ((s = stdInput.readLine()) != null) {\n                out.append(s).append(\"\\n\");\n            }\n            resp.add(new XMLMessage(out.toString()));\n            // read any errors from the attempted command\n            resp.add(new XMLMessage(\"Here is the std err of the command (if any):\"));\n            while ((s = stdError.readLine()) != null) {\n                outError.append(s).append(\"\\n\");\n            }\n\n            resp.add(new XMLMessage(outError.toString()));\n        } catch (IOException e) {\n            System.out.println(\"An error occurred while reading OSCommandResults\");\n            e.printStackTrace();\n        }\n    }\n\n    public static File getFileFromClasspath(String fileName, ClassLoader classLoader) {\n        URL url = classLoader.getResource(fileName);\n        if (url != null) {\n            try {\n                return new File(url.toURI().getPath());\n            } catch (URISyntaxException e) {\n                System.out.println(\n                        \"The file '\" + fileName + \"' cannot be loaded from the classpath.\");\n                e.printStackTrace();\n            }\n        } else System.out.println(\"The file '\" + fileName + \"' cannot be found on the classpath.\");\n        return null;\n    }\n\n    public static List<String> getLinesFromFile(File file) {\n        if (!file.exists()) {\n            try {\n                System.out.println(\"Can't find file to get lines from: \" + file.getCanonicalFile());\n            } catch (IOException e) {\n                System.out.println(\"Can't find file to get lines from.\");\n                e.printStackTrace();\n            }\n            return null;\n        }\n\n        List<String> sourceLines = new ArrayList<String>();\n\n        try (FileReader fr = new FileReader(file);\n                BufferedReader br = new BufferedReader(fr); ) {\n            String line;\n            while ((line = br.readLine()) != null) {\n                sourceLines.add(line);\n            }\n        } catch (Exception e) {\n            try {\n                System.out.println(\"Problem reading contents of file: \" + file.getCanonicalFile());\n            } catch (IOException e2) {\n                System.out.println(\"Problem reading file to get lines from.\");\n                e2.printStackTrace();\n            }\n            e.printStackTrace();\n        }\n\n        return sourceLines;\n    }\n\n    public static List<String> getLinesFromFile(String filename) {\n        return getLinesFromFile(new File(filename));\n    }\n\n    /**\n     * Encodes the supplied parameter using ESAPI's encodeForHTML(). Only supports Strings and\n     * InputStreams.\n     *\n     * @param param - The String or InputStream to encode.\n     * @return - HTML Entity encoded version of input, or \"objectTypeUnknown\" if not a supported\n     *     type.\n     */\n    public static String encodeForHTML(Object param) {\n\n        String value = \"objectTypeUnknown\";\n        if (param instanceof String) {\n            value = (String) param;\n        } else if (param instanceof java.io.InputStream) {\n            byte[] buff = new byte[1000];\n            int length = 0;\n            try {\n                java.io.InputStream stream = (java.io.InputStream) param;\n                stream.reset();\n                length = stream.read(buff);\n            } catch (IOException e) {\n                buff[0] = (byte) '?';\n                length = 1;\n            }\n            ByteArrayOutputStream b = new ByteArrayOutputStream();\n            b.write(buff, 0, length);\n            value = b.toString();\n        }\n        return ESAPI.encoder().encodeForHTML(value);\n    }\n\n    public static boolean writeLineToFile(Path pathToFileDir, String completeName, String line) {\n        boolean result = true;\n        PrintStream os = null;\n        try {\n            Files.createDirectories(pathToFileDir);\n            File f = new File(completeName);\n            if (!f.exists()) {\n                f.createNewFile();\n            }\n            FileOutputStream fos = new FileOutputStream(f, true);\n            os = new PrintStream(fos);\n            os.println(line);\n        } catch (IOException e1) {\n            result = false;\n            e1.printStackTrace();\n        } finally {\n            os.close();\n        }\n\n        return result;\n    }\n\n    /*\n     * A utility method used by the generated Java Cipher test cases.\n     */\n    private static Cipher cipher = null;\n\n    public static Cipher getCipher() {\n        if (cipher == null) {\n            try {\n                cipher =\n                        Cipher.getInstance(\n                                \"RSA/ECB/OAEPWithSHA-512AndMGF1Padding\", \"SunJCE\");\n                // Prepare the cipher to encrypt\n                java.security.KeyPairGenerator keyGen =\n                        java.security.KeyPairGenerator.getInstance(\"RSA\");\n                keyGen.initialize(4096);\n                java.security.PublicKey publicKey = keyGen.genKeyPair().getPublic();\n                cipher.init(Cipher.ENCRYPT_MODE, publicKey);\n            } catch (NoSuchAlgorithmException\n                    | NoSuchProviderException\n                    | NoSuchPaddingException\n                    | InvalidKeyException e) {\n                e.printStackTrace();\n            }\n        }\n        return cipher;\n    }\n\n    public static SSLConnectionSocketFactory getSSLFactory() throws Exception {\n        SSLContext sslcontext =\n                SSLContexts.custom().loadTrustMaterial(null, new TrustSelfSignedStrategy()).build();\n        // Allow TLSv1 protocol only\n        SSLConnectionSocketFactory sslsf =\n                new SSLConnectionSocketFactory(\n                        sslcontext, new String[] {\"TLSv1\"}, null, NoopHostnameVerifier.INSTANCE);\n        return sslsf;\n    }\n\n    /**\n     * This method returns information about which library the supplied class came from. This is\n     * useful when determining what class a Factory instantiated, for example. Mainly used for XXE\n     * verification/debugging.\n     *\n     * @param The name of the class being passed in.\n     * @param The class to print information about.\n     * @return A string containing the Component Name, the name of the class, possibly the\n     *     implementation vendor, spec version, implementation version, and the library it came from\n     *     (or Java Runtime it came from).\n     */\n    public static String getClassImplementationInfo(String componentName, Class componentClass) {\n        CodeSource source = componentClass.getProtectionDomain().getCodeSource();\n        Package p = componentClass.getPackage();\n        return MessageFormat.format(\n                \"{0} implementation: {1} ({2}) version {3} ({4}) loaded from: {5}\",\n                componentName,\n                componentClass.getName(),\n                p.getImplementationVendor(),\n                p.getSpecificationVersion(),\n                p.getImplementationVersion(),\n                source == null ? \"Java_Runtime\" : source.getLocation());\n    }\n}", "exampleID": 346, "dataset": "init", "filepath": "/Users/xxx/repos/active_learning_interface/BenchmarkJava/src/main/java/org/owasp/benchmark/helpers/Utils.java"}]