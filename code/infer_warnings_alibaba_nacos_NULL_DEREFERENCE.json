[{"url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedStoragePersistServiceImpl.java", "rawCode": "/*\n * Copyright 1999-2018 Alibaba Group Holding Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.alibaba.nacos.config.server.service.repository.embedded;\n\nimport com.alibaba.nacos.api.exception.NacosException;\nimport com.alibaba.nacos.api.exception.runtime.NacosRuntimeException;\nimport com.alibaba.nacos.common.notify.NotifyCenter;\nimport com.alibaba.nacos.common.utils.MD5Utils;\nimport com.alibaba.nacos.common.utils.Pair;\nimport com.alibaba.nacos.common.utils.StringUtils;\nimport com.alibaba.nacos.config.server.constant.Constants;\nimport com.alibaba.nacos.config.server.enums.FileTypeEnum;\nimport com.alibaba.nacos.config.server.exception.NacosConfigException;\nimport com.alibaba.nacos.config.server.model.ConfigAdvanceInfo;\nimport com.alibaba.nacos.config.server.model.ConfigAllInfo;\nimport com.alibaba.nacos.config.server.model.ConfigHistoryInfo;\nimport com.alibaba.nacos.config.server.model.ConfigInfo;\nimport com.alibaba.nacos.config.server.model.ConfigInfoAggr;\nimport com.alibaba.nacos.config.server.model.ConfigInfoBase;\nimport com.alibaba.nacos.config.server.model.ConfigInfoBetaWrapper;\nimport com.alibaba.nacos.config.server.model.ConfigInfoChanged;\nimport com.alibaba.nacos.config.server.model.ConfigInfoTagWrapper;\nimport com.alibaba.nacos.config.server.model.ConfigInfoWrapper;\nimport com.alibaba.nacos.config.server.model.ConfigKey;\nimport com.alibaba.nacos.config.server.model.SameConfigPolicy;\nimport com.alibaba.nacos.config.server.model.SubInfo;\nimport com.alibaba.nacos.config.server.service.repository.PersistService;\nimport com.alibaba.nacos.config.server.service.sql.EmbeddedStorageContextUtils;\nimport com.alibaba.nacos.config.server.utils.ParamUtils;\nimport com.alibaba.nacos.core.distributed.id.IdGeneratorManager;\nimport com.alibaba.nacos.core.namespace.model.TenantInfo;\nimport com.alibaba.nacos.persistence.configuration.condition.ConditionOnEmbeddedStorage;\nimport com.alibaba.nacos.persistence.datasource.DataSourceService;\nimport com.alibaba.nacos.persistence.datasource.DynamicDataSource;\nimport com.alibaba.nacos.persistence.model.Page;\nimport com.alibaba.nacos.persistence.model.event.DerbyImportEvent;\nimport com.alibaba.nacos.persistence.repository.PaginationHelper;\nimport com.alibaba.nacos.persistence.repository.embedded.EmbeddedPaginationHelperImpl;\nimport com.alibaba.nacos.persistence.repository.embedded.EmbeddedStorageContextHolder;\nimport com.alibaba.nacos.persistence.repository.embedded.operate.DatabaseOperate;\nimport com.alibaba.nacos.plugin.datasource.MapperManager;\nimport com.alibaba.nacos.plugin.datasource.constants.CommonConstant;\nimport com.alibaba.nacos.plugin.datasource.constants.FieldConstant;\nimport com.alibaba.nacos.plugin.datasource.constants.TableConstant;\nimport com.alibaba.nacos.plugin.datasource.mapper.ConfigInfoAggrMapper;\nimport com.alibaba.nacos.plugin.datasource.mapper.ConfigInfoBetaMapper;\nimport com.alibaba.nacos.plugin.datasource.mapper.ConfigInfoMapper;\nimport com.alibaba.nacos.plugin.datasource.mapper.ConfigInfoTagMapper;\nimport com.alibaba.nacos.plugin.datasource.mapper.ConfigTagsRelationMapper;\nimport com.alibaba.nacos.plugin.datasource.mapper.HistoryConfigInfoMapper;\nimport com.alibaba.nacos.plugin.datasource.mapper.TenantInfoMapper;\nimport com.alibaba.nacos.plugin.datasource.model.MapperContext;\nimport com.alibaba.nacos.plugin.datasource.model.MapperResult;\nimport com.alibaba.nacos.plugin.encryption.handler.EncryptionHandler;\nimport com.alibaba.nacos.sys.env.EnvUtil;\nimport org.apache.commons.collections.CollectionUtils;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.stereotype.Component;\nimport org.springframework.transaction.support.TransactionTemplate;\n\nimport javax.annotation.PostConstruct;\nimport java.io.IOException;\nimport java.sql.Timestamp;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.Objects;\nimport java.util.Optional;\nimport java.util.function.BiConsumer;\nimport java.util.stream.Collectors;\n\nimport static com.alibaba.nacos.config.server.service.repository.ConfigRowMapperInjector.CONFIG_ADVANCE_INFO_ROW_MAPPER;\nimport static com.alibaba.nacos.config.server.service.repository.ConfigRowMapperInjector.CONFIG_ALL_INFO_ROW_MAPPER;\nimport static com.alibaba.nacos.config.server.service.repository.ConfigRowMapperInjector.CONFIG_INFO_AGGR_ROW_MAPPER;\nimport static com.alibaba.nacos.config.server.service.repository.ConfigRowMapperInjector.CONFIG_INFO_BASE_ROW_MAPPER;\nimport static com.alibaba.nacos.config.server.service.repository.ConfigRowMapperInjector.CONFIG_INFO_BETA_WRAPPER_ROW_MAPPER;\nimport static com.alibaba.nacos.config.server.service.repository.ConfigRowMapperInjector.CONFIG_INFO_CHANGED_ROW_MAPPER;\nimport static com.alibaba.nacos.config.server.service.repository.ConfigRowMapperInjector.CONFIG_INFO_ROW_MAPPER;\nimport static com.alibaba.nacos.config.server.service.repository.ConfigRowMapperInjector.CONFIG_INFO_TAG_WRAPPER_ROW_MAPPER;\nimport static com.alibaba.nacos.config.server.service.repository.ConfigRowMapperInjector.CONFIG_INFO_WRAPPER_ROW_MAPPER;\nimport static com.alibaba.nacos.config.server.service.repository.ConfigRowMapperInjector.CONFIG_KEY_ROW_MAPPER;\nimport static com.alibaba.nacos.config.server.service.repository.ConfigRowMapperInjector.HISTORY_DETAIL_ROW_MAPPER;\nimport static com.alibaba.nacos.config.server.service.repository.ConfigRowMapperInjector.HISTORY_LIST_ROW_MAPPER;\nimport static com.alibaba.nacos.config.server.utils.LogUtil.DEFAULT_LOG;\nimport static com.alibaba.nacos.core.namespace.repository.NamespaceRowMapperInjector.TENANT_INFO_ROW_MAPPER;\nimport static com.alibaba.nacos.persistence.repository.RowMapperManager.MAP_ROW_MAPPER;\n\n/**\n * For Apache Derby.\n *\n * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n */\n@SuppressWarnings({\"PMD.MethodReturnWrapperTypeRule\", \"checkstyle:linelength\"})\n@Conditional(value = ConditionOnEmbeddedStorage.class)\n@Component\n@Deprecated\npublic class EmbeddedStoragePersistServiceImpl implements PersistService {\n    \n    private static final String RESOURCE_CONFIG_INFO_ID = \"config-info-id\";\n    \n    private static final String RESOURCE_CONFIG_HISTORY_ID = \"config-history-id\";\n    \n    private static final String RESOURCE_CONFIG_TAG_RELATION_ID = \"config-tag-relation-id\";\n    \n    private static final String RESOURCE_APP_CONFIGDATA_RELATION_SUBS = \"app-configdata-relation-subs\";\n    \n    private static final String RESOURCE_CONFIG_BETA_ID = \"config-beta-id\";\n    \n    private static final String RESOURCE_NAMESPACE_ID = \"namespace-id\";\n    \n    private static final String RESOURCE_USER_ID = \"user-id\";\n    \n    private static final String RESOURCE_ROLE_ID = \"role-id\";\n    \n    private static final String RESOURCE_PERMISSIONS_ID = \"permissions_id\";\n    \n    private DataSourceService dataSourceService;\n    \n    private final DatabaseOperate databaseOperate;\n    \n    private final IdGeneratorManager idGeneratorManager;\n    \n    private MapperManager mapperManager;\n    \n    private static final String DATA_ID = \"dataId\";\n    \n    private static final String GROUP = \"group\";\n    \n    private static final String APP_NAME = \"appName\";\n    \n    private static final String CONTENT = \"content\";\n    \n    private static final String TENANT = \"tenant_id\";\n    \n    /**\n     * The constructor sets the dependency injection order.\n     *\n     * @param databaseOperate    {@link EmbeddedStoragePersistServiceImpl}\n     * @param idGeneratorManager {@link IdGeneratorManager}\n     */\n    public EmbeddedStoragePersistServiceImpl(DatabaseOperate databaseOperate, IdGeneratorManager idGeneratorManager) {\n        this.databaseOperate = databaseOperate;\n        this.idGeneratorManager = idGeneratorManager;\n        Boolean isDataSourceLogEnable = EnvUtil.getProperty(CommonConstant.NACOS_PLUGIN_DATASOURCE_LOG, Boolean.class,\n                false);\n        NotifyCenter.registerToSharePublisher(DerbyImportEvent.class);\n        mapperManager = MapperManager.instance(isDataSourceLogEnable);\n    }\n    \n    /**\n     * init DataSourceService and IdGeneratorManager.\n     */\n    @PostConstruct\n    public void init() {\n        dataSourceService = DynamicDataSource.getInstance().getDataSource();\n        idGeneratorManager.register(RESOURCE_CONFIG_INFO_ID, RESOURCE_CONFIG_HISTORY_ID,\n                RESOURCE_CONFIG_TAG_RELATION_ID, RESOURCE_APP_CONFIGDATA_RELATION_SUBS, RESOURCE_CONFIG_BETA_ID,\n                RESOURCE_NAMESPACE_ID, RESOURCE_USER_ID, RESOURCE_ROLE_ID, RESOURCE_PERMISSIONS_ID);\n    }\n    \n    public boolean checkMasterWritable() {\n        return dataSourceService.checkMasterWritable();\n    }\n    \n    public void setBasicDataSourceService(DataSourceService dataSourceService) {\n        this.dataSourceService = dataSourceService;\n    }\n    \n    public synchronized void reload() throws IOException {\n        this.dataSourceService.reload();\n    }\n    \n    // ----------------------- config_info table insert update delete\n    \n    /**\n     * For unit testing.\n     */\n    public JdbcTemplate getJdbcTemplate() {\n        return this.dataSourceService.getJdbcTemplate();\n    }\n    \n    public TransactionTemplate getTransactionTemplate() {\n        return this.dataSourceService.getTransactionTemplate();\n    }\n    \n    @SuppressWarnings(\"checkstyle:AbbreviationAsWordInName\")\n    public String getCurrentDBUrl() {\n        return this.dataSourceService.getCurrentDbUrl();\n    }\n    \n    public DatabaseOperate getDatabaseOperate() {\n        return databaseOperate;\n    }\n    \n    @Override\n    public <E> PaginationHelper<E> createPaginationHelper() {\n        return new EmbeddedPaginationHelperImpl<>(databaseOperate);\n    }\n    \n    @Override\n    public void addConfigInfo(final String srcIp, final String srcUser, final ConfigInfo configInfo,\n            final Timestamp time, final Map<String, Object> configAdvanceInfo, final boolean notify) {\n        addConfigInfo(srcIp, srcUser, configInfo, time, configAdvanceInfo, notify, null);\n    }\n    \n    private void addConfigInfo(final String srcIp, final String srcUser, final ConfigInfo configInfo,\n            final Timestamp time, final Map<String, Object> configAdvanceInfo, final boolean notify,\n            BiConsumer<Boolean, Throwable> consumer) {\n        \n        try {\n            final String tenantTmp =\n                    StringUtils.isBlank(configInfo.getTenant()) ? StringUtils.EMPTY : configInfo.getTenant();\n            configInfo.setTenant(tenantTmp);\n            \n            long configId = idGeneratorManager.nextId(RESOURCE_CONFIG_INFO_ID);\n            long hisId = idGeneratorManager.nextId(RESOURCE_CONFIG_HISTORY_ID);\n            \n            addConfigInfoAtomic(configId, srcIp, srcUser, configInfo, time, configAdvanceInfo);\n            String configTags = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"config_tags\");\n            \n            addConfigTagsRelation(configId, configTags, configInfo.getDataId(), configInfo.getGroup(),\n                    configInfo.getTenant());\n            insertConfigHistoryAtomic(hisId, configInfo, srcIp, srcUser, time, \"I\");\n            EmbeddedStorageContextUtils.onModifyConfigInfo(configInfo, srcIp, time);\n            databaseOperate.blockUpdate(consumer);\n        } finally {\n            EmbeddedStorageContextHolder.cleanAllContext();\n        }\n    }\n    \n    @Override\n    public void addConfigInfo4Beta(ConfigInfo configInfo, String betaIps, String srcIp, String srcUser, Timestamp time,\n            boolean notify) {\n        String appNameTmp = StringUtils.isBlank(configInfo.getAppName()) ? StringUtils.EMPTY : configInfo.getAppName();\n        String tenantTmp = StringUtils.isBlank(configInfo.getTenant()) ? StringUtils.EMPTY : configInfo.getTenant();\n        String encryptedDataKey = StringUtils.isBlank(configInfo.getEncryptedDataKey()) ? StringUtils.EMPTY\n                : configInfo.getEncryptedDataKey();\n        \n        configInfo.setTenant(tenantTmp);\n        try {\n            String md5 = MD5Utils.md5Hex(configInfo.getContent(), Constants.ENCODE);\n            ConfigInfoBetaMapper configInfoBetaMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                    TableConstant.CONFIG_INFO_BETA);\n            final String sql = configInfoBetaMapper.insert(\n                    Arrays.asList(\"data_id\", \"group_id\", \"tenant_id\", \"app_name\", \"content\", \"md5\", \"beta_ips\",\n                            \"src_ip\", \"src_user\", \"gmt_create\", \"gmt_modified\", \"encrypted_data_key\"));\n            final Object[] args = new Object[] {configInfo.getDataId(), configInfo.getGroup(), tenantTmp, appNameTmp,\n                    configInfo.getContent(), md5, betaIps, srcIp, srcUser, time, time, encryptedDataKey};\n            \n            EmbeddedStorageContextUtils.onModifyConfigBetaInfo(configInfo, betaIps, srcIp, time);\n            EmbeddedStorageContextHolder.addSqlContext(sql, args);\n            \n            databaseOperate.blockUpdate();\n        } finally {\n            EmbeddedStorageContextHolder.cleanAllContext();\n        }\n    }\n    \n    @Override\n    public void addConfigInfo4Tag(ConfigInfo configInfo, String tag, String srcIp, String srcUser, Timestamp time,\n            boolean notify) {\n        String appNameTmp = StringUtils.isBlank(configInfo.getAppName()) ? StringUtils.EMPTY : configInfo.getAppName();\n        String tenantTmp = StringUtils.isBlank(configInfo.getTenant()) ? StringUtils.EMPTY : configInfo.getTenant();\n        String tagTmp = StringUtils.isBlank(tag) ? StringUtils.EMPTY : tag.trim();\n        \n        configInfo.setTenant(tenantTmp);\n        \n        try {\n            String md5 = MD5Utils.md5Hex(configInfo.getContent(), Constants.ENCODE);\n            ConfigInfoTagMapper configInfoTagMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                    TableConstant.CONFIG_INFO_TAG);\n            final String sql = configInfoTagMapper.insert(\n                    Arrays.asList(\"data_id\", \"group_id\", \"tenant_id\", \"tag_id\", \"app_name\", \"content\", \"md5\", \"src_ip\",\n                            \"src_user\", \"gmt_create\", \"gmt_modified\"));\n            final Object[] args = new Object[] {configInfo.getDataId(), configInfo.getGroup(), tenantTmp, tagTmp,\n                    appNameTmp, configInfo.getContent(), md5, srcIp, srcUser, time, time};\n            \n            EmbeddedStorageContextUtils.onModifyConfigTagInfo(configInfo, tagTmp, srcIp, time);\n            EmbeddedStorageContextHolder.addSqlContext(sql, args);\n            \n            databaseOperate.blockUpdate();\n        } finally {\n            EmbeddedStorageContextHolder.cleanAllContext();\n        }\n    }\n    \n    @Override\n    public void updateConfigInfo(final ConfigInfo configInfo, final String srcIp, final String srcUser,\n            final Timestamp time, final Map<String, Object> configAdvanceInfo, final boolean notify) {\n        try {\n            ConfigInfo oldConfigInfo = findConfigInfo(configInfo.getDataId(), configInfo.getGroup(),\n                    configInfo.getTenant());\n            \n            final String tenantTmp =\n                    StringUtils.isBlank(configInfo.getTenant()) ? StringUtils.EMPTY : configInfo.getTenant();\n            \n            oldConfigInfo.setTenant(tenantTmp);\n            \n            String appNameTmp = oldConfigInfo.getAppName();\n            // If the appName passed by the user is not empty, the appName of the user is persisted;\n            // otherwise, the appName of db is used. Empty string is required to clear appName\n            if (configInfo.getAppName() == null) {\n                configInfo.setAppName(appNameTmp);\n            }\n            \n            updateConfigInfoAtomic(configInfo, srcIp, srcUser, time, configAdvanceInfo);\n            \n            String configTags = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"config_tags\");\n            if (configTags != null) {\n                // Delete all tags and recreate them\n                removeTagByIdAtomic(oldConfigInfo.getId());\n                addConfigTagsRelation(oldConfigInfo.getId(), configTags, configInfo.getDataId(), configInfo.getGroup(),\n                        configInfo.getTenant());\n            }\n            \n            insertConfigHistoryAtomic(oldConfigInfo.getId(), oldConfigInfo, srcIp, srcUser, time, \"U\");\n            \n            EmbeddedStorageContextUtils.onModifyConfigInfo(configInfo, srcIp, time);\n            databaseOperate.blockUpdate();\n        } finally {\n            EmbeddedStorageContextHolder.cleanAllContext();\n        }\n    }\n    \n    @Override\n    public boolean updateConfigInfoCas(final ConfigInfo configInfo, final String srcIp, final String srcUser,\n            final Timestamp time, final Map<String, Object> configAdvanceInfo, final boolean notify) {\n        try {\n            ConfigInfo oldConfigInfo = findConfigInfo(configInfo.getDataId(), configInfo.getGroup(),\n                    configInfo.getTenant());\n            \n            final String tenantTmp =\n                    StringUtils.isBlank(configInfo.getTenant()) ? StringUtils.EMPTY : configInfo.getTenant();\n            \n            oldConfigInfo.setTenant(tenantTmp);\n            \n            String appNameTmp = oldConfigInfo.getAppName();\n            // If the appName passed by the user is not empty, the appName of the user is persisted;\n            // otherwise, the appName of db is used. Empty string is required to clear appName\n            if (configInfo.getAppName() == null) {\n                configInfo.setAppName(appNameTmp);\n            }\n            \n            updateConfigInfoAtomicCas(configInfo, srcIp, srcUser, time, configAdvanceInfo);\n            \n            String configTags = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"config_tags\");\n            if (configTags != null) {\n                // Delete all tags and recreate them\n                removeTagByIdAtomic(oldConfigInfo.getId());\n                addConfigTagsRelation(oldConfigInfo.getId(), configTags, configInfo.getDataId(), configInfo.getGroup(),\n                        configInfo.getTenant());\n            }\n            \n            insertConfigHistoryAtomic(oldConfigInfo.getId(), oldConfigInfo, srcIp, srcUser, time, \"U\");\n            \n            EmbeddedStorageContextUtils.onModifyConfigInfo(configInfo, srcIp, time);\n            return databaseOperate.blockUpdate();\n        } finally {\n            EmbeddedStorageContextHolder.cleanAllContext();\n        }\n    }\n    \n    @Override\n    public void updateConfigInfo4Beta(ConfigInfo configInfo, String betaIps, String srcIp, String srcUser,\n            Timestamp time, boolean notify) {\n        String appNameTmp = StringUtils.isBlank(configInfo.getAppName()) ? StringUtils.EMPTY : configInfo.getAppName();\n        String tenantTmp = StringUtils.isBlank(configInfo.getTenant()) ? StringUtils.EMPTY : configInfo.getTenant();\n        String encryptedDataKey = StringUtils.isBlank(configInfo.getEncryptedDataKey()) ? StringUtils.EMPTY\n                : configInfo.getEncryptedDataKey();\n        \n        configInfo.setTenant(tenantTmp);\n        try {\n            String md5 = MD5Utils.md5Hex(configInfo.getContent(), Constants.ENCODE);\n            ConfigInfoBetaMapper configInfoBetaMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                    TableConstant.CONFIG_INFO_BETA);\n            final String sql = configInfoBetaMapper.update(\n                    Arrays.asList(\"content\", \"md5\", \"beta_ips\", \"src_ip\", \"src_user\", \"gmt_modified\", \"app_name\",\n                            \"encrypted_data_key\"), Arrays.asList(\"data_id\", \"group_id\", \"tenant_id\"));\n            \n            final Object[] args = new Object[] {configInfo.getContent(), md5, betaIps, srcIp, srcUser, time, appNameTmp,\n                    encryptedDataKey, configInfo.getDataId(), configInfo.getGroup(), tenantTmp};\n            \n            EmbeddedStorageContextUtils.onModifyConfigBetaInfo(configInfo, betaIps, srcIp, time);\n            EmbeddedStorageContextHolder.addSqlContext(sql, args);\n            \n            databaseOperate.blockUpdate();\n        } finally {\n            EmbeddedStorageContextHolder.cleanAllContext();\n        }\n    }\n    \n    @Override\n    public boolean updateConfigInfo4BetaCas(ConfigInfo configInfo, String betaIps, String srcIp, String srcUser,\n            Timestamp time, boolean notify) {\n        String appNameTmp = StringUtils.isBlank(configInfo.getAppName()) ? StringUtils.EMPTY : configInfo.getAppName();\n        String tenantTmp = StringUtils.isBlank(configInfo.getTenant()) ? StringUtils.EMPTY : configInfo.getTenant();\n        \n        configInfo.setTenant(tenantTmp);\n        try {\n            String md5 = MD5Utils.md5Hex(configInfo.getContent(), Constants.ENCODE);\n            \n            ConfigInfoBetaMapper configInfoBetaMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                    TableConstant.CONFIG_INFO_BETA);\n            \n            MapperContext context = new MapperContext();\n            context.putUpdateParameter(FieldConstant.CONTENT, configInfo.getContent());\n            context.putUpdateParameter(FieldConstant.MD5, md5);\n            context.putUpdateParameter(FieldConstant.BETA_IPS, betaIps);\n            context.putUpdateParameter(FieldConstant.SRC_IP, srcIp);\n            context.putUpdateParameter(FieldConstant.SRC_USER, srcUser);\n            context.putUpdateParameter(FieldConstant.GMT_MODIFIED, time);\n            context.putUpdateParameter(FieldConstant.APP_NAME, appNameTmp);\n            \n            context.putWhereParameter(FieldConstant.DATA_ID, configInfo.getDataId());\n            context.putWhereParameter(FieldConstant.GROUP_ID, configInfo.getGroup());\n            context.putWhereParameter(FieldConstant.TENANT_ID, tenantTmp);\n            context.putWhereParameter(FieldConstant.MD5, configInfo.getMd5());\n            \n            MapperResult mapperResult = configInfoBetaMapper.updateConfigInfo4BetaCas(context);\n            \n            final String sql = mapperResult.getSql();\n            List<Object> paramList = mapperResult.getParamList();\n            final Object[] args = paramList.toArray();\n            \n            EmbeddedStorageContextUtils.onModifyConfigBetaInfo(configInfo, betaIps, srcIp, time);\n            EmbeddedStorageContextHolder.addSqlContext(sql, args);\n            \n            return databaseOperate.blockUpdate();\n        } finally {\n            EmbeddedStorageContextHolder.cleanAllContext();\n        }\n    }\n    \n    @Override\n    public void updateConfigInfo4Tag(ConfigInfo configInfo, String tag, String srcIp, String srcUser, Timestamp time,\n            boolean notify) {\n        String appNameTmp = StringUtils.isBlank(configInfo.getAppName()) ? StringUtils.EMPTY : configInfo.getAppName();\n        String tenantTmp = StringUtils.isBlank(configInfo.getTenant()) ? StringUtils.EMPTY : configInfo.getTenant();\n        String tagTmp = StringUtils.isBlank(tag) ? StringUtils.EMPTY : tag.trim();\n        \n        configInfo.setTenant(tenantTmp);\n        \n        try {\n            String md5 = MD5Utils.md5Hex(configInfo.getContent(), Constants.ENCODE);\n            \n            ConfigInfoTagMapper configInfoTagMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                    TableConstant.CONFIG_INFO_TAG);\n            final String sql = configInfoTagMapper.update(\n                    Arrays.asList(\"content\", \"md5\", \"src_ip\", \"src_user\", \"gmt_modified\", \"app_name\"),\n                    Arrays.asList(\"data_id\", \"group_id\", \"tenant_id\", \"tag_id\"));\n            final Object[] args = new Object[] {configInfo.getContent(), md5, srcIp, srcUser, time, appNameTmp,\n                    configInfo.getDataId(), configInfo.getGroup(), tenantTmp, tagTmp};\n            \n            EmbeddedStorageContextUtils.onModifyConfigTagInfo(configInfo, tagTmp, srcIp, time);\n            EmbeddedStorageContextHolder.addSqlContext(sql, args);\n            \n            databaseOperate.blockUpdate();\n        } finally {\n            EmbeddedStorageContextHolder.cleanAllContext();\n        }\n    }\n    \n    @Override\n    public boolean updateConfigInfo4TagCas(ConfigInfo configInfo, String tag, String srcIp, String srcUser,\n            Timestamp time, boolean notify) {\n        String appNameTmp = StringUtils.isBlank(configInfo.getAppName()) ? StringUtils.EMPTY : configInfo.getAppName();\n        String tenantTmp = StringUtils.isBlank(configInfo.getTenant()) ? StringUtils.EMPTY : configInfo.getTenant();\n        String tagTmp = StringUtils.isBlank(tag) ? StringUtils.EMPTY : tag.trim();\n        \n        configInfo.setTenant(tenantTmp);\n        \n        try {\n            String md5 = MD5Utils.md5Hex(configInfo.getContent(), Constants.ENCODE);\n            ConfigInfoTagMapper configInfoTagMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                    TableConstant.CONFIG_INFO_TAG);\n            MapperContext context = new MapperContext();\n            context.putUpdateParameter(FieldConstant.CONTENT, configInfo.getContent());\n            context.putUpdateParameter(FieldConstant.MD5, md5);\n            context.putUpdateParameter(FieldConstant.SRC_IP, srcIp);\n            context.putUpdateParameter(FieldConstant.SRC_USER, srcUser);\n            context.putUpdateParameter(FieldConstant.GMT_MODIFIED, time);\n            context.putUpdateParameter(FieldConstant.APP_NAME, appNameTmp);\n            \n            context.putWhereParameter(FieldConstant.DATA_ID, configInfo.getDataId());\n            context.putWhereParameter(FieldConstant.GROUP_ID, configInfo.getGroup());\n            context.putWhereParameter(FieldConstant.TENANT_ID, tenantTmp);\n            context.putWhereParameter(FieldConstant.TAG_ID, tagTmp);\n            context.putWhereParameter(FieldConstant.MD5, configInfo.getMd5());\n            \n            final MapperResult mapperResult = configInfoTagMapper.updateConfigInfo4TagCas(context);\n            \n            EmbeddedStorageContextUtils.onModifyConfigTagInfo(configInfo, tagTmp, srcIp, time);\n            EmbeddedStorageContextHolder.addSqlContext(mapperResult.getSql(), mapperResult.getParamList());\n            \n            return databaseOperate.blockUpdate();\n        } finally {\n            EmbeddedStorageContextHolder.cleanAllContext();\n        }\n    }\n    \n    @Override\n    public void insertOrUpdateBeta(final ConfigInfo configInfo, final String betaIps, final String srcIp,\n            final String srcUser, final Timestamp time, final boolean notify) {\n        if (findConfigInfo4Beta(configInfo.getDataId(), configInfo.getGroup(), configInfo.getTenant()) == null) {\n            addConfigInfo4Beta(configInfo, betaIps, srcIp, null, time, notify);\n        } else {\n            updateConfigInfo4Beta(configInfo, betaIps, srcIp, null, time, notify);\n        }\n    }\n    \n    @Override\n    public boolean insertOrUpdateBetaCas(final ConfigInfo configInfo, final String betaIps, final String srcIp,\n            final String srcUser, final Timestamp time, final boolean notify) {\n        if (findConfigInfo4Beta(configInfo.getDataId(), configInfo.getGroup(), configInfo.getTenant()) == null) {\n            addConfigInfo4Beta(configInfo, betaIps, srcIp, null, time, notify);\n            return true;\n        } else {\n            return updateConfigInfo4BetaCas(configInfo, betaIps, srcIp, null, time, notify);\n        }\n        \n    }\n    \n    @Override\n    public void insertOrUpdateTag(final ConfigInfo configInfo, final String tag, final String srcIp,\n            final String srcUser, final Timestamp time, final boolean notify) {\n        if (findConfigInfo4Tag(configInfo.getDataId(), configInfo.getGroup(), configInfo.getTenant(), tag) == null) {\n            addConfigInfo4Tag(configInfo, tag, srcIp, null, time, notify);\n        } else {\n            updateConfigInfo4Tag(configInfo, tag, srcIp, null, time, notify);\n        }\n    }\n    \n    @Override\n    public boolean insertOrUpdateTagCas(final ConfigInfo configInfo, final String tag, final String srcIp,\n            final String srcUser, final Timestamp time, final boolean notify) {\n        if (findConfigInfo4Tag(configInfo.getDataId(), configInfo.getGroup(), configInfo.getTenant(), tag) == null) {\n            addConfigInfo4Tag(configInfo, tag, srcIp, null, time, notify);\n            return true;\n        } else {\n            return updateConfigInfo4TagCas(configInfo, tag, srcIp, null, time, notify);\n        }\n    }\n    \n    @Override\n    public void updateMd5(String dataId, String group, String tenant, String md5, Timestamp lastTime) {\n        String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n        try {\n            ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                    TableConstant.CONFIG_INFO);\n            final String sql = configInfoMapper.update(Arrays.asList(\"md5\"),\n                    Arrays.asList(\"data_id\", \"group_id\", \"tenant_id\", \"gmt_modified\"));\n            final Object[] args = new Object[] {md5, dataId, group, tenantTmp, lastTime};\n            \n            EmbeddedStorageContextHolder.addSqlContext(sql, args);\n            \n            boolean result = databaseOperate.update(EmbeddedStorageContextHolder.getCurrentSqlContext());\n            if (!result) {\n                throw new NacosConfigException(\"Failed to config the MD5 modification\");\n            }\n        } finally {\n            EmbeddedStorageContextHolder.cleanAllContext();\n        }\n    }\n    \n    @Override\n    public void insertOrUpdate(String srcIp, String srcUser, ConfigInfo configInfo, Timestamp time,\n            Map<String, Object> configAdvanceInfo) {\n        insertOrUpdate(srcIp, srcUser, configInfo, time, configAdvanceInfo, true);\n    }\n    \n    @Override\n    public void insertOrUpdate(String srcIp, String srcUser, ConfigInfo configInfo, Timestamp time,\n            Map<String, Object> configAdvanceInfo, boolean notify) {\n        if (Objects.isNull(findConfigInfo(configInfo.getDataId(), configInfo.getGroup(), configInfo.getTenant()))) {\n            addConfigInfo(srcIp, srcUser, configInfo, time, configAdvanceInfo, notify);\n        } else {\n            updateConfigInfo(configInfo, srcIp, srcUser, time, configAdvanceInfo, notify);\n        }\n    }\n    \n    @Override\n    public boolean insertOrUpdateCas(String srcIp, String srcUser, ConfigInfo configInfo, Timestamp time,\n            Map<String, Object> configAdvanceInfo) {\n        return insertOrUpdateCas(srcIp, srcUser, configInfo, time, configAdvanceInfo, true);\n    }\n    \n    @Override\n    public boolean insertOrUpdateCas(String srcIp, String srcUser, ConfigInfo configInfo, Timestamp time,\n            Map<String, Object> configAdvanceInfo, boolean notify) {\n        if (Objects.isNull(findConfigInfo(configInfo.getDataId(), configInfo.getGroup(), configInfo.getTenant()))) {\n            addConfigInfo(srcIp, srcUser, configInfo, time, configAdvanceInfo, notify);\n            return true;\n        } else {\n            return updateConfigInfoCas(configInfo, srcIp, srcUser, time, configAdvanceInfo, notify);\n        }\n    }\n    \n    private boolean isAlreadyExist(SubInfo subInfo) {\n        final String sql = \"SELECT * FROM app_configdata_relation_subs WHERE dara_id=? AND group_id=? AND app_name=?\";\n        Map obj = databaseOperate.queryOne(sql,\n                new Object[] {subInfo.getDataId(), subInfo.getGroup(), subInfo.getAppName()}, Map.class);\n        return obj != null;\n    }\n    \n    @Override\n    public void removeConfigInfo(final String dataId, final String group, final String tenant, final String srcIp,\n            final String srcUser) {\n        final Timestamp time = new Timestamp(System.currentTimeMillis());\n        ConfigInfo configInfo = findConfigInfo(dataId, group, tenant);\n        if (Objects.nonNull(configInfo)) {\n            try {\n                String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n                \n                removeConfigInfoAtomic(dataId, group, tenantTmp, srcIp, srcUser);\n                removeTagByIdAtomic(configInfo.getId());\n                insertConfigHistoryAtomic(configInfo.getId(), configInfo, srcIp, srcUser, time, \"D\");\n                \n                EmbeddedStorageContextUtils.onDeleteConfigInfo(tenantTmp, group, dataId, srcIp, time);\n                \n                boolean result = databaseOperate.update(EmbeddedStorageContextHolder.getCurrentSqlContext());\n                if (!result) {\n                    throw new NacosConfigException(\"config deletion failed\");\n                }\n            } finally {\n                EmbeddedStorageContextHolder.cleanAllContext();\n            }\n        }\n    }\n    \n    @Override\n    public List<ConfigInfo> removeConfigInfoByIds(final List<Long> ids, final String srcIp, final String srcUser) {\n        if (CollectionUtils.isEmpty(ids)) {\n            return null;\n        }\n        ids.removeAll(Collections.singleton(null));\n        final Timestamp time = new Timestamp(System.currentTimeMillis());\n        try {\n            String idsStr = StringUtils.join(ids, StringUtils.COMMA);\n            List<ConfigInfo> configInfoList = findConfigInfosByIds(idsStr);\n            if (CollectionUtils.isNotEmpty(configInfoList)) {\n                removeConfigInfoByIdsAtomic(idsStr);\n                for (ConfigInfo configInfo : configInfoList) {\n                    removeTagByIdAtomic(configInfo.getId());\n                    insertConfigHistoryAtomic(configInfo.getId(), configInfo, srcIp, srcUser, time, \"D\");\n                }\n            }\n            \n            EmbeddedStorageContextUtils.onBatchDeleteConfigInfo(configInfoList);\n            boolean result = databaseOperate.update(EmbeddedStorageContextHolder.getCurrentSqlContext());\n            if (!result) {\n                throw new NacosConfigException(\"Failed to config batch deletion\");\n            }\n            \n            return configInfoList;\n        } finally {\n            EmbeddedStorageContextHolder.cleanAllContext();\n        }\n    }\n    \n    @Override\n    public void removeConfigInfo4Beta(final String dataId, final String group, final String tenant) {\n        final String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n        ConfigInfo configInfo = findConfigInfo4Beta(dataId, group, tenant);\n        if (configInfo != null) {\n            try {\n                ConfigInfoBetaMapper configInfoBetaMapper = mapperManager.findMapper(\n                        dataSourceService.getDataSourceType(), TableConstant.CONFIG_INFO_BETA);\n                final String sql = configInfoBetaMapper.delete(Arrays.asList(\"data_id\", \"group_id\", \"tenant_id\"));\n                final Object[] args = new Object[] {dataId, group, tenantTmp};\n                \n                EmbeddedStorageContextUtils.onDeleteConfigBetaInfo(tenantTmp, group, dataId,\n                        System.currentTimeMillis());\n                EmbeddedStorageContextHolder.addSqlContext(sql, args);\n                \n                boolean result = databaseOperate.update(EmbeddedStorageContextHolder.getCurrentSqlContext());\n                if (!result) {\n                    throw new NacosConfigException(\"[Tag] Configuration deletion failed\");\n                }\n            } finally {\n                EmbeddedStorageContextHolder.cleanAllContext();\n            }\n            \n        }\n    }\n    \n    @Override\n    public boolean addAggrConfigInfo(final String dataId, final String group, String tenant, final String datumId,\n            String appName, final String content) {\n        String appNameTmp = StringUtils.isBlank(appName) ? StringUtils.EMPTY : appName;\n        String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n        String contentTmp = StringUtils.isBlank(content) ? StringUtils.EMPTY : content;\n        final Timestamp now = new Timestamp(System.currentTimeMillis());\n        \n        ConfigInfoAggrMapper configInfoAggrMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO_AGGR);\n        final String select = configInfoAggrMapper.select(Collections.singletonList(\"content\"),\n                Arrays.asList(\"data_id\", \"group_id\", \"tenant_id\", \"datum_id\"));\n        final String insert = configInfoAggrMapper.insert(\n                Arrays.asList(\"data_id\", \"group_id\", \"tenant_id\", \"datum_id\", \"app_name\", \"content\", \"gmt_modified\"));\n        final String update = configInfoAggrMapper.update(Arrays.asList(\"content\", \"gmt_modified\"),\n                Arrays.asList(\"data_id\", \"group_id\", \"tenant_id\", \"datum_id\"));\n        \n        String dbContent = databaseOperate.queryOne(select, new Object[] {dataId, group, tenantTmp, datumId},\n                String.class);\n        \n        if (Objects.isNull(dbContent)) {\n            final Object[] args = new Object[] {dataId, group, tenantTmp, datumId, appNameTmp, contentTmp, now};\n            EmbeddedStorageContextHolder.addSqlContext(insert, args);\n        } else if (!dbContent.equals(content)) {\n            final Object[] args = new Object[] {contentTmp, now, dataId, group, tenantTmp, datumId};\n            EmbeddedStorageContextHolder.addSqlContext(update, args);\n        }\n        \n        try {\n            boolean result = databaseOperate.update(EmbeddedStorageContextHolder.getCurrentSqlContext());\n            if (!result) {\n                throw new NacosConfigException(\"[Merge] Configuration release failed\");\n            }\n            return true;\n        } finally {\n            EmbeddedStorageContextHolder.cleanAllContext();\n        }\n    }\n    \n    @Override\n    public void removeSingleAggrConfigInfo(final String dataId, final String group, final String tenant,\n            final String datumId) {\n        final String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n        \n        ConfigInfoAggrMapper configInfoAggrMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO_AGGR);\n        final String sql = configInfoAggrMapper.delete(Arrays.asList(\"data_id\", \"group_id\", \"tenant_id\", \"datum_id\"));\n        final Object[] args = new Object[] {dataId, group, tenantTmp, datumId};\n        EmbeddedStorageContextHolder.addSqlContext(sql, args);\n        \n        try {\n            boolean result = databaseOperate.update(EmbeddedStorageContextHolder.getCurrentSqlContext());\n            if (!result) {\n                throw new NacosConfigException(\"[aggregation with single] Configuration deletion failed\");\n            }\n        } finally {\n            EmbeddedStorageContextHolder.cleanAllContext();\n        }\n    }\n    \n    @Override\n    public void removeAggrConfigInfo(final String dataId, final String group, final String tenant) {\n        final String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n        \n        ConfigInfoAggrMapper configInfoAggrMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO_AGGR);\n        final String sql = configInfoAggrMapper.delete(Arrays.asList(\"data_id\", \"group_id\", \"tenant_id\"));\n        final Object[] args = new Object[] {dataId, group, tenantTmp};\n        EmbeddedStorageContextHolder.addSqlContext(sql, args);\n        \n        try {\n            boolean result = databaseOperate.update(EmbeddedStorageContextHolder.getCurrentSqlContext());\n            if (!result) {\n                throw new NacosConfigException(\"[aggregation with all] Configuration deletion failed\");\n            }\n        } finally {\n            EmbeddedStorageContextHolder.cleanAllContext();\n        }\n    }\n    \n    @Override\n    public boolean batchRemoveAggr(final String dataId, final String group, final String tenant,\n            final List<String> datumList) {\n        final String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n        ConfigInfoAggrMapper configInfoAggrMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO_AGGR);\n        \n        MapperContext context = new MapperContext();\n        context.putWhereParameter(FieldConstant.DATUM_ID, datumList);\n        context.putWhereParameter(FieldConstant.DATA_ID, dataId);\n        context.putWhereParameter(FieldConstant.GROUP_ID, group);\n        context.putWhereParameter(FieldConstant.TENANT_ID, tenantTmp);\n        \n        MapperResult mapperResult = configInfoAggrMapper.batchRemoveAggr(context);\n        String sql = mapperResult.getSql();\n        List<Object> paramList = mapperResult.getParamList();\n        Object[] args = paramList.toArray();\n        \n        EmbeddedStorageContextHolder.addSqlContext(sql, args);\n        \n        try {\n            boolean result = databaseOperate.update(EmbeddedStorageContextHolder.getCurrentSqlContext());\n            if (!result) {\n                throw new NacosConfigException(\"[aggregation] Failed to configure batch deletion\");\n            }\n            return true;\n        } finally {\n            EmbeddedStorageContextHolder.cleanAllContext();\n        }\n    }\n    \n    @Override\n    public void removeConfigHistory(final Timestamp startTime, final int limitSize) {\n        HistoryConfigInfoMapper historyConfigInfoMapper = mapperManager.findMapper(\n                dataSourceService.getDataSourceType(), TableConstant.HIS_CONFIG_INFO);\n        MapperContext context = new MapperContext();\n        context.putWhereParameter(FieldConstant.GMT_MODIFIED, startTime);\n        context.putWhereParameter(FieldConstant.LIMIT_SIZE, limitSize);\n        MapperResult mapperResult = historyConfigInfoMapper.removeConfigHistory(context);\n        PaginationHelper<ConfigInfo> helper = createPaginationHelper();\n        helper.updateLimit(mapperResult.getSql(), mapperResult.getParamList().toArray());\n    }\n    \n    @Override\n    public int findConfigHistoryCountByTime(final Timestamp startTime) {\n        HistoryConfigInfoMapper historyConfigInfoMapper = mapperManager.findMapper(\n                dataSourceService.getDataSourceType(), TableConstant.HIS_CONFIG_INFO);\n        MapperContext context = new MapperContext();\n        context.putWhereParameter(FieldConstant.START_TIME, startTime);\n        MapperResult sqlFetchRows = historyConfigInfoMapper.findConfigHistoryCountByTime(context);\n        Integer result = databaseOperate.queryOne(sqlFetchRows.getSql(), sqlFetchRows.getParamList().toArray(),\n                Integer.class);\n        if (result == null) {\n            throw new IllegalArgumentException(\"configInfoBetaCount error\");\n        }\n        return result;\n    }\n    \n    @Override\n    public long findConfigMaxId() {\n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        MapperResult mapperResult = configInfoMapper.findConfigMaxId(null);\n        return Optional.ofNullable(databaseOperate.queryOne(mapperResult.getSql(), Long.class)).orElse(0L);\n    }\n    \n    @Override\n    public boolean batchPublishAggr(final String dataId, final String group, final String tenant,\n            final Map<String, String> datumMap, final String appName) {\n        try {\n            Boolean isPublishOk = false;\n            for (Entry<String, String> entry : datumMap.entrySet()) {\n                addAggrConfigInfo(dataId, group, tenant, entry.getKey(), appName, entry.getValue());\n            }\n            \n            isPublishOk = databaseOperate.update(EmbeddedStorageContextHolder.getCurrentSqlContext());\n            \n            if (isPublishOk == null) {\n                return false;\n            }\n            return isPublishOk;\n        } finally {\n            EmbeddedStorageContextHolder.cleanAllContext();\n        }\n    }\n    \n    @Override\n    public boolean replaceAggr(final String dataId, final String group, final String tenant,\n            final Map<String, String> datumMap, final String appName) {\n        Boolean isReplaceOk = false;\n        String appNameTmp = appName == null ? \"\" : appName;\n        \n        removeAggrConfigInfo(dataId, group, tenant);\n        \n        String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n        ConfigInfoAggrMapper configInfoAggrMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO_AGGR);\n        final String sql = configInfoAggrMapper.insert(\n                Arrays.asList(\"data_id\", \"group_id\", \"tenant_id\", \"datum_id\", \"app_name\", \"content\", \"gmt_modified\"));\n        for (Entry<String, String> datumEntry : datumMap.entrySet()) {\n            final Object[] args = new Object[] {dataId, group, tenantTmp, datumEntry.getKey(), appNameTmp,\n                    datumEntry.getValue(), new Timestamp(System.currentTimeMillis())};\n            EmbeddedStorageContextHolder.addSqlContext(sql, args);\n        }\n        try {\n            isReplaceOk = databaseOperate.update(EmbeddedStorageContextHolder.getCurrentSqlContext());\n            \n            if (isReplaceOk == null) {\n                return false;\n            }\n            return isReplaceOk;\n        } finally {\n            EmbeddedStorageContextHolder.cleanAllContext();\n        }\n        \n    }\n    \n    @Override\n    public List<ConfigInfo> findAllDataIdAndGroup() {\n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        MapperResult mapperResult = configInfoMapper.findAllDataIdAndGroup(null);\n        return databaseOperate.queryMany(mapperResult.getSql(), EMPTY_ARRAY, CONFIG_INFO_ROW_MAPPER);\n    }\n    \n    @Override\n    public ConfigInfoBetaWrapper findConfigInfo4Beta(final String dataId, final String group, final String tenant) {\n        String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n        ConfigInfoBetaMapper configInfoBetaMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO_BETA);\n        final String sql = configInfoBetaMapper.select(\n                Arrays.asList(\"id\", \"data_id\", \"group_id\", \"tenant_id\", \"app_name\", \"content\", \"beta_ips\",\n                        \"encrypted_data_key\", \"gmt_modified\"), Arrays.asList(\"data_id\", \"group_id\", \"tenant_id\"));\n        \n        return databaseOperate.queryOne(sql, new Object[] {dataId, group, tenantTmp},\n                CONFIG_INFO_BETA_WRAPPER_ROW_MAPPER);\n        \n    }\n    \n    @Override\n    public ConfigInfoTagWrapper findConfigInfo4Tag(final String dataId, final String group, final String tenant,\n            final String tag) {\n        String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n        String tagTmp = StringUtils.isBlank(tag) ? StringUtils.EMPTY : tag.trim();\n        ConfigInfoTagMapper configInfoTagMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO_TAG);\n        final String sql = configInfoTagMapper.select(\n                Arrays.asList(\"id\", \"data_id\", \"group_id\", \"tenant_id\", \"tag_id\", \"app_name\", \"content\",\n                        \"gmt_modified\"), Arrays.asList(\"data_id\", \"group_id\", \"tenant_id\", \"tag_id\"));\n        \n        return databaseOperate.queryOne(sql, new Object[] {dataId, group, tenantTmp, tagTmp},\n                CONFIG_INFO_TAG_WRAPPER_ROW_MAPPER);\n    }\n    \n    @Override\n    public ConfigInfoBase findConfigInfoBase(final String dataId, final String group) {\n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        final String sql = configInfoMapper.select(Arrays.asList(\"id\", \"data_id\", \"group_id\", \"content\"),\n                Arrays.asList(\"data_id\", \"group_id\", \"tenant_id\"));\n        \n        return databaseOperate.queryOne(sql, new Object[] {dataId, group, StringUtils.EMPTY},\n                CONFIG_INFO_BASE_ROW_MAPPER);\n    }\n    \n    @Override\n    public ConfigInfo findConfigInfo(long id) {\n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        final String sql = configInfoMapper.select(\n                Arrays.asList(\"id\", \"data_id\", \"group_id\", \"tenant_id\", \"app_name\", \"content\"),\n                Collections.singletonList(\"id\"));\n        return databaseOperate.queryOne(sql, new Object[] {id}, CONFIG_INFO_ROW_MAPPER);\n    }\n    \n    @Override\n    public ConfigInfoWrapper findConfigInfo(final String dataId, final String group, final String tenant) {\n        final String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        final String sql = configInfoMapper.select(\n                Arrays.asList(\"id\", \"data_id\", \"group_id\", \"tenant_id\", \"app_name\", \"content\", \"md5\", \"type\",\n                        \"encrypted_data_key\", \"gmt_modified\"), Arrays.asList(\"data_id\", \"group_id\", \"tenant_id\"));\n        final Object[] args = new Object[] {dataId, group, tenantTmp};\n        return databaseOperate.queryOne(sql, args, CONFIG_INFO_WRAPPER_ROW_MAPPER);\n        \n    }\n    \n    @Override\n    public Page<ConfigInfo> findConfigInfo4Page(final int pageNo, final int pageSize, final String dataId,\n            final String group, final String tenant, final Map<String, Object> configAdvanceInfo) {\n        String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n        final String appName = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"appName\");\n        final String configTags = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"config_tags\");\n        MapperResult sql;\n        MapperResult sqlCount;\n        \n        final MapperContext context = new MapperContext();\n    \n        context.putWhereParameter(FieldConstant.TENANT_ID, tenantTmp);\n        if (StringUtils.isNotBlank(dataId)) {\n            context.putWhereParameter(FieldConstant.DATA_ID, dataId);\n        }\n        if (StringUtils.isNotBlank(group)) {\n            context.putWhereParameter(FieldConstant.GROUP_ID, group);\n        }\n        if (StringUtils.isNotBlank(appName)) {\n            context.putWhereParameter(FieldConstant.APP_NAME, appName);\n        }\n     \n        context.setStartRow((pageNo - 1) * pageSize);\n        context.setPageSize(pageSize);\n        \n        if (StringUtils.isNotBlank(configTags)) {\n            String[] tagArr = configTags.split(\",\");\n            context.putWhereParameter(FieldConstant.TAG_ARR, Arrays.asList(tagArr));\n            ConfigTagsRelationMapper configTagsRelationMapper = mapperManager.findMapper(\n                    dataSourceService.getDataSourceType(), TableConstant.CONFIG_TAGS_RELATION);\n            sqlCount = configTagsRelationMapper.findConfigInfo4PageCountRows(context);\n            sql = configTagsRelationMapper.findConfigInfo4PageFetchRows(context);\n        } else {\n            ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                    TableConstant.CONFIG_INFO);\n            \n            sqlCount = configInfoMapper.findConfigInfo4PageCountRows(context);\n            sql = configInfoMapper.findConfigInfo4PageFetchRows(context);\n        }\n        PaginationHelper<ConfigInfo> helper = createPaginationHelper();\n        Page<ConfigInfo> page = helper.fetchPageLimit(sqlCount, sql, pageNo, pageSize, CONFIG_INFO_ROW_MAPPER);\n        \n        for (ConfigInfo configInfo : page.getPageItems()) {\n            Pair<String, String> pair = EncryptionHandler.decryptHandler(configInfo.getDataId(),\n                    configInfo.getEncryptedDataKey(), configInfo.getContent());\n            configInfo.setContent(pair.getSecond());\n        }\n        \n        return page;\n    }\n    \n    @Override\n    public Page<ConfigInfo> findConfigInfoByApp(final int pageNo, final int pageSize, final String tenant,\n            final String appName) {\n        String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n        final int startRow = (pageNo - 1) * pageSize;\n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        MapperContext context = new MapperContext(startRow, pageSize);\n        context.putWhereParameter(FieldConstant.APP_NAME, appName);\n        context.putWhereParameter(FieldConstant.TENANT_ID, generateLikeArgument(tenantTmp));\n        \n        PaginationHelper<ConfigInfo> helper = createPaginationHelper();\n        MapperResult countRows = configInfoMapper.findConfigInfoByAppCountRows(context);\n        MapperResult fetchRows = configInfoMapper.findConfigInfoByAppFetchRows(context);\n        return helper.fetchPageLimit(countRows, fetchRows, pageNo, pageSize, CONFIG_INFO_ROW_MAPPER);\n        \n    }\n    \n    @Override\n    public Page<ConfigInfoBase> findConfigInfoBaseByGroup(final int pageNo, final int pageSize, final String group) {\n        PaginationHelper<ConfigInfoBase> helper = createPaginationHelper();\n        final int startRow = (pageNo - 1) * pageSize;\n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        \n        MapperContext context = new MapperContext(startRow, pageSize);\n        context.putWhereParameter(FieldConstant.GROUP_ID, group);\n        context.putWhereParameter(FieldConstant.TENANT_ID, StringUtils.EMPTY);\n        MapperResult mapperResult = configInfoMapper.findConfigInfoBaseByGroupFetchRows(context);\n        \n        return helper.fetchPage(configInfoMapper.count(Arrays.asList(\"group_id\", \"tenant_id\")), mapperResult.getSql(),\n                mapperResult.getParamList().toArray(), pageNo, pageSize, CONFIG_INFO_BASE_ROW_MAPPER);\n    }\n    \n    @Override\n    public int configInfoCount() {\n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        String sql = configInfoMapper.count(null);\n        Integer result = databaseOperate.queryOne(sql, Integer.class);\n        if (result == null) {\n            throw new IllegalArgumentException(\"configInfoCount error\");\n        }\n        return result;\n    }\n    \n    @Override\n    public int configInfoCount(String tenant) {\n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        MapperContext context = new MapperContext();\n        context.putWhereParameter(FieldConstant.TENANT_ID, tenant);\n        MapperResult mapperResult = configInfoMapper.configInfoLikeTenantCount(context);\n        Integer result = databaseOperate.queryOne(mapperResult.getSql(), mapperResult.getParamList().toArray(),\n                Integer.class);\n        if (result == null) {\n            throw new IllegalArgumentException(\"configInfoCount error\");\n        }\n        return result;\n    }\n    \n    @Override\n    public int configInfoBetaCount() {\n        ConfigInfoBetaMapper configInfoBetaMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO_BETA);\n        String sql = configInfoBetaMapper.count(null);\n        Integer result = databaseOperate.queryOne(sql, Integer.class);\n        if (result == null) {\n            throw new IllegalArgumentException(\"configInfoBetaCount error\");\n        }\n        return result;\n    }\n    \n    @Override\n    public int configInfoTagCount() {\n        ConfigInfoTagMapper configInfoTagMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO_TAG);\n        String sql = configInfoTagMapper.count(null);\n        Integer result = databaseOperate.queryOne(sql, Integer.class);\n        if (result == null) {\n            throw new IllegalArgumentException(\"configInfoBetaCount error\");\n        }\n        return result;\n    }\n    \n    @Override\n    public List<String> getTenantIdList(int page, int pageSize) {\n        PaginationHelper<Map<String, Object>> helper = createPaginationHelper();\n        \n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        int from = (page - 1) * pageSize;\n        MapperResult mapperResult = configInfoMapper.getTenantIdList(new MapperContext(from, pageSize));\n        \n        Page<Map<String, Object>> pageList = helper.fetchPageLimit(mapperResult.getSql(),\n                mapperResult.getParamList().toArray(), page, pageSize, MAP_ROW_MAPPER);\n        return pageList.getPageItems().stream().map(map -> String.valueOf(map.get(\"TENANT_ID\")))\n                .collect(Collectors.toList());\n    }\n    \n    @Override\n    public List<String> getGroupIdList(int page, int pageSize) {\n        PaginationHelper<Map<String, Object>> helper = createPaginationHelper();\n        \n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        int from = (page - 1) * pageSize;\n        MapperResult mapperResult = configInfoMapper.getGroupIdList(new MapperContext(from, pageSize));\n        \n        Page<Map<String, Object>> pageList = helper.fetchPageLimit(mapperResult.getSql(),\n                mapperResult.getParamList().toArray(), page, pageSize, MAP_ROW_MAPPER);\n        return pageList.getPageItems().stream().map(map -> String.valueOf(map.get(\"GROUP_ID\")))\n                .collect(Collectors.toList());\n    }\n    \n    @Override\n    public int aggrConfigInfoCount(String dataId, String group, String tenant) {\n        String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n        ConfigInfoAggrMapper configInfoAggrMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO_AGGR);\n        String sql = configInfoAggrMapper.count(Arrays.asList(\"data_id\", \"group_id\", \"tenant_id\"));\n        Integer result = databaseOperate.queryOne(sql, new Object[] {dataId, group, tenantTmp}, Integer.class);\n        if (result == null) {\n            throw new IllegalArgumentException(\"aggrConfigInfoCount error\");\n        }\n        return result;\n    }\n    \n    @Override\n    public int aggrConfigInfoCount(String dataId, String group, String tenant, List<String> datumIds, boolean isIn) {\n        if (datumIds == null || datumIds.isEmpty()) {\n            return 0;\n        }\n        final String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n        ConfigInfoAggrMapper configInfoAggrMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO_AGGR);\n        \n        MapperContext context = new MapperContext();\n        context.putWhereParameter(FieldConstant.DATUM_ID, datumIds);\n        context.putWhereParameter(FieldConstant.IS_IN, true);\n        context.putWhereParameter(FieldConstant.DATA_ID, dataId);\n        context.putWhereParameter(FieldConstant.GROUP_ID, group);\n        context.putWhereParameter(FieldConstant.TENANT_ID, tenantTmp);\n        \n        MapperResult mapperResult = configInfoAggrMapper.aggrConfigInfoCount(context);\n        \n        String sql = mapperResult.getSql();\n        Object[] args = mapperResult.getParamList().toArray();\n        \n        Integer result = databaseOperate.queryOne(sql, args, Integer.class);\n        if (result == null) {\n            throw new IllegalArgumentException(\"aggrConfigInfoCount error\");\n        }\n        return result;\n    }\n    \n    @Override\n    public Page<ConfigInfo> findAllConfigInfo(final int pageNo, final int pageSize, final String tenant) {\n        String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n        final int startRow = (pageNo - 1) * pageSize;\n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        String sqlCountRows = configInfoMapper.count(null);\n        MapperContext context = new MapperContext(startRow, pageSize);\n        context.putWhereParameter(FieldConstant.TENANT_ID, generateLikeArgument(tenantTmp));\n        MapperResult sqlFetchRows = configInfoMapper.findAllConfigInfoFetchRows(context);\n        \n        PaginationHelper<ConfigInfo> helper = createPaginationHelper();\n        return helper.fetchPageLimit(sqlCountRows, sqlFetchRows.getSql(), sqlFetchRows.getParamList().toArray(), pageNo,\n                pageSize, CONFIG_INFO_ROW_MAPPER);\n        \n    }\n    \n    @Override\n    public Page<ConfigKey> findAllConfigKey(final int pageNo, final int pageSize, final String tenant) {\n        final String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        \n        MapperContext context = new MapperContext((pageNo - 1) * pageSize, pageSize);\n        context.putWhereParameter(FieldConstant.TENANT_ID, generateLikeArgument(tenantTmp));\n        final MapperResult mapperResult = configInfoMapper.findAllConfigKey(context);\n        \n        final int totalCount = configInfoCount(tenant);\n        int pageCount = totalCount / pageSize;\n        if (totalCount > pageSize * pageCount) {\n            pageCount++;\n        }\n        \n        if (pageNo > pageCount) {\n            return null;\n        }\n        \n        final Page<ConfigKey> page = new Page<>();\n        page.setPageNumber(pageNo);\n        page.setPagesAvailable(pageCount);\n        page.setTotalCount(totalCount);\n        \n        List<ConfigKey> result = databaseOperate.queryMany(mapperResult.getSql(), mapperResult.getParamList().toArray(),\n                CONFIG_KEY_ROW_MAPPER);\n        \n        for (ConfigKey item : result) {\n            page.getPageItems().add(item);\n        }\n        return page;\n    }\n    \n    @Override\n    public Page<ConfigInfoBase> findAllConfigInfoBase(final int pageNo, final int pageSize) {\n        final int startRow = (pageNo - 1) * pageSize;\n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        String sqlCountRows = configInfoMapper.count(null);\n        MapperResult sqlFetchRows = configInfoMapper.findAllConfigInfoBaseFetchRows(\n                new MapperContext(startRow, pageSize));\n        \n        PaginationHelper<ConfigInfoBase> helper = createPaginationHelper();\n        return helper.fetchPageLimit(sqlCountRows, sqlFetchRows.getSql(), sqlFetchRows.getParamList().toArray(), pageNo,\n                pageSize, CONFIG_INFO_BASE_ROW_MAPPER);\n        \n    }\n    \n    @Override\n    public Page<ConfigInfoWrapper> findAllConfigInfoFragment(final long lastMaxId, final int pageSize) {\n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        MapperContext context = new MapperContext(0, pageSize);\n        context.putWhereParameter(FieldConstant.ID, lastMaxId);\n        MapperResult select = configInfoMapper.findAllConfigInfoFragment(context);\n        PaginationHelper<ConfigInfoWrapper> helper = createPaginationHelper();\n        return helper.fetchPageLimit(select.getSql(), select.getParamList().toArray(), 1, pageSize,\n                CONFIG_INFO_WRAPPER_ROW_MAPPER);\n        \n    }\n    \n    @Override\n    public Page<ConfigInfoBetaWrapper> findAllConfigInfoBetaForDumpAll(final int pageNo, final int pageSize) {\n        final int startRow = (pageNo - 1) * pageSize;\n        ConfigInfoBetaMapper configInfoBetaMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO_BETA);\n        String sqlCountRows = configInfoBetaMapper.count(null);\n        \n        MapperContext context = new MapperContext();\n        context.setStartRow(startRow);\n        context.setPageSize(pageSize);\n        \n        MapperResult mapperResult = configInfoBetaMapper.findAllConfigInfoBetaForDumpAllFetchRows(context);\n        \n        String sqlFetchRows = mapperResult.getSql();\n        PaginationHelper<ConfigInfoBetaWrapper> helper = createPaginationHelper();\n        return helper.fetchPageLimit(sqlCountRows, sqlFetchRows, new Object[] {}, pageNo, pageSize,\n                CONFIG_INFO_BETA_WRAPPER_ROW_MAPPER);\n    }\n    \n    @Override\n    public Page<ConfigInfoTagWrapper> findAllConfigInfoTagForDumpAll(final int pageNo, final int pageSize) {\n        final int startRow = (pageNo - 1) * pageSize;\n        ConfigInfoTagMapper configInfoTagMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO_TAG);\n        String sqlCountRows = configInfoTagMapper.count(null);\n        MapperResult sqlFetchRows = configInfoTagMapper.findAllConfigInfoTagForDumpAllFetchRows(\n                new MapperContext(startRow, pageSize));\n        \n        PaginationHelper<ConfigInfoTagWrapper> helper = createPaginationHelper();\n        return helper.fetchPageLimit(sqlCountRows, sqlFetchRows.getSql(), sqlFetchRows.getParamList().toArray(), pageNo,\n                pageSize, CONFIG_INFO_TAG_WRAPPER_ROW_MAPPER);\n        \n    }\n    \n    @Override\n    public Page<ConfigInfo> findConfigInfoLike(final int pageNo, final int pageSize, final ConfigKey[] configKeys,\n            final boolean blacklist) {\n        String sqlCountRows = \"SELECT count(*) FROM config_info WHERE \";\n        String sqlFetchRows = \"SELECT id,data_id,group_id,tenant_id,app_name,content FROM config_info WHERE \";\n        StringBuilder where = new StringBuilder(\" 1=1 \");\n        // White list, please synchronize the condition is empty, there is no qualified configuration\n        if (configKeys.length == 0 && !blacklist) {\n            Page<ConfigInfo> page = new Page<>();\n            page.setTotalCount(0);\n            return page;\n        }\n        List<String> params = new ArrayList<>();\n        boolean isFirst = true;\n        for (ConfigKey configInfo : configKeys) {\n            String dataId = configInfo.getDataId();\n            String group = configInfo.getGroup();\n            String appName = configInfo.getAppName();\n            \n            if (StringUtils.isBlank(dataId) && StringUtils.isBlank(group) && StringUtils.isBlank(appName)) {\n                break;\n            }\n            \n            if (blacklist) {\n                if (isFirst) {\n                    isFirst = false;\n                    where.append(\" AND \");\n                } else {\n                    where.append(\" AND \");\n                }\n                \n                where.append('(');\n                boolean isFirstSub = true;\n                if (!StringUtils.isBlank(dataId)) {\n                    where.append(\" data_id NOT LIKE ? \");\n                    params.add(generateLikeArgument(dataId));\n                    isFirstSub = false;\n                }\n                if (!StringUtils.isBlank(group)) {\n                    if (!isFirstSub) {\n                        where.append(\" OR \");\n                    }\n                    where.append(\" group_id NOT LIKE ? \");\n                    params.add(generateLikeArgument(group));\n                    isFirstSub = false;\n                }\n                if (!StringUtils.isBlank(appName)) {\n                    if (!isFirstSub) {\n                        where.append(\" OR \");\n                    }\n                    where.append(\" app_name != ? \");\n                    params.add(appName);\n                    isFirstSub = false;\n                }\n                where.append(\") \");\n            } else {\n                if (isFirst) {\n                    isFirst = false;\n                    where.append(\" AND \");\n                } else {\n                    where.append(\" OR \");\n                }\n                where.append('(');\n                boolean isFirstSub = true;\n                if (!StringUtils.isBlank(dataId)) {\n                    where.append(\" data_id LIKE ? \");\n                    params.add(generateLikeArgument(dataId));\n                    isFirstSub = false;\n                }\n                if (!StringUtils.isBlank(group)) {\n                    if (!isFirstSub) {\n                        where.append(\" AND \");\n                    }\n                    where.append(\" group_id LIKE ? \");\n                    params.add(generateLikeArgument(group));\n                    isFirstSub = false;\n                }\n                if (!StringUtils.isBlank(appName)) {\n                    if (!isFirstSub) {\n                        where.append(\" AND \");\n                    }\n                    where.append(\" app_name = ? \");\n                    params.add(appName);\n                    isFirstSub = false;\n                }\n                where.append(\") \");\n            }\n        }\n        PaginationHelper<ConfigInfo> helper = createPaginationHelper();\n        return helper.fetchPage(sqlCountRows + where.toString(), sqlFetchRows + where.toString(), params.toArray(),\n                pageNo, pageSize, CONFIG_INFO_ROW_MAPPER);\n        \n    }\n    \n    @Override\n    public Page<ConfigInfo> findConfigInfoLike4Page(final int pageNo, final int pageSize, final String dataId,\n            final String group, final String tenant, final Map<String, Object> configAdvanceInfo) {\n        String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n        final String appName = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"appName\");\n        final String content = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"content\");\n        final String configTags = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"config_tags\");\n        MapperResult sqlCountRows;\n        MapperResult sqlFetchRows;\n    \n        MapperContext context = new MapperContext((pageNo - 1) * pageSize, pageSize);\n        context.putWhereParameter(FieldConstant.TENANT_ID, generateLikeArgument(tenantTmp));\n    \n        if (!StringUtils.isBlank(dataId)) {\n            context.putWhereParameter(FieldConstant.DATA_ID, generateLikeArgument(dataId));\n        }\n        if (!StringUtils.isBlank(group)) {\n            context.putWhereParameter(FieldConstant.GROUP_ID, generateLikeArgument(group));\n        }\n        if (!StringUtils.isBlank(appName)) {\n            context.putWhereParameter(FieldConstant.APP_NAME, appName);\n        }\n        if (!StringUtils.isBlank(content)) {\n            context.putWhereParameter(FieldConstant.CONTENT, generateLikeArgument(content));\n        }\n        \n        if (StringUtils.isNotBlank(configTags)) {\n            String[] tagArr = configTags.split(\",\");\n            context.putWhereParameter(FieldConstant.TAG_ARR, tagArr);\n            ConfigTagsRelationMapper configTagsRelationMapper = mapperManager.findMapper(\n                    dataSourceService.getDataSourceType(), TableConstant.CONFIG_TAGS_RELATION);\n            sqlCountRows = configTagsRelationMapper.findConfigInfoLike4PageCountRows(context);\n            sqlFetchRows = configTagsRelationMapper.findConfigInfoLike4PageFetchRows(context);\n        } else {\n            ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                    TableConstant.CONFIG_INFO);\n            sqlCountRows = configInfoMapper.findConfigInfoLike4PageCountRows(context);\n            sqlFetchRows = configInfoMapper.findConfigInfoLike4PageFetchRows(context);\n        }\n        PaginationHelper<ConfigInfo> helper = createPaginationHelper();\n        Page<ConfigInfo> page = helper.fetchPageLimit(sqlCountRows, sqlFetchRows, pageNo, pageSize,\n                CONFIG_INFO_ROW_MAPPER);\n        for (ConfigInfo configInfo : page.getPageItems()) {\n            Pair<String, String> pair = EncryptionHandler.decryptHandler(configInfo.getDataId(),\n                    configInfo.getEncryptedDataKey(), configInfo.getContent());\n            configInfo.setContent(pair.getSecond());\n        }\n        return page;\n        \n    }\n    \n    @Override\n    public Page<ConfigInfoBase> findConfigInfoBaseLike(final int pageNo, final int pageSize, final String dataId,\n            final String group, final String content) throws IOException {\n        if (StringUtils.isBlank(dataId) && StringUtils.isBlank(group)) {\n            throw new IOException(\"invalid param\");\n        }\n        MapperContext context = new MapperContext((pageNo - 1) * pageSize, pageSize);\n        \n        if (!StringUtils.isBlank(dataId)) {\n            context.putWhereParameter(FieldConstant.DATA_ID, generateLikeArgument(dataId));\n        }\n        if (!StringUtils.isBlank(group)) {\n            context.putWhereParameter(FieldConstant.GROUP_ID, generateLikeArgument(group));\n        }\n        if (!StringUtils.isBlank(content)) {\n            context.putWhereParameter(FieldConstant.CONTENT, generateLikeArgument(content));\n        }\n        \n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        MapperResult sqlCountRows = configInfoMapper.findConfigInfoBaseLikeCountRows(context);\n        MapperResult sqlFetchRows = configInfoMapper.findConfigInfoBaseLikeFetchRows(context);\n        PaginationHelper<ConfigInfoBase> helper = createPaginationHelper();\n        return helper.fetchPageLimit(sqlCountRows, sqlFetchRows, pageNo, pageSize, CONFIG_INFO_BASE_ROW_MAPPER);\n        \n    }\n    \n    @Override\n    public ConfigInfoAggr findSingleConfigInfoAggr(String dataId, String group, String tenant, String datumId) {\n        String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n        ConfigInfoAggrMapper configInfoAggrMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO_AGGR);\n        String sql = configInfoAggrMapper.select(\n                Arrays.asList(\"id\", \"data_id\", \"group_id\", \"tenant_id\", \"datum_id\", \"app_name\", \"content\"),\n                Arrays.asList(\"data_id\", \"group_id\", \"tenant_id\", \"datum_id\"));\n        \n        return databaseOperate.queryOne(sql, new Object[] {dataId, group, tenantTmp, datumId},\n                CONFIG_INFO_AGGR_ROW_MAPPER);\n        \n    }\n    \n    @Override\n    public List<ConfigInfoAggr> findConfigInfoAggr(String dataId, String group, String tenant) {\n        String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n        ConfigInfoAggrMapper configInfoAggrMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO_AGGR);\n        \n        MapperContext context = new MapperContext();\n        context.putWhereParameter(FieldConstant.DATA_ID, dataId);\n        context.putWhereParameter(FieldConstant.GROUP_ID, group);\n        context.putWhereParameter(FieldConstant.TENANT_ID, tenantTmp);\n        \n        MapperResult mapperResult = configInfoAggrMapper.findConfigInfoAggrIsOrdered(context);\n        String sql = mapperResult.getSql();\n        Object[] args = mapperResult.getParamList().toArray();\n        \n        return databaseOperate.queryMany(sql, args, CONFIG_INFO_AGGR_ROW_MAPPER);\n    }\n    \n    @Override\n    public Page<ConfigInfoAggr> findConfigInfoAggrByPage(String dataId, String group, String tenant, final int pageNo,\n            final int pageSize) {\n        String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n        ConfigInfoAggrMapper configInfoAggrMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO_AGGR);\n        final int startRow = (pageNo - 1) * pageSize;\n        final String sqlCountRows = configInfoAggrMapper.select(Arrays.asList(\"count(*)\"),\n                Arrays.asList(\"data_id\", \"group_id\", \"tenant_id\"));\n        \n        MapperContext context = new MapperContext();\n        context.putWhereParameter(FieldConstant.DATA_ID, dataId);\n        context.putWhereParameter(FieldConstant.GROUP_ID, group);\n        context.putWhereParameter(FieldConstant.TENANT_ID, tenantTmp);\n        context.setStartRow(startRow);\n        context.setPageSize(pageSize);\n        MapperResult mapperResult = configInfoAggrMapper.findConfigInfoAggrByPageFetchRows(context);\n        String sqlFetchRows = mapperResult.getSql();\n        Object[] sqlFethcArgs = mapperResult.getParamList().toArray();\n        \n        PaginationHelper<ConfigInfoAggr> helper = createPaginationHelper();\n        return helper.fetchPageLimit(sqlCountRows, new Object[] {dataId, group, tenantTmp}, sqlFetchRows, sqlFethcArgs,\n                pageNo, pageSize, CONFIG_INFO_AGGR_ROW_MAPPER);\n    }\n    \n    @Override\n    public Page<ConfigInfoAggr> findConfigInfoAggrLike(final int pageNo, final int pageSize, ConfigKey[] configKeys,\n            boolean blacklist) {\n        \n        String sqlCountRows = \"SELECT count(*) FROM config_info_aggr WHERE \";\n        String sqlFetchRows = \"SELECT data_id,group_id,tenant_id,datum_id,app_name,content FROM config_info_aggr WHERE \";\n        StringBuilder where = new StringBuilder(\" 1=1 \");\n        // White list, please synchronize the condition is empty, there is no qualified configuration\n        if (configKeys.length == 0 && blacklist == false) {\n            Page<ConfigInfoAggr> page = new Page<>();\n            page.setTotalCount(0);\n            return page;\n        }\n        List<String> params = new ArrayList<>();\n        boolean isFirst = true;\n        \n        for (ConfigKey configInfoAggr : configKeys) {\n            String dataId = configInfoAggr.getDataId();\n            String group = configInfoAggr.getGroup();\n            String appName = configInfoAggr.getAppName();\n            if (StringUtils.isBlank(dataId) && StringUtils.isBlank(group) && StringUtils.isBlank(appName)) {\n                break;\n            }\n            if (blacklist) {\n                if (isFirst) {\n                    isFirst = false;\n                    where.append(\" AND \");\n                } else {\n                    where.append(\" AND \");\n                }\n                \n                where.append('(');\n                boolean isFirstSub = true;\n                if (!StringUtils.isBlank(dataId)) {\n                    where.append(\" data_id NOT LIKE ? \");\n                    params.add(generateLikeArgument(dataId));\n                    isFirstSub = false;\n                }\n                if (!StringUtils.isBlank(group)) {\n                    if (!isFirstSub) {\n                        where.append(\" OR \");\n                    }\n                    where.append(\" group_id NOT LIKE ? \");\n                    params.add(generateLikeArgument(group));\n                    isFirstSub = false;\n                }\n                if (!StringUtils.isBlank(appName)) {\n                    if (!isFirstSub) {\n                        where.append(\" OR \");\n                    }\n                    where.append(\" app_name != ? \");\n                    params.add(appName);\n                    isFirstSub = false;\n                }\n                where.append(\") \");\n            } else {\n                if (isFirst) {\n                    isFirst = false;\n                    where.append(\" AND \");\n                } else {\n                    where.append(\" OR \");\n                }\n                where.append('(');\n                boolean isFirstSub = true;\n                if (!StringUtils.isBlank(dataId)) {\n                    where.append(\" data_id LIKE ? \");\n                    params.add(generateLikeArgument(dataId));\n                    isFirstSub = false;\n                }\n                if (!StringUtils.isBlank(group)) {\n                    if (!isFirstSub) {\n                        where.append(\" AND \");\n                    }\n                    where.append(\" group_id LIKE ? \");\n                    params.add(generateLikeArgument(group));\n                    isFirstSub = false;\n                }\n                if (!StringUtils.isBlank(appName)) {\n                    if (!isFirstSub) {\n                        where.append(\" AND \");\n                    }\n                    where.append(\" app_name = ? \");\n                    params.add(appName);\n                    isFirstSub = false;\n                }\n                where.append(\") \");\n            }\n        }\n        PaginationHelper<ConfigInfoAggr> helper = createPaginationHelper();\n        return helper.fetchPage(sqlCountRows + where.toString(), sqlFetchRows + where.toString(), params.toArray(),\n                pageNo, pageSize, CONFIG_INFO_AGGR_ROW_MAPPER);\n        \n    }\n    \n    @Override\n    public List<ConfigInfoChanged> findAllAggrGroup() {\n        ConfigInfoAggrMapper configInfoAggrMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO_AGGR);\n        MapperResult mapperResult = configInfoAggrMapper.findAllAggrGroupByDistinct(null);\n        \n        return databaseOperate.queryMany(mapperResult.getSql(), EMPTY_ARRAY, CONFIG_INFO_CHANGED_ROW_MAPPER);\n        \n    }\n    \n    @Override\n    public List<String> findDatumIdByContent(String dataId, String groupId, String content) {\n        ConfigInfoAggrMapper configInfoAggrMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO_AGGR);\n        String sql = configInfoAggrMapper.select(Collections.singletonList(\"datum_id\"),\n                Arrays.asList(\"data_id\", \"group_id\", \"content\"));\n        return databaseOperate.queryMany(sql, new Object[] {dataId, groupId, content}, String.class);\n        \n    }\n    \n    @Override\n    public List<ConfigInfoWrapper> findChangeConfig(final Timestamp startTime, final Timestamp endTime) {\n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        \n        MapperContext context = new MapperContext();\n        context.putWhereParameter(FieldConstant.START_TIME, startTime);\n        context.putWhereParameter(FieldConstant.END_TIME, endTime);\n        \n        MapperResult mapperResult = configInfoMapper.findChangeConfig(context);\n        List<Map<String, Object>> list = databaseOperate.queryMany(mapperResult.getSql(),\n                mapperResult.getParamList().toArray());\n        return convertChangeConfig(list);\n        \n    }\n    \n    @Override\n    public Page<ConfigInfoWrapper> findChangeConfig(final String dataId, final String group, final String tenant,\n            final String appName, final Timestamp startTime, final Timestamp endTime, final int pageNo,\n            final int pageSize, final long lastMaxId) {\n        String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n    \n        MapperContext context = new MapperContext((pageNo - 1) * pageSize, pageSize);\n        if (!StringUtils.isBlank(dataId)) {\n            context.putWhereParameter(FieldConstant.DATA_ID, generateLikeArgument(dataId));\n        }\n        if (!StringUtils.isBlank(group)) {\n            context.putWhereParameter(FieldConstant.GROUP_ID, generateLikeArgument(group));\n        }\n    \n        if (!StringUtils.isBlank(tenantTmp)) {\n            context.putWhereParameter(FieldConstant.TENANT, tenantTmp);\n        }\n    \n        if (!StringUtils.isBlank(appName)) {\n            context.putWhereParameter(FieldConstant.APP_NAME, appName);\n        }\n        if (startTime != null) {\n            context.putWhereParameter(FieldConstant.START_TIME, startTime);\n        }\n        if (endTime != null) {\n            context.putWhereParameter(FieldConstant.END_TIME, endTime);\n        }\n        \n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        MapperResult sqlCountRows = configInfoMapper.findChangeConfigCountRows(context);\n        MapperResult sqlFetchRows = configInfoMapper.findChangeConfigFetchRows(context);\n        \n        PaginationHelper<ConfigInfoWrapper> helper = createPaginationHelper();\n        return helper.fetchPageLimit(sqlCountRows, sqlFetchRows, pageNo, pageSize, CONFIG_INFO_WRAPPER_ROW_MAPPER);\n        \n    }\n    \n    @Override\n    public List<ConfigInfo> findDeletedConfig(final Timestamp startTime, final Timestamp endTime) {\n        HistoryConfigInfoMapper historyConfigInfoMapper = mapperManager.findMapper(\n                dataSourceService.getDataSourceType(), TableConstant.HIS_CONFIG_INFO);\n        MapperContext context = new MapperContext();\n        context.putWhereParameter(FieldConstant.START_TIME, startTime);\n        context.putWhereParameter(FieldConstant.END_TIME, endTime);\n        MapperResult mapperResult = historyConfigInfoMapper.findDeletedConfig(context);\n        List<Map<String, Object>> list = databaseOperate.queryMany(mapperResult.getSql(),\n                mapperResult.getParamList().toArray());\n        return convertDeletedConfig(list);\n        \n    }\n    \n    @Override\n    public long addConfigInfoAtomic(final long id, final String srcIp, final String srcUser,\n            final ConfigInfo configInfo, final Timestamp time, Map<String, Object> configAdvanceInfo) {\n        final String appNameTmp =\n                StringUtils.isBlank(configInfo.getAppName()) ? StringUtils.EMPTY : configInfo.getAppName();\n        final String tenantTmp =\n                StringUtils.isBlank(configInfo.getTenant()) ? StringUtils.EMPTY : configInfo.getTenant();\n        final String desc = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"desc\");\n        final String use = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"use\");\n        final String effect = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"effect\");\n        final String type = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"type\");\n        final String schema = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"schema\");\n        final String md5Tmp = MD5Utils.md5Hex(configInfo.getContent(), Constants.ENCODE);\n        final String encryptedDataKey =\n                configInfo.getEncryptedDataKey() == null ? StringUtils.EMPTY : configInfo.getEncryptedDataKey();\n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        final String sql = configInfoMapper.insert(\n                Arrays.asList(\"id\", \"data_id\", \"group_id\", \"tenant_id\", \"app_name\", \"content\", \"md5\", \"src_ip\",\n                        \"src_user\", \"gmt_create\", \"gmt_modified\", \"c_desc\", \"c_use\", \"effect\", \"type\", \"c_schema\",\n                        \"encrypted_data_key\"));\n        final Object[] args = new Object[] {id, configInfo.getDataId(), configInfo.getGroup(), tenantTmp, appNameTmp,\n                configInfo.getContent(), md5Tmp, srcIp, srcUser, time, time, desc, use, effect, type, schema,\n                encryptedDataKey};\n        EmbeddedStorageContextHolder.addSqlContext(sql, args);\n        return id;\n    }\n    \n    @Override\n    public void addConfigTagRelationAtomic(long configId, String tagName, String dataId, String group, String tenant) {\n        ConfigTagsRelationMapper configTagsRelationMapper = mapperManager.findMapper(\n                dataSourceService.getDataSourceType(), TableConstant.CONFIG_TAGS_RELATION);\n        final String sql = configTagsRelationMapper.insert(\n                Arrays.asList(\"id\", \"tag_name\", \"tag_type\", \"data_id\", \"group_id\", \"tenant_id\"));\n        final Object[] args = new Object[] {configId, tagName, StringUtils.EMPTY, dataId, group, tenant};\n        EmbeddedStorageContextHolder.addSqlContext(sql, args);\n    }\n    \n    @Override\n    public void addConfigTagsRelation(long configId, String configTags, String dataId, String group, String tenant) {\n        if (StringUtils.isNotBlank(configTags)) {\n            String[] tagArr = configTags.split(\",\");\n            for (int i = 0; i < tagArr.length; i++) {\n                addConfigTagRelationAtomic(configId, tagArr[i], dataId, group, tenant);\n            }\n        }\n    }\n    \n    @Override\n    public void removeTagByIdAtomic(long id) {\n        ConfigTagsRelationMapper configTagsRelationMapper = mapperManager.findMapper(\n                dataSourceService.getDataSourceType(), TableConstant.CONFIG_TAGS_RELATION);\n        final String sql = configTagsRelationMapper.delete(Arrays.asList(\"id\"));\n        final Object[] args = new Object[] {id};\n        EmbeddedStorageContextHolder.addSqlContext(sql, args);\n    }\n    \n    @Override\n    public List<String> selectTagByConfig(String dataId, String group, String tenant) {\n        ConfigTagsRelationMapper configTagsRelationMapper = mapperManager.findMapper(\n                dataSourceService.getDataSourceType(), TableConstant.CONFIG_TAGS_RELATION);\n        String sql = configTagsRelationMapper.select(Arrays.asList(\"tag_name\"),\n                Arrays.asList(\"data_id\", \"group_id\", \"tenant_id\"));\n        return databaseOperate.queryMany(sql, new Object[] {dataId, group, tenant}, String.class);\n    }\n    \n    @Override\n    public void removeConfigInfoAtomic(final String dataId, final String group, final String tenant, final String srcIp,\n            final String srcUser) {\n        String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        final String sql = configInfoMapper.delete(Arrays.asList(\"data_id\", \"group_id\", \"tenant_id\"));\n        final Object[] args = new Object[] {dataId, group, tenantTmp};\n        \n        EmbeddedStorageContextHolder.addSqlContext(sql, args);\n    }\n    \n    @Override\n    public void removeConfigInfoByIdsAtomic(final String ids) {\n        if (StringUtils.isBlank(ids)) {\n            return;\n        }\n        List<Long> paramList = new ArrayList<>();\n        String[] idArr = ids.split(\",\");\n        for (int i = 0; i < idArr.length; i++) {\n            paramList.add(Long.parseLong(idArr[i]));\n        }\n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        MapperContext context = new MapperContext();\n        context.putWhereParameter(FieldConstant.IDS, paramList);\n        MapperResult result = configInfoMapper.removeConfigInfoByIdsAtomic(context);\n        EmbeddedStorageContextHolder.addSqlContext(result.getSql(), result.getParamList());\n    }\n    \n    @Override\n    public void removeConfigInfoTag(final String dataId, final String group, final String tenant, final String tag,\n            final String srcIp, final String srcUser) {\n        String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n        String tagTmp = StringUtils.isBlank(tag) ? StringUtils.EMPTY : tag;\n        \n        ConfigInfoTagMapper configInfoTagMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO_TAG);\n        final String sql = configInfoTagMapper.delete(Arrays.asList(\"data_id\", \"group_id\", \"tenant_id\", \"tag_id\"));\n        final Object[] args = new Object[] {dataId, group, tenantTmp, tagTmp};\n        \n        EmbeddedStorageContextUtils.onDeleteConfigTagInfo(tenantTmp, group, dataId, tagTmp, srcIp);\n        EmbeddedStorageContextHolder.addSqlContext(sql, args);\n        try {\n            databaseOperate.update(EmbeddedStorageContextHolder.getCurrentSqlContext());\n        } finally {\n            EmbeddedStorageContextHolder.cleanAllContext();\n        }\n    }\n    \n    @Override\n    public void updateConfigInfoAtomic(final ConfigInfo configInfo, final String srcIp, final String srcUser,\n            final Timestamp time, Map<String, Object> configAdvanceInfo) {\n        final String appNameTmp =\n                StringUtils.isBlank(configInfo.getAppName()) ? StringUtils.EMPTY : configInfo.getAppName();\n        final String tenantTmp =\n                StringUtils.isBlank(configInfo.getTenant()) ? StringUtils.EMPTY : configInfo.getTenant();\n        final String md5Tmp = MD5Utils.md5Hex(configInfo.getContent(), Constants.ENCODE);\n        final String desc = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"desc\");\n        final String use = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"use\");\n        final String effect = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"effect\");\n        final String type = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"type\");\n        final String schema = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"schema\");\n        final String encryptedDataKey =\n                configInfo.getEncryptedDataKey() == null ? StringUtils.EMPTY : configInfo.getEncryptedDataKey();\n        \n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        final String sql = configInfoMapper.update(\n                Arrays.asList(\"content\", \"md5\", \"src_ip\", \"src_user\", \"gmt_modified\", \"app_name\", \"c_desc\", \"c_use\",\n                        \"effect\", \"type\", \"c_schema\", \"encrypted_data_key\"),\n                Arrays.asList(\"data_id\", \"group_id\", \"tenant_id\"));\n        final Object[] args = new Object[] {configInfo.getContent(), md5Tmp, srcIp, srcUser, time, appNameTmp, desc,\n                use, effect, type, schema, encryptedDataKey, configInfo.getDataId(), configInfo.getGroup(), tenantTmp};\n        \n        EmbeddedStorageContextHolder.addSqlContext(sql, args);\n    }\n    \n    private void updateConfigInfoAtomicCas(final ConfigInfo configInfo, final String srcIp, final String srcUser,\n            final Timestamp time, Map<String, Object> configAdvanceInfo) {\n        final String appNameTmp =\n                StringUtils.isBlank(configInfo.getAppName()) ? StringUtils.EMPTY : configInfo.getAppName();\n        final String tenantTmp =\n                StringUtils.isBlank(configInfo.getTenant()) ? StringUtils.EMPTY : configInfo.getTenant();\n        final String md5Tmp = MD5Utils.md5Hex(configInfo.getContent(), Constants.ENCODE);\n        final String desc = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"desc\");\n        final String use = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"use\");\n        final String effect = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"effect\");\n        final String type = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"type\");\n        final String schema = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"schema\");\n        \n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        MapperContext context = new MapperContext();\n        context.putUpdateParameter(FieldConstant.CONTENT, configInfo.getContent());\n        context.putUpdateParameter(FieldConstant.MD5, md5Tmp);\n        context.putUpdateParameter(FieldConstant.SRC_IP, srcIp);\n        context.putUpdateParameter(FieldConstant.SRC_USER, srcUser);\n        context.putUpdateParameter(FieldConstant.GMT_MODIFIED, time);\n        context.putUpdateParameter(FieldConstant.APP_NAME, appNameTmp);\n        context.putUpdateParameter(FieldConstant.C_DESC, desc);\n        context.putUpdateParameter(FieldConstant.C_USE, use);\n        context.putUpdateParameter(FieldConstant.EFFECT, effect);\n        context.putUpdateParameter(FieldConstant.TYPE, type);\n        context.putUpdateParameter(FieldConstant.C_SCHEMA, schema);\n        \n        context.putWhereParameter(FieldConstant.DATA_ID, configInfo.getDataId());\n        context.putWhereParameter(FieldConstant.GROUP_ID, configInfo.getGroup());\n        context.putWhereParameter(FieldConstant.TENANT_ID, tenantTmp);\n        context.putWhereParameter(FieldConstant.MD5, configInfo.getMd5());\n        final MapperResult mapperResult = configInfoMapper.updateConfigInfoAtomicCas(context);\n        \n        EmbeddedStorageContextHolder.addSqlContext(true, mapperResult.getSql(), mapperResult.getParamList().toArray());\n    }\n    \n    @Override\n    public List<ConfigInfo> findConfigInfosByIds(final String ids) {\n        if (StringUtils.isBlank(ids)) {\n            return null;\n        }\n        List<Long> paramList = new ArrayList<>();\n        String[] idArr = ids.split(\",\");\n        for (int i = 0; i < idArr.length; i++) {\n            paramList.add(Long.parseLong(idArr[i]));\n        }\n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        MapperContext context = new MapperContext();\n        context.putWhereParameter(FieldConstant.IDS, paramList);\n        MapperResult mapperResult = configInfoMapper.findConfigInfosByIds(context);\n        return databaseOperate.queryMany(mapperResult.getSql(), mapperResult.getParamList().toArray(),\n                CONFIG_INFO_ROW_MAPPER);\n        \n    }\n    \n    @Override\n    public ConfigAdvanceInfo findConfigAdvanceInfo(final String dataId, final String group, final String tenant) {\n        final String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n        List<String> configTagList = this.selectTagByConfig(dataId, group, tenant);\n        \n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        ConfigAdvanceInfo configAdvance = databaseOperate.queryOne(configInfoMapper.select(\n                        Arrays.asList(\"gmt_create\", \"gmt_modified\", \"src_user\", \"src_ip\", \"c_desc\", \"c_use\", \"effect\", \"type\",\n                                \"c_schema\"), Arrays.asList(\"data_id\", \"group_id\", \"tenant_id\")),\n                new Object[] {dataId, group, tenantTmp}, CONFIG_ADVANCE_INFO_ROW_MAPPER);\n        \n        if (CollectionUtils.isNotEmpty(configTagList)) {\n            StringBuilder configTagsTmp = new StringBuilder();\n            for (String configTag : configTagList) {\n                if (configTagsTmp.length() == 0) {\n                    configTagsTmp.append(configTag);\n                } else {\n                    configTagsTmp.append(',').append(configTag);\n                }\n            }\n            configAdvance.setConfigTags(configTagsTmp.toString());\n        }\n        return configAdvance;\n    }\n    \n    @Override\n    public ConfigAllInfo findConfigAllInfo(final String dataId, final String group, final String tenant) {\n        final String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n        \n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        final String sql = configInfoMapper.select(\n                Arrays.asList(\"id\", \"data_id\", \"group_id\", \"tenant_id\", \"app_name\", \"content\", \"md5\", \"gmt_create\",\n                        \"gmt_modified\", \"src_user\", \"src_ip\", \"c_desc\", \"c_use\", \"effect\", \"type\", \"c_schema\",\n                        \"encrypted_data_key\"), Arrays.asList(\"data_id\", \"group_id\", \"tenant_id\"));\n        \n        List<String> configTagList = selectTagByConfig(dataId, group, tenant);\n        \n        ConfigAllInfo configAdvance = databaseOperate.queryOne(sql, new Object[] {dataId, group, tenantTmp},\n                CONFIG_ALL_INFO_ROW_MAPPER);\n        \n        if (configTagList != null && !configTagList.isEmpty()) {\n            StringBuilder configTagsTmp = new StringBuilder();\n            for (String configTag : configTagList) {\n                if (configTagsTmp.length() == 0) {\n                    configTagsTmp.append(configTag);\n                } else {\n                    configTagsTmp.append(',').append(configTag);\n                }\n            }\n            configAdvance.setConfigTags(configTagsTmp.toString());\n        }\n        return configAdvance;\n    }\n    \n    @Override\n    public void insertConfigHistoryAtomic(long configHistoryId, ConfigInfo configInfo, String srcIp, String srcUser,\n            final Timestamp time, String ops) {\n        String appNameTmp = StringUtils.isBlank(configInfo.getAppName()) ? StringUtils.EMPTY : configInfo.getAppName();\n        String tenantTmp = StringUtils.isBlank(configInfo.getTenant()) ? StringUtils.EMPTY : configInfo.getTenant();\n        final String md5Tmp = MD5Utils.md5Hex(configInfo.getContent(), Constants.ENCODE);\n        String encryptedDataKey = StringUtils.isBlank(configInfo.getEncryptedDataKey()) ? StringUtils.EMPTY\n                : configInfo.getEncryptedDataKey();\n        \n        HistoryConfigInfoMapper historyConfigInfoMapper = mapperManager.findMapper(\n                dataSourceService.getDataSourceType(), TableConstant.HIS_CONFIG_INFO);\n        final String sql = historyConfigInfoMapper.insert(\n                Arrays.asList(\"id\", \"data_id\", \"group_id\", \"tenant_id\", \"app_name\", \"content\", \"md5\", \"src_ip\",\n                        \"src_user\", \"gmt_modified\", \"op_type\", \"encrypted_data_key\"));\n        final Object[] args = new Object[] {configHistoryId, configInfo.getDataId(), configInfo.getGroup(), tenantTmp,\n                appNameTmp, configInfo.getContent(), md5Tmp, srcIp, srcUser, time, ops, encryptedDataKey};\n        \n        EmbeddedStorageContextHolder.addSqlContext(sql, args);\n    }\n    \n    @Override\n    public Page<ConfigHistoryInfo> findConfigHistory(String dataId, String group, String tenant, int pageNo,\n            int pageSize) {\n        String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n        \n        HistoryConfigInfoMapper historyConfigInfoMapper = mapperManager.findMapper(\n                dataSourceService.getDataSourceType(), TableConstant.HIS_CONFIG_INFO);\n        \n        MapperContext context = new MapperContext();\n        context.putWhereParameter(FieldConstant.DATA_ID, dataId);\n        context.putWhereParameter(FieldConstant.GROUP_ID, group);\n        context.putWhereParameter(FieldConstant.TENANT_ID, tenantTmp);\n        String sqlCountRows = historyConfigInfoMapper.count(Arrays.asList(\"data_id\", \"group_id\", \"tenant_id\"));\n        MapperResult sqlFetchRows = historyConfigInfoMapper.findConfigHistoryFetchRows(context);\n        \n        PaginationHelper<ConfigHistoryInfo> helper = createPaginationHelper();\n        return helper.fetchPage(sqlCountRows, sqlFetchRows.getSql(), sqlFetchRows.getParamList().toArray(), pageNo,\n                pageSize, HISTORY_LIST_ROW_MAPPER);\n    }\n    \n    @Override\n    public ConfigHistoryInfo detailConfigHistory(Long nid) {\n        HistoryConfigInfoMapper historyConfigInfoMapper = mapperManager.findMapper(\n                dataSourceService.getDataSourceType(), TableConstant.HIS_CONFIG_INFO);\n        String sqlFetchRows = historyConfigInfoMapper.select(\n                Arrays.asList(\"nid\", \"data_id\", \"group_id\", \"tenant_id\", \"app_name\", \"content\", \"md5\", \"src_user\",\n                        \"src_ip\", \"op_type\", \"gmt_create\", \"gmt_modified\", \"encrypted_data_key\"),\n                Collections.singletonList(\"nid\"));\n        return databaseOperate.queryOne(sqlFetchRows, new Object[] {nid}, HISTORY_DETAIL_ROW_MAPPER);\n    }\n    \n    @Override\n    public ConfigHistoryInfo detailPreviousConfigHistory(Long id) {\n        HistoryConfigInfoMapper historyConfigInfoMapper = mapperManager.findMapper(\n                dataSourceService.getDataSourceType(), TableConstant.HIS_CONFIG_INFO);\n        MapperContext context = new MapperContext();\n        context.putWhereParameter(FieldConstant.ID, id);\n        MapperResult sqlFetchRows = historyConfigInfoMapper.detailPreviousConfigHistory(context);\n        return databaseOperate.queryOne(sqlFetchRows.getSql(), sqlFetchRows.getParamList().toArray(),\n                HISTORY_DETAIL_ROW_MAPPER);\n    }\n    \n    @Override\n    public void insertTenantInfoAtomic(String kp, String tenantId, String tenantName, String tenantDesc,\n            String createResoure, final long time) {\n        \n        TenantInfoMapper tenantInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.TENANT_INFO);\n        final String sql = tenantInfoMapper.insert(\n                Arrays.asList(\"kp\", \"tenant_id\", \"tenant_name\", \"tenant_desc\", \"create_source\", \"gmt_create\",\n                        \"gmt_modified\"));\n        final Object[] args = new Object[] {kp, tenantId, tenantName, tenantDesc, createResoure, time, time};\n        \n        EmbeddedStorageContextHolder.addSqlContext(sql, args);\n        \n        try {\n            boolean result = databaseOperate.update(EmbeddedStorageContextHolder.getCurrentSqlContext());\n            if (!result) {\n                throw new NacosConfigException(\"Namespace creation failed\");\n            }\n        } finally {\n            EmbeddedStorageContextHolder.cleanAllContext();\n        }\n    }\n    \n    @Override\n    public void updateTenantNameAtomic(String kp, String tenantId, String tenantName, String tenantDesc) {\n        \n        TenantInfoMapper tenantInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.TENANT_INFO);\n        final String sql = tenantInfoMapper.update(Arrays.asList(\"tenant_name\", \"tenant_desc\", \"gmt_modified\"),\n                Arrays.asList(\"kp\", \"tenant_id\"));\n        final Object[] args = new Object[] {tenantName, tenantDesc, System.currentTimeMillis(), kp, tenantId};\n        \n        EmbeddedStorageContextHolder.addSqlContext(sql, args);\n        \n        try {\n            boolean result = databaseOperate.update(EmbeddedStorageContextHolder.getCurrentSqlContext());\n            if (!result) {\n                throw new NacosConfigException(\"Namespace update failed\");\n            }\n        } finally {\n            EmbeddedStorageContextHolder.cleanAllContext();\n        }\n    }\n    \n    @Override\n    public List<TenantInfo> findTenantByKp(String kp) {\n        TenantInfoMapper tenantInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.TENANT_INFO);\n        String sql = tenantInfoMapper.select(Arrays.asList(\"tenant_id\", \"tenant_name\", \"tenant_desc\"),\n                Collections.singletonList(\"kp\"));\n        return databaseOperate.queryMany(sql, new Object[] {kp}, TENANT_INFO_ROW_MAPPER);\n        \n    }\n    \n    @Override\n    public TenantInfo findTenantByKp(String kp, String tenantId) {\n        TenantInfoMapper tenantInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.TENANT_INFO);\n        String sql = tenantInfoMapper.select(Arrays.asList(\"tenant_id\", \"tenant_name\", \"tenant_desc\"),\n                Arrays.asList(\"kp\", \"tenant_id\"));\n        return databaseOperate.queryOne(sql, new Object[] {kp, tenantId}, TENANT_INFO_ROW_MAPPER);\n        \n    }\n    \n    @Override\n    public void removeTenantInfoAtomic(final String kp, final String tenantId) {\n        TenantInfoMapper tenantInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.TENANT_INFO);\n        \n        EmbeddedStorageContextHolder.addSqlContext(tenantInfoMapper.delete(Arrays.asList(\"kp\", \"tenant_id\")), kp,\n                tenantId);\n        try {\n            databaseOperate.update(EmbeddedStorageContextHolder.getCurrentSqlContext());\n        } finally {\n            EmbeddedStorageContextHolder.cleanAllContext();\n        }\n    }\n    \n    @Override\n    public List<ConfigInfo> convertDeletedConfig(List<Map<String, Object>> list) {\n        List<ConfigInfo> configs = new ArrayList<>();\n        for (Map<String, Object> map : list) {\n            String dataId = (String) map.get(\"data_id\");\n            String group = (String) map.get(\"group_id\");\n            String tenant = (String) map.get(\"tenant_id\");\n            ConfigInfo config = new ConfigInfo();\n            config.setDataId(dataId);\n            config.setGroup(group);\n            config.setTenant(tenant);\n            configs.add(config);\n        }\n        return configs;\n    }\n    \n    @Override\n    public List<ConfigInfoWrapper> convertChangeConfig(List<Map<String, Object>> list) {\n        List<ConfigInfoWrapper> configs = new ArrayList<>();\n        for (Map<String, Object> map : list) {\n            String dataId = (String) map.get(\"data_id\");\n            String group = (String) map.get(\"group_id\");\n            String tenant = (String) map.get(\"tenant_id\");\n            String content = (String) map.get(\"content\");\n            long mTime = ((Timestamp) map.get(\"gmt_modified\")).getTime();\n            ConfigInfoWrapper config = new ConfigInfoWrapper();\n            config.setDataId(dataId);\n            config.setGroup(group);\n            config.setTenant(tenant);\n            config.setContent(content);\n            config.setLastModified(mTime);\n            configs.add(config);\n        }\n        return configs;\n    }\n    \n    @Override\n    public List<ConfigInfoWrapper> listAllGroupKeyMd5() {\n        final int pageSize = 10000;\n        int totalCount = configInfoCount();\n        int pageCount = (int) Math.ceil(totalCount * 1.0 / pageSize);\n        List<ConfigInfoWrapper> allConfigInfo = new ArrayList<>();\n        for (int pageNo = 1; pageNo <= pageCount; pageNo++) {\n            List<ConfigInfoWrapper> configInfoList = listGroupKeyMd5ByPage(pageNo, pageSize);\n            allConfigInfo.addAll(configInfoList);\n        }\n        return allConfigInfo;\n    }\n    \n    @Override\n    public List<ConfigInfoWrapper> listGroupKeyMd5ByPage(int pageNo, int pageSize) {\n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        String sqlCountRows = configInfoMapper.count(null);\n        MapperContext context = new MapperContext((pageNo - 1) * pageSize, pageSize);\n        \n        MapperResult sqlFetchRows = configInfoMapper.listGroupKeyMd5ByPageFetchRows(context);\n        PaginationHelper<ConfigInfoWrapper> helper = createPaginationHelper();\n        Page<ConfigInfoWrapper> page = helper.fetchPageLimit(sqlCountRows, sqlFetchRows.getSql(),\n                sqlFetchRows.getParamList().toArray(), pageNo, pageSize, CONFIG_INFO_WRAPPER_ROW_MAPPER);\n        \n        return page.getPageItems();\n    }\n    \n    @Override\n    public String generateLikeArgument(String s) {\n        String fuzzySearchSign = \"\\\\*\";\n        String sqlLikePercentSign = \"%\";\n        if (s.contains(PATTERN_STR)) {\n            return s.replaceAll(fuzzySearchSign, sqlLikePercentSign);\n        } else {\n            return s;\n        }\n    }\n    \n    @Override\n    public ConfigInfoWrapper queryConfigInfo(final String dataId, final String group, final String tenant) {\n        String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        final String sql = configInfoMapper.select(\n                Arrays.asList(\"id\", \"data_id\", \"group_id\", \"tenant_id\", \"app_name\", \"content\", \"type\", \"gmt_modified\",\n                        \"md5\", \"encrypted_data_key\"), Arrays.asList(\"data_id\", \"group_id\", \"tenant_id\"));\n        \n        return databaseOperate.queryOne(sql, new Object[] {dataId, group, tenantTmp}, CONFIG_INFO_WRAPPER_ROW_MAPPER);\n    }\n    \n    @Override\n    public boolean isExistTable(String tableName) {\n        String sql = String.format(\"SELECT 1 FROM %s FETCH FIRST ROW ONLY\", tableName);\n        try {\n            databaseOperate.queryOne(sql, Integer.class);\n            return true;\n        } catch (Throwable e) {\n            return false;\n        }\n    }\n    \n    @Override\n    public List<ConfigAllInfo> findAllConfigInfo4Export(final String dataId, final String group, final String tenant,\n            final String appName, final List<Long> ids) {\n        String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        MapperContext context = new MapperContext();\n    \n        if (!CollectionUtils.isEmpty(ids)) {\n            context.putWhereParameter(FieldConstant.IDS, ids);\n        } else {\n            context.putWhereParameter(FieldConstant.TENANT_ID, tenantTmp);\n            if (!StringUtils.isBlank(dataId)) {\n                context.putWhereParameter(FieldConstant.DATA_ID, generateLikeArgument(dataId));\n            }\n            if (StringUtils.isNotBlank(group)) {\n                context.putWhereParameter(FieldConstant.GROUP_ID, group);\n            }\n            if (StringUtils.isNotBlank(appName)) {\n                context.putWhereParameter(FieldConstant.APP_NAME, appName);\n            }\n        }\n        \n        MapperResult mapperResult = configInfoMapper.findAllConfigInfo4Export(context);\n        return databaseOperate.queryMany(mapperResult.getSql(), mapperResult.getParamList().toArray(),\n                CONFIG_ALL_INFO_ROW_MAPPER);\n    }\n    \n    @Override\n    public Map<String, Object> batchInsertOrUpdate(List<ConfigAllInfo> configInfoList, String srcUser, String srcIp,\n            Map<String, Object> configAdvanceInfo, Timestamp time, boolean notify, SameConfigPolicy policy)\n            throws NacosException {\n        int succCount = 0;\n        int skipCount = 0;\n        List<Map<String, String>> failData = null;\n        List<Map<String, String>> skipData = null;\n        \n        final BiConsumer<Boolean, Throwable> callFinally = (result, t) -> {\n            if (t != null) {\n                throw new NacosRuntimeException(0, t);\n            }\n        };\n        \n        for (int i = 0; i < configInfoList.size(); i++) {\n            ConfigAllInfo configInfo = configInfoList.get(i);\n            try {\n                ParamUtils.checkParam(configInfo.getDataId(), configInfo.getGroup(), \"datumId\",\n                        configInfo.getContent());\n            } catch (Throwable e) {\n                DEFAULT_LOG.error(\"data verification failed\", e);\n                throw e;\n            }\n            ConfigInfo configInfo2Save = new ConfigInfo(configInfo.getDataId(), configInfo.getGroup(),\n                    configInfo.getTenant(), configInfo.getAppName(), configInfo.getContent());\n            configInfo2Save.setEncryptedDataKey(\n                    configInfo.getEncryptedDataKey() == null ? \"\" : configInfo.getEncryptedDataKey());\n            String type = configInfo.getType();\n            if (StringUtils.isBlank(type)) {\n                // simple judgment of file type based on suffix\n                if (configInfo.getDataId().contains(SPOT)) {\n                    String extName = configInfo.getDataId().substring(configInfo.getDataId().lastIndexOf(SPOT) + 1);\n                    FileTypeEnum fileTypeEnum = FileTypeEnum.getFileTypeEnumByFileExtensionOrFileType(extName);\n                    type = fileTypeEnum.getFileType();\n                } else {\n                    type = FileTypeEnum.getFileTypeEnumByFileExtensionOrFileType(null).getFileType();\n                }\n            }\n            if (configAdvanceInfo == null) {\n                configAdvanceInfo = new HashMap<>(16);\n            }\n            configAdvanceInfo.put(\"type\", type);\n            configAdvanceInfo.put(\"desc\", configInfo.getDesc());\n            try {\n                ConfigInfo foundCfg = findConfigInfo(configInfo2Save.getDataId(), configInfo2Save.getGroup(),\n                        configInfo2Save.getTenant());\n                if (foundCfg != null) {\n                    throw new Throwable(\"DuplicateKeyException: config already exists, should be overridden\");\n                }\n                addConfigInfo(srcIp, srcUser, configInfo2Save, time, configAdvanceInfo, notify, callFinally);\n                succCount++;\n            } catch (Throwable e) {\n                if (!StringUtils.contains(e.toString(), \"DuplicateKeyException\")) {\n                    throw new NacosException(NacosException.SERVER_ERROR, e);\n                }\n                // uniqueness constraint conflict\n                if (SameConfigPolicy.ABORT.equals(policy)) {\n                    failData = new ArrayList<>();\n                    skipData = new ArrayList<>();\n                    Map<String, String> faileditem = new HashMap<>(2);\n                    faileditem.put(\"dataId\", configInfo2Save.getDataId());\n                    faileditem.put(\"group\", configInfo2Save.getGroup());\n                    failData.add(faileditem);\n                    for (int j = (i + 1); j < configInfoList.size(); j++) {\n                        ConfigInfo skipConfigInfo = configInfoList.get(j);\n                        Map<String, String> skipitem = new HashMap<>(2);\n                        skipitem.put(\"dataId\", skipConfigInfo.getDataId());\n                        skipitem.put(\"group\", skipConfigInfo.getGroup());\n                        skipData.add(skipitem);\n                    }\n                    break;\n                } else if (SameConfigPolicy.SKIP.equals(policy)) {\n                    skipCount++;\n                    if (skipData == null) {\n                        skipData = new ArrayList<>();\n                    }\n                    Map<String, String> skipitem = new HashMap<>(2);\n                    skipitem.put(\"dataId\", configInfo2Save.getDataId());\n                    skipitem.put(\"group\", configInfo2Save.getGroup());\n                    skipData.add(skipitem);\n                } else if (SameConfigPolicy.OVERWRITE.equals(policy)) {\n                    succCount++;\n                    updateConfigInfo(configInfo2Save, srcIp, srcUser, time, configAdvanceInfo, notify);\n                }\n            }\n        }\n        Map<String, Object> result = new HashMap<>(4);\n        result.put(\"succCount\", succCount);\n        result.put(\"skipCount\", skipCount);\n        if (failData != null && !failData.isEmpty()) {\n            result.put(\"failData\", failData);\n        }\n        if (skipData != null && !skipData.isEmpty()) {\n            result.put(\"skipData\", skipData);\n        }\n        return result;\n    }\n    \n    @Override\n    public int tenantInfoCountByTenantId(String tenantId) {\n        if (Objects.isNull(tenantId)) {\n            throw new IllegalArgumentException(\"tenantId can not be null\");\n        }\n        TenantInfoMapper tenantInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.TENANT_INFO);\n        String sql = tenantInfoMapper.count(Arrays.asList(\"tenant_id\"));\n        Integer result = databaseOperate.queryOne(sql, new String[] {tenantId}, Integer.class);\n        if (result == null) {\n            return 0;\n        }\n        return result;\n    }\n    \n    @Override\n    public List<ConfigInfoWrapper> queryConfigInfoByNamespace(String tenantId) {\n        if (Objects.isNull(tenantId)) {\n            throw new IllegalArgumentException(\"tenantId can not be null\");\n        }\n        String tenantTmp = StringUtils.isBlank(tenantId) ? StringUtils.EMPTY : tenantId;\n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        final String sql = configInfoMapper.select(\n                Arrays.asList(\"data_id\", \"group_id\", \"tenant_id\", \"app_name\", \"type\", \"gmt_modified\"),\n                Collections.singletonList(\"tenant_id\"));\n        return databaseOperate.queryMany(sql, new Object[] {tenantTmp}, CONFIG_INFO_WRAPPER_ROW_MAPPER);\n    }\n}\n\n", "methodName": "com.alibaba.nacos.config.server.service.repository.embedded.EmbeddedStoragePersistServiceImpl.removeConfigInfoByIds(java.util.List,java.lang.String,java.lang.String):java.util.List", "exampleID": 0, "dataset": "infer", "filepath": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedStoragePersistServiceImpl.java", "line": 661, "sink": "configInfoList", "source": "configInfoList", "sourceLine": 658, "qualifier": "$$configInfoList/$ could be null, and is @@dereferenced/@", "steps": [{"line": 1886, "source": "configInfoList", "filepath": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedStoragePersistServiceImpl.java", "methodName": "EmbeddedStoragePersistServiceImpl.findConfigInfosByIds", "exampleID": 1}], "line_number": 658, "records": [{"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedStoragePersistServiceImpl.java", "line_number": 1886, "column_number": -1, "description": "start of procedure findConfigInfosByIds(...)", "snippet": "    public List<ConfigInfo> findConfigInfosByIds(final String ids) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedStoragePersistServiceImpl.java", "methodName": "findConfigInfosByIds"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedStoragePersistServiceImpl.java", "line_number": 1887, "column_number": -1, "description": "", "snippet": "        if (StringUtils.isBlank(ids)) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedStoragePersistServiceImpl.java", "methodName": "findConfigInfosByIds"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 77, "column_number": -1, "description": "start of procedure isBlank(...)", "snippet": "    public static boolean isBlank(final CharSequence cs) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isBlank"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 79, "column_number": -1, "description": "Taking false branch", "snippet": "        if (cs == null || (strLen = cs.length()) == 0) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isBlank"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 80, "column_number": -1, "description": "", "snippet": "            return true;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isBlank"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 87, "column_number": -1, "description": "return from a call to boolean StringUtils.isBlank(CharSequence)", "snippet": "        return true;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isBlank"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedStoragePersistServiceImpl.java", "line_number": 1887, "column_number": -1, "description": "Taking true branch", "snippet": "        if (StringUtils.isBlank(ids)) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedStoragePersistServiceImpl.java", "methodName": "findConfigInfosByIds"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedStoragePersistServiceImpl.java", "line_number": 1888, "column_number": -1, "description": "", "snippet": "            return null;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedStoragePersistServiceImpl.java", "methodName": "findConfigInfosByIds"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedStoragePersistServiceImpl.java", "line_number": 1900, "column_number": -1, "description": "return from a call to List EmbeddedStoragePersistServiceImpl.findConfigInfosByIds(String)", "snippet": "        return databaseOperate.queryMany(mapperResult.getSql(), mapperResult.getParamList().toArray(),", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedStoragePersistServiceImpl.java", "methodName": "findConfigInfosByIds"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedStoragePersistServiceImpl.java", "line_number": 1783, "column_number": -1, "description": "start of procedure removeConfigInfoByIdsAtomic(...)", "snippet": "    public void removeConfigInfoByIdsAtomic(final String ids) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedStoragePersistServiceImpl.java", "methodName": "removeConfigInfoByIdsAtomic"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedStoragePersistServiceImpl.java", "line_number": 1784, "column_number": -1, "description": "", "snippet": "        if (StringUtils.isBlank(ids)) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedStoragePersistServiceImpl.java", "methodName": "removeConfigInfoByIdsAtomic"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 77, "column_number": -1, "description": "start of procedure isBlank(...)", "snippet": "    public static boolean isBlank(final CharSequence cs) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isBlank"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 79, "column_number": -1, "description": "Taking false branch", "snippet": "        if (cs == null || (strLen = cs.length()) == 0) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isBlank"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 80, "column_number": -1, "description": "", "snippet": "            return true;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isBlank"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 87, "column_number": -1, "description": "return from a call to boolean StringUtils.isBlank(CharSequence)", "snippet": "        return true;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isBlank"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedStoragePersistServiceImpl.java", "line_number": 1784, "column_number": -1, "description": "Taking true branch", "snippet": "        if (StringUtils.isBlank(ids)) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedStoragePersistServiceImpl.java", "methodName": "removeConfigInfoByIdsAtomic"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedStoragePersistServiceImpl.java", "line_number": 1785, "column_number": -1, "description": "", "snippet": "            return;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedStoragePersistServiceImpl.java", "methodName": "removeConfigInfoByIdsAtomic"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedStoragePersistServiceImpl.java", "line_number": 1798, "column_number": -1, "description": "return from a call to void EmbeddedStoragePersistServiceImpl.removeConfigInfoByIdsAtomic(String)", "snippet": "    }", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedStoragePersistServiceImpl.java", "methodName": "removeConfigInfoByIdsAtomic"}], "combined_records": [{"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedStoragePersistServiceImpl.java", "line_number": 1887, "column_number": -1, "description": "start of procedure findConfigInfosByIds(...)", "snippet": "1883.    @Override\n1884.    public List<ConfigInfo> findConfigInfosByIds(final String ids) {\n1885.>         if (StringUtils.isBlank(ids)) {\n1886.>             return null;\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedStoragePersistServiceImpl.java", "methodName": "findConfigInfosByIds", "line_numbers": [1886, 1887]}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 87, "column_number": -1, "description": "start of procedure isBlank(...)", "snippet": "74.     */\n75.    public static boolean isBlank(final CharSequence cs) {\n76.>         int strLen;\n77.        if (cs == null || (strLen = cs.length()) == 0) {\n78.>             return true;\n79.        }\n80.        for (int i = 0; i < strLen; i++) {\n81.            if (!Character.isWhitespace(cs.charAt(i))) {\n82.                return false;\n83.            }\n84.        }\n85.        return true;\n86.    }\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isBlank", "line_numbers": [77, 79, 80, 87]}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedStoragePersistServiceImpl.java", "line_number": 1900, "column_number": -1, "description": "Taking true branch", "snippet": "1884.    public List<ConfigInfo> findConfigInfosByIds(final String ids) {\n1885.        if (StringUtils.isBlank(ids)) {\n1886.>             return null;\n1887.        }\n1888.        List<Long> paramList = new ArrayList<>();\n1889.        String[] idArr = ids.split(\",\");\n1890.        for (int i = 0; i < idArr.length; i++) {\n1891.            paramList.add(Long.parseLong(idArr[i]));\n1892.        }\n1893.        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n1894.                TableConstant.CONFIG_INFO);\n1895.        MapperContext context = new MapperContext();\n1896.        context.putWhereParameter(FieldConstant.IDS, paramList);\n1897.        MapperResult mapperResult = configInfoMapper.findConfigInfosByIds(context);\n1898.        return databaseOperate.queryMany(mapperResult.getSql(), mapperResult.getParamList().toArray(),\n1899.>                 CONFIG_INFO_ROW_MAPPER);\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedStoragePersistServiceImpl.java", "methodName": "findConfigInfosByIds", "line_numbers": [1887, 1888, 1900]}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedStoragePersistServiceImpl.java", "line_number": 1784, "column_number": -1, "description": "start of procedure removeConfigInfoByIdsAtomic(...)", "snippet": "1780.    @Override\n1781.    public void removeConfigInfoByIdsAtomic(final String ids) {\n1782.>         if (StringUtils.isBlank(ids)) {\n1783.>             return;\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedStoragePersistServiceImpl.java", "methodName": "removeConfigInfoByIdsAtomic", "line_numbers": [1783, 1784]}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 87, "column_number": -1, "description": "start of procedure isBlank(...)", "snippet": "74.     */\n75.    public static boolean isBlank(final CharSequence cs) {\n76.>         int strLen;\n77.        if (cs == null || (strLen = cs.length()) == 0) {\n78.>             return true;\n79.        }\n80.        for (int i = 0; i < strLen; i++) {\n81.            if (!Character.isWhitespace(cs.charAt(i))) {\n82.                return false;\n83.            }\n84.        }\n85.        return true;\n86.    }\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isBlank", "line_numbers": [77, 79, 80, 87]}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedStoragePersistServiceImpl.java", "line_number": 1798, "column_number": -1, "description": "Taking true branch", "snippet": "1781.    public void removeConfigInfoByIdsAtomic(final String ids) {\n1782.        if (StringUtils.isBlank(ids)) {\n1783.>             return;\n1784.        }\n1785.        List<Long> paramList = new ArrayList<>();\n1786.        String[] idArr = ids.split(\",\");\n1787.        for (int i = 0; i < idArr.length; i++) {\n1788.            paramList.add(Long.parseLong(idArr[i]));\n1789.        }\n1790.        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n1791.                TableConstant.CONFIG_INFO);\n1792.        MapperContext context = new MapperContext();\n1793.        context.putWhereParameter(FieldConstant.IDS, paramList);\n1794.        MapperResult result = configInfoMapper.removeConfigInfoByIdsAtomic(context);\n1795.        EmbeddedStorageContextHolder.addSqlContext(result.getSql(), result.getParamList());\n1796.    }\n1797.>     \n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedStoragePersistServiceImpl.java", "methodName": "removeConfigInfoByIdsAtomic", "line_numbers": [1784, 1785, 1798]}], "infer_explore": [{"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedStoragePersistServiceImpl.java", "line_number": 650, "column_number": -1, "description": "start of procedure removeConfigInfoByIds(...)", "snippet": "647.     \n648.     @Override\n649. >     public List<ConfigInfo> removeConfigInfoByIds(final List<Long> ids, final String srcIp, final String srcUser) {\n650.         if (CollectionUtils.isEmpty(ids)) {\n651.             return null;\n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedStoragePersistServiceImpl.java", "line_number": 651, "column_number": -1, "description": "Taking false branch", "snippet": "648.     @Override\n649.     public List<ConfigInfo> removeConfigInfoByIds(final List<Long> ids, final String srcIp, final String srcUser) {\n650. >         if (CollectionUtils.isEmpty(ids)) {\n651.             return null;\n652.         }\n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedStoragePersistServiceImpl.java", "line_number": 654, "column_number": -1, "description": "Skipping removeAll(...): unknown method", "snippet": "651.             return null;\n652.         }\n653. >         ids.removeAll(Collections.singleton(null));\n654.         final Timestamp time = new Timestamp(System.currentTimeMillis());\n655.         try {\n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedStoragePersistServiceImpl.java", "line_number": 655, "column_number": -1, "description": "Skipping Timestamp(...): unknown method", "snippet": "652.         }\n653.         ids.removeAll(Collections.singleton(null));\n654. >         final Timestamp time = new Timestamp(System.currentTimeMillis());\n655.         try {\n656.             String idsStr = StringUtils.join(ids, StringUtils.COMMA);\n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedStoragePersistServiceImpl.java", "line_number": 657, "column_number": -1, "description": "Skipping join(...): empty list of specs", "snippet": "654.         final Timestamp time = new Timestamp(System.currentTimeMillis());\n655.         try {\n656. >             String idsStr = StringUtils.join(ids, StringUtils.COMMA);\n657.             List<ConfigInfo> configInfoList = findConfigInfosByIds(idsStr);\n658.             if (CollectionUtils.isNotEmpty(configInfoList)) {\n"}, {"level": 1, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 186, "column_number": -1, "description": "Definition of join(...)", "snippet": "183.      * @return the joined String, {@code null} if null array input\n184.      */\n185. >     public static String join(Collection collection, String separator) {\n186.         if (collection == null) {\n187.             return null;\n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedStoragePersistServiceImpl.java", "line_number": 658, "column_number": -1, "description": "", "snippet": "655.         try {\n656.             String idsStr = StringUtils.join(ids, StringUtils.COMMA);\n657. >             List<ConfigInfo> configInfoList = findConfigInfosByIds(idsStr);\n658.             if (CollectionUtils.isNotEmpty(configInfoList)) {\n659.                 removeConfigInfoByIdsAtomic(idsStr);\n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedStoragePersistServiceImpl.java", "line_number": 1886, "column_number": -1, "description": "start of procedure findConfigInfosByIds(...)", "snippet": "1883.     \n1884.     @Override\n1885. >     public List<ConfigInfo> findConfigInfosByIds(final String ids) {\n1886.         if (StringUtils.isBlank(ids)) {\n1887.             return null;\n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedStoragePersistServiceImpl.java", "line_number": 1887, "column_number": -1, "description": "", "snippet": "1884.     @Override\n1885.     public List<ConfigInfo> findConfigInfosByIds(final String ids) {\n1886. >         if (StringUtils.isBlank(ids)) {\n1887.             return null;\n1888.         }\n"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 77, "column_number": -1, "description": "start of procedure isBlank(...)", "snippet": "74.      * @return {@code true} if the string is empty and null and whitespace\n75.      */\n76. >     public static boolean isBlank(final CharSequence cs) {\n77.         int strLen;\n78.         if (cs == null || (strLen = cs.length()) == 0) {\n"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 79, "column_number": -1, "description": "Taking false branch", "snippet": "76.     public static boolean isBlank(final CharSequence cs) {\n77.         int strLen;\n78. >         if (cs == null || (strLen = cs.length()) == 0) {\n79.             return true;\n80.         }\n"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 80, "column_number": -1, "description": "", "snippet": "77.         int strLen;\n78.         if (cs == null || (strLen = cs.length()) == 0) {\n79. >             return true;\n80.         }\n81.         for (int i = 0; i < strLen; i++) {\n"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 87, "column_number": -1, "description": "return from a call to boolean StringUtils.isBlank(CharSequence)", "snippet": "84.             }\n85.         }\n86. >         return true;\n87.     }\n88.     \n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedStoragePersistServiceImpl.java", "line_number": 1887, "column_number": -1, "description": "Taking true branch", "snippet": "1884.     @Override\n1885.     public List<ConfigInfo> findConfigInfosByIds(final String ids) {\n1886. >         if (StringUtils.isBlank(ids)) {\n1887.             return null;\n1888.         }\n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedStoragePersistServiceImpl.java", "line_number": 1888, "column_number": -1, "description": "", "snippet": "1885.     public List<ConfigInfo> findConfigInfosByIds(final String ids) {\n1886.         if (StringUtils.isBlank(ids)) {\n1887. >             return null;\n1888.         }\n1889.         List<Long> paramList = new ArrayList<>();\n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedStoragePersistServiceImpl.java", "line_number": 1900, "column_number": -1, "description": "return from a call to List EmbeddedStoragePersistServiceImpl.findConfigInfosByIds(String)", "snippet": "1897.         context.putWhereParameter(FieldConstant.IDS, paramList);\n1898.         MapperResult mapperResult = configInfoMapper.findConfigInfosByIds(context);\n1899. >         return databaseOperate.queryMany(mapperResult.getSql(), mapperResult.getParamList().toArray(),\n1900.                 CONFIG_INFO_ROW_MAPPER);\n1901.         \n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedStoragePersistServiceImpl.java", "line_number": 659, "column_number": -1, "description": "Taking true branch", "snippet": "656.             String idsStr = StringUtils.join(ids, StringUtils.COMMA);\n657.             List<ConfigInfo> configInfoList = findConfigInfosByIds(idsStr);\n658. >             if (CollectionUtils.isNotEmpty(configInfoList)) {\n659.                 removeConfigInfoByIdsAtomic(idsStr);\n660.                 for (ConfigInfo configInfo : configInfoList) {\n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedStoragePersistServiceImpl.java", "line_number": 660, "column_number": -1, "description": "", "snippet": "657.             List<ConfigInfo> configInfoList = findConfigInfosByIds(idsStr);\n658.             if (CollectionUtils.isNotEmpty(configInfoList)) {\n659. >                 removeConfigInfoByIdsAtomic(idsStr);\n660.                 for (ConfigInfo configInfo : configInfoList) {\n661.                     removeTagByIdAtomic(configInfo.getId());\n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedStoragePersistServiceImpl.java", "line_number": 1783, "column_number": -1, "description": "start of procedure removeConfigInfoByIdsAtomic(...)", "snippet": "1780.     \n1781.     @Override\n1782. >     public void removeConfigInfoByIdsAtomic(final String ids) {\n1783.         if (StringUtils.isBlank(ids)) {\n1784.             return;\n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedStoragePersistServiceImpl.java", "line_number": 1784, "column_number": -1, "description": "", "snippet": "1781.     @Override\n1782.     public void removeConfigInfoByIdsAtomic(final String ids) {\n1783. >         if (StringUtils.isBlank(ids)) {\n1784.             return;\n1785.         }\n"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 77, "column_number": -1, "description": "start of procedure isBlank(...)", "snippet": "74.      * @return {@code true} if the string is empty and null and whitespace\n75.      */\n76. >     public static boolean isBlank(final CharSequence cs) {\n77.         int strLen;\n78.         if (cs == null || (strLen = cs.length()) == 0) {\n"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 79, "column_number": -1, "description": "Taking false branch", "snippet": "76.     public static boolean isBlank(final CharSequence cs) {\n77.         int strLen;\n78. >         if (cs == null || (strLen = cs.length()) == 0) {\n79.             return true;\n80.         }\n"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 80, "column_number": -1, "description": "", "snippet": "77.         int strLen;\n78.         if (cs == null || (strLen = cs.length()) == 0) {\n79. >             return true;\n80.         }\n81.         for (int i = 0; i < strLen; i++) {\n"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 87, "column_number": -1, "description": "return from a call to boolean StringUtils.isBlank(CharSequence)", "snippet": "84.             }\n85.         }\n86. >         return true;\n87.     }\n88.     \n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedStoragePersistServiceImpl.java", "line_number": 1784, "column_number": -1, "description": "Taking true branch", "snippet": "1781.     @Override\n1782.     public void removeConfigInfoByIdsAtomic(final String ids) {\n1783. >         if (StringUtils.isBlank(ids)) {\n1784.             return;\n1785.         }\n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedStoragePersistServiceImpl.java", "line_number": 1785, "column_number": -1, "description": "", "snippet": "1782.     public void removeConfigInfoByIdsAtomic(final String ids) {\n1783.         if (StringUtils.isBlank(ids)) {\n1784. >             return;\n1785.         }\n1786.         List<Long> paramList = new ArrayList<>();\n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedStoragePersistServiceImpl.java", "line_number": 1798, "column_number": -1, "description": "return from a call to void EmbeddedStoragePersistServiceImpl.removeConfigInfoByIdsAtomic(String)", "snippet": "1795.         MapperResult result = configInfoMapper.removeConfigInfoByIdsAtomic(context);\n1796.         EmbeddedStorageContextHolder.addSqlContext(result.getSql(), result.getParamList());\n1797. >     }\n1798.     \n1799.     @Override\n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedStoragePersistServiceImpl.java", "line_number": 661, "column_number": -1, "description": "", "snippet": "658.             if (CollectionUtils.isNotEmpty(configInfoList)) {\n659.                 removeConfigInfoByIdsAtomic(idsStr);\n660. >                 for (ConfigInfo configInfo : configInfoList) {\n661.                     removeTagByIdAtomic(configInfo.getId());\n662.                     insertConfigHistoryAtomic(configInfo.getId(), configInfo, srcIp, srcUser, time, \"D\");\n"}]}, {"url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalStoragePersistServiceImpl.java", "rawCode": "/*\n * Copyright 1999-2018 Alibaba Group Holding Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.alibaba.nacos.config.server.service.repository.extrnal;\n\nimport com.alibaba.nacos.api.exception.NacosException;\nimport com.alibaba.nacos.common.utils.MD5Utils;\nimport com.alibaba.nacos.common.utils.Pair;\nimport com.alibaba.nacos.common.utils.StringUtils;\nimport com.alibaba.nacos.config.server.constant.Constants;\nimport com.alibaba.nacos.config.server.enums.FileTypeEnum;\nimport com.alibaba.nacos.config.server.model.ConfigAdvanceInfo;\nimport com.alibaba.nacos.config.server.model.ConfigAllInfo;\nimport com.alibaba.nacos.config.server.model.ConfigHistoryInfo;\nimport com.alibaba.nacos.config.server.model.ConfigInfo;\nimport com.alibaba.nacos.config.server.model.ConfigInfoAggr;\nimport com.alibaba.nacos.config.server.model.ConfigInfoBase;\nimport com.alibaba.nacos.config.server.model.ConfigInfoBetaWrapper;\nimport com.alibaba.nacos.config.server.model.ConfigInfoChanged;\nimport com.alibaba.nacos.config.server.model.ConfigInfoTagWrapper;\nimport com.alibaba.nacos.config.server.model.ConfigInfoWrapper;\nimport com.alibaba.nacos.config.server.model.ConfigKey;\nimport com.alibaba.nacos.config.server.model.SameConfigPolicy;\nimport com.alibaba.nacos.config.server.service.repository.PersistService;\nimport com.alibaba.nacos.config.server.utils.LogUtil;\nimport com.alibaba.nacos.config.server.utils.ParamUtils;\nimport com.alibaba.nacos.core.namespace.model.TenantInfo;\nimport com.alibaba.nacos.persistence.configuration.condition.ConditionOnExternalStorage;\nimport com.alibaba.nacos.persistence.datasource.DataSourceService;\nimport com.alibaba.nacos.persistence.datasource.DynamicDataSource;\nimport com.alibaba.nacos.persistence.model.Page;\nimport com.alibaba.nacos.persistence.repository.PaginationHelper;\nimport com.alibaba.nacos.persistence.repository.extrnal.ExternalStoragePaginationHelperImpl;\nimport com.alibaba.nacos.plugin.datasource.MapperManager;\nimport com.alibaba.nacos.plugin.datasource.constants.CommonConstant;\nimport com.alibaba.nacos.plugin.datasource.constants.FieldConstant;\nimport com.alibaba.nacos.plugin.datasource.constants.TableConstant;\nimport com.alibaba.nacos.plugin.datasource.mapper.ConfigInfoAggrMapper;\nimport com.alibaba.nacos.plugin.datasource.mapper.ConfigInfoBetaMapper;\nimport com.alibaba.nacos.plugin.datasource.mapper.ConfigInfoMapper;\nimport com.alibaba.nacos.plugin.datasource.mapper.ConfigInfoTagMapper;\nimport com.alibaba.nacos.plugin.datasource.mapper.ConfigTagsRelationMapper;\nimport com.alibaba.nacos.plugin.datasource.mapper.HistoryConfigInfoMapper;\nimport com.alibaba.nacos.plugin.datasource.mapper.TenantInfoMapper;\nimport com.alibaba.nacos.plugin.datasource.model.MapperContext;\nimport com.alibaba.nacos.plugin.datasource.model.MapperResult;\nimport com.alibaba.nacos.plugin.encryption.handler.EncryptionHandler;\nimport com.alibaba.nacos.sys.env.EnvUtil;\nimport org.apache.commons.collections.CollectionUtils;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.dao.DataAccessException;\nimport org.springframework.dao.DataIntegrityViolationException;\nimport org.springframework.dao.EmptyResultDataAccessException;\nimport org.springframework.dao.IncorrectResultSizeDataAccessException;\nimport org.springframework.jdbc.CannotGetJdbcConnectionException;\nimport org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.jdbc.core.PreparedStatementCreator;\nimport org.springframework.jdbc.support.GeneratedKeyHolder;\nimport org.springframework.jdbc.support.KeyHolder;\nimport org.springframework.stereotype.Component;\nimport org.springframework.transaction.TransactionException;\nimport org.springframework.transaction.TransactionStatus;\nimport org.springframework.transaction.TransactionSystemException;\nimport org.springframework.transaction.support.TransactionCallback;\nimport org.springframework.transaction.support.TransactionTemplate;\n\nimport javax.annotation.PostConstruct;\nimport java.io.IOException;\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.SQLException;\nimport java.sql.Timestamp;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Objects;\n\nimport static com.alibaba.nacos.config.server.service.repository.ConfigRowMapperInjector.CONFIG_ADVANCE_INFO_ROW_MAPPER;\nimport static com.alibaba.nacos.config.server.service.repository.ConfigRowMapperInjector.CONFIG_ALL_INFO_ROW_MAPPER;\nimport static com.alibaba.nacos.config.server.service.repository.ConfigRowMapperInjector.CONFIG_INFO_AGGR_ROW_MAPPER;\nimport static com.alibaba.nacos.config.server.service.repository.ConfigRowMapperInjector.CONFIG_INFO_BASE_ROW_MAPPER;\nimport static com.alibaba.nacos.config.server.service.repository.ConfigRowMapperInjector.CONFIG_INFO_BETA_WRAPPER_ROW_MAPPER;\nimport static com.alibaba.nacos.config.server.service.repository.ConfigRowMapperInjector.CONFIG_INFO_CHANGED_ROW_MAPPER;\nimport static com.alibaba.nacos.config.server.service.repository.ConfigRowMapperInjector.CONFIG_INFO_ROW_MAPPER;\nimport static com.alibaba.nacos.config.server.service.repository.ConfigRowMapperInjector.CONFIG_INFO_TAG_WRAPPER_ROW_MAPPER;\nimport static com.alibaba.nacos.config.server.service.repository.ConfigRowMapperInjector.CONFIG_INFO_WRAPPER_ROW_MAPPER;\nimport static com.alibaba.nacos.config.server.service.repository.ConfigRowMapperInjector.CONFIG_KEY_ROW_MAPPER;\nimport static com.alibaba.nacos.config.server.service.repository.ConfigRowMapperInjector.HISTORY_DETAIL_ROW_MAPPER;\nimport static com.alibaba.nacos.config.server.service.repository.ConfigRowMapperInjector.HISTORY_LIST_ROW_MAPPER;\nimport static com.alibaba.nacos.core.namespace.repository.NamespaceRowMapperInjector.TENANT_INFO_ROW_MAPPER;\n\n/**\n * External Storage Persist Service.\n *\n * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n * @author klw\n */\n@SuppressWarnings(value = {\"PMD.MethodReturnWrapperTypeRule\", \"checkstyle:linelength\"})\n@Conditional(value = ConditionOnExternalStorage.class)\n@Component\n@Deprecated\npublic class ExternalStoragePersistServiceImpl implements PersistService {\n    \n    private DataSourceService dataSourceService;\n    \n    private static final String PATTERN_STR = \"*\";\n    \n    private static final int QUERY_LIMIT_SIZE = 50;\n    \n    protected JdbcTemplate jt;\n    \n    protected TransactionTemplate tjt;\n    \n    private MapperManager mapperManager;\n    \n    private static final String DATA_ID = \"dataId\";\n    \n    private static final String GROUP = \"group\";\n    \n    private static final String APP_NAME = \"appName\";\n    \n    private static final String CONTENT = \"content\";\n    \n    private static final String TENANT = \"tenant_id\";\n    \n    /**\n     * constant variables.\n     */\n    public static final String SPOT = \".\";\n    \n    /**\n     * init datasource.\n     */\n    @PostConstruct\n    public void init() {\n        dataSourceService = DynamicDataSource.getInstance().getDataSource();\n        \n        jt = getJdbcTemplate();\n        tjt = getTransactionTemplate();\n        Boolean isDataSourceLogEnable = EnvUtil.getProperty(CommonConstant.NACOS_PLUGIN_DATASOURCE_LOG, Boolean.class,\n                false);\n        mapperManager = MapperManager.instance(isDataSourceLogEnable);\n    }\n    \n    public boolean checkMasterWritable() {\n        return dataSourceService.checkMasterWritable();\n    }\n    \n    public void setBasicDataSourceService(DataSourceService dataSourceService) {\n        this.dataSourceService = dataSourceService;\n    }\n    \n    public synchronized void reload() throws IOException {\n        this.dataSourceService.reload();\n    }\n    \n    /**\n     * For unit testing.\n     */\n    public JdbcTemplate getJdbcTemplate() {\n        return this.dataSourceService.getJdbcTemplate();\n    }\n    \n    public TransactionTemplate getTransactionTemplate() {\n        return this.dataSourceService.getTransactionTemplate();\n    }\n    \n    @SuppressWarnings(\"checkstyle:AbbreviationAsWordInName\")\n    public String getCurrentDBUrl() {\n        return this.dataSourceService.getCurrentDbUrl();\n    }\n    \n    @Override\n    public <E> PaginationHelper<E> createPaginationHelper() {\n        return new ExternalStoragePaginationHelperImpl<>(jt);\n    }\n    \n    // ----------------------- config_info table insert update delete\n    \n    @Override\n    public void addConfigInfo(final String srcIp, final String srcUser, final ConfigInfo configInfo,\n            final Timestamp time, final Map<String, Object> configAdvanceInfo, final boolean notify) {\n        tjt.execute(status -> {\n            try {\n                long configId = addConfigInfoAtomic(-1, srcIp, srcUser, configInfo, time, configAdvanceInfo);\n                String configTags = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"config_tags\");\n                addConfigTagsRelation(configId, configTags, configInfo.getDataId(), configInfo.getGroup(),\n                        configInfo.getTenant());\n                \n                insertConfigHistoryAtomic(0, configInfo, srcIp, srcUser, time, \"I\");\n            } catch (CannotGetJdbcConnectionException e) {\n                LogUtil.FATAL_LOG.error(\"[db-error] \" + e.toString(), e);\n                throw e;\n            }\n            return Boolean.TRUE;\n        });\n    }\n    \n    @Override\n    public void addConfigInfo4Beta(ConfigInfo configInfo, String betaIps, String srcIp, String srcUser, Timestamp time,\n            boolean notify) {\n        String appNameTmp = StringUtils.isBlank(configInfo.getAppName()) ? StringUtils.EMPTY : configInfo.getAppName();\n        String tenantTmp = StringUtils.isBlank(configInfo.getTenant()) ? StringUtils.EMPTY : configInfo.getTenant();\n        String md5 = MD5Utils.md5Hex(configInfo.getContent(), Constants.ENCODE);\n        String encryptedDataKey = StringUtils.isBlank(configInfo.getEncryptedDataKey()) ? StringUtils.EMPTY\n                : configInfo.getEncryptedDataKey();\n        try {\n            ConfigInfoBetaMapper configInfoBetaMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                    TableConstant.CONFIG_INFO_BETA);\n            jt.update(configInfoBetaMapper.insert(\n                            Arrays.asList(\"data_id\", \"group_id\", \"tenant_id\", \"app_name\", \"content\", \"md5\", \"beta_ips\",\n                                    \"src_ip\", \"src_user\", \"gmt_create\", \"gmt_modified\", \"encrypted_data_key\")),\n                    configInfo.getDataId(), configInfo.getGroup(), tenantTmp, appNameTmp, configInfo.getContent(), md5,\n                    betaIps, srcIp, srcUser, time, time, encryptedDataKey);\n        } catch (CannotGetJdbcConnectionException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e.toString(), e);\n            throw e;\n        }\n    }\n    \n    @Override\n    public void addConfigInfo4Tag(ConfigInfo configInfo, String tag, String srcIp, String srcUser, Timestamp time,\n            boolean notify) {\n        String appNameTmp = StringUtils.isBlank(configInfo.getAppName()) ? StringUtils.EMPTY : configInfo.getAppName();\n        String tenantTmp = StringUtils.isBlank(configInfo.getTenant()) ? StringUtils.EMPTY : configInfo.getTenant();\n        String tagTmp = StringUtils.isBlank(tag) ? StringUtils.EMPTY : tag.trim();\n        String md5 = MD5Utils.md5Hex(configInfo.getContent(), Constants.ENCODE);\n        try {\n            ConfigInfoTagMapper configInfoTagMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                    TableConstant.CONFIG_INFO_TAG);\n            jt.update(configInfoTagMapper.insert(\n                            Arrays.asList(\"data_id\", \"group_id\", \"tenant_id\", \"tag_id\", \"app_name\", \"content\", \"md5\", \"src_ip\",\n                                    \"src_user\", \"gmt_create\", \"gmt_modified\")), configInfo.getDataId(), configInfo.getGroup(),\n                    tenantTmp, tagTmp, appNameTmp, configInfo.getContent(), md5, srcIp, srcUser, time, time);\n        } catch (CannotGetJdbcConnectionException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e.toString(), e);\n            throw e;\n        }\n    }\n    \n    @Override\n    public void updateConfigInfo(final ConfigInfo configInfo, final String srcIp, final String srcUser,\n            final Timestamp time, final Map<String, Object> configAdvanceInfo, final boolean notify) {\n        tjt.execute(status -> {\n            try {\n                ConfigInfo oldConfigInfo = findConfigInfo(configInfo.getDataId(), configInfo.getGroup(),\n                        configInfo.getTenant());\n                String appNameTmp = oldConfigInfo.getAppName();\n                /*\n                 If the appName passed by the user is not empty, use the persistent user's appName,\n                 otherwise use db; when emptying appName, you need to pass an empty string\n                 */\n                if (configInfo.getAppName() == null) {\n                    configInfo.setAppName(appNameTmp);\n                }\n                updateConfigInfoAtomic(configInfo, srcIp, srcUser, time, configAdvanceInfo);\n                String configTags = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"config_tags\");\n                if (configTags != null) {\n                    // delete all tags and then recreate\n                    removeTagByIdAtomic(oldConfigInfo.getId());\n                    addConfigTagsRelation(oldConfigInfo.getId(), configTags, configInfo.getDataId(),\n                            configInfo.getGroup(), configInfo.getTenant());\n                }\n                insertConfigHistoryAtomic(oldConfigInfo.getId(), oldConfigInfo, srcIp, srcUser, time, \"U\");\n            } catch (CannotGetJdbcConnectionException e) {\n                LogUtil.FATAL_LOG.error(\"[db-error] \" + e.toString(), e);\n                throw e;\n            }\n            return Boolean.TRUE;\n        });\n    }\n    \n    @Override\n    public boolean updateConfigInfoCas(final ConfigInfo configInfo, final String srcIp, final String srcUser,\n            final Timestamp time, final Map<String, Object> configAdvanceInfo, final boolean notify) {\n        return tjt.execute(status -> {\n            try {\n                ConfigInfo oldConfigInfo = findConfigInfo(configInfo.getDataId(), configInfo.getGroup(),\n                        configInfo.getTenant());\n                String appNameTmp = oldConfigInfo.getAppName();\n                /*\n                 If the appName passed by the user is not empty, use the persistent user's appName,\n                 otherwise use db; when emptying appName, you need to pass an empty string\n                 */\n                if (configInfo.getAppName() == null) {\n                    configInfo.setAppName(appNameTmp);\n                }\n                int rows = updateConfigInfoAtomicCas(configInfo, srcIp, srcUser, time, configAdvanceInfo);\n                if (rows < 1) {\n                    return Boolean.FALSE;\n                }\n                String configTags = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"config_tags\");\n                if (configTags != null) {\n                    // delete all tags and then recreate\n                    removeTagByIdAtomic(oldConfigInfo.getId());\n                    addConfigTagsRelation(oldConfigInfo.getId(), configTags, configInfo.getDataId(),\n                            configInfo.getGroup(), configInfo.getTenant());\n                }\n                insertConfigHistoryAtomic(oldConfigInfo.getId(), oldConfigInfo, srcIp, srcUser, time, \"U\");\n            } catch (CannotGetJdbcConnectionException e) {\n                LogUtil.FATAL_LOG.error(\"[db-error] \" + e.toString(), e);\n                throw e;\n            }\n            return Boolean.TRUE;\n        });\n    }\n    \n    @Override\n    public void updateConfigInfo4Beta(ConfigInfo configInfo, String betaIps, String srcIp, String srcUser,\n            Timestamp time, boolean notify) {\n        String appNameTmp = StringUtils.isBlank(configInfo.getAppName()) ? StringUtils.EMPTY : configInfo.getAppName();\n        String tenantTmp = StringUtils.isBlank(configInfo.getTenant()) ? StringUtils.EMPTY : configInfo.getTenant();\n        String md5 = MD5Utils.md5Hex(configInfo.getContent(), Constants.ENCODE);\n        String encryptedDataKey = StringUtils.isBlank(configInfo.getEncryptedDataKey()) ? StringUtils.EMPTY\n                : configInfo.getEncryptedDataKey();\n        try {\n            ConfigInfoBetaMapper configInfoBetaMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                    TableConstant.CONFIG_INFO_BETA);\n            jt.update(configInfoBetaMapper.update(\n                            Arrays.asList(\"content\", \"md5\", \"beta_ips\", \"src_ip\", \"src_user\", \"gmt_modified\", \"app_name\",\n                                    \"encrypted_data_key\"), Arrays.asList(\"data_id\", \"group_id\", \"tenant_id\")),\n                    configInfo.getContent(), md5, betaIps, srcIp, srcUser, time, appNameTmp, encryptedDataKey,\n                    configInfo.getDataId(), configInfo.getGroup(), tenantTmp);\n        } catch (CannotGetJdbcConnectionException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e.toString(), e);\n            throw e;\n        }\n    }\n    \n    @Override\n    public boolean updateConfigInfo4BetaCas(ConfigInfo configInfo, String betaIps, String srcIp, String srcUser,\n            Timestamp time, boolean notify) {\n        String appNameTmp = StringUtils.isBlank(configInfo.getAppName()) ? StringUtils.EMPTY : configInfo.getAppName();\n        String tenantTmp = StringUtils.isBlank(configInfo.getTenant()) ? StringUtils.EMPTY : configInfo.getTenant();\n        String md5 = MD5Utils.md5Hex(configInfo.getContent(), Constants.ENCODE);\n        try {\n            ConfigInfoBetaMapper configInfoBetaMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                    TableConstant.CONFIG_INFO_BETA);\n            MapperContext context = new MapperContext();\n            context.putUpdateParameter(FieldConstant.CONTENT, configInfo.getContent());\n            context.putUpdateParameter(FieldConstant.MD5, md5);\n            context.putUpdateParameter(FieldConstant.BETA_IPS, betaIps);\n            context.putUpdateParameter(FieldConstant.SRC_IP, srcIp);\n            context.putUpdateParameter(FieldConstant.SRC_USER, srcUser);\n            context.putUpdateParameter(FieldConstant.GMT_MODIFIED, time);\n            context.putUpdateParameter(FieldConstant.APP_NAME, appNameTmp);\n            \n            context.putWhereParameter(FieldConstant.DATA_ID, configInfo.getDataId());\n            context.putWhereParameter(FieldConstant.GROUP_ID, configInfo.getGroup());\n            context.putWhereParameter(FieldConstant.TENANT_ID, tenantTmp);\n            context.putWhereParameter(FieldConstant.MD5, configInfo.getMd5());\n            \n            MapperResult mapperResult = configInfoBetaMapper.updateConfigInfo4BetaCas(context);\n            final String sql = mapperResult.getSql();\n            List<Object> paramList = mapperResult.getParamList();\n            final Object[] args = paramList.toArray();\n            \n            return jt.update(sql, args) > 0;\n        } catch (CannotGetJdbcConnectionException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e.toString(), e);\n            throw e;\n        }\n    }\n    \n    @Override\n    public void updateConfigInfo4Tag(ConfigInfo configInfo, String tag, String srcIp, String srcUser, Timestamp time,\n            boolean notify) {\n        String appNameTmp = StringUtils.isBlank(configInfo.getAppName()) ? StringUtils.EMPTY : configInfo.getAppName();\n        String tenantTmp = StringUtils.isBlank(configInfo.getTenant()) ? StringUtils.EMPTY : configInfo.getTenant();\n        String tagTmp = StringUtils.isBlank(tag) ? StringUtils.EMPTY : tag.trim();\n        try {\n            String md5 = MD5Utils.md5Hex(configInfo.getContent(), Constants.ENCODE);\n            ConfigInfoTagMapper configInfoTagMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                    TableConstant.CONFIG_INFO_TAG);\n            jt.update(configInfoTagMapper.update(\n                            Arrays.asList(\"content\", \"md5\", \"src_ip\", \"src_user\", \"gmt_modified\", \"app_name\"),\n                            Arrays.asList(\"data_id\", \"group_id\", \"tenant_id\", \"tag_id\")), configInfo.getContent(), md5, srcIp,\n                    srcUser, time, appNameTmp, configInfo.getDataId(), configInfo.getGroup(), tenantTmp, tagTmp);\n        } catch (CannotGetJdbcConnectionException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e.toString(), e);\n            throw e;\n        }\n    }\n    \n    @Override\n    public boolean updateConfigInfo4TagCas(ConfigInfo configInfo, String tag, String srcIp, String srcUser,\n            Timestamp time, boolean notify) {\n        String appNameTmp = StringUtils.isBlank(configInfo.getAppName()) ? StringUtils.EMPTY : configInfo.getAppName();\n        String tenantTmp = StringUtils.isBlank(configInfo.getTenant()) ? StringUtils.EMPTY : configInfo.getTenant();\n        String tagTmp = StringUtils.isBlank(tag) ? StringUtils.EMPTY : tag.trim();\n        try {\n            String md5 = MD5Utils.md5Hex(configInfo.getContent(), Constants.ENCODE);\n            ConfigInfoTagMapper configInfoTagMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                    TableConstant.CONFIG_INFO_TAG);\n            MapperContext context = new MapperContext();\n            context.putUpdateParameter(FieldConstant.CONTENT, configInfo.getContent());\n            context.putUpdateParameter(FieldConstant.MD5, md5);\n            context.putUpdateParameter(FieldConstant.SRC_IP, srcIp);\n            context.putUpdateParameter(FieldConstant.SRC_USER, srcUser);\n            context.putUpdateParameter(FieldConstant.GMT_MODIFIED, time);\n            context.putUpdateParameter(FieldConstant.APP_NAME, appNameTmp);\n            \n            context.putWhereParameter(FieldConstant.DATA_ID, configInfo.getDataId());\n            context.putWhereParameter(FieldConstant.GROUP_ID, configInfo.getGroup());\n            context.putWhereParameter(FieldConstant.TENANT_ID, tenantTmp);\n            context.putWhereParameter(FieldConstant.TAG_ID, tagTmp);\n            context.putWhereParameter(FieldConstant.MD5, configInfo.getMd5());\n            \n            final MapperResult mapperResult = configInfoTagMapper.updateConfigInfo4TagCas(context);\n            \n            return jt.update(mapperResult.getSql(), mapperResult.getParamList().toArray()) > 0;\n        } catch (CannotGetJdbcConnectionException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e, e);\n            throw e;\n        }\n    }\n    \n    @Override\n    public void insertOrUpdateBeta(final ConfigInfo configInfo, final String betaIps, final String srcIp,\n            final String srcUser, final Timestamp time, final boolean notify) {\n        try {\n            addConfigInfo4Beta(configInfo, betaIps, srcIp, null, time, notify);\n        } catch (DataIntegrityViolationException ive) { // Unique constraint conflict\n            updateConfigInfo4Beta(configInfo, betaIps, srcIp, null, time, notify);\n        }\n    }\n    \n    @Override\n    public boolean insertOrUpdateBetaCas(final ConfigInfo configInfo, final String betaIps, final String srcIp,\n            final String srcUser, final Timestamp time, final boolean notify) {\n        try {\n            addConfigInfo4Beta(configInfo, betaIps, srcIp, null, time, notify);\n            return true;\n        } catch (DataIntegrityViolationException ive) { // Unique constraint conflict\n            return updateConfigInfo4BetaCas(configInfo, betaIps, srcIp, null, time, notify);\n        }\n    }\n    \n    @Override\n    public void insertOrUpdateTag(final ConfigInfo configInfo, final String tag, final String srcIp,\n            final String srcUser, final Timestamp time, final boolean notify) {\n        try {\n            addConfigInfo4Tag(configInfo, tag, srcIp, null, time, notify);\n        } catch (DataIntegrityViolationException ive) { // Unique constraint conflict\n            updateConfigInfo4Tag(configInfo, tag, srcIp, null, time, notify);\n        }\n    }\n    \n    @Override\n    public boolean insertOrUpdateTagCas(final ConfigInfo configInfo, final String tag, final String srcIp,\n            final String srcUser, final Timestamp time, final boolean notify) {\n        try {\n            addConfigInfo4Tag(configInfo, tag, srcIp, null, time, notify);\n            return true;\n        } catch (DataIntegrityViolationException ive) { // Unique constraint conflict\n            return updateConfigInfo4TagCas(configInfo, tag, srcIp, null, time, notify);\n        }\n    }\n    \n    @Override\n    public void updateMd5(String dataId, String group, String tenant, String md5, Timestamp lastTime) {\n        String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n        try {\n            ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                    TableConstant.CONFIG_INFO);\n            jt.update(configInfoMapper.update(Collections.singletonList(\"md5\"),\n                            Arrays.asList(\"data_id\", \"group_id\", \"tenant_id\", \"gmt_modified\")), md5, dataId, group, tenantTmp,\n                    lastTime);\n        } catch (CannotGetJdbcConnectionException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e.toString(), e);\n            throw e;\n        }\n    }\n    \n    @Override\n    public void insertOrUpdate(String srcIp, String srcUser, ConfigInfo configInfo, Timestamp time,\n            Map<String, Object> configAdvanceInfo) {\n        insertOrUpdate(srcIp, srcUser, configInfo, time, configAdvanceInfo, true);\n    }\n    \n    @Override\n    public void insertOrUpdate(String srcIp, String srcUser, ConfigInfo configInfo, Timestamp time,\n            Map<String, Object> configAdvanceInfo, boolean notify) {\n        try {\n            addConfigInfo(srcIp, srcUser, configInfo, time, configAdvanceInfo, notify);\n        } catch (DataIntegrityViolationException ive) { // Unique constraint conflict\n            updateConfigInfo(configInfo, srcIp, srcUser, time, configAdvanceInfo, notify);\n        }\n    }\n    \n    @Override\n    public boolean insertOrUpdateCas(String srcIp, String srcUser, ConfigInfo configInfo, Timestamp time,\n            Map<String, Object> configAdvanceInfo) {\n        return insertOrUpdateCas(srcIp, srcUser, configInfo, time, configAdvanceInfo, true);\n    }\n    \n    @Override\n    public boolean insertOrUpdateCas(String srcIp, String srcUser, ConfigInfo configInfo, Timestamp time,\n            Map<String, Object> configAdvanceInfo, boolean notify) {\n        try {\n            addConfigInfo(srcIp, srcUser, configInfo, time, configAdvanceInfo, notify);\n            return true;\n        } catch (DataIntegrityViolationException ive) { // Unique constraint conflict\n            return updateConfigInfoCas(configInfo, srcIp, srcUser, time, configAdvanceInfo, notify);\n        }\n    }\n    \n    @Override\n    public void removeConfigInfo(final String dataId, final String group, final String tenant, final String srcIp,\n            final String srcUser) {\n        tjt.execute(new TransactionCallback<Boolean>() {\n            final Timestamp time = new Timestamp(System.currentTimeMillis());\n            \n            @Override\n            public Boolean doInTransaction(TransactionStatus status) {\n                try {\n                    ConfigInfo configInfo = findConfigInfo(dataId, group, tenant);\n                    if (configInfo != null) {\n                        removeConfigInfoAtomic(dataId, group, tenant, srcIp, srcUser);\n                        removeTagByIdAtomic(configInfo.getId());\n                        insertConfigHistoryAtomic(configInfo.getId(), configInfo, srcIp, srcUser, time, \"D\");\n                    }\n                } catch (CannotGetJdbcConnectionException e) {\n                    LogUtil.FATAL_LOG.error(\"[db-error] \" + e.toString(), e);\n                    throw e;\n                }\n                return Boolean.TRUE;\n            }\n        });\n    }\n    \n    @Override\n    public List<ConfigInfo> removeConfigInfoByIds(final List<Long> ids, final String srcIp, final String srcUser) {\n        if (CollectionUtils.isEmpty(ids)) {\n            return null;\n        }\n        ids.removeAll(Collections.singleton(null));\n        return tjt.execute(new TransactionCallback<List<ConfigInfo>>() {\n            final Timestamp time = new Timestamp(System.currentTimeMillis());\n            \n            @Override\n            public List<ConfigInfo> doInTransaction(TransactionStatus status) {\n                try {\n                    String idsStr = StringUtils.join(ids, StringUtils.COMMA);\n                    List<ConfigInfo> configInfoList = findConfigInfosByIds(idsStr);\n                    if (!CollectionUtils.isEmpty(configInfoList)) {\n                        removeConfigInfoByIdsAtomic(idsStr);\n                        for (ConfigInfo configInfo : configInfoList) {\n                            removeTagByIdAtomic(configInfo.getId());\n                            insertConfigHistoryAtomic(configInfo.getId(), configInfo, srcIp, srcUser, time, \"D\");\n                        }\n                    }\n                    return configInfoList;\n                } catch (CannotGetJdbcConnectionException e) {\n                    LogUtil.FATAL_LOG.error(\"[db-error] \" + e.toString(), e);\n                    throw e;\n                }\n            }\n        });\n    }\n    \n    @Override\n    public void removeConfigInfo4Beta(final String dataId, final String group, final String tenant) {\n        final String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n        tjt.execute(status -> {\n            try {\n                ConfigInfo configInfo = findConfigInfo4Beta(dataId, group, tenant);\n                if (configInfo != null) {\n                    ConfigInfoBetaMapper configInfoBetaMapper = mapperManager.findMapper(\n                            dataSourceService.getDataSourceType(), TableConstant.CONFIG_INFO_BETA);\n                    jt.update(configInfoBetaMapper.delete(Arrays.asList(\"data_id\", \"group_id\", \"tenant_id\")), dataId,\n                            group, tenantTmp);\n                }\n            } catch (CannotGetJdbcConnectionException e) {\n                LogUtil.FATAL_LOG.error(\"[db-error] \" + e.toString(), e);\n                throw e;\n            }\n            return Boolean.TRUE;\n        });\n    }\n    \n    // ----------------------- config_aggr_info table insert update delete\n    \n    @Override\n    public boolean addAggrConfigInfo(final String dataId, final String group, String tenant, final String datumId,\n            String appName, final String content) {\n        String appNameTmp = StringUtils.isBlank(appName) ? StringUtils.EMPTY : appName;\n        String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n        final Timestamp now = new Timestamp(System.currentTimeMillis());\n        ConfigInfoAggrMapper configInfoAggrMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO_AGGR);\n        String select = configInfoAggrMapper.select(Collections.singletonList(\"content\"),\n                Arrays.asList(\"data_id\", \"group_id\", \"tenant_id\", \"datum_id\"));\n        String insert = configInfoAggrMapper.insert(\n                Arrays.asList(\"data_id\", \"group_id\", \"tenant_id\", \"datum_id\", \"app_name\", \"content\", \"gmt_modified\"));\n        String update = configInfoAggrMapper.update(Arrays.asList(\"content\", \"gmt_modified\"),\n                Arrays.asList(\"data_id\", \"group_id\", \"tenant_id\", \"datum_id\"));\n        \n        try {\n            try {\n                String dbContent = jt.queryForObject(select, new Object[] {dataId, group, tenantTmp, datumId},\n                        String.class);\n                \n                if (dbContent != null && dbContent.equals(content)) {\n                    return true;\n                } else {\n                    return jt.update(update, content, now, dataId, group, tenantTmp, datumId) > 0;\n                }\n            } catch (EmptyResultDataAccessException ex) { // no data, insert\n                return jt.update(insert, dataId, group, tenantTmp, datumId, appNameTmp, content, now) > 0;\n            }\n        } catch (DataAccessException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e.toString(), e);\n            throw e;\n        }\n    }\n    \n    @Override\n    public void removeSingleAggrConfigInfo(final String dataId, final String group, final String tenant,\n            final String datumId) {\n        final String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n        ConfigInfoAggrMapper configInfoAggrMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO_AGGR);\n        String sql = configInfoAggrMapper.delete(Arrays.asList(\"data_id\", \"group_id\", \"tenant_id\", \"datum_id\"));\n        \n        try {\n            this.jt.update(sql, ps -> {\n                int index = 1;\n                ps.setString(index++, dataId);\n                ps.setString(index++, group);\n                ps.setString(index++, tenantTmp);\n                ps.setString(index, datumId);\n            });\n        } catch (CannotGetJdbcConnectionException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e.toString(), e);\n            throw e;\n        }\n    }\n    \n    @Override\n    public void removeAggrConfigInfo(final String dataId, final String group, final String tenant) {\n        final String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n        ConfigInfoAggrMapper configInfoAggrMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO_AGGR);\n        String sql = configInfoAggrMapper.delete(Arrays.asList(\"data_id\", \"group_id\", \"tenant_id\"));\n        \n        try {\n            this.jt.update(sql, ps -> {\n                int index = 1;\n                ps.setString(index++, dataId);\n                ps.setString(index++, group);\n                ps.setString(index, tenantTmp);\n            });\n        } catch (CannotGetJdbcConnectionException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e.toString(), e);\n            throw e;\n        }\n    }\n    \n    @Override\n    public boolean batchRemoveAggr(final String dataId, final String group, final String tenant,\n            final List<String> datumList) {\n        final String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n        ConfigInfoAggrMapper configInfoAggrMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO_AGGR);\n        \n        MapperContext context = new MapperContext();\n        context.putWhereParameter(FieldConstant.DATUM_ID, datumList);\n        context.putWhereParameter(FieldConstant.DATA_ID, dataId);\n        context.putWhereParameter(FieldConstant.GROUP_ID, group);\n        context.putWhereParameter(FieldConstant.TENANT_ID, tenantTmp);\n        \n        MapperResult mapperResult = configInfoAggrMapper.batchRemoveAggr(context);\n        final String sql = mapperResult.getSql();\n        Object[] args = mapperResult.getParamList().toArray();\n        \n        try {\n            jt.update(sql, args);\n        } catch (CannotGetJdbcConnectionException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e.toString(), e);\n            return false;\n        }\n        return true;\n    }\n    \n    @Override\n    public void removeConfigHistory(final Timestamp startTime, final int limitSize) {\n        HistoryConfigInfoMapper historyConfigInfoMapper = mapperManager.findMapper(\n                dataSourceService.getDataSourceType(), TableConstant.HIS_CONFIG_INFO);\n        MapperContext context = new MapperContext();\n        context.putWhereParameter(FieldConstant.GMT_MODIFIED, startTime);\n        context.putWhereParameter(FieldConstant.LIMIT_SIZE, limitSize);\n        MapperResult mapperResult = historyConfigInfoMapper.removeConfigHistory(context);\n        PaginationHelper<Object> paginationHelper = createPaginationHelper();\n        paginationHelper.updateLimit(mapperResult.getSql(), mapperResult.getParamList().toArray());\n    }\n    \n    @Override\n    public int findConfigHistoryCountByTime(final Timestamp startTime) {\n        HistoryConfigInfoMapper historyConfigInfoMapper = mapperManager.findMapper(\n                dataSourceService.getDataSourceType(), TableConstant.HIS_CONFIG_INFO);\n        MapperContext context = new MapperContext();\n        context.putWhereParameter(FieldConstant.START_TIME, startTime);\n        MapperResult sqlFetchRows = historyConfigInfoMapper.findConfigHistoryCountByTime(context);\n        Integer result = jt.queryForObject(sqlFetchRows.getSql(), Integer.class, sqlFetchRows.getParamList().toArray());\n        if (result == null) {\n            throw new IllegalArgumentException(\"configInfoBetaCount error\");\n        }\n        return result.intValue();\n    }\n    \n    @Override\n    public long findConfigMaxId() {\n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        MapperResult mapperResult = configInfoMapper.findConfigMaxId(null);\n        try {\n            return jt.queryForObject(mapperResult.getSql(), Long.class);\n        } catch (NullPointerException e) {\n            return 0;\n        }\n    }\n    \n    @Override\n    public boolean batchPublishAggr(final String dataId, final String group, final String tenant,\n            final Map<String, String> datumMap, final String appName) {\n        try {\n            Boolean isPublishOk = tjt.execute(status -> {\n                for (Map.Entry<String, String> entry : datumMap.entrySet()) {\n                    try {\n                        if (!addAggrConfigInfo(dataId, group, tenant, entry.getKey(), appName, entry.getValue())) {\n                            throw new TransactionSystemException(\"error in addAggrConfigInfo\");\n                        }\n                    } catch (Throwable e) {\n                        throw new TransactionSystemException(\"error in addAggrConfigInfo\");\n                    }\n                }\n                return Boolean.TRUE;\n            });\n            if (isPublishOk == null) {\n                return false;\n            }\n            return isPublishOk;\n        } catch (TransactionException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e.toString(), e);\n            return false;\n        }\n    }\n    \n    @Override\n    public boolean replaceAggr(final String dataId, final String group, final String tenant,\n            final Map<String, String> datumMap, final String appName) {\n        try {\n            ConfigInfoAggrMapper configInfoAggrMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                    TableConstant.CONFIG_INFO_AGGR);\n            Boolean isReplaceOk = tjt.execute(status -> {\n                try {\n                    String appNameTmp = appName == null ? \"\" : appName;\n                    removeAggrConfigInfo(dataId, group, tenant);\n                    String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n                    String sql = configInfoAggrMapper.insert(\n                            Arrays.asList(\"data_id\", \"group_id\", \"tenant_id\", \"datum_id\", \"app_name\", \"content\",\n                                    \"gmt_modified\"));\n                    for (Map.Entry<String, String> datumEntry : datumMap.entrySet()) {\n                        jt.update(sql, dataId, group, tenantTmp, datumEntry.getKey(), appNameTmp, datumEntry.getValue(),\n                                new Timestamp(System.currentTimeMillis()));\n                    }\n                } catch (Throwable e) {\n                    throw new TransactionSystemException(\"error in addAggrConfigInfo\");\n                }\n                return Boolean.TRUE;\n            });\n            if (isReplaceOk == null) {\n                return false;\n            }\n            return isReplaceOk;\n        } catch (TransactionException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e.toString(), e);\n            return false;\n        }\n        \n    }\n    \n    @Deprecated\n    @Override\n    public List<ConfigInfo> findAllDataIdAndGroup() {\n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        MapperResult mapperResult = configInfoMapper.findAllDataIdAndGroup(null);\n        try {\n            return jt.query(mapperResult.getSql(), new Object[] {}, CONFIG_INFO_ROW_MAPPER);\n        } catch (EmptyResultDataAccessException e) {\n            return Collections.emptyList();\n        } catch (CannotGetJdbcConnectionException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e.toString(), e);\n            throw e;\n        } catch (Exception e) {\n            LogUtil.FATAL_LOG.error(\"[db-other-error]\" + e.getMessage(), e);\n            throw new RuntimeException(e);\n        }\n    }\n    \n    @Override\n    public ConfigInfoBetaWrapper findConfigInfo4Beta(final String dataId, final String group, final String tenant) {\n        String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n        try {\n            ConfigInfoBetaMapper configInfoBetaMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                    TableConstant.CONFIG_INFO_BETA);\n            return this.jt.queryForObject(configInfoBetaMapper.select(\n                            Arrays.asList(\"id\", \"data_id\", \"group_id\", \"tenant_id\", \"app_name\", \"content\", \"beta_ips\",\n                                    \"encrypted_data_key\", \"gmt_modified\"), Arrays.asList(\"data_id\", \"group_id\", \"tenant_id\")),\n                    new Object[] {dataId, group, tenantTmp}, CONFIG_INFO_BETA_WRAPPER_ROW_MAPPER);\n        } catch (EmptyResultDataAccessException e) { // Indicates that the data does not exist, returns null.\n            return null;\n        } catch (CannotGetJdbcConnectionException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e.toString(), e);\n            throw e;\n        }\n    }\n    \n    @Override\n    public ConfigInfoTagWrapper findConfigInfo4Tag(final String dataId, final String group, final String tenant,\n            final String tag) {\n        String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n        String tagTmp = StringUtils.isBlank(tag) ? StringUtils.EMPTY : tag.trim();\n        try {\n            ConfigInfoTagMapper configInfoTagMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                    TableConstant.CONFIG_INFO_TAG);\n            return this.jt.queryForObject(configInfoTagMapper.select(\n                            Arrays.asList(\"id\", \"data_id\", \"group_id\", \"tenant_id\", \"tag_id\", \"app_name\", \"content\",\n                                    \"gmt_modified\"), Arrays.asList(\"data_id\", \"group_id\", \"tenant_id\", \"tag_id\")),\n                    new Object[] {dataId, group, tenantTmp, tagTmp}, CONFIG_INFO_TAG_WRAPPER_ROW_MAPPER);\n        } catch (EmptyResultDataAccessException e) { // Indicates that the data does not exist, returns null.\n            return null;\n        } catch (CannotGetJdbcConnectionException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e.toString(), e);\n            throw e;\n        }\n    }\n    \n    @Override\n    public ConfigInfoBase findConfigInfoBase(final String dataId, final String group) {\n        try {\n            ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                    TableConstant.CONFIG_INFO);\n            return this.jt.queryForObject(configInfoMapper.select(Arrays.asList(\"id\", \"data_id\", \"group_id\", \"content\"),\n                            Arrays.asList(\"data_id\", \"group_id\", \"tenant_id\")), new Object[] {dataId, group, StringUtils.EMPTY},\n                    CONFIG_INFO_BASE_ROW_MAPPER);\n        } catch (EmptyResultDataAccessException e) { // Indicates that the data does not exist, returns null.\n            return null;\n        } catch (CannotGetJdbcConnectionException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e.toString(), e);\n            throw e;\n        }\n    }\n    \n    @Override\n    public ConfigInfo findConfigInfo(long id) {\n        try {\n            ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                    TableConstant.CONFIG_INFO);\n            return this.jt.queryForObject(configInfoMapper.select(\n                    Arrays.asList(\"id\", \"data_id\", \"group_id\", \"tenant_id\", \"app_name\", \"content\"),\n                    Collections.singletonList(\"id\")), new Object[] {id}, CONFIG_INFO_ROW_MAPPER);\n        } catch (EmptyResultDataAccessException e) { // Indicates that the data does not exist, returns null.\n            return null;\n        } catch (CannotGetJdbcConnectionException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e.toString(), e);\n            throw e;\n        }\n    }\n    \n    @Override\n    public ConfigInfoWrapper findConfigInfo(final String dataId, final String group, final String tenant) {\n        final String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n        try {\n            ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                    TableConstant.CONFIG_INFO);\n            return this.jt.queryForObject(configInfoMapper.select(\n                            Arrays.asList(\"id\", \"data_id\", \"group_id\", \"tenant_id\", \"app_name\", \"content\", \"md5\", \"type\",\n                                    \"encrypted_data_key\", \"gmt_modified\"), Arrays.asList(\"data_id\", \"group_id\", \"tenant_id\")),\n                    new Object[] {dataId, group, tenantTmp}, CONFIG_INFO_WRAPPER_ROW_MAPPER);\n        } catch (EmptyResultDataAccessException e) { // Indicates that the data does not exist, returns null.\n            return null;\n        } catch (CannotGetJdbcConnectionException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e.toString(), e);\n            throw e;\n        }\n    }\n    \n    @Override\n    public Page<ConfigInfo> findConfigInfo4Page(final int pageNo, final int pageSize, final String dataId,\n            final String group, final String tenant, final Map<String, Object> configAdvanceInfo) {\n        String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n        PaginationHelper<ConfigInfo> helper = createPaginationHelper();\n        final String appName = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"appName\");\n        final String configTags = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"config_tags\");\n        MapperResult sql;\n        MapperResult sqlCount;\n        \n        final MapperContext context = new MapperContext();\n    \n        context.putWhereParameter(FieldConstant.TENANT_ID, tenantTmp);\n        if (StringUtils.isNotBlank(dataId)) {\n            context.putWhereParameter(FieldConstant.DATA_ID, dataId);\n        }\n        if (StringUtils.isNotBlank(group)) {\n            context.putWhereParameter(FieldConstant.GROUP_ID, group);\n        \n        }\n        if (StringUtils.isNotBlank(appName)) {\n            context.putWhereParameter(FieldConstant.APP_NAME, appName);\n        }\n        context.setStartRow((pageNo - 1) * pageSize);\n        context.setPageSize(pageSize);\n        \n        if (StringUtils.isNotBlank(configTags)) {\n            String[] tagArr = configTags.split(\",\");\n            context.putWhereParameter(FieldConstant.TAG_ARR, Arrays.asList(tagArr));\n            ConfigTagsRelationMapper configTagsRelationMapper = mapperManager.findMapper(\n                    dataSourceService.getDataSourceType(), TableConstant.CONFIG_TAGS_RELATION);\n            sqlCount = configTagsRelationMapper.findConfigInfo4PageCountRows(context);\n            sql = configTagsRelationMapper.findConfigInfo4PageFetchRows(context);\n        } else {\n            ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                    TableConstant.CONFIG_INFO);\n            \n            sqlCount = configInfoMapper.findConfigInfo4PageCountRows(context);\n            sql = configInfoMapper.findConfigInfo4PageFetchRows(context);\n        }\n        try {\n            Page<ConfigInfo> page = helper.fetchPageLimit(sqlCount, sql, pageNo, pageSize, CONFIG_INFO_ROW_MAPPER);\n            for (ConfigInfo configInfo : page.getPageItems()) {\n                Pair<String, String> pair = EncryptionHandler.decryptHandler(configInfo.getDataId(),\n                        configInfo.getEncryptedDataKey(), configInfo.getContent());\n                configInfo.setContent(pair.getSecond());\n            }\n            return page;\n        } catch (CannotGetJdbcConnectionException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \", e);\n            throw e;\n        }\n    }\n    \n    @Override\n    public Page<ConfigInfo> findConfigInfoByApp(final int pageNo, final int pageSize, final String tenant,\n            final String appName) {\n        String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n        PaginationHelper<ConfigInfo> helper = createPaginationHelper();\n        try {\n            final int startRow = (pageNo - 1) * pageSize;\n            ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                    TableConstant.CONFIG_INFO);\n            MapperContext context = new MapperContext(startRow, pageSize);\n            context.putWhereParameter(FieldConstant.APP_NAME, appName);\n            context.putWhereParameter(FieldConstant.TENANT_ID, generateLikeArgument(tenantTmp));\n            \n            MapperResult countRows = configInfoMapper.findConfigInfoByAppCountRows(context);\n            MapperResult fetchRows = configInfoMapper.findConfigInfoByAppFetchRows(context);\n            \n            return helper.fetchPageLimit(countRows, fetchRows, pageNo, pageSize, CONFIG_INFO_ROW_MAPPER);\n        } catch (CannotGetJdbcConnectionException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e, e);\n            throw e;\n        }\n    }\n    \n    @Override\n    public Page<ConfigInfoBase> findConfigInfoBaseByGroup(final int pageNo, final int pageSize, final String group) {\n        PaginationHelper<ConfigInfoBase> helper = createPaginationHelper();\n        try {\n            final int startRow = (pageNo - 1) * pageSize;\n            ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                    TableConstant.CONFIG_INFO);\n            \n            MapperContext context = new MapperContext(startRow, pageSize);\n            context.putWhereParameter(FieldConstant.GROUP_ID, group);\n            context.putWhereParameter(FieldConstant.TENANT_ID, StringUtils.EMPTY);\n            MapperResult mapperResult = configInfoMapper.findConfigInfoBaseByGroupFetchRows(context);\n            \n            return helper.fetchPage(configInfoMapper.count(Arrays.asList(\"group_id\", \"tenant_id\")),\n                    mapperResult.getSql(), mapperResult.getParamList().toArray(), pageNo, pageSize,\n                    CONFIG_INFO_BASE_ROW_MAPPER);\n        } catch (CannotGetJdbcConnectionException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e.toString(), e);\n            throw e;\n        }\n    }\n    \n    @Override\n    public int configInfoCount() {\n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        String sql = configInfoMapper.count(null);\n        Integer result = jt.queryForObject(sql, Integer.class);\n        if (result == null) {\n            throw new IllegalArgumentException(\"configInfoCount error\");\n        }\n        return result.intValue();\n    }\n    \n    @Override\n    public int configInfoCount(String tenant) {\n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        MapperContext context = new MapperContext();\n        context.putWhereParameter(FieldConstant.TENANT_ID, tenant);\n        MapperResult mapperResult = configInfoMapper.configInfoLikeTenantCount(context);\n        Integer result = jt.queryForObject(mapperResult.getSql(), mapperResult.getParamList().toArray(), Integer.class);\n        if (result == null) {\n            throw new IllegalArgumentException(\"configInfoCount error\");\n        }\n        return result.intValue();\n    }\n    \n    @Override\n    public int configInfoBetaCount() {\n        ConfigInfoBetaMapper configInfoBetaMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO_BETA);\n        String sql = configInfoBetaMapper.count(null);\n        Integer result = jt.queryForObject(sql, Integer.class);\n        if (result == null) {\n            throw new IllegalArgumentException(\"configInfoBetaCount error\");\n        }\n        return result.intValue();\n    }\n    \n    @Override\n    public int configInfoTagCount() {\n        ConfigInfoTagMapper configInfoTagMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO_TAG);\n        String sql = configInfoTagMapper.count(null);\n        Integer result = jt.queryForObject(sql, Integer.class);\n        if (result == null) {\n            throw new IllegalArgumentException(\"configInfoBetaCount error\");\n        }\n        return result.intValue();\n    }\n    \n    @Override\n    public List<String> getTenantIdList(int page, int pageSize) {\n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        int from = (page - 1) * pageSize;\n        MapperResult mapperResult = configInfoMapper.getTenantIdList(new MapperContext(from, pageSize));\n        return jt.queryForList(mapperResult.getSql(), mapperResult.getParamList().toArray(), String.class);\n    }\n    \n    @Override\n    public List<String> getGroupIdList(int page, int pageSize) {\n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        int from = (page - 1) * pageSize;\n        MapperResult mapperResult = configInfoMapper.getGroupIdList(new MapperContext(from, pageSize));\n        return jt.queryForList(mapperResult.getSql(), mapperResult.getParamList().toArray(), String.class);\n    }\n    \n    @Override\n    public int aggrConfigInfoCount(String dataId, String group, String tenant) {\n        String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n        ConfigInfoAggrMapper configInfoAggrMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO_AGGR);\n        String sql = configInfoAggrMapper.count(Arrays.asList(\"data_id\", \"group_id\", \"tenant_id\"));\n        Integer result = jt.queryForObject(sql, Integer.class, new Object[] {dataId, group, tenantTmp});\n        if (result == null) {\n            throw new IllegalArgumentException(\"aggrConfigInfoCount error\");\n        }\n        return result.intValue();\n    }\n    \n    @Override\n    public int aggrConfigInfoCount(String dataId, String group, String tenant, List<String> datumIds, boolean isIn) {\n        if (datumIds == null || datumIds.isEmpty()) {\n            return 0;\n        }\n        final String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n        ConfigInfoAggrMapper configInfoAggrMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO_AGGR);\n        \n        MapperContext context = new MapperContext();\n        context.putWhereParameter(FieldConstant.DATUM_ID, datumIds);\n        context.putWhereParameter(FieldConstant.IS_IN, true);\n        context.putWhereParameter(FieldConstant.DATA_ID, dataId);\n        context.putWhereParameter(FieldConstant.GROUP_ID, group);\n        context.putWhereParameter(FieldConstant.TENANT_ID, tenantTmp);\n        \n        MapperResult mapperResult = configInfoAggrMapper.aggrConfigInfoCount(context);\n        String sql = mapperResult.getSql();\n        Object[] args = mapperResult.getParamList().toArray();\n        \n        Integer result = jt.queryForObject(sql, Integer.class, args);\n        if (result == null) {\n            throw new IllegalArgumentException(\"aggrConfigInfoCount error\");\n        }\n        return result.intValue();\n    }\n    \n    @Override\n    public Page<ConfigInfo> findAllConfigInfo(final int pageNo, final int pageSize, final String tenant) {\n        String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n        final int startRow = (pageNo - 1) * pageSize;\n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        MapperContext context = new MapperContext(startRow, pageSize);\n        context.putWhereParameter(FieldConstant.TENANT_ID, generateLikeArgument(generateLikeArgument(tenantTmp)));\n        \n        String sqlCountRows = configInfoMapper.count(null);\n        MapperResult sqlFetchRows = configInfoMapper.findAllConfigInfoFetchRows(context);\n        \n        PaginationHelper<ConfigInfo> helper = createPaginationHelper();\n        try {\n            return helper.fetchPageLimit(sqlCountRows, sqlFetchRows.getSql(), sqlFetchRows.getParamList().toArray(),\n                    pageNo, pageSize, CONFIG_INFO_ROW_MAPPER);\n        } catch (CannotGetJdbcConnectionException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e, e);\n            throw e;\n        }\n    }\n    \n    @Override\n    public Page<ConfigKey> findAllConfigKey(final int pageNo, final int pageSize, final String tenant) {\n        String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        int startRow = (pageNo - 1) * pageSize;\n        \n        MapperContext context = new MapperContext(startRow, pageSize);\n        context.putWhereParameter(FieldConstant.TENANT_ID, generateLikeArgument(tenantTmp));\n        final MapperResult mapperResult = configInfoMapper.findAllConfigKey(context);\n        \n        final int totalCount = configInfoCount(tenant);\n        int pageCount = totalCount / pageSize;\n        if (totalCount > pageSize * pageCount) {\n            pageCount++;\n        }\n        \n        if (pageNo > pageCount) {\n            return null;\n        }\n        \n        final Page<ConfigKey> page = new Page<>();\n        page.setPageNumber(pageNo);\n        page.setPagesAvailable(pageCount);\n        page.setTotalCount(totalCount);\n        \n        try {\n            List<ConfigKey> result = jt.query(mapperResult.getSql(), mapperResult.getParamList().toArray(),\n                    CONFIG_KEY_ROW_MAPPER);\n            \n            for (ConfigKey item : result) {\n                page.getPageItems().add(item);\n            }\n            return page;\n        } catch (EmptyResultDataAccessException e) {\n            return page;\n        } catch (CannotGetJdbcConnectionException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e.toString(), e);\n            throw e;\n        }\n    }\n    \n    @Override\n    @Deprecated\n    public Page<ConfigInfoBase> findAllConfigInfoBase(final int pageNo, final int pageSize) {\n        final int startRow = (pageNo - 1) * pageSize;\n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        String sqlCountRows = configInfoMapper.count(null);\n        MapperResult sqlFetchRows = configInfoMapper.findAllConfigInfoBaseFetchRows(\n                new MapperContext(startRow, pageSize));\n        \n        PaginationHelper<ConfigInfoBase> helper = createPaginationHelper();\n        \n        try {\n            return helper.fetchPageLimit(sqlCountRows, sqlFetchRows.getSql(), sqlFetchRows.getParamList().toArray(),\n                    pageNo, pageSize, CONFIG_INFO_BASE_ROW_MAPPER);\n        } catch (CannotGetJdbcConnectionException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e, e);\n            throw e;\n        }\n    }\n    \n    @Override\n    public Page<ConfigInfoWrapper> findAllConfigInfoFragment(final long lastMaxId, final int pageSize) {\n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        MapperContext context = new MapperContext(0, pageSize);\n        context.putWhereParameter(FieldConstant.ID, lastMaxId);\n        MapperResult select = configInfoMapper.findAllConfigInfoFragment(context);\n        PaginationHelper<ConfigInfoWrapper> helper = createPaginationHelper();\n        try {\n            return helper.fetchPageLimit(select.getSql(), select.getParamList().toArray(), 1, pageSize,\n                    CONFIG_INFO_WRAPPER_ROW_MAPPER);\n        } catch (CannotGetJdbcConnectionException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e.toString(), e);\n            throw e;\n        }\n    }\n    \n    @Override\n    public Page<ConfigInfoBetaWrapper> findAllConfigInfoBetaForDumpAll(final int pageNo, final int pageSize) {\n        final int startRow = (pageNo - 1) * pageSize;\n        ConfigInfoBetaMapper configInfoBetaMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO_BETA);\n        String sqlCountRows = configInfoBetaMapper.count(null);\n        MapperContext context = new MapperContext();\n        context.setStartRow(startRow);\n        context.setPageSize(pageSize);\n        \n        MapperResult mapperResult = configInfoBetaMapper.findAllConfigInfoBetaForDumpAllFetchRows(context);\n        \n        String sqlFetchRows = mapperResult.getSql();\n        PaginationHelper<ConfigInfoBetaWrapper> helper = createPaginationHelper();\n        try {\n            return helper.fetchPageLimit(sqlCountRows, sqlFetchRows, new Object[] {}, pageNo, pageSize,\n                    CONFIG_INFO_BETA_WRAPPER_ROW_MAPPER);\n            \n        } catch (CannotGetJdbcConnectionException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e.toString(), e);\n            throw e;\n        }\n    }\n    \n    @Override\n    public Page<ConfigInfoTagWrapper> findAllConfigInfoTagForDumpAll(final int pageNo, final int pageSize) {\n        final int startRow = (pageNo - 1) * pageSize;\n        ConfigInfoTagMapper configInfoTagMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO_TAG);\n        String sqlCountRows = configInfoTagMapper.count(null);\n        MapperResult sqlFetchRows = configInfoTagMapper.findAllConfigInfoTagForDumpAllFetchRows(\n                new MapperContext(startRow, pageSize));\n        \n        PaginationHelper<ConfigInfoTagWrapper> helper = createPaginationHelper();\n        \n        try {\n            return helper.fetchPageLimit(sqlCountRows, sqlFetchRows.getSql(), sqlFetchRows.getParamList().toArray(),\n                    pageNo, pageSize, CONFIG_INFO_TAG_WRAPPER_ROW_MAPPER);\n            \n        } catch (CannotGetJdbcConnectionException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e, e);\n            throw e;\n        }\n    }\n    \n    @Override\n    public Page<ConfigInfo> findConfigInfoLike(final int pageNo, final int pageSize, final ConfigKey[] configKeys,\n            final boolean blacklist) {\n        String sqlCountRows = \"SELECT count(*) FROM config_info WHERE \";\n        String sqlFetchRows = \"SELECT id,data_id,group_id,tenant_id,app_name,content FROM config_info WHERE \";\n        StringBuilder where = new StringBuilder(\" 1=1 \");\n        // Whitelist, please leave the synchronization condition empty, there is no configuration that meets the conditions\n        if (configKeys.length == 0 && blacklist == false) {\n            Page<ConfigInfo> page = new Page<>();\n            page.setTotalCount(0);\n            return page;\n        }\n        PaginationHelper<ConfigInfo> helper = createPaginationHelper();\n        List<String> params = new ArrayList<>();\n        boolean isFirst = true;\n        for (ConfigKey configInfo : configKeys) {\n            String dataId = configInfo.getDataId();\n            String group = configInfo.getGroup();\n            String appName = configInfo.getAppName();\n            \n            if (StringUtils.isBlank(dataId) && StringUtils.isBlank(group) && StringUtils.isBlank(appName)) {\n                break;\n            }\n            \n            if (blacklist) {\n                if (isFirst) {\n                    isFirst = false;\n                    where.append(\" AND \");\n                } else {\n                    where.append(\" AND \");\n                }\n                \n                where.append('(');\n                boolean isFirstSub = true;\n                if (!StringUtils.isBlank(dataId)) {\n                    where.append(\" data_id NOT LIKE ? \");\n                    params.add(generateLikeArgument(dataId));\n                    isFirstSub = false;\n                }\n                if (!StringUtils.isBlank(group)) {\n                    if (!isFirstSub) {\n                        where.append(\" OR \");\n                    }\n                    where.append(\" group_id NOT LIKE ? \");\n                    params.add(generateLikeArgument(group));\n                    isFirstSub = false;\n                }\n                if (!StringUtils.isBlank(appName)) {\n                    if (!isFirstSub) {\n                        where.append(\" OR \");\n                    }\n                    where.append(\" app_name != ? \");\n                    params.add(appName);\n                    isFirstSub = false;\n                }\n                where.append(\") \");\n            } else {\n                if (isFirst) {\n                    isFirst = false;\n                    where.append(\" AND \");\n                } else {\n                    where.append(\" OR \");\n                }\n                where.append('(');\n                boolean isFirstSub = true;\n                if (!StringUtils.isBlank(dataId)) {\n                    where.append(\" data_id LIKE ? \");\n                    params.add(generateLikeArgument(dataId));\n                    isFirstSub = false;\n                }\n                if (!StringUtils.isBlank(group)) {\n                    if (!isFirstSub) {\n                        where.append(\" AND \");\n                    }\n                    where.append(\" group_id LIKE ? \");\n                    params.add(generateLikeArgument(group));\n                    isFirstSub = false;\n                }\n                if (!StringUtils.isBlank(appName)) {\n                    if (!isFirstSub) {\n                        where.append(\" AND \");\n                    }\n                    where.append(\" app_name = ? \");\n                    params.add(appName);\n                    isFirstSub = false;\n                }\n                where.append(\") \");\n            }\n        }\n        \n        try {\n            return helper.fetchPage(sqlCountRows + where.toString(), sqlFetchRows + where.toString(), params.toArray(),\n                    pageNo, pageSize, CONFIG_INFO_ROW_MAPPER);\n        } catch (CannotGetJdbcConnectionException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e.toString(), e);\n            throw e;\n        }\n    }\n    \n    @Override\n    public Page<ConfigInfo> findConfigInfoLike4Page(final int pageNo, final int pageSize, final String dataId,\n            final String group, final String tenant, final Map<String, Object> configAdvanceInfo) {\n        String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n        final String appName = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"appName\");\n        final String content = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"content\");\n        final String configTags = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"config_tags\");\n        PaginationHelper<ConfigInfo> helper = createPaginationHelper();\n        MapperResult sqlCountRows;\n        MapperResult sqlFetchRows;\n    \n        MapperContext context = new MapperContext((pageNo - 1) * pageSize, pageSize);\n        context.putWhereParameter(FieldConstant.TENANT_ID, generateLikeArgument(tenantTmp));\n    \n        if (!StringUtils.isBlank(dataId)) {\n            context.putWhereParameter(FieldConstant.DATA_ID, generateLikeArgument(dataId));\n        }\n        if (!StringUtils.isBlank(group)) {\n            context.putWhereParameter(FieldConstant.GROUP_ID, generateLikeArgument(group));\n        }\n        if (!StringUtils.isBlank(appName)) {\n            context.putWhereParameter(FieldConstant.APP_NAME, appName);\n        }\n        if (!StringUtils.isBlank(content)) {\n            context.putWhereParameter(FieldConstant.CONTENT, generateLikeArgument(content));\n        }\n        \n        if (StringUtils.isNotBlank(configTags)) {\n            String[] tagArr = configTags.split(\",\");\n            context.putWhereParameter(FieldConstant.TAG_ARR, tagArr);\n            ConfigTagsRelationMapper configTagsRelationMapper = mapperManager.findMapper(\n                    dataSourceService.getDataSourceType(), TableConstant.CONFIG_TAGS_RELATION);\n            sqlCountRows = configTagsRelationMapper.findConfigInfoLike4PageCountRows(context);\n            sqlFetchRows = configTagsRelationMapper.findConfigInfoLike4PageFetchRows(context);\n        } else {\n            ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                    TableConstant.CONFIG_INFO);\n            sqlCountRows = configInfoMapper.findConfigInfoLike4PageCountRows(context);\n            sqlFetchRows = configInfoMapper.findConfigInfoLike4PageFetchRows(context);\n        }\n        \n        try {\n            Page<ConfigInfo> page = helper.fetchPageLimit(sqlCountRows, sqlFetchRows, pageNo, pageSize,\n                    CONFIG_INFO_ROW_MAPPER);\n            \n            for (ConfigInfo configInfo : page.getPageItems()) {\n                Pair<String, String> pair = EncryptionHandler.decryptHandler(configInfo.getDataId(),\n                        configInfo.getEncryptedDataKey(), configInfo.getContent());\n                configInfo.setContent(pair.getSecond());\n            }\n            return page;\n        } catch (CannotGetJdbcConnectionException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e, e);\n            throw e;\n        }\n    }\n    \n    @Override\n    public Page<ConfigInfoBase> findConfigInfoBaseLike(final int pageNo, final int pageSize, final String dataId,\n            final String group, final String content) throws IOException {\n        if (StringUtils.isBlank(dataId) && StringUtils.isBlank(group)) {\n            throw new IOException(\"invalid param\");\n        }\n        MapperContext context = new MapperContext((pageNo - 1) * pageSize, pageSize);\n        \n        if (!StringUtils.isBlank(dataId)) {\n            context.putWhereParameter(FieldConstant.DATA_ID, generateLikeArgument(dataId));\n        }\n        if (!StringUtils.isBlank(group)) {\n            context.putWhereParameter(FieldConstant.GROUP_ID, generateLikeArgument(group));\n        }\n        if (!StringUtils.isBlank(content)) {\n            context.putWhereParameter(FieldConstant.CONTENT, generateLikeArgument(content));\n        }\n        \n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        MapperResult sqlCountRows = configInfoMapper.findConfigInfoBaseLikeCountRows(context);\n        MapperResult sqlFetchRows = configInfoMapper.findConfigInfoBaseLikeFetchRows(context);\n        PaginationHelper<ConfigInfoBase> helper = createPaginationHelper();\n        \n        try {\n            return helper.fetchPageLimit(sqlCountRows, sqlFetchRows, pageNo, pageSize, CONFIG_INFO_BASE_ROW_MAPPER);\n            \n        } catch (CannotGetJdbcConnectionException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e.toString(), e);\n            throw e;\n        }\n    }\n    \n    @Override\n    public ConfigInfoAggr findSingleConfigInfoAggr(String dataId, String group, String tenant, String datumId) {\n        String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n        ConfigInfoAggrMapper configInfoAggrMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO_AGGR);\n        String sql = configInfoAggrMapper.select(\n                Arrays.asList(\"id\", \"data_id\", \"group_id\", \"tenant_id\", \"datum_id\", \"app_name\", \"content\"),\n                Arrays.asList(\"data_id\", \"group_id\", \"tenant_id\", \"datum_id\"));\n        \n        try {\n            return this.jt.queryForObject(sql, new Object[] {dataId, group, tenantTmp, datumId},\n                    CONFIG_INFO_AGGR_ROW_MAPPER);\n        } catch (EmptyResultDataAccessException e) {\n            // EmptyResultDataAccessException, indicating that the data does not exist, returns null\n            return null;\n        } catch (CannotGetJdbcConnectionException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e.toString(), e);\n            throw e;\n        } catch (Exception e) {\n            LogUtil.FATAL_LOG.error(\"[db-other-error]\" + e.getMessage(), e);\n            throw new RuntimeException(e);\n        }\n    }\n    \n    @Override\n    public List<ConfigInfoAggr> findConfigInfoAggr(String dataId, String group, String tenant) {\n        String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n        ConfigInfoAggrMapper configInfoAggrMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO_AGGR);\n        \n        MapperContext context = new MapperContext();\n        context.putWhereParameter(FieldConstant.DATA_ID, dataId);\n        context.putWhereParameter(FieldConstant.GROUP_ID, group);\n        context.putWhereParameter(FieldConstant.TENANT_ID, tenantTmp);\n        \n        MapperResult mapperResult = configInfoAggrMapper.findConfigInfoAggrIsOrdered(context);\n        String sql = mapperResult.getSql();\n        Object[] args = mapperResult.getParamList().toArray();\n        \n        try {\n            return this.jt.query(sql, args, CONFIG_INFO_AGGR_ROW_MAPPER);\n        } catch (CannotGetJdbcConnectionException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e.toString(), e);\n            throw e;\n        } catch (EmptyResultDataAccessException e) {\n            return Collections.emptyList();\n        } catch (Exception e) {\n            LogUtil.FATAL_LOG.error(\"[db-other-error]\" + e.getMessage(), e);\n            throw new RuntimeException(e);\n        }\n    }\n    \n    @Override\n    public Page<ConfigInfoAggr> findConfigInfoAggrByPage(String dataId, String group, String tenant, final int pageNo,\n            final int pageSize) {\n        String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n        ConfigInfoAggrMapper configInfoAggrMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO_AGGR);\n        final int startRow = (pageNo - 1) * pageSize;\n        String sqlCountRows = configInfoAggrMapper.select(Arrays.asList(\"count(*)\"),\n                Arrays.asList(\"data_id\", \"group_id\", \"tenant_id\"));\n        \n        MapperContext context = new MapperContext();\n        context.putWhereParameter(FieldConstant.DATA_ID, dataId);\n        context.putWhereParameter(FieldConstant.GROUP_ID, group);\n        context.putWhereParameter(FieldConstant.TENANT_ID, tenantTmp);\n        context.setStartRow(startRow);\n        context.setPageSize(pageSize);\n        \n        MapperResult mapperResult = configInfoAggrMapper.findConfigInfoAggrByPageFetchRows(context);\n        String sqlFetchRows = mapperResult.getSql();\n        Object[] sqlFetchArgs = mapperResult.getParamList().toArray();\n        \n        PaginationHelper<ConfigInfoAggr> helper = createPaginationHelper();\n        try {\n            return helper.fetchPageLimit(sqlCountRows, new Object[] {dataId, group, tenantTmp}, sqlFetchRows,\n                    sqlFetchArgs, pageNo, pageSize, CONFIG_INFO_AGGR_ROW_MAPPER);\n        } catch (CannotGetJdbcConnectionException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e.toString(), e);\n            throw e;\n        }\n    }\n    \n    @Override\n    public Page<ConfigInfoAggr> findConfigInfoAggrLike(final int pageNo, final int pageSize, ConfigKey[] configKeys,\n            boolean blacklist) {\n        \n        String sqlCountRows = \"SELECT count(*) FROM config_info_aggr WHERE \";\n        String sqlFetchRows = \"SELECT data_id,group_id,tenant_id,datum_id,app_name,content FROM config_info_aggr WHERE \";\n        StringBuilder where = new StringBuilder(\" 1=1 \");\n        // Whitelist, please leave the synchronization condition empty, there is no configuration that meets the conditions\n        if (configKeys.length == 0 && blacklist == false) {\n            Page<ConfigInfoAggr> page = new Page<>();\n            page.setTotalCount(0);\n            return page;\n        }\n        PaginationHelper<ConfigInfoAggr> helper = createPaginationHelper();\n        List<String> params = new ArrayList<>();\n        boolean isFirst = true;\n        \n        for (ConfigKey configInfoAggr : configKeys) {\n            String dataId = configInfoAggr.getDataId();\n            String group = configInfoAggr.getGroup();\n            String appName = configInfoAggr.getAppName();\n            if (StringUtils.isBlank(dataId) && StringUtils.isBlank(group) && StringUtils.isBlank(appName)) {\n                break;\n            }\n            if (blacklist) {\n                if (isFirst) {\n                    isFirst = false;\n                    where.append(\" AND \");\n                } else {\n                    where.append(\" AND \");\n                }\n                \n                where.append('(');\n                boolean isFirstSub = true;\n                if (!StringUtils.isBlank(dataId)) {\n                    where.append(\" data_id NOT LIKE ? \");\n                    params.add(generateLikeArgument(dataId));\n                    isFirstSub = false;\n                }\n                if (!StringUtils.isBlank(group)) {\n                    if (!isFirstSub) {\n                        where.append(\" OR \");\n                    }\n                    where.append(\" group_id NOT LIKE ? \");\n                    params.add(generateLikeArgument(group));\n                    isFirstSub = false;\n                }\n                if (!StringUtils.isBlank(appName)) {\n                    if (!isFirstSub) {\n                        where.append(\" OR \");\n                    }\n                    where.append(\" app_name != ? \");\n                    params.add(appName);\n                    isFirstSub = false;\n                }\n                where.append(\") \");\n            } else {\n                if (isFirst) {\n                    isFirst = false;\n                    where.append(\" AND \");\n                } else {\n                    where.append(\" OR \");\n                }\n                where.append('(');\n                boolean isFirstSub = true;\n                if (!StringUtils.isBlank(dataId)) {\n                    where.append(\" data_id LIKE ? \");\n                    params.add(generateLikeArgument(dataId));\n                    isFirstSub = false;\n                }\n                if (!StringUtils.isBlank(group)) {\n                    if (!isFirstSub) {\n                        where.append(\" AND \");\n                    }\n                    where.append(\" group_id LIKE ? \");\n                    params.add(generateLikeArgument(group));\n                    isFirstSub = false;\n                }\n                if (!StringUtils.isBlank(appName)) {\n                    if (!isFirstSub) {\n                        where.append(\" AND \");\n                    }\n                    where.append(\" app_name = ? \");\n                    params.add(appName);\n                    isFirstSub = false;\n                }\n                where.append(\") \");\n            }\n        }\n        \n        try {\n            Page<ConfigInfoAggr> result = helper.fetchPage(sqlCountRows + where.toString(),\n                    sqlFetchRows + where.toString(), params.toArray(), pageNo, pageSize, CONFIG_INFO_AGGR_ROW_MAPPER);\n            return result;\n        } catch (CannotGetJdbcConnectionException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e.toString(), e);\n            throw e;\n        }\n    }\n    \n    @Override\n    public List<ConfigInfoChanged> findAllAggrGroup() {\n        ConfigInfoAggrMapper configInfoAggrMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO_AGGR);\n        MapperResult mapperResult = configInfoAggrMapper.findAllAggrGroupByDistinct(null);\n        \n        try {\n            return jt.query(mapperResult.getSql(), mapperResult.getParamList().toArray(),\n                    CONFIG_INFO_CHANGED_ROW_MAPPER);\n        } catch (CannotGetJdbcConnectionException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e.toString(), e);\n            throw e;\n        } catch (EmptyResultDataAccessException e) {\n            return null;\n        } catch (Exception e) {\n            LogUtil.FATAL_LOG.error(\"[db-other-error]\" + e.getMessage(), e);\n            throw new RuntimeException(e);\n        }\n    }\n    \n    @Override\n    public List<String> findDatumIdByContent(String dataId, String groupId, String content) {\n        ConfigInfoAggrMapper configInfoAggrMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO_AGGR);\n        String sql = configInfoAggrMapper.select(Collections.singletonList(\"datum_id\"),\n                Arrays.asList(\"data_id\", \"group_id\", \"content\"));\n        \n        try {\n            return this.jt.queryForList(sql, new Object[] {dataId, groupId, content}, String.class);\n        } catch (EmptyResultDataAccessException e) {\n            return null;\n        } catch (IncorrectResultSizeDataAccessException e) {\n            return null;\n        } catch (CannotGetJdbcConnectionException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e.toString(), e);\n            throw e;\n        }\n    }\n    \n    @Override\n    public List<ConfigInfoWrapper> findChangeConfig(final Timestamp startTime, final Timestamp endTime) {\n        try {\n            ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                    TableConstant.CONFIG_INFO);\n            MapperContext context = new MapperContext();\n            context.putWhereParameter(FieldConstant.START_TIME, startTime);\n            context.putWhereParameter(FieldConstant.END_TIME, endTime);\n            \n            MapperResult mapperResult = configInfoMapper.findChangeConfig(context);\n            List<Map<String, Object>> list = jt.queryForList(mapperResult.getSql(),\n                    mapperResult.getParamList().toArray());\n            return convertChangeConfig(list);\n        } catch (DataAccessException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e.toString(), e);\n            throw e;\n        }\n    }\n    \n    @Override\n    public Page<ConfigInfoWrapper> findChangeConfig(final String dataId, final String group, final String tenant,\n            final String appName, final Timestamp startTime, final Timestamp endTime, final int pageNo,\n            final int pageSize, final long lastMaxId) {\n        String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n    \n        MapperContext context = new MapperContext((pageNo - 1) * pageSize, pageSize);\n        if (!StringUtils.isBlank(dataId)) {\n            context.putWhereParameter(FieldConstant.DATA_ID, generateLikeArgument(dataId));\n        }\n        if (!StringUtils.isBlank(group)) {\n            context.putWhereParameter(FieldConstant.GROUP_ID, generateLikeArgument(group));\n        }\n    \n        if (!StringUtils.isBlank(tenantTmp)) {\n            context.putWhereParameter(FieldConstant.TENANT, tenantTmp);\n        }\n    \n        if (!StringUtils.isBlank(appName)) {\n            context.putWhereParameter(FieldConstant.APP_NAME, appName);\n        }\n        if (startTime != null) {\n            context.putWhereParameter(FieldConstant.START_TIME, startTime);\n        }\n        if (endTime != null) {\n            context.putWhereParameter(FieldConstant.END_TIME, endTime);\n        }\n        \n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        MapperResult sqlCountRows = configInfoMapper.findChangeConfigCountRows(context);\n        MapperResult sqlFetchRows = configInfoMapper.findChangeConfigFetchRows(context);\n        \n        PaginationHelper<ConfigInfoWrapper> helper = createPaginationHelper();\n        try {\n            return helper.fetchPageLimit(sqlCountRows, sqlFetchRows, pageNo, pageSize, CONFIG_INFO_WRAPPER_ROW_MAPPER);\n        } catch (CannotGetJdbcConnectionException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e.toString(), e);\n            throw e;\n        }\n    }\n    \n    @Override\n    public List<ConfigInfo> findDeletedConfig(final Timestamp startTime, final Timestamp endTime) {\n        try {\n            HistoryConfigInfoMapper historyConfigInfoMapper = mapperManager.findMapper(\n                    dataSourceService.getDataSourceType(), TableConstant.HIS_CONFIG_INFO);\n            MapperContext context = new MapperContext();\n            context.putWhereParameter(FieldConstant.START_TIME, startTime);\n            context.putWhereParameter(FieldConstant.END_TIME, endTime);\n            MapperResult mapperResult = historyConfigInfoMapper.findDeletedConfig(context);\n            List<Map<String, Object>> list = jt.queryForList(mapperResult.getSql(),\n                    mapperResult.getParamList().toArray());\n            return convertDeletedConfig(list);\n        } catch (DataAccessException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e.toString(), e);\n            throw e;\n        }\n    }\n    \n    @Override\n    public long addConfigInfoAtomic(final long configId, final String srcIp, final String srcUser,\n            final ConfigInfo configInfo, final Timestamp time, Map<String, Object> configAdvanceInfo) {\n        final String appNameTmp =\n                StringUtils.isBlank(configInfo.getAppName()) ? StringUtils.EMPTY : configInfo.getAppName();\n        final String tenantTmp =\n                StringUtils.isBlank(configInfo.getTenant()) ? StringUtils.EMPTY : configInfo.getTenant();\n        \n        final String desc = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"desc\");\n        final String use = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"use\");\n        final String effect = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"effect\");\n        final String type = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"type\");\n        final String schema = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"schema\");\n        final String encryptedDataKey =\n                configInfo.getEncryptedDataKey() == null ? StringUtils.EMPTY : configInfo.getEncryptedDataKey();\n        \n        final String md5Tmp = MD5Utils.md5Hex(configInfo.getContent(), Constants.ENCODE);\n        \n        KeyHolder keyHolder = new GeneratedKeyHolder();\n        \n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        final String sql = configInfoMapper.insert(\n                Arrays.asList(\"data_id\", \"group_id\", \"tenant_id\", \"app_name\", \"content\", \"md5\", \"src_ip\", \"src_user\",\n                        \"gmt_create\", \"gmt_modified\", \"c_desc\", \"c_use\", \"effect\", \"type\", \"c_schema\",\n                        \"encrypted_data_key\"));\n        String[] returnGeneratedKeys = configInfoMapper.getPrimaryKeyGeneratedKeys();\n        try {\n            jt.update(new PreparedStatementCreator() {\n                @Override\n                public PreparedStatement createPreparedStatement(Connection connection) throws SQLException {\n                    PreparedStatement ps = connection.prepareStatement(sql, returnGeneratedKeys);\n                    ps.setString(1, configInfo.getDataId());\n                    ps.setString(2, configInfo.getGroup());\n                    ps.setString(3, tenantTmp);\n                    ps.setString(4, appNameTmp);\n                    ps.setString(5, configInfo.getContent());\n                    ps.setString(6, md5Tmp);\n                    ps.setString(7, srcIp);\n                    ps.setString(8, srcUser);\n                    ps.setTimestamp(9, time);\n                    ps.setTimestamp(10, time);\n                    ps.setString(11, desc);\n                    ps.setString(12, use);\n                    ps.setString(13, effect);\n                    ps.setString(14, type);\n                    ps.setString(15, schema);\n                    ps.setString(16, encryptedDataKey);\n                    return ps;\n                }\n            }, keyHolder);\n            Number nu = keyHolder.getKey();\n            if (nu == null) {\n                throw new IllegalArgumentException(\"insert config_info fail\");\n            }\n            return nu.longValue();\n        } catch (CannotGetJdbcConnectionException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e.toString(), e);\n            throw e;\n        }\n    }\n    \n    @Override\n    public void addConfigTagsRelation(long configId, String configTags, String dataId, String group, String tenant) {\n        if (StringUtils.isNotBlank(configTags)) {\n            String[] tagArr = configTags.split(\",\");\n            for (int i = 0; i < tagArr.length; i++) {\n                addConfigTagRelationAtomic(configId, tagArr[i], dataId, group, tenant);\n            }\n        }\n    }\n    \n    @Override\n    public void addConfigTagRelationAtomic(long configId, String tagName, String dataId, String group, String tenant) {\n        try {\n            ConfigTagsRelationMapper configTagsRelationMapper = mapperManager.findMapper(\n                    dataSourceService.getDataSourceType(), TableConstant.CONFIG_TAGS_RELATION);\n            jt.update(configTagsRelationMapper.insert(\n                            Arrays.asList(\"id\", \"tag_name\", \"tag_type\", \"data_id\", \"group_id\", \"tenant_id\")), configId, tagName,\n                    StringUtils.EMPTY, dataId, group, tenant);\n        } catch (CannotGetJdbcConnectionException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e.toString(), e);\n            throw e;\n        }\n    }\n    \n    @Override\n    public void removeTagByIdAtomic(long id) {\n        try {\n            ConfigTagsRelationMapper configTagsRelationMapper = mapperManager.findMapper(\n                    dataSourceService.getDataSourceType(), TableConstant.CONFIG_TAGS_RELATION);\n            jt.update(configTagsRelationMapper.delete(Arrays.asList(\"id\")), id);\n        } catch (CannotGetJdbcConnectionException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e.toString(), e);\n            throw e;\n        }\n    }\n    \n    @Override\n    public List<String> selectTagByConfig(String dataId, String group, String tenant) {\n        ConfigTagsRelationMapper configTagsRelationMapper = mapperManager.findMapper(\n                dataSourceService.getDataSourceType(), TableConstant.CONFIG_TAGS_RELATION);\n        String sql = configTagsRelationMapper.select(Arrays.asList(\"tag_name\"),\n                Arrays.asList(\"data_id\", \"group_id\", \"tenant_id\"));\n        try {\n            return jt.queryForList(sql, new Object[] {dataId, group, tenant}, String.class);\n        } catch (EmptyResultDataAccessException e) {\n            return null;\n        } catch (IncorrectResultSizeDataAccessException e) {\n            return null;\n        } catch (CannotGetJdbcConnectionException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e.toString(), e);\n            throw e;\n        }\n    }\n    \n    @Override\n    public void removeConfigInfoAtomic(final String dataId, final String group, final String tenant, final String srcIp,\n            final String srcUser) {\n        String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n        try {\n            ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                    TableConstant.CONFIG_INFO);\n            jt.update(configInfoMapper.delete(Arrays.asList(\"data_id\", \"group_id\", \"tenant_id\")), dataId, group,\n                    tenantTmp);\n        } catch (CannotGetJdbcConnectionException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e.toString(), e);\n            throw e;\n        }\n    }\n    \n    @Override\n    public void removeConfigInfoByIdsAtomic(final String ids) {\n        if (StringUtils.isBlank(ids)) {\n            return;\n        }\n        List<Long> paramList = new ArrayList<>();\n        String[] idArr = ids.split(\",\");\n        for (int i = 0; i < idArr.length; i++) {\n            paramList.add(Long.parseLong(idArr[i]));\n        }\n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        MapperContext context = new MapperContext();\n        context.putWhereParameter(FieldConstant.IDS, paramList);\n        MapperResult result = configInfoMapper.removeConfigInfoByIdsAtomic(context);\n        try {\n            jt.update(result.getSql(), result.getParamList().toArray());\n        } catch (CannotGetJdbcConnectionException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e, e);\n            throw e;\n        }\n    }\n    \n    @Override\n    public void removeConfigInfoTag(final String dataId, final String group, final String tenant, final String tag,\n            final String srcIp, final String srcUser) {\n        String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n        String tagTmp = StringUtils.isBlank(tag) ? StringUtils.EMPTY : tag;\n        try {\n            ConfigInfoTagMapper configInfoTagMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                    TableConstant.CONFIG_INFO_TAG);\n            jt.update(configInfoTagMapper.delete(Arrays.asList(\"data_id\", \"group_id\", \"tenant_id\", \"tag_id\")), dataId,\n                    group, tenantTmp, tagTmp);\n        } catch (CannotGetJdbcConnectionException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e.toString(), e);\n            throw e;\n        }\n    }\n    \n    @Override\n    public void updateConfigInfoAtomic(final ConfigInfo configInfo, final String srcIp, final String srcUser,\n            final Timestamp time, Map<String, Object> configAdvanceInfo) {\n        String appNameTmp = StringUtils.isBlank(configInfo.getAppName()) ? StringUtils.EMPTY : configInfo.getAppName();\n        String tenantTmp = StringUtils.isBlank(configInfo.getTenant()) ? StringUtils.EMPTY : configInfo.getTenant();\n        final String md5Tmp = MD5Utils.md5Hex(configInfo.getContent(), Constants.ENCODE);\n        String desc = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"desc\");\n        String use = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"use\");\n        String effect = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"effect\");\n        String type = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"type\");\n        String schema = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"schema\");\n        final String encryptedDataKey =\n                configInfo.getEncryptedDataKey() == null ? StringUtils.EMPTY : configInfo.getEncryptedDataKey();\n        \n        try {\n            ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                    TableConstant.CONFIG_INFO);\n            jt.update(configInfoMapper.update(\n                            Arrays.asList(\"content\", \"md5\", \"src_ip\", \"src_user\", \"gmt_modified\", \"app_name\", \"c_desc\", \"c_use\",\n                                    \"effect\", \"type\", \"c_schema\", \"encrypted_data_key\"),\n                            Arrays.asList(\"data_id\", \"group_id\", \"tenant_id\")), configInfo.getContent(), md5Tmp, srcIp, srcUser,\n                    time, appNameTmp, desc, use, effect, type, schema, encryptedDataKey, configInfo.getDataId(),\n                    configInfo.getGroup(), tenantTmp);\n        } catch (CannotGetJdbcConnectionException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e.toString(), e);\n            throw e;\n        }\n    }\n    \n    private int updateConfigInfoAtomicCas(final ConfigInfo configInfo, final String srcIp, final String srcUser,\n            final Timestamp time, Map<String, Object> configAdvanceInfo) {\n        String appNameTmp = StringUtils.isBlank(configInfo.getAppName()) ? StringUtils.EMPTY : configInfo.getAppName();\n        String tenantTmp = StringUtils.isBlank(configInfo.getTenant()) ? StringUtils.EMPTY : configInfo.getTenant();\n        final String md5Tmp = MD5Utils.md5Hex(configInfo.getContent(), Constants.ENCODE);\n        String desc = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"desc\");\n        String use = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"use\");\n        String effect = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"effect\");\n        String type = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"type\");\n        String schema = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"schema\");\n        \n        try {\n            ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                    TableConstant.CONFIG_INFO);\n            MapperContext context = new MapperContext();\n            context.putUpdateParameter(FieldConstant.CONTENT, configInfo.getContent());\n            context.putUpdateParameter(FieldConstant.MD5, md5Tmp);\n            context.putUpdateParameter(FieldConstant.SRC_IP, srcIp);\n            context.putUpdateParameter(FieldConstant.SRC_USER, srcUser);\n            context.putUpdateParameter(FieldConstant.GMT_MODIFIED, time);\n            context.putUpdateParameter(FieldConstant.APP_NAME, appNameTmp);\n            context.putUpdateParameter(FieldConstant.C_DESC, desc);\n            context.putUpdateParameter(FieldConstant.C_USE, use);\n            context.putUpdateParameter(FieldConstant.EFFECT, effect);\n            context.putUpdateParameter(FieldConstant.TYPE, type);\n            context.putUpdateParameter(FieldConstant.C_SCHEMA, schema);\n            \n            context.putWhereParameter(FieldConstant.DATA_ID, configInfo.getDataId());\n            context.putWhereParameter(FieldConstant.GROUP_ID, configInfo.getGroup());\n            context.putWhereParameter(FieldConstant.TENANT_ID, tenantTmp);\n            context.putWhereParameter(FieldConstant.MD5, configInfo.getMd5());\n            \n            MapperResult mapperResult = configInfoMapper.updateConfigInfoAtomicCas(context);\n            return jt.update(mapperResult.getSql(), mapperResult.getParamList().toArray());\n        } catch (CannotGetJdbcConnectionException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e.toString(), e);\n            throw e;\n        }\n    }\n    \n    @Override\n    public List<ConfigInfo> findConfigInfosByIds(final String ids) {\n        if (StringUtils.isBlank(ids)) {\n            return null;\n        }\n        List<Long> paramList = new ArrayList<>();\n        String[] idArr = ids.split(\",\");\n        for (int i = 0; i < idArr.length; i++) {\n            paramList.add(Long.parseLong(idArr[i]));\n        }\n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        MapperContext context = new MapperContext();\n        context.putWhereParameter(FieldConstant.IDS, paramList);\n        MapperResult mapperResult = configInfoMapper.findConfigInfosByIds(context);\n        \n        try {\n            return this.jt.query(mapperResult.getSql(), mapperResult.getParamList().toArray(), CONFIG_INFO_ROW_MAPPER);\n        } catch (EmptyResultDataAccessException e) { // Indicates that the data does not exist, returns null\n            return null;\n        } catch (CannotGetJdbcConnectionException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e, e);\n            throw e;\n        }\n    }\n    \n    @Override\n    public ConfigAdvanceInfo findConfigAdvanceInfo(final String dataId, final String group, final String tenant) {\n        final String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n        try {\n            List<String> configTagList = this.selectTagByConfig(dataId, group, tenant);\n            ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                    TableConstant.CONFIG_INFO);\n            ConfigAdvanceInfo configAdvance = this.jt.queryForObject(configInfoMapper.select(\n                            Arrays.asList(\"gmt_create\", \"gmt_modified\", \"src_user\", \"src_ip\", \"c_desc\", \"c_use\", \"effect\",\n                                    \"type\", \"c_schema\"), Arrays.asList(\"data_id\", \"group_id\", \"tenant_id\")),\n                    new Object[] {dataId, group, tenantTmp}, CONFIG_ADVANCE_INFO_ROW_MAPPER);\n            if (configTagList != null && !configTagList.isEmpty()) {\n                StringBuilder configTagsTmp = new StringBuilder();\n                for (String configTag : configTagList) {\n                    if (configTagsTmp.length() == 0) {\n                        configTagsTmp.append(configTag);\n                    } else {\n                        configTagsTmp.append(',').append(configTag);\n                    }\n                }\n                configAdvance.setConfigTags(configTagsTmp.toString());\n            }\n            return configAdvance;\n        } catch (EmptyResultDataAccessException e) { // Indicates that the data does not exist, returns null\n            return null;\n        } catch (CannotGetJdbcConnectionException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e.toString(), e);\n            throw e;\n        }\n    }\n    \n    @Override\n    public ConfigAllInfo findConfigAllInfo(final String dataId, final String group, final String tenant) {\n        final String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n        try {\n            List<String> configTagList = this.selectTagByConfig(dataId, group, tenant);\n            ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                    TableConstant.CONFIG_INFO);\n            ConfigAllInfo configAdvance = this.jt.queryForObject(configInfoMapper.select(\n                            Arrays.asList(\"id\", \"data_id\", \"group_id\", \"tenant_id\", \"app_name\", \"content\", \"md5\", \"gmt_create\",\n                                    \"gmt_modified\", \"src_user\", \"src_ip\", \"c_desc\", \"c_use\", \"effect\", \"type\", \"c_schema\",\n                                    \"encrypted_data_key\"), Arrays.asList(\"data_id\", \"group_id\", \"tenant_id\")),\n                    new Object[] {dataId, group, tenantTmp}, CONFIG_ALL_INFO_ROW_MAPPER);\n            if (configTagList != null && !configTagList.isEmpty()) {\n                StringBuilder configTagsTmp = new StringBuilder();\n                for (String configTag : configTagList) {\n                    if (configTagsTmp.length() == 0) {\n                        configTagsTmp.append(configTag);\n                    } else {\n                        configTagsTmp.append(',').append(configTag);\n                    }\n                }\n                configAdvance.setConfigTags(configTagsTmp.toString());\n            }\n            return configAdvance;\n        } catch (EmptyResultDataAccessException e) { // Indicates that the data does not exist, returns null\n            return null;\n        } catch (CannotGetJdbcConnectionException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e.toString(), e);\n            throw e;\n        }\n    }\n    \n    @Override\n    public void insertConfigHistoryAtomic(long id, ConfigInfo configInfo, String srcIp, String srcUser,\n            final Timestamp time, String ops) {\n        String appNameTmp = StringUtils.isBlank(configInfo.getAppName()) ? StringUtils.EMPTY : configInfo.getAppName();\n        String tenantTmp = StringUtils.isBlank(configInfo.getTenant()) ? StringUtils.EMPTY : configInfo.getTenant();\n        final String md5Tmp = MD5Utils.md5Hex(configInfo.getContent(), Constants.ENCODE);\n        String encryptedDataKey = StringUtils.isBlank(configInfo.getEncryptedDataKey()) ? StringUtils.EMPTY\n                : configInfo.getEncryptedDataKey();\n        \n        try {\n            HistoryConfigInfoMapper historyConfigInfoMapper = mapperManager.findMapper(\n                    dataSourceService.getDataSourceType(), TableConstant.HIS_CONFIG_INFO);\n            jt.update(historyConfigInfoMapper.insert(\n                            Arrays.asList(\"id\", \"data_id\", \"group_id\", \"tenant_id\", \"app_name\", \"content\", \"md5\", \"src_ip\",\n                                    \"src_user\", \"gmt_modified\", \"op_type\", \"encrypted_data_key\")), id, configInfo.getDataId(),\n                    configInfo.getGroup(), tenantTmp, appNameTmp, configInfo.getContent(), md5Tmp, srcIp, srcUser, time,\n                    ops, encryptedDataKey);\n        } catch (DataAccessException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e.toString(), e);\n            throw e;\n        }\n    }\n    \n    @Override\n    public Page<ConfigHistoryInfo> findConfigHistory(String dataId, String group, String tenant, int pageNo,\n            int pageSize) {\n        PaginationHelper<ConfigHistoryInfo> helper = createPaginationHelper();\n        String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n        HistoryConfigInfoMapper historyConfigInfoMapper = mapperManager.findMapper(\n                dataSourceService.getDataSourceType(), TableConstant.HIS_CONFIG_INFO);\n        \n        MapperContext context = new MapperContext();\n        context.putWhereParameter(FieldConstant.DATA_ID, dataId);\n        context.putWhereParameter(FieldConstant.GROUP_ID, group);\n        context.putWhereParameter(FieldConstant.TENANT_ID, tenantTmp);\n        String sqlCountRows = historyConfigInfoMapper.count(Arrays.asList(\"data_id\", \"group_id\", \"tenant_id\"));\n        MapperResult sqlFetchRows = historyConfigInfoMapper.findConfigHistoryFetchRows(context);\n        \n        Page<ConfigHistoryInfo> page;\n        try {\n            page = helper.fetchPage(sqlCountRows, sqlFetchRows.getSql(), sqlFetchRows.getParamList().toArray(), pageNo,\n                    pageSize, HISTORY_LIST_ROW_MAPPER);\n        } catch (DataAccessException e) {\n            LogUtil.FATAL_LOG.error(\"[list-config-history] error, dataId:{}, group:{}\", new Object[] {dataId, group},\n                    e);\n            throw e;\n        }\n        return page;\n    }\n    \n    @Override\n    public ConfigHistoryInfo detailConfigHistory(Long nid) {\n        HistoryConfigInfoMapper historyConfigInfoMapper = mapperManager.findMapper(\n                dataSourceService.getDataSourceType(), TableConstant.HIS_CONFIG_INFO);\n        String sqlFetchRows = historyConfigInfoMapper.select(\n                Arrays.asList(\"nid\", \"data_id\", \"group_id\", \"tenant_id\", \"app_name\", \"content\", \"md5\", \"src_user\",\n                        \"src_ip\", \"op_type\", \"gmt_create\", \"gmt_modified\", \"encrypted_data_key\"),\n                Collections.singletonList(\"nid\"));\n        try {\n            ConfigHistoryInfo historyInfo = jt.queryForObject(sqlFetchRows, new Object[] {nid},\n                    HISTORY_DETAIL_ROW_MAPPER);\n            return historyInfo;\n        } catch (DataAccessException e) {\n            LogUtil.FATAL_LOG.error(\"[detail-config-history] error, nid:{}\", new Object[] {nid}, e);\n            throw e;\n        }\n    }\n    \n    @Override\n    public ConfigHistoryInfo detailPreviousConfigHistory(Long id) {\n        HistoryConfigInfoMapper historyConfigInfoMapper = mapperManager.findMapper(\n                dataSourceService.getDataSourceType(), TableConstant.HIS_CONFIG_INFO);\n        MapperContext context = new MapperContext();\n        context.putWhereParameter(FieldConstant.ID, id);\n        MapperResult sqlFetchRows = historyConfigInfoMapper.detailPreviousConfigHistory(context);\n        try {\n            ConfigHistoryInfo historyInfo = jt.queryForObject(sqlFetchRows.getSql(),\n                    sqlFetchRows.getParamList().toArray(), HISTORY_DETAIL_ROW_MAPPER);\n            return historyInfo;\n        } catch (DataAccessException e) {\n            LogUtil.FATAL_LOG.error(\"[detail-previous-config-history] error, id:{}\", new Object[] {id}, e);\n            throw e;\n        }\n    }\n    \n    @Override\n    public void insertTenantInfoAtomic(String kp, String tenantId, String tenantName, String tenantDesc,\n            String createResoure, final long time) {\n        try {\n            TenantInfoMapper tenantInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                    TableConstant.TENANT_INFO);\n            jt.update(tenantInfoMapper.insert(\n                    Arrays.asList(\"kp\", \"tenant_id\", \"tenant_name\", \"tenant_desc\", \"create_source\", \"gmt_create\",\n                            \"gmt_modified\")), kp, tenantId, tenantName, tenantDesc, createResoure, time, time);\n        } catch (DataAccessException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e.toString(), e);\n            throw e;\n        }\n    }\n    \n    @Override\n    public void updateTenantNameAtomic(String kp, String tenantId, String tenantName, String tenantDesc) {\n        try {\n            TenantInfoMapper tenantInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                    TableConstant.TENANT_INFO);\n            jt.update(tenantInfoMapper.update(Arrays.asList(\"tenant_name\", \"tenant_desc\", \"gmt_modified\"),\n                            Arrays.asList(\"kp\", \"tenant_id\")), tenantName, tenantDesc, System.currentTimeMillis(), kp,\n                    tenantId);\n        } catch (DataAccessException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e.toString(), e);\n            throw e;\n        }\n    }\n    \n    @Override\n    public List<TenantInfo> findTenantByKp(String kp) {\n        TenantInfoMapper tenantInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.TENANT_INFO);\n        String sql = tenantInfoMapper.select(Arrays.asList(\"tenant_id\", \"tenant_name\", \"tenant_desc\"),\n                Collections.singletonList(\"kp\"));\n        try {\n            return this.jt.query(sql, new Object[] {kp}, TENANT_INFO_ROW_MAPPER);\n        } catch (CannotGetJdbcConnectionException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e.toString(), e);\n            throw e;\n        } catch (EmptyResultDataAccessException e) {\n            return Collections.emptyList();\n        } catch (Exception e) {\n            LogUtil.FATAL_LOG.error(\"[db-other-error]\" + e.getMessage(), e);\n            throw new RuntimeException(e);\n        }\n    }\n    \n    @Override\n    public TenantInfo findTenantByKp(String kp, String tenantId) {\n        TenantInfoMapper tenantInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.TENANT_INFO);\n        String sql = tenantInfoMapper.select(Arrays.asList(\"tenant_id\", \"tenant_name\", \"tenant_desc\"),\n                Arrays.asList(\"kp\", \"tenant_id\"));\n        try {\n            return jt.queryForObject(sql, new Object[] {kp, tenantId}, TENANT_INFO_ROW_MAPPER);\n        } catch (CannotGetJdbcConnectionException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e.toString(), e);\n            throw e;\n        } catch (EmptyResultDataAccessException e) {\n            return null;\n        } catch (Exception e) {\n            LogUtil.FATAL_LOG.error(\"[db-other-error]\" + e.getMessage(), e);\n            throw new RuntimeException(e);\n        }\n    }\n    \n    @Override\n    public void removeTenantInfoAtomic(final String kp, final String tenantId) {\n        try {\n            TenantInfoMapper tenantInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                    TableConstant.TENANT_INFO);\n            jt.update(tenantInfoMapper.delete(Arrays.asList(\"kp\", \"tenant_id\")), kp, tenantId);\n        } catch (CannotGetJdbcConnectionException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e.toString(), e);\n            throw e;\n        }\n    }\n    \n    @Override\n    public List<ConfigInfo> convertDeletedConfig(List<Map<String, Object>> list) {\n        List<ConfigInfo> configs = new ArrayList<>();\n        for (Map<String, Object> map : list) {\n            String dataId = (String) map.get(\"data_id\");\n            String group = (String) map.get(\"group_id\");\n            String tenant = (String) map.get(\"tenant_id\");\n            ConfigInfo config = new ConfigInfo();\n            config.setDataId(dataId);\n            config.setGroup(group);\n            config.setTenant(tenant);\n            configs.add(config);\n        }\n        return configs;\n    }\n    \n    @Override\n    public List<ConfigInfoWrapper> convertChangeConfig(List<Map<String, Object>> list) {\n        List<ConfigInfoWrapper> configs = new ArrayList<>();\n        for (Map<String, Object> map : list) {\n            String dataId = (String) map.get(\"data_id\");\n            String group = (String) map.get(\"group_id\");\n            String tenant = (String) map.get(\"tenant_id\");\n            String content = (String) map.get(\"content\");\n            long mTime = ((Timestamp) map.get(\"gmt_modified\")).getTime();\n            ConfigInfoWrapper config = new ConfigInfoWrapper();\n            config.setDataId(dataId);\n            config.setGroup(group);\n            config.setTenant(tenant);\n            config.setContent(content);\n            config.setLastModified(mTime);\n            configs.add(config);\n        }\n        return configs;\n    }\n    \n    @Override\n    public List<ConfigInfoWrapper> listAllGroupKeyMd5() {\n        final int pageSize = 10000;\n        int totalCount = configInfoCount();\n        int pageCount = (int) Math.ceil(totalCount * 1.0 / pageSize);\n        List<ConfigInfoWrapper> allConfigInfo = new ArrayList<>();\n        for (int pageNo = 1; pageNo <= pageCount; pageNo++) {\n            List<ConfigInfoWrapper> configInfoList = listGroupKeyMd5ByPage(pageNo, pageSize);\n            allConfigInfo.addAll(configInfoList);\n        }\n        return allConfigInfo;\n    }\n    \n    @Override\n    public List<ConfigInfoWrapper> listGroupKeyMd5ByPage(int pageNo, int pageSize) {\n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        String sqlCountRows = configInfoMapper.count(null);\n        MapperContext context = new MapperContext((pageNo - 1) * pageSize, pageSize);\n        \n        MapperResult sqlFetchRows = configInfoMapper.listGroupKeyMd5ByPageFetchRows(context);\n        PaginationHelper<ConfigInfoWrapper> helper = createPaginationHelper();\n        try {\n            Page<ConfigInfoWrapper> page = helper.fetchPageLimit(sqlCountRows, sqlFetchRows.getSql(),\n                    sqlFetchRows.getParamList().toArray(), pageNo, pageSize, CONFIG_INFO_WRAPPER_ROW_MAPPER);\n            \n            return page.getPageItems();\n        } catch (CannotGetJdbcConnectionException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e, e);\n            throw e;\n        }\n    }\n    \n    @Override\n    public String generateLikeArgument(String s) {\n        String fuzzySearchSign = \"\\\\*\";\n        String sqlLikePercentSign = \"%\";\n        if (s.contains(PATTERN_STR)) {\n            return s.replaceAll(fuzzySearchSign, sqlLikePercentSign);\n        } else {\n            return s;\n        }\n    }\n    \n    @Override\n    public ConfigInfoWrapper queryConfigInfo(final String dataId, final String group, final String tenant) {\n        String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n        try {\n            ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                    TableConstant.CONFIG_INFO);\n            return this.jt.queryForObject(configInfoMapper.select(\n                            Arrays.asList(\"id\", \"data_id\", \"group_id\", \"tenant_id\", \"app_name\", \"content\", \"type\",\n                                    \"gmt_modified\", \"md5\", \"encrypted_data_key\"),\n                            Arrays.asList(\"data_id\", \"group_id\", \"tenant_id\")), new Object[] {dataId, group, tenantTmp},\n                    CONFIG_INFO_WRAPPER_ROW_MAPPER);\n        } catch (EmptyResultDataAccessException e) {\n            return null;\n        } catch (CannotGetJdbcConnectionException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e.toString(), e);\n            throw e;\n        }\n    }\n    \n    @Override\n    public boolean isExistTable(String tableName) {\n        String sql = String.format(\"SELECT 1 FROM %s LIMIT 1\", tableName);\n        try {\n            jt.queryForObject(sql, Integer.class);\n            return true;\n        } catch (Throwable e) {\n            return false;\n        }\n    }\n    \n    @Override\n    public List<ConfigAllInfo> findAllConfigInfo4Export(final String dataId, final String group, final String tenant,\n            final String appName, final List<Long> ids) {\n        String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        MapperContext context = new MapperContext();\n    \n        if (!CollectionUtils.isEmpty(ids)) {\n            context.putWhereParameter(FieldConstant.IDS, ids);\n        } else {\n            context.putWhereParameter(FieldConstant.TENANT_ID, tenantTmp);\n            if (!StringUtils.isBlank(dataId)) {\n                context.putWhereParameter(FieldConstant.DATA_ID, generateLikeArgument(dataId));\n            }\n            if (StringUtils.isNotBlank(group)) {\n                context.putWhereParameter(FieldConstant.GROUP_ID, group);\n            }\n            if (StringUtils.isNotBlank(appName)) {\n                context.putWhereParameter(FieldConstant.APP_NAME, appName);\n            }\n        }\n        \n        MapperResult mapperResult = configInfoMapper.findAllConfigInfo4Export(context);\n        try {\n            return this.jt.query(mapperResult.getSql(), mapperResult.getParamList().toArray(),\n                    CONFIG_ALL_INFO_ROW_MAPPER);\n        } catch (CannotGetJdbcConnectionException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e, e);\n            throw e;\n        }\n    }\n    \n    @Override\n    public Map<String, Object> batchInsertOrUpdate(List<ConfigAllInfo> configInfoList, String srcUser, String srcIp,\n            Map<String, Object> configAdvanceInfo, Timestamp time, boolean notify, SameConfigPolicy policy)\n            throws NacosException {\n        int succCount = 0;\n        int skipCount = 0;\n        List<Map<String, String>> failData = null;\n        List<Map<String, String>> skipData = null;\n        \n        for (int i = 0; i < configInfoList.size(); i++) {\n            ConfigAllInfo configInfo = configInfoList.get(i);\n            try {\n                ParamUtils.checkParam(configInfo.getDataId(), configInfo.getGroup(), \"datumId\",\n                        configInfo.getContent());\n            } catch (NacosException e) {\n                LogUtil.DEFAULT_LOG.error(\"data verification failed\", e);\n                throw e;\n            }\n            ConfigInfo configInfo2Save = new ConfigInfo(configInfo.getDataId(), configInfo.getGroup(),\n                    configInfo.getTenant(), configInfo.getAppName(), configInfo.getContent());\n            configInfo2Save.setEncryptedDataKey(\n                    configInfo.getEncryptedDataKey() == null ? StringUtils.EMPTY : configInfo.getEncryptedDataKey());\n            \n            String type = configInfo.getType();\n            if (StringUtils.isBlank(type)) {\n                // simple judgment of file type based on suffix\n                if (configInfo.getDataId().contains(SPOT)) {\n                    String extName = configInfo.getDataId().substring(configInfo.getDataId().lastIndexOf(SPOT) + 1);\n                    FileTypeEnum fileTypeEnum = FileTypeEnum.getFileTypeEnumByFileExtensionOrFileType(extName);\n                    type = fileTypeEnum.getFileType();\n                } else {\n                    type = FileTypeEnum.getFileTypeEnumByFileExtensionOrFileType(null).getFileType();\n                }\n            }\n            if (configAdvanceInfo == null) {\n                configAdvanceInfo = new HashMap<>(16);\n            }\n            configAdvanceInfo.put(\"type\", type);\n            configAdvanceInfo.put(\"desc\", configInfo.getDesc());\n            try {\n                addConfigInfo(srcIp, srcUser, configInfo2Save, time, configAdvanceInfo, notify);\n                succCount++;\n            } catch (DataIntegrityViolationException ive) {\n                // uniqueness constraint conflict\n                if (SameConfigPolicy.ABORT.equals(policy)) {\n                    failData = new ArrayList<>();\n                    skipData = new ArrayList<>();\n                    Map<String, String> faileditem = new HashMap<>(2);\n                    faileditem.put(\"dataId\", configInfo2Save.getDataId());\n                    faileditem.put(\"group\", configInfo2Save.getGroup());\n                    failData.add(faileditem);\n                    for (int j = (i + 1); j < configInfoList.size(); j++) {\n                        ConfigInfo skipConfigInfo = configInfoList.get(j);\n                        Map<String, String> skipitem = new HashMap<>(2);\n                        skipitem.put(\"dataId\", skipConfigInfo.getDataId());\n                        skipitem.put(\"group\", skipConfigInfo.getGroup());\n                        skipData.add(skipitem);\n                    }\n                    break;\n                } else if (SameConfigPolicy.SKIP.equals(policy)) {\n                    skipCount++;\n                    if (skipData == null) {\n                        skipData = new ArrayList<>();\n                    }\n                    Map<String, String> skipitem = new HashMap<>(2);\n                    skipitem.put(\"dataId\", configInfo2Save.getDataId());\n                    skipitem.put(\"group\", configInfo2Save.getGroup());\n                    skipData.add(skipitem);\n                } else if (SameConfigPolicy.OVERWRITE.equals(policy)) {\n                    succCount++;\n                    updateConfigInfo(configInfo2Save, srcIp, srcUser, time, configAdvanceInfo, notify);\n                }\n            }\n        }\n        Map<String, Object> result = new HashMap<>(4);\n        result.put(\"succCount\", succCount);\n        result.put(\"skipCount\", skipCount);\n        if (failData != null && !failData.isEmpty()) {\n            result.put(\"failData\", failData);\n        }\n        if (skipData != null && !skipData.isEmpty()) {\n            result.put(\"skipData\", skipData);\n        }\n        return result;\n    }\n    \n    @Override\n    public int tenantInfoCountByTenantId(String tenantId) {\n        if (Objects.isNull(tenantId)) {\n            throw new IllegalArgumentException(\"tenantId can not be null\");\n        }\n        TenantInfoMapper tenantInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.TENANT_INFO);\n        String sql = tenantInfoMapper.count(Arrays.asList(\"tenant_id\"));\n        Integer result = this.jt.queryForObject(sql, new String[] {tenantId}, Integer.class);\n        if (result == null) {\n            return 0;\n        }\n        return result.intValue();\n    }\n    \n    @Override\n    public List<ConfigInfoWrapper> queryConfigInfoByNamespace(String tenant) {\n        if (Objects.isNull(tenant)) {\n            throw new IllegalArgumentException(\"tenantId can not be null\");\n        }\n        String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n        try {\n            ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                    TableConstant.CONFIG_INFO);\n            return this.jt.query(configInfoMapper.select(\n                    Arrays.asList(\"data_id\", \"group_id\", \"tenant_id\", \"app_name\", \"type\", \"gmt_modified\"),\n                    Collections.singletonList(\"tenant_id\")), new Object[] {tenantTmp}, CONFIG_INFO_WRAPPER_ROW_MAPPER);\n        } catch (EmptyResultDataAccessException e) { // Indicates that the data does not exist, returns null.\n            return Collections.EMPTY_LIST;\n        } catch (CannotGetJdbcConnectionException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e.toString(), e);\n            throw e;\n        }\n    }\n    \n}\n", "methodName": "com.alibaba.nacos.config.server.service.repository.extrnal.ExternalStoragePersistServiceImpl$2.doInTransaction(org.springframework.transaction.TransactionStatus):java.util.List", "exampleID": 2, "dataset": "infer", "filepath": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalStoragePersistServiceImpl.java", "line": 564, "sink": "configInfoList", "source": "configInfoList", "sourceLine": 561, "qualifier": "$$configInfoList/$ could be null, and is @@dereferenced/@", "steps": [{"line": 1991, "source": "configInfoList", "filepath": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalStoragePersistServiceImpl.java", "methodName": "ExternalStoragePersistServiceImpl.findConfigInfosByIds", "exampleID": 3}], "line_number": 561, "records": [{"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalStoragePersistServiceImpl.java", "line_number": 1991, "column_number": -1, "description": "start of procedure findConfigInfosByIds(...)", "snippet": "    public List<ConfigInfo> findConfigInfosByIds(final String ids) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalStoragePersistServiceImpl.java", "methodName": "findConfigInfosByIds"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalStoragePersistServiceImpl.java", "line_number": 1992, "column_number": -1, "description": "", "snippet": "        if (StringUtils.isBlank(ids)) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalStoragePersistServiceImpl.java", "methodName": "findConfigInfosByIds"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 77, "column_number": -1, "description": "start of procedure isBlank(...)", "snippet": "    public static boolean isBlank(final CharSequence cs) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isBlank"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 79, "column_number": -1, "description": "Taking false branch", "snippet": "        if (cs == null || (strLen = cs.length()) == 0) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isBlank"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 80, "column_number": -1, "description": "", "snippet": "            return true;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isBlank"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 87, "column_number": -1, "description": "return from a call to boolean StringUtils.isBlank(CharSequence)", "snippet": "        return true;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isBlank"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalStoragePersistServiceImpl.java", "line_number": 1992, "column_number": -1, "description": "Taking true branch", "snippet": "        if (StringUtils.isBlank(ids)) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalStoragePersistServiceImpl.java", "methodName": "findConfigInfosByIds"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalStoragePersistServiceImpl.java", "line_number": 1993, "column_number": -1, "description": "", "snippet": "            return null;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalStoragePersistServiceImpl.java", "methodName": "findConfigInfosByIds"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalStoragePersistServiceImpl.java", "line_number": 2012, "column_number": -1, "description": "return from a call to List ExternalStoragePersistServiceImpl.findConfigInfosByIds(String)", "snippet": "            throw e;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalStoragePersistServiceImpl.java", "methodName": "findConfigInfosByIds"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalStoragePersistServiceImpl.java", "line_number": 1883, "column_number": -1, "description": "start of procedure removeConfigInfoByIdsAtomic(...)", "snippet": "    public void removeConfigInfoByIdsAtomic(final String ids) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalStoragePersistServiceImpl.java", "methodName": "removeConfigInfoByIdsAtomic"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalStoragePersistServiceImpl.java", "line_number": 1884, "column_number": -1, "description": "", "snippet": "        if (StringUtils.isBlank(ids)) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalStoragePersistServiceImpl.java", "methodName": "removeConfigInfoByIdsAtomic"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 77, "column_number": -1, "description": "start of procedure isBlank(...)", "snippet": "    public static boolean isBlank(final CharSequence cs) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isBlank"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 79, "column_number": -1, "description": "Taking false branch", "snippet": "        if (cs == null || (strLen = cs.length()) == 0) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isBlank"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 80, "column_number": -1, "description": "", "snippet": "            return true;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isBlank"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 87, "column_number": -1, "description": "return from a call to boolean StringUtils.isBlank(CharSequence)", "snippet": "        return true;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isBlank"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalStoragePersistServiceImpl.java", "line_number": 1884, "column_number": -1, "description": "Taking true branch", "snippet": "        if (StringUtils.isBlank(ids)) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalStoragePersistServiceImpl.java", "methodName": "removeConfigInfoByIdsAtomic"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalStoragePersistServiceImpl.java", "line_number": 1885, "column_number": -1, "description": "", "snippet": "            return;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalStoragePersistServiceImpl.java", "methodName": "removeConfigInfoByIdsAtomic"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalStoragePersistServiceImpl.java", "line_number": 1903, "column_number": -1, "description": "return from a call to void ExternalStoragePersistServiceImpl.removeConfigInfoByIdsAtomic(String)", "snippet": "    }", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalStoragePersistServiceImpl.java", "methodName": "removeConfigInfoByIdsAtomic"}], "combined_records": [{"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalStoragePersistServiceImpl.java", "line_number": 1992, "column_number": -1, "description": "start of procedure findConfigInfosByIds(...)", "snippet": "1988.    @Override\n1989.    public List<ConfigInfo> findConfigInfosByIds(final String ids) {\n1990.>         if (StringUtils.isBlank(ids)) {\n1991.>             return null;\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalStoragePersistServiceImpl.java", "methodName": "findConfigInfosByIds", "line_numbers": [1991, 1992]}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 87, "column_number": -1, "description": "start of procedure isBlank(...)", "snippet": "74.     */\n75.    public static boolean isBlank(final CharSequence cs) {\n76.>         int strLen;\n77.        if (cs == null || (strLen = cs.length()) == 0) {\n78.>             return true;\n79.        }\n80.        for (int i = 0; i < strLen; i++) {\n81.            if (!Character.isWhitespace(cs.charAt(i))) {\n82.                return false;\n83.            }\n84.        }\n85.        return true;\n86.    }\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isBlank", "line_numbers": [77, 79, 80, 87]}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalStoragePersistServiceImpl.java", "line_number": 2012, "column_number": -1, "description": "Taking true branch", "snippet": "1989.    public List<ConfigInfo> findConfigInfosByIds(final String ids) {\n1990.        if (StringUtils.isBlank(ids)) {\n1991.>             return null;\n1992.        }\n1993.        List<Long> paramList = new ArrayList<>();\n1994.        String[] idArr = ids.split(\",\");\n1995.        for (int i = 0; i < idArr.length; i++) {\n1996.            paramList.add(Long.parseLong(idArr[i]));\n1997.        }\n1998.        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n1999.                TableConstant.CONFIG_INFO);\n2000.        MapperContext context = new MapperContext();\n2001.        context.putWhereParameter(FieldConstant.IDS, paramList);\n2002.        MapperResult mapperResult = configInfoMapper.findConfigInfosByIds(context);\n2003.        \n2004.        try {\n2005.            return this.jt.query(mapperResult.getSql(), mapperResult.getParamList().toArray(), CONFIG_INFO_ROW_MAPPER);\n2006.        } catch (EmptyResultDataAccessException e) { // Indicates that the data does not exist, returns null\n2007.            return null;\n2008.        } catch (CannotGetJdbcConnectionException e) {\n2009.            LogUtil.FATAL_LOG.error(\"[db-error] \" + e, e);\n2010.            throw e;\n2011.        }\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalStoragePersistServiceImpl.java", "methodName": "findConfigInfosByIds", "line_numbers": [1992, 1993, 2012]}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalStoragePersistServiceImpl.java", "line_number": 1884, "column_number": -1, "description": "start of procedure removeConfigInfoByIdsAtomic(...)", "snippet": "1880.    @Override\n1881.    public void removeConfigInfoByIdsAtomic(final String ids) {\n1882.>         if (StringUtils.isBlank(ids)) {\n1883.>             return;\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalStoragePersistServiceImpl.java", "methodName": "removeConfigInfoByIdsAtomic", "line_numbers": [1883, 1884]}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 87, "column_number": -1, "description": "start of procedure isBlank(...)", "snippet": "74.     */\n75.    public static boolean isBlank(final CharSequence cs) {\n76.>         int strLen;\n77.        if (cs == null || (strLen = cs.length()) == 0) {\n78.>             return true;\n79.        }\n80.        for (int i = 0; i < strLen; i++) {\n81.            if (!Character.isWhitespace(cs.charAt(i))) {\n82.                return false;\n83.            }\n84.        }\n85.        return true;\n86.    }\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isBlank", "line_numbers": [77, 79, 80, 87]}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalStoragePersistServiceImpl.java", "line_number": 1903, "column_number": -1, "description": "Taking true branch", "snippet": "1881.    public void removeConfigInfoByIdsAtomic(final String ids) {\n1882.        if (StringUtils.isBlank(ids)) {\n1883.>             return;\n1884.        }\n1885.        List<Long> paramList = new ArrayList<>();\n1886.        String[] idArr = ids.split(\",\");\n1887.        for (int i = 0; i < idArr.length; i++) {\n1888.            paramList.add(Long.parseLong(idArr[i]));\n1889.        }\n1890.        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n1891.                TableConstant.CONFIG_INFO);\n1892.        MapperContext context = new MapperContext();\n1893.        context.putWhereParameter(FieldConstant.IDS, paramList);\n1894.        MapperResult result = configInfoMapper.removeConfigInfoByIdsAtomic(context);\n1895.        try {\n1896.            jt.update(result.getSql(), result.getParamList().toArray());\n1897.        } catch (CannotGetJdbcConnectionException e) {\n1898.            LogUtil.FATAL_LOG.error(\"[db-error] \" + e, e);\n1899.            throw e;\n1900.        }\n1901.    }\n1902.>     \n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalStoragePersistServiceImpl.java", "methodName": "removeConfigInfoByIdsAtomic", "line_numbers": [1884, 1885, 1903]}], "infer_explore": [{"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalStoragePersistServiceImpl.java", "line_number": 558, "column_number": -1, "description": "start of procedure doInTransaction(...)", "snippet": "555.             \n556.             @Override\n557. >             public List<ConfigInfo> doInTransaction(TransactionStatus status) {\n558.                 try {\n559.                     String idsStr = StringUtils.join(ids, StringUtils.COMMA);\n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalStoragePersistServiceImpl.java", "line_number": 560, "column_number": -1, "description": "Skipping join(...): empty list of specs", "snippet": "557.             public List<ConfigInfo> doInTransaction(TransactionStatus status) {\n558.                 try {\n559. >                     String idsStr = StringUtils.join(ids, StringUtils.COMMA);\n560.                     List<ConfigInfo> configInfoList = findConfigInfosByIds(idsStr);\n561.                     if (!CollectionUtils.isEmpty(configInfoList)) {\n"}, {"level": 1, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 186, "column_number": -1, "description": "Definition of join(...)", "snippet": "183.      * @return the joined String, {@code null} if null array input\n184.      */\n185. >     public static String join(Collection collection, String separator) {\n186.         if (collection == null) {\n187.             return null;\n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalStoragePersistServiceImpl.java", "line_number": 561, "column_number": -1, "description": "", "snippet": "558.                 try {\n559.                     String idsStr = StringUtils.join(ids, StringUtils.COMMA);\n560. >                     List<ConfigInfo> configInfoList = findConfigInfosByIds(idsStr);\n561.                     if (!CollectionUtils.isEmpty(configInfoList)) {\n562.                         removeConfigInfoByIdsAtomic(idsStr);\n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalStoragePersistServiceImpl.java", "line_number": 1991, "column_number": -1, "description": "start of procedure findConfigInfosByIds(...)", "snippet": "1988.     \n1989.     @Override\n1990. >     public List<ConfigInfo> findConfigInfosByIds(final String ids) {\n1991.         if (StringUtils.isBlank(ids)) {\n1992.             return null;\n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalStoragePersistServiceImpl.java", "line_number": 1992, "column_number": -1, "description": "", "snippet": "1989.     @Override\n1990.     public List<ConfigInfo> findConfigInfosByIds(final String ids) {\n1991. >         if (StringUtils.isBlank(ids)) {\n1992.             return null;\n1993.         }\n"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 77, "column_number": -1, "description": "start of procedure isBlank(...)", "snippet": "74.      * @return {@code true} if the string is empty and null and whitespace\n75.      */\n76. >     public static boolean isBlank(final CharSequence cs) {\n77.         int strLen;\n78.         if (cs == null || (strLen = cs.length()) == 0) {\n"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 79, "column_number": -1, "description": "Taking false branch", "snippet": "76.     public static boolean isBlank(final CharSequence cs) {\n77.         int strLen;\n78. >         if (cs == null || (strLen = cs.length()) == 0) {\n79.             return true;\n80.         }\n"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 80, "column_number": -1, "description": "", "snippet": "77.         int strLen;\n78.         if (cs == null || (strLen = cs.length()) == 0) {\n79. >             return true;\n80.         }\n81.         for (int i = 0; i < strLen; i++) {\n"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 87, "column_number": -1, "description": "return from a call to boolean StringUtils.isBlank(CharSequence)", "snippet": "84.             }\n85.         }\n86. >         return true;\n87.     }\n88.     \n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalStoragePersistServiceImpl.java", "line_number": 1992, "column_number": -1, "description": "Taking true branch", "snippet": "1989.     @Override\n1990.     public List<ConfigInfo> findConfigInfosByIds(final String ids) {\n1991. >         if (StringUtils.isBlank(ids)) {\n1992.             return null;\n1993.         }\n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalStoragePersistServiceImpl.java", "line_number": 1993, "column_number": -1, "description": "", "snippet": "1990.     public List<ConfigInfo> findConfigInfosByIds(final String ids) {\n1991.         if (StringUtils.isBlank(ids)) {\n1992. >             return null;\n1993.         }\n1994.         List<Long> paramList = new ArrayList<>();\n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalStoragePersistServiceImpl.java", "line_number": 2012, "column_number": -1, "description": "return from a call to List ExternalStoragePersistServiceImpl.findConfigInfosByIds(String)", "snippet": "2009.         } catch (CannotGetJdbcConnectionException e) {\n2010.             LogUtil.FATAL_LOG.error(\"[db-error] \" + e, e);\n2011. >             throw e;\n2012.         }\n2013.     }\n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalStoragePersistServiceImpl.java", "line_number": 562, "column_number": -1, "description": "Taking true branch", "snippet": "559.                     String idsStr = StringUtils.join(ids, StringUtils.COMMA);\n560.                     List<ConfigInfo> configInfoList = findConfigInfosByIds(idsStr);\n561. >                     if (!CollectionUtils.isEmpty(configInfoList)) {\n562.                         removeConfigInfoByIdsAtomic(idsStr);\n563.                         for (ConfigInfo configInfo : configInfoList) {\n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalStoragePersistServiceImpl.java", "line_number": 563, "column_number": -1, "description": "", "snippet": "560.                     List<ConfigInfo> configInfoList = findConfigInfosByIds(idsStr);\n561.                     if (!CollectionUtils.isEmpty(configInfoList)) {\n562. >                         removeConfigInfoByIdsAtomic(idsStr);\n563.                         for (ConfigInfo configInfo : configInfoList) {\n564.                             removeTagByIdAtomic(configInfo.getId());\n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalStoragePersistServiceImpl.java", "line_number": 1883, "column_number": -1, "description": "start of procedure removeConfigInfoByIdsAtomic(...)", "snippet": "1880.     \n1881.     @Override\n1882. >     public void removeConfigInfoByIdsAtomic(final String ids) {\n1883.         if (StringUtils.isBlank(ids)) {\n1884.             return;\n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalStoragePersistServiceImpl.java", "line_number": 1884, "column_number": -1, "description": "", "snippet": "1881.     @Override\n1882.     public void removeConfigInfoByIdsAtomic(final String ids) {\n1883. >         if (StringUtils.isBlank(ids)) {\n1884.             return;\n1885.         }\n"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 77, "column_number": -1, "description": "start of procedure isBlank(...)", "snippet": "74.      * @return {@code true} if the string is empty and null and whitespace\n75.      */\n76. >     public static boolean isBlank(final CharSequence cs) {\n77.         int strLen;\n78.         if (cs == null || (strLen = cs.length()) == 0) {\n"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 79, "column_number": -1, "description": "Taking false branch", "snippet": "76.     public static boolean isBlank(final CharSequence cs) {\n77.         int strLen;\n78. >         if (cs == null || (strLen = cs.length()) == 0) {\n79.             return true;\n80.         }\n"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 80, "column_number": -1, "description": "", "snippet": "77.         int strLen;\n78.         if (cs == null || (strLen = cs.length()) == 0) {\n79. >             return true;\n80.         }\n81.         for (int i = 0; i < strLen; i++) {\n"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 87, "column_number": -1, "description": "return from a call to boolean StringUtils.isBlank(CharSequence)", "snippet": "84.             }\n85.         }\n86. >         return true;\n87.     }\n88.     \n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalStoragePersistServiceImpl.java", "line_number": 1884, "column_number": -1, "description": "Taking true branch", "snippet": "1881.     @Override\n1882.     public void removeConfigInfoByIdsAtomic(final String ids) {\n1883. >         if (StringUtils.isBlank(ids)) {\n1884.             return;\n1885.         }\n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalStoragePersistServiceImpl.java", "line_number": 1885, "column_number": -1, "description": "", "snippet": "1882.     public void removeConfigInfoByIdsAtomic(final String ids) {\n1883.         if (StringUtils.isBlank(ids)) {\n1884. >             return;\n1885.         }\n1886.         List<Long> paramList = new ArrayList<>();\n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalStoragePersistServiceImpl.java", "line_number": 1903, "column_number": -1, "description": "return from a call to void ExternalStoragePersistServiceImpl.removeConfigInfoByIdsAtomic(String)", "snippet": "1900.             throw e;\n1901.         }\n1902. >     }\n1903.     \n1904.     @Override\n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalStoragePersistServiceImpl.java", "line_number": 564, "column_number": -1, "description": "", "snippet": "561.                     if (!CollectionUtils.isEmpty(configInfoList)) {\n562.                         removeConfigInfoByIdsAtomic(idsStr);\n563. >                         for (ConfigInfo configInfo : configInfoList) {\n564.                             removeTagByIdAtomic(configInfo.getId());\n565.                             insertConfigHistoryAtomic(configInfo.getId(), configInfo, srcIp, srcUser, time, \"D\");\n"}]}, {"url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/service/dump/DumpService.java", "rawCode": "/*\n * Copyright 1999-2018 Alibaba Group Holding Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.alibaba.nacos.config.server.service.dump;\n\nimport com.alibaba.nacos.api.exception.NacosException;\nimport com.alibaba.nacos.common.utils.MD5Utils;\nimport com.alibaba.nacos.common.utils.StringUtils;\nimport com.alibaba.nacos.config.server.constant.Constants;\nimport com.alibaba.nacos.config.server.manager.TaskManager;\nimport com.alibaba.nacos.config.server.model.ConfigInfo;\nimport com.alibaba.nacos.config.server.model.ConfigInfoAggr;\nimport com.alibaba.nacos.config.server.model.ConfigInfoChanged;\nimport com.alibaba.nacos.config.server.service.ConfigCacheService;\nimport com.alibaba.nacos.config.server.service.dump.processor.DumpAllBetaProcessor;\nimport com.alibaba.nacos.config.server.service.dump.processor.DumpAllProcessor;\nimport com.alibaba.nacos.config.server.service.dump.processor.DumpAllTagProcessor;\nimport com.alibaba.nacos.config.server.service.dump.processor.DumpProcessor;\nimport com.alibaba.nacos.config.server.service.dump.task.DumpAllBetaTask;\nimport com.alibaba.nacos.config.server.service.dump.task.DumpAllTagTask;\nimport com.alibaba.nacos.config.server.service.dump.task.DumpAllTask;\nimport com.alibaba.nacos.config.server.service.dump.task.DumpTask;\nimport com.alibaba.nacos.config.server.service.merge.MergeTaskProcessor;\nimport com.alibaba.nacos.config.server.service.repository.ConfigInfoAggrPersistService;\nimport com.alibaba.nacos.config.server.service.repository.ConfigInfoBetaPersistService;\nimport com.alibaba.nacos.config.server.service.repository.ConfigInfoPersistService;\nimport com.alibaba.nacos.config.server.service.repository.ConfigInfoTagPersistService;\nimport com.alibaba.nacos.config.server.service.repository.HistoryConfigInfoPersistService;\nimport com.alibaba.nacos.config.server.utils.ConfigExecutor;\nimport com.alibaba.nacos.config.server.utils.ContentUtils;\nimport com.alibaba.nacos.config.server.utils.DiskUtil;\nimport com.alibaba.nacos.config.server.utils.GroupKey;\nimport com.alibaba.nacos.config.server.utils.GroupKey2;\nimport com.alibaba.nacos.config.server.utils.LogUtil;\nimport com.alibaba.nacos.config.server.utils.TimeUtils;\nimport com.alibaba.nacos.core.cluster.ServerMemberManager;\nimport com.alibaba.nacos.core.namespace.repository.NamespacePersistService;\nimport com.alibaba.nacos.persistence.datasource.DynamicDataSource;\nimport com.alibaba.nacos.persistence.model.Page;\nimport com.alibaba.nacos.sys.env.EnvUtil;\nimport com.alibaba.nacos.sys.utils.InetUtils;\nimport com.alibaba.nacos.sys.utils.TimerContext;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.IOException;\nimport java.sql.Timestamp;\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.Calendar;\nimport java.util.List;\nimport java.util.Random;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.atomic.AtomicInteger;\n\nimport static com.alibaba.nacos.config.server.utils.LogUtil.DUMP_LOG;\nimport static com.alibaba.nacos.config.server.utils.LogUtil.FATAL_LOG;\n\n/**\n * Dump data service.\n *\n * @author Nacos\n */\n@SuppressWarnings(\"PMD.AbstractClassShouldStartWithAbstractNamingRule\")\npublic abstract class DumpService {\n    \n    private static final Logger LOGGER = LoggerFactory.getLogger(DumpService.class);\n    \n    protected DumpProcessor processor;\n    \n    protected DumpAllProcessor dumpAllProcessor;\n    \n    protected DumpAllBetaProcessor dumpAllBetaProcessor;\n    \n    protected DumpAllTagProcessor dumpAllTagProcessor;\n    \n    protected ConfigInfoPersistService configInfoPersistService;\n    \n    protected NamespacePersistService namespacePersistService;\n    \n    protected HistoryConfigInfoPersistService historyConfigInfoPersistService;\n    \n    protected ConfigInfoAggrPersistService configInfoAggrPersistService;\n    \n    protected ConfigInfoBetaPersistService configInfoBetaPersistService;\n    \n    protected ConfigInfoTagPersistService configInfoTagPersistService;\n    \n    protected final ServerMemberManager memberManager;\n    \n    /**\n     * full dump interval.\n     */\n    static final int DUMP_ALL_INTERVAL_IN_MINUTE = 6 * 60;\n    \n    /**\n     * full dump interval.\n     */\n    static final int DUMP_CHANGE_INTERVAL_IN_SECONDS = 15;\n    \n    /**\n     * full dump delay.\n     */\n    static final int INITIAL_DELAY_IN_MINUTE = 6 * 60;\n    \n    private TaskManager dumpTaskMgr;\n    \n    private TaskManager dumpAllTaskMgr;\n    \n    static final AtomicInteger FINISHED = new AtomicInteger();\n    \n    static final int INIT_THREAD_COUNT = 10;\n    \n    int total = 0;\n    \n    private static final String TRUE_STR = \"true\";\n    \n    private static final String BETA_TABLE_NAME = \"config_info_beta\";\n    \n    private static final String TAG_TABLE_NAME = \"config_info_tag\";\n    \n    Boolean isQuickStart = false;\n    \n    private int retentionDays = 30;\n    \n    /**\n     * Here you inject the dependent objects constructively, ensuring that some of the dependent functionality is\n     * initialized ahead of time.\n     *\n     * @param memberManager {@link ServerMemberManager}\n     */\n    public DumpService(ConfigInfoPersistService configInfoPersistService,\n            NamespacePersistService namespacePersistService,\n            HistoryConfigInfoPersistService historyConfigInfoPersistService,\n            ConfigInfoAggrPersistService configInfoAggrPersistService,\n            ConfigInfoBetaPersistService configInfoBetaPersistService,\n            ConfigInfoTagPersistService configInfoTagPersistService, ServerMemberManager memberManager) {\n        this.configInfoPersistService = configInfoPersistService;\n        this.namespacePersistService = namespacePersistService;\n        this.historyConfigInfoPersistService = historyConfigInfoPersistService;\n        this.configInfoAggrPersistService = configInfoAggrPersistService;\n        this.configInfoBetaPersistService = configInfoBetaPersistService;\n        this.configInfoTagPersistService = configInfoTagPersistService;\n        this.memberManager = memberManager;\n        this.processor = new DumpProcessor(this);\n        this.dumpAllProcessor = new DumpAllProcessor(this);\n        this.dumpAllBetaProcessor = new DumpAllBetaProcessor(this);\n        this.dumpAllTagProcessor = new DumpAllTagProcessor(this);\n        this.dumpTaskMgr = new TaskManager(\"com.alibaba.nacos.server.DumpTaskManager\");\n        this.dumpTaskMgr.setDefaultTaskProcessor(processor);\n        \n        this.dumpAllTaskMgr = new TaskManager(\"com.alibaba.nacos.server.DumpAllTaskManager\");\n        this.dumpAllTaskMgr.setDefaultTaskProcessor(dumpAllProcessor);\n        \n        this.dumpAllTaskMgr.addProcessor(DumpAllTask.TASK_ID, dumpAllProcessor);\n        this.dumpAllTaskMgr.addProcessor(DumpAllBetaTask.TASK_ID, dumpAllBetaProcessor);\n        this.dumpAllTaskMgr.addProcessor(DumpAllTagTask.TASK_ID, dumpAllTagProcessor);\n        \n        DynamicDataSource.getInstance().getDataSource();\n    }\n    \n    public ConfigInfoPersistService getConfigInfoPersistService() {\n        return configInfoPersistService;\n    }\n    \n    public ConfigInfoBetaPersistService getConfigInfoBetaPersistService() {\n        return configInfoBetaPersistService;\n    }\n    \n    public ConfigInfoTagPersistService getConfigInfoTagPersistService() {\n        return configInfoTagPersistService;\n    }\n    \n    public HistoryConfigInfoPersistService getHistoryConfigInfoPersistService() {\n        return historyConfigInfoPersistService;\n    }\n    \n    public ServerMemberManager getMemberManager() {\n        return memberManager;\n    }\n    \n    /**\n     * initialize.\n     *\n     * @throws Throwable throws Exception when actually operate.\n     */\n    protected abstract void init() throws Throwable;\n    \n    protected void dumpOperate(DumpProcessor processor, DumpAllProcessor dumpAllProcessor,\n            DumpAllBetaProcessor dumpAllBetaProcessor, DumpAllTagProcessor dumpAllTagProcessor) throws NacosException {\n        String dumpFileContext = \"CONFIG_DUMP_TO_FILE\";\n        TimerContext.start(dumpFileContext);\n        try {\n            LogUtil.DEFAULT_LOG.warn(\"DumpService start\");\n            \n            Runnable dumpAll = () -> dumpAllTaskMgr.addTask(DumpAllTask.TASK_ID, new DumpAllTask());\n            \n            Runnable dumpAllBeta = () -> dumpAllTaskMgr.addTask(DumpAllBetaTask.TASK_ID, new DumpAllBetaTask());\n            \n            Runnable dumpAllTag = () -> dumpAllTaskMgr.addTask(DumpAllTagTask.TASK_ID, new DumpAllTagTask());\n            \n            Runnable clearConfigHistory = () -> {\n                LOGGER.warn(\"clearConfigHistory start\");\n                if (canExecute()) {\n                    try {\n                        Timestamp startTime = getBeforeStamp(TimeUtils.getCurrentTime(), 24 * getRetentionDays());\n                        int pageSize = 1000;\n                        LOGGER.warn(\"clearConfigHistory, getBeforeStamp:{}, pageSize:{}\", startTime, pageSize);\n                        historyConfigInfoPersistService.removeConfigHistory(startTime, pageSize);\n                    } catch (Throwable e) {\n                        LOGGER.error(\"clearConfigHistory error : {}\", e.toString());\n                    }\n                }\n            };\n            \n            Timestamp currentTime = new Timestamp(System.currentTimeMillis());\n            \n            try {\n                dumpConfigInfo(dumpAllProcessor);\n                \n                // update Beta cache\n                LogUtil.DEFAULT_LOG.info(\"start clear all config-info-beta.\");\n                DiskUtil.clearAllBeta();\n                if (namespacePersistService.isExistTable(BETA_TABLE_NAME)) {\n                    dumpAllBetaProcessor.process(new DumpAllBetaTask());\n                }\n                // update Tag cache\n                LogUtil.DEFAULT_LOG.info(\"start clear all config-info-tag.\");\n                DiskUtil.clearAllTag();\n                if (namespacePersistService.isExistTable(TAG_TABLE_NAME)) {\n                    dumpAllTagProcessor.process(new DumpAllTagTask());\n                }\n                \n                // add to dump aggr\n                List<ConfigInfoChanged> configList = configInfoAggrPersistService.findAllAggrGroup();\n                if (configList != null && !configList.isEmpty()) {\n                    total = configList.size();\n                    List<List<ConfigInfoChanged>> splitList = splitList(configList, INIT_THREAD_COUNT);\n                    for (List<ConfigInfoChanged> list : splitList) {\n                        MergeAllDataWorker work = new MergeAllDataWorker(list);\n                        work.start();\n                    }\n                    LOGGER.info(\"server start, schedule merge end.\");\n                }\n            } catch (Exception e) {\n                LogUtil.FATAL_LOG.error(\n                        \"Nacos Server did not start because dumpservice bean construction failure :\\n\" + e);\n                throw new NacosException(NacosException.SERVER_ERROR,\n                        \"Nacos Server did not start because dumpservice bean construction failure :\\n\" + e.getMessage(),\n                        e);\n            }\n            if (!EnvUtil.getStandaloneMode()) {\n                Runnable heartbeat = () -> {\n                    String heartBeatTime = TimeUtils.getCurrentTime().toString();\n                    // write disk\n                    try {\n                        DiskUtil.saveHeartBeatToDisk(heartBeatTime);\n                    } catch (IOException e) {\n                        LogUtil.FATAL_LOG.error(\"save heartbeat fail\" + e.getMessage());\n                    }\n                };\n                \n                ConfigExecutor.scheduleConfigTask(heartbeat, 0, 10, TimeUnit.SECONDS);\n                \n                long initialDelay = new Random().nextInt(INITIAL_DELAY_IN_MINUTE) + 10;\n                LogUtil.DEFAULT_LOG.warn(\"initialDelay:{}\", initialDelay);\n                \n                ConfigExecutor.scheduleConfigTask(dumpAll, initialDelay, DUMP_ALL_INTERVAL_IN_MINUTE, TimeUnit.MINUTES);\n                \n                ConfigExecutor.scheduleConfigTask(dumpAllBeta, initialDelay, DUMP_ALL_INTERVAL_IN_MINUTE,\n                        TimeUnit.MINUTES);\n                \n                ConfigExecutor.scheduleConfigTask(dumpAllTag, initialDelay, DUMP_ALL_INTERVAL_IN_MINUTE,\n                        TimeUnit.MINUTES);\n                ConfigExecutor.scheduleConfigTask(new DumpChangeConfigWorker(this, currentTime), 0,\n                        DUMP_CHANGE_INTERVAL_IN_SECONDS, TimeUnit.SECONDS);\n                \n            }\n            \n            ConfigExecutor.scheduleConfigTask(clearConfigHistory, 10, 10, TimeUnit.MINUTES);\n        } finally {\n            TimerContext.end(dumpFileContext, LogUtil.DUMP_LOG);\n        }\n        \n    }\n    \n    private void dumpConfigInfo(DumpAllProcessor dumpAllProcessor) throws IOException {\n        \n        try {\n            LogUtil.DEFAULT_LOG.info(\"start clear all config-info.\");\n            DiskUtil.clearAll();\n            dumpAllProcessor.process(new DumpAllTask());\n        } catch (Exception e) {\n            LogUtil.FATAL_LOG.error(\"dump config fail\" + e.getMessage());\n            throw e;\n        }\n    }\n    \n    private Timestamp getBeforeStamp(Timestamp date, int step) {\n        Calendar cal = Calendar.getInstance();\n        cal.setTime(date);\n        // before 6 hour\n        cal.add(Calendar.HOUR_OF_DAY, -step);\n        SimpleDateFormat format = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n        return Timestamp.valueOf(format.format(cal.getTime()));\n    }\n    \n    private int getRetentionDays() {\n        String val = EnvUtil.getProperty(\"nacos.config.retention.days\");\n        if (null == val) {\n            return retentionDays;\n        }\n        \n        int tmp = 0;\n        try {\n            tmp = Integer.parseInt(val);\n            if (tmp > 0) {\n                retentionDays = tmp;\n            }\n        } catch (NumberFormatException nfe) {\n            FATAL_LOG.error(\"read nacos.config.retention.days wrong\", nfe);\n        }\n        \n        return retentionDays;\n    }\n    \n    /**\n     * dump formal config.\n     *\n     * @param dataId       dataId.\n     * @param group        group.\n     * @param tenant       tenant.\n     * @param lastModified lastModified.\n     * @param handleIp     handleIp.\n     */\n    public void dumpFormal(String dataId, String group, String tenant, long lastModified, String handleIp) {\n        String groupKey = GroupKey2.getKey(dataId, group, tenant);\n        String taskKey = dataId + group + tenant;\n        dumpTaskMgr.addTask(taskKey, new DumpTask(groupKey, false, false, false, null, lastModified, handleIp));\n        DUMP_LOG.info(\"[dump] add formal task. groupKey={}\", groupKey);\n        \n    }\n    \n    /**\n     * dump beta.\n     *\n     * @param dataId       dataId.\n     * @param group        group.\n     * @param tenant       tenant.\n     * @param lastModified lastModified.\n     * @param handleIp     handleIp.\n     */\n    public void dumpBeta(String dataId, String group, String tenant, long lastModified, String handleIp) {\n        String groupKey = GroupKey2.getKey(dataId, group, tenant);\n        String taskKey = dataId + group + tenant + \"+beta\";\n        dumpTaskMgr.addTask(taskKey, new DumpTask(groupKey, true, false, false, null, lastModified, handleIp));\n        DUMP_LOG.info(\"[dump] add beta task. groupKey={}\", groupKey);\n        \n    }\n    \n    /**\n     * dump batch.\n     *\n     * @param dataId       dataId.\n     * @param group        group.\n     * @param tenant       tenant.\n     * @param lastModified lastModified.\n     * @param handleIp     handleIp.\n     */\n    public void dumpBatch(String dataId, String group, String tenant, long lastModified, String handleIp) {\n        String groupKey = GroupKey2.getKey(dataId, group, tenant);\n        String taskKey = groupKey + \"+batch\";\n        dumpTaskMgr.addTask(taskKey, new DumpTask(groupKey, false, true, false, null, lastModified, handleIp));\n        DUMP_LOG.info(\"[dump] add batch task. groupKey={}\", dataId + \"+\" + group);\n    }\n    \n    /**\n     * dump tag.\n     *\n     * @param dataId       dataId.\n     * @param group        group.\n     * @param tenant       tenant.\n     * @param tag          tag.\n     * @param lastModified lastModified.\n     * @param handleIp     handleIp.\n     */\n    public void dumpTag(String dataId, String group, String tenant, String tag, long lastModified, String handleIp) {\n        String groupKey = GroupKey2.getKey(dataId, group, tenant);\n        String taskKey = groupKey + \"+tag+\" + tag;\n        dumpTaskMgr.addTask(taskKey, new DumpTask(groupKey, false, false, true, tag, lastModified, handleIp));\n        DUMP_LOG.info(\"[dump] add tag task. groupKey={},tag={}\", groupKey, tag);\n        \n    }\n    \n    public void dumpAll() {\n        dumpAllTaskMgr.addTask(DumpAllTask.TASK_ID, new DumpAllTask());\n    }\n    \n    static List<List<ConfigInfoChanged>> splitList(List<ConfigInfoChanged> list, int count) {\n        List<List<ConfigInfoChanged>> result = new ArrayList<>(count);\n        for (int i = 0; i < count; i++) {\n            result.add(new ArrayList<>());\n        }\n        for (int i = 0; i < list.size(); i++) {\n            ConfigInfoChanged config = list.get(i);\n            result.get(i % count).add(config);\n        }\n        return result;\n    }\n    \n    class MergeAllDataWorker extends Thread {\n        \n        static final int PAGE_SIZE = 10000;\n        \n        private List<ConfigInfoChanged> configInfoList;\n        \n        public MergeAllDataWorker(List<ConfigInfoChanged> configInfoList) {\n            super(\"MergeAllDataWorker\");\n            this.configInfoList = configInfoList;\n        }\n        \n        @Override\n        public void run() {\n            if (!canExecute()) {\n                return;\n            }\n            for (ConfigInfoChanged configInfo : configInfoList) {\n                String dataId = configInfo.getDataId();\n                String group = configInfo.getGroup();\n                String tenant = configInfo.getTenant();\n                try {\n                    List<ConfigInfoAggr> datumList = new ArrayList<>();\n                    int rowCount = configInfoAggrPersistService.aggrConfigInfoCount(dataId, group, tenant);\n                    int pageCount = (int) Math.ceil(rowCount * 1.0 / PAGE_SIZE);\n                    for (int pageNo = 1; pageNo <= pageCount; pageNo++) {\n                        Page<ConfigInfoAggr> page = configInfoAggrPersistService.findConfigInfoAggrByPage(dataId, group,\n                                tenant, pageNo, PAGE_SIZE);\n                        if (page != null) {\n                            datumList.addAll(page.getPageItems());\n                            LOGGER.info(\"[merge-query] {}, {}, size/total={}/{}\", dataId, group, datumList.size(),\n                                    rowCount);\n                        }\n                    }\n                    \n                    final Timestamp time = TimeUtils.getCurrentTime();\n                    // merge\n                    if (datumList.size() > 0) {\n                        ConfigInfo cf = MergeTaskProcessor.merge(dataId, group, tenant, datumList);\n                        String aggrContent = cf.getContent();\n                        String localContentMD5 = ConfigCacheService.getContentMd5(GroupKey.getKey(dataId, group));\n                        String aggrConetentMD5 = MD5Utils.md5Hex(aggrContent, Constants.ENCODE);\n                        \n                        if (!StringUtils.equals(localContentMD5, aggrConetentMD5)) {\n                            configInfoPersistService.insertOrUpdate(null, null, cf, null);\n                            LOGGER.info(\"[merge-ok] {}, {}, size={}, length={}, md5={}, content={}\", dataId, group,\n                                    datumList.size(), cf.getContent().length(), cf.getMd5(),\n                                    ContentUtils.truncateContent(cf.getContent()));\n                        }\n                    } else {\n                        // remove config info\n                        configInfoPersistService.removeConfigInfo(dataId, group, tenant, InetUtils.getSelfIP(), null);\n                        LOGGER.warn(\n                                \"[merge-delete] delete config info because no datum. dataId=\" + dataId + \", groupId=\"\n                                        + group);\n                    }\n                    \n                } catch (Throwable e) {\n                    LOGGER.info(\"[merge-error] \" + dataId + \", \" + group + \", \" + e.toString(), e);\n                }\n                FINISHED.incrementAndGet();\n                if (FINISHED.get() % 100 == 0) {\n                    LOGGER.info(\"[all-merge-dump] {} / {}\", FINISHED.get(), total);\n                }\n            }\n            LOGGER.info(\"[all-merge-dump] {} / {}\", FINISHED.get(), total);\n        }\n    }\n    \n    /**\n     * Used to determine whether the aggregation task, configuration history cleanup task can be performed.\n     *\n     * @return {@link Boolean}\n     */\n    protected abstract boolean canExecute();\n}\n", "methodName": "com.alibaba.nacos.config.server.service.dump.DumpService$MergeAllDataWorker.run():void", "exampleID": 4, "dataset": "infer", "filepath": "config/src/main/java/com/alibaba/nacos/config/server/service/dump/DumpService.java", "line": 464, "sink": "md5Hex(...)", "source": "aggrContent", "sourceLine": 462, "qualifier": "$$aggrContent/$ could be null, and is @@dereferenced by md5Hex(...)/@", "steps": [{"line": 87, "source": "aggrContent", "filepath": "config/src/main/java/com/alibaba/nacos/config/server/model/ConfigInfoBase.java", "methodName": "ConfigInfoBase.getContent", "exampleID": 5}], "line_number": 462, "records": [{"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/model/ConfigInfoBase.java", "line_number": 87, "column_number": -1, "description": "start of procedure getContent()", "snippet": "    public String getContent() {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/model/ConfigInfoBase.java", "methodName": "getContent"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/model/ConfigInfoBase.java", "line_number": 88, "column_number": -1, "description": "return from a call to String ConfigInfoBase.getContent()", "snippet": "        return content;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/model/ConfigInfoBase.java", "methodName": "getContent"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "line_number": 28, "column_number": -1, "description": "start of procedure getKey(...)", "snippet": "    public static String getKey(String dataId, String group) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "methodName": "getKey"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "line_number": 29, "column_number": -1, "description": "", "snippet": "        return doGetKey(dataId, group, \"\");", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "methodName": "getKey"}, {"level": 2, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "line_number": 40, "column_number": -1, "description": "start of procedure doGetKey(...)", "snippet": "    private static String doGetKey(String dataId, String group, String datumStr) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "methodName": "doGetKey"}, {"level": 2, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "line_number": 41, "column_number": -1, "description": "Skipping StringBuilder(): unknown method", "snippet": "        StringBuilder sb = new StringBuilder();", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "methodName": "doGetKey"}, {"level": 2, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "line_number": 42, "column_number": -1, "description": "", "snippet": "        urlEncode(dataId, sb);", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "methodName": "doGetKey"}, {"level": 3, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "line_number": 104, "column_number": -1, "description": "start of procedure urlEncode(...)", "snippet": "    static void urlEncode(String str, StringBuilder sb) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "methodName": "urlEncode"}, {"level": 3, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "line_number": 105, "column_number": -1, "description": "Taking false branch", "snippet": "        for (int idx = 0; idx < str.length(); ++idx) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "methodName": "urlEncode"}, {"level": 3, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "line_number": 115, "column_number": -1, "description": "return from a call to void GroupKey.urlEncode(String,StringBuilder)", "snippet": "    }", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "methodName": "urlEncode"}, {"level": 2, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "line_number": 43, "column_number": -1, "description": "Skipping append(...): unknown method", "snippet": "        sb.append('+');", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "methodName": "doGetKey"}, {"level": 2, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "line_number": 44, "column_number": -1, "description": "", "snippet": "        urlEncode(group, sb);", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "methodName": "doGetKey"}, {"level": 3, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "line_number": 104, "column_number": -1, "description": "start of procedure urlEncode(...)", "snippet": "    static void urlEncode(String str, StringBuilder sb) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "methodName": "urlEncode"}, {"level": 3, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "line_number": 105, "column_number": -1, "description": "Taking false branch", "snippet": "        for (int idx = 0; idx < str.length(); ++idx) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "methodName": "urlEncode"}, {"level": 3, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "line_number": 115, "column_number": -1, "description": "return from a call to void GroupKey.urlEncode(String,StringBuilder)", "snippet": "    }", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "methodName": "urlEncode"}, {"level": 2, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "line_number": 45, "column_number": -1, "description": "", "snippet": "        if (StringUtils.isNotEmpty(datumStr)) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "methodName": "doGetKey"}, {"level": 3, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 106, "column_number": -1, "description": "start of procedure isNotEmpty(...)", "snippet": "    public static boolean isNotEmpty(String str) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isNotEmpty"}, {"level": 3, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 107, "column_number": -1, "description": "", "snippet": "        return !isEmpty(str);", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isNotEmpty"}, {"level": 4, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 116, "column_number": -1, "description": "start of procedure isEmpty(...)", "snippet": "    public static boolean isEmpty(String str) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isEmpty"}, {"level": 4, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 117, "column_number": -1, "description": "Taking true branch", "snippet": "        return str == null || str.length() == 0;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isEmpty"}, {"level": 4, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 117, "column_number": -1, "description": "Taking true branch", "snippet": "        return str == null || str.length() == 0;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isEmpty"}, {"level": 4, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 117, "column_number": -1, "description": "return from a call to boolean StringUtils.isEmpty(String)", "snippet": "        return str == null || str.length() == 0;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isEmpty"}, {"level": 3, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 107, "column_number": -1, "description": "Taking false branch", "snippet": "        return !isEmpty(str);", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isNotEmpty"}, {"level": 3, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 107, "column_number": -1, "description": "return from a call to boolean StringUtils.isNotEmpty(String)", "snippet": "        return !isEmpty(str);", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isNotEmpty"}, {"level": 2, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "line_number": 45, "column_number": -1, "description": "Taking false branch", "snippet": "        if (StringUtils.isNotEmpty(datumStr)) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "methodName": "doGetKey"}, {"level": 2, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "line_number": 50, "column_number": -1, "description": "return from a call to String GroupKey.doGetKey(String,String,String)", "snippet": "        return sb.toString();", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "methodName": "doGetKey"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "line_number": 29, "column_number": -1, "description": "return from a call to String GroupKey.getKey(String,String)", "snippet": "        return doGetKey(dataId, group, \"\");", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "methodName": "getKey"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/ConfigCacheService.java", "line_number": 710, "column_number": -1, "description": "start of procedure getContentMd5(...)", "snippet": "        return getContentMd5(groupKey, \"\", \"\");", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/service/ConfigCacheService.java", "methodName": "getContentMd5"}, {"level": 2, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/ConfigCacheService.java", "line_number": 713, "column_number": -1, "description": "Definition of getContentMd5(...)", "snippet": "    public static String getContentMd5(String groupKey, String ip, String tag) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/service/ConfigCacheService.java", "methodName": "getContentMd5"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/ConfigCacheService.java", "line_number": 710, "column_number": -1, "description": "return from a call to String ConfigCacheService.getContentMd5(String)", "snippet": "        return getContentMd5(groupKey, \"\", \"\");", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/service/ConfigCacheService.java", "methodName": "getContentMd5"}, {"level": 1, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/MD5Utils.java", "line_number": 72, "column_number": -1, "description": "start of procedure md5Hex(...)", "snippet": "            return md5Hex(value.getBytes(encode));", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/MD5Utils.java", "methodName": "md5Hex"}], "combined_records": [{"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/model/ConfigInfoBase.java", "line_number": 88, "column_number": -1, "description": "start of procedure getContent()", "snippet": "84.    \n85.    public String getContent() {\n86.>         return content;\n87.    }\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/model/ConfigInfoBase.java", "methodName": "getContent", "line_numbers": [87, 88]}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "line_number": 29, "column_number": -1, "description": "start of procedure getKey(...)", "snippet": "25.    \n26.    public static String getKey(String dataId, String group) {\n27.>         return doGetKey(dataId, group, \"\");\n28.    }\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "methodName": "getKey", "line_numbers": [28, 29]}, {"level": 2, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "line_number": 42, "column_number": -1, "description": "start of procedure doGetKey(...)", "snippet": "37.    \n38.    private static String doGetKey(String dataId, String group, String datumStr) {\n39.>         StringBuilder sb = new StringBuilder();\n40.>         urlEncode(dataId, sb);\n41.>         sb.append('+');\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "methodName": "doGetKey", "line_numbers": [40, 41, 42]}, {"level": 3, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "line_number": 115, "column_number": -1, "description": "start of procedure urlEncode(...)", "snippet": "101.     */\n102.    static void urlEncode(String str, StringBuilder sb) {\n103.>         for (int idx = 0; idx < str.length(); ++idx) {\n104.>             char c = str.charAt(idx);\n105.            if ('+' == c) {\n106.                sb.append(\"%2B\");\n107.            } else if ('%' == c) {\n108.                sb.append(\"%25\");\n109.            } else {\n110.                sb.append(c);\n111.            }\n112.        }\n113.    }\n114.>     \n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "methodName": "urlEncode", "line_numbers": [104, 105, 115]}, {"level": 2, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "line_number": 44, "column_number": -1, "description": "Skipping append(...): unknown method", "snippet": "40.        urlEncode(dataId, sb);\n41.        sb.append('+');\n42.>         urlEncode(group, sb);\n43.>         if (StringUtils.isNotEmpty(datumStr)) {\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "methodName": "doGetKey", "line_numbers": [43, 44]}, {"level": 3, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "line_number": 115, "column_number": -1, "description": "start of procedure urlEncode(...)", "snippet": "101.     */\n102.    static void urlEncode(String str, StringBuilder sb) {\n103.>         for (int idx = 0; idx < str.length(); ++idx) {\n104.>             char c = str.charAt(idx);\n105.            if ('+' == c) {\n106.                sb.append(\"%2B\");\n107.            } else if ('%' == c) {\n108.                sb.append(\"%25\");\n109.            } else {\n110.                sb.append(c);\n111.            }\n112.        }\n113.    }\n114.>     \n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "methodName": "urlEncode", "line_numbers": [104, 105, 115]}, {"level": 2, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "line_number": 45, "column_number": -1, "description": "", "snippet": "42.        urlEncode(group, sb);\n43.        if (StringUtils.isNotEmpty(datumStr)) {\n44.>             sb.append('+');\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "methodName": "doGetKey", "line_numbers": [45]}, {"level": 3, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 107, "column_number": -1, "description": "start of procedure isNotEmpty(...)", "snippet": "103.     */\n104.    public static boolean isNotEmpty(String str) {\n105.>         return !isEmpty(str);\n106.    }\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isNotEmpty", "line_numbers": [106, 107]}, {"level": 4, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 117, "column_number": -1, "description": "start of procedure isEmpty(...)", "snippet": "113.     */\n114.    public static boolean isEmpty(String str) {\n115.>         return str == null || str.length() == 0;\n116.    }\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isEmpty", "line_numbers": [116, 117, 117, 117]}, {"level": 3, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 107, "column_number": -1, "description": "Taking false branch", "snippet": "104.    public static boolean isNotEmpty(String str) {\n105.        return !isEmpty(str);\n106.    }\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isNotEmpty", "line_numbers": [107, 107]}, {"level": 2, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "line_number": 50, "column_number": -1, "description": "Taking false branch", "snippet": "42.        urlEncode(group, sb);\n43.        if (StringUtils.isNotEmpty(datumStr)) {\n44.>             sb.append('+');\n45.            urlEncode(datumStr, sb);\n46.        }\n47.        \n48.        return sb.toString();\n49.    }\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "methodName": "doGetKey", "line_numbers": [45, 50]}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "line_number": 29, "column_number": -1, "description": "return from a call to String GroupKey.getKey(String,String)", "snippet": "26.    public static String getKey(String dataId, String group) {\n27.        return doGetKey(dataId, group, \"\");\n28.    }\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "methodName": "getKey", "line_numbers": [29]}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/ConfigCacheService.java", "line_number": 710, "column_number": -1, "description": "start of procedure getContentMd5(...)", "snippet": "707.    public static String getContentMd5(String groupKey) {\n708.        return getContentMd5(groupKey, \"\", \"\");\n709.    }\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/service/ConfigCacheService.java", "methodName": "getContentMd5", "line_numbers": [710]}, {"level": 2, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/ConfigCacheService.java", "line_number": 713, "column_number": -1, "description": "Definition of getContentMd5(...)", "snippet": "710.    \n711.    public static String getContentMd5(String groupKey, String ip, String tag) {\n712.>         CacheItem item = CACHE.get(groupKey);\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/service/ConfigCacheService.java", "methodName": "getContentMd5", "line_numbers": [713]}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/ConfigCacheService.java", "line_number": 710, "column_number": -1, "description": "return from a call to String ConfigCacheService.getContentMd5(String)", "snippet": "707.    public static String getContentMd5(String groupKey) {\n708.        return getContentMd5(groupKey, \"\", \"\");\n709.    }\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/service/ConfigCacheService.java", "methodName": "getContentMd5", "line_numbers": [710]}, {"level": 1, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/MD5Utils.java", "line_number": 72, "column_number": -1, "description": "start of procedure md5Hex(...)", "snippet": "69.        try {\n70.            return md5Hex(value.getBytes(encode));\n71.>         } catch (Exception e) {\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/MD5Utils.java", "methodName": "md5Hex", "line_numbers": [72]}], "infer_explore": [{"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/dump/DumpService.java", "line_number": 436, "column_number": -1, "description": "start of procedure run()", "snippet": "433.         \n434.         @Override\n435. >         public void run() {\n436.             if (!canExecute()) {\n437.                 return;\n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/dump/DumpService.java", "line_number": 437, "column_number": -1, "description": "Skipping canExecute(): unknown method", "snippet": "434.         @Override\n435.         public void run() {\n436. >             if (!canExecute()) {\n437.                 return;\n438.             }\n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/dump/DumpService.java", "line_number": -1, "column_number": -1, "description": "Definition of canExecute()", "snippet": ""}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/dump/DumpService.java", "line_number": 437, "column_number": -1, "description": "Taking false branch", "snippet": "434.         @Override\n435.         public void run() {\n436. >             if (!canExecute()) {\n437.                 return;\n438.             }\n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/dump/DumpService.java", "line_number": 440, "column_number": -1, "description": "Taking true branch", "snippet": "437.                 return;\n438.             }\n439. >             for (ConfigInfoChanged configInfo : configInfoList) {\n440.                 String dataId = configInfo.getDataId();\n441.                 String group = configInfo.getGroup();\n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/dump/DumpService.java", "line_number": 441, "column_number": -1, "description": "", "snippet": "438.             }\n439.             for (ConfigInfoChanged configInfo : configInfoList) {\n440. >                 String dataId = configInfo.getDataId();\n441.                 String group = configInfo.getGroup();\n442.                 String tenant = configInfo.getTenant();\n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/model/ConfigInfoChanged.java", "line_number": 46, "column_number": -1, "description": "start of procedure getDataId()", "snippet": "43.     }\n44.     \n45. >     public String getDataId() {\n46.         return dataId;\n47.     }\n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/model/ConfigInfoChanged.java", "line_number": 47, "column_number": -1, "description": "return from a call to String ConfigInfoChanged.getDataId()", "snippet": "44.     \n45.     public String getDataId() {\n46. >         return dataId;\n47.     }\n48.     \n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/dump/DumpService.java", "line_number": 442, "column_number": -1, "description": "", "snippet": "439.             for (ConfigInfoChanged configInfo : configInfoList) {\n440.                 String dataId = configInfo.getDataId();\n441. >                 String group = configInfo.getGroup();\n442.                 String tenant = configInfo.getTenant();\n443.                 try {\n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/model/ConfigInfoChanged.java", "line_number": 54, "column_number": -1, "description": "start of procedure getGroup()", "snippet": "51.     }\n52.     \n53. >     public String getGroup() {\n54.         return group;\n55.     }\n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/model/ConfigInfoChanged.java", "line_number": 55, "column_number": -1, "description": "return from a call to String ConfigInfoChanged.getGroup()", "snippet": "52.     \n53.     public String getGroup() {\n54. >         return group;\n55.     }\n56.     \n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/dump/DumpService.java", "line_number": 443, "column_number": -1, "description": "", "snippet": "440.                 String dataId = configInfo.getDataId();\n441.                 String group = configInfo.getGroup();\n442. >                 String tenant = configInfo.getTenant();\n443.                 try {\n444.                     List<ConfigInfoAggr> datumList = new ArrayList<>();\n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/model/ConfigInfoChanged.java", "line_number": 105, "column_number": -1, "description": "start of procedure getTenant()", "snippet": "102.     }\n103.     \n104. >     public String getTenant() {\n105.         return tenant;\n106.     }\n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/model/ConfigInfoChanged.java", "line_number": 106, "column_number": -1, "description": "return from a call to String ConfigInfoChanged.getTenant()", "snippet": "103.     \n104.     public String getTenant() {\n105. >         return tenant;\n106.     }\n107.     \n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/dump/DumpService.java", "line_number": 445, "column_number": -1, "description": "", "snippet": "442.                 String tenant = configInfo.getTenant();\n443.                 try {\n444. >                     List<ConfigInfoAggr> datumList = new ArrayList<>();\n445.                     int rowCount = configInfoAggrPersistService.aggrConfigInfoCount(dataId, group, tenant);\n446.                     int pageCount = (int) Math.ceil(rowCount * 1.0 / PAGE_SIZE);\n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/dump/DumpService.java", "line_number": 446, "column_number": -1, "description": "Skipping aggrConfigInfoCount(...): unknown method", "snippet": "443.                 try {\n444.                     List<ConfigInfoAggr> datumList = new ArrayList<>();\n445. >                     int rowCount = configInfoAggrPersistService.aggrConfigInfoCount(dataId, group, tenant);\n446.                     int pageCount = (int) Math.ceil(rowCount * 1.0 / PAGE_SIZE);\n447.                     for (int pageNo = 1; pageNo <= pageCount; pageNo++) {\n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/ConfigInfoAggrPersistService.java", "line_number": -1, "column_number": -1, "description": "Definition of aggrConfigInfoCount(...)", "snippet": ""}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/dump/DumpService.java", "line_number": 447, "column_number": -1, "description": "", "snippet": "444.                     List<ConfigInfoAggr> datumList = new ArrayList<>();\n445.                     int rowCount = configInfoAggrPersistService.aggrConfigInfoCount(dataId, group, tenant);\n446. >                     int pageCount = (int) Math.ceil(rowCount * 1.0 / PAGE_SIZE);\n447.                     for (int pageNo = 1; pageNo <= pageCount; pageNo++) {\n448.                         Page<ConfigInfoAggr> page = configInfoAggrPersistService.findConfigInfoAggrByPage(dataId, group,\n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/dump/DumpService.java", "line_number": 448, "column_number": -1, "description": "Taking false branch", "snippet": "445.                     int rowCount = configInfoAggrPersistService.aggrConfigInfoCount(dataId, group, tenant);\n446.                     int pageCount = (int) Math.ceil(rowCount * 1.0 / PAGE_SIZE);\n447. >                     for (int pageNo = 1; pageNo <= pageCount; pageNo++) {\n448.                         Page<ConfigInfoAggr> page = configInfoAggrPersistService.findConfigInfoAggrByPage(dataId, group,\n449.                                 tenant, pageNo, PAGE_SIZE);\n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/dump/DumpService.java", "line_number": 458, "column_number": -1, "description": "", "snippet": "455.                     }\n456.                     \n457. >                     final Timestamp time = TimeUtils.getCurrentTime();\n458.                     // merge\n459.                     if (datumList.size() > 0) {\n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/TimeUtils.java", "line_number": 33, "column_number": -1, "description": "start of procedure getCurrentTime()", "snippet": "30.     private static final String YYYYMMMDDHHMMSS = \"yyyy-MM-dd HH:mm:ss\";\n31.     \n32. >     public static Timestamp getCurrentTime() {\n33.         return new Timestamp(System.currentTimeMillis());\n34.     }\n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/TimeUtils.java", "line_number": 34, "column_number": -1, "description": "return from a call to Timestamp TimeUtils.getCurrentTime()", "snippet": "31.     \n32.     public static Timestamp getCurrentTime() {\n33. >         return new Timestamp(System.currentTimeMillis());\n34.     }\n35.     \n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/dump/DumpService.java", "line_number": 460, "column_number": -1, "description": "Taking true branch", "snippet": "457.                     final Timestamp time = TimeUtils.getCurrentTime();\n458.                     // merge\n459. >                     if (datumList.size() > 0) {\n460.                         ConfigInfo cf = MergeTaskProcessor.merge(dataId, group, tenant, datumList);\n461.                         String aggrContent = cf.getContent();\n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/dump/DumpService.java", "line_number": 461, "column_number": -1, "description": "", "snippet": "458.                     // merge\n459.                     if (datumList.size() > 0) {\n460. >                         ConfigInfo cf = MergeTaskProcessor.merge(dataId, group, tenant, datumList);\n461.                         String aggrContent = cf.getContent();\n462.                         String localContentMD5 = ConfigCacheService.getContentMd5(GroupKey.getKey(dataId, group));\n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/merge/MergeTaskProcessor.java", "line_number": 144, "column_number": -1, "description": "start of procedure merge(...)", "snippet": "141.      * @return {@link ConfigInfo}\n142.      */\n143. >     public static ConfigInfo merge(String dataId, String group, String tenant, List<ConfigInfoAggr> datumList) {\n144.         StringBuilder sb = new StringBuilder();\n145.         String appName = null;\n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/merge/MergeTaskProcessor.java", "line_number": 145, "column_number": -1, "description": "Skipping StringBuilder(): unknown method", "snippet": "142.      */\n143.     public static ConfigInfo merge(String dataId, String group, String tenant, List<ConfigInfoAggr> datumList) {\n144. >         StringBuilder sb = new StringBuilder();\n145.         String appName = null;\n146.         for (ConfigInfoAggr aggrInfo : datumList) {\n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/merge/MergeTaskProcessor.java", "line_number": 146, "column_number": -1, "description": "", "snippet": "143.     public static ConfigInfo merge(String dataId, String group, String tenant, List<ConfigInfoAggr> datumList) {\n144.         StringBuilder sb = new StringBuilder();\n145. >         String appName = null;\n146.         for (ConfigInfoAggr aggrInfo : datumList) {\n147.             if (aggrInfo.getAppName() != null) {\n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/merge/MergeTaskProcessor.java", "line_number": 147, "column_number": -1, "description": "Taking false branch", "snippet": "144.         StringBuilder sb = new StringBuilder();\n145.         String appName = null;\n146. >         for (ConfigInfoAggr aggrInfo : datumList) {\n147.             if (aggrInfo.getAppName() != null) {\n148.                 appName = aggrInfo.getAppName();\n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/merge/MergeTaskProcessor.java", "line_number": 154, "column_number": -1, "description": "Skipping substring(...): unknown method", "snippet": "151.             sb.append(Constants.NACOS_LINE_SEPARATOR);\n152.         }\n153. >         String content = sb.substring(0, sb.lastIndexOf(Constants.NACOS_LINE_SEPARATOR));\n154.         return new ConfigInfo(dataId, group, tenant, appName, content);\n155.     }\n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/merge/MergeTaskProcessor.java", "line_number": 155, "column_number": -1, "description": "", "snippet": "152.         }\n153.         String content = sb.substring(0, sb.lastIndexOf(Constants.NACOS_LINE_SEPARATOR));\n154. >         return new ConfigInfo(dataId, group, tenant, appName, content);\n155.     }\n156. }\n"}, {"level": 2, "filename": "config/src/main/java/com/alibaba/nacos/config/server/model/ConfigInfo.java", "line_number": 48, "column_number": -1, "description": "start of procedure ConfigInfo(...)", "snippet": "45.     \n46.     public ConfigInfo(String dataId, String group, String tenant, String appName, String content) {\n47. >         super(dataId, group, content);\n48.         this.tenant = tenant;\n49.         this.appName = appName;\n"}, {"level": 3, "filename": "config/src/main/java/com/alibaba/nacos/config/server/model/ConfigInfoBase.java", "line_number": 54, "column_number": -1, "description": "start of procedure ConfigInfoBase(...)", "snippet": "51.     }\n52.     \n53. >     public ConfigInfoBase(String dataId, String group, String content) {\n54.         this.dataId = dataId;\n55.         this.group = group;\n"}, {"level": 3, "filename": "config/src/main/java/com/alibaba/nacos/config/server/model/ConfigInfoBase.java", "line_number": 55, "column_number": -1, "description": "", "snippet": "52.     \n53.     public ConfigInfoBase(String dataId, String group, String content) {\n54. >         this.dataId = dataId;\n55.         this.group = group;\n56.         this.content = content;\n"}, {"level": 3, "filename": "config/src/main/java/com/alibaba/nacos/config/server/model/ConfigInfoBase.java", "line_number": 56, "column_number": -1, "description": "", "snippet": "53.     public ConfigInfoBase(String dataId, String group, String content) {\n54.         this.dataId = dataId;\n55. >         this.group = group;\n56.         this.content = content;\n57.         if (this.content != null) {\n"}, {"level": 3, "filename": "config/src/main/java/com/alibaba/nacos/config/server/model/ConfigInfoBase.java", "line_number": 57, "column_number": -1, "description": "", "snippet": "54.         this.dataId = dataId;\n55.         this.group = group;\n56. >         this.content = content;\n57.         if (this.content != null) {\n58.             this.md5 = MD5Utils.md5Hex(this.content, Constants.ENCODE);\n"}, {"level": 3, "filename": "config/src/main/java/com/alibaba/nacos/config/server/model/ConfigInfoBase.java", "line_number": 58, "column_number": -1, "description": "Taking false branch", "snippet": "55.         this.group = group;\n56.         this.content = content;\n57. >         if (this.content != null) {\n58.             this.md5 = MD5Utils.md5Hex(this.content, Constants.ENCODE);\n59.         }\n"}, {"level": 3, "filename": "config/src/main/java/com/alibaba/nacos/config/server/model/ConfigInfoBase.java", "line_number": 61, "column_number": -1, "description": "return from a call to ConfigInfoBase.<init>(String,String,String)", "snippet": "58.             this.md5 = MD5Utils.md5Hex(this.content, Constants.ENCODE);\n59.         }\n60. >     }\n61.     \n62.     public long getId() {\n"}, {"level": 2, "filename": "config/src/main/java/com/alibaba/nacos/config/server/model/ConfigInfo.java", "line_number": 49, "column_number": -1, "description": "", "snippet": "46.     public ConfigInfo(String dataId, String group, String tenant, String appName, String content) {\n47.         super(dataId, group, content);\n48. >         this.tenant = tenant;\n49.         this.appName = appName;\n50.     }\n"}, {"level": 2, "filename": "config/src/main/java/com/alibaba/nacos/config/server/model/ConfigInfo.java", "line_number": 50, "column_number": -1, "description": "", "snippet": "47.         super(dataId, group, content);\n48.         this.tenant = tenant;\n49. >         this.appName = appName;\n50.     }\n51.     \n"}, {"level": 2, "filename": "config/src/main/java/com/alibaba/nacos/config/server/model/ConfigInfo.java", "line_number": 51, "column_number": -1, "description": "return from a call to ConfigInfo.<init>(String,String,String,String,String)", "snippet": "48.         this.tenant = tenant;\n49.         this.appName = appName;\n50. >     }\n51.     \n52.     public String getTenant() {\n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/merge/MergeTaskProcessor.java", "line_number": 155, "column_number": -1, "description": "return from a call to ConfigInfo MergeTaskProcessor.merge(String,String,String,ArrayList)", "snippet": "152.         }\n153.         String content = sb.substring(0, sb.lastIndexOf(Constants.NACOS_LINE_SEPARATOR));\n154. >         return new ConfigInfo(dataId, group, tenant, appName, content);\n155.     }\n156. }\n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/dump/DumpService.java", "line_number": 462, "column_number": -1, "description": "", "snippet": "459.                     if (datumList.size() > 0) {\n460.                         ConfigInfo cf = MergeTaskProcessor.merge(dataId, group, tenant, datumList);\n461. >                         String aggrContent = cf.getContent();\n462.                         String localContentMD5 = ConfigCacheService.getContentMd5(GroupKey.getKey(dataId, group));\n463.                         String aggrConetentMD5 = MD5Utils.md5Hex(aggrContent, Constants.ENCODE);\n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/model/ConfigInfoBase.java", "line_number": 87, "column_number": -1, "description": "start of procedure getContent()", "snippet": "84.     }\n85.     \n86. >     public String getContent() {\n87.         return content;\n88.     }\n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/model/ConfigInfoBase.java", "line_number": 88, "column_number": -1, "description": "return from a call to String ConfigInfoBase.getContent()", "snippet": "85.     \n86.     public String getContent() {\n87. >         return content;\n88.     }\n89.     \n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/dump/DumpService.java", "line_number": 463, "column_number": -1, "description": "", "snippet": "460.                         ConfigInfo cf = MergeTaskProcessor.merge(dataId, group, tenant, datumList);\n461.                         String aggrContent = cf.getContent();\n462. >                         String localContentMD5 = ConfigCacheService.getContentMd5(GroupKey.getKey(dataId, group));\n463.                         String aggrConetentMD5 = MD5Utils.md5Hex(aggrContent, Constants.ENCODE);\n464.                         \n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "line_number": 28, "column_number": -1, "description": "start of procedure getKey(...)", "snippet": "25. public class GroupKey {\n26.     \n27. >     public static String getKey(String dataId, String group) {\n28.         return doGetKey(dataId, group, \"\");\n29.     }\n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "line_number": 29, "column_number": -1, "description": "", "snippet": "26.     \n27.     public static String getKey(String dataId, String group) {\n28. >         return doGetKey(dataId, group, \"\");\n29.     }\n30.     \n"}, {"level": 2, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "line_number": 40, "column_number": -1, "description": "start of procedure doGetKey(...)", "snippet": "37.     }\n38.     \n39. >     private static String doGetKey(String dataId, String group, String datumStr) {\n40.         StringBuilder sb = new StringBuilder();\n41.         urlEncode(dataId, sb);\n"}, {"level": 2, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "line_number": 41, "column_number": -1, "description": "Skipping StringBuilder(): unknown method", "snippet": "38.     \n39.     private static String doGetKey(String dataId, String group, String datumStr) {\n40. >         StringBuilder sb = new StringBuilder();\n41.         urlEncode(dataId, sb);\n42.         sb.append('+');\n"}, {"level": 2, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "line_number": 42, "column_number": -1, "description": "", "snippet": "39.     private static String doGetKey(String dataId, String group, String datumStr) {\n40.         StringBuilder sb = new StringBuilder();\n41. >         urlEncode(dataId, sb);\n42.         sb.append('+');\n43.         urlEncode(group, sb);\n"}, {"level": 3, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "line_number": 104, "column_number": -1, "description": "start of procedure urlEncode(...)", "snippet": "101.      * + -> %2B % -> %25.\n102.      */\n103. >     static void urlEncode(String str, StringBuilder sb) {\n104.         for (int idx = 0; idx < str.length(); ++idx) {\n105.             char c = str.charAt(idx);\n"}, {"level": 3, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "line_number": 105, "column_number": -1, "description": "Taking false branch", "snippet": "102.      */\n103.     static void urlEncode(String str, StringBuilder sb) {\n104. >         for (int idx = 0; idx < str.length(); ++idx) {\n105.             char c = str.charAt(idx);\n106.             if ('+' == c) {\n"}, {"level": 3, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "line_number": 115, "column_number": -1, "description": "return from a call to void GroupKey.urlEncode(String,StringBuilder)", "snippet": "112.             }\n113.         }\n114. >     }\n115.     \n116. }\n"}, {"level": 2, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "line_number": 43, "column_number": -1, "description": "Skipping append(...): unknown method", "snippet": "40.         StringBuilder sb = new StringBuilder();\n41.         urlEncode(dataId, sb);\n42. >         sb.append('+');\n43.         urlEncode(group, sb);\n44.         if (StringUtils.isNotEmpty(datumStr)) {\n"}, {"level": 2, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "line_number": 44, "column_number": -1, "description": "", "snippet": "41.         urlEncode(dataId, sb);\n42.         sb.append('+');\n43. >         urlEncode(group, sb);\n44.         if (StringUtils.isNotEmpty(datumStr)) {\n45.             sb.append('+');\n"}, {"level": 3, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "line_number": 104, "column_number": -1, "description": "start of procedure urlEncode(...)", "snippet": "101.      * + -> %2B % -> %25.\n102.      */\n103. >     static void urlEncode(String str, StringBuilder sb) {\n104.         for (int idx = 0; idx < str.length(); ++idx) {\n105.             char c = str.charAt(idx);\n"}, {"level": 3, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "line_number": 105, "column_number": -1, "description": "Taking false branch", "snippet": "102.      */\n103.     static void urlEncode(String str, StringBuilder sb) {\n104. >         for (int idx = 0; idx < str.length(); ++idx) {\n105.             char c = str.charAt(idx);\n106.             if ('+' == c) {\n"}, {"level": 3, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "line_number": 115, "column_number": -1, "description": "return from a call to void GroupKey.urlEncode(String,StringBuilder)", "snippet": "112.             }\n113.         }\n114. >     }\n115.     \n116. }\n"}, {"level": 2, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "line_number": 45, "column_number": -1, "description": "", "snippet": "42.         sb.append('+');\n43.         urlEncode(group, sb);\n44. >         if (StringUtils.isNotEmpty(datumStr)) {\n45.             sb.append('+');\n46.             urlEncode(datumStr, sb);\n"}, {"level": 3, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 106, "column_number": -1, "description": "start of procedure isNotEmpty(...)", "snippet": "103.      * @return {@code true} if the str is not empty or not null\n104.      */\n105. >     public static boolean isNotEmpty(String str) {\n106.         return !isEmpty(str);\n107.     }\n"}, {"level": 3, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 107, "column_number": -1, "description": "", "snippet": "104.      */\n105.     public static boolean isNotEmpty(String str) {\n106. >         return !isEmpty(str);\n107.     }\n108.     \n"}, {"level": 4, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 116, "column_number": -1, "description": "start of procedure isEmpty(...)", "snippet": "113.      * @return {@code true} if the str is empty or null\n114.      */\n115. >     public static boolean isEmpty(String str) {\n116.         return str == null || str.length() == 0;\n117.     }\n"}, {"level": 4, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 117, "column_number": -1, "description": "Taking true branch", "snippet": "114.      */\n115.     public static boolean isEmpty(String str) {\n116. >         return str == null || str.length() == 0;\n117.     }\n118.     \n"}, {"level": 4, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 117, "column_number": -1, "description": "Taking true branch", "snippet": "114.      */\n115.     public static boolean isEmpty(String str) {\n116. >         return str == null || str.length() == 0;\n117.     }\n118.     \n"}, {"level": 4, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 117, "column_number": -1, "description": "return from a call to boolean StringUtils.isEmpty(String)", "snippet": "114.      */\n115.     public static boolean isEmpty(String str) {\n116. >         return str == null || str.length() == 0;\n117.     }\n118.     \n"}, {"level": 3, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 107, "column_number": -1, "description": "Taking false branch", "snippet": "104.      */\n105.     public static boolean isNotEmpty(String str) {\n106. >         return !isEmpty(str);\n107.     }\n108.     \n"}, {"level": 3, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 107, "column_number": -1, "description": "return from a call to boolean StringUtils.isNotEmpty(String)", "snippet": "104.      */\n105.     public static boolean isNotEmpty(String str) {\n106. >         return !isEmpty(str);\n107.     }\n108.     \n"}, {"level": 2, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "line_number": 45, "column_number": -1, "description": "Taking false branch", "snippet": "42.         sb.append('+');\n43.         urlEncode(group, sb);\n44. >         if (StringUtils.isNotEmpty(datumStr)) {\n45.             sb.append('+');\n46.             urlEncode(datumStr, sb);\n"}, {"level": 2, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "line_number": 50, "column_number": -1, "description": "return from a call to String GroupKey.doGetKey(String,String,String)", "snippet": "47.         }\n48.         \n49. >         return sb.toString();\n50.     }\n51.     \n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "line_number": 29, "column_number": -1, "description": "return from a call to String GroupKey.getKey(String,String)", "snippet": "26.     \n27.     public static String getKey(String dataId, String group) {\n28. >         return doGetKey(dataId, group, \"\");\n29.     }\n30.     \n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/dump/DumpService.java", "line_number": 463, "column_number": -1, "description": "", "snippet": "460.                         ConfigInfo cf = MergeTaskProcessor.merge(dataId, group, tenant, datumList);\n461.                         String aggrContent = cf.getContent();\n462. >                         String localContentMD5 = ConfigCacheService.getContentMd5(GroupKey.getKey(dataId, group));\n463.                         String aggrConetentMD5 = MD5Utils.md5Hex(aggrContent, Constants.ENCODE);\n464.                         \n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/ConfigCacheService.java", "line_number": 710, "column_number": -1, "description": "start of procedure getContentMd5(...)", "snippet": "707.      */\n708.     public static String getContentMd5(String groupKey) {\n709. >         return getContentMd5(groupKey, \"\", \"\");\n710.     }\n711.     \n"}, {"level": 2, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/ConfigCacheService.java", "line_number": 713, "column_number": -1, "description": "Definition of getContentMd5(...)", "snippet": "710.     }\n711.     \n712. >     public static String getContentMd5(String groupKey, String ip, String tag) {\n713.         CacheItem item = CACHE.get(groupKey);\n714.         if (item != null && item.isBeta && item.ips4Beta != null && item.ips4Beta.contains(ip)\n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/ConfigCacheService.java", "line_number": 710, "column_number": -1, "description": "return from a call to String ConfigCacheService.getContentMd5(String)", "snippet": "707.      */\n708.     public static String getContentMd5(String groupKey) {\n709. >         return getContentMd5(groupKey, \"\", \"\");\n710.     }\n711.     \n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/dump/DumpService.java", "line_number": 464, "column_number": -1, "description": "", "snippet": "461.                         String aggrContent = cf.getContent();\n462.                         String localContentMD5 = ConfigCacheService.getContentMd5(GroupKey.getKey(dataId, group));\n463. >                         String aggrConetentMD5 = MD5Utils.md5Hex(aggrContent, Constants.ENCODE);\n464.                         \n465.                         if (!StringUtils.equals(localContentMD5, aggrConetentMD5)) {\n"}, {"level": 1, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/MD5Utils.java", "line_number": 72, "column_number": -1, "description": "start of procedure md5Hex(...)", "snippet": "69.     public static String md5Hex(String value, String encode) {\n70.         try {\n71. >             return md5Hex(value.getBytes(encode));\n72.         } catch (Exception e) {\n73.             throw new RuntimeException(e);\n"}]}, {"url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedConfigInfoPersistServiceImpl.java", "rawCode": "/*\n * Copyright 1999-2022 Alibaba Group Holding Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.alibaba.nacos.config.server.service.repository.embedded;\n\nimport com.alibaba.nacos.api.exception.NacosException;\nimport com.alibaba.nacos.api.exception.runtime.NacosRuntimeException;\nimport com.alibaba.nacos.common.notify.NotifyCenter;\nimport com.alibaba.nacos.common.utils.MD5Utils;\nimport com.alibaba.nacos.common.utils.Pair;\nimport com.alibaba.nacos.common.utils.StringUtils;\nimport com.alibaba.nacos.config.server.constant.Constants;\nimport com.alibaba.nacos.config.server.enums.FileTypeEnum;\nimport com.alibaba.nacos.config.server.exception.NacosConfigException;\nimport com.alibaba.nacos.config.server.model.ConfigAdvanceInfo;\nimport com.alibaba.nacos.config.server.model.ConfigAllInfo;\nimport com.alibaba.nacos.config.server.model.ConfigInfo;\nimport com.alibaba.nacos.config.server.model.ConfigInfoBase;\nimport com.alibaba.nacos.config.server.model.ConfigInfoStateWrapper;\nimport com.alibaba.nacos.config.server.model.ConfigInfoWrapper;\nimport com.alibaba.nacos.config.server.model.ConfigKey;\nimport com.alibaba.nacos.config.server.model.ConfigOperateResult;\nimport com.alibaba.nacos.config.server.model.SameConfigPolicy;\nimport com.alibaba.nacos.config.server.service.repository.ConfigInfoPersistService;\nimport com.alibaba.nacos.config.server.service.repository.HistoryConfigInfoPersistService;\nimport com.alibaba.nacos.config.server.service.sql.EmbeddedStorageContextUtils;\nimport com.alibaba.nacos.config.server.utils.ParamUtils;\nimport com.alibaba.nacos.core.distributed.id.IdGeneratorManager;\nimport com.alibaba.nacos.persistence.configuration.condition.ConditionOnEmbeddedStorage;\nimport com.alibaba.nacos.persistence.datasource.DataSourceService;\nimport com.alibaba.nacos.persistence.datasource.DynamicDataSource;\nimport com.alibaba.nacos.persistence.model.Page;\nimport com.alibaba.nacos.persistence.model.event.DerbyImportEvent;\nimport com.alibaba.nacos.persistence.repository.PaginationHelper;\nimport com.alibaba.nacos.persistence.repository.embedded.EmbeddedPaginationHelperImpl;\nimport com.alibaba.nacos.persistence.repository.embedded.EmbeddedStorageContextHolder;\nimport com.alibaba.nacos.persistence.repository.embedded.operate.DatabaseOperate;\nimport com.alibaba.nacos.plugin.datasource.MapperManager;\nimport com.alibaba.nacos.plugin.datasource.constants.CommonConstant;\nimport com.alibaba.nacos.plugin.datasource.constants.FieldConstant;\nimport com.alibaba.nacos.plugin.datasource.constants.TableConstant;\nimport com.alibaba.nacos.plugin.datasource.mapper.ConfigInfoMapper;\nimport com.alibaba.nacos.plugin.datasource.mapper.ConfigTagsRelationMapper;\nimport com.alibaba.nacos.plugin.datasource.model.MapperContext;\nimport com.alibaba.nacos.plugin.datasource.model.MapperResult;\nimport com.alibaba.nacos.plugin.encryption.handler.EncryptionHandler;\nimport com.alibaba.nacos.sys.env.EnvUtil;\nimport org.apache.commons.collections.CollectionUtils;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.stereotype.Service;\n\nimport java.io.IOException;\nimport java.sql.Timestamp;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Objects;\nimport java.util.Optional;\nimport java.util.function.BiConsumer;\nimport java.util.stream.Collectors;\n\nimport static com.alibaba.nacos.config.server.service.repository.ConfigRowMapperInjector.CONFIG_ADVANCE_INFO_ROW_MAPPER;\nimport static com.alibaba.nacos.config.server.service.repository.ConfigRowMapperInjector.CONFIG_ALL_INFO_ROW_MAPPER;\nimport static com.alibaba.nacos.config.server.service.repository.ConfigRowMapperInjector.CONFIG_INFO_BASE_ROW_MAPPER;\nimport static com.alibaba.nacos.config.server.service.repository.ConfigRowMapperInjector.CONFIG_INFO_ROW_MAPPER;\nimport static com.alibaba.nacos.config.server.service.repository.ConfigRowMapperInjector.CONFIG_INFO_STATE_WRAPPER_ROW_MAPPER;\nimport static com.alibaba.nacos.config.server.service.repository.ConfigRowMapperInjector.CONFIG_INFO_WRAPPER_ROW_MAPPER;\nimport static com.alibaba.nacos.config.server.service.repository.ConfigRowMapperInjector.CONFIG_KEY_ROW_MAPPER;\nimport static com.alibaba.nacos.config.server.utils.LogUtil.DEFAULT_LOG;\nimport static com.alibaba.nacos.persistence.repository.RowMapperManager.MAP_ROW_MAPPER;\n\n/**\n * EmbeddedConfigInfoPersistServiceImpl.\n *\n * @author lixiaoshuang\n */\n@SuppressWarnings({\"PMD.MethodReturnWrapperTypeRule\", \"checkstyle:linelength\"})\n@Conditional(value = ConditionOnEmbeddedStorage.class)\n@Service(\"embeddedConfigInfoPersistServiceImpl\")\npublic class EmbeddedConfigInfoPersistServiceImpl implements ConfigInfoPersistService {\n    \n    private static final String RESOURCE_CONFIG_INFO_ID = \"config-info-id\";\n    \n    private static final String RESOURCE_CONFIG_HISTORY_ID = \"config-history-id\";\n    \n    private static final String RESOURCE_CONFIG_TAG_RELATION_ID = \"config-tag-relation-id\";\n    \n    private static final String RESOURCE_APP_CONFIGDATA_RELATION_SUBS = \"app-configdata-relation-subs\";\n    \n    private static final String RESOURCE_CONFIG_BETA_ID = \"config-beta-id\";\n    \n    private static final String RESOURCE_NAMESPACE_ID = \"namespace-id\";\n    \n    private static final String RESOURCE_USER_ID = \"user-id\";\n    \n    private static final String RESOURCE_ROLE_ID = \"role-id\";\n    \n    private static final String RESOURCE_PERMISSIONS_ID = \"permissions_id\";\n    \n    private static final String DATA_ID = \"dataId\";\n    \n    private static final String GROUP = \"group\";\n    \n    private static final String APP_NAME = \"appName\";\n    \n    private static final String CONTENT = \"content\";\n    \n    private static final String TENANT = \"tenant_id\";\n    \n    public static final String SPOT = \".\";\n    \n    private DataSourceService dataSourceService;\n    \n    private final DatabaseOperate databaseOperate;\n    \n    private final IdGeneratorManager idGeneratorManager;\n    \n    private MapperManager mapperManager;\n    \n    private HistoryConfigInfoPersistService historyConfigInfoPersistService;\n    \n    /**\n     * The constructor sets the dependency injection order.\n     *\n     * @param databaseOperate    {@link EmbeddedStoragePersistServiceImpl}\n     * @param idGeneratorManager {@link IdGeneratorManager}\n     */\n    public EmbeddedConfigInfoPersistServiceImpl(DatabaseOperate databaseOperate, IdGeneratorManager idGeneratorManager,\n            @Qualifier(\"embeddedHistoryConfigInfoPersistServiceImpl\") HistoryConfigInfoPersistService historyConfigInfoPersistService) {\n        this.databaseOperate = databaseOperate;\n        this.idGeneratorManager = idGeneratorManager;\n        idGeneratorManager.register(RESOURCE_CONFIG_INFO_ID, RESOURCE_CONFIG_HISTORY_ID,\n                RESOURCE_CONFIG_TAG_RELATION_ID, RESOURCE_APP_CONFIGDATA_RELATION_SUBS, RESOURCE_CONFIG_BETA_ID,\n                RESOURCE_NAMESPACE_ID, RESOURCE_USER_ID, RESOURCE_ROLE_ID, RESOURCE_PERMISSIONS_ID);\n        this.dataSourceService = DynamicDataSource.getInstance().getDataSource();\n        Boolean isDataSourceLogEnable = EnvUtil.getProperty(CommonConstant.NACOS_PLUGIN_DATASOURCE_LOG, Boolean.class,\n                false);\n        this.mapperManager = MapperManager.instance(isDataSourceLogEnable);\n        this.historyConfigInfoPersistService = historyConfigInfoPersistService;\n        NotifyCenter.registerToSharePublisher(DerbyImportEvent.class);\n        \n    }\n    \n    @Override\n    public <E> PaginationHelper<E> createPaginationHelper() {\n        return new EmbeddedPaginationHelperImpl<>(databaseOperate);\n    }\n    \n    @Override\n    public String generateLikeArgument(String s) {\n        String fuzzySearchSign = \"\\\\*\";\n        String sqlLikePercentSign = \"%\";\n        if (s.contains(PATTERN_STR)) {\n            return s.replaceAll(fuzzySearchSign, sqlLikePercentSign);\n        } else {\n            return s;\n        }\n    }\n    \n    @Override\n    public ConfigInfoStateWrapper findConfigInfoState(final String dataId, final String group, final String tenant) {\n        final String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        \n        final String sql = configInfoMapper.select(\n                Arrays.asList(\"id\", \"data_id\", \"group_id\", \"tenant_id\", \"gmt_modified\"),\n                Arrays.asList(\"data_id\", \"group_id\", \"tenant_id\"));\n        return databaseOperate.queryOne(sql, new Object[] {dataId, group, tenantTmp},\n                CONFIG_INFO_STATE_WRAPPER_ROW_MAPPER);\n        \n    }\n    \n    private ConfigOperateResult getConfigInfoOperateResult(String dataId, String group, String tenant) {\n        ConfigInfoStateWrapper configInfo4Beta = this.findConfigInfoState(dataId, group, tenant);\n        if (configInfo4Beta == null) {\n            return new ConfigOperateResult(false);\n        }\n        return new ConfigOperateResult(configInfo4Beta.getId(), configInfo4Beta.getLastModified());\n        \n    }\n    \n    @Override\n    public ConfigOperateResult addConfigInfo(final String srcIp, final String srcUser, final ConfigInfo configInfo,\n            final Map<String, Object> configAdvanceInfo) {\n        return addConfigInfo(srcIp, srcUser, configInfo, configAdvanceInfo, null);\n    }\n    \n    private ConfigOperateResult addConfigInfo(final String srcIp, final String srcUser, final ConfigInfo configInfo,\n            final Map<String, Object> configAdvanceInfo, BiConsumer<Boolean, Throwable> consumer) {\n        \n        try {\n            final String tenantTmp =\n                    StringUtils.isBlank(configInfo.getTenant()) ? StringUtils.EMPTY : configInfo.getTenant();\n            configInfo.setTenant(tenantTmp);\n            \n            long configId = idGeneratorManager.nextId(RESOURCE_CONFIG_INFO_ID);\n            long hisId = idGeneratorManager.nextId(RESOURCE_CONFIG_HISTORY_ID);\n            \n            addConfigInfoAtomic(configId, srcIp, srcUser, configInfo, configAdvanceInfo);\n            String configTags = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"config_tags\");\n            \n            addConfigTagsRelation(configId, configTags, configInfo.getDataId(), configInfo.getGroup(),\n                    configInfo.getTenant());\n            Timestamp now = new Timestamp(System.currentTimeMillis());\n            \n            historyConfigInfoPersistService.insertConfigHistoryAtomic(hisId, configInfo, srcIp, srcUser, now, \"I\");\n            EmbeddedStorageContextUtils.onModifyConfigInfo(configInfo, srcIp, now);\n            databaseOperate.blockUpdate(consumer);\n            return getConfigInfoOperateResult(configInfo.getDataId(), configInfo.getGroup(), tenantTmp);\n            \n        } finally {\n            EmbeddedStorageContextHolder.cleanAllContext();\n        }\n    }\n    \n    @Override\n    public ConfigOperateResult insertOrUpdate(String srcIp, String srcUser, ConfigInfo configInfo,\n            Map<String, Object> configAdvanceInfo) {\n        if (Objects.isNull(findConfigInfo(configInfo.getDataId(), configInfo.getGroup(), configInfo.getTenant()))) {\n            return addConfigInfo(srcIp, srcUser, configInfo, configAdvanceInfo);\n        } else {\n            return updateConfigInfo(configInfo, srcIp, srcUser, configAdvanceInfo);\n        }\n    }\n    \n    @Override\n    public ConfigOperateResult insertOrUpdateCas(String srcIp, String srcUser, ConfigInfo configInfo,\n            Map<String, Object> configAdvanceInfo) {\n        if (Objects.isNull(findConfigInfo(configInfo.getDataId(), configInfo.getGroup(), configInfo.getTenant()))) {\n            return addConfigInfo(srcIp, srcUser, configInfo, configAdvanceInfo);\n        } else {\n            return updateConfigInfoCas(configInfo, srcIp, srcUser, configAdvanceInfo);\n        }\n    }\n    \n    @Override\n    public long addConfigInfoAtomic(final long id, final String srcIp, final String srcUser,\n            final ConfigInfo configInfo, Map<String, Object> configAdvanceInfo) {\n        final String appNameTmp =\n                StringUtils.isBlank(configInfo.getAppName()) ? StringUtils.EMPTY : configInfo.getAppName();\n        final String tenantTmp =\n                StringUtils.isBlank(configInfo.getTenant()) ? StringUtils.EMPTY : configInfo.getTenant();\n        final String desc = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"desc\");\n        final String use = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"use\");\n        final String effect = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"effect\");\n        final String type = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"type\");\n        final String schema = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"schema\");\n        final String md5Tmp = MD5Utils.md5Hex(configInfo.getContent(), Constants.ENCODE);\n        final String encryptedDataKey =\n                configInfo.getEncryptedDataKey() == null ? StringUtils.EMPTY : configInfo.getEncryptedDataKey();\n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        Timestamp time = new Timestamp(System.currentTimeMillis());\n        \n        final String sql = configInfoMapper.insert(\n                Arrays.asList(\"id\", \"data_id\", \"group_id\", \"tenant_id\", \"app_name\", \"content\", \"md5\", \"src_ip\",\n                        \"src_user\", \"gmt_create\", \"gmt_modified\", \"c_desc\", \"c_use\", \"effect\", \"type\", \"c_schema\",\n                        \"encrypted_data_key\"));\n        final Object[] args = new Object[] {id, configInfo.getDataId(), configInfo.getGroup(), tenantTmp, appNameTmp,\n                configInfo.getContent(), md5Tmp, srcIp, srcUser, time, time, desc, use, effect, type, schema,\n                encryptedDataKey};\n        EmbeddedStorageContextHolder.addSqlContext(sql, args);\n        return id;\n    }\n    \n    @Override\n    public void addConfigTagRelationAtomic(long configId, String tagName, String dataId, String group, String tenant) {\n        ConfigTagsRelationMapper configTagsRelationMapper = mapperManager.findMapper(\n                dataSourceService.getDataSourceType(), TableConstant.CONFIG_TAGS_RELATION);\n        final String sql = configTagsRelationMapper.insert(\n                Arrays.asList(\"id\", \"tag_name\", \"tag_type\", \"data_id\", \"group_id\", \"tenant_id\"));\n        final Object[] args = new Object[] {configId, tagName, StringUtils.EMPTY, dataId, group, tenant};\n        EmbeddedStorageContextHolder.addSqlContext(sql, args);\n    }\n    \n    @Override\n    public void addConfigTagsRelation(long configId, String configTags, String dataId, String group, String tenant) {\n        if (StringUtils.isNotBlank(configTags)) {\n            String[] tagArr = configTags.split(\",\");\n            for (int i = 0; i < tagArr.length; i++) {\n                addConfigTagRelationAtomic(configId, tagArr[i], dataId, group, tenant);\n            }\n        }\n    }\n    \n    @Override\n    public Map<String, Object> batchInsertOrUpdate(List<ConfigAllInfo> configInfoList, String srcUser, String srcIp,\n            Map<String, Object> configAdvanceInfo, SameConfigPolicy policy) throws NacosException {\n        int succCount = 0;\n        int skipCount = 0;\n        List<Map<String, String>> failData = null;\n        List<Map<String, String>> skipData = null;\n        \n        final BiConsumer<Boolean, Throwable> callFinally = (result, t) -> {\n            if (t != null) {\n                throw new NacosRuntimeException(0, t);\n            }\n        };\n        \n        for (int i = 0; i < configInfoList.size(); i++) {\n            ConfigAllInfo configInfo = configInfoList.get(i);\n            try {\n                ParamUtils.checkParam(configInfo.getDataId(), configInfo.getGroup(), \"datumId\",\n                        configInfo.getContent());\n            } catch (Throwable e) {\n                DEFAULT_LOG.error(\"data verification failed\", e);\n                throw e;\n            }\n            ConfigInfo configInfo2Save = new ConfigInfo(configInfo.getDataId(), configInfo.getGroup(),\n                    configInfo.getTenant(), configInfo.getAppName(), configInfo.getContent());\n            configInfo2Save.setEncryptedDataKey(\n                    configInfo.getEncryptedDataKey() == null ? \"\" : configInfo.getEncryptedDataKey());\n            String type = configInfo.getType();\n            if (StringUtils.isBlank(type)) {\n                // simple judgment of file type based on suffix\n                if (configInfo.getDataId().contains(SPOT)) {\n                    String extName = configInfo.getDataId().substring(configInfo.getDataId().lastIndexOf(SPOT) + 1);\n                    FileTypeEnum fileTypeEnum = FileTypeEnum.getFileTypeEnumByFileExtensionOrFileType(extName);\n                    type = fileTypeEnum.getFileType();\n                } else {\n                    type = FileTypeEnum.getFileTypeEnumByFileExtensionOrFileType(null).getFileType();\n                }\n            }\n            if (configAdvanceInfo == null) {\n                configAdvanceInfo = new HashMap<>(16);\n            }\n            configAdvanceInfo.put(\"type\", type);\n            configAdvanceInfo.put(\"desc\", configInfo.getDesc());\n            try {\n                ConfigInfo foundCfg = findConfigInfo(configInfo2Save.getDataId(), configInfo2Save.getGroup(),\n                        configInfo2Save.getTenant());\n                if (foundCfg != null) {\n                    throw new Throwable(\"DuplicateKeyException: config already exists, should be overridden\");\n                }\n                addConfigInfo(srcIp, srcUser, configInfo2Save, configAdvanceInfo, callFinally);\n                succCount++;\n            } catch (Throwable e) {\n                if (!StringUtils.contains(e.toString(), \"DuplicateKeyException\")) {\n                    throw new NacosException(NacosException.SERVER_ERROR, e);\n                }\n                // uniqueness constraint conflict\n                if (SameConfigPolicy.ABORT.equals(policy)) {\n                    failData = new ArrayList<>();\n                    skipData = new ArrayList<>();\n                    Map<String, String> faileditem = new HashMap<>(2);\n                    faileditem.put(\"dataId\", configInfo2Save.getDataId());\n                    faileditem.put(\"group\", configInfo2Save.getGroup());\n                    failData.add(faileditem);\n                    for (int j = (i + 1); j < configInfoList.size(); j++) {\n                        ConfigInfo skipConfigInfo = configInfoList.get(j);\n                        Map<String, String> skipitem = new HashMap<>(2);\n                        skipitem.put(\"dataId\", skipConfigInfo.getDataId());\n                        skipitem.put(\"group\", skipConfigInfo.getGroup());\n                        skipData.add(skipitem);\n                    }\n                    break;\n                } else if (SameConfigPolicy.SKIP.equals(policy)) {\n                    skipCount++;\n                    if (skipData == null) {\n                        skipData = new ArrayList<>();\n                    }\n                    Map<String, String> skipitem = new HashMap<>(2);\n                    skipitem.put(\"dataId\", configInfo2Save.getDataId());\n                    skipitem.put(\"group\", configInfo2Save.getGroup());\n                    skipData.add(skipitem);\n                } else if (SameConfigPolicy.OVERWRITE.equals(policy)) {\n                    succCount++;\n                    updateConfigInfo(configInfo2Save, srcIp, srcUser, configAdvanceInfo);\n                }\n            }\n        }\n        Map<String, Object> result = new HashMap<>(4);\n        result.put(\"succCount\", succCount);\n        result.put(\"skipCount\", skipCount);\n        if (failData != null && !failData.isEmpty()) {\n            result.put(\"failData\", failData);\n        }\n        if (skipData != null && !skipData.isEmpty()) {\n            result.put(\"skipData\", skipData);\n        }\n        return result;\n    }\n    \n    @Override\n    public void removeConfigInfo(final String dataId, final String group, final String tenant, final String srcIp,\n            final String srcUser) {\n        final Timestamp time = new Timestamp(System.currentTimeMillis());\n        ConfigInfo configInfo = findConfigInfo(dataId, group, tenant);\n        if (Objects.nonNull(configInfo)) {\n            try {\n                String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n                \n                removeConfigInfoAtomic(dataId, group, tenantTmp, srcIp, srcUser);\n                removeTagByIdAtomic(configInfo.getId());\n                historyConfigInfoPersistService.insertConfigHistoryAtomic(configInfo.getId(), configInfo, srcIp,\n                        srcUser, time, \"D\");\n                \n                EmbeddedStorageContextUtils.onDeleteConfigInfo(tenantTmp, group, dataId, srcIp, time);\n                \n                boolean result = databaseOperate.update(EmbeddedStorageContextHolder.getCurrentSqlContext());\n                if (!result) {\n                    throw new NacosConfigException(\"config deletion failed\");\n                }\n            } finally {\n                EmbeddedStorageContextHolder.cleanAllContext();\n            }\n        }\n    }\n    \n    @Override\n    public List<ConfigInfo> removeConfigInfoByIds(final List<Long> ids, final String srcIp, final String srcUser) {\n        if (CollectionUtils.isEmpty(ids)) {\n            return null;\n        }\n        ids.removeAll(Collections.singleton(null));\n        final Timestamp time = new Timestamp(System.currentTimeMillis());\n        try {\n            String idsStr = StringUtils.join(ids, StringUtils.COMMA);\n            List<ConfigInfo> configInfoList = findConfigInfosByIds(idsStr);\n            if (CollectionUtils.isNotEmpty(configInfoList)) {\n                removeConfigInfoByIdsAtomic(idsStr);\n                for (ConfigInfo configInfo : configInfoList) {\n                    removeTagByIdAtomic(configInfo.getId());\n                    historyConfigInfoPersistService.insertConfigHistoryAtomic(configInfo.getId(), configInfo, srcIp,\n                            srcUser, time, \"D\");\n                }\n            }\n            \n            EmbeddedStorageContextUtils.onBatchDeleteConfigInfo(configInfoList);\n            boolean result = databaseOperate.update(EmbeddedStorageContextHolder.getCurrentSqlContext());\n            if (!result) {\n                throw new NacosConfigException(\"Failed to config batch deletion\");\n            }\n            \n            return configInfoList;\n        } finally {\n            EmbeddedStorageContextHolder.cleanAllContext();\n        }\n    }\n    \n    @Override\n    public void removeTagByIdAtomic(long id) {\n        ConfigTagsRelationMapper configTagsRelationMapper = mapperManager.findMapper(\n                dataSourceService.getDataSourceType(), TableConstant.CONFIG_TAGS_RELATION);\n        final String sql = configTagsRelationMapper.delete(Arrays.asList(\"id\"));\n        final Object[] args = new Object[] {id};\n        EmbeddedStorageContextHolder.addSqlContext(sql, args);\n    }\n    \n    @Override\n    public void removeConfigInfoAtomic(final String dataId, final String group, final String tenant, final String srcIp,\n            final String srcUser) {\n        String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        final String sql = configInfoMapper.delete(Arrays.asList(\"data_id\", \"group_id\", \"tenant_id\"));\n        final Object[] args = new Object[] {dataId, group, tenantTmp};\n        \n        EmbeddedStorageContextHolder.addSqlContext(sql, args);\n    }\n    \n    @Override\n    public void removeConfigInfoByIdsAtomic(final String ids) {\n        if (StringUtils.isBlank(ids)) {\n            return;\n        }\n        List<Long> paramList = new ArrayList<>();\n        String[] idArr = ids.split(\",\");\n        for (int i = 0; i < idArr.length; i++) {\n            paramList.add(Long.parseLong(idArr[i]));\n        }\n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        MapperContext context = new MapperContext();\n        context.putWhereParameter(FieldConstant.IDS, paramList);\n        MapperResult result = configInfoMapper.removeConfigInfoByIdsAtomic(context);\n        EmbeddedStorageContextHolder.addSqlContext(result.getSql(), result.getParamList().toArray());\n    }\n    \n    @Override\n    public ConfigOperateResult updateConfigInfo(final ConfigInfo configInfo, final String srcIp, final String srcUser,\n            final Map<String, Object> configAdvanceInfo) {\n        try {\n            ConfigInfo oldConfigInfo = findConfigInfo(configInfo.getDataId(), configInfo.getGroup(),\n                    configInfo.getTenant());\n            \n            final String tenantTmp =\n                    StringUtils.isBlank(configInfo.getTenant()) ? StringUtils.EMPTY : configInfo.getTenant();\n            \n            oldConfigInfo.setTenant(tenantTmp);\n            \n            String appNameTmp = oldConfigInfo.getAppName();\n            // If the appName passed by the user is not empty, the appName of the user is persisted;\n            // otherwise, the appName of db is used. Empty string is required to clear appName\n            if (configInfo.getAppName() == null) {\n                configInfo.setAppName(appNameTmp);\n            }\n            \n            updateConfigInfoAtomic(configInfo, srcIp, srcUser, configAdvanceInfo);\n            \n            String configTags = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"config_tags\");\n            if (configTags != null) {\n                // Delete all tags and recreate them\n                removeTagByIdAtomic(oldConfigInfo.getId());\n                addConfigTagsRelation(oldConfigInfo.getId(), configTags, configInfo.getDataId(), configInfo.getGroup(),\n                        configInfo.getTenant());\n            }\n            \n            Timestamp time = new Timestamp(System.currentTimeMillis());\n            \n            historyConfigInfoPersistService.insertConfigHistoryAtomic(oldConfigInfo.getId(), oldConfigInfo, srcIp,\n                    srcUser, time, \"U\");\n            \n            EmbeddedStorageContextUtils.onModifyConfigInfo(configInfo, srcIp, time);\n            databaseOperate.blockUpdate();\n            return getConfigInfoOperateResult(configInfo.getDataId(), configInfo.getGroup(), tenantTmp);\n            \n        } finally {\n            EmbeddedStorageContextHolder.cleanAllContext();\n        }\n    }\n    \n    @Override\n    public ConfigOperateResult updateConfigInfoCas(final ConfigInfo configInfo, final String srcIp,\n            final String srcUser, final Map<String, Object> configAdvanceInfo) {\n        try {\n            ConfigInfo oldConfigInfo = findConfigInfo(configInfo.getDataId(), configInfo.getGroup(),\n                    configInfo.getTenant());\n            \n            final String tenantTmp =\n                    StringUtils.isBlank(configInfo.getTenant()) ? StringUtils.EMPTY : configInfo.getTenant();\n            \n            oldConfigInfo.setTenant(tenantTmp);\n            \n            String appNameTmp = oldConfigInfo.getAppName();\n            // If the appName passed by the user is not empty, the appName of the user is persisted;\n            // otherwise, the appName of db is used. Empty string is required to clear appName\n            if (configInfo.getAppName() == null) {\n                configInfo.setAppName(appNameTmp);\n            }\n            \n            updateConfigInfoAtomicCas(configInfo, srcIp, srcUser, configAdvanceInfo);\n            \n            String configTags = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"config_tags\");\n            if (configTags != null) {\n                // Delete all tags and recreate them\n                removeTagByIdAtomic(oldConfigInfo.getId());\n                addConfigTagsRelation(oldConfigInfo.getId(), configTags, configInfo.getDataId(), configInfo.getGroup(),\n                        configInfo.getTenant());\n            }\n            Timestamp time = new Timestamp(System.currentTimeMillis());\n            \n            historyConfigInfoPersistService.insertConfigHistoryAtomic(oldConfigInfo.getId(), oldConfigInfo, srcIp,\n                    srcUser, time, \"U\");\n            \n            EmbeddedStorageContextUtils.onModifyConfigInfo(configInfo, srcIp, time);\n            boolean success = databaseOperate.blockUpdate();\n            if (success) {\n                return getConfigInfoOperateResult(configInfo.getDataId(), configInfo.getGroup(), tenantTmp);\n            } else {\n                return new ConfigOperateResult(false);\n            }\n        } finally {\n            EmbeddedStorageContextHolder.cleanAllContext();\n        }\n    }\n    \n    private ConfigOperateResult updateConfigInfoAtomicCas(final ConfigInfo configInfo, final String srcIp,\n            final String srcUser, Map<String, Object> configAdvanceInfo) {\n        final String appNameTmp =\n                StringUtils.isBlank(configInfo.getAppName()) ? StringUtils.EMPTY : configInfo.getAppName();\n        final String tenantTmp =\n                StringUtils.isBlank(configInfo.getTenant()) ? StringUtils.EMPTY : configInfo.getTenant();\n        final String md5Tmp = MD5Utils.md5Hex(configInfo.getContent(), Constants.ENCODE);\n        final String desc = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"desc\");\n        final String use = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"use\");\n        final String effect = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"effect\");\n        final String type = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"type\");\n        final String schema = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"schema\");\n        \n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        Timestamp time = new Timestamp(System.currentTimeMillis());\n        MapperContext context = new MapperContext();\n        context.putUpdateParameter(FieldConstant.CONTENT, configInfo.getContent());\n        context.putUpdateParameter(FieldConstant.MD5, md5Tmp);\n        context.putUpdateParameter(FieldConstant.SRC_IP, srcIp);\n        context.putUpdateParameter(FieldConstant.SRC_USER, srcUser);\n        context.putUpdateParameter(FieldConstant.GMT_MODIFIED, time);\n        context.putUpdateParameter(FieldConstant.APP_NAME, appNameTmp);\n        context.putUpdateParameter(FieldConstant.C_DESC, desc);\n        context.putUpdateParameter(FieldConstant.C_USE, use);\n        context.putUpdateParameter(FieldConstant.EFFECT, effect);\n        context.putUpdateParameter(FieldConstant.TYPE, type);\n        context.putUpdateParameter(FieldConstant.C_SCHEMA, schema);\n        \n        context.putWhereParameter(FieldConstant.DATA_ID, configInfo.getDataId());\n        context.putWhereParameter(FieldConstant.GROUP_ID, configInfo.getGroup());\n        context.putWhereParameter(FieldConstant.TENANT_ID, tenantTmp);\n        context.putWhereParameter(FieldConstant.MD5, configInfo.getMd5());\n        MapperResult mapperResult = configInfoMapper.updateConfigInfoAtomicCas(context);\n        \n        EmbeddedStorageContextHolder.addSqlContext(mapperResult.getSql(), mapperResult.getParamList().toArray());\n        return getConfigInfoOperateResult(configInfo.getDataId(), configInfo.getGroup(), tenantTmp);\n        \n    }\n    \n    @Override\n    public void updateConfigInfoAtomic(final ConfigInfo configInfo, final String srcIp, final String srcUser,\n            Map<String, Object> configAdvanceInfo) {\n        final String appNameTmp =\n                StringUtils.isBlank(configInfo.getAppName()) ? StringUtils.EMPTY : configInfo.getAppName();\n        final String tenantTmp =\n                StringUtils.isBlank(configInfo.getTenant()) ? StringUtils.EMPTY : configInfo.getTenant();\n        final String md5Tmp = MD5Utils.md5Hex(configInfo.getContent(), Constants.ENCODE);\n        final String desc = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"desc\");\n        final String use = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"use\");\n        final String effect = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"effect\");\n        final String type = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"type\");\n        final String schema = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"schema\");\n        final String encryptedDataKey =\n                configInfo.getEncryptedDataKey() == null ? StringUtils.EMPTY : configInfo.getEncryptedDataKey();\n        \n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        final String sql = configInfoMapper.update(\n                Arrays.asList(\"content\", \"md5\", \"src_ip\", \"src_user\", \"gmt_modified\", \"app_name\", \"c_desc\", \"c_use\",\n                        \"effect\", \"type\", \"c_schema\", \"encrypted_data_key\"),\n                Arrays.asList(\"data_id\", \"group_id\", \"tenant_id\"));\n        Timestamp time = new Timestamp(System.currentTimeMillis());\n        \n        final Object[] args = new Object[] {configInfo.getContent(), md5Tmp, srcIp, srcUser, time, appNameTmp, desc,\n                use, effect, type, schema, encryptedDataKey, configInfo.getDataId(), configInfo.getGroup(), tenantTmp};\n        \n        EmbeddedStorageContextHolder.addSqlContext(sql, args);\n    }\n    \n    @Override\n    public void updateMd5(String dataId, String group, String tenant, String md5, Timestamp lastTime) {\n        String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n        try {\n            ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                    TableConstant.CONFIG_INFO);\n            final String sql = configInfoMapper.update(Arrays.asList(\"md5\"),\n                    Arrays.asList(\"data_id\", \"group_id\", \"tenant_id\", \"gmt_modified\"));\n            final Object[] args = new Object[] {md5, dataId, group, tenantTmp, lastTime};\n            \n            EmbeddedStorageContextHolder.addSqlContext(sql, args);\n            \n            boolean result = databaseOperate.update(EmbeddedStorageContextHolder.getCurrentSqlContext());\n            if (!result) {\n                throw new NacosConfigException(\"Failed to config the MD5 modification\");\n            }\n        } finally {\n            EmbeddedStorageContextHolder.cleanAllContext();\n        }\n    }\n    \n    @Override\n    public long findConfigMaxId() {\n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        MapperResult mapperResult = configInfoMapper.findConfigMaxId(null);\n        return Optional.ofNullable(databaseOperate.queryOne(mapperResult.getSql(), Long.class)).orElse(0L);\n    }\n    \n    @Override\n    public List<ConfigInfo> findAllDataIdAndGroup() {\n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        MapperResult sql = configInfoMapper.findAllDataIdAndGroup(null);\n        return databaseOperate.queryMany(sql.getSql(), EMPTY_ARRAY, CONFIG_INFO_ROW_MAPPER);\n    }\n    \n    @Override\n    public ConfigInfoBase findConfigInfoBase(final String dataId, final String group) {\n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        final String sql = configInfoMapper.select(Arrays.asList(\"id\", \"data_id\", \"group_id\", \"content\"),\n                Arrays.asList(\"data_id\", \"group_id\", \"tenant_id\"));\n        \n        return databaseOperate.queryOne(sql, new Object[] {dataId, group, StringUtils.EMPTY},\n                CONFIG_INFO_BASE_ROW_MAPPER);\n    }\n    \n    @Override\n    public ConfigInfo findConfigInfo(long id) {\n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        final String sql = configInfoMapper.select(\n                Arrays.asList(\"id\", \"data_id\", \"group_id\", \"tenant_id\", \"app_name\", \"content\"),\n                Collections.singletonList(\"id\"));\n        return databaseOperate.queryOne(sql, new Object[] {id}, CONFIG_INFO_ROW_MAPPER);\n    }\n    \n    @Override\n    public ConfigInfoWrapper findConfigInfo(final String dataId, final String group, final String tenant) {\n        final String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        final String sql = configInfoMapper.select(\n                Arrays.asList(\"id\", \"data_id\", \"group_id\", \"tenant_id\", \"app_name\", \"content\", \"md5\", \"type\",\n                        \"encrypted_data_key\", \"gmt_modified\"), Arrays.asList(\"data_id\", \"group_id\", \"tenant_id\"));\n        final Object[] args = new Object[] {dataId, group, tenantTmp};\n        return databaseOperate.queryOne(sql, args, CONFIG_INFO_WRAPPER_ROW_MAPPER);\n        \n    }\n    \n    @Override\n    public Page<ConfigInfo> findConfigInfo4Page(final int pageNo, final int pageSize, final String dataId,\n            final String group, final String tenant, final Map<String, Object> configAdvanceInfo) {\n        String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n        final String appName = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"appName\");\n        final String content = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"content\");\n        final String configTags = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"config_tags\");\n        MapperResult sql;\n        MapperResult sqlCount;\n        \n        final MapperContext context = new MapperContext();\n        context.putWhereParameter(FieldConstant.TENANT_ID, tenantTmp);\n        if (StringUtils.isNotBlank(dataId)) {\n            context.putWhereParameter(FieldConstant.DATA_ID, dataId);\n        }\n        if (StringUtils.isNotBlank(group)) {\n            context.putWhereParameter(FieldConstant.GROUP_ID, group);\n        }\n        if (StringUtils.isNotBlank(appName)) {\n            context.putWhereParameter(FieldConstant.APP_NAME, appName);\n        }\n        if (!StringUtils.isBlank(content)) {\n            context.putWhereParameter(FieldConstant.CONTENT, content);\n        }\n        context.setStartRow((pageNo - 1) * pageSize);\n        context.setPageSize(pageSize);\n        \n        if (StringUtils.isNotBlank(configTags)) {\n            String[] tagArr = configTags.split(\",\");\n            context.putWhereParameter(FieldConstant.TAG_ARR, Arrays.asList(tagArr));\n            ConfigTagsRelationMapper configTagsRelationMapper = mapperManager.findMapper(\n                    dataSourceService.getDataSourceType(), TableConstant.CONFIG_TAGS_RELATION);\n            sqlCount = configTagsRelationMapper.findConfigInfo4PageCountRows(context);\n            sql = configTagsRelationMapper.findConfigInfo4PageFetchRows(context);\n        } else {\n            ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                    TableConstant.CONFIG_INFO);\n            \n            sqlCount = configInfoMapper.findConfigInfo4PageCountRows(context);\n            sql = configInfoMapper.findConfigInfo4PageFetchRows(context);\n        }\n        PaginationHelper<ConfigInfo> helper = createPaginationHelper();\n        Page<ConfigInfo> page = helper.fetchPageLimit(sqlCount, sql, pageNo, pageSize, CONFIG_INFO_ROW_MAPPER);\n        \n        for (ConfigInfo configInfo : page.getPageItems()) {\n            Pair<String, String> pair = EncryptionHandler.decryptHandler(configInfo.getDataId(),\n                    configInfo.getEncryptedDataKey(), configInfo.getContent());\n            configInfo.setContent(pair.getSecond());\n        }\n        \n        return page;\n    }\n    \n    @Override\n    public Page<ConfigInfo> findConfigInfoByApp(final int pageNo, final int pageSize, final String tenant,\n            final String appName) {\n        String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n        final int startRow = (pageNo - 1) * pageSize;\n        MapperContext context = new MapperContext(startRow, pageSize);\n        context.putWhereParameter(FieldConstant.APP_NAME, appName);\n        context.putWhereParameter(FieldConstant.TENANT_ID, generateLikeArgument(tenantTmp));\n        \n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        MapperResult countRows = configInfoMapper.findConfigInfoByAppCountRows(context);\n        MapperResult fetchRows = configInfoMapper.findConfigInfoByAppFetchRows(context);\n        \n        final PaginationHelper<ConfigInfo> helper = createPaginationHelper();\n        return helper.fetchPageLimit(countRows, fetchRows, pageNo, pageSize, CONFIG_INFO_ROW_MAPPER);\n        \n    }\n    \n    @Override\n    public Page<ConfigInfoBase> findConfigInfoBaseByGroup(final int pageNo, final int pageSize, final String group) {\n        PaginationHelper<ConfigInfoBase> helper = createPaginationHelper();\n        final int startRow = (pageNo - 1) * pageSize;\n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        \n        MapperContext context = new MapperContext(startRow, pageSize);\n        context.putWhereParameter(FieldConstant.GROUP_ID, group);\n        context.putWhereParameter(FieldConstant.TENANT_ID, StringUtils.EMPTY);\n        MapperResult mapperResult = configInfoMapper.findConfigInfoBaseByGroupFetchRows(context);\n        \n        return helper.fetchPage(configInfoMapper.count(Arrays.asList(\"group_id\", \"tenant_id\")), mapperResult.getSql(),\n                mapperResult.getParamList().toArray(), pageNo, pageSize, CONFIG_INFO_BASE_ROW_MAPPER);\n    }\n    \n    @Override\n    public int configInfoCount() {\n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        String sql = configInfoMapper.count(null);\n        Integer result = databaseOperate.queryOne(sql, Integer.class);\n        if (result == null) {\n            throw new IllegalArgumentException(\"configInfoCount error\");\n        }\n        return result;\n    }\n    \n    @Override\n    public int configInfoCount(String tenant) {\n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        MapperContext context = new MapperContext();\n        context.putWhereParameter(FieldConstant.TENANT_ID, tenant);\n        MapperResult mapperResult = configInfoMapper.configInfoLikeTenantCount(context);\n        Integer result = databaseOperate.queryOne(mapperResult.getSql(), mapperResult.getParamList().toArray(),\n                Integer.class);\n        if (result == null) {\n            throw new IllegalArgumentException(\"configInfoCount error\");\n        }\n        return result;\n    }\n    \n    @Override\n    public List<String> getTenantIdList(int page, int pageSize) {\n        PaginationHelper<Map<String, Object>> helper = createPaginationHelper();\n        \n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        int from = (page - 1) * pageSize;\n        MapperResult mapperResult = configInfoMapper.getTenantIdList(new MapperContext(from, pageSize));\n        \n        Page<Map<String, Object>> pageList = helper.fetchPageLimit(mapperResult.getSql(),\n                mapperResult.getParamList().toArray(), page, pageSize, MAP_ROW_MAPPER);\n        return pageList.getPageItems().stream().map(map -> String.valueOf(map.get(\"TENANT_ID\")))\n                .collect(Collectors.toList());\n    }\n    \n    @Override\n    public List<String> getGroupIdList(int page, int pageSize) {\n        PaginationHelper<Map<String, Object>> helper = createPaginationHelper();\n        \n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        int from = (page - 1) * pageSize;\n        MapperResult mapperResult = configInfoMapper.getGroupIdList(new MapperContext(from, pageSize));\n        \n        Page<Map<String, Object>> pageList = helper.fetchPageLimit(mapperResult.getSql(),\n                mapperResult.getParamList().toArray(), page, pageSize, MAP_ROW_MAPPER);\n        return pageList.getPageItems().stream().map(map -> String.valueOf(map.get(\"GROUP_ID\")))\n                .collect(Collectors.toList());\n    }\n    \n    @Override\n    public Page<ConfigInfo> findAllConfigInfo(final int pageNo, final int pageSize, final String tenant) {\n        String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n        final int startRow = (pageNo - 1) * pageSize;\n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        String sqlCountRows = configInfoMapper.count(null);\n        MapperContext context = new MapperContext(startRow, pageSize);\n        context.putWhereParameter(FieldConstant.TENANT_ID, generateLikeArgument(tenantTmp));\n        MapperResult sqlFetchRows = configInfoMapper.findAllConfigInfoFetchRows(context);\n        \n        PaginationHelper<ConfigInfo> helper = createPaginationHelper();\n        return helper.fetchPageLimit(sqlCountRows, sqlFetchRows.getSql(), sqlFetchRows.getParamList().toArray(), pageNo,\n                pageSize, CONFIG_INFO_ROW_MAPPER);\n        \n    }\n    \n    @Override\n    public Page<ConfigKey> findAllConfigKey(final int pageNo, final int pageSize, final String tenant) {\n        final String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        MapperContext context = new MapperContext((pageNo - 1) * pageSize, pageSize);\n        context.putWhereParameter(FieldConstant.TENANT_ID, generateLikeArgument(tenantTmp));\n        final MapperResult mapperResult = configInfoMapper.findAllConfigKey(context);\n        \n        final int totalCount = configInfoCount(tenant);\n        int pageCount = totalCount / pageSize;\n        if (totalCount > pageSize * pageCount) {\n            pageCount++;\n        }\n        \n        if (pageNo > pageCount) {\n            return null;\n        }\n        \n        final Page<ConfigKey> page = new Page<>();\n        page.setPageNumber(pageNo);\n        page.setPagesAvailable(pageCount);\n        page.setTotalCount(totalCount);\n        \n        List<ConfigKey> result = databaseOperate.queryMany(mapperResult.getSql(), mapperResult.getParamList().toArray(),\n                CONFIG_KEY_ROW_MAPPER);\n        \n        for (ConfigKey item : result) {\n            page.getPageItems().add(item);\n        }\n        return page;\n    }\n    \n    @Override\n    public Page<ConfigInfoWrapper> findAllConfigInfoFragment(final long lastMaxId, final int pageSize) {\n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        MapperContext context = new MapperContext(0, pageSize);\n        context.putWhereParameter(FieldConstant.ID, lastMaxId);\n        MapperResult select = configInfoMapper.findAllConfigInfoFragment(context);\n        PaginationHelper<ConfigInfoWrapper> helper = createPaginationHelper();\n        return helper.fetchPageLimit(select.getSql(), select.getParamList().toArray(), 1, pageSize,\n                CONFIG_INFO_WRAPPER_ROW_MAPPER);\n        \n    }\n    \n    @Override\n    public Page<ConfigInfo> findConfigInfoLike(final int pageNo, final int pageSize, final ConfigKey[] configKeys,\n            final boolean blacklist) {\n        String sqlCountRows = \"SELECT count(*) FROM config_info WHERE \";\n        String sqlFetchRows = \"SELECT id,data_id,group_id,tenant_id,app_name,content FROM config_info WHERE \";\n        StringBuilder where = new StringBuilder(\" 1=1 \");\n        // White list, please synchronize the condition is empty, there is no qualified configuration\n        if (configKeys.length == 0 && !blacklist) {\n            Page<ConfigInfo> page = new Page<>();\n            page.setTotalCount(0);\n            return page;\n        }\n        List<String> params = new ArrayList<>();\n        boolean isFirst = true;\n        for (ConfigKey configInfo : configKeys) {\n            String dataId = configInfo.getDataId();\n            String group = configInfo.getGroup();\n            String appName = configInfo.getAppName();\n            \n            if (StringUtils.isBlank(dataId) && StringUtils.isBlank(group) && StringUtils.isBlank(appName)) {\n                break;\n            }\n            \n            if (blacklist) {\n                if (isFirst) {\n                    isFirst = false;\n                    where.append(\" AND \");\n                } else {\n                    where.append(\" AND \");\n                }\n                \n                where.append('(');\n                boolean isFirstSub = true;\n                if (!StringUtils.isBlank(dataId)) {\n                    where.append(\" data_id NOT LIKE ? \");\n                    params.add(generateLikeArgument(dataId));\n                    isFirstSub = false;\n                }\n                if (!StringUtils.isBlank(group)) {\n                    if (!isFirstSub) {\n                        where.append(\" OR \");\n                    }\n                    where.append(\" group_id NOT LIKE ? \");\n                    params.add(generateLikeArgument(group));\n                    isFirstSub = false;\n                }\n                if (!StringUtils.isBlank(appName)) {\n                    if (!isFirstSub) {\n                        where.append(\" OR \");\n                    }\n                    where.append(\" app_name != ? \");\n                    params.add(appName);\n                    isFirstSub = false;\n                }\n                where.append(\") \");\n            } else {\n                if (isFirst) {\n                    isFirst = false;\n                    where.append(\" AND \");\n                } else {\n                    where.append(\" OR \");\n                }\n                where.append('(');\n                boolean isFirstSub = true;\n                if (!StringUtils.isBlank(dataId)) {\n                    where.append(\" data_id LIKE ? \");\n                    params.add(generateLikeArgument(dataId));\n                    isFirstSub = false;\n                }\n                if (!StringUtils.isBlank(group)) {\n                    if (!isFirstSub) {\n                        where.append(\" AND \");\n                    }\n                    where.append(\" group_id LIKE ? \");\n                    params.add(generateLikeArgument(group));\n                    isFirstSub = false;\n                }\n                if (!StringUtils.isBlank(appName)) {\n                    if (!isFirstSub) {\n                        where.append(\" AND \");\n                    }\n                    where.append(\" app_name = ? \");\n                    params.add(appName);\n                    isFirstSub = false;\n                }\n                where.append(\") \");\n            }\n        }\n        PaginationHelper<ConfigInfo> helper = createPaginationHelper();\n        return helper.fetchPage(sqlCountRows + where, sqlFetchRows + where, params.toArray(), pageNo, pageSize,\n                CONFIG_INFO_ROW_MAPPER);\n        \n    }\n    \n    @Override\n    public Page<ConfigInfo> findConfigInfoLike4Page(final int pageNo, final int pageSize, final String dataId,\n            final String group, final String tenant, final Map<String, Object> configAdvanceInfo) {\n        String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n        final String appName = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"appName\");\n        final String content = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"content\");\n        final String configTags = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"config_tags\");\n        MapperResult sqlCountRows;\n        MapperResult sqlFetchRows;\n        \n        MapperContext context = new MapperContext((pageNo - 1) * pageSize, pageSize);\n        context.putWhereParameter(FieldConstant.TENANT_ID, generateLikeArgument(tenantTmp));\n        \n        if (!StringUtils.isBlank(dataId)) {\n            context.putWhereParameter(FieldConstant.DATA_ID, generateLikeArgument(dataId));\n        }\n        if (!StringUtils.isBlank(group)) {\n            context.putWhereParameter(FieldConstant.GROUP_ID, generateLikeArgument(group));\n        }\n        if (!StringUtils.isBlank(appName)) {\n            context.putWhereParameter(FieldConstant.APP_NAME, appName);\n        }\n        if (!StringUtils.isBlank(content)) {\n            context.putWhereParameter(FieldConstant.CONTENT, generateLikeArgument(content));\n        }\n        \n        if (StringUtils.isNotBlank(configTags)) {\n            String[] tagArr = configTags.split(\",\");\n            context.putWhereParameter(FieldConstant.TAG_ARR, tagArr);\n            ConfigTagsRelationMapper configTagsRelationMapper = mapperManager.findMapper(\n                    dataSourceService.getDataSourceType(), TableConstant.CONFIG_TAGS_RELATION);\n            sqlCountRows = configTagsRelationMapper.findConfigInfoLike4PageCountRows(context);\n            sqlFetchRows = configTagsRelationMapper.findConfigInfoLike4PageFetchRows(context);\n        } else {\n            ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                    TableConstant.CONFIG_INFO);\n            sqlCountRows = configInfoMapper.findConfigInfoLike4PageCountRows(context);\n            sqlFetchRows = configInfoMapper.findConfigInfoLike4PageFetchRows(context);\n        }\n        PaginationHelper<ConfigInfo> helper = createPaginationHelper();\n        Page<ConfigInfo> page = helper.fetchPageLimit(sqlCountRows, sqlFetchRows, pageNo, pageSize,\n                CONFIG_INFO_ROW_MAPPER);\n        for (ConfigInfo configInfo : page.getPageItems()) {\n            Pair<String, String> pair = EncryptionHandler.decryptHandler(configInfo.getDataId(),\n                    configInfo.getEncryptedDataKey(), configInfo.getContent());\n            configInfo.setContent(pair.getSecond());\n        }\n        return page;\n        \n    }\n    \n    @Override\n    public Page<ConfigInfoBase> findConfigInfoBaseLike(final int pageNo, final int pageSize, final String dataId,\n            final String group, final String content) throws IOException {\n        if (StringUtils.isBlank(dataId) && StringUtils.isBlank(group)) {\n            throw new IOException(\"invalid param\");\n        }\n        MapperContext context = new MapperContext((pageNo - 1) * pageSize, pageSize);\n        \n        if (!StringUtils.isBlank(dataId)) {\n            context.putWhereParameter(FieldConstant.DATA_ID, generateLikeArgument(dataId));\n        }\n        if (!StringUtils.isBlank(group)) {\n            context.putWhereParameter(FieldConstant.GROUP_ID, generateLikeArgument(group));\n        }\n        if (!StringUtils.isBlank(content)) {\n            context.putWhereParameter(FieldConstant.CONTENT, generateLikeArgument(content));\n        }\n        \n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        MapperResult sqlCountRows = configInfoMapper.findConfigInfoBaseLikeCountRows(context);\n        MapperResult sqlFetchRows = configInfoMapper.findConfigInfoBaseLikeFetchRows(context);\n        PaginationHelper<ConfigInfoBase> helper = createPaginationHelper();\n        return helper.fetchPageLimit(sqlCountRows, sqlFetchRows, pageNo, pageSize, CONFIG_INFO_BASE_ROW_MAPPER);\n        \n    }\n    \n    @Override\n    public List<ConfigInfoWrapper> findChangeConfig(final Timestamp startTime, long lastMaxId, final int pageSize) {\n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        \n        MapperContext context = new MapperContext();\n        context.putWhereParameter(FieldConstant.START_TIME, startTime);\n        context.putWhereParameter(FieldConstant.PAGE_SIZE, pageSize);\n        context.putWhereParameter(FieldConstant.LAST_MAX_ID, lastMaxId);\n        \n        MapperResult mapperResult = configInfoMapper.findChangeConfig(context);\n        List<Map<String, Object>> list = databaseOperate.queryMany(mapperResult.getSql(),\n                mapperResult.getParamList().toArray());\n        return convertChangeConfig(list);\n        \n    }\n    \n    @SuppressWarnings(\"checkstyle:WhitespaceAfter\")\n    @Override\n    public Page<ConfigInfoWrapper> findChangeConfig(final String dataId, final String group, final String tenant,\n            final String appName, final Timestamp startTime, final Timestamp endTime, final int pageNo,\n            final int pageSize, final long lastMaxId) {\n        String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n        MapperContext context = new MapperContext((pageNo - 1) * pageSize, pageSize);\n        if (!StringUtils.isBlank(dataId)) {\n            context.putWhereParameter(FieldConstant.DATA_ID, generateLikeArgument(dataId));\n        }\n        if (!StringUtils.isBlank(group)) {\n            context.putWhereParameter(FieldConstant.GROUP_ID, generateLikeArgument(group));\n        }\n        if (!StringUtils.isBlank(tenantTmp)) {\n            context.putWhereParameter(FieldConstant.TENANT, tenantTmp);\n        }\n        if (!StringUtils.isBlank(appName)) {\n            context.putWhereParameter(FieldConstant.APP_NAME, appName);\n        }\n        if (startTime != null) {\n            context.putWhereParameter(FieldConstant.START_TIME, startTime);\n        }\n        if (endTime != null) {\n            context.putWhereParameter(FieldConstant.END_TIME, endTime);\n        }\n        \n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        MapperResult sqlCountRows = configInfoMapper.findChangeConfigCountRows(context);\n        MapperResult sqlFetchRows = configInfoMapper.findChangeConfigFetchRows(context);\n        \n        PaginationHelper<ConfigInfoWrapper> helper = createPaginationHelper();\n        return helper.fetchPageLimit(sqlCountRows, sqlFetchRows, pageNo, pageSize, CONFIG_INFO_WRAPPER_ROW_MAPPER);\n        \n    }\n    \n    @Override\n    public List<String> selectTagByConfig(String dataId, String group, String tenant) {\n        ConfigTagsRelationMapper configTagsRelationMapper = mapperManager.findMapper(\n                dataSourceService.getDataSourceType(), TableConstant.CONFIG_TAGS_RELATION);\n        String sql = configTagsRelationMapper.select(Arrays.asList(\"tag_name\"),\n                Arrays.asList(\"data_id\", \"group_id\", \"tenant_id\"));\n        return databaseOperate.queryMany(sql, new Object[] {dataId, group, tenant}, String.class);\n    }\n    \n    @Override\n    public List<ConfigInfo> findConfigInfosByIds(final String ids) {\n        if (StringUtils.isBlank(ids)) {\n            return null;\n        }\n        List<Long> paramList = new ArrayList<>();\n        String[] idArr = ids.split(\",\");\n        for (int i = 0; i < idArr.length; i++) {\n            paramList.add(Long.parseLong(idArr[i]));\n        }\n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        MapperContext context = new MapperContext();\n        context.putWhereParameter(FieldConstant.IDS, paramList);\n        MapperResult mapperResult = configInfoMapper.findConfigInfosByIds(context);\n        return databaseOperate.queryMany(mapperResult.getSql(), mapperResult.getParamList().toArray(),\n                CONFIG_INFO_ROW_MAPPER);\n        \n    }\n    \n    @Override\n    public ConfigAdvanceInfo findConfigAdvanceInfo(final String dataId, final String group, final String tenant) {\n        final String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n        List<String> configTagList = this.selectTagByConfig(dataId, group, tenant);\n        \n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        ConfigAdvanceInfo configAdvance = databaseOperate.queryOne(configInfoMapper.select(\n                        Arrays.asList(\"gmt_create\", \"gmt_modified\", \"src_user\", \"src_ip\", \"c_desc\", \"c_use\", \"effect\", \"type\",\n                                \"c_schema\"), Arrays.asList(\"data_id\", \"group_id\", \"tenant_id\")),\n                new Object[] {dataId, group, tenantTmp}, CONFIG_ADVANCE_INFO_ROW_MAPPER);\n        \n        if (CollectionUtils.isNotEmpty(configTagList)) {\n            StringBuilder configTagsTmp = new StringBuilder();\n            for (String configTag : configTagList) {\n                if (configTagsTmp.length() == 0) {\n                    configTagsTmp.append(configTag);\n                } else {\n                    configTagsTmp.append(',').append(configTag);\n                }\n            }\n            configAdvance.setConfigTags(configTagsTmp.toString());\n        }\n        return configAdvance;\n    }\n    \n    @Override\n    public ConfigAllInfo findConfigAllInfo(final String dataId, final String group, final String tenant) {\n        final String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n        \n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        final String sql = configInfoMapper.select(\n                Arrays.asList(\"id\", \"data_id\", \"group_id\", \"tenant_id\", \"app_name\", \"content\", \"md5\", \"gmt_create\",\n                        \"gmt_modified\", \"src_user\", \"src_ip\", \"c_desc\", \"c_use\", \"effect\", \"type\", \"c_schema\",\n                        \"encrypted_data_key\"), Arrays.asList(\"data_id\", \"group_id\", \"tenant_id\"));\n        \n        List<String> configTagList = selectTagByConfig(dataId, group, tenant);\n        \n        ConfigAllInfo configAdvance = databaseOperate.queryOne(sql, new Object[] {dataId, group, tenantTmp},\n                CONFIG_ALL_INFO_ROW_MAPPER);\n        \n        if (configTagList != null && !configTagList.isEmpty()) {\n            StringBuilder configTagsTmp = new StringBuilder();\n            for (String configTag : configTagList) {\n                if (configTagsTmp.length() == 0) {\n                    configTagsTmp.append(configTag);\n                } else {\n                    configTagsTmp.append(',').append(configTag);\n                }\n            }\n            configAdvance.setConfigTags(configTagsTmp.toString());\n        }\n        return configAdvance;\n    }\n    \n    @Override\n    public List<ConfigInfo> convertDeletedConfig(List<Map<String, Object>> list) {\n        List<ConfigInfo> configs = new ArrayList<>();\n        for (Map<String, Object> map : list) {\n            String dataId = (String) map.get(\"data_id\");\n            String group = (String) map.get(\"group_id\");\n            String tenant = (String) map.get(\"tenant_id\");\n            ConfigInfo config = new ConfigInfo();\n            config.setDataId(dataId);\n            config.setGroup(group);\n            config.setTenant(tenant);\n            configs.add(config);\n        }\n        return configs;\n    }\n    \n    @Override\n    public List<ConfigInfoWrapper> convertChangeConfig(List<Map<String, Object>> list) {\n        List<ConfigInfoWrapper> configs = new ArrayList<>();\n        for (Map<String, Object> map : list) {\n            String dataId = (String) map.get(\"data_id\");\n            String group = (String) map.get(\"group_id\");\n            String tenant = (String) map.get(\"tenant_id\");\n            String content = (String) map.get(\"content\");\n            long mTime = ((Timestamp) map.get(\"gmt_modified\")).getTime();\n            ConfigInfoWrapper config = new ConfigInfoWrapper();\n            config.setDataId(dataId);\n            config.setGroup(group);\n            config.setTenant(tenant);\n            config.setContent(content);\n            config.setLastModified(mTime);\n            configs.add(config);\n        }\n        return configs;\n    }\n    \n    @Override\n    public List<ConfigInfoWrapper> listAllGroupKeyMd5() {\n        final int pageSize = 10000;\n        int totalCount = configInfoCount();\n        int pageCount = (int) Math.ceil(totalCount * 1.0 / pageSize);\n        List<ConfigInfoWrapper> allConfigInfo = new ArrayList<>();\n        for (int pageNo = 1; pageNo <= pageCount; pageNo++) {\n            List<ConfigInfoWrapper> configInfoList = listGroupKeyMd5ByPage(pageNo, pageSize);\n            allConfigInfo.addAll(configInfoList);\n        }\n        return allConfigInfo;\n    }\n    \n    @Override\n    public List<ConfigInfoWrapper> listGroupKeyMd5ByPage(int pageNo, int pageSize) {\n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        String sqlCountRows = configInfoMapper.count(null);\n        MapperResult sqlFetchRows = configInfoMapper.listGroupKeyMd5ByPageFetchRows(\n                new MapperContext((pageNo - 1) * pageSize, pageSize));\n        PaginationHelper<ConfigInfoWrapper> helper = createPaginationHelper();\n        Page<ConfigInfoWrapper> page = helper.fetchPageLimit(sqlCountRows, sqlFetchRows.getSql(), new Object[] {},\n                pageNo, pageSize, CONFIG_INFO_WRAPPER_ROW_MAPPER);\n        \n        return page.getPageItems();\n    }\n    \n    @Override\n    public ConfigInfoWrapper queryConfigInfo(final String dataId, final String group, final String tenant) {\n        String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        final String sql = configInfoMapper.select(\n                Arrays.asList(\"id\", \"data_id\", \"group_id\", \"tenant_id\", \"app_name\", \"content\", \"type\", \"gmt_modified\",\n                        \"md5\", \"encrypted_data_key\"), Arrays.asList(\"data_id\", \"group_id\", \"tenant_id\"));\n        \n        return databaseOperate.queryOne(sql, new Object[] {dataId, group, tenantTmp}, CONFIG_INFO_WRAPPER_ROW_MAPPER);\n    }\n    \n    @Override\n    public List<ConfigAllInfo> findAllConfigInfo4Export(final String dataId, final String group, final String tenant,\n            final String appName, final List<Long> ids) {\n        String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        MapperContext context = new MapperContext();\n        if (!CollectionUtils.isEmpty(ids)) {\n            context.putWhereParameter(FieldConstant.IDS, ids);\n        } else {\n            context.putWhereParameter(FieldConstant.TENANT_ID, tenantTmp);\n            if (!StringUtils.isBlank(dataId)) {\n                context.putWhereParameter(FieldConstant.DATA_ID, generateLikeArgument(dataId));\n            }\n            if (StringUtils.isNotBlank(group)) {\n                context.putWhereParameter(FieldConstant.GROUP_ID, group);\n            }\n            if (StringUtils.isNotBlank(appName)) {\n                context.putWhereParameter(FieldConstant.APP_NAME, appName);\n            }\n        }\n        \n        MapperResult mapperResult = configInfoMapper.findAllConfigInfo4Export(context);\n        return databaseOperate.queryMany(mapperResult.getSql(), mapperResult.getParamList().toArray(),\n                CONFIG_ALL_INFO_ROW_MAPPER);\n    }\n    \n    @Override\n    public List<ConfigInfoWrapper> queryConfigInfoByNamespace(String tenantId) {\n        if (Objects.isNull(tenantId)) {\n            throw new IllegalArgumentException(\"tenantId can not be null\");\n        }\n        String tenantTmp = StringUtils.isBlank(tenantId) ? StringUtils.EMPTY : tenantId;\n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        final String sql = configInfoMapper.select(\n                Arrays.asList(\"data_id\", \"group_id\", \"tenant_id\", \"app_name\", \"type\", \"gmt_modified\"),\n                Collections.singletonList(\"tenant_id\"));\n        return databaseOperate.queryMany(sql, new Object[] {tenantTmp}, CONFIG_INFO_WRAPPER_ROW_MAPPER);\n    }\n    \n    @Override\n    public Page<ConfigInfoBase> findAllConfigInfoBase(final int pageNo, final int pageSize) {\n        final int startRow = (pageNo - 1) * pageSize;\n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        String sqlCountRows = configInfoMapper.count(null);\n        MapperResult sqlFetchRows = configInfoMapper.findAllConfigInfoBaseFetchRows(\n                new MapperContext(startRow, pageSize));\n        \n        PaginationHelper<ConfigInfoBase> helper = createPaginationHelper();\n        return helper.fetchPageLimit(sqlCountRows, sqlFetchRows.getSql(), sqlFetchRows.getParamList().toArray(), pageNo,\n                pageSize, CONFIG_INFO_BASE_ROW_MAPPER);\n        \n    }\n}\n", "methodName": "com.alibaba.nacos.config.server.service.repository.embedded.EmbeddedConfigInfoPersistServiceImpl.removeConfigInfoByIds(java.util.List,java.lang.String,java.lang.String):java.util.List", "exampleID": 6, "dataset": "infer", "filepath": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedConfigInfoPersistServiceImpl.java", "line": 440, "sink": "configInfoList", "source": "configInfoList", "sourceLine": 437, "qualifier": "$$configInfoList/$ could be null, and is @@dereferenced/@", "steps": [{"line": 1170, "source": "configInfoList", "filepath": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedConfigInfoPersistServiceImpl.java", "methodName": "EmbeddedConfigInfoPersistServiceImpl.findConfigInfosByIds", "exampleID": 7}], "line_number": 437, "records": [{"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedConfigInfoPersistServiceImpl.java", "line_number": 1170, "column_number": -1, "description": "start of procedure findConfigInfosByIds(...)", "snippet": "    public List<ConfigInfo> findConfigInfosByIds(final String ids) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedConfigInfoPersistServiceImpl.java", "methodName": "findConfigInfosByIds"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedConfigInfoPersistServiceImpl.java", "line_number": 1171, "column_number": -1, "description": "", "snippet": "        if (StringUtils.isBlank(ids)) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedConfigInfoPersistServiceImpl.java", "methodName": "findConfigInfosByIds"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 77, "column_number": -1, "description": "start of procedure isBlank(...)", "snippet": "    public static boolean isBlank(final CharSequence cs) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isBlank"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 79, "column_number": -1, "description": "Taking false branch", "snippet": "        if (cs == null || (strLen = cs.length()) == 0) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isBlank"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 80, "column_number": -1, "description": "", "snippet": "            return true;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isBlank"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 87, "column_number": -1, "description": "return from a call to boolean StringUtils.isBlank(CharSequence)", "snippet": "        return true;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isBlank"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedConfigInfoPersistServiceImpl.java", "line_number": 1171, "column_number": -1, "description": "Taking true branch", "snippet": "        if (StringUtils.isBlank(ids)) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedConfigInfoPersistServiceImpl.java", "methodName": "findConfigInfosByIds"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedConfigInfoPersistServiceImpl.java", "line_number": 1172, "column_number": -1, "description": "", "snippet": "            return null;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedConfigInfoPersistServiceImpl.java", "methodName": "findConfigInfosByIds"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedConfigInfoPersistServiceImpl.java", "line_number": 1184, "column_number": -1, "description": "return from a call to List EmbeddedConfigInfoPersistServiceImpl.findConfigInfosByIds(String)", "snippet": "        return databaseOperate.queryMany(mapperResult.getSql(), mapperResult.getParamList().toArray(),", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedConfigInfoPersistServiceImpl.java", "methodName": "findConfigInfosByIds"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedConfigInfoPersistServiceImpl.java", "line_number": 481, "column_number": -1, "description": "start of procedure removeConfigInfoByIdsAtomic(...)", "snippet": "    public void removeConfigInfoByIdsAtomic(final String ids) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedConfigInfoPersistServiceImpl.java", "methodName": "removeConfigInfoByIdsAtomic"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedConfigInfoPersistServiceImpl.java", "line_number": 482, "column_number": -1, "description": "", "snippet": "        if (StringUtils.isBlank(ids)) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedConfigInfoPersistServiceImpl.java", "methodName": "removeConfigInfoByIdsAtomic"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 77, "column_number": -1, "description": "start of procedure isBlank(...)", "snippet": "    public static boolean isBlank(final CharSequence cs) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isBlank"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 79, "column_number": -1, "description": "Taking false branch", "snippet": "        if (cs == null || (strLen = cs.length()) == 0) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isBlank"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 80, "column_number": -1, "description": "", "snippet": "            return true;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isBlank"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 87, "column_number": -1, "description": "return from a call to boolean StringUtils.isBlank(CharSequence)", "snippet": "        return true;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isBlank"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedConfigInfoPersistServiceImpl.java", "line_number": 482, "column_number": -1, "description": "Taking true branch", "snippet": "        if (StringUtils.isBlank(ids)) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedConfigInfoPersistServiceImpl.java", "methodName": "removeConfigInfoByIdsAtomic"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedConfigInfoPersistServiceImpl.java", "line_number": 483, "column_number": -1, "description": "", "snippet": "            return;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedConfigInfoPersistServiceImpl.java", "methodName": "removeConfigInfoByIdsAtomic"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedConfigInfoPersistServiceImpl.java", "line_number": 496, "column_number": -1, "description": "return from a call to void EmbeddedConfigInfoPersistServiceImpl.removeConfigInfoByIdsAtomic(String)", "snippet": "    }", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedConfigInfoPersistServiceImpl.java", "methodName": "removeConfigInfoByIdsAtomic"}], "combined_records": [{"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedConfigInfoPersistServiceImpl.java", "line_number": 1171, "column_number": -1, "description": "start of procedure findConfigInfosByIds(...)", "snippet": "1167.    @Override\n1168.    public List<ConfigInfo> findConfigInfosByIds(final String ids) {\n1169.>         if (StringUtils.isBlank(ids)) {\n1170.>             return null;\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedConfigInfoPersistServiceImpl.java", "methodName": "findConfigInfosByIds", "line_numbers": [1170, 1171]}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 87, "column_number": -1, "description": "start of procedure isBlank(...)", "snippet": "74.     */\n75.    public static boolean isBlank(final CharSequence cs) {\n76.>         int strLen;\n77.        if (cs == null || (strLen = cs.length()) == 0) {\n78.>             return true;\n79.        }\n80.        for (int i = 0; i < strLen; i++) {\n81.            if (!Character.isWhitespace(cs.charAt(i))) {\n82.                return false;\n83.            }\n84.        }\n85.        return true;\n86.    }\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isBlank", "line_numbers": [77, 79, 80, 87]}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedConfigInfoPersistServiceImpl.java", "line_number": 1184, "column_number": -1, "description": "Taking true branch", "snippet": "1168.    public List<ConfigInfo> findConfigInfosByIds(final String ids) {\n1169.        if (StringUtils.isBlank(ids)) {\n1170.>             return null;\n1171.        }\n1172.        List<Long> paramList = new ArrayList<>();\n1173.        String[] idArr = ids.split(\",\");\n1174.        for (int i = 0; i < idArr.length; i++) {\n1175.            paramList.add(Long.parseLong(idArr[i]));\n1176.        }\n1177.        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n1178.                TableConstant.CONFIG_INFO);\n1179.        MapperContext context = new MapperContext();\n1180.        context.putWhereParameter(FieldConstant.IDS, paramList);\n1181.        MapperResult mapperResult = configInfoMapper.findConfigInfosByIds(context);\n1182.        return databaseOperate.queryMany(mapperResult.getSql(), mapperResult.getParamList().toArray(),\n1183.>                 CONFIG_INFO_ROW_MAPPER);\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedConfigInfoPersistServiceImpl.java", "methodName": "findConfigInfosByIds", "line_numbers": [1171, 1172, 1184]}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedConfigInfoPersistServiceImpl.java", "line_number": 482, "column_number": -1, "description": "start of procedure removeConfigInfoByIdsAtomic(...)", "snippet": "478.    @Override\n479.    public void removeConfigInfoByIdsAtomic(final String ids) {\n480.>         if (StringUtils.isBlank(ids)) {\n481.>             return;\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedConfigInfoPersistServiceImpl.java", "methodName": "removeConfigInfoByIdsAtomic", "line_numbers": [481, 482]}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 87, "column_number": -1, "description": "start of procedure isBlank(...)", "snippet": "74.     */\n75.    public static boolean isBlank(final CharSequence cs) {\n76.>         int strLen;\n77.        if (cs == null || (strLen = cs.length()) == 0) {\n78.>             return true;\n79.        }\n80.        for (int i = 0; i < strLen; i++) {\n81.            if (!Character.isWhitespace(cs.charAt(i))) {\n82.                return false;\n83.            }\n84.        }\n85.        return true;\n86.    }\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isBlank", "line_numbers": [77, 79, 80, 87]}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedConfigInfoPersistServiceImpl.java", "line_number": 496, "column_number": -1, "description": "Taking true branch", "snippet": "479.    public void removeConfigInfoByIdsAtomic(final String ids) {\n480.        if (StringUtils.isBlank(ids)) {\n481.>             return;\n482.        }\n483.        List<Long> paramList = new ArrayList<>();\n484.        String[] idArr = ids.split(\",\");\n485.        for (int i = 0; i < idArr.length; i++) {\n486.            paramList.add(Long.parseLong(idArr[i]));\n487.        }\n488.        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n489.                TableConstant.CONFIG_INFO);\n490.        MapperContext context = new MapperContext();\n491.        context.putWhereParameter(FieldConstant.IDS, paramList);\n492.        MapperResult result = configInfoMapper.removeConfigInfoByIdsAtomic(context);\n493.        EmbeddedStorageContextHolder.addSqlContext(result.getSql(), result.getParamList().toArray());\n494.    }\n495.>     \n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedConfigInfoPersistServiceImpl.java", "methodName": "removeConfigInfoByIdsAtomic", "line_numbers": [482, 483, 496]}], "infer_explore": [{"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedConfigInfoPersistServiceImpl.java", "line_number": 429, "column_number": -1, "description": "start of procedure removeConfigInfoByIds(...)", "snippet": "426.     \n427.     @Override\n428. >     public List<ConfigInfo> removeConfigInfoByIds(final List<Long> ids, final String srcIp, final String srcUser) {\n429.         if (CollectionUtils.isEmpty(ids)) {\n430.             return null;\n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedConfigInfoPersistServiceImpl.java", "line_number": 430, "column_number": -1, "description": "Taking false branch", "snippet": "427.     @Override\n428.     public List<ConfigInfo> removeConfigInfoByIds(final List<Long> ids, final String srcIp, final String srcUser) {\n429. >         if (CollectionUtils.isEmpty(ids)) {\n430.             return null;\n431.         }\n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedConfigInfoPersistServiceImpl.java", "line_number": 433, "column_number": -1, "description": "Skipping removeAll(...): unknown method", "snippet": "430.             return null;\n431.         }\n432. >         ids.removeAll(Collections.singleton(null));\n433.         final Timestamp time = new Timestamp(System.currentTimeMillis());\n434.         try {\n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedConfigInfoPersistServiceImpl.java", "line_number": 434, "column_number": -1, "description": "Skipping Timestamp(...): unknown method", "snippet": "431.         }\n432.         ids.removeAll(Collections.singleton(null));\n433. >         final Timestamp time = new Timestamp(System.currentTimeMillis());\n434.         try {\n435.             String idsStr = StringUtils.join(ids, StringUtils.COMMA);\n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedConfigInfoPersistServiceImpl.java", "line_number": 436, "column_number": -1, "description": "Skipping join(...): empty list of specs", "snippet": "433.         final Timestamp time = new Timestamp(System.currentTimeMillis());\n434.         try {\n435. >             String idsStr = StringUtils.join(ids, StringUtils.COMMA);\n436.             List<ConfigInfo> configInfoList = findConfigInfosByIds(idsStr);\n437.             if (CollectionUtils.isNotEmpty(configInfoList)) {\n"}, {"level": 1, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 186, "column_number": -1, "description": "Definition of join(...)", "snippet": "183.      * @return the joined String, {@code null} if null array input\n184.      */\n185. >     public static String join(Collection collection, String separator) {\n186.         if (collection == null) {\n187.             return null;\n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedConfigInfoPersistServiceImpl.java", "line_number": 437, "column_number": -1, "description": "", "snippet": "434.         try {\n435.             String idsStr = StringUtils.join(ids, StringUtils.COMMA);\n436. >             List<ConfigInfo> configInfoList = findConfigInfosByIds(idsStr);\n437.             if (CollectionUtils.isNotEmpty(configInfoList)) {\n438.                 removeConfigInfoByIdsAtomic(idsStr);\n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedConfigInfoPersistServiceImpl.java", "line_number": 1170, "column_number": -1, "description": "start of procedure findConfigInfosByIds(...)", "snippet": "1167.     \n1168.     @Override\n1169. >     public List<ConfigInfo> findConfigInfosByIds(final String ids) {\n1170.         if (StringUtils.isBlank(ids)) {\n1171.             return null;\n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedConfigInfoPersistServiceImpl.java", "line_number": 1171, "column_number": -1, "description": "", "snippet": "1168.     @Override\n1169.     public List<ConfigInfo> findConfigInfosByIds(final String ids) {\n1170. >         if (StringUtils.isBlank(ids)) {\n1171.             return null;\n1172.         }\n"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 77, "column_number": -1, "description": "start of procedure isBlank(...)", "snippet": "74.      * @return {@code true} if the string is empty and null and whitespace\n75.      */\n76. >     public static boolean isBlank(final CharSequence cs) {\n77.         int strLen;\n78.         if (cs == null || (strLen = cs.length()) == 0) {\n"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 79, "column_number": -1, "description": "Taking false branch", "snippet": "76.     public static boolean isBlank(final CharSequence cs) {\n77.         int strLen;\n78. >         if (cs == null || (strLen = cs.length()) == 0) {\n79.             return true;\n80.         }\n"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 80, "column_number": -1, "description": "", "snippet": "77.         int strLen;\n78.         if (cs == null || (strLen = cs.length()) == 0) {\n79. >             return true;\n80.         }\n81.         for (int i = 0; i < strLen; i++) {\n"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 87, "column_number": -1, "description": "return from a call to boolean StringUtils.isBlank(CharSequence)", "snippet": "84.             }\n85.         }\n86. >         return true;\n87.     }\n88.     \n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedConfigInfoPersistServiceImpl.java", "line_number": 1171, "column_number": -1, "description": "Taking true branch", "snippet": "1168.     @Override\n1169.     public List<ConfigInfo> findConfigInfosByIds(final String ids) {\n1170. >         if (StringUtils.isBlank(ids)) {\n1171.             return null;\n1172.         }\n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedConfigInfoPersistServiceImpl.java", "line_number": 1172, "column_number": -1, "description": "", "snippet": "1169.     public List<ConfigInfo> findConfigInfosByIds(final String ids) {\n1170.         if (StringUtils.isBlank(ids)) {\n1171. >             return null;\n1172.         }\n1173.         List<Long> paramList = new ArrayList<>();\n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedConfigInfoPersistServiceImpl.java", "line_number": 1184, "column_number": -1, "description": "return from a call to List EmbeddedConfigInfoPersistServiceImpl.findConfigInfosByIds(String)", "snippet": "1181.         context.putWhereParameter(FieldConstant.IDS, paramList);\n1182.         MapperResult mapperResult = configInfoMapper.findConfigInfosByIds(context);\n1183. >         return databaseOperate.queryMany(mapperResult.getSql(), mapperResult.getParamList().toArray(),\n1184.                 CONFIG_INFO_ROW_MAPPER);\n1185.         \n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedConfigInfoPersistServiceImpl.java", "line_number": 438, "column_number": -1, "description": "Taking true branch", "snippet": "435.             String idsStr = StringUtils.join(ids, StringUtils.COMMA);\n436.             List<ConfigInfo> configInfoList = findConfigInfosByIds(idsStr);\n437. >             if (CollectionUtils.isNotEmpty(configInfoList)) {\n438.                 removeConfigInfoByIdsAtomic(idsStr);\n439.                 for (ConfigInfo configInfo : configInfoList) {\n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedConfigInfoPersistServiceImpl.java", "line_number": 439, "column_number": -1, "description": "", "snippet": "436.             List<ConfigInfo> configInfoList = findConfigInfosByIds(idsStr);\n437.             if (CollectionUtils.isNotEmpty(configInfoList)) {\n438. >                 removeConfigInfoByIdsAtomic(idsStr);\n439.                 for (ConfigInfo configInfo : configInfoList) {\n440.                     removeTagByIdAtomic(configInfo.getId());\n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedConfigInfoPersistServiceImpl.java", "line_number": 481, "column_number": -1, "description": "start of procedure removeConfigInfoByIdsAtomic(...)", "snippet": "478.     \n479.     @Override\n480. >     public void removeConfigInfoByIdsAtomic(final String ids) {\n481.         if (StringUtils.isBlank(ids)) {\n482.             return;\n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedConfigInfoPersistServiceImpl.java", "line_number": 482, "column_number": -1, "description": "", "snippet": "479.     @Override\n480.     public void removeConfigInfoByIdsAtomic(final String ids) {\n481. >         if (StringUtils.isBlank(ids)) {\n482.             return;\n483.         }\n"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 77, "column_number": -1, "description": "start of procedure isBlank(...)", "snippet": "74.      * @return {@code true} if the string is empty and null and whitespace\n75.      */\n76. >     public static boolean isBlank(final CharSequence cs) {\n77.         int strLen;\n78.         if (cs == null || (strLen = cs.length()) == 0) {\n"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 79, "column_number": -1, "description": "Taking false branch", "snippet": "76.     public static boolean isBlank(final CharSequence cs) {\n77.         int strLen;\n78. >         if (cs == null || (strLen = cs.length()) == 0) {\n79.             return true;\n80.         }\n"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 80, "column_number": -1, "description": "", "snippet": "77.         int strLen;\n78.         if (cs == null || (strLen = cs.length()) == 0) {\n79. >             return true;\n80.         }\n81.         for (int i = 0; i < strLen; i++) {\n"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 87, "column_number": -1, "description": "return from a call to boolean StringUtils.isBlank(CharSequence)", "snippet": "84.             }\n85.         }\n86. >         return true;\n87.     }\n88.     \n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedConfigInfoPersistServiceImpl.java", "line_number": 482, "column_number": -1, "description": "Taking true branch", "snippet": "479.     @Override\n480.     public void removeConfigInfoByIdsAtomic(final String ids) {\n481. >         if (StringUtils.isBlank(ids)) {\n482.             return;\n483.         }\n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedConfigInfoPersistServiceImpl.java", "line_number": 483, "column_number": -1, "description": "", "snippet": "480.     public void removeConfigInfoByIdsAtomic(final String ids) {\n481.         if (StringUtils.isBlank(ids)) {\n482. >             return;\n483.         }\n484.         List<Long> paramList = new ArrayList<>();\n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedConfigInfoPersistServiceImpl.java", "line_number": 496, "column_number": -1, "description": "return from a call to void EmbeddedConfigInfoPersistServiceImpl.removeConfigInfoByIdsAtomic(String)", "snippet": "493.         MapperResult result = configInfoMapper.removeConfigInfoByIdsAtomic(context);\n494.         EmbeddedStorageContextHolder.addSqlContext(result.getSql(), result.getParamList().toArray());\n495. >     }\n496.     \n497.     @Override\n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedConfigInfoPersistServiceImpl.java", "line_number": 440, "column_number": -1, "description": "", "snippet": "437.             if (CollectionUtils.isNotEmpty(configInfoList)) {\n438.                 removeConfigInfoByIdsAtomic(idsStr);\n439. >                 for (ConfigInfo configInfo : configInfoList) {\n440.                     removeTagByIdAtomic(configInfo.getId());\n441.                     historyConfigInfoPersistService.insertConfigHistoryAtomic(configInfo.getId(), configInfo, srcIp,\n"}]}, {"url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalConfigInfoPersistServiceImpl.java", "rawCode": "/*\n * Copyright 1999-2022 Alibaba Group Holding Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.alibaba.nacos.config.server.service.repository.extrnal;\n\nimport com.alibaba.nacos.api.exception.NacosException;\nimport com.alibaba.nacos.common.utils.MD5Utils;\nimport com.alibaba.nacos.common.utils.Pair;\nimport com.alibaba.nacos.common.utils.StringUtils;\nimport com.alibaba.nacos.config.server.constant.Constants;\nimport com.alibaba.nacos.config.server.enums.FileTypeEnum;\nimport com.alibaba.nacos.config.server.model.ConfigAdvanceInfo;\nimport com.alibaba.nacos.config.server.model.ConfigAllInfo;\nimport com.alibaba.nacos.config.server.model.ConfigInfo;\nimport com.alibaba.nacos.config.server.model.ConfigInfoBase;\nimport com.alibaba.nacos.config.server.model.ConfigInfoStateWrapper;\nimport com.alibaba.nacos.config.server.model.ConfigInfoWrapper;\nimport com.alibaba.nacos.config.server.model.ConfigKey;\nimport com.alibaba.nacos.config.server.model.ConfigOperateResult;\nimport com.alibaba.nacos.config.server.model.SameConfigPolicy;\nimport com.alibaba.nacos.config.server.service.repository.ConfigInfoPersistService;\nimport com.alibaba.nacos.config.server.service.repository.HistoryConfigInfoPersistService;\nimport com.alibaba.nacos.config.server.utils.LogUtil;\nimport com.alibaba.nacos.config.server.utils.ParamUtils;\nimport com.alibaba.nacos.persistence.configuration.condition.ConditionOnExternalStorage;\nimport com.alibaba.nacos.persistence.datasource.DataSourceService;\nimport com.alibaba.nacos.persistence.datasource.DynamicDataSource;\nimport com.alibaba.nacos.persistence.model.Page;\nimport com.alibaba.nacos.persistence.repository.PaginationHelper;\nimport com.alibaba.nacos.persistence.repository.extrnal.ExternalStoragePaginationHelperImpl;\nimport com.alibaba.nacos.plugin.datasource.MapperManager;\nimport com.alibaba.nacos.plugin.datasource.constants.CommonConstant;\nimport com.alibaba.nacos.plugin.datasource.constants.FieldConstant;\nimport com.alibaba.nacos.plugin.datasource.constants.TableConstant;\nimport com.alibaba.nacos.plugin.datasource.mapper.ConfigInfoMapper;\nimport com.alibaba.nacos.plugin.datasource.mapper.ConfigTagsRelationMapper;\nimport com.alibaba.nacos.plugin.datasource.model.MapperContext;\nimport com.alibaba.nacos.plugin.datasource.model.MapperResult;\nimport com.alibaba.nacos.plugin.encryption.handler.EncryptionHandler;\nimport com.alibaba.nacos.sys.env.EnvUtil;\nimport org.apache.commons.collections.CollectionUtils;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.dao.DataAccessException;\nimport org.springframework.dao.DataIntegrityViolationException;\nimport org.springframework.dao.DuplicateKeyException;\nimport org.springframework.dao.EmptyResultDataAccessException;\nimport org.springframework.dao.IncorrectResultSizeDataAccessException;\nimport org.springframework.jdbc.CannotGetJdbcConnectionException;\nimport org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.jdbc.core.PreparedStatementCreator;\nimport org.springframework.jdbc.support.GeneratedKeyHolder;\nimport org.springframework.jdbc.support.KeyHolder;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.TransactionStatus;\nimport org.springframework.transaction.support.TransactionCallback;\nimport org.springframework.transaction.support.TransactionTemplate;\n\nimport java.io.IOException;\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.SQLException;\nimport java.sql.Timestamp;\nimport java.time.LocalDateTime;\nimport java.time.ZoneOffset;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Objects;\n\nimport static com.alibaba.nacos.config.server.service.repository.ConfigRowMapperInjector.CONFIG_ADVANCE_INFO_ROW_MAPPER;\nimport static com.alibaba.nacos.config.server.service.repository.ConfigRowMapperInjector.CONFIG_ALL_INFO_ROW_MAPPER;\nimport static com.alibaba.nacos.config.server.service.repository.ConfigRowMapperInjector.CONFIG_INFO_BASE_ROW_MAPPER;\nimport static com.alibaba.nacos.config.server.service.repository.ConfigRowMapperInjector.CONFIG_INFO_ROW_MAPPER;\nimport static com.alibaba.nacos.config.server.service.repository.ConfigRowMapperInjector.CONFIG_INFO_STATE_WRAPPER_ROW_MAPPER;\nimport static com.alibaba.nacos.config.server.service.repository.ConfigRowMapperInjector.CONFIG_INFO_WRAPPER_ROW_MAPPER;\nimport static com.alibaba.nacos.config.server.service.repository.ConfigRowMapperInjector.CONFIG_KEY_ROW_MAPPER;\n\n/**\n * ExternalConfigInfoPersistServiceImpl.\n *\n * @author lixiaoshuang\n */\n@SuppressWarnings(value = {\"PMD.MethodReturnWrapperTypeRule\", \"checkstyle:linelength\"})\n@Conditional(value = ConditionOnExternalStorage.class)\n@Service(\"externalConfigInfoPersistServiceImpl\")\npublic class ExternalConfigInfoPersistServiceImpl implements ConfigInfoPersistService {\n    \n    private static final String DATA_ID = \"dataId\";\n    \n    private static final String GROUP = \"group\";\n    \n    private static final String APP_NAME = \"appName\";\n    \n    private static final String CONTENT = \"content\";\n    \n    private static final String TENANT = \"tenant_id\";\n    \n    /**\n     * constant variables.\n     */\n    public static final String SPOT = \".\";\n    \n    private DataSourceService dataSourceService;\n    \n    protected JdbcTemplate jt;\n    \n    protected TransactionTemplate tjt;\n    \n    private MapperManager mapperManager;\n    \n    private HistoryConfigInfoPersistService historyConfigInfoPersistService;\n    \n    public ExternalConfigInfoPersistServiceImpl(\n            @Qualifier(\"externalHistoryConfigInfoPersistServiceImpl\") HistoryConfigInfoPersistService historyConfigInfoPersistService) {\n        this.dataSourceService = DynamicDataSource.getInstance().getDataSource();\n        this.jt = dataSourceService.getJdbcTemplate();\n        this.tjt = dataSourceService.getTransactionTemplate();\n        Boolean isDataSourceLogEnable = EnvUtil.getProperty(CommonConstant.NACOS_PLUGIN_DATASOURCE_LOG, Boolean.class,\n                false);\n        this.mapperManager = MapperManager.instance(isDataSourceLogEnable);\n        this.historyConfigInfoPersistService = historyConfigInfoPersistService;\n    }\n    \n    @Override\n    public <E> PaginationHelper<E> createPaginationHelper() {\n        return new ExternalStoragePaginationHelperImpl<>(jt);\n    }\n    \n    @Override\n    public String generateLikeArgument(String s) {\n        String fuzzySearchSign = \"\\\\*\";\n        String sqlLikePercentSign = \"%\";\n        if (s.contains(PATTERN_STR)) {\n            return s.replaceAll(fuzzySearchSign, sqlLikePercentSign);\n        } else {\n            return s;\n        }\n    }\n    \n    @Override\n    public ConfigOperateResult addConfigInfo(final String srcIp, final String srcUser, final ConfigInfo configInfo,\n            final Map<String, Object> configAdvanceInfo) {\n        return tjt.execute(status -> {\n            try {\n                long configId = addConfigInfoAtomic(-1, srcIp, srcUser, configInfo, configAdvanceInfo);\n                String configTags = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"config_tags\");\n                addConfigTagsRelation(configId, configTags, configInfo.getDataId(), configInfo.getGroup(),\n                        configInfo.getTenant());\n                Timestamp now = new Timestamp(System.currentTimeMillis());\n                \n                historyConfigInfoPersistService.insertConfigHistoryAtomic(0, configInfo, srcIp, srcUser, now, \"I\");\n                ConfigInfoStateWrapper configInfoCurrent = this.findConfigInfoState(configInfo.getDataId(),\n                        configInfo.getGroup(), configInfo.getTenant());\n                if (configInfoCurrent == null) {\n                    return new ConfigOperateResult(false);\n                }\n                return new ConfigOperateResult(configInfoCurrent.getId(), configInfoCurrent.getLastModified());\n                \n            } catch (CannotGetJdbcConnectionException e) {\n                LogUtil.FATAL_LOG.error(\"[db-error] \" + e, e);\n                throw e;\n            }\n        });\n    }\n    \n    /**\n     * insert or update config.\n     *\n     * @param srcIp             remote ip\n     * @param srcUser           user\n     * @param configInfo        config info\n     * @param configAdvanceInfo advance info\n     * @return\n     */\n    public ConfigOperateResult insertOrUpdate(String srcIp, String srcUser, ConfigInfo configInfo,\n            Map<String, Object> configAdvanceInfo) {\n        try {\n            return addConfigInfo(srcIp, srcUser, configInfo, configAdvanceInfo);\n        } catch (DuplicateKeyException ive) { // Unique constraint conflict\n            return updateConfigInfo(configInfo, srcIp, srcUser, configAdvanceInfo);\n        }\n    }\n    \n    @Override\n    public ConfigOperateResult insertOrUpdateCas(String srcIp, String srcUser, ConfigInfo configInfo,\n            Map<String, Object> configAdvanceInfo) {\n        try {\n            return addConfigInfo(srcIp, srcUser, configInfo, configAdvanceInfo);\n        } catch (DuplicateKeyException ignore) { // Unique constraint conflict\n            return updateConfigInfoCas(configInfo, srcIp, srcUser, configAdvanceInfo);\n        }\n    }\n    \n    @Override\n    public long addConfigInfoAtomic(final long configId, final String srcIp, final String srcUser,\n            final ConfigInfo configInfo, Map<String, Object> configAdvanceInfo) {\n        final String appNameTmp =\n                StringUtils.isBlank(configInfo.getAppName()) ? StringUtils.EMPTY : configInfo.getAppName();\n        final String tenantTmp =\n                StringUtils.isBlank(configInfo.getTenant()) ? StringUtils.EMPTY : configInfo.getTenant();\n        \n        final String desc = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"desc\");\n        final String use = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"use\");\n        final String effect = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"effect\");\n        final String type = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"type\");\n        final String schema = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"schema\");\n        final String encryptedDataKey =\n                configInfo.getEncryptedDataKey() == null ? StringUtils.EMPTY : configInfo.getEncryptedDataKey();\n        \n        final String md5Tmp = MD5Utils.md5Hex(configInfo.getContent(), Constants.ENCODE);\n        \n        KeyHolder keyHolder = new GeneratedKeyHolder();\n        \n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        final String sql = configInfoMapper.insert(\n                Arrays.asList(\"data_id\", \"group_id\", \"tenant_id\", \"app_name\", \"content\", \"md5\", \"src_ip\", \"src_user\",\n                        \"gmt_create\", \"gmt_modified\", \"c_desc\", \"c_use\", \"effect\", \"type\", \"c_schema\",\n                        \"encrypted_data_key\"));\n        String[] returnGeneratedKeys = configInfoMapper.getPrimaryKeyGeneratedKeys();\n        try {\n            jt.update(new PreparedStatementCreator() {\n                @Override\n                public PreparedStatement createPreparedStatement(Connection connection) throws SQLException {\n                    Timestamp now = new Timestamp(System.currentTimeMillis());\n                    \n                    PreparedStatement ps = connection.prepareStatement(sql, returnGeneratedKeys);\n                    ps.setString(1, configInfo.getDataId());\n                    ps.setString(2, configInfo.getGroup());\n                    ps.setString(3, tenantTmp);\n                    ps.setString(4, appNameTmp);\n                    ps.setString(5, configInfo.getContent());\n                    ps.setString(6, md5Tmp);\n                    ps.setString(7, srcIp);\n                    ps.setString(8, srcUser);\n                    ps.setTimestamp(9, now);\n                    ps.setTimestamp(10, now);\n                    ps.setString(11, desc);\n                    ps.setString(12, use);\n                    ps.setString(13, effect);\n                    ps.setString(14, type);\n                    ps.setString(15, schema);\n                    ps.setString(16, encryptedDataKey);\n                    return ps;\n                }\n            }, keyHolder);\n            Number nu = keyHolder.getKey();\n            if (nu == null) {\n                throw new IllegalArgumentException(\"insert config_info fail\");\n            }\n            return nu.longValue();\n        } catch (CannotGetJdbcConnectionException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e, e);\n            throw e;\n        }\n    }\n    \n    @Override\n    public void addConfigTagRelationAtomic(long configId, String tagName, String dataId, String group, String tenant) {\n        try {\n            ConfigTagsRelationMapper configTagsRelationMapper = mapperManager.findMapper(\n                    dataSourceService.getDataSourceType(), TableConstant.CONFIG_TAGS_RELATION);\n            jt.update(configTagsRelationMapper.insert(\n                            Arrays.asList(\"id\", \"tag_name\", \"tag_type\", \"data_id\", \"group_id\", \"tenant_id\")), configId, tagName,\n                    StringUtils.EMPTY, dataId, group, tenant);\n        } catch (CannotGetJdbcConnectionException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e, e);\n            throw e;\n        }\n    }\n    \n    @Override\n    public void addConfigTagsRelation(long configId, String configTags, String dataId, String group, String tenant) {\n        if (StringUtils.isNotBlank(configTags)) {\n            String[] tagArr = configTags.split(\",\");\n            for (int i = 0; i < tagArr.length; i++) {\n                addConfigTagRelationAtomic(configId, tagArr[i], dataId, group, tenant);\n            }\n        }\n    }\n    \n    @Override\n    public Map<String, Object> batchInsertOrUpdate(List<ConfigAllInfo> configInfoList, String srcUser, String srcIp,\n            Map<String, Object> configAdvanceInfo, SameConfigPolicy policy) throws NacosException {\n        int succCount = 0;\n        int skipCount = 0;\n        List<Map<String, String>> failData = null;\n        List<Map<String, String>> skipData = null;\n        \n        for (int i = 0; i < configInfoList.size(); i++) {\n            ConfigAllInfo configInfo = configInfoList.get(i);\n            try {\n                ParamUtils.checkParam(configInfo.getDataId(), configInfo.getGroup(), \"datumId\",\n                        configInfo.getContent());\n            } catch (NacosException e) {\n                LogUtil.DEFAULT_LOG.error(\"data verification failed\", e);\n                throw e;\n            }\n            ConfigInfo configInfo2Save = new ConfigInfo(configInfo.getDataId(), configInfo.getGroup(),\n                    configInfo.getTenant(), configInfo.getAppName(), configInfo.getContent());\n            configInfo2Save.setEncryptedDataKey(\n                    configInfo.getEncryptedDataKey() == null ? StringUtils.EMPTY : configInfo.getEncryptedDataKey());\n            \n            String type = configInfo.getType();\n            if (StringUtils.isBlank(type)) {\n                // simple judgment of file type based on suffix\n                if (configInfo.getDataId().contains(SPOT)) {\n                    String extName = configInfo.getDataId().substring(configInfo.getDataId().lastIndexOf(SPOT) + 1);\n                    FileTypeEnum fileTypeEnum = FileTypeEnum.getFileTypeEnumByFileExtensionOrFileType(extName);\n                    type = fileTypeEnum.getFileType();\n                } else {\n                    type = FileTypeEnum.getFileTypeEnumByFileExtensionOrFileType(null).getFileType();\n                }\n            }\n            if (configAdvanceInfo == null) {\n                configAdvanceInfo = new HashMap<>(16);\n            }\n            configAdvanceInfo.put(\"type\", type);\n            configAdvanceInfo.put(\"desc\", configInfo.getDesc());\n            try {\n                addConfigInfo(srcIp, srcUser, configInfo2Save, configAdvanceInfo);\n                succCount++;\n            } catch (DataIntegrityViolationException ive) {\n                // uniqueness constraint conflict\n                if (SameConfigPolicy.ABORT.equals(policy)) {\n                    failData = new ArrayList<>();\n                    skipData = new ArrayList<>();\n                    Map<String, String> faileditem = new HashMap<>(2);\n                    faileditem.put(\"dataId\", configInfo2Save.getDataId());\n                    faileditem.put(\"group\", configInfo2Save.getGroup());\n                    failData.add(faileditem);\n                    for (int j = (i + 1); j < configInfoList.size(); j++) {\n                        ConfigInfo skipConfigInfo = configInfoList.get(j);\n                        Map<String, String> skipitem = new HashMap<>(2);\n                        skipitem.put(\"dataId\", skipConfigInfo.getDataId());\n                        skipitem.put(\"group\", skipConfigInfo.getGroup());\n                        skipData.add(skipitem);\n                    }\n                    break;\n                } else if (SameConfigPolicy.SKIP.equals(policy)) {\n                    skipCount++;\n                    if (skipData == null) {\n                        skipData = new ArrayList<>();\n                    }\n                    Map<String, String> skipitem = new HashMap<>(2);\n                    skipitem.put(\"dataId\", configInfo2Save.getDataId());\n                    skipitem.put(\"group\", configInfo2Save.getGroup());\n                    skipData.add(skipitem);\n                } else if (SameConfigPolicy.OVERWRITE.equals(policy)) {\n                    succCount++;\n                    updateConfigInfo(configInfo2Save, srcIp, srcUser, configAdvanceInfo);\n                }\n            }\n        }\n        Map<String, Object> result = new HashMap<>(4);\n        result.put(\"succCount\", succCount);\n        result.put(\"skipCount\", skipCount);\n        if (failData != null && !failData.isEmpty()) {\n            result.put(\"failData\", failData);\n        }\n        if (skipData != null && !skipData.isEmpty()) {\n            result.put(\"skipData\", skipData);\n        }\n        return result;\n    }\n    \n    @Override\n    public void removeConfigInfo(final String dataId, final String group, final String tenant, final String srcIp,\n            final String srcUser) {\n        tjt.execute(new TransactionCallback<Boolean>() {\n            final Timestamp time = new Timestamp(System.currentTimeMillis());\n            \n            @Override\n            public Boolean doInTransaction(TransactionStatus status) {\n                try {\n                    ConfigInfo configInfo = findConfigInfo(dataId, group, tenant);\n                    if (configInfo != null) {\n                        removeConfigInfoAtomic(dataId, group, tenant, srcIp, srcUser);\n                        removeTagByIdAtomic(configInfo.getId());\n                        historyConfigInfoPersistService.insertConfigHistoryAtomic(configInfo.getId(), configInfo, srcIp,\n                                srcUser, time, \"D\");\n                    }\n                } catch (CannotGetJdbcConnectionException e) {\n                    LogUtil.FATAL_LOG.error(\"[db-error] \" + e, e);\n                    throw e;\n                }\n                return Boolean.TRUE;\n            }\n        });\n    }\n    \n    @Override\n    public List<ConfigInfo> removeConfigInfoByIds(final List<Long> ids, final String srcIp, final String srcUser) {\n        if (CollectionUtils.isEmpty(ids)) {\n            return null;\n        }\n        ids.removeAll(Collections.singleton(null));\n        return tjt.execute(new TransactionCallback<List<ConfigInfo>>() {\n            final Timestamp time = new Timestamp(System.currentTimeMillis());\n            \n            @Override\n            public List<ConfigInfo> doInTransaction(TransactionStatus status) {\n                try {\n                    String idsStr = StringUtils.join(ids, StringUtils.COMMA);\n                    List<ConfigInfo> configInfoList = findConfigInfosByIds(idsStr);\n                    if (!CollectionUtils.isEmpty(configInfoList)) {\n                        removeConfigInfoByIdsAtomic(idsStr);\n                        for (ConfigInfo configInfo : configInfoList) {\n                            removeTagByIdAtomic(configInfo.getId());\n                            historyConfigInfoPersistService.insertConfigHistoryAtomic(configInfo.getId(), configInfo,\n                                    srcIp, srcUser, time, \"D\");\n                        }\n                    }\n                    return configInfoList;\n                } catch (CannotGetJdbcConnectionException e) {\n                    LogUtil.FATAL_LOG.error(\"[db-error] \" + e, e);\n                    throw e;\n                }\n            }\n        });\n    }\n    \n    @Override\n    public void removeTagByIdAtomic(long id) {\n        try {\n            ConfigTagsRelationMapper configTagsRelationMapper = mapperManager.findMapper(\n                    dataSourceService.getDataSourceType(), TableConstant.CONFIG_TAGS_RELATION);\n            jt.update(configTagsRelationMapper.delete(Arrays.asList(\"id\")), id);\n        } catch (CannotGetJdbcConnectionException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e, e);\n            throw e;\n        }\n    }\n    \n    @Override\n    public void removeConfigInfoAtomic(final String dataId, final String group, final String tenant, final String srcIp,\n            final String srcUser) {\n        String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n        try {\n            ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                    TableConstant.CONFIG_INFO);\n            jt.update(configInfoMapper.delete(Arrays.asList(\"data_id\", \"group_id\", \"tenant_id\")), dataId, group,\n                    tenantTmp);\n        } catch (CannotGetJdbcConnectionException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e, e);\n            throw e;\n        }\n    }\n    \n    @Override\n    public void removeConfigInfoByIdsAtomic(final String ids) {\n        if (StringUtils.isBlank(ids)) {\n            return;\n        }\n        List<Long> paramList = new ArrayList<>();\n        String[] idArr = ids.split(\",\");\n        for (int i = 0; i < idArr.length; i++) {\n            paramList.add(Long.parseLong(idArr[i]));\n        }\n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        MapperContext context = new MapperContext();\n        context.putWhereParameter(FieldConstant.IDS, paramList);\n        MapperResult result = configInfoMapper.removeConfigInfoByIdsAtomic(context);\n        try {\n            jt.update(result.getSql(), result.getParamList().toArray());\n        } catch (CannotGetJdbcConnectionException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e, e);\n            throw e;\n        }\n    }\n    \n    @Override\n    public ConfigOperateResult updateConfigInfo(final ConfigInfo configInfo, final String srcIp, final String srcUser,\n            final Map<String, Object> configAdvanceInfo) {\n        return tjt.execute(status -> {\n            try {\n                ConfigInfo oldConfigInfo = findConfigInfo(configInfo.getDataId(), configInfo.getGroup(),\n                        configInfo.getTenant());\n                if (oldConfigInfo == null) {\n                    if (LogUtil.FATAL_LOG.isErrorEnabled()) {\n                        LogUtil.FATAL_LOG.error(\"expected config info[dataid:{}, group:{}, tenent:{}] but not found.\",\n                                configInfo.getDataId(), configInfo.getGroup(), configInfo.getTenant());\n                    }\n                    return new ConfigOperateResult(false);\n                }\n                \n                String appNameTmp = oldConfigInfo.getAppName();\n                /*\n                 If the appName passed by the user is not empty, use the persistent user's appName,\n                 otherwise use db; when emptying appName, you need to pass an empty string\n                 */\n                if (configInfo.getAppName() == null) {\n                    configInfo.setAppName(appNameTmp);\n                }\n                updateConfigInfoAtomic(configInfo, srcIp, srcUser, configAdvanceInfo);\n                String configTags = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"config_tags\");\n                if (configTags != null) {\n                    // delete all tags and then recreate\n                    removeTagByIdAtomic(oldConfigInfo.getId());\n                    addConfigTagsRelation(oldConfigInfo.getId(), configTags, configInfo.getDataId(),\n                            configInfo.getGroup(), configInfo.getTenant());\n                }\n                Timestamp now = new Timestamp(System.currentTimeMillis());\n                \n                historyConfigInfoPersistService.insertConfigHistoryAtomic(oldConfigInfo.getId(), oldConfigInfo, srcIp,\n                        srcUser, now, \"U\");\n                return getConfigInfoOperateResult(configInfo.getDataId(), configInfo.getGroup(),\n                        configInfo.getTenant());\n            } catch (CannotGetJdbcConnectionException e) {\n                LogUtil.FATAL_LOG.error(\"[db-error] \" + e, e);\n                throw e;\n            }\n        });\n    }\n    \n    private ConfigOperateResult getConfigInfoOperateResult(String dataId, String group, String tenant) {\n        ConfigInfoStateWrapper configInfoLast = this.findConfigInfoState(dataId, group, tenant);\n        if (configInfoLast == null) {\n            return new ConfigOperateResult(false);\n        }\n        return new ConfigOperateResult(configInfoLast.getId(), configInfoLast.getLastModified());\n        \n    }\n    \n    @Override\n    public ConfigOperateResult updateConfigInfoCas(final ConfigInfo configInfo, final String srcIp,\n            final String srcUser, final Map<String, Object> configAdvanceInfo) {\n        return tjt.execute(status -> {\n            try {\n                ConfigInfo oldConfigInfo = findConfigInfo(configInfo.getDataId(), configInfo.getGroup(),\n                        configInfo.getTenant());\n                if (oldConfigInfo == null) {\n                    if (LogUtil.FATAL_LOG.isErrorEnabled()) {\n                        LogUtil.FATAL_LOG.error(\"expected config info[dataid:{}, group:{}, tenent:{}] but not found.\",\n                                configInfo.getDataId(), configInfo.getGroup(), configInfo.getTenant());\n                    }\n                    return new ConfigOperateResult(false);\n                }\n                String appNameTmp = oldConfigInfo.getAppName();\n                /*\n                 If the appName passed by the user is not empty, use the persistent user's appName,\n                 otherwise use db; when emptying appName, you need to pass an empty string\n                 */\n                if (configInfo.getAppName() == null) {\n                    configInfo.setAppName(appNameTmp);\n                }\n                int rows = updateConfigInfoAtomicCas(configInfo, srcIp, srcUser, configAdvanceInfo);\n                if (rows < 1) {\n                    return new ConfigOperateResult(false);\n                }\n                String configTags = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"config_tags\");\n                if (configTags != null) {\n                    // delete all tags and then recreate\n                    removeTagByIdAtomic(oldConfigInfo.getId());\n                    addConfigTagsRelation(oldConfigInfo.getId(), configTags, configInfo.getDataId(),\n                            configInfo.getGroup(), configInfo.getTenant());\n                }\n                Timestamp now = new Timestamp(System.currentTimeMillis());\n                \n                historyConfigInfoPersistService.insertConfigHistoryAtomic(oldConfigInfo.getId(), oldConfigInfo, srcIp,\n                        srcUser, now, \"U\");\n                ConfigInfoStateWrapper configInfoLast = this.findConfigInfoState(configInfo.getDataId(),\n                        configInfo.getGroup(), configInfo.getTenant());\n                if (configInfoLast == null) {\n                    return new ConfigOperateResult(false);\n                }\n                return new ConfigOperateResult(configInfoLast.getId(), configInfoLast.getLastModified());\n            } catch (CannotGetJdbcConnectionException e) {\n                LogUtil.FATAL_LOG.error(\"[db-error] \" + e, e);\n                throw e;\n            }\n        });\n    }\n    \n    private int updateConfigInfoAtomicCas(final ConfigInfo configInfo, final String srcIp, final String srcUser,\n            Map<String, Object> configAdvanceInfo) {\n        String appNameTmp = StringUtils.isBlank(configInfo.getAppName()) ? StringUtils.EMPTY : configInfo.getAppName();\n        String tenantTmp = StringUtils.isBlank(configInfo.getTenant()) ? StringUtils.EMPTY : configInfo.getTenant();\n        final String md5Tmp = MD5Utils.md5Hex(configInfo.getContent(), Constants.ENCODE);\n        String desc = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"desc\");\n        String use = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"use\");\n        String effect = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"effect\");\n        String type = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"type\");\n        String schema = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"schema\");\n        \n        try {\n            ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                    TableConstant.CONFIG_INFO);\n            Timestamp now = new Timestamp(System.currentTimeMillis());\n            \n            MapperContext context = new MapperContext();\n            context.putUpdateParameter(FieldConstant.CONTENT, configInfo.getContent());\n            context.putUpdateParameter(FieldConstant.MD5, md5Tmp);\n            context.putUpdateParameter(FieldConstant.SRC_IP, srcIp);\n            context.putUpdateParameter(FieldConstant.SRC_USER, srcUser);\n            context.putUpdateParameter(FieldConstant.GMT_MODIFIED, now);\n            context.putUpdateParameter(FieldConstant.APP_NAME, appNameTmp);\n            context.putUpdateParameter(FieldConstant.C_DESC, desc);\n            context.putUpdateParameter(FieldConstant.C_USE, use);\n            context.putUpdateParameter(FieldConstant.EFFECT, effect);\n            context.putUpdateParameter(FieldConstant.TYPE, type);\n            context.putUpdateParameter(FieldConstant.C_SCHEMA, schema);\n            \n            context.putWhereParameter(FieldConstant.DATA_ID, configInfo.getDataId());\n            context.putWhereParameter(FieldConstant.GROUP_ID, configInfo.getGroup());\n            context.putWhereParameter(FieldConstant.TENANT_ID, tenantTmp);\n            context.putWhereParameter(FieldConstant.MD5, configInfo.getMd5());\n            \n            MapperResult mapperResult = configInfoMapper.updateConfigInfoAtomicCas(context);\n            return jt.update(mapperResult.getSql(), mapperResult.getParamList().toArray());\n        } catch (CannotGetJdbcConnectionException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e, e);\n            throw e;\n        }\n    }\n    \n    @Override\n    public void updateConfigInfoAtomic(final ConfigInfo configInfo, final String srcIp, final String srcUser,\n            Map<String, Object> configAdvanceInfo) {\n        String appNameTmp = StringUtils.isBlank(configInfo.getAppName()) ? StringUtils.EMPTY : configInfo.getAppName();\n        String tenantTmp = StringUtils.isBlank(configInfo.getTenant()) ? StringUtils.EMPTY : configInfo.getTenant();\n        final String md5Tmp = MD5Utils.md5Hex(configInfo.getContent(), Constants.ENCODE);\n        String desc = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"desc\");\n        String use = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"use\");\n        String effect = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"effect\");\n        String type = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"type\");\n        String schema = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"schema\");\n        final String encryptedDataKey =\n                configInfo.getEncryptedDataKey() == null ? StringUtils.EMPTY : configInfo.getEncryptedDataKey();\n        \n        try {\n            ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                    TableConstant.CONFIG_INFO);\n            Timestamp now = new Timestamp(System.currentTimeMillis());\n            \n            jt.update(configInfoMapper.update(\n                            Arrays.asList(\"content\", \"md5\", \"src_ip\", \"src_user\", \"gmt_modified\", \"app_name\", \"c_desc\", \"c_use\",\n                                    \"effect\", \"type\", \"c_schema\", \"encrypted_data_key\"),\n                            Arrays.asList(\"data_id\", \"group_id\", \"tenant_id\")), configInfo.getContent(), md5Tmp, srcIp, srcUser,\n                    now, appNameTmp, desc, use, effect, type, schema, encryptedDataKey, configInfo.getDataId(),\n                    configInfo.getGroup(), tenantTmp);\n        } catch (CannotGetJdbcConnectionException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e, e);\n            throw e;\n        }\n    }\n    \n    @Override\n    public void updateMd5(String dataId, String group, String tenant, String md5, Timestamp lastTime) {\n        String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n        try {\n            ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                    TableConstant.CONFIG_INFO);\n            jt.update(configInfoMapper.update(Collections.singletonList(\"md5\"),\n                            Arrays.asList(\"data_id\", \"group_id\", \"tenant_id\", \"gmt_modified\")), md5, dataId, group, tenantTmp,\n                    lastTime);\n        } catch (CannotGetJdbcConnectionException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e, e);\n            throw e;\n        }\n    }\n    \n    @Override\n    public long findConfigMaxId() {\n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        \n        MapperResult mapperResult = configInfoMapper.findConfigMaxId(null);\n        try {\n            return jt.queryForObject(mapperResult.getSql(), Long.class);\n        } catch (NullPointerException e) {\n            return 0;\n        }\n    }\n    \n    @Deprecated\n    @Override\n    public List<ConfigInfo> findAllDataIdAndGroup() {\n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        MapperResult mapperResult = configInfoMapper.findAllDataIdAndGroup(null);\n        \n        try {\n            return jt.query(mapperResult.getSql(), new Object[] {}, CONFIG_INFO_ROW_MAPPER);\n        } catch (EmptyResultDataAccessException e) {\n            return Collections.emptyList();\n        } catch (CannotGetJdbcConnectionException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e, e);\n            throw e;\n        } catch (Exception e) {\n            LogUtil.FATAL_LOG.error(\"[db-other-error]\" + e.getMessage(), e);\n            throw new RuntimeException(e);\n        }\n    }\n    \n    @Override\n    public ConfigInfoBase findConfigInfoBase(final String dataId, final String group) {\n        try {\n            ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                    TableConstant.CONFIG_INFO);\n            return this.jt.queryForObject(configInfoMapper.select(Arrays.asList(\"id\", \"data_id\", \"group_id\", \"content\"),\n                            Arrays.asList(\"data_id\", \"group_id\", \"tenant_id\")), new Object[] {dataId, group, StringUtils.EMPTY},\n                    CONFIG_INFO_BASE_ROW_MAPPER);\n        } catch (EmptyResultDataAccessException e) { // Indicates that the data does not exist, returns null.\n            return null;\n        } catch (CannotGetJdbcConnectionException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e, e);\n            throw e;\n        }\n    }\n    \n    @Override\n    public ConfigInfo findConfigInfo(long id) {\n        try {\n            ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                    TableConstant.CONFIG_INFO);\n            return this.jt.queryForObject(configInfoMapper.select(\n                    Arrays.asList(\"id\", \"data_id\", \"group_id\", \"tenant_id\", \"app_name\", \"content\"),\n                    Collections.singletonList(\"id\")), new Object[] {id}, CONFIG_INFO_ROW_MAPPER);\n        } catch (EmptyResultDataAccessException e) { // Indicates that the data does not exist, returns null.\n            return null;\n        } catch (CannotGetJdbcConnectionException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e, e);\n            throw e;\n        }\n    }\n    \n    @Override\n    public ConfigInfoWrapper findConfigInfo(final String dataId, final String group, final String tenant) {\n        final String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n        try {\n            ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                    TableConstant.CONFIG_INFO);\n            return this.jt.queryForObject(configInfoMapper.select(\n                            Arrays.asList(\"id\", \"data_id\", \"group_id\", \"tenant_id\", \"app_name\", \"content\", \"md5\", \"type\",\n                                    \"encrypted_data_key\", \"gmt_modified\"), Arrays.asList(\"data_id\", \"group_id\", \"tenant_id\")),\n                    new Object[] {dataId, group, tenantTmp}, CONFIG_INFO_WRAPPER_ROW_MAPPER);\n        } catch (EmptyResultDataAccessException e) { // Indicates that the data does not exist, returns null.\n            return null;\n        } catch (CannotGetJdbcConnectionException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e, e);\n            throw e;\n        }\n    }\n    \n    @Override\n    public Page<ConfigInfo> findConfigInfo4Page(final int pageNo, final int pageSize, final String dataId,\n            final String group, final String tenant, final Map<String, Object> configAdvanceInfo) {\n        String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n        PaginationHelper<ConfigInfo> helper = createPaginationHelper();\n        final String appName = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"appName\");\n        final String content = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"content\");\n        final String configTags = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"config_tags\");\n        MapperResult sql;\n        MapperResult sqlCount;\n        \n        final MapperContext context = new MapperContext();\n        context.putWhereParameter(FieldConstant.TENANT_ID, tenantTmp);\n        if (StringUtils.isNotBlank(dataId)) {\n            context.putWhereParameter(FieldConstant.DATA_ID, dataId);\n        }\n        if (StringUtils.isNotBlank(group)) {\n            context.putWhereParameter(FieldConstant.GROUP_ID, group);\n            \n        }\n        if (StringUtils.isNotBlank(appName)) {\n            context.putWhereParameter(FieldConstant.APP_NAME, appName);\n        }\n        if (!StringUtils.isBlank(content)) {\n            context.putWhereParameter(FieldConstant.CONTENT, content);\n        }\n        context.setStartRow((pageNo - 1) * pageSize);\n        context.setPageSize(pageSize);\n        \n        if (StringUtils.isNotBlank(configTags)) {\n            String[] tagArr = configTags.split(\",\");\n            context.putWhereParameter(FieldConstant.TAG_ARR, Arrays.asList(tagArr));\n            ConfigTagsRelationMapper configTagsRelationMapper = mapperManager.findMapper(\n                    dataSourceService.getDataSourceType(), TableConstant.CONFIG_TAGS_RELATION);\n            sqlCount = configTagsRelationMapper.findConfigInfo4PageCountRows(context);\n            sql = configTagsRelationMapper.findConfigInfo4PageFetchRows(context);\n        } else {\n            ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                    TableConstant.CONFIG_INFO);\n            \n            sqlCount = configInfoMapper.findConfigInfo4PageCountRows(context);\n            sql = configInfoMapper.findConfigInfo4PageFetchRows(context);\n        }\n        try {\n            Page<ConfigInfo> page = helper.fetchPageLimit(sqlCount, sql, pageNo, pageSize, CONFIG_INFO_ROW_MAPPER);\n            for (ConfigInfo configInfo : page.getPageItems()) {\n                Pair<String, String> pair = EncryptionHandler.decryptHandler(configInfo.getDataId(),\n                        configInfo.getEncryptedDataKey(), configInfo.getContent());\n                configInfo.setContent(pair.getSecond());\n            }\n            return page;\n        } catch (CannotGetJdbcConnectionException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \", e);\n            throw e;\n        }\n    }\n    \n    @Override\n    public Page<ConfigInfo> findConfigInfoByApp(final int pageNo, final int pageSize, final String tenant,\n            final String appName) {\n        String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n        PaginationHelper<ConfigInfo> helper = createPaginationHelper();\n        try {\n            final int startRow = (pageNo - 1) * pageSize;\n            ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                    TableConstant.CONFIG_INFO);\n            MapperContext context = new MapperContext(startRow, pageSize);\n            context.putWhereParameter(FieldConstant.APP_NAME, appName);\n            context.putWhereParameter(FieldConstant.TENANT_ID, generateLikeArgument(tenantTmp));\n            \n            MapperResult countRows = configInfoMapper.findConfigInfoByAppCountRows(context);\n            MapperResult fetchRows = configInfoMapper.findConfigInfoByAppFetchRows(context);\n            \n            return helper.fetchPageLimit(countRows, fetchRows, pageNo, pageSize, CONFIG_INFO_ROW_MAPPER);\n        } catch (CannotGetJdbcConnectionException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e, e);\n            throw e;\n        }\n    }\n    \n    @Override\n    public Page<ConfigInfoBase> findConfigInfoBaseByGroup(final int pageNo, final int pageSize, final String group) {\n        PaginationHelper<ConfigInfoBase> helper = createPaginationHelper();\n        try {\n            final int startRow = (pageNo - 1) * pageSize;\n            ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                    TableConstant.CONFIG_INFO);\n            \n            MapperContext context = new MapperContext(startRow, pageSize);\n            context.putWhereParameter(FieldConstant.GROUP_ID, group);\n            context.putWhereParameter(FieldConstant.TENANT_ID, StringUtils.EMPTY);\n            MapperResult mapperResult = configInfoMapper.findConfigInfoBaseByGroupFetchRows(context);\n            \n            return helper.fetchPage(configInfoMapper.count(Arrays.asList(\"group_id\", \"tenant_id\")),\n                    mapperResult.getSql(), mapperResult.getParamList().toArray(), pageNo, pageSize,\n                    CONFIG_INFO_BASE_ROW_MAPPER);\n        } catch (CannotGetJdbcConnectionException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e, e);\n            throw e;\n        }\n    }\n    \n    @Override\n    public int configInfoCount() {\n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        String sql = configInfoMapper.count(null);\n        Integer result = jt.queryForObject(sql, Integer.class);\n        if (result == null) {\n            throw new IllegalArgumentException(\"configInfoCount error\");\n        }\n        return result.intValue();\n    }\n    \n    @Override\n    public int configInfoCount(String tenant) {\n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        MapperContext context = new MapperContext();\n        context.putWhereParameter(FieldConstant.TENANT_ID, tenant);\n        MapperResult mapperResult = configInfoMapper.configInfoLikeTenantCount(context);\n        Integer result = jt.queryForObject(mapperResult.getSql(), mapperResult.getParamList().toArray(), Integer.class);\n        if (result == null) {\n            throw new IllegalArgumentException(\"configInfoCount error\");\n        }\n        return result.intValue();\n    }\n    \n    @Override\n    public List<String> getTenantIdList(int page, int pageSize) {\n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        int from = (page - 1) * pageSize;\n        MapperResult mapperResult = configInfoMapper.getTenantIdList(new MapperContext(from, pageSize));\n        return jt.queryForList(mapperResult.getSql(), mapperResult.getParamList().toArray(), String.class);\n    }\n    \n    @Override\n    public List<String> getGroupIdList(int page, int pageSize) {\n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        int from = (page - 1) * pageSize;\n        MapperResult mapperResult = configInfoMapper.getGroupIdList(new MapperContext(from, pageSize));\n        return jt.queryForList(mapperResult.getSql(), mapperResult.getParamList().toArray(), String.class);\n    }\n    \n    @Override\n    public Page<ConfigInfo> findAllConfigInfo(final int pageNo, final int pageSize, final String tenant) {\n        String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n        final int startRow = (pageNo - 1) * pageSize;\n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        String sqlCountRows = configInfoMapper.count(null);\n        MapperContext context = new MapperContext(startRow, pageSize);\n        context.putWhereParameter(FieldConstant.TENANT_ID, generateLikeArgument(generateLikeArgument(tenantTmp)));\n        MapperResult sqlFetchRows = configInfoMapper.findAllConfigInfoFetchRows(context);\n        PaginationHelper<ConfigInfo> helper = createPaginationHelper();\n        try {\n            return helper.fetchPageLimit(sqlCountRows, sqlFetchRows.getSql(), sqlFetchRows.getParamList().toArray(),\n                    pageNo, pageSize, CONFIG_INFO_ROW_MAPPER);\n        } catch (CannotGetJdbcConnectionException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e, e);\n            throw e;\n        }\n    }\n    \n    @Override\n    public Page<ConfigKey> findAllConfigKey(final int pageNo, final int pageSize, final String tenant) {\n        String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        int startRow = (pageNo - 1) * pageSize;\n        MapperContext context = new MapperContext(startRow, pageSize);\n        context.putWhereParameter(FieldConstant.TENANT_ID, generateLikeArgument(tenantTmp));\n        final MapperResult mapperResult = configInfoMapper.findAllConfigKey(context);\n        \n        final int totalCount = configInfoCount(tenant);\n        int pageCount = totalCount / pageSize;\n        if (totalCount > pageSize * pageCount) {\n            pageCount++;\n        }\n        \n        if (pageNo > pageCount) {\n            return null;\n        }\n        \n        final Page<ConfigKey> page = new Page<>();\n        page.setPageNumber(pageNo);\n        page.setPagesAvailable(pageCount);\n        page.setTotalCount(totalCount);\n        \n        try {\n            List<ConfigKey> result = jt.query(mapperResult.getSql(), mapperResult.getParamList().toArray(),\n                    CONFIG_KEY_ROW_MAPPER);\n            \n            for (ConfigKey item : result) {\n                page.getPageItems().add(item);\n            }\n            return page;\n        } catch (EmptyResultDataAccessException e) {\n            return page;\n        } catch (CannotGetJdbcConnectionException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e, e);\n            throw e;\n        }\n    }\n    \n    @Override\n    public Page<ConfigInfoWrapper> findAllConfigInfoFragment(final long lastMaxId, final int pageSize) {\n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        MapperContext context = new MapperContext(0, pageSize);\n        context.putWhereParameter(FieldConstant.ID, lastMaxId);\n        MapperResult select = configInfoMapper.findAllConfigInfoFragment(context);\n        PaginationHelper<ConfigInfoWrapper> helper = createPaginationHelper();\n        try {\n            return helper.fetchPageLimit(select.getSql(), select.getParamList().toArray(), 1, pageSize,\n                    CONFIG_INFO_WRAPPER_ROW_MAPPER);\n        } catch (CannotGetJdbcConnectionException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e, e);\n            throw e;\n        }\n    }\n    \n    @Override\n    public Page<ConfigInfo> findConfigInfoLike(final int pageNo, final int pageSize, final ConfigKey[] configKeys,\n            final boolean blacklist) {\n        String sqlCountRows = \"SELECT count(*) FROM config_info WHERE \";\n        String sqlFetchRows = \"SELECT id,data_id,group_id,tenant_id,app_name,content FROM config_info WHERE \";\n        StringBuilder where = new StringBuilder(\" 1=1 \");\n        // Whitelist, please leave the synchronization condition empty, there is no configuration that meets the conditions\n        if (configKeys.length == 0 && blacklist == false) {\n            Page<ConfigInfo> page = new Page<>();\n            page.setTotalCount(0);\n            return page;\n        }\n        PaginationHelper<ConfigInfo> helper = createPaginationHelper();\n        List<String> params = new ArrayList<>();\n        boolean isFirst = true;\n        for (ConfigKey configInfo : configKeys) {\n            String dataId = configInfo.getDataId();\n            String group = configInfo.getGroup();\n            String appName = configInfo.getAppName();\n            \n            if (StringUtils.isBlank(dataId) && StringUtils.isBlank(group) && StringUtils.isBlank(appName)) {\n                break;\n            }\n            \n            if (blacklist) {\n                if (isFirst) {\n                    isFirst = false;\n                    where.append(\" AND \");\n                } else {\n                    where.append(\" AND \");\n                }\n                \n                where.append('(');\n                boolean isFirstSub = true;\n                if (!StringUtils.isBlank(dataId)) {\n                    where.append(\" data_id NOT LIKE ? \");\n                    params.add(generateLikeArgument(dataId));\n                    isFirstSub = false;\n                }\n                if (!StringUtils.isBlank(group)) {\n                    if (!isFirstSub) {\n                        where.append(\" OR \");\n                    }\n                    where.append(\" group_id NOT LIKE ? \");\n                    params.add(generateLikeArgument(group));\n                    isFirstSub = false;\n                }\n                if (!StringUtils.isBlank(appName)) {\n                    if (!isFirstSub) {\n                        where.append(\" OR \");\n                    }\n                    where.append(\" app_name != ? \");\n                    params.add(appName);\n                    isFirstSub = false;\n                }\n                where.append(\") \");\n            } else {\n                if (isFirst) {\n                    isFirst = false;\n                    where.append(\" AND \");\n                } else {\n                    where.append(\" OR \");\n                }\n                where.append('(');\n                boolean isFirstSub = true;\n                if (!StringUtils.isBlank(dataId)) {\n                    where.append(\" data_id LIKE ? \");\n                    params.add(generateLikeArgument(dataId));\n                    isFirstSub = false;\n                }\n                if (!StringUtils.isBlank(group)) {\n                    if (!isFirstSub) {\n                        where.append(\" AND \");\n                    }\n                    where.append(\" group_id LIKE ? \");\n                    params.add(generateLikeArgument(group));\n                    isFirstSub = false;\n                }\n                if (!StringUtils.isBlank(appName)) {\n                    if (!isFirstSub) {\n                        where.append(\" AND \");\n                    }\n                    where.append(\" app_name = ? \");\n                    params.add(appName);\n                    isFirstSub = false;\n                }\n                where.append(\") \");\n            }\n        }\n        \n        try {\n            return helper.fetchPage(sqlCountRows + where, sqlFetchRows + where, params.toArray(), pageNo, pageSize,\n                    CONFIG_INFO_ROW_MAPPER);\n        } catch (CannotGetJdbcConnectionException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e, e);\n            throw e;\n        }\n    }\n    \n    @Override\n    public Page<ConfigInfo> findConfigInfoLike4Page(final int pageNo, final int pageSize, final String dataId,\n            final String group, final String tenant, final Map<String, Object> configAdvanceInfo) {\n        String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n        final String appName = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"appName\");\n        final String content = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"content\");\n        final String configTags = configAdvanceInfo == null ? null : (String) configAdvanceInfo.get(\"config_tags\");\n        PaginationHelper<ConfigInfo> helper = createPaginationHelper();\n        MapperResult sqlCountRows;\n        MapperResult sqlFetchRows;\n        \n        MapperContext context = new MapperContext((pageNo - 1) * pageSize, pageSize);\n        context.putWhereParameter(FieldConstant.TENANT_ID, generateLikeArgument(tenantTmp));\n        \n        if (!StringUtils.isBlank(dataId)) {\n            context.putWhereParameter(FieldConstant.DATA_ID, generateLikeArgument(dataId));\n        }\n        if (!StringUtils.isBlank(group)) {\n            context.putWhereParameter(FieldConstant.GROUP_ID, generateLikeArgument(group));\n        }\n        if (!StringUtils.isBlank(appName)) {\n            context.putWhereParameter(FieldConstant.APP_NAME, appName);\n        }\n        if (!StringUtils.isBlank(content)) {\n            context.putWhereParameter(FieldConstant.CONTENT, generateLikeArgument(content));\n        }\n        \n        if (StringUtils.isNotBlank(configTags)) {\n            String[] tagArr = configTags.split(\",\");\n            context.putWhereParameter(FieldConstant.TAG_ARR, tagArr);\n            ConfigTagsRelationMapper configTagsRelationMapper = mapperManager.findMapper(\n                    dataSourceService.getDataSourceType(), TableConstant.CONFIG_TAGS_RELATION);\n            sqlCountRows = configTagsRelationMapper.findConfigInfoLike4PageCountRows(context);\n            sqlFetchRows = configTagsRelationMapper.findConfigInfoLike4PageFetchRows(context);\n        } else {\n            ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                    TableConstant.CONFIG_INFO);\n            sqlCountRows = configInfoMapper.findConfigInfoLike4PageCountRows(context);\n            sqlFetchRows = configInfoMapper.findConfigInfoLike4PageFetchRows(context);\n        }\n        \n        try {\n            Page<ConfigInfo> page = helper.fetchPageLimit(sqlCountRows, sqlFetchRows, pageNo, pageSize,\n                    CONFIG_INFO_ROW_MAPPER);\n            \n            for (ConfigInfo configInfo : page.getPageItems()) {\n                Pair<String, String> pair = EncryptionHandler.decryptHandler(configInfo.getDataId(),\n                        configInfo.getEncryptedDataKey(), configInfo.getContent());\n                configInfo.setContent(pair.getSecond());\n            }\n            return page;\n        } catch (CannotGetJdbcConnectionException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e, e);\n            throw e;\n        }\n    }\n    \n    @Override\n    public Page<ConfigInfoBase> findConfigInfoBaseLike(final int pageNo, final int pageSize, final String dataId,\n            final String group, final String content) throws IOException {\n        if (StringUtils.isBlank(dataId) && StringUtils.isBlank(group)) {\n            throw new IOException(\"invalid param\");\n        }\n        MapperContext context = new MapperContext((pageNo - 1) * pageSize, pageSize);\n        \n        if (!StringUtils.isBlank(dataId)) {\n            context.putWhereParameter(FieldConstant.DATA_ID, generateLikeArgument(dataId));\n        }\n        if (!StringUtils.isBlank(group)) {\n            context.putWhereParameter(FieldConstant.GROUP_ID, generateLikeArgument(group));\n        }\n        if (!StringUtils.isBlank(content)) {\n            context.putWhereParameter(FieldConstant.CONTENT, generateLikeArgument(content));\n        }\n        \n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        MapperResult sqlCountRows = configInfoMapper.findConfigInfoBaseLikeCountRows(context);\n        MapperResult sqlFetchRows = configInfoMapper.findConfigInfoBaseLikeFetchRows(context);\n        PaginationHelper<ConfigInfoBase> helper = createPaginationHelper();\n        try {\n            return helper.fetchPageLimit(sqlCountRows, sqlFetchRows, pageNo, pageSize, CONFIG_INFO_BASE_ROW_MAPPER);\n        } catch (CannotGetJdbcConnectionException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e, e);\n            throw e;\n        }\n    }\n    \n    @Override\n    public List<ConfigInfoWrapper> findChangeConfig(final Timestamp startTime, long lastMaxId, final int pageSize) {\n        try {\n            ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                    TableConstant.CONFIG_INFO);\n            \n            MapperContext context = new MapperContext();\n            context.putWhereParameter(FieldConstant.START_TIME, startTime);\n            context.putWhereParameter(FieldConstant.PAGE_SIZE, pageSize);\n            context.putWhereParameter(FieldConstant.LAST_MAX_ID, lastMaxId);\n    \n            MapperResult mapperResult = configInfoMapper.findChangeConfig(context);\n            List<Map<String, Object>> list = jt.queryForList(mapperResult.getSql(),\n                    mapperResult.getParamList().toArray());\n            return convertChangeConfig(list);\n        } catch (DataAccessException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e, e);\n            throw e;\n        }\n    }\n    \n    @Override\n    public Page<ConfigInfoWrapper> findChangeConfig(final String dataId, final String group, final String tenant,\n            final String appName, final Timestamp startTime, final Timestamp endTime, final int pageNo,\n            final int pageSize, final long lastMaxId) {\n        String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n        \n        MapperContext context = new MapperContext((pageNo - 1) * pageSize, pageSize);\n        if (!StringUtils.isBlank(dataId)) {\n            context.putWhereParameter(FieldConstant.DATA_ID, generateLikeArgument(dataId));\n        }\n        if (!StringUtils.isBlank(group)) {\n            context.putWhereParameter(FieldConstant.GROUP_ID, generateLikeArgument(group));\n        }\n        \n        if (!StringUtils.isBlank(tenantTmp)) {\n            context.putWhereParameter(FieldConstant.TENANT, tenantTmp);\n        }\n        \n        if (!StringUtils.isBlank(appName)) {\n            context.putWhereParameter(FieldConstant.APP_NAME, appName);\n        }\n        if (startTime != null) {\n            context.putWhereParameter(FieldConstant.START_TIME, startTime);\n        }\n        if (endTime != null) {\n            context.putWhereParameter(FieldConstant.END_TIME, endTime);\n        }\n        \n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        MapperResult sqlCountRows = configInfoMapper.findChangeConfigCountRows(context);\n        MapperResult sqlFetchRows = configInfoMapper.findChangeConfigFetchRows(context);\n        \n        PaginationHelper<ConfigInfoWrapper> helper = createPaginationHelper();\n        try {\n            return helper.fetchPageLimit(sqlCountRows, sqlFetchRows, pageNo, pageSize, CONFIG_INFO_WRAPPER_ROW_MAPPER);\n            \n        } catch (CannotGetJdbcConnectionException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e, e);\n            throw e;\n        }\n    }\n    \n    @Override\n    public List<String> selectTagByConfig(String dataId, String group, String tenant) {\n        ConfigTagsRelationMapper configTagsRelationMapper = mapperManager.findMapper(\n                dataSourceService.getDataSourceType(), TableConstant.CONFIG_TAGS_RELATION);\n        String sql = configTagsRelationMapper.select(Arrays.asList(\"tag_name\"),\n                Arrays.asList(\"data_id\", \"group_id\", \"tenant_id\"));\n        try {\n            return jt.queryForList(sql, new Object[] {dataId, group, tenant}, String.class);\n        } catch (EmptyResultDataAccessException e) {\n            return null;\n        } catch (IncorrectResultSizeDataAccessException e) {\n            return null;\n        } catch (CannotGetJdbcConnectionException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e, e);\n            throw e;\n        }\n    }\n    \n    @Override\n    public List<ConfigInfo> findConfigInfosByIds(final String ids) {\n        if (StringUtils.isBlank(ids)) {\n            return null;\n        }\n        List<Long> paramList = new ArrayList<>();\n        String[] idArr = ids.split(\",\");\n        for (int i = 0; i < idArr.length; i++) {\n            paramList.add(Long.parseLong(idArr[i]));\n        }\n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        MapperContext context = new MapperContext();\n        context.putWhereParameter(FieldConstant.IDS, paramList);\n        MapperResult mapperResult = configInfoMapper.findConfigInfosByIds(context);\n        \n        try {\n            return this.jt.query(mapperResult.getSql(), mapperResult.getParamList().toArray(), CONFIG_INFO_ROW_MAPPER);\n        } catch (EmptyResultDataAccessException e) { // Indicates that the data does not exist, returns null\n            return null;\n        } catch (CannotGetJdbcConnectionException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e, e);\n            throw e;\n        }\n    }\n    \n    @Override\n    public ConfigAdvanceInfo findConfigAdvanceInfo(final String dataId, final String group, final String tenant) {\n        final String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n        try {\n            List<String> configTagList = this.selectTagByConfig(dataId, group, tenant);\n            ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                    TableConstant.CONFIG_INFO);\n            ConfigAdvanceInfo configAdvance = this.jt.queryForObject(configInfoMapper.select(\n                            Arrays.asList(\"gmt_create\", \"gmt_modified\", \"src_user\", \"src_ip\", \"c_desc\", \"c_use\", \"effect\",\n                                    \"type\", \"c_schema\"), Arrays.asList(\"data_id\", \"group_id\", \"tenant_id\")),\n                    new Object[] {dataId, group, tenantTmp}, CONFIG_ADVANCE_INFO_ROW_MAPPER);\n            if (configTagList != null && !configTagList.isEmpty()) {\n                StringBuilder configTagsTmp = new StringBuilder();\n                for (String configTag : configTagList) {\n                    if (configTagsTmp.length() == 0) {\n                        configTagsTmp.append(configTag);\n                    } else {\n                        configTagsTmp.append(',').append(configTag);\n                    }\n                }\n                configAdvance.setConfigTags(configTagsTmp.toString());\n            }\n            return configAdvance;\n        } catch (EmptyResultDataAccessException e) { // Indicates that the data does not exist, returns null\n            return null;\n        } catch (CannotGetJdbcConnectionException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e, e);\n            throw e;\n        }\n    }\n    \n    @Override\n    public ConfigAllInfo findConfigAllInfo(final String dataId, final String group, final String tenant) {\n        final String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n        try {\n            List<String> configTagList = this.selectTagByConfig(dataId, group, tenant);\n            ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                    TableConstant.CONFIG_INFO);\n            ConfigAllInfo configAdvance = this.jt.queryForObject(configInfoMapper.select(\n                            Arrays.asList(\"id\", \"data_id\", \"group_id\", \"tenant_id\", \"app_name\", \"content\", \"md5\", \"gmt_create\",\n                                    \"gmt_modified\", \"src_user\", \"src_ip\", \"c_desc\", \"c_use\", \"effect\", \"type\", \"c_schema\",\n                                    \"encrypted_data_key\"), Arrays.asList(\"data_id\", \"group_id\", \"tenant_id\")),\n                    new Object[] {dataId, group, tenantTmp}, CONFIG_ALL_INFO_ROW_MAPPER);\n            if (configTagList != null && !configTagList.isEmpty()) {\n                StringBuilder configTagsTmp = new StringBuilder();\n                for (String configTag : configTagList) {\n                    if (configTagsTmp.length() == 0) {\n                        configTagsTmp.append(configTag);\n                    } else {\n                        configTagsTmp.append(',').append(configTag);\n                    }\n                }\n                configAdvance.setConfigTags(configTagsTmp.toString());\n            }\n            return configAdvance;\n        } catch (EmptyResultDataAccessException e) { // Indicates that the data does not exist, returns null\n            return null;\n        } catch (CannotGetJdbcConnectionException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e, e);\n            throw e;\n        }\n    }\n    \n    @Override\n    public List<ConfigInfo> convertDeletedConfig(List<Map<String, Object>> list) {\n        List<ConfigInfo> configs = new ArrayList<>();\n        for (Map<String, Object> map : list) {\n            String dataId = (String) map.get(\"data_id\");\n            String group = (String) map.get(\"group_id\");\n            String tenant = (String) map.get(\"tenant_id\");\n            ConfigInfo config = new ConfigInfo();\n            config.setDataId(dataId);\n            config.setGroup(group);\n            config.setTenant(tenant);\n            configs.add(config);\n        }\n        return configs;\n    }\n    \n    @Override\n    public List<ConfigInfoWrapper> convertChangeConfig(List<Map<String, Object>> list) {\n        List<ConfigInfoWrapper> configs = new ArrayList<>();\n        for (Map<String, Object> map : list) {\n            Long id = (Long) map.get(\"id\");\n            String dataId = (String) map.get(\"data_id\");\n            String group = (String) map.get(\"group_id\");\n            String tenant = (String) map.get(\"tenant_id\");\n            String content = (String) map.get(\"content\");\n            long mTime = ((LocalDateTime) map.get(\"gmt_modified\")).toInstant(ZoneOffset.ofHours(8)).toEpochMilli();\n            ConfigInfoWrapper config = new ConfigInfoWrapper();\n            config.setId(id);\n            config.setDataId(dataId);\n            config.setGroup(group);\n            config.setTenant(tenant);\n            config.setContent(content);\n            config.setLastModified(mTime);\n            configs.add(config);\n        }\n        return configs;\n    }\n    \n    @Override\n    public List<ConfigInfoWrapper> listAllGroupKeyMd5() {\n        final int pageSize = 10000;\n        int totalCount = configInfoCount();\n        int pageCount = (int) Math.ceil(totalCount * 1.0 / pageSize);\n        List<ConfigInfoWrapper> allConfigInfo = new ArrayList<>();\n        for (int pageNo = 1; pageNo <= pageCount; pageNo++) {\n            List<ConfigInfoWrapper> configInfoList = listGroupKeyMd5ByPage(pageNo, pageSize);\n            allConfigInfo.addAll(configInfoList);\n        }\n        return allConfigInfo;\n    }\n    \n    @Override\n    public List<ConfigInfoWrapper> listGroupKeyMd5ByPage(int pageNo, int pageSize) {\n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        String sqlCountRows = configInfoMapper.count(null);\n        MapperContext context = new MapperContext((pageNo - 1) * pageSize, pageSize);\n        \n        MapperResult sqlFetchRows = configInfoMapper.listGroupKeyMd5ByPageFetchRows(context);\n        PaginationHelper<ConfigInfoWrapper> helper = createPaginationHelper();\n        try {\n            Page<ConfigInfoWrapper> page = helper.fetchPageLimit(sqlCountRows, sqlFetchRows.getSql(),\n                    sqlFetchRows.getParamList().toArray(), pageNo, pageSize, CONFIG_INFO_WRAPPER_ROW_MAPPER);\n            \n            return page.getPageItems();\n        } catch (CannotGetJdbcConnectionException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e, e);\n            throw e;\n        }\n    }\n    \n    @Override\n    public ConfigInfoStateWrapper findConfigInfoState(final String dataId, final String group, final String tenant) {\n        String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n        try {\n            return this.jt.queryForObject(\n                    \"SELECT id,data_id,group_id,tenant_id,gmt_modified FROM config_info WHERE data_id=? AND group_id=? AND tenant_id=?\",\n                    new Object[] {dataId, group, tenantTmp}, CONFIG_INFO_STATE_WRAPPER_ROW_MAPPER);\n        } catch (EmptyResultDataAccessException e) { // Indicates that the data does not exist, returns null.\n            return null;\n        } catch (CannotGetJdbcConnectionException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e.toString(), e);\n            throw e;\n        }\n    }\n    \n    @Override\n    public ConfigInfoWrapper queryConfigInfo(final String dataId, final String group, final String tenant) {\n        String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n        try {\n            ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                    TableConstant.CONFIG_INFO);\n            return this.jt.queryForObject(configInfoMapper.select(\n                            Arrays.asList(\"id\", \"data_id\", \"group_id\", \"tenant_id\", \"app_name\", \"content\", \"type\",\n                                    \"gmt_modified\", \"md5\", \"encrypted_data_key\"),\n                            Arrays.asList(\"data_id\", \"group_id\", \"tenant_id\")), new Object[] {dataId, group, tenantTmp},\n                    CONFIG_INFO_WRAPPER_ROW_MAPPER);\n        } catch (EmptyResultDataAccessException e) {\n            return null;\n        } catch (CannotGetJdbcConnectionException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e, e);\n            throw e;\n        }\n    }\n    \n    @Override\n    public List<ConfigAllInfo> findAllConfigInfo4Export(final String dataId, final String group, final String tenant,\n            final String appName, final List<Long> ids) {\n        String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        MapperContext context = new MapperContext();\n        if (!CollectionUtils.isEmpty(ids)) {\n            context.putWhereParameter(FieldConstant.IDS, ids);\n        } else {\n            context.putWhereParameter(FieldConstant.TENANT_ID, tenantTmp);\n            if (!StringUtils.isBlank(dataId)) {\n                context.putWhereParameter(FieldConstant.DATA_ID, generateLikeArgument(dataId));\n            }\n            if (StringUtils.isNotBlank(group)) {\n                context.putWhereParameter(FieldConstant.GROUP_ID, group);\n            }\n            if (StringUtils.isNotBlank(appName)) {\n                context.putWhereParameter(FieldConstant.APP_NAME, appName);\n            }\n        }\n        MapperResult mapperResult = configInfoMapper.findAllConfigInfo4Export(context);\n        try {\n            return this.jt.query(mapperResult.getSql(), mapperResult.getParamList().toArray(),\n                    CONFIG_ALL_INFO_ROW_MAPPER);\n        } catch (CannotGetJdbcConnectionException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e, e);\n            throw e;\n        }\n    }\n    \n    @Override\n    public List<ConfigInfoWrapper> queryConfigInfoByNamespace(String tenant) {\n        if (Objects.isNull(tenant)) {\n            throw new IllegalArgumentException(\"tenantId can not be null\");\n        }\n        String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n        try {\n            ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                    TableConstant.CONFIG_INFO);\n            return this.jt.query(\n                    configInfoMapper.select(Arrays.asList(\"data_id\", \"group_id\", \"tenant_id\", \"app_name\", \"type\"),\n                            Collections.singletonList(\"tenant_id\")), new Object[] {tenantTmp},\n                    CONFIG_INFO_WRAPPER_ROW_MAPPER);\n        } catch (EmptyResultDataAccessException e) { // Indicates that the data does not exist, returns null.\n            return Collections.EMPTY_LIST;\n        } catch (CannotGetJdbcConnectionException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e, e);\n            throw e;\n        }\n    }\n    \n    @Override\n    @Deprecated\n    public Page<ConfigInfoBase> findAllConfigInfoBase(final int pageNo, final int pageSize) {\n        final int startRow = (pageNo - 1) * pageSize;\n        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                TableConstant.CONFIG_INFO);\n        String sqlCountRows = configInfoMapper.count(null);\n        MapperResult sqlFetchRows = configInfoMapper.findAllConfigInfoBaseFetchRows(\n                new MapperContext(startRow, pageSize));\n        \n        PaginationHelper<ConfigInfoBase> helper = createPaginationHelper();\n        \n        try {\n            return helper.fetchPageLimit(sqlCountRows, sqlFetchRows.getSql(), sqlFetchRows.getParamList().toArray(),\n                    pageNo, pageSize, CONFIG_INFO_BASE_ROW_MAPPER);\n        } catch (CannotGetJdbcConnectionException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e, e);\n            throw e;\n        }\n    }\n}\n", "methodName": "com.alibaba.nacos.config.server.service.repository.extrnal.ExternalConfigInfoPersistServiceImpl$3.doInTransaction(org.springframework.transaction.TransactionStatus):java.util.List", "exampleID": 8, "dataset": "infer", "filepath": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalConfigInfoPersistServiceImpl.java", "line": 425, "sink": "configInfoList", "source": "configInfoList", "sourceLine": 422, "qualifier": "$$configInfoList/$ could be null, and is @@dereferenced/@", "steps": [{"line": 1258, "source": "configInfoList", "filepath": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalConfigInfoPersistServiceImpl.java", "methodName": "ExternalConfigInfoPersistServiceImpl.findConfigInfosByIds", "exampleID": 9}], "line_number": 422, "records": [{"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalConfigInfoPersistServiceImpl.java", "line_number": 1258, "column_number": -1, "description": "start of procedure findConfigInfosByIds(...)", "snippet": "    public List<ConfigInfo> findConfigInfosByIds(final String ids) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalConfigInfoPersistServiceImpl.java", "methodName": "findConfigInfosByIds"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalConfigInfoPersistServiceImpl.java", "line_number": 1259, "column_number": -1, "description": "", "snippet": "        if (StringUtils.isBlank(ids)) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalConfigInfoPersistServiceImpl.java", "methodName": "findConfigInfosByIds"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 77, "column_number": -1, "description": "start of procedure isBlank(...)", "snippet": "    public static boolean isBlank(final CharSequence cs) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isBlank"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 79, "column_number": -1, "description": "Taking false branch", "snippet": "        if (cs == null || (strLen = cs.length()) == 0) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isBlank"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 80, "column_number": -1, "description": "", "snippet": "            return true;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isBlank"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 87, "column_number": -1, "description": "return from a call to boolean StringUtils.isBlank(CharSequence)", "snippet": "        return true;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isBlank"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalConfigInfoPersistServiceImpl.java", "line_number": 1259, "column_number": -1, "description": "Taking true branch", "snippet": "        if (StringUtils.isBlank(ids)) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalConfigInfoPersistServiceImpl.java", "methodName": "findConfigInfosByIds"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalConfigInfoPersistServiceImpl.java", "line_number": 1260, "column_number": -1, "description": "", "snippet": "            return null;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalConfigInfoPersistServiceImpl.java", "methodName": "findConfigInfosByIds"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalConfigInfoPersistServiceImpl.java", "line_number": 1279, "column_number": -1, "description": "return from a call to List ExternalConfigInfoPersistServiceImpl.findConfigInfosByIds(String)", "snippet": "            throw e;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalConfigInfoPersistServiceImpl.java", "methodName": "findConfigInfosByIds"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalConfigInfoPersistServiceImpl.java", "line_number": 468, "column_number": -1, "description": "start of procedure removeConfigInfoByIdsAtomic(...)", "snippet": "    public void removeConfigInfoByIdsAtomic(final String ids) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalConfigInfoPersistServiceImpl.java", "methodName": "removeConfigInfoByIdsAtomic"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalConfigInfoPersistServiceImpl.java", "line_number": 469, "column_number": -1, "description": "", "snippet": "        if (StringUtils.isBlank(ids)) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalConfigInfoPersistServiceImpl.java", "methodName": "removeConfigInfoByIdsAtomic"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 77, "column_number": -1, "description": "start of procedure isBlank(...)", "snippet": "    public static boolean isBlank(final CharSequence cs) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isBlank"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 79, "column_number": -1, "description": "Taking false branch", "snippet": "        if (cs == null || (strLen = cs.length()) == 0) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isBlank"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 80, "column_number": -1, "description": "", "snippet": "            return true;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isBlank"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 87, "column_number": -1, "description": "return from a call to boolean StringUtils.isBlank(CharSequence)", "snippet": "        return true;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isBlank"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalConfigInfoPersistServiceImpl.java", "line_number": 469, "column_number": -1, "description": "Taking true branch", "snippet": "        if (StringUtils.isBlank(ids)) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalConfigInfoPersistServiceImpl.java", "methodName": "removeConfigInfoByIdsAtomic"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalConfigInfoPersistServiceImpl.java", "line_number": 470, "column_number": -1, "description": "", "snippet": "            return;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalConfigInfoPersistServiceImpl.java", "methodName": "removeConfigInfoByIdsAtomic"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalConfigInfoPersistServiceImpl.java", "line_number": 488, "column_number": -1, "description": "return from a call to void ExternalConfigInfoPersistServiceImpl.removeConfigInfoByIdsAtomic(String)", "snippet": "    }", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalConfigInfoPersistServiceImpl.java", "methodName": "removeConfigInfoByIdsAtomic"}], "combined_records": [{"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalConfigInfoPersistServiceImpl.java", "line_number": 1259, "column_number": -1, "description": "start of procedure findConfigInfosByIds(...)", "snippet": "1255.    @Override\n1256.    public List<ConfigInfo> findConfigInfosByIds(final String ids) {\n1257.>         if (StringUtils.isBlank(ids)) {\n1258.>             return null;\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalConfigInfoPersistServiceImpl.java", "methodName": "findConfigInfosByIds", "line_numbers": [1258, 1259]}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 87, "column_number": -1, "description": "start of procedure isBlank(...)", "snippet": "74.     */\n75.    public static boolean isBlank(final CharSequence cs) {\n76.>         int strLen;\n77.        if (cs == null || (strLen = cs.length()) == 0) {\n78.>             return true;\n79.        }\n80.        for (int i = 0; i < strLen; i++) {\n81.            if (!Character.isWhitespace(cs.charAt(i))) {\n82.                return false;\n83.            }\n84.        }\n85.        return true;\n86.    }\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isBlank", "line_numbers": [77, 79, 80, 87]}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalConfigInfoPersistServiceImpl.java", "line_number": 1279, "column_number": -1, "description": "Taking true branch", "snippet": "1256.    public List<ConfigInfo> findConfigInfosByIds(final String ids) {\n1257.        if (StringUtils.isBlank(ids)) {\n1258.>             return null;\n1259.        }\n1260.        List<Long> paramList = new ArrayList<>();\n1261.        String[] idArr = ids.split(\",\");\n1262.        for (int i = 0; i < idArr.length; i++) {\n1263.            paramList.add(Long.parseLong(idArr[i]));\n1264.        }\n1265.        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n1266.                TableConstant.CONFIG_INFO);\n1267.        MapperContext context = new MapperContext();\n1268.        context.putWhereParameter(FieldConstant.IDS, paramList);\n1269.        MapperResult mapperResult = configInfoMapper.findConfigInfosByIds(context);\n1270.        \n1271.        try {\n1272.            return this.jt.query(mapperResult.getSql(), mapperResult.getParamList().toArray(), CONFIG_INFO_ROW_MAPPER);\n1273.        } catch (EmptyResultDataAccessException e) { // Indicates that the data does not exist, returns null\n1274.            return null;\n1275.        } catch (CannotGetJdbcConnectionException e) {\n1276.            LogUtil.FATAL_LOG.error(\"[db-error] \" + e, e);\n1277.            throw e;\n1278.        }\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalConfigInfoPersistServiceImpl.java", "methodName": "findConfigInfosByIds", "line_numbers": [1259, 1260, 1279]}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalConfigInfoPersistServiceImpl.java", "line_number": 469, "column_number": -1, "description": "start of procedure removeConfigInfoByIdsAtomic(...)", "snippet": "465.    @Override\n466.    public void removeConfigInfoByIdsAtomic(final String ids) {\n467.>         if (StringUtils.isBlank(ids)) {\n468.>             return;\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalConfigInfoPersistServiceImpl.java", "methodName": "removeConfigInfoByIdsAtomic", "line_numbers": [468, 469]}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 87, "column_number": -1, "description": "start of procedure isBlank(...)", "snippet": "74.     */\n75.    public static boolean isBlank(final CharSequence cs) {\n76.>         int strLen;\n77.        if (cs == null || (strLen = cs.length()) == 0) {\n78.>             return true;\n79.        }\n80.        for (int i = 0; i < strLen; i++) {\n81.            if (!Character.isWhitespace(cs.charAt(i))) {\n82.                return false;\n83.            }\n84.        }\n85.        return true;\n86.    }\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isBlank", "line_numbers": [77, 79, 80, 87]}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalConfigInfoPersistServiceImpl.java", "line_number": 488, "column_number": -1, "description": "Taking true branch", "snippet": "466.    public void removeConfigInfoByIdsAtomic(final String ids) {\n467.        if (StringUtils.isBlank(ids)) {\n468.>             return;\n469.        }\n470.        List<Long> paramList = new ArrayList<>();\n471.        String[] idArr = ids.split(\",\");\n472.        for (int i = 0; i < idArr.length; i++) {\n473.            paramList.add(Long.parseLong(idArr[i]));\n474.        }\n475.        ConfigInfoMapper configInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n476.                TableConstant.CONFIG_INFO);\n477.        MapperContext context = new MapperContext();\n478.        context.putWhereParameter(FieldConstant.IDS, paramList);\n479.        MapperResult result = configInfoMapper.removeConfigInfoByIdsAtomic(context);\n480.        try {\n481.            jt.update(result.getSql(), result.getParamList().toArray());\n482.        } catch (CannotGetJdbcConnectionException e) {\n483.            LogUtil.FATAL_LOG.error(\"[db-error] \" + e, e);\n484.            throw e;\n485.        }\n486.    }\n487.>     \n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalConfigInfoPersistServiceImpl.java", "methodName": "removeConfigInfoByIdsAtomic", "line_numbers": [469, 470, 488]}], "infer_explore": [{"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalConfigInfoPersistServiceImpl.java", "line_number": 419, "column_number": -1, "description": "start of procedure doInTransaction(...)", "snippet": "416.             \n417.             @Override\n418. >             public List<ConfigInfo> doInTransaction(TransactionStatus status) {\n419.                 try {\n420.                     String idsStr = StringUtils.join(ids, StringUtils.COMMA);\n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalConfigInfoPersistServiceImpl.java", "line_number": 421, "column_number": -1, "description": "Skipping join(...): empty list of specs", "snippet": "418.             public List<ConfigInfo> doInTransaction(TransactionStatus status) {\n419.                 try {\n420. >                     String idsStr = StringUtils.join(ids, StringUtils.COMMA);\n421.                     List<ConfigInfo> configInfoList = findConfigInfosByIds(idsStr);\n422.                     if (!CollectionUtils.isEmpty(configInfoList)) {\n"}, {"level": 1, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 186, "column_number": -1, "description": "Definition of join(...)", "snippet": "183.      * @return the joined String, {@code null} if null array input\n184.      */\n185. >     public static String join(Collection collection, String separator) {\n186.         if (collection == null) {\n187.             return null;\n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalConfigInfoPersistServiceImpl.java", "line_number": 422, "column_number": -1, "description": "", "snippet": "419.                 try {\n420.                     String idsStr = StringUtils.join(ids, StringUtils.COMMA);\n421. >                     List<ConfigInfo> configInfoList = findConfigInfosByIds(idsStr);\n422.                     if (!CollectionUtils.isEmpty(configInfoList)) {\n423.                         removeConfigInfoByIdsAtomic(idsStr);\n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalConfigInfoPersistServiceImpl.java", "line_number": 1258, "column_number": -1, "description": "start of procedure findConfigInfosByIds(...)", "snippet": "1255.     \n1256.     @Override\n1257. >     public List<ConfigInfo> findConfigInfosByIds(final String ids) {\n1258.         if (StringUtils.isBlank(ids)) {\n1259.             return null;\n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalConfigInfoPersistServiceImpl.java", "line_number": 1259, "column_number": -1, "description": "", "snippet": "1256.     @Override\n1257.     public List<ConfigInfo> findConfigInfosByIds(final String ids) {\n1258. >         if (StringUtils.isBlank(ids)) {\n1259.             return null;\n1260.         }\n"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 77, "column_number": -1, "description": "start of procedure isBlank(...)", "snippet": "74.      * @return {@code true} if the string is empty and null and whitespace\n75.      */\n76. >     public static boolean isBlank(final CharSequence cs) {\n77.         int strLen;\n78.         if (cs == null || (strLen = cs.length()) == 0) {\n"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 79, "column_number": -1, "description": "Taking false branch", "snippet": "76.     public static boolean isBlank(final CharSequence cs) {\n77.         int strLen;\n78. >         if (cs == null || (strLen = cs.length()) == 0) {\n79.             return true;\n80.         }\n"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 80, "column_number": -1, "description": "", "snippet": "77.         int strLen;\n78.         if (cs == null || (strLen = cs.length()) == 0) {\n79. >             return true;\n80.         }\n81.         for (int i = 0; i < strLen; i++) {\n"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 87, "column_number": -1, "description": "return from a call to boolean StringUtils.isBlank(CharSequence)", "snippet": "84.             }\n85.         }\n86. >         return true;\n87.     }\n88.     \n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalConfigInfoPersistServiceImpl.java", "line_number": 1259, "column_number": -1, "description": "Taking true branch", "snippet": "1256.     @Override\n1257.     public List<ConfigInfo> findConfigInfosByIds(final String ids) {\n1258. >         if (StringUtils.isBlank(ids)) {\n1259.             return null;\n1260.         }\n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalConfigInfoPersistServiceImpl.java", "line_number": 1260, "column_number": -1, "description": "", "snippet": "1257.     public List<ConfigInfo> findConfigInfosByIds(final String ids) {\n1258.         if (StringUtils.isBlank(ids)) {\n1259. >             return null;\n1260.         }\n1261.         List<Long> paramList = new ArrayList<>();\n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalConfigInfoPersistServiceImpl.java", "line_number": 1279, "column_number": -1, "description": "return from a call to List ExternalConfigInfoPersistServiceImpl.findConfigInfosByIds(String)", "snippet": "1276.         } catch (CannotGetJdbcConnectionException e) {\n1277.             LogUtil.FATAL_LOG.error(\"[db-error] \" + e, e);\n1278. >             throw e;\n1279.         }\n1280.     }\n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalConfigInfoPersistServiceImpl.java", "line_number": 423, "column_number": -1, "description": "Taking true branch", "snippet": "420.                     String idsStr = StringUtils.join(ids, StringUtils.COMMA);\n421.                     List<ConfigInfo> configInfoList = findConfigInfosByIds(idsStr);\n422. >                     if (!CollectionUtils.isEmpty(configInfoList)) {\n423.                         removeConfigInfoByIdsAtomic(idsStr);\n424.                         for (ConfigInfo configInfo : configInfoList) {\n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalConfigInfoPersistServiceImpl.java", "line_number": 424, "column_number": -1, "description": "", "snippet": "421.                     List<ConfigInfo> configInfoList = findConfigInfosByIds(idsStr);\n422.                     if (!CollectionUtils.isEmpty(configInfoList)) {\n423. >                         removeConfigInfoByIdsAtomic(idsStr);\n424.                         for (ConfigInfo configInfo : configInfoList) {\n425.                             removeTagByIdAtomic(configInfo.getId());\n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalConfigInfoPersistServiceImpl.java", "line_number": 468, "column_number": -1, "description": "start of procedure removeConfigInfoByIdsAtomic(...)", "snippet": "465.     \n466.     @Override\n467. >     public void removeConfigInfoByIdsAtomic(final String ids) {\n468.         if (StringUtils.isBlank(ids)) {\n469.             return;\n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalConfigInfoPersistServiceImpl.java", "line_number": 469, "column_number": -1, "description": "", "snippet": "466.     @Override\n467.     public void removeConfigInfoByIdsAtomic(final String ids) {\n468. >         if (StringUtils.isBlank(ids)) {\n469.             return;\n470.         }\n"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 77, "column_number": -1, "description": "start of procedure isBlank(...)", "snippet": "74.      * @return {@code true} if the string is empty and null and whitespace\n75.      */\n76. >     public static boolean isBlank(final CharSequence cs) {\n77.         int strLen;\n78.         if (cs == null || (strLen = cs.length()) == 0) {\n"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 79, "column_number": -1, "description": "Taking false branch", "snippet": "76.     public static boolean isBlank(final CharSequence cs) {\n77.         int strLen;\n78. >         if (cs == null || (strLen = cs.length()) == 0) {\n79.             return true;\n80.         }\n"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 80, "column_number": -1, "description": "", "snippet": "77.         int strLen;\n78.         if (cs == null || (strLen = cs.length()) == 0) {\n79. >             return true;\n80.         }\n81.         for (int i = 0; i < strLen; i++) {\n"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 87, "column_number": -1, "description": "return from a call to boolean StringUtils.isBlank(CharSequence)", "snippet": "84.             }\n85.         }\n86. >         return true;\n87.     }\n88.     \n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalConfigInfoPersistServiceImpl.java", "line_number": 469, "column_number": -1, "description": "Taking true branch", "snippet": "466.     @Override\n467.     public void removeConfigInfoByIdsAtomic(final String ids) {\n468. >         if (StringUtils.isBlank(ids)) {\n469.             return;\n470.         }\n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalConfigInfoPersistServiceImpl.java", "line_number": 470, "column_number": -1, "description": "", "snippet": "467.     public void removeConfigInfoByIdsAtomic(final String ids) {\n468.         if (StringUtils.isBlank(ids)) {\n469. >             return;\n470.         }\n471.         List<Long> paramList = new ArrayList<>();\n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalConfigInfoPersistServiceImpl.java", "line_number": 488, "column_number": -1, "description": "return from a call to void ExternalConfigInfoPersistServiceImpl.removeConfigInfoByIdsAtomic(String)", "snippet": "485.             throw e;\n486.         }\n487. >     }\n488.     \n489.     @Override\n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalConfigInfoPersistServiceImpl.java", "line_number": 425, "column_number": -1, "description": "", "snippet": "422.                     if (!CollectionUtils.isEmpty(configInfoList)) {\n423.                         removeConfigInfoByIdsAtomic(idsStr);\n424. >                         for (ConfigInfo configInfo : configInfoList) {\n425.                             removeTagByIdAtomic(configInfo.getId());\n426.                             historyConfigInfoPersistService.insertConfigHistoryAtomic(configInfo.getId(), configInfo,\n"}]}, {"url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/service/dump/disk/ConfigRocksDbDiskService.java", "rawCode": "/*\n * Copyright 1999-2018 Alibaba Group Holding Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.alibaba.nacos.config.server.service.dump.disk;\n\nimport com.alibaba.nacos.common.utils.MD5Utils;\nimport com.alibaba.nacos.common.utils.StringUtils;\nimport com.alibaba.nacos.config.server.utils.LogUtil;\nimport com.alibaba.nacos.sys.env.EnvUtil;\nimport org.rocksdb.BlockBasedTableConfig;\nimport org.rocksdb.ColumnFamilyOptions;\nimport org.rocksdb.DBOptions;\nimport org.rocksdb.Options;\nimport org.rocksdb.RocksDB;\nimport org.rocksdb.RocksDBException;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport static com.alibaba.nacos.config.server.constant.Constants.ENCODE_UTF8;\n\n/**\n * config rocks db disk service.\n *\n * @author shiyiyue\n */\n@SuppressWarnings(\"PMD.ServiceOrDaoClassShouldEndWithImplRule\")\npublic class ConfigRocksDbDiskService implements ConfigDiskService {\n    \n    private static final String ROCKSDB_DATA = File.separator + \"rocksdata\" + File.separator;\n    \n    private static final String BASE_DIR = ROCKSDB_DATA + \"config-data\";\n    \n    private static final String BETA_DIR = ROCKSDB_DATA + \"beta-data\";\n    \n    private static final String TAG_DIR = ROCKSDB_DATA + \"tag-data\";\n    \n    private static final String BATCH_DIR = ROCKSDB_DATA + \"batch-data\";\n    \n    private static final long DEFAULT_WRITE_BUFFER_MB = 32;\n    \n    Map<String, RocksDB> rocksDbMap = new HashMap<>();\n    \n    private void createDirIfNotExist(String dir) {\n        File roskDataDir = new File(EnvUtil.getNacosHome(), \"rocksdata\");\n        if (!roskDataDir.exists()) {\n            roskDataDir.mkdir();\n        }\n        File baseDir = new File(EnvUtil.getNacosHome(), dir);\n        if (!baseDir.exists()) {\n            baseDir.mkdir();\n        }\n    }\n    \n    private void deleteDirIfExist(String dir) {\n        File rockskDataDir = new File(EnvUtil.getNacosHome(), \"rocksdata\");\n        if (!rockskDataDir.exists()) {\n            return;\n        }\n        File baseDir = new File(EnvUtil.getNacosHome(), dir);\n        if (baseDir.exists()) {\n            baseDir.delete();\n        }\n    }\n    \n    public ConfigRocksDbDiskService() {\n        createDirIfNotExist(BASE_DIR);\n        createDirIfNotExist(BETA_DIR);\n        createDirIfNotExist(TAG_DIR);\n        createDirIfNotExist(BATCH_DIR);\n    }\n    \n    private byte[] getKeyByte(String dataId, String group, String tenant, String tag) throws IOException {\n        String[] keys = new String[] {dataId, group, tenant, tag};\n        StringBuilder stringBuilder = new StringBuilder();\n        for (String key : keys) {\n            if (StringUtils.isBlank(key)) {\n                key = \"\";\n            }\n            urlEncode(key, stringBuilder);\n            stringBuilder.append(\"+\");\n        }\n        return stringBuilder.toString().getBytes(ENCODE_UTF8);\n    }\n    \n    /**\n     * + -> %2B % -> %25.\n     */\n    private static void urlEncode(String str, StringBuilder sb) {\n        for (int idx = 0; idx < str.length(); ++idx) {\n            char c = str.charAt(idx);\n            if ('+' == c) {\n                sb.append(\"%2B\");\n            } else if ('%' == c) {\n                sb.append(\"%25\");\n            } else {\n                sb.append(c);\n            }\n        }\n    }\n    \n    /**\n     * save config to disk.\n     */\n    public void saveToDiskInner(String type, String dataId, String group, String tenant, String tag, String content)\n            throws IOException {\n        try {\n            initAndGetDB(type).put(getKeyByte(dataId, group, tenant, tag), content.getBytes(ENCODE_UTF8));\n        } catch (RocksDBException e) {\n            throw new IOException(e);\n        }\n    }\n    \n    /**\n     * save config to disk.\n     */\n    public void saveToDiskInner(String type, String dataId, String group, String tenant, String content)\n            throws IOException {\n        saveToDiskInner(type, dataId, group, tenant, null, content);\n    }\n    \n    /**\n     * Save configuration information to disk.\n     */\n    public void saveToDisk(String dataId, String group, String tenant, String content) throws IOException {\n        saveToDiskInner(BASE_DIR, dataId, group, tenant, content);\n    }\n    \n    /**\n     * Save beta information to disk.\n     */\n    public void saveBetaToDisk(String dataId, String group, String tenant, String content) throws IOException {\n        saveToDiskInner(BETA_DIR, dataId, group, tenant, content);\n        \n    }\n    \n    /**\n     * Save batch information to disk.\n     */\n    public void saveBatchToDisk(String dataId, String group, String tenant, String content) throws IOException {\n        saveToDiskInner(BATCH_DIR, dataId, group, tenant, content);\n        \n    }\n    \n    /**\n     * Save tag information to disk.\n     */\n    public void saveTagToDisk(String dataId, String group, String tenant, String tag, String content)\n            throws IOException {\n        saveToDiskInner(TAG_DIR, dataId, group, tenant, tag, content);\n        \n    }\n    \n    /**\n     * Deletes configuration files on disk.\n     */\n    public void removeConfigInfo(String dataId, String group, String tenant) {\n        removeContentInner(BASE_DIR, dataId, group, tenant, null);\n    }\n    \n    /**\n     * Deletes beta configuration files on disk.\n     */\n    public void removeConfigInfo4Beta(String dataId, String group, String tenant) {\n        removeContentInner(BETA_DIR, dataId, group, tenant, null);\n    }\n    \n    /**\n     * Deletes batch configuration files on disk.\n     */\n    public void removeConfigInfo4Batch(String dataId, String group, String tenant) {\n        removeContentInner(BATCH_DIR, dataId, group, tenant, null);\n    }\n    \n    /**\n     * Deletes tag configuration files on disk.\n     */\n    public void removeConfigInfo4Tag(String dataId, String group, String tenant, String tag) {\n        removeContentInner(TAG_DIR, dataId, group, tenant, tag);\n        \n    }\n    \n    private String byte2String(byte[] bytes) throws IOException {\n        if (bytes == null) {\n            return null;\n        }\n        return new String(bytes, ENCODE_UTF8);\n    }\n    \n    RocksDB initAndGetDB(String dir) throws IOException, RocksDBException {\n        if (rocksDbMap.containsKey(dir)) {\n            return rocksDbMap.get(dir);\n        } else {\n            synchronized (this) {\n                if (rocksDbMap.containsKey(dir)) {\n                    return rocksDbMap.get(dir);\n                }\n                createDirIfEmpty(EnvUtil.getNacosHome() + dir);\n                rocksDbMap.put(dir, RocksDB.open(createOptions(dir), EnvUtil.getNacosHome() + dir));\n                return rocksDbMap.get(dir);\n            }\n            \n        }\n    }\n    \n    private void createDirIfEmpty(String filePath) {\n        File file = new File(filePath);\n        if (!file.exists()) {\n            file.mkdirs();\n        }\n    }\n    \n    private String getContentInner(String type, String dataId, String group, String tenant) throws IOException {\n        byte[] bytes = null;\n        try {\n            bytes = initAndGetDB(type).get(getKeyByte(dataId, group, tenant, null));\n            String string = byte2String(bytes);\n            return string;\n        } catch (RocksDBException e) {\n            throw new IOException(e);\n        }\n    }\n    \n    private String getTagContentInner(String type, String dataId, String group, String tenant, String tag)\n            throws IOException {\n        byte[] bytes = null;\n        try {\n            bytes = initAndGetDB(type).get(getKeyByte(dataId, group, tenant, tag));\n            return byte2String(bytes);\n        } catch (RocksDBException e) {\n            throw new IOException(e);\n        }\n    }\n    \n    private void removeContentInner(String type, String dataId, String group, String tenant, String tag) {\n        try {\n            initAndGetDB(type).delete(getKeyByte(dataId, group, tenant, tag));\n        } catch (Exception e) {\n            LogUtil.DEFAULT_LOG.warn(\"Remove dir=[{}] config fail,dataId={},group={},tenant={},error={}\", type, dataId,\n                    group, tenant, e.getCause());\n        }\n    }\n    \n    /**\n     * Returns the path of cache file in server.\n     */\n    public String getBetaContent(String dataId, String group, String tenant) throws IOException {\n        return getContentInner(BETA_DIR, dataId, group, tenant);\n    }\n    \n    /**\n     * Returns the path of the tag cache file in server.\n     */\n    public String getTagContent(String dataId, String group, String tenant, String tag) throws IOException {\n        return getTagContentInner(TAG_DIR, dataId, group, tenant, tag);\n    }\n    \n    public String getContent(String dataId, String group, String tenant) throws IOException {\n        return getContentInner(BASE_DIR, dataId, group, tenant);\n    }\n    \n    public String getLocalConfigMd5(String dataId, String group, String tenant, String encode) throws IOException {\n        return MD5Utils.md5Hex(getContentInner(BASE_DIR, dataId, group, tenant), encode);\n    }\n    \n    Options createOptions(String dir) {\n        DBOptions dbOptions = new DBOptions();\n        dbOptions.setMaxBackgroundJobs(Runtime.getRuntime().availableProcessors());\n        Options options = new Options(dbOptions, createColumnFamilyOptions(dir));\n        options.setCreateIfMissing(true);\n        return options;\n    }\n    \n    ColumnFamilyOptions createColumnFamilyOptions(String dir) {\n        ColumnFamilyOptions columnFamilyOptions = new ColumnFamilyOptions();\n        BlockBasedTableConfig tableFormatConfig = new BlockBasedTableConfig();\n        columnFamilyOptions.setTableFormatConfig(tableFormatConfig);\n        //set more write buffer size to formal config-data, reduce flush to sst file frequency.\n        columnFamilyOptions.setWriteBufferSize(getSuitFormalCacheSizeMB(dir) * 1024 * 1024);\n        //once a stt file is flushed, compact it immediately to avoid too many sst file which will result in read latency.\n        columnFamilyOptions.setLevel0FileNumCompactionTrigger(1);\n        return columnFamilyOptions;\n    }\n    \n    /**\n     * get suit formal buffer size.\n     *\n     * @return\n     */\n    @SuppressWarnings(\"PMD.UndefineMagicConstantRule\")\n    private long getSuitFormalCacheSizeMB(String dir) {\n        \n        boolean formal = BASE_DIR.equals(dir);\n        long maxHeapSizeMB = Runtime.getRuntime().maxMemory() / 1024 / 1024;\n        \n        if (formal) {\n            long formalWriteBufferSizeMB = 0;\n            \n            if (maxHeapSizeMB < 8 * 1024) {\n                formalWriteBufferSizeMB = 32;\n            } else if (maxHeapSizeMB < 16 * 1024) {\n                formalWriteBufferSizeMB = 64;\n            } else {\n                formalWriteBufferSizeMB = 256;\n            }\n            LogUtil.DEFAULT_LOG.info(\"init formal rocksdb write buffer size {}M for dir {}, maxHeapSize={}M\",\n                    formalWriteBufferSizeMB, dir, maxHeapSizeMB);\n            return formalWriteBufferSizeMB;\n        } else {\n            LogUtil.DEFAULT_LOG.info(\"init default rocksdb write buffer size {}M for dir {}, maxHeapSize={}M\",\n                    DEFAULT_WRITE_BUFFER_MB, dir, maxHeapSizeMB);\n            return DEFAULT_WRITE_BUFFER_MB;\n        }\n        \n    }\n    \n    /**\n     * Clear all config file.\n     */\n    public void clearAll() {\n        try {\n            if (rocksDbMap.containsKey(BASE_DIR)) {\n                rocksDbMap.get(BASE_DIR).close();\n                RocksDB.destroyDB(EnvUtil.getNacosHome() + BASE_DIR, new Options());\n            }\n            deleteDirIfExist(BASE_DIR);\n            LogUtil.DEFAULT_LOG.info(\"clear all config-info success.\");\n        } catch (RocksDBException e) {\n            LogUtil.DEFAULT_LOG.warn(\"clear all config-info failed.\", e);\n        }\n    }\n    \n    /**\n     * Clear all beta config file.\n     */\n    public void clearAllBeta() {\n        try {\n            if (rocksDbMap.containsKey(BETA_DIR)) {\n                rocksDbMap.get(BETA_DIR).close();\n                RocksDB.destroyDB(EnvUtil.getNacosHome() + BETA_DIR, new Options());\n            }\n            deleteDirIfExist(BETA_DIR);\n            LogUtil.DEFAULT_LOG.info(\"clear all config-info-beta success.\");\n        } catch (RocksDBException e) {\n            LogUtil.DEFAULT_LOG.warn(\"clear all config-info-beta failed.\", e);\n        }\n    }\n    \n    /**\n     * Clear all tag config file.\n     */\n    public void clearAllTag() {\n        \n        try {\n            if (rocksDbMap.containsKey(TAG_DIR)) {\n                rocksDbMap.get(TAG_DIR).close();\n                RocksDB.destroyDB(EnvUtil.getNacosHome() + TAG_DIR, new Options());\n            }\n            deleteDirIfExist(TAG_DIR);\n            LogUtil.DEFAULT_LOG.info(\"clear all config-info-tag success.\");\n        } catch (RocksDBException e) {\n            LogUtil.DEFAULT_LOG.warn(\"clear all config-info-tag failed.\", e);\n        }\n    }\n    \n    /**\n     * clear all batch.\n     */\n    public void clearAllBatch() {\n        try {\n            if (rocksDbMap.containsKey(BATCH_DIR)) {\n                rocksDbMap.get(BATCH_DIR).close();\n                RocksDB.destroyDB(EnvUtil.getNacosHome() + BATCH_DIR, new Options());\n            }\n            deleteDirIfExist(BATCH_DIR);\n            LogUtil.DEFAULT_LOG.info(\"clear all config-info-batch success.\");\n        } catch (RocksDBException e) {\n            LogUtil.DEFAULT_LOG.warn(\"clear all config-info-batch failed.\", e);\n        }\n    }\n    \n    public String getBatchContent(String dataId, String group, String tenant) throws IOException {\n        return getContentInner(BATCH_DIR, dataId, group, tenant);\n    }\n}\n", "methodName": "com.alibaba.nacos.config.server.service.dump.disk.ConfigRocksDbDiskService.getLocalConfigMd5(java.lang.String,java.lang.String,java.lang.String,java.lang.String):java.lang.String", "exampleID": 10, "dataset": "infer", "filepath": "config/src/main/java/com/alibaba/nacos/config/server/service/dump/disk/ConfigRocksDbDiskService.java", "line": 278, "sink": "md5Hex(...)", "source": "getContentInner(com.alibaba.nacos.config.server.service.dump.disk.ConfigRocksDbDiskService.BASE_DIR,dataId,group,tenant)", "sourceLine": 5, "qualifier": "$$getContentInner(com.alibaba.nacos.config.server.service.dump.disk.ConfigRocksDbDiskService.BASE_DIR,dataId,group,tenant)/$ could return null, and is @@dereferenced by md5Hex(...)/@", "steps": [{"line": 5, "source": "getContentInner(com.alibaba.nacos.config.server.service.dump.disk.ConfigRocksDbDiskService.BASE_DIR,dataId,group,tenant)", "filepath": "config/src/main/java/com/alibaba/nacos/config/server/service/dump/disk/ConfigRocksDbDiskService.java", "methodName": "com.alibaba.nacos.config.server.service.dump.disk.ConfigRocksDbDiskService.getLocalConfigMd5(java.lang.String,java.lang.String,java.lang.String,java.lang.String):java.lang.String", "exampleID": 11}], "line_number": 5, "records": [], "combined_records": [], "infer_explore": [{"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/dump/disk/ConfigRocksDbDiskService.java", "line_number": 277, "column_number": -1, "description": "start of procedure getLocalConfigMd5(...)", "snippet": "274.     }\n275.     \n276. >     public String getLocalConfigMd5(String dataId, String group, String tenant, String encode) throws IOException {\n277.         return MD5Utils.md5Hex(getContentInner(BASE_DIR, dataId, group, tenant), encode);\n278.     }\n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/dump/disk/ConfigRocksDbDiskService.java", "line_number": 278, "column_number": -1, "description": "", "snippet": "275.     \n276.     public String getLocalConfigMd5(String dataId, String group, String tenant, String encode) throws IOException {\n277. >         return MD5Utils.md5Hex(getContentInner(BASE_DIR, dataId, group, tenant), encode);\n278.     }\n279.     \n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/dump/disk/ConfigRocksDbDiskService.java", "line_number": 228, "column_number": -1, "description": "start of procedure getContentInner(...)", "snippet": "225.     }\n226.     \n227. >     private String getContentInner(String type, String dataId, String group, String tenant) throws IOException {\n228.         byte[] bytes = null;\n229.         try {\n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/dump/disk/ConfigRocksDbDiskService.java", "line_number": 229, "column_number": -1, "description": "", "snippet": "226.     \n227.     private String getContentInner(String type, String dataId, String group, String tenant) throws IOException {\n228. >         byte[] bytes = null;\n229.         try {\n230.             bytes = initAndGetDB(type).get(getKeyByte(dataId, group, tenant, null));\n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/dump/disk/ConfigRocksDbDiskService.java", "line_number": 231, "column_number": -1, "description": "Skipping initAndGetDB(...): empty list of specs", "snippet": "228.         byte[] bytes = null;\n229.         try {\n230. >             bytes = initAndGetDB(type).get(getKeyByte(dataId, group, tenant, null));\n231.             String string = byte2String(bytes);\n232.             return string;\n"}, {"level": 2, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/dump/disk/ConfigRocksDbDiskService.java", "line_number": 205, "column_number": -1, "description": "Definition of initAndGetDB(...)", "snippet": "202.     }\n203.     \n204. >     RocksDB initAndGetDB(String dir) throws IOException, RocksDBException {\n205.         if (rocksDbMap.containsKey(dir)) {\n206.             return rocksDbMap.get(dir);\n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/dump/disk/ConfigRocksDbDiskService.java", "line_number": 231, "column_number": -1, "description": "Skipping getKeyByte(...): empty list of specs", "snippet": "228.         byte[] bytes = null;\n229.         try {\n230. >             bytes = initAndGetDB(type).get(getKeyByte(dataId, group, tenant, null));\n231.             String string = byte2String(bytes);\n232.             return string;\n"}, {"level": 2, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/dump/disk/ConfigRocksDbDiskService.java", "line_number": 88, "column_number": -1, "description": "Definition of getKeyByte(...)", "snippet": "85.     }\n86.     \n87. >     private byte[] getKeyByte(String dataId, String group, String tenant, String tag) throws IOException {\n88.         String[] keys = new String[] {dataId, group, tenant, tag};\n89.         StringBuilder stringBuilder = new StringBuilder();\n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/dump/disk/ConfigRocksDbDiskService.java", "line_number": 231, "column_number": -1, "description": "Skipping get(...): unknown method", "snippet": "228.         byte[] bytes = null;\n229.         try {\n230. >             bytes = initAndGetDB(type).get(getKeyByte(dataId, group, tenant, null));\n231.             String string = byte2String(bytes);\n232.             return string;\n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/dump/disk/ConfigRocksDbDiskService.java", "line_number": 232, "column_number": -1, "description": "", "snippet": "229.         try {\n230.             bytes = initAndGetDB(type).get(getKeyByte(dataId, group, tenant, null));\n231. >             String string = byte2String(bytes);\n232.             return string;\n233.         } catch (RocksDBException e) {\n"}, {"level": 2, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/dump/disk/ConfigRocksDbDiskService.java", "line_number": 198, "column_number": -1, "description": "start of procedure byte2String(...)", "snippet": "195.     }\n196.     \n197. >     private String byte2String(byte[] bytes) throws IOException {\n198.         if (bytes == null) {\n199.             return null;\n"}, {"level": 2, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/dump/disk/ConfigRocksDbDiskService.java", "line_number": 199, "column_number": -1, "description": "Taking true branch", "snippet": "196.     \n197.     private String byte2String(byte[] bytes) throws IOException {\n198. >         if (bytes == null) {\n199.             return null;\n200.         }\n"}, {"level": 2, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/dump/disk/ConfigRocksDbDiskService.java", "line_number": 200, "column_number": -1, "description": "", "snippet": "197.     private String byte2String(byte[] bytes) throws IOException {\n198.         if (bytes == null) {\n199. >             return null;\n200.         }\n201.         return new String(bytes, ENCODE_UTF8);\n"}, {"level": 2, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/dump/disk/ConfigRocksDbDiskService.java", "line_number": 202, "column_number": -1, "description": "return from a call to String ConfigRocksDbDiskService.byte2String(byte[])", "snippet": "199.             return null;\n200.         }\n201. >         return new String(bytes, ENCODE_UTF8);\n202.     }\n203.     \n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/dump/disk/ConfigRocksDbDiskService.java", "line_number": 233, "column_number": -1, "description": "", "snippet": "230.             bytes = initAndGetDB(type).get(getKeyByte(dataId, group, tenant, null));\n231.             String string = byte2String(bytes);\n232. >             return string;\n233.         } catch (RocksDBException e) {\n234.             throw new IOException(e);\n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/dump/disk/ConfigRocksDbDiskService.java", "line_number": 235, "column_number": -1, "description": "return from a call to String ConfigRocksDbDiskService.getContentInner(String,String,String,String)", "snippet": "232.             return string;\n233.         } catch (RocksDBException e) {\n234. >             throw new IOException(e);\n235.         }\n236.     }\n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/dump/disk/ConfigRocksDbDiskService.java", "line_number": 278, "column_number": -1, "description": "", "snippet": "275.     \n276.     public String getLocalConfigMd5(String dataId, String group, String tenant, String encode) throws IOException {\n277. >         return MD5Utils.md5Hex(getContentInner(BASE_DIR, dataId, group, tenant), encode);\n278.     }\n279.     \n"}, {"level": 1, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/MD5Utils.java", "line_number": 72, "column_number": -1, "description": "start of procedure md5Hex(...)", "snippet": "69.     public static String md5Hex(String value, String encode) {\n70.         try {\n71. >             return md5Hex(value.getBytes(encode));\n72.         } catch (Exception e) {\n73.             throw new RuntimeException(e);\n"}]}, {"url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "rawCode": "/*\n * Copyright 1999-2018 Alibaba Group Holding Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.alibaba.nacos.sys.utils;\n\nimport com.alibaba.nacos.common.utils.ByteUtils;\nimport org.apache.commons.io.FileUtils;\nimport org.apache.commons.io.IOUtils;\nimport org.apache.commons.io.output.NullOutputStream;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.BufferedInputStream;\nimport java.io.BufferedOutputStream;\nimport java.io.BufferedReader;\nimport java.io.ByteArrayOutputStream;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.nio.ByteBuffer;\nimport java.nio.CharBuffer;\nimport java.nio.channels.FileChannel;\nimport java.nio.charset.Charset;\nimport java.nio.charset.CharsetDecoder;\nimport java.nio.charset.StandardCharsets;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.util.Objects;\nimport java.util.function.Consumer;\nimport java.util.zip.CheckedInputStream;\nimport java.util.zip.CheckedOutputStream;\nimport java.util.zip.Checksum;\nimport java.util.zip.ZipEntry;\nimport java.util.zip.ZipInputStream;\nimport java.util.zip.ZipOutputStream;\n\n/**\n * IO operates on the utility class.\n *\n * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n */\npublic final class DiskUtils {\n    \n    private static final Logger LOGGER = LoggerFactory.getLogger(DiskUtils.class);\n    \n    private static final String NO_SPACE_CN = \"\u8bbe\u5907\u4e0a\u6ca1\u6709\u7a7a\u95f4\";\n    \n    private static final String NO_SPACE_EN = \"No space left on device\";\n    \n    private static final String DISK_QUOTA_CN = \"\u8d85\u51fa\u78c1\u76d8\u9650\u989d\";\n    \n    private static final String DISK_QUOTA_EN = \"Disk quota exceeded\";\n    \n    private static final Charset CHARSET = StandardCharsets.UTF_8;\n    \n    private static final CharsetDecoder DECODER = CHARSET.newDecoder();\n    \n    public static void touch(String path, String fileName) throws IOException {\n        FileUtils.touch(Paths.get(path, fileName).toFile());\n    }\n    \n    /**\n     * Implements the same behaviour as the \"touch\" utility on Unix. It creates a new file with size 0 or, if the file\n     * exists already, it is opened and closed without modifying it, but updating the file date and time.\n     *\n     * <p>NOTE: As from v1.3, this method throws an IOException if the last\n     * modified date of the file cannot be set. Also, as from v1.3 this method creates parent directories if they do not\n     * exist.\n     *\n     * @param file the File to touch\n     * @throws IOException If an I/O problem occurs\n     */\n    public static void touch(File file) throws IOException {\n        FileUtils.touch(file);\n    }\n    \n    /**\n     * Creates a new empty file in the specified directory, using the given prefix and suffix strings to generate its\n     * name. The resulting {@code Path} is associated with the same {@code FileSystem} as the given directory.\n     *\n     * <p>The details as to how the name of the file is constructed is\n     * implementation dependent and therefore not specified. Where possible the {@code prefix} and {@code suffix} are\n     * used to construct candidate names in the same manner as the {@link java.io.File#createTempFile(String, String,\n     * File)} method.\n     *\n     * @param dir    the path to directory in which to create the file\n     * @param prefix the prefix string to be used in generating the file's name; may be {@code null}\n     * @param suffix the suffix string to be used in generating the file's name; may be {@code null}, in which case\n     *               \"{@code .tmp}\" is used\n     * @return the path to the newly created file that did not exist before this method was invoked\n     * @throws IllegalArgumentException      if the prefix or suffix parameters cannot be used to generate a candidate\n     *                                       file name\n     * @throws UnsupportedOperationException if the array contains an attribute that cannot be set atomically when\n     *                                       creating the directory\n     * @throws IOException                   if an I/O error occurs or {@code dir} does not exist\n     * @throws SecurityException             In the case of the default provider, and a security manager is installed,\n     *                                       the {@link SecurityManager#checkWrite(String) checkWrite} method is invoked\n     *                                       to check write access to the file.\n     */\n    public static File createTmpFile(String dir, String prefix, String suffix) throws IOException {\n        return Files.createTempFile(Paths.get(dir), prefix, suffix).toFile();\n    }\n    \n    /**\n     * Creates an empty file in the default temporary-file directory, using the given prefix and suffix to generate its\n     * name. The resulting {@code Path} is associated with the default {@code FileSystem}.\n     *\n     * @param prefix the prefix string to be used in generating the file's name; may be {@code null}\n     * @param suffix the suffix string to be used in generating the file's name; may be {@code null}, in which case\n     *               \"{@code .tmp}\" is used\n     * @return the path to the newly created file that did not exist before this method was invoked\n     * @throws IllegalArgumentException      if the prefix or suffix parameters cannot be used to generate a candidate\n     *                                       file name\n     * @throws UnsupportedOperationException if the array contains an attribute that cannot be set atomically when\n     *                                       creating the directory\n     * @throws IOException                   if an I/O error occurs or the temporary-file directory does not exist\n     * @throws SecurityException             In the case of the default provider, and a security manager is installed,\n     *                                       the {@link SecurityManager#checkWrite(String) checkWrite} method is invoked\n     *                                       to check write access to the file.\n     */\n    public static File createTmpFile(String prefix, String suffix) throws IOException {\n        return Files.createTempFile(prefix, suffix).toFile();\n    }\n    \n    /**\n     * read file which under the path.\n     *\n     * @param path     directory\n     * @param fileName filename\n     * @return content\n     */\n    public static String readFile(String path, String fileName) {\n        File file = openFile(path, fileName);\n        if (file.exists()) {\n            return readFile(file);\n        }\n        return null;\n    }\n    \n    /**\n     * read file content by {@link InputStream}.\n     *\n     * @param is {@link InputStream}\n     * @return content\n     */\n    public static String readFile(InputStream is) {\n        try (BufferedReader reader = new BufferedReader(new InputStreamReader(is))) {\n            StringBuilder textBuilder = new StringBuilder();\n            String lineTxt = null;\n            while ((lineTxt = reader.readLine()) != null) {\n                textBuilder.append(lineTxt);\n            }\n            return textBuilder.toString();\n        } catch (IOException e) {\n            return null;\n        }\n    }\n    \n    /**\n     * read this file content.\n     *\n     * @param file {@link File}\n     * @return content\n     */\n    public static String readFile(File file) {\n        try (FileChannel fileChannel = new FileInputStream(file).getChannel()) {\n            StringBuilder text = new StringBuilder();\n            ByteBuffer buffer = ByteBuffer.allocate(4096);\n            CharBuffer charBuffer = CharBuffer.allocate(4096);\n            while (fileChannel.read(buffer) != -1) {\n                buffer.flip();\n                DECODER.decode(buffer, charBuffer, false);\n                charBuffer.flip();\n                while (charBuffer.hasRemaining()) {\n                    text.append(charBuffer.get());\n                }\n                buffer.clear();\n                charBuffer.clear();\n            }\n            return text.toString();\n        } catch (IOException e) {\n            return null;\n        }\n    }\n    \n    /**\n     * read this file content then return bytes.\n     *\n     * @param file {@link File}\n     * @return content bytes\n     */\n    public static byte[] readFileBytes(File file) {\n        if (file.exists()) {\n            String result = readFile(file);\n            if (result != null) {\n                return ByteUtils.toBytes(result);\n            }\n        }\n        return null;\n    }\n    \n    public static byte[] readFileBytes(String path, String fileName) {\n        File file = openFile(path, fileName);\n        return readFileBytes(file);\n    }\n    \n    /**\n     * Writes the contents to the target file.\n     *\n     * @param file    target file\n     * @param content content\n     * @param append  write append mode\n     * @return write success\n     */\n    public static boolean writeFile(File file, byte[] content, boolean append) {\n        try (FileChannel fileChannel = new FileOutputStream(file, append).getChannel()) {\n            ByteBuffer buffer = ByteBuffer.wrap(content);\n            fileChannel.write(buffer);\n            return true;\n        } catch (IOException ioe) {\n            if (ioe.getMessage() != null) {\n                String errMsg = ioe.getMessage();\n                if (NO_SPACE_CN.equals(errMsg) || NO_SPACE_EN.equals(errMsg) || errMsg.contains(DISK_QUOTA_CN) || errMsg\n                        .contains(DISK_QUOTA_EN)) {\n                    LOGGER.warn(\"\u78c1\u76d8\u6ee1\uff0c\u81ea\u6740\u9000\u51fa\");\n                    System.exit(0);\n                }\n            }\n        }\n        return false;\n    }\n    \n    public static void deleteQuietly(File file) {\n        Objects.requireNonNull(file, \"file\");\n        FileUtils.deleteQuietly(file);\n    }\n    \n    public static void deleteQuietly(Path path) {\n        Objects.requireNonNull(path, \"path\");\n        FileUtils.deleteQuietly(path.toFile());\n    }\n    \n    /**\n     * delete target file.\n     *\n     * @param path     directory\n     * @param fileName filename\n     * @return delete success\n     */\n    public static boolean deleteFile(String path, String fileName) {\n        File file = Paths.get(path, fileName).toFile();\n        if (file.exists()) {\n            return file.delete();\n        }\n        return false;\n    }\n    \n    public static void deleteDirectory(String path) throws IOException {\n        FileUtils.deleteDirectory(new File(path));\n    }\n    \n    public static void forceMkdir(String path) throws IOException {\n        FileUtils.forceMkdir(new File(path));\n    }\n    \n    public static void forceMkdir(File file) throws IOException {\n        FileUtils.forceMkdir(file);\n    }\n    \n    public static void deleteDirThenMkdir(String path) throws IOException {\n        deleteDirectory(path);\n        forceMkdir(path);\n    }\n    \n    public static void copyDirectory(File srcDir, File destDir) throws IOException {\n        FileUtils.copyDirectory(srcDir, destDir);\n    }\n    \n    public static void copyFile(File src, File target) throws IOException {\n        FileUtils.copyFile(src, target);\n    }\n    \n    public static File openFile(String path, String fileName) {\n        return openFile(path, fileName, false);\n    }\n    \n    /**\n     * open file.\n     *\n     * @param path     directory\n     * @param fileName filename\n     * @param rewrite  if rewrite is true, will delete old file and create new one\n     * @return {@link File}\n     */\n    public static File openFile(String path, String fileName, boolean rewrite) {\n        File directory = new File(path);\n        boolean mkdirs = true;\n        if (!directory.exists()) {\n            mkdirs = directory.mkdirs();\n        }\n        if (!mkdirs) {\n            LOGGER.error(\"[DiskUtils] can't create directory\");\n            return null;\n        }\n        File file = new File(path, fileName);\n        try {\n            boolean create = true;\n            if (!file.exists()) {\n                file.createNewFile();\n            }\n            if (file.exists()) {\n                if (rewrite) {\n                    file.delete();\n                } else {\n                    create = false;\n                }\n            }\n            if (create) {\n                file.createNewFile();\n            }\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n        return file;\n    }\n    \n    // copy from sofa-jraft\n    \n    /**\n     * Compress a folder in a directory.\n     *\n     * @param rootDir    directory\n     * @param sourceDir  folder\n     * @param outputFile output file\n     * @param checksum   checksum\n     * @throws IOException IOException\n     */\n    public static void compress(final String rootDir, final String sourceDir, final String outputFile,\n            final Checksum checksum) throws IOException {\n        try (final FileOutputStream fos = new FileOutputStream(outputFile);\n                final CheckedOutputStream cos = new CheckedOutputStream(fos, checksum);\n                final ZipOutputStream zos = new ZipOutputStream(new BufferedOutputStream(cos))) {\n            compressDirectoryToZipFile(rootDir, sourceDir, zos);\n            zos.flush();\n            fos.getFD().sync();\n        }\n    }\n    \n    // copy from sofa-jraft\n    \n    private static void compressDirectoryToZipFile(final String rootDir, final String sourceDir,\n            final ZipOutputStream zos) throws IOException {\n        final String dir = Paths.get(rootDir, sourceDir).toString();\n        final File[] files = Objects.requireNonNull(new File(dir).listFiles(), \"files\");\n        for (final File file : files) {\n            final String child = Paths.get(sourceDir, file.getName()).toString();\n            if (file.isDirectory()) {\n                compressDirectoryToZipFile(rootDir, child, zos);\n            } else {\n                try (final FileInputStream fis = new FileInputStream(file);\n                        final BufferedInputStream bis = new BufferedInputStream(fis)) {\n                    compressIntoZipFile(child, bis, zos);\n                }\n            }\n        }\n    }\n    \n    /**\n     * Compress an input stream to zip file.\n     *\n     * @param childName   child name in zip file\n     * @param inputStream input stream needed compress\n     * @param outputFile  output file\n     * @param checksum    check sum\n     * @throws IOException IOException during compress\n     */\n    public static void compressIntoZipFile(final String childName, final InputStream inputStream,\n            final String outputFile, final Checksum checksum) throws IOException {\n        try (final FileOutputStream fileOutputStream = new FileOutputStream(outputFile);\n                final CheckedOutputStream checkedOutputStream = new CheckedOutputStream(fileOutputStream, checksum);\n                final ZipOutputStream zipStream = new ZipOutputStream(new BufferedOutputStream(checkedOutputStream))) {\n            compressIntoZipFile(childName, inputStream, zipStream);\n            zipStream.flush();\n            fileOutputStream.getFD().sync();\n        }\n    }\n    \n    private static void compressIntoZipFile(final String childName, final InputStream inputStream,\n            final ZipOutputStream zipOutputStream) throws IOException {\n        zipOutputStream.putNextEntry(new ZipEntry(childName));\n        IOUtils.copy(inputStream, zipOutputStream);\n    }\n    \n    // copy from sofa-jraft\n    \n    /**\n     * Unzip the target file to the specified folder.\n     *\n     * @param sourceFile target file\n     * @param outputDir  specified folder\n     * @param checksum   checksum\n     * @throws IOException IOException\n     */\n    public static void decompress(final String sourceFile, final String outputDir, final Checksum checksum)\n            throws IOException {\n        try (final FileInputStream fis = new FileInputStream(sourceFile);\n                final CheckedInputStream cis = new CheckedInputStream(fis, checksum);\n                final ZipInputStream zis = new ZipInputStream(new BufferedInputStream(cis))) {\n            ZipEntry entry;\n            while ((entry = zis.getNextEntry()) != null) {\n                final String fileName = entry.getName();\n                final File entryFile = new File(Paths.get(outputDir, fileName).toString());\n                FileUtils.forceMkdir(entryFile.getParentFile());\n                try (final FileOutputStream fos = new FileOutputStream(entryFile);\n                        final BufferedOutputStream bos = new BufferedOutputStream(fos)) {\n                    IOUtils.copy(zis, bos);\n                    bos.flush();\n                    fos.getFD().sync();\n                }\n            }\n            // Continue to read all remaining bytes(extra metadata of ZipEntry) directly from the checked stream,\n            // Otherwise, the checksum value maybe unexpected.\n            //\n            // See https://coderanch.com/t/279175/java/ZipInputStream\n            IOUtils.copy(cis, NullOutputStream.NULL_OUTPUT_STREAM);\n        }\n    }\n    \n    /**\n     * Unzip the target file to byte array.\n     *\n     * @param sourceFile target file\n     * @param checksum   checksum\n     * @return decompress byte array\n     * @throws IOException IOException during decompress\n     */\n    public static byte[] decompress(final String sourceFile, final Checksum checksum) throws IOException {\n        byte[] result;\n        try (final FileInputStream fis = new FileInputStream(sourceFile);\n                final CheckedInputStream cis = new CheckedInputStream(fis, checksum);\n                final ZipInputStream zis = new ZipInputStream(new BufferedInputStream(cis));\n                final ByteArrayOutputStream bos = new ByteArrayOutputStream(1024)) {\n            while (zis.getNextEntry() != null) {\n                IOUtils.copy(zis, bos);\n                bos.flush();\n            }\n            IOUtils.copy(cis, NullOutputStream.NULL_OUTPUT_STREAM);\n            result = bos.toByteArray();\n        }\n        return result;\n    }\n    \n    /**\n     * Returns an Iterator for the lines in a <code>File</code>.\n     * <p>\n     * This method opens an <code>InputStream</code> for the file. When you have finished with the iterator you should\n     * close the stream to free internal resources. This can be done by calling the {@link\n     * org.apache.commons.io.LineIterator#close()} or {@link org.apache.commons.io.LineIterator#closeQuietly(org.apache.commons.io.LineIterator)}\n     * method.\n     * </p>\n     * The recommended usage pattern is:\n     * <pre>\n     * LineIterator it = FileUtils.lineIterator(file, \"UTF-8\");\n     * try {\n     *   while (it.hasNext()) {\n     *     String line = it.nextLine();\n     *     /// do something with line\n     *   }\n     * } finally {\n     *   LineIterator.closeQuietly(iterator);\n     * }\n     * </pre>\n     * <p>\n     * If an exception occurs during the creation of the iterator, the underlying stream is closed.\n     * </p>\n     *\n     * @param file     the file to open for input, must not be <code>null</code>\n     * @param encoding the encoding to use, <code>null</code> means platform default\n     * @return an Iterator of the lines in the file, never <code>null</code>\n     * @throws IOException in case of an I/O error (file closed)\n     * @since 1.2\n     */\n    public static LineIterator lineIterator(File file, String encoding) throws IOException {\n        return new LineIterator(FileUtils.lineIterator(file, encoding));\n    }\n    \n    /**\n     * Returns an Iterator for the lines in a <code>File</code> using the default encoding for the VM.\n     *\n     * @param file the file to open for input, must not be <code>null</code>\n     * @return an Iterator of the lines in the file, never <code>null</code>\n     * @throws IOException in case of an I/O error (file closed)\n     * @see #lineIterator(File, String)\n     * @since 1.3\n     */\n    public static LineIterator lineIterator(File file) throws IOException {\n        return new LineIterator(FileUtils.lineIterator(file, null));\n    }\n    \n    public static class LineIterator implements AutoCloseable {\n        \n        private final org.apache.commons.io.LineIterator target;\n        \n        /**\n         * Constructs an iterator of the lines for a <code>Reader</code>.\n         *\n         * @param target {@link org.apache.commons.io.LineIterator}\n         */\n        LineIterator(org.apache.commons.io.LineIterator target) {\n            this.target = target;\n        }\n        \n        public boolean hasNext() {\n            return target.hasNext();\n        }\n        \n        public String next() {\n            return target.next();\n        }\n        \n        public String nextLine() {\n            return target.nextLine();\n        }\n        \n        @Override\n        public void close() throws IOException {\n            target.close();\n        }\n        \n        public void remove() {\n            target.remove();\n        }\n        \n        public void forEachRemaining(Consumer<? super String> action) {\n            target.forEachRemaining(action);\n        }\n    }\n    \n}\n", "methodName": "com.alibaba.nacos.sys.utils.DiskUtils.readFileBytes(java.lang.String,java.lang.String):byte[]", "exampleID": 12, "dataset": "infer", "filepath": "sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "line": 221, "sink": "readFileBytes(...)", "source": "file", "sourceLine": 220, "qualifier": "$$file/$ could be null, and is @@dereferenced by readFileBytes(...)/@", "steps": [{"line": 301, "source": "file", "filepath": "sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "methodName": "DiskUtils.openFile", "exampleID": 13}], "line_number": 220, "records": [{"level": 1, "filename": "sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "line_number": 301, "column_number": -1, "description": "start of procedure openFile(...)", "snippet": "        return openFile(path, fileName, false);", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "methodName": "openFile"}, {"level": 2, "filename": "sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "line_number": 312, "column_number": -1, "description": "start of procedure openFile(...)", "snippet": "    public static File openFile(String path, String fileName, boolean rewrite) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "methodName": "openFile"}, {"level": 2, "filename": "sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "line_number": 313, "column_number": -1, "description": "Skipping File(...): unknown method", "snippet": "        File directory = new File(path);", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "methodName": "openFile"}, {"level": 2, "filename": "sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "line_number": 314, "column_number": -1, "description": "", "snippet": "        boolean mkdirs = true;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "methodName": "openFile"}, {"level": 2, "filename": "sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "line_number": 315, "column_number": -1, "description": "Taking true branch", "snippet": "        if (!directory.exists()) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "methodName": "openFile"}, {"level": 2, "filename": "sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "line_number": 316, "column_number": -1, "description": "Skipping mkdirs(): unknown method", "snippet": "            mkdirs = directory.mkdirs();", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "methodName": "openFile"}, {"level": 2, "filename": "sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "line_number": 318, "column_number": -1, "description": "Taking true branch", "snippet": "        if (!mkdirs) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "methodName": "openFile"}, {"level": 2, "filename": "sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "line_number": 319, "column_number": -1, "description": "Skipping error(...): unknown method", "snippet": "            LOGGER.error(\"[DiskUtils] can't create directory\");", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "methodName": "openFile"}, {"level": 2, "filename": "sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "line_number": 320, "column_number": -1, "description": "", "snippet": "            return null;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "methodName": "openFile"}, {"level": 2, "filename": "sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "line_number": 341, "column_number": -1, "description": "return from a call to File DiskUtils.openFile(String,String,boolean)", "snippet": "        return file;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "methodName": "openFile"}, {"level": 1, "filename": "sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "line_number": 301, "column_number": -1, "description": "return from a call to File DiskUtils.openFile(String,String)", "snippet": "        return openFile(path, fileName, false);", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "methodName": "openFile"}, {"level": 1, "filename": "sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "line_number": 209, "column_number": -1, "description": "start of procedure readFileBytes(...)", "snippet": "    public static byte[] readFileBytes(File file) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "methodName": "readFileBytes"}, {"level": 1, "filename": "sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "line_number": 210, "column_number": -1, "description": "Skipping exists(): unknown method", "snippet": "        if (file.exists()) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "methodName": "readFileBytes"}], "combined_records": [{"level": 1, "filename": "sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "line_number": 301, "column_number": -1, "description": "start of procedure openFile(...)", "snippet": "298.    public static File openFile(String path, String fileName) {\n299.        return openFile(path, fileName, false);\n300.    }\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "methodName": "openFile", "line_numbers": [301]}, {"level": 2, "filename": "sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "line_number": 341, "column_number": -1, "description": "start of procedure openFile(...)", "snippet": "309.     */\n310.    public static File openFile(String path, String fileName, boolean rewrite) {\n311.>         File directory = new File(path);\n312.>         boolean mkdirs = true;\n313.>         if (!directory.exists()) {\n314.>             mkdirs = directory.mkdirs();\n315.        }\n316.        if (!mkdirs) {\n317.>             LOGGER.error(\"[DiskUtils] can't create directory\");\n318.>             return null;\n319.        }\n320.        File file = new File(path, fileName);\n321.        try {\n322.            boolean create = true;\n323.            if (!file.exists()) {\n324.                file.createNewFile();\n325.            }\n326.            if (file.exists()) {\n327.                if (rewrite) {\n328.                    file.delete();\n329.                } else {\n330.                    create = false;\n331.                }\n332.            }\n333.            if (create) {\n334.                file.createNewFile();\n335.            }\n336.        } catch (IOException e) {\n337.            throw new RuntimeException(e);\n338.        }\n339.        return file;\n340.    }\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "methodName": "openFile", "line_numbers": [312, 313, 314, 315, 316, 318, 319, 320, 341]}, {"level": 1, "filename": "sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "line_number": 301, "column_number": -1, "description": "return from a call to File DiskUtils.openFile(String,String)", "snippet": "298.    public static File openFile(String path, String fileName) {\n299.        return openFile(path, fileName, false);\n300.    }\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "methodName": "openFile", "line_numbers": [301]}, {"level": 1, "filename": "sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "line_number": 210, "column_number": -1, "description": "start of procedure readFileBytes(...)", "snippet": "206.     */\n207.    public static byte[] readFileBytes(File file) {\n208.>         if (file.exists()) {\n209.>             String result = readFile(file);\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "methodName": "readFileBytes", "line_numbers": [209, 210]}], "infer_explore": [{"level": 0, "filename": "sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "line_number": 219, "column_number": -1, "description": "start of procedure readFileBytes(...)", "snippet": "216.     }\n217.     \n218. >     public static byte[] readFileBytes(String path, String fileName) {\n219.         File file = openFile(path, fileName);\n220.         return readFileBytes(file);\n"}, {"level": 0, "filename": "sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "line_number": 220, "column_number": -1, "description": "", "snippet": "217.     \n218.     public static byte[] readFileBytes(String path, String fileName) {\n219. >         File file = openFile(path, fileName);\n220.         return readFileBytes(file);\n221.     }\n"}, {"level": 1, "filename": "sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "line_number": 301, "column_number": -1, "description": "start of procedure openFile(...)", "snippet": "298.     \n299.     public static File openFile(String path, String fileName) {\n300. >         return openFile(path, fileName, false);\n301.     }\n302.     \n"}, {"level": 2, "filename": "sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "line_number": 312, "column_number": -1, "description": "start of procedure openFile(...)", "snippet": "309.      * @return {@link File}\n310.      */\n311. >     public static File openFile(String path, String fileName, boolean rewrite) {\n312.         File directory = new File(path);\n313.         boolean mkdirs = true;\n"}, {"level": 2, "filename": "sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "line_number": 313, "column_number": -1, "description": "Skipping File(...): unknown method", "snippet": "310.      */\n311.     public static File openFile(String path, String fileName, boolean rewrite) {\n312. >         File directory = new File(path);\n313.         boolean mkdirs = true;\n314.         if (!directory.exists()) {\n"}, {"level": 2, "filename": "sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "line_number": 314, "column_number": -1, "description": "", "snippet": "311.     public static File openFile(String path, String fileName, boolean rewrite) {\n312.         File directory = new File(path);\n313. >         boolean mkdirs = true;\n314.         if (!directory.exists()) {\n315.             mkdirs = directory.mkdirs();\n"}, {"level": 2, "filename": "sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "line_number": 315, "column_number": -1, "description": "Taking true branch", "snippet": "312.         File directory = new File(path);\n313.         boolean mkdirs = true;\n314. >         if (!directory.exists()) {\n315.             mkdirs = directory.mkdirs();\n316.         }\n"}, {"level": 2, "filename": "sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "line_number": 316, "column_number": -1, "description": "Skipping mkdirs(): unknown method", "snippet": "313.         boolean mkdirs = true;\n314.         if (!directory.exists()) {\n315. >             mkdirs = directory.mkdirs();\n316.         }\n317.         if (!mkdirs) {\n"}, {"level": 2, "filename": "sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "line_number": 318, "column_number": -1, "description": "Taking true branch", "snippet": "315.             mkdirs = directory.mkdirs();\n316.         }\n317. >         if (!mkdirs) {\n318.             LOGGER.error(\"[DiskUtils] can't create directory\");\n319.             return null;\n"}, {"level": 2, "filename": "sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "line_number": 319, "column_number": -1, "description": "Skipping error(...): unknown method", "snippet": "316.         }\n317.         if (!mkdirs) {\n318. >             LOGGER.error(\"[DiskUtils] can't create directory\");\n319.             return null;\n320.         }\n"}, {"level": 2, "filename": "sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "line_number": 320, "column_number": -1, "description": "", "snippet": "317.         if (!mkdirs) {\n318.             LOGGER.error(\"[DiskUtils] can't create directory\");\n319. >             return null;\n320.         }\n321.         File file = new File(path, fileName);\n"}, {"level": 2, "filename": "sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "line_number": 341, "column_number": -1, "description": "return from a call to File DiskUtils.openFile(String,String,boolean)", "snippet": "338.             throw new RuntimeException(e);\n339.         }\n340. >         return file;\n341.     }\n342.     \n"}, {"level": 1, "filename": "sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "line_number": 301, "column_number": -1, "description": "return from a call to File DiskUtils.openFile(String,String)", "snippet": "298.     \n299.     public static File openFile(String path, String fileName) {\n300. >         return openFile(path, fileName, false);\n301.     }\n302.     \n"}, {"level": 0, "filename": "sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "line_number": 221, "column_number": -1, "description": "", "snippet": "218.     public static byte[] readFileBytes(String path, String fileName) {\n219.         File file = openFile(path, fileName);\n220. >         return readFileBytes(file);\n221.     }\n222.     \n"}, {"level": 1, "filename": "sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "line_number": 209, "column_number": -1, "description": "start of procedure readFileBytes(...)", "snippet": "206.      * @return content bytes\n207.      */\n208. >     public static byte[] readFileBytes(File file) {\n209.         if (file.exists()) {\n210.             String result = readFile(file);\n"}, {"level": 1, "filename": "sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "line_number": 210, "column_number": -1, "description": "Skipping exists(): unknown method", "snippet": "207.      */\n208.     public static byte[] readFileBytes(File file) {\n209. >         if (file.exists()) {\n210.             String result = readFile(file);\n211.             if (result != null) {\n"}]}, {"url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "rawCode": "/*\n * Copyright 1999-2018 Alibaba Group Holding Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.alibaba.nacos.plugin.control.ruleactivator;\n\nimport com.alibaba.nacos.common.utils.ByteUtils;\nimport org.apache.commons.io.FileUtils;\nimport org.apache.commons.io.IOUtils;\nimport org.apache.commons.io.output.NullOutputStream;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.BufferedInputStream;\nimport java.io.BufferedOutputStream;\nimport java.io.BufferedReader;\nimport java.io.ByteArrayOutputStream;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.nio.ByteBuffer;\nimport java.nio.CharBuffer;\nimport java.nio.channels.FileChannel;\nimport java.nio.charset.Charset;\nimport java.nio.charset.CharsetDecoder;\nimport java.nio.charset.StandardCharsets;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.util.Objects;\nimport java.util.function.Consumer;\nimport java.util.zip.CheckedInputStream;\nimport java.util.zip.CheckedOutputStream;\nimport java.util.zip.Checksum;\nimport java.util.zip.ZipEntry;\nimport java.util.zip.ZipInputStream;\nimport java.util.zip.ZipOutputStream;\n\n/**\n * IO operates on the utility class.\n *\n * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n */\npublic final class DiskUtils {\n    \n    private static final Logger LOGGER = LoggerFactory.getLogger(DiskUtils.class);\n    \n    private static final String NO_SPACE_CN = \"\u8bbe\u5907\u4e0a\u6ca1\u6709\u7a7a\u95f4\";\n    \n    private static final String NO_SPACE_EN = \"No space left on device\";\n    \n    private static final String DISK_QUOTA_CN = \"\u8d85\u51fa\u78c1\u76d8\u9650\u989d\";\n    \n    private static final String DISK_QUOTA_EN = \"Disk quota exceeded\";\n    \n    private static final Charset CHARSET = StandardCharsets.UTF_8;\n    \n    private static final CharsetDecoder DECODER = CHARSET.newDecoder();\n    \n    public static void touch(String path, String fileName) throws IOException {\n        FileUtils.touch(Paths.get(path, fileName).toFile());\n    }\n    \n    /**\n     * Implements the same behaviour as the \"touch\" utility on Unix. It creates a new file with size 0 or, if the file\n     * exists already, it is opened and closed without modifying it, but updating the file date and time.\n     *\n     * <p>NOTE: As from v1.3, this method throws an IOException if the last\n     * modified date of the file cannot be set. Also, as from v1.3 this method creates parent directories if they do not\n     * exist.\n     *\n     * @param file the File to touch\n     * @throws IOException If an I/O problem occurs\n     */\n    public static void touch(File file) throws IOException {\n        FileUtils.touch(file);\n    }\n    \n    /**\n     * Creates a new empty file in the specified directory, using the given prefix and suffix strings to generate its\n     * name. The resulting {@code Path} is associated with the same {@code FileSystem} as the given directory.\n     *\n     * <p>The details as to how the name of the file is constructed is\n     * implementation dependent and therefore not specified. Where possible the {@code prefix} and {@code suffix} are\n     * used to construct candidate names in the same manner as the {@link File#createTempFile(String, String,\n     * File)} method.\n     *\n     * @param dir    the path to directory in which to create the file\n     * @param prefix the prefix string to be used in generating the file's name; may be {@code null}\n     * @param suffix the suffix string to be used in generating the file's name; may be {@code null}, in which case\n     *               \"{@code .tmp}\" is used\n     * @return the path to the newly created file that did not exist before this method was invoked\n     * @throws IllegalArgumentException      if the prefix or suffix parameters cannot be used to generate a candidate\n     *                                       file name\n     * @throws UnsupportedOperationException if the array contains an attribute that cannot be set atomically when\n     *                                       creating the directory\n     * @throws IOException                   if an I/O error occurs or {@code dir} does not exist\n     * @throws SecurityException             In the case of the default provider, and a security manager is installed,\n     *                                       the {@link SecurityManager#checkWrite(String) checkWrite} method is invoked\n     *                                       to check write access to the file.\n     */\n    public static File createTmpFile(String dir, String prefix, String suffix) throws IOException {\n        return Files.createTempFile(Paths.get(dir), prefix, suffix).toFile();\n    }\n    \n    /**\n     * Creates an empty file in the default temporary-file directory, using the given prefix and suffix to generate its\n     * name. The resulting {@code Path} is associated with the default {@code FileSystem}.\n     *\n     * @param prefix the prefix string to be used in generating the file's name; may be {@code null}\n     * @param suffix the suffix string to be used in generating the file's name; may be {@code null}, in which case\n     *               \"{@code .tmp}\" is used\n     * @return the path to the newly created file that did not exist before this method was invoked\n     * @throws IllegalArgumentException      if the prefix or suffix parameters cannot be used to generate a candidate\n     *                                       file name\n     * @throws UnsupportedOperationException if the array contains an attribute that cannot be set atomically when\n     *                                       creating the directory\n     * @throws IOException                   if an I/O error occurs or the temporary-file directory does not exist\n     * @throws SecurityException             In the case of the default provider, and a security manager is installed,\n     *                                       the {@link SecurityManager#checkWrite(String) checkWrite} method is invoked\n     *                                       to check write access to the file.\n     */\n    public static File createTmpFile(String prefix, String suffix) throws IOException {\n        return Files.createTempFile(prefix, suffix).toFile();\n    }\n    \n    /**\n     * read file which under the path.\n     *\n     * @param path     directory\n     * @param fileName filename\n     * @return content\n     */\n    public static String readFile(String path, String fileName) {\n        File file = openFile(path, fileName);\n        if (file.exists()) {\n            return readFile(file);\n        }\n        return null;\n    }\n    \n    /**\n     * read file content by {@link InputStream}.\n     *\n     * @param is {@link InputStream}\n     * @return content\n     */\n    public static String readFile(InputStream is) {\n        try (BufferedReader reader = new BufferedReader(new InputStreamReader(is))) {\n            StringBuilder textBuilder = new StringBuilder();\n            String lineTxt = null;\n            while ((lineTxt = reader.readLine()) != null) {\n                textBuilder.append(lineTxt);\n            }\n            return textBuilder.toString();\n        } catch (IOException e) {\n            return null;\n        }\n    }\n    \n    /**\n     * read this file content.\n     *\n     * @param file {@link File}\n     * @return content\n     */\n    public static String readFile(File file) {\n        try (FileChannel fileChannel = new FileInputStream(file).getChannel()) {\n            StringBuilder text = new StringBuilder();\n            ByteBuffer buffer = ByteBuffer.allocate(4096);\n            CharBuffer charBuffer = CharBuffer.allocate(4096);\n            while (fileChannel.read(buffer) != -1) {\n                buffer.flip();\n                DECODER.decode(buffer, charBuffer, false);\n                charBuffer.flip();\n                while (charBuffer.hasRemaining()) {\n                    text.append(charBuffer.get());\n                }\n                buffer.clear();\n                charBuffer.clear();\n            }\n            return text.toString();\n        } catch (IOException e) {\n            return null;\n        }\n    }\n    \n    /**\n     * read this file content then return bytes.\n     *\n     * @param file {@link File}\n     * @return content bytes\n     */\n    public static byte[] readFileBytes(File file) {\n        if (file.exists()) {\n            String result = readFile(file);\n            if (result != null) {\n                return ByteUtils.toBytes(result);\n            }\n        }\n        return null;\n    }\n    \n    public static byte[] readFileBytes(String path, String fileName) {\n        File file = openFile(path, fileName);\n        return readFileBytes(file);\n    }\n    \n    /**\n     * Writes the contents to the target file.\n     *\n     * @param file    target file\n     * @param content content\n     * @param append  write append mode\n     * @return write success\n     */\n    public static boolean writeFile(File file, byte[] content, boolean append) {\n        try (FileChannel fileChannel = new FileOutputStream(file, append).getChannel()) {\n            ByteBuffer buffer = ByteBuffer.wrap(content);\n            fileChannel.write(buffer);\n            return true;\n        } catch (IOException ioe) {\n            if (ioe.getMessage() != null) {\n                String errMsg = ioe.getMessage();\n                if (NO_SPACE_CN.equals(errMsg) || NO_SPACE_EN.equals(errMsg) || errMsg.contains(DISK_QUOTA_CN) || errMsg\n                        .contains(DISK_QUOTA_EN)) {\n                    LOGGER.warn(\"\u78c1\u76d8\u6ee1\uff0c\u81ea\u6740\u9000\u51fa\");\n                    System.exit(0);\n                }\n            }\n        }\n        return false;\n    }\n    \n    public static void deleteQuietly(File file) {\n        Objects.requireNonNull(file, \"file\");\n        FileUtils.deleteQuietly(file);\n    }\n    \n    public static void deleteQuietly(Path path) {\n        Objects.requireNonNull(path, \"path\");\n        FileUtils.deleteQuietly(path.toFile());\n    }\n    \n    /**\n     * delete target file.\n     *\n     * @param path     directory\n     * @param fileName filename\n     * @return delete success\n     */\n    public static boolean deleteFile(String path, String fileName) {\n        File file = Paths.get(path, fileName).toFile();\n        if (file.exists()) {\n            return file.delete();\n        }\n        return false;\n    }\n    \n    public static void deleteDirectory(String path) throws IOException {\n        FileUtils.deleteDirectory(new File(path));\n    }\n    \n    public static void forceMkdir(String path) throws IOException {\n        FileUtils.forceMkdir(new File(path));\n    }\n    \n    public static void forceMkdir(File file) throws IOException {\n        FileUtils.forceMkdir(file);\n    }\n    \n    public static void deleteDirThenMkdir(String path) throws IOException {\n        deleteDirectory(path);\n        forceMkdir(path);\n    }\n    \n    public static void copyDirectory(File srcDir, File destDir) throws IOException {\n        FileUtils.copyDirectory(srcDir, destDir);\n    }\n    \n    public static void copyFile(File src, File target) throws IOException {\n        FileUtils.copyFile(src, target);\n    }\n    \n    public static File openFile(String path, String fileName) {\n        return openFile(path, fileName, false);\n    }\n    \n    /**\n     * open file.\n     *\n     * @param path     directory\n     * @param fileName filename\n     * @param rewrite  if rewrite is true, will delete old file and create new one\n     * @return {@link File}\n     */\n    public static File openFile(String path, String fileName, boolean rewrite) {\n        File directory = new File(path);\n        boolean mkdirs = true;\n        if (!directory.exists()) {\n            mkdirs = directory.mkdirs();\n        }\n        if (!mkdirs) {\n            LOGGER.error(\"[DiskUtils] can't create directory\");\n            return null;\n        }\n        File file = new File(path, fileName);\n        try {\n            boolean create = true;\n            if (!file.exists()) {\n                file.createNewFile();\n            }\n            if (file.exists()) {\n                if (rewrite) {\n                    file.delete();\n                } else {\n                    create = false;\n                }\n            }\n            if (create) {\n                file.createNewFile();\n            }\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n        return file;\n    }\n    \n    // copy from sofa-jraft\n    \n    /**\n     * Compress a folder in a directory.\n     *\n     * @param rootDir    directory\n     * @param sourceDir  folder\n     * @param outputFile output file\n     * @param checksum   checksum\n     * @throws IOException IOException\n     */\n    public static void compress(final String rootDir, final String sourceDir, final String outputFile,\n            final Checksum checksum) throws IOException {\n        try (final FileOutputStream fos = new FileOutputStream(outputFile);\n                final CheckedOutputStream cos = new CheckedOutputStream(fos, checksum);\n                final ZipOutputStream zos = new ZipOutputStream(new BufferedOutputStream(cos))) {\n            compressDirectoryToZipFile(rootDir, sourceDir, zos);\n            zos.flush();\n            fos.getFD().sync();\n        }\n    }\n    \n    // copy from sofa-jraft\n    \n    private static void compressDirectoryToZipFile(final String rootDir, final String sourceDir,\n            final ZipOutputStream zos) throws IOException {\n        final String dir = Paths.get(rootDir, sourceDir).toString();\n        final File[] files = Objects.requireNonNull(new File(dir).listFiles(), \"files\");\n        for (final File file : files) {\n            final String child = Paths.get(sourceDir, file.getName()).toString();\n            if (file.isDirectory()) {\n                compressDirectoryToZipFile(rootDir, child, zos);\n            } else {\n                try (final FileInputStream fis = new FileInputStream(file);\n                        final BufferedInputStream bis = new BufferedInputStream(fis)) {\n                    compressIntoZipFile(child, bis, zos);\n                }\n            }\n        }\n    }\n    \n    /**\n     * Compress an input stream to zip file.\n     *\n     * @param childName   child name in zip file\n     * @param inputStream input stream needed compress\n     * @param outputFile  output file\n     * @param checksum    check sum\n     * @throws IOException IOException during compress\n     */\n    public static void compressIntoZipFile(final String childName, final InputStream inputStream,\n            final String outputFile, final Checksum checksum) throws IOException {\n        try (final FileOutputStream fileOutputStream = new FileOutputStream(outputFile);\n                final CheckedOutputStream checkedOutputStream = new CheckedOutputStream(fileOutputStream, checksum);\n                final ZipOutputStream zipStream = new ZipOutputStream(new BufferedOutputStream(checkedOutputStream))) {\n            compressIntoZipFile(childName, inputStream, zipStream);\n            zipStream.flush();\n            fileOutputStream.getFD().sync();\n        }\n    }\n    \n    private static void compressIntoZipFile(final String childName, final InputStream inputStream,\n            final ZipOutputStream zipOutputStream) throws IOException {\n        zipOutputStream.putNextEntry(new ZipEntry(childName));\n        IOUtils.copy(inputStream, zipOutputStream);\n    }\n    \n    // copy from sofa-jraft\n    \n    /**\n     * Unzip the target file to the specified folder.\n     *\n     * @param sourceFile target file\n     * @param outputDir  specified folder\n     * @param checksum   checksum\n     * @throws IOException IOException\n     */\n    public static void decompress(final String sourceFile, final String outputDir, final Checksum checksum)\n            throws IOException {\n        try (final FileInputStream fis = new FileInputStream(sourceFile);\n                final CheckedInputStream cis = new CheckedInputStream(fis, checksum);\n                final ZipInputStream zis = new ZipInputStream(new BufferedInputStream(cis))) {\n            ZipEntry entry;\n            while ((entry = zis.getNextEntry()) != null) {\n                final String fileName = entry.getName();\n                final File entryFile = new File(Paths.get(outputDir, fileName).toString());\n                FileUtils.forceMkdir(entryFile.getParentFile());\n                try (final FileOutputStream fos = new FileOutputStream(entryFile);\n                        final BufferedOutputStream bos = new BufferedOutputStream(fos)) {\n                    IOUtils.copy(zis, bos);\n                    bos.flush();\n                    fos.getFD().sync();\n                }\n            }\n            // Continue to read all remaining bytes(extra metadata of ZipEntry) directly from the checked stream,\n            // Otherwise, the checksum value maybe unexpected.\n            //\n            // See https://coderanch.com/t/279175/java/ZipInputStream\n            IOUtils.copy(cis, NullOutputStream.NULL_OUTPUT_STREAM);\n        }\n    }\n    \n    /**\n     * Unzip the target file to byte array.\n     *\n     * @param sourceFile target file\n     * @param checksum   checksum\n     * @return decompress byte array\n     * @throws IOException IOException during decompress\n     */\n    public static byte[] decompress(final String sourceFile, final Checksum checksum) throws IOException {\n        byte[] result;\n        try (final FileInputStream fis = new FileInputStream(sourceFile);\n                final CheckedInputStream cis = new CheckedInputStream(fis, checksum);\n                final ZipInputStream zis = new ZipInputStream(new BufferedInputStream(cis));\n                final ByteArrayOutputStream bos = new ByteArrayOutputStream(1024)) {\n            while (zis.getNextEntry() != null) {\n                IOUtils.copy(zis, bos);\n                bos.flush();\n            }\n            IOUtils.copy(cis, NullOutputStream.NULL_OUTPUT_STREAM);\n            result = bos.toByteArray();\n        }\n        return result;\n    }\n    \n    /**\n     * Returns an Iterator for the lines in a <code>File</code>.\n     * <p>\n     * This method opens an <code>InputStream</code> for the file. When you have finished with the iterator you should\n     * close the stream to free internal resources. This can be done by calling the {@link\n     * org.apache.commons.io.LineIterator#close()} or {@link org.apache.commons.io.LineIterator#closeQuietly(org.apache.commons.io.LineIterator)}\n     * method.\n     * </p>\n     * The recommended usage pattern is:\n     * <pre>\n     * LineIterator it = FileUtils.lineIterator(file, \"UTF-8\");\n     * try {\n     *   while (it.hasNext()) {\n     *     String line = it.nextLine();\n     *     /// do something with line\n     *   }\n     * } finally {\n     *   LineIterator.closeQuietly(iterator);\n     * }\n     * </pre>\n     * <p>\n     * If an exception occurs during the creation of the iterator, the underlying stream is closed.\n     * </p>\n     *\n     * @param file     the file to open for input, must not be <code>null</code>\n     * @param encoding the encoding to use, <code>null</code> means platform default\n     * @return an Iterator of the lines in the file, never <code>null</code>\n     * @throws IOException in case of an I/O error (file closed)\n     * @since 1.2\n     */\n    public static LineIterator lineIterator(File file, String encoding) throws IOException {\n        return new LineIterator(FileUtils.lineIterator(file, encoding));\n    }\n    \n    /**\n     * Returns an Iterator for the lines in a <code>File</code> using the default encoding for the VM.\n     *\n     * @param file the file to open for input, must not be <code>null</code>\n     * @return an Iterator of the lines in the file, never <code>null</code>\n     * @throws IOException in case of an I/O error (file closed)\n     * @see #lineIterator(File, String)\n     * @since 1.3\n     */\n    public static LineIterator lineIterator(File file) throws IOException {\n        return new LineIterator(FileUtils.lineIterator(file, null));\n    }\n    \n    public static class LineIterator implements AutoCloseable {\n        \n        private final org.apache.commons.io.LineIterator target;\n        \n        /**\n         * Constructs an iterator of the lines for a <code>Reader</code>.\n         *\n         * @param target {@link org.apache.commons.io.LineIterator}\n         */\n        LineIterator(org.apache.commons.io.LineIterator target) {\n            this.target = target;\n        }\n        \n        public boolean hasNext() {\n            return target.hasNext();\n        }\n        \n        public String next() {\n            return target.next();\n        }\n        \n        public String nextLine() {\n            return target.nextLine();\n        }\n        \n        @Override\n        public void close() throws IOException {\n            target.close();\n        }\n        \n        public void remove() {\n            target.remove();\n        }\n        \n        public void forEachRemaining(Consumer<? super String> action) {\n            target.forEachRemaining(action);\n        }\n    }\n    \n}\n", "methodName": "com.alibaba.nacos.plugin.control.ruleactivator.DiskUtils.readFileBytes(java.lang.String,java.lang.String):byte[]", "exampleID": 14, "dataset": "infer", "filepath": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "line": 221, "sink": "readFileBytes(...)", "source": "file", "sourceLine": 220, "qualifier": "$$file/$ could be null, and is @@dereferenced by readFileBytes(...)/@", "steps": [{"line": 301, "source": "file", "filepath": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "methodName": "DiskUtils.openFile", "exampleID": 15}], "line_number": 220, "records": [{"level": 1, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "line_number": 301, "column_number": -1, "description": "start of procedure openFile(...)", "snippet": "        return openFile(path, fileName, false);", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "methodName": "openFile"}, {"level": 2, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "line_number": 312, "column_number": -1, "description": "start of procedure openFile(...)", "snippet": "    public static File openFile(String path, String fileName, boolean rewrite) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "methodName": "openFile"}, {"level": 2, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "line_number": 313, "column_number": -1, "description": "Skipping File(...): unknown method", "snippet": "        File directory = new File(path);", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "methodName": "openFile"}, {"level": 2, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "line_number": 314, "column_number": -1, "description": "", "snippet": "        boolean mkdirs = true;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "methodName": "openFile"}, {"level": 2, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "line_number": 315, "column_number": -1, "description": "Taking true branch", "snippet": "        if (!directory.exists()) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "methodName": "openFile"}, {"level": 2, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "line_number": 316, "column_number": -1, "description": "Skipping mkdirs(): unknown method", "snippet": "            mkdirs = directory.mkdirs();", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "methodName": "openFile"}, {"level": 2, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "line_number": 318, "column_number": -1, "description": "Taking true branch", "snippet": "        if (!mkdirs) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "methodName": "openFile"}, {"level": 2, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "line_number": 319, "column_number": -1, "description": "Skipping error(...): unknown method", "snippet": "            LOGGER.error(\"[DiskUtils] can't create directory\");", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "methodName": "openFile"}, {"level": 2, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "line_number": 320, "column_number": -1, "description": "", "snippet": "            return null;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "methodName": "openFile"}, {"level": 2, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "line_number": 341, "column_number": -1, "description": "return from a call to File DiskUtils.openFile(String,String,boolean)", "snippet": "        return file;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "methodName": "openFile"}, {"level": 1, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "line_number": 301, "column_number": -1, "description": "return from a call to File DiskUtils.openFile(String,String)", "snippet": "        return openFile(path, fileName, false);", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "methodName": "openFile"}, {"level": 1, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "line_number": 209, "column_number": -1, "description": "start of procedure readFileBytes(...)", "snippet": "    public static byte[] readFileBytes(File file) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "methodName": "readFileBytes"}, {"level": 1, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "line_number": 210, "column_number": -1, "description": "Skipping exists(): unknown method", "snippet": "        if (file.exists()) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "methodName": "readFileBytes"}], "combined_records": [{"level": 1, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "line_number": 301, "column_number": -1, "description": "start of procedure openFile(...)", "snippet": "298.    public static File openFile(String path, String fileName) {\n299.        return openFile(path, fileName, false);\n300.    }\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "methodName": "openFile", "line_numbers": [301]}, {"level": 2, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "line_number": 341, "column_number": -1, "description": "start of procedure openFile(...)", "snippet": "309.     */\n310.    public static File openFile(String path, String fileName, boolean rewrite) {\n311.>         File directory = new File(path);\n312.>         boolean mkdirs = true;\n313.>         if (!directory.exists()) {\n314.>             mkdirs = directory.mkdirs();\n315.        }\n316.        if (!mkdirs) {\n317.>             LOGGER.error(\"[DiskUtils] can't create directory\");\n318.>             return null;\n319.        }\n320.        File file = new File(path, fileName);\n321.        try {\n322.            boolean create = true;\n323.            if (!file.exists()) {\n324.                file.createNewFile();\n325.            }\n326.            if (file.exists()) {\n327.                if (rewrite) {\n328.                    file.delete();\n329.                } else {\n330.                    create = false;\n331.                }\n332.            }\n333.            if (create) {\n334.                file.createNewFile();\n335.            }\n336.        } catch (IOException e) {\n337.            throw new RuntimeException(e);\n338.        }\n339.        return file;\n340.    }\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "methodName": "openFile", "line_numbers": [312, 313, 314, 315, 316, 318, 319, 320, 341]}, {"level": 1, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "line_number": 301, "column_number": -1, "description": "return from a call to File DiskUtils.openFile(String,String)", "snippet": "298.    public static File openFile(String path, String fileName) {\n299.        return openFile(path, fileName, false);\n300.    }\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "methodName": "openFile", "line_numbers": [301]}, {"level": 1, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "line_number": 210, "column_number": -1, "description": "start of procedure readFileBytes(...)", "snippet": "206.     */\n207.    public static byte[] readFileBytes(File file) {\n208.>         if (file.exists()) {\n209.>             String result = readFile(file);\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "methodName": "readFileBytes", "line_numbers": [209, 210]}], "infer_explore": [{"level": 0, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "line_number": 219, "column_number": -1, "description": "start of procedure readFileBytes(...)", "snippet": "216.     }\n217.     \n218. >     public static byte[] readFileBytes(String path, String fileName) {\n219.         File file = openFile(path, fileName);\n220.         return readFileBytes(file);\n"}, {"level": 0, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "line_number": 220, "column_number": -1, "description": "", "snippet": "217.     \n218.     public static byte[] readFileBytes(String path, String fileName) {\n219. >         File file = openFile(path, fileName);\n220.         return readFileBytes(file);\n221.     }\n"}, {"level": 1, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "line_number": 301, "column_number": -1, "description": "start of procedure openFile(...)", "snippet": "298.     \n299.     public static File openFile(String path, String fileName) {\n300. >         return openFile(path, fileName, false);\n301.     }\n302.     \n"}, {"level": 2, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "line_number": 312, "column_number": -1, "description": "start of procedure openFile(...)", "snippet": "309.      * @return {@link File}\n310.      */\n311. >     public static File openFile(String path, String fileName, boolean rewrite) {\n312.         File directory = new File(path);\n313.         boolean mkdirs = true;\n"}, {"level": 2, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "line_number": 313, "column_number": -1, "description": "Skipping File(...): unknown method", "snippet": "310.      */\n311.     public static File openFile(String path, String fileName, boolean rewrite) {\n312. >         File directory = new File(path);\n313.         boolean mkdirs = true;\n314.         if (!directory.exists()) {\n"}, {"level": 2, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "line_number": 314, "column_number": -1, "description": "", "snippet": "311.     public static File openFile(String path, String fileName, boolean rewrite) {\n312.         File directory = new File(path);\n313. >         boolean mkdirs = true;\n314.         if (!directory.exists()) {\n315.             mkdirs = directory.mkdirs();\n"}, {"level": 2, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "line_number": 315, "column_number": -1, "description": "Taking true branch", "snippet": "312.         File directory = new File(path);\n313.         boolean mkdirs = true;\n314. >         if (!directory.exists()) {\n315.             mkdirs = directory.mkdirs();\n316.         }\n"}, {"level": 2, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "line_number": 316, "column_number": -1, "description": "Skipping mkdirs(): unknown method", "snippet": "313.         boolean mkdirs = true;\n314.         if (!directory.exists()) {\n315. >             mkdirs = directory.mkdirs();\n316.         }\n317.         if (!mkdirs) {\n"}, {"level": 2, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "line_number": 318, "column_number": -1, "description": "Taking true branch", "snippet": "315.             mkdirs = directory.mkdirs();\n316.         }\n317. >         if (!mkdirs) {\n318.             LOGGER.error(\"[DiskUtils] can't create directory\");\n319.             return null;\n"}, {"level": 2, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "line_number": 319, "column_number": -1, "description": "Skipping error(...): unknown method", "snippet": "316.         }\n317.         if (!mkdirs) {\n318. >             LOGGER.error(\"[DiskUtils] can't create directory\");\n319.             return null;\n320.         }\n"}, {"level": 2, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "line_number": 320, "column_number": -1, "description": "", "snippet": "317.         if (!mkdirs) {\n318.             LOGGER.error(\"[DiskUtils] can't create directory\");\n319. >             return null;\n320.         }\n321.         File file = new File(path, fileName);\n"}, {"level": 2, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "line_number": 341, "column_number": -1, "description": "return from a call to File DiskUtils.openFile(String,String,boolean)", "snippet": "338.             throw new RuntimeException(e);\n339.         }\n340. >         return file;\n341.     }\n342.     \n"}, {"level": 1, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "line_number": 301, "column_number": -1, "description": "return from a call to File DiskUtils.openFile(String,String)", "snippet": "298.     \n299.     public static File openFile(String path, String fileName) {\n300. >         return openFile(path, fileName, false);\n301.     }\n302.     \n"}, {"level": 0, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "line_number": 221, "column_number": -1, "description": "", "snippet": "218.     public static byte[] readFileBytes(String path, String fileName) {\n219.         File file = openFile(path, fileName);\n220. >         return readFileBytes(file);\n221.     }\n222.     \n"}, {"level": 1, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "line_number": 209, "column_number": -1, "description": "start of procedure readFileBytes(...)", "snippet": "206.      * @return content bytes\n207.      */\n208. >     public static byte[] readFileBytes(File file) {\n209.         if (file.exists()) {\n210.             String result = readFile(file);\n"}, {"level": 1, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "line_number": 210, "column_number": -1, "description": "Skipping exists(): unknown method", "snippet": "207.      */\n208.     public static byte[] readFileBytes(File file) {\n209. >         if (file.exists()) {\n210.             String result = readFile(file);\n211.             if (result != null) {\n"}]}, {"url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/persistence/src/main/java/com/alibaba/nacos/persistence/repository/extrnal/ExternalStoragePaginationHelperImpl.java", "rawCode": "/*\n * Copyright 1999-2023 Alibaba Group Holding Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.alibaba.nacos.persistence.repository.extrnal;\n\nimport com.alibaba.nacos.persistence.model.Page;\nimport com.alibaba.nacos.persistence.repository.PaginationHelper;\nimport com.alibaba.nacos.persistence.repository.embedded.EmbeddedStorageContextHolder;\nimport com.alibaba.nacos.plugin.datasource.model.MapperResult;\nimport org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.jdbc.core.RowMapper;\n\nimport java.util.List;\n\n/**\n * External Storage Pagination utils.\n *\n * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n */\n\npublic class ExternalStoragePaginationHelperImpl<E> implements PaginationHelper {\n    \n    private final JdbcTemplate jdbcTemplate;\n    \n    public ExternalStoragePaginationHelperImpl(JdbcTemplate jdbcTemplate) {\n        this.jdbcTemplate = jdbcTemplate;\n    }\n    \n    /**\n     * Take paging.\n     *\n     * @param sqlCountRows query total SQL\n     * @param sqlFetchRows query data sql\n     * @param args         query parameters\n     * @param pageNo       page number\n     * @param pageSize     page size\n     * @param rowMapper    {@link RowMapper}\n     * @return Paginated data {@code <E>}\n     */\n    @Override\n    public Page<E> fetchPage(final String sqlCountRows, final String sqlFetchRows, final Object[] args,\n            final int pageNo, final int pageSize, final RowMapper rowMapper) {\n        return fetchPage(sqlCountRows, sqlFetchRows, args, pageNo, pageSize, null, rowMapper);\n    }\n    \n    @Override\n    public Page<E> fetchPage(final String sqlCountRows, final String sqlFetchRows, final Object[] args,\n            final int pageNo, final int pageSize, final Long lastMaxId, final RowMapper rowMapper) {\n        if (pageNo <= 0 || pageSize <= 0) {\n            throw new IllegalArgumentException(\"pageNo and pageSize must be greater than zero\");\n        }\n        \n        // Query the total number of current records.\n        Integer rowCountInt = jdbcTemplate.queryForObject(sqlCountRows, args, Integer.class);\n        if (rowCountInt == null) {\n            throw new IllegalArgumentException(\"fetchPageLimit error\");\n        }\n        \n        // Compute pages count\n        int pageCount = rowCountInt / pageSize;\n        if (rowCountInt > pageSize * pageCount) {\n            pageCount++;\n        }\n        \n        // Create Page object\n        final Page<E> page = new Page<>();\n        page.setPageNumber(pageNo);\n        page.setPagesAvailable(pageCount);\n        page.setTotalCount(rowCountInt);\n        \n        if (pageNo > pageCount) {\n            return page;\n        }\n        \n        List<E> result = jdbcTemplate.query(sqlFetchRows, args, rowMapper);\n        for (E item : result) {\n            page.getPageItems().add(item);\n        }\n        return page;\n    }\n    \n    @Override\n    public Page<E> fetchPageLimit(final String sqlCountRows, final String sqlFetchRows, final Object[] args,\n            final int pageNo, final int pageSize, final RowMapper rowMapper) {\n        if (pageNo <= 0 || pageSize <= 0) {\n            throw new IllegalArgumentException(\"pageNo and pageSize must be greater than zero\");\n        }\n        // Query the total number of current records\n        Integer rowCountInt = jdbcTemplate.queryForObject(sqlCountRows, Integer.class);\n        if (rowCountInt == null) {\n            throw new IllegalArgumentException(\"fetchPageLimit error\");\n        }\n        \n        // Compute pages count\n        int pageCount = rowCountInt / pageSize;\n        if (rowCountInt > pageSize * pageCount) {\n            pageCount++;\n        }\n        \n        // Create Page object\n        final Page<E> page = new Page<>();\n        page.setPageNumber(pageNo);\n        page.setPagesAvailable(pageCount);\n        page.setTotalCount(rowCountInt);\n        \n        if (pageNo > pageCount) {\n            return page;\n        }\n        \n        List<E> result = jdbcTemplate.query(sqlFetchRows, args, rowMapper);\n        for (E item : result) {\n            page.getPageItems().add(item);\n        }\n        return page;\n    }\n    \n    @Override\n    public Page fetchPageLimit(MapperResult countMapperResult, MapperResult mapperResult, int pageNo, int pageSize,\n            RowMapper rowMapper) {\n        return fetchPageLimit(countMapperResult.getSql(), countMapperResult.getParamList().toArray(),\n                mapperResult.getSql(), mapperResult.getParamList().toArray(), pageNo, pageSize, rowMapper);\n    }\n    \n    @Override\n    public Page<E> fetchPageLimit(final String sqlCountRows, final Object[] args1, final String sqlFetchRows,\n            final Object[] args2, final int pageNo, final int pageSize, final RowMapper rowMapper) {\n        if (pageNo <= 0 || pageSize <= 0) {\n            throw new IllegalArgumentException(\"pageNo and pageSize must be greater than zero\");\n        }\n        // Query the total number of current records\n        Integer rowCountInt = jdbcTemplate.queryForObject(sqlCountRows, args1, Integer.class);\n        if (rowCountInt == null) {\n            throw new IllegalArgumentException(\"fetchPageLimit error\");\n        }\n        \n        // Compute pages count\n        int pageCount = rowCountInt / pageSize;\n        if (rowCountInt > pageSize * pageCount) {\n            pageCount++;\n        }\n        \n        // Create Page object\n        final Page<E> page = new Page<>();\n        page.setPageNumber(pageNo);\n        page.setPagesAvailable(pageCount);\n        page.setTotalCount(rowCountInt);\n        \n        if (pageNo > pageCount) {\n            return page;\n        }\n        List<E> result = jdbcTemplate.query(sqlFetchRows, args2, rowMapper);\n        for (E item : result) {\n            page.getPageItems().add(item);\n        }\n        return page;\n    }\n    \n    @Override\n    public Page<E> fetchPageLimit(final String sqlFetchRows, final Object[] args, final int pageNo, final int pageSize,\n            final RowMapper rowMapper) {\n        if (pageNo <= 0 || pageSize <= 0) {\n            throw new IllegalArgumentException(\"pageNo and pageSize must be greater than zero\");\n        }\n        // Create Page object\n        final Page<E> page = new Page<>();\n        List<E> result = jdbcTemplate.query(sqlFetchRows, args, rowMapper);\n        for (E item : result) {\n            page.getPageItems().add(item);\n        }\n        return page;\n    }\n    \n    @Override\n    public void updateLimit(final String sql, final Object[] args) {\n        try {\n            jdbcTemplate.update(sql, args);\n        } finally {\n            EmbeddedStorageContextHolder.cleanAllContext();\n        }\n    }\n    \n    /**\n     * Update limit with response.\n     *\n     * @param sql  sql\n     * @param args args\n     * @return update row count\n     */\n    public int updateLimitWithResponse(final String sql, final Object[] args) {\n        String sqlUpdate = sql;\n        \n        try {\n            return jdbcTemplate.update(sqlUpdate, args);\n        } finally {\n            EmbeddedStorageContextHolder.cleanAllContext();\n        }\n    }\n    \n}\n", "methodName": "com.alibaba.nacos.persistence.repository.extrnal.ExternalStoragePaginationHelperImpl.fetchPageLimit(java.lang.String,java.lang.Object[],int,int,org.springframework.jdbc.core.RowMapper):com.alibaba.nacos.persistence.model.Page", "exampleID": 16, "dataset": "infer", "filepath": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/extrnal/ExternalStoragePaginationHelperImpl.java", "line": 181, "sink": "getPageItems(page)", "source": "getPageItems(page)", "sourceLine": 181, "qualifier": "$$getPageItems(page)/$ could return null, and is @@dereferenced/@", "steps": [{"line": 81, "source": "getPageItems(page)", "filepath": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "methodName": "Page.getPageItems", "exampleID": 17}], "line_number": 181, "records": [{"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 81, "column_number": -1, "description": "start of procedure getPageItems()", "snippet": "    public List<E> getPageItems() {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "methodName": "getPageItems"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 82, "column_number": -1, "description": "return from a call to List Page.getPageItems()", "snippet": "        return pageItems;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "methodName": "getPageItems"}], "combined_records": [{"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 82, "column_number": -1, "description": "start of procedure getPageItems()", "snippet": "78.    \n79.    public List<E> getPageItems() {\n80.>         return pageItems;\n81.    }\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "methodName": "getPageItems", "line_numbers": [81, 82]}], "infer_explore": [{"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/extrnal/ExternalStoragePaginationHelperImpl.java", "line_number": 172, "column_number": -1, "description": "start of procedure fetchPageLimit(...)", "snippet": "169.     \n170.     @Override\n171. >     public Page<E> fetchPageLimit(final String sqlFetchRows, final Object[] args, final int pageNo, final int pageSize,\n172.             final RowMapper rowMapper) {\n173.         if (pageNo <= 0 || pageSize <= 0) {\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/extrnal/ExternalStoragePaginationHelperImpl.java", "line_number": 174, "column_number": -1, "description": "Taking true branch", "snippet": "171.     public Page<E> fetchPageLimit(final String sqlFetchRows, final Object[] args, final int pageNo, final int pageSize,\n172.             final RowMapper rowMapper) {\n173. >         if (pageNo <= 0 || pageSize <= 0) {\n174.             throw new IllegalArgumentException(\"pageNo and pageSize must be greater than zero\");\n175.         }\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/extrnal/ExternalStoragePaginationHelperImpl.java", "line_number": 174, "column_number": -1, "description": "Taking false branch", "snippet": "171.     public Page<E> fetchPageLimit(final String sqlFetchRows, final Object[] args, final int pageNo, final int pageSize,\n172.             final RowMapper rowMapper) {\n173. >         if (pageNo <= 0 || pageSize <= 0) {\n174.             throw new IllegalArgumentException(\"pageNo and pageSize must be greater than zero\");\n175.         }\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/extrnal/ExternalStoragePaginationHelperImpl.java", "line_number": 178, "column_number": -1, "description": "Skipping Page(): empty list of specs", "snippet": "175.         }\n176.         // Create Page object\n177. >         final Page<E> page = new Page<>();\n178.         List<E> result = jdbcTemplate.query(sqlFetchRows, args, rowMapper);\n179.         for (E item : result) {\n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 29, "column_number": -1, "description": "Definition of Page()", "snippet": "26.  * @date 2010-5-6\n27.  */\n28. > public class Page<E> implements Serializable {\n29. \n30.     static final long serialVersionUID = 1234544030560484292L;\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/extrnal/ExternalStoragePaginationHelperImpl.java", "line_number": 179, "column_number": -1, "description": "Skipping query(...): unknown method", "snippet": "176.         // Create Page object\n177.         final Page<E> page = new Page<>();\n178. >         List<E> result = jdbcTemplate.query(sqlFetchRows, args, rowMapper);\n179.         for (E item : result) {\n180.             page.getPageItems().add(item);\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/extrnal/ExternalStoragePaginationHelperImpl.java", "line_number": 180, "column_number": -1, "description": "Taking true branch", "snippet": "177.         final Page<E> page = new Page<>();\n178.         List<E> result = jdbcTemplate.query(sqlFetchRows, args, rowMapper);\n179. >         for (E item : result) {\n180.             page.getPageItems().add(item);\n181.         }\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/extrnal/ExternalStoragePaginationHelperImpl.java", "line_number": 181, "column_number": -1, "description": "", "snippet": "178.         List<E> result = jdbcTemplate.query(sqlFetchRows, args, rowMapper);\n179.         for (E item : result) {\n180. >             page.getPageItems().add(item);\n181.         }\n182.         return page;\n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 81, "column_number": -1, "description": "start of procedure getPageItems()", "snippet": "78.     }\n79.     \n80. >     public List<E> getPageItems() {\n81.         return pageItems;\n82.     }\n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 82, "column_number": -1, "description": "return from a call to List Page.getPageItems()", "snippet": "79.     \n80.     public List<E> getPageItems() {\n81. >         return pageItems;\n82.     }\n83. }\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/extrnal/ExternalStoragePaginationHelperImpl.java", "line_number": 181, "column_number": -1, "description": "", "snippet": "178.         List<E> result = jdbcTemplate.query(sqlFetchRows, args, rowMapper);\n179.         for (E item : result) {\n180. >             page.getPageItems().add(item);\n181.         }\n182.         return page;\n"}]}, {"url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/EmbeddedPaginationHelperImpl.java", "rawCode": "/*\n * Copyright 1999-2023 Alibaba Group Holding Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.alibaba.nacos.persistence.repository.embedded;\n\nimport com.alibaba.nacos.persistence.model.Page;\nimport com.alibaba.nacos.persistence.repository.PaginationHelper;\nimport com.alibaba.nacos.persistence.repository.embedded.operate.DatabaseOperate;\nimport com.alibaba.nacos.plugin.datasource.model.MapperResult;\nimport org.springframework.jdbc.core.RowMapper;\n\nimport java.util.List;\n\n/**\n * Pagination Utils For Apache Derby.\n *\n * @param <E> Generic class\n * @author boyan\n * @date 2010-5-6\n */\npublic class EmbeddedPaginationHelperImpl<E> implements PaginationHelper {\n    \n    private final DatabaseOperate databaseOperate;\n    \n    public EmbeddedPaginationHelperImpl(DatabaseOperate databaseOperate) {\n        this.databaseOperate = databaseOperate;\n    }\n    \n    /**\n     * Take paging.\n     *\n     * @param sqlCountRows Query total SQL\n     * @param sqlFetchRows Query data sql\n     * @param args         query args\n     * @param pageNo       page number\n     * @param pageSize     page size\n     * @param rowMapper    Entity mapping\n     * @return Paging data\n     */\n    @Override\n    public Page<E> fetchPage(final String sqlCountRows, final String sqlFetchRows, final Object[] args,\n            final int pageNo, final int pageSize, final RowMapper rowMapper) {\n        return fetchPage(sqlCountRows, sqlFetchRows, args, pageNo, pageSize, null, rowMapper);\n    }\n    \n    @Override\n    public Page<E> fetchPage(final String sqlCountRows, final String sqlFetchRows, final Object[] args,\n            final int pageNo, final int pageSize, final Long lastMaxId, final RowMapper rowMapper) {\n        if (pageNo <= 0 || pageSize <= 0) {\n            throw new IllegalArgumentException(\"pageNo and pageSize must be greater than zero\");\n        }\n        \n        // Query the total number of current records\n        Integer rowCountInt = databaseOperate.queryOne(sqlCountRows, args, Integer.class);\n        if (rowCountInt == null) {\n            throw new IllegalArgumentException(\"fetchPageLimit error\");\n        }\n        \n        // Count pages\n        int pageCount = rowCountInt / pageSize;\n        if (rowCountInt > pageSize * pageCount) {\n            pageCount++;\n        }\n        \n        // Create Page object\n        final Page<E> page = new Page<>();\n        page.setPageNumber(pageNo);\n        page.setPagesAvailable(pageCount);\n        page.setTotalCount(rowCountInt);\n        \n        if (pageNo > pageCount) {\n            return page;\n        }\n        \n        List<E> result = databaseOperate.queryMany(sqlFetchRows, args, rowMapper);\n        for (E item : result) {\n            page.getPageItems().add(item);\n        }\n        return page;\n    }\n    \n    @Override\n    public Page<E> fetchPageLimit(final String sqlCountRows, final String sqlFetchRows, final Object[] args,\n            final int pageNo, final int pageSize, final RowMapper rowMapper) {\n        if (pageNo <= 0 || pageSize <= 0) {\n            throw new IllegalArgumentException(\"pageNo and pageSize must be greater than zero\");\n        }\n        // Query the total number of current records\n        Integer rowCountInt = databaseOperate.queryOne(sqlCountRows, Integer.class);\n        if (rowCountInt == null) {\n            throw new IllegalArgumentException(\"fetchPageLimit error\");\n        }\n        \n        // Count pages\n        int pageCount = rowCountInt / pageSize;\n        if (rowCountInt > pageSize * pageCount) {\n            pageCount++;\n        }\n        \n        // Create Page object\n        final Page<E> page = new Page<>();\n        page.setPageNumber(pageNo);\n        page.setPagesAvailable(pageCount);\n        page.setTotalCount(rowCountInt);\n        \n        if (pageNo > pageCount) {\n            return page;\n        }\n        \n        List<E> result = databaseOperate.queryMany(sqlFetchRows, args, rowMapper);\n        for (E item : result) {\n            page.getPageItems().add(item);\n        }\n        return page;\n    }\n    \n    @Override\n    public Page<E> fetchPageLimit(final String sqlCountRows, final Object[] args1, final String sqlFetchRows,\n            final Object[] args2, final int pageNo, final int pageSize, final RowMapper rowMapper) {\n        if (pageNo <= 0 || pageSize <= 0) {\n            throw new IllegalArgumentException(\"pageNo and pageSize must be greater than zero\");\n        }\n        // Query the total number of current records\n        Integer rowCountInt = databaseOperate.queryOne(sqlCountRows, args1, Integer.class);\n        if (rowCountInt == null) {\n            throw new IllegalArgumentException(\"fetchPageLimit error\");\n        }\n        \n        // Count pages\n        int pageCount = rowCountInt / pageSize;\n        if (rowCountInt > pageSize * pageCount) {\n            pageCount++;\n        }\n        \n        // Create Page object\n        final Page<E> page = new Page<>();\n        page.setPageNumber(pageNo);\n        page.setPagesAvailable(pageCount);\n        page.setTotalCount(rowCountInt);\n        \n        if (pageNo > pageCount) {\n            return page;\n        }\n        \n        List<E> result = databaseOperate.queryMany(sqlFetchRows, args2, rowMapper);\n        for (E item : result) {\n            page.getPageItems().add(item);\n        }\n        return page;\n    }\n    \n    @Override\n    public Page<E> fetchPageLimit(final String sqlFetchRows, final Object[] args, final int pageNo, final int pageSize,\n            final RowMapper rowMapper) {\n        if (pageNo <= 0 || pageSize <= 0) {\n            throw new IllegalArgumentException(\"pageNo and pageSize must be greater than zero\");\n        }\n        // Create Page object\n        final Page<E> page = new Page<>();\n        \n        List<E> result = databaseOperate.queryMany(sqlFetchRows, args, rowMapper);\n        for (E item : result) {\n            page.getPageItems().add(item);\n        }\n        return page;\n    }\n    \n    @Override\n    public Page fetchPageLimit(MapperResult countMapperResult, MapperResult mapperResult, int pageNo, int pageSize,\n            RowMapper rowMapper) {\n        return fetchPageLimit(countMapperResult.getSql(), countMapperResult.getParamList().toArray(),\n                mapperResult.getSql(), mapperResult.getParamList().toArray(), pageNo, pageSize, rowMapper);\n    }\n    \n    @Override\n    public void updateLimit(final String sql, final Object[] args) {\n        EmbeddedStorageContextHolder.addSqlContext(sql, args);\n        try {\n            databaseOperate.update(EmbeddedStorageContextHolder.getCurrentSqlContext());\n        } finally {\n            EmbeddedStorageContextHolder.cleanAllContext();\n        }\n    }\n    \n}\n", "methodName": "com.alibaba.nacos.persistence.repository.embedded.EmbeddedPaginationHelperImpl.fetchPageLimit(java.lang.String,java.lang.Object[],int,int,org.springframework.jdbc.core.RowMapper):com.alibaba.nacos.persistence.model.Page", "exampleID": 18, "dataset": "infer", "filepath": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/EmbeddedPaginationHelperImpl.java", "line": 176, "sink": "getPageItems(page)", "source": "getPageItems(page)", "sourceLine": 176, "qualifier": "$$getPageItems(page)/$ could return null, and is @@dereferenced/@", "steps": [{"line": 81, "source": "getPageItems(page)", "filepath": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "methodName": "Page.getPageItems", "exampleID": 19}], "line_number": 176, "records": [{"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 81, "column_number": -1, "description": "start of procedure getPageItems()", "snippet": "    public List<E> getPageItems() {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "methodName": "getPageItems"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 82, "column_number": -1, "description": "return from a call to List Page.getPageItems()", "snippet": "        return pageItems;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "methodName": "getPageItems"}], "combined_records": [{"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 82, "column_number": -1, "description": "start of procedure getPageItems()", "snippet": "78.    \n79.    public List<E> getPageItems() {\n80.>         return pageItems;\n81.    }\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "methodName": "getPageItems", "line_numbers": [81, 82]}], "infer_explore": [{"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/EmbeddedPaginationHelperImpl.java", "line_number": 166, "column_number": -1, "description": "start of procedure fetchPageLimit(...)", "snippet": "163.     \n164.     @Override\n165. >     public Page<E> fetchPageLimit(final String sqlFetchRows, final Object[] args, final int pageNo, final int pageSize,\n166.             final RowMapper rowMapper) {\n167.         if (pageNo <= 0 || pageSize <= 0) {\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/EmbeddedPaginationHelperImpl.java", "line_number": 168, "column_number": -1, "description": "Taking true branch", "snippet": "165.     public Page<E> fetchPageLimit(final String sqlFetchRows, final Object[] args, final int pageNo, final int pageSize,\n166.             final RowMapper rowMapper) {\n167. >         if (pageNo <= 0 || pageSize <= 0) {\n168.             throw new IllegalArgumentException(\"pageNo and pageSize must be greater than zero\");\n169.         }\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/EmbeddedPaginationHelperImpl.java", "line_number": 168, "column_number": -1, "description": "Taking false branch", "snippet": "165.     public Page<E> fetchPageLimit(final String sqlFetchRows, final Object[] args, final int pageNo, final int pageSize,\n166.             final RowMapper rowMapper) {\n167. >         if (pageNo <= 0 || pageSize <= 0) {\n168.             throw new IllegalArgumentException(\"pageNo and pageSize must be greater than zero\");\n169.         }\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/EmbeddedPaginationHelperImpl.java", "line_number": 172, "column_number": -1, "description": "Skipping Page(): empty list of specs", "snippet": "169.         }\n170.         // Create Page object\n171. >         final Page<E> page = new Page<>();\n172.         \n173.         List<E> result = databaseOperate.queryMany(sqlFetchRows, args, rowMapper);\n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 29, "column_number": -1, "description": "Definition of Page()", "snippet": "26.  * @date 2010-5-6\n27.  */\n28. > public class Page<E> implements Serializable {\n29. \n30.     static final long serialVersionUID = 1234544030560484292L;\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/EmbeddedPaginationHelperImpl.java", "line_number": 174, "column_number": -1, "description": "Skipping queryMany(...): unknown method", "snippet": "171.         final Page<E> page = new Page<>();\n172.         \n173. >         List<E> result = databaseOperate.queryMany(sqlFetchRows, args, rowMapper);\n174.         for (E item : result) {\n175.             page.getPageItems().add(item);\n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/operate/DatabaseOperate.java", "line_number": -1, "column_number": -1, "description": "Definition of queryMany(...)", "snippet": ""}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/EmbeddedPaginationHelperImpl.java", "line_number": 175, "column_number": -1, "description": "Taking true branch", "snippet": "172.         \n173.         List<E> result = databaseOperate.queryMany(sqlFetchRows, args, rowMapper);\n174. >         for (E item : result) {\n175.             page.getPageItems().add(item);\n176.         }\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/EmbeddedPaginationHelperImpl.java", "line_number": 176, "column_number": -1, "description": "", "snippet": "173.         List<E> result = databaseOperate.queryMany(sqlFetchRows, args, rowMapper);\n174.         for (E item : result) {\n175. >             page.getPageItems().add(item);\n176.         }\n177.         return page;\n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 81, "column_number": -1, "description": "start of procedure getPageItems()", "snippet": "78.     }\n79.     \n80. >     public List<E> getPageItems() {\n81.         return pageItems;\n82.     }\n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 82, "column_number": -1, "description": "return from a call to List Page.getPageItems()", "snippet": "79.     \n80.     public List<E> getPageItems() {\n81. >         return pageItems;\n82.     }\n83. }\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/EmbeddedPaginationHelperImpl.java", "line_number": 176, "column_number": -1, "description": "", "snippet": "173.         List<E> result = databaseOperate.queryMany(sqlFetchRows, args, rowMapper);\n174.         for (E item : result) {\n175. >             page.getPageItems().add(item);\n176.         }\n177.         return page;\n"}]}, {"url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/core/src/main/java/com/alibaba/nacos/core/persistence/DerbySnapshotOperation.java", "rawCode": "/*\n * Copyright 1999-2023 Alibaba Group Holding Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.alibaba.nacos.core.persistence;\n\nimport com.alibaba.nacos.common.notify.NotifyCenter;\nimport com.alibaba.nacos.consistency.snapshot.LocalFileMeta;\nimport com.alibaba.nacos.consistency.snapshot.Reader;\nimport com.alibaba.nacos.consistency.snapshot.SnapshotOperation;\nimport com.alibaba.nacos.consistency.snapshot.Writer;\nimport com.alibaba.nacos.persistence.constants.PersistenceConstant;\nimport com.alibaba.nacos.persistence.datasource.DataSourceService;\nimport com.alibaba.nacos.persistence.datasource.DynamicDataSource;\nimport com.alibaba.nacos.persistence.datasource.LocalDataSourceServiceImpl;\nimport com.alibaba.nacos.persistence.model.event.DerbyLoadEvent;\nimport com.alibaba.nacos.persistence.utils.PersistenceExecutor;\nimport com.alibaba.nacos.sys.env.EnvUtil;\nimport com.alibaba.nacos.sys.utils.DiskUtils;\nimport com.alibaba.nacos.sys.utils.TimerContext;\nimport com.alipay.sofa.jraft.util.CRC64;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport javax.sql.DataSource;\nimport java.io.File;\nimport java.nio.file.Paths;\nimport java.sql.CallableStatement;\nimport java.sql.Connection;\nimport java.util.Objects;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantReadWriteLock;\nimport java.util.function.BiConsumer;\nimport java.util.zip.Checksum;\n\n/**\n * Derby Snapshot operation.\n * TODO depend on jraft strongly, Waiting for addition split.\n *\n * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n */\npublic class DerbySnapshotOperation implements SnapshotOperation {\n    \n    private static final Logger LOGGER = LoggerFactory.getLogger(DerbySnapshotOperation.class);\n    \n    private static final String DERBY_SNAPSHOT_SAVE = DerbySnapshotOperation.class.getSimpleName() + \".SAVE\";\n    \n    private static final String DERBY_SNAPSHOT_LOAD = DerbySnapshotOperation.class.getSimpleName() + \".LOAD\";\n    \n    private final String backupSql = \"CALL SYSCS_UTIL.SYSCS_BACKUP_DATABASE(?)\";\n    \n    private final String snapshotDir = \"derby_data\";\n    \n    private final String snapshotArchive = \"derby_data.zip\";\n    \n    private final String derbyBaseDir = Paths.get(EnvUtil.getNacosHome(), \"data\", PersistenceConstant.DERBY_BASE_DIR)\n            .toString();\n    \n    private final String restoreDB = \"jdbc:derby:\" + derbyBaseDir;\n    \n    private final String checkSumKey = \"checkSum\";\n    \n    private final ReentrantReadWriteLock.WriteLock writeLock;\n    \n    public DerbySnapshotOperation(ReentrantReadWriteLock.WriteLock writeLock) {\n        this.writeLock = writeLock;\n    }\n    \n    @Override\n    public void onSnapshotSave(Writer writer, BiConsumer<Boolean, Throwable> callFinally) {\n        PersistenceExecutor.executeSnapshot(() -> {\n            TimerContext.start(DERBY_SNAPSHOT_SAVE);\n            \n            final Lock lock = writeLock;\n            lock.lock();\n            try {\n                final String writePath = writer.getPath();\n                final String parentPath = Paths.get(writePath, snapshotDir).toString();\n                DiskUtils.deleteDirectory(parentPath);\n                DiskUtils.forceMkdir(parentPath);\n                \n                doDerbyBackup(parentPath);\n                \n                final String outputFile = Paths.get(writePath, snapshotArchive).toString();\n                final Checksum checksum = new CRC64();\n                DiskUtils.compress(writePath, snapshotDir, outputFile, checksum);\n                DiskUtils.deleteDirectory(parentPath);\n                \n                final LocalFileMeta meta = new LocalFileMeta();\n                meta.append(checkSumKey, Long.toHexString(checksum.getValue()));\n                \n                callFinally.accept(writer.addFile(snapshotArchive, meta), null);\n            } catch (Throwable t) {\n                LOGGER.error(\"Fail to compress snapshot, path={}, file list={}, {}.\", writer.getPath(),\n                        writer.listFiles(), t);\n                callFinally.accept(false, t);\n            } finally {\n                lock.unlock();\n                TimerContext.end(DERBY_SNAPSHOT_SAVE, LOGGER);\n            }\n        });\n    }\n    \n    @Override\n    public boolean onSnapshotLoad(Reader reader) {\n        final String readerPath = reader.getPath();\n        final String sourceFile = Paths.get(readerPath, snapshotArchive).toString();\n        TimerContext.start(DERBY_SNAPSHOT_LOAD);\n        final Lock lock = writeLock;\n        lock.lock();\n        try {\n            final Checksum checksum = new CRC64();\n            DiskUtils.decompress(sourceFile, readerPath, checksum);\n            \n            LocalFileMeta fileMeta = reader.getFileMeta(snapshotArchive);\n            \n            if (fileMeta.getFileMeta().containsKey(checkSumKey)) {\n                if (!Objects.equals(Long.toHexString(checksum.getValue()), fileMeta.get(checkSumKey))) {\n                    throw new IllegalArgumentException(\"Snapshot checksum failed\");\n                }\n            }\n            \n            final String loadPath = Paths.get(readerPath, snapshotDir, PersistenceConstant.DERBY_BASE_DIR).toString();\n            LOGGER.info(\"snapshot load from : {}, and copy to : {}\", loadPath, derbyBaseDir);\n            \n            doDerbyRestoreFromBackup(() -> {\n                final File srcDir = new File(loadPath);\n                final File destDir = new File(derbyBaseDir);\n                \n                DiskUtils.copyDirectory(srcDir, destDir);\n                LOGGER.info(\"Complete database recovery\");\n                return null;\n            });\n            DiskUtils.deleteDirectory(loadPath);\n            NotifyCenter.publishEvent(DerbyLoadEvent.INSTANCE);\n            return true;\n        } catch (final Throwable t) {\n            LOGGER.error(\"Fail to load snapshot, path={}, file list={}, {}.\", readerPath, reader.listFiles(), t);\n            return false;\n        } finally {\n            lock.unlock();\n            TimerContext.end(DERBY_SNAPSHOT_LOAD, LOGGER);\n        }\n    }\n    \n    private void doDerbyBackup(String backupDirectory) throws Exception {\n        DataSourceService sourceService = DynamicDataSource.getInstance().getDataSource();\n        DataSource dataSource = sourceService.getJdbcTemplate().getDataSource();\n        try (Connection holder = Objects.requireNonNull(dataSource, \"dataSource\").getConnection()) {\n            CallableStatement cs = holder.prepareCall(backupSql);\n            cs.setString(1, backupDirectory);\n            cs.execute();\n        }\n    }\n    \n    private void doDerbyRestoreFromBackup(Callable<Void> callable) throws Exception {\n        DataSourceService sourceService = DynamicDataSource.getInstance().getDataSource();\n        LocalDataSourceServiceImpl localDataSourceService = (LocalDataSourceServiceImpl) sourceService;\n        localDataSourceService.restoreDerby(restoreDB, callable);\n    }\n    \n}\n", "methodName": "com.alibaba.nacos.core.persistence.DerbySnapshotOperation.doDerbyBackup(java.lang.String):void", "exampleID": 20, "dataset": "infer", "filepath": "core/src/main/java/com/alibaba/nacos/core/persistence/DerbySnapshotOperation.java", "line": 161, "sink": "sourceService.getJdbcTemplate()", "source": "sourceService.getJdbcTemplate()", "sourceLine": 161, "qualifier": "$$sourceService.getJdbcTemplate()/$ could return null, and is @@dereferenced/@", "steps": [{"line": 194, "source": "sourceService.getJdbcTemplate()", "filepath": "persistence/src/main/java/com/alibaba/nacos/persistence/datasource/ExternalDataSourceServiceImpl.java", "methodName": "ExternalDataSourceServiceImpl.getJdbcTemplate", "exampleID": 21}], "line_number": 161, "records": [{"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/datasource/ExternalDataSourceServiceImpl.java", "line_number": 194, "column_number": -1, "description": "start of procedure getJdbcTemplate()", "snippet": "    public JdbcTemplate getJdbcTemplate() {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/persistence/src/main/java/com/alibaba/nacos/persistence/datasource/ExternalDataSourceServiceImpl.java", "methodName": "getJdbcTemplate"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/datasource/ExternalDataSourceServiceImpl.java", "line_number": 195, "column_number": -1, "description": "return from a call to JdbcTemplate ExternalDataSourceServiceImpl.getJdbcTemplate()", "snippet": "        return this.jt;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/persistence/src/main/java/com/alibaba/nacos/persistence/datasource/ExternalDataSourceServiceImpl.java", "methodName": "getJdbcTemplate"}], "combined_records": [{"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/datasource/ExternalDataSourceServiceImpl.java", "line_number": 195, "column_number": -1, "description": "start of procedure getJdbcTemplate()", "snippet": "191.    @Override\n192.    public JdbcTemplate getJdbcTemplate() {\n193.>         return this.jt;\n194.    }\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/persistence/src/main/java/com/alibaba/nacos/persistence/datasource/ExternalDataSourceServiceImpl.java", "methodName": "getJdbcTemplate", "line_numbers": [194, 195]}], "infer_explore": [{"level": 0, "filename": "core/src/main/java/com/alibaba/nacos/core/persistence/DerbySnapshotOperation.java", "line_number": 159, "column_number": -1, "description": "start of procedure doDerbyBackup(...)", "snippet": "156.     }\n157.     \n158. >     private void doDerbyBackup(String backupDirectory) throws Exception {\n159.         DataSourceService sourceService = DynamicDataSource.getInstance().getDataSource();\n160.         DataSource dataSource = sourceService.getJdbcTemplate().getDataSource();\n"}, {"level": 0, "filename": "core/src/main/java/com/alibaba/nacos/core/persistence/DerbySnapshotOperation.java", "line_number": 160, "column_number": -1, "description": "", "snippet": "157.     \n158.     private void doDerbyBackup(String backupDirectory) throws Exception {\n159. >         DataSourceService sourceService = DynamicDataSource.getInstance().getDataSource();\n160.         DataSource dataSource = sourceService.getJdbcTemplate().getDataSource();\n161.         try (Connection holder = Objects.requireNonNull(dataSource, \"dataSource\").getConnection()) {\n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/datasource/DynamicDataSource.java", "line_number": 36, "column_number": -1, "description": "start of procedure getInstance()", "snippet": "33.     private DynamicDataSource() {}\n34. \n35. >     public static DynamicDataSource getInstance() {\n36.         return INSTANCE;\n37.     }\n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/datasource/DynamicDataSource.java", "line_number": 37, "column_number": -1, "description": "return from a call to DynamicDataSource DynamicDataSource.getInstance()", "snippet": "34. \n35.     public static DynamicDataSource getInstance() {\n36. >         return INSTANCE;\n37.     }\n38.     \n"}, {"level": 0, "filename": "core/src/main/java/com/alibaba/nacos/core/persistence/DerbySnapshotOperation.java", "line_number": 160, "column_number": -1, "description": "", "snippet": "157.     \n158.     private void doDerbyBackup(String backupDirectory) throws Exception {\n159. >         DataSourceService sourceService = DynamicDataSource.getInstance().getDataSource();\n160.         DataSource dataSource = sourceService.getJdbcTemplate().getDataSource();\n161.         try (Connection holder = Objects.requireNonNull(dataSource, \"dataSource\").getConnection()) {\n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/datasource/DynamicDataSource.java", "line_number": 40, "column_number": -1, "description": "start of procedure getDataSource()", "snippet": "37.     }\n38.     \n39. >     public synchronized DataSourceService getDataSource() {\n40.         try {\n41.             \n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/datasource/DynamicDataSource.java", "line_number": 46, "column_number": -1, "description": "", "snippet": "43.             // In cluster mode, external databases are used by default\n44.             \n45. >             if (DatasourceConfiguration.isEmbeddedStorage()) {\n46.                 if (localDataSourceService == null) {\n47.                     localDataSourceService = new LocalDataSourceServiceImpl();\n"}, {"level": 2, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/configuration/DatasourceConfiguration.java", "line_number": 50, "column_number": -1, "description": "start of procedure isEmbeddedStorage()", "snippet": "47.     }\n48.     \n49. >     public static boolean isEmbeddedStorage() {\n50.         return embeddedStorage;\n51.     }\n"}, {"level": 2, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/configuration/DatasourceConfiguration.java", "line_number": 51, "column_number": -1, "description": "return from a call to boolean DatasourceConfiguration.isEmbeddedStorage()", "snippet": "48.     \n49.     public static boolean isEmbeddedStorage() {\n50. >         return embeddedStorage;\n51.     }\n52.     \n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/datasource/DynamicDataSource.java", "line_number": 46, "column_number": -1, "description": "Taking false branch", "snippet": "43.             // In cluster mode, external databases are used by default\n44.             \n45. >             if (DatasourceConfiguration.isEmbeddedStorage()) {\n46.                 if (localDataSourceService == null) {\n47.                     localDataSourceService = new LocalDataSourceServiceImpl();\n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/datasource/DynamicDataSource.java", "line_number": 53, "column_number": -1, "description": "Taking true branch", "snippet": "50.                 return localDataSourceService;\n51.             } else {\n52. >                 if (basicDataSourceService == null) {\n53.                     basicDataSourceService = new ExternalDataSourceServiceImpl();\n54.                     basicDataSourceService.init();\n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/datasource/DynamicDataSource.java", "line_number": 54, "column_number": -1, "description": "Skipping ExternalDataSourceServiceImpl(): empty list of specs", "snippet": "51.             } else {\n52.                 if (basicDataSourceService == null) {\n53. >                     basicDataSourceService = new ExternalDataSourceServiceImpl();\n54.                     basicDataSourceService.init();\n55.                 }\n"}, {"level": 2, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/datasource/ExternalDataSourceServiceImpl.java", "line_number": 48, "column_number": -1, "description": "Definition of ExternalDataSourceServiceImpl()", "snippet": "45.  * @author Nacos\n46.  */\n47. > public class ExternalDataSourceServiceImpl implements DataSourceService {\n48.     \n49.     private static final Logger LOGGER = LoggerFactory.getLogger(ExternalDataSourceServiceImpl.class);\n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/datasource/DynamicDataSource.java", "line_number": 54, "column_number": -1, "description": "", "snippet": "51.             } else {\n52.                 if (basicDataSourceService == null) {\n53. >                     basicDataSourceService = new ExternalDataSourceServiceImpl();\n54.                     basicDataSourceService.init();\n55.                 }\n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/datasource/DynamicDataSource.java", "line_number": 55, "column_number": -1, "description": "Skipping init(): empty list of specs", "snippet": "52.                 if (basicDataSourceService == null) {\n53.                     basicDataSourceService = new ExternalDataSourceServiceImpl();\n54. >                     basicDataSourceService.init();\n55.                 }\n56.                 return basicDataSourceService;\n"}, {"level": 2, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/datasource/ExternalDataSourceServiceImpl.java", "line_number": 86, "column_number": -1, "description": "Definition of init()", "snippet": "83.     \n84.     @Override\n85. >     public void init() {\n86.         queryTimeout = ConvertUtils.toInt(System.getProperty(\"QUERYTIMEOUT\"), 3);\n87.         jt = new JdbcTemplate();\n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/datasource/DynamicDataSource.java", "line_number": 57, "column_number": -1, "description": "", "snippet": "54.                     basicDataSourceService.init();\n55.                 }\n56. >                 return basicDataSourceService;\n57.             }\n58.         } catch (Exception e) {\n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/datasource/DynamicDataSource.java", "line_number": 60, "column_number": -1, "description": "return from a call to DataSourceService DynamicDataSource.getDataSource()", "snippet": "57.             }\n58.         } catch (Exception e) {\n59. >             throw new RuntimeException(e);\n60.         }\n61.     }\n"}, {"level": 0, "filename": "core/src/main/java/com/alibaba/nacos/core/persistence/DerbySnapshotOperation.java", "line_number": 161, "column_number": -1, "description": "", "snippet": "158.     private void doDerbyBackup(String backupDirectory) throws Exception {\n159.         DataSourceService sourceService = DynamicDataSource.getInstance().getDataSource();\n160. >         DataSource dataSource = sourceService.getJdbcTemplate().getDataSource();\n161.         try (Connection holder = Objects.requireNonNull(dataSource, \"dataSource\").getConnection()) {\n162.             CallableStatement cs = holder.prepareCall(backupSql);\n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/datasource/ExternalDataSourceServiceImpl.java", "line_number": 194, "column_number": -1, "description": "start of procedure getJdbcTemplate()", "snippet": "191.     \n192.     @Override\n193. >     public JdbcTemplate getJdbcTemplate() {\n194.         return this.jt;\n195.     }\n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/datasource/ExternalDataSourceServiceImpl.java", "line_number": 195, "column_number": -1, "description": "return from a call to JdbcTemplate ExternalDataSourceServiceImpl.getJdbcTemplate()", "snippet": "192.     @Override\n193.     public JdbcTemplate getJdbcTemplate() {\n194. >         return this.jt;\n195.     }\n196.     \n"}, {"level": 0, "filename": "core/src/main/java/com/alibaba/nacos/core/persistence/DerbySnapshotOperation.java", "line_number": 161, "column_number": -1, "description": "", "snippet": "158.     private void doDerbyBackup(String backupDirectory) throws Exception {\n159.         DataSourceService sourceService = DynamicDataSource.getInstance().getDataSource();\n160. >         DataSource dataSource = sourceService.getJdbcTemplate().getDataSource();\n161.         try (Connection holder = Objects.requireNonNull(dataSource, \"dataSource\").getConnection()) {\n162.             CallableStatement cs = holder.prepareCall(backupSql);\n"}]}, {"url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/service/merge/MergeDatumService.java", "rawCode": "/*\n * Copyright 1999-2018 Alibaba Group Holding Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.alibaba.nacos.config.server.service.merge;\n\nimport com.alibaba.nacos.config.server.manager.TaskManager;\nimport com.alibaba.nacos.config.server.model.ConfigInfo;\nimport com.alibaba.nacos.config.server.model.ConfigInfoAggr;\nimport com.alibaba.nacos.config.server.model.ConfigInfoChanged;\nimport com.alibaba.nacos.persistence.configuration.DatasourceConfiguration;\nimport com.alibaba.nacos.persistence.constants.PersistenceConstant;\nimport com.alibaba.nacos.persistence.model.Page;\nimport com.alibaba.nacos.config.server.service.repository.ConfigInfoAggrPersistService;\nimport com.alibaba.nacos.config.server.service.repository.ConfigInfoPersistService;\nimport com.alibaba.nacos.config.server.service.repository.ConfigInfoTagPersistService;\nimport com.alibaba.nacos.config.server.utils.ContentUtils;\nimport com.alibaba.nacos.config.server.utils.TimeUtils;\nimport com.alibaba.nacos.core.distributed.ProtocolManager;\nimport com.alibaba.nacos.sys.env.EnvUtil;\nimport com.alibaba.nacos.sys.utils.ApplicationUtils;\nimport com.alibaba.nacos.sys.utils.InetUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.sql.Timestamp;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.atomic.AtomicInteger;\n\n/**\n * Data aggregation service.\n *\n * <p>Full aggregation at startup and single aggregation triggered by data modification.\n *\n * @author jiuRen\n */\n@Service\npublic class MergeDatumService {\n    \n    private static final Logger LOGGER = LoggerFactory.getLogger(MergeDatumService.class);\n    \n    final TaskManager mergeTasks;\n    \n    static final int INIT_THREAD_COUNT = 40;\n    \n    static final AtomicInteger FINISHED = new AtomicInteger();\n    \n    static int total = 0;\n    \n    private ConfigInfoPersistService configInfoPersistService;\n    \n    private ConfigInfoAggrPersistService configInfoAggrPersistService;\n    \n    @Autowired\n    public MergeDatumService(ConfigInfoPersistService configInfoPersistService,\n            ConfigInfoAggrPersistService configInfoAggrPersistService,\n            ConfigInfoTagPersistService configInfoTagPersistService) {\n        this.configInfoPersistService = configInfoPersistService;\n        this.configInfoAggrPersistService = configInfoAggrPersistService;\n        mergeTasks = new TaskManager(\"com.alibaba.nacos.MergeDatum\");\n        mergeTasks.setDefaultTaskProcessor(\n                new MergeTaskProcessor(configInfoPersistService, configInfoAggrPersistService,\n                        configInfoTagPersistService, this));\n    }\n    \n    static List<List<ConfigInfoChanged>> splitList(List<ConfigInfoChanged> list, int count) {\n        List<List<ConfigInfoChanged>> result = new ArrayList<>(count);\n        for (int i = 0; i < count; i++) {\n            result.add(new ArrayList<ConfigInfoChanged>());\n        }\n        for (int i = 0; i < list.size(); i++) {\n            ConfigInfoChanged config = list.get(i);\n            result.get(i % count).add(config);\n        }\n        return result;\n    }\n    \n    /**\n     * Called after data changes to add aggregation tasks.\n     */\n    public void addMergeTask(String dataId, String groupId, String tenant, String tag, String clientIp) {\n        if (!canExecute()) {\n            return;\n        }\n        MergeDataTask task = new MergeDataTask(dataId, groupId, tenant, tag, clientIp);\n        mergeTasks.addTask(task.getId(), task);\n    }\n    \n    /**\n     * Called after data changes to add aggregation tasks.\n     */\n    public void addMergeTask(String dataId, String groupId, String tenant, String clientIp) {\n        if (!canExecute()) {\n            return;\n        }\n        MergeDataTask task = new MergeDataTask(dataId, groupId, tenant, clientIp);\n        mergeTasks.addTask(task.getId(), task);\n    }\n    \n    /**\n     * Merge all.\n     */\n    public void mergeAll() {\n        if (!canExecute()) {\n            return;\n        }\n        for (ConfigInfoChanged item : configInfoAggrPersistService.findAllAggrGroup()) {\n            addMergeTask(item.getDataId(), item.getGroup(), item.getTenant(), InetUtils.getSelfIP());\n        }\n    }\n    \n    private boolean canExecute() {\n        if (!DatasourceConfiguration.isEmbeddedStorage()) {\n            return true;\n        }\n        if (EnvUtil.getStandaloneMode()) {\n            return true;\n        }\n        ProtocolManager protocolManager = ApplicationUtils.getBean(ProtocolManager.class);\n        return protocolManager.getCpProtocol().isLeader(PersistenceConstant.CONFIG_MODEL_RAFT_GROUP);\n    }\n    \n    class MergeAllDataWorker extends Thread {\n        \n        static final int PAGE_SIZE = 10000;\n        \n        private List<ConfigInfoChanged> configInfoList;\n        \n        public MergeAllDataWorker(List<ConfigInfoChanged> configInfoList) {\n            super(\"MergeAllDataWorker\");\n            this.configInfoList = configInfoList;\n        }\n        \n        @Override\n        public void run() {\n            for (ConfigInfoChanged configInfo : configInfoList) {\n                String dataId = configInfo.getDataId();\n                String group = configInfo.getGroup();\n                String tenant = configInfo.getTenant();\n                try {\n                    List<ConfigInfoAggr> datumList = new ArrayList<>();\n                    int rowCount = configInfoAggrPersistService.aggrConfigInfoCount(dataId, group, tenant);\n                    int pageCount = (int) Math.ceil(rowCount * 1.0 / PAGE_SIZE);\n                    for (int pageNo = 1; pageNo <= pageCount; pageNo++) {\n                        Page<ConfigInfoAggr> page = configInfoAggrPersistService\n                                .findConfigInfoAggrByPage(dataId, group, tenant, pageNo, PAGE_SIZE);\n                        if (page != null) {\n                            datumList.addAll(page.getPageItems());\n                            LOGGER.info(\"[merge-query] {}, {}, size/total={}/{}\", dataId, group, datumList.size(),\n                                    rowCount);\n                        }\n                    }\n                    \n                    final Timestamp time = TimeUtils.getCurrentTime();\n                    \n                    if (datumList.size() > 0) {\n                        // merge\n                        ConfigInfo cf = MergeTaskProcessor.merge(dataId, group, tenant, datumList);\n                        configInfoPersistService.insertOrUpdate(null, null, cf, null);\n                        LOGGER.info(\"[merge-ok] {}, {}, size={}, length={}, md5={}, content={}\", dataId, group,\n                                datumList.size(), cf.getContent().length(), cf.getMd5(),\n                                ContentUtils.truncateContent(cf.getContent()));\n                    } else {\n                        // remove\n                        configInfoPersistService.removeConfigInfo(dataId, group, tenant, InetUtils.getSelfIP(), null);\n                        LOGGER.warn(\"[merge-delete] delete config info because no datum. dataId=\" + dataId + \", groupId=\"\n                                + group);\n                    }\n                    \n                } catch (Exception e) {\n                    LOGGER.info(\"[merge-error] \" + dataId + \", \" + group + \", \" + e.toString(), e);\n                }\n                FINISHED.incrementAndGet();\n                if (FINISHED.get() % 100 == 0) {\n                    LOGGER.info(\"[all-merge-dump] {} / {}\", FINISHED.get(), total);\n                }\n            }\n            LOGGER.info(\"[all-merge-dump] {} / {}\", FINISHED.get(), total);\n        }\n    }\n}\n", "methodName": "com.alibaba.nacos.config.server.service.merge.MergeDatumService$MergeAllDataWorker.run():void", "exampleID": 22, "dataset": "infer", "filepath": "config/src/main/java/com/alibaba/nacos/config/server/service/merge/MergeDatumService.java", "line": 176, "sink": "cf.getContent()", "source": "cf.getContent()", "sourceLine": 176, "qualifier": "$$cf.getContent()/$ could return null, and is @@dereferenced/@", "steps": [{"line": 87, "source": "cf.getContent()", "filepath": "config/src/main/java/com/alibaba/nacos/config/server/model/ConfigInfoBase.java", "methodName": "ConfigInfoBase.getContent", "exampleID": 23}], "line_number": 176, "records": [{"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/model/ConfigInfoBase.java", "line_number": 87, "column_number": -1, "description": "start of procedure getContent()", "snippet": "    public String getContent() {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/model/ConfigInfoBase.java", "methodName": "getContent"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/model/ConfigInfoBase.java", "line_number": 88, "column_number": -1, "description": "return from a call to String ConfigInfoBase.getContent()", "snippet": "        return content;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/model/ConfigInfoBase.java", "methodName": "getContent"}], "combined_records": [{"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/model/ConfigInfoBase.java", "line_number": 88, "column_number": -1, "description": "start of procedure getContent()", "snippet": "84.    \n85.    public String getContent() {\n86.>         return content;\n87.    }\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/model/ConfigInfoBase.java", "methodName": "getContent", "line_numbers": [87, 88]}], "infer_explore": [{"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/merge/MergeDatumService.java", "line_number": 150, "column_number": -1, "description": "start of procedure run()", "snippet": "147.         \n148.         @Override\n149. >         public void run() {\n150.             for (ConfigInfoChanged configInfo : configInfoList) {\n151.                 String dataId = configInfo.getDataId();\n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/merge/MergeDatumService.java", "line_number": 151, "column_number": -1, "description": "Taking true branch", "snippet": "148.         @Override\n149.         public void run() {\n150. >             for (ConfigInfoChanged configInfo : configInfoList) {\n151.                 String dataId = configInfo.getDataId();\n152.                 String group = configInfo.getGroup();\n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/merge/MergeDatumService.java", "line_number": 152, "column_number": -1, "description": "", "snippet": "149.         public void run() {\n150.             for (ConfigInfoChanged configInfo : configInfoList) {\n151. >                 String dataId = configInfo.getDataId();\n152.                 String group = configInfo.getGroup();\n153.                 String tenant = configInfo.getTenant();\n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/model/ConfigInfoChanged.java", "line_number": 46, "column_number": -1, "description": "start of procedure getDataId()", "snippet": "43.     }\n44.     \n45. >     public String getDataId() {\n46.         return dataId;\n47.     }\n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/model/ConfigInfoChanged.java", "line_number": 47, "column_number": -1, "description": "return from a call to String ConfigInfoChanged.getDataId()", "snippet": "44.     \n45.     public String getDataId() {\n46. >         return dataId;\n47.     }\n48.     \n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/merge/MergeDatumService.java", "line_number": 153, "column_number": -1, "description": "", "snippet": "150.             for (ConfigInfoChanged configInfo : configInfoList) {\n151.                 String dataId = configInfo.getDataId();\n152. >                 String group = configInfo.getGroup();\n153.                 String tenant = configInfo.getTenant();\n154.                 try {\n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/model/ConfigInfoChanged.java", "line_number": 54, "column_number": -1, "description": "start of procedure getGroup()", "snippet": "51.     }\n52.     \n53. >     public String getGroup() {\n54.         return group;\n55.     }\n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/model/ConfigInfoChanged.java", "line_number": 55, "column_number": -1, "description": "return from a call to String ConfigInfoChanged.getGroup()", "snippet": "52.     \n53.     public String getGroup() {\n54. >         return group;\n55.     }\n56.     \n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/merge/MergeDatumService.java", "line_number": 154, "column_number": -1, "description": "", "snippet": "151.                 String dataId = configInfo.getDataId();\n152.                 String group = configInfo.getGroup();\n153. >                 String tenant = configInfo.getTenant();\n154.                 try {\n155.                     List<ConfigInfoAggr> datumList = new ArrayList<>();\n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/model/ConfigInfoChanged.java", "line_number": 105, "column_number": -1, "description": "start of procedure getTenant()", "snippet": "102.     }\n103.     \n104. >     public String getTenant() {\n105.         return tenant;\n106.     }\n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/model/ConfigInfoChanged.java", "line_number": 106, "column_number": -1, "description": "return from a call to String ConfigInfoChanged.getTenant()", "snippet": "103.     \n104.     public String getTenant() {\n105. >         return tenant;\n106.     }\n107.     \n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/merge/MergeDatumService.java", "line_number": 156, "column_number": -1, "description": "", "snippet": "153.                 String tenant = configInfo.getTenant();\n154.                 try {\n155. >                     List<ConfigInfoAggr> datumList = new ArrayList<>();\n156.                     int rowCount = configInfoAggrPersistService.aggrConfigInfoCount(dataId, group, tenant);\n157.                     int pageCount = (int) Math.ceil(rowCount * 1.0 / PAGE_SIZE);\n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/merge/MergeDatumService.java", "line_number": 157, "column_number": -1, "description": "Skipping aggrConfigInfoCount(...): unknown method", "snippet": "154.                 try {\n155.                     List<ConfigInfoAggr> datumList = new ArrayList<>();\n156. >                     int rowCount = configInfoAggrPersistService.aggrConfigInfoCount(dataId, group, tenant);\n157.                     int pageCount = (int) Math.ceil(rowCount * 1.0 / PAGE_SIZE);\n158.                     for (int pageNo = 1; pageNo <= pageCount; pageNo++) {\n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/ConfigInfoAggrPersistService.java", "line_number": -1, "column_number": -1, "description": "Definition of aggrConfigInfoCount(...)", "snippet": ""}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/merge/MergeDatumService.java", "line_number": 158, "column_number": -1, "description": "", "snippet": "155.                     List<ConfigInfoAggr> datumList = new ArrayList<>();\n156.                     int rowCount = configInfoAggrPersistService.aggrConfigInfoCount(dataId, group, tenant);\n157. >                     int pageCount = (int) Math.ceil(rowCount * 1.0 / PAGE_SIZE);\n158.                     for (int pageNo = 1; pageNo <= pageCount; pageNo++) {\n159.                         Page<ConfigInfoAggr> page = configInfoAggrPersistService\n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/merge/MergeDatumService.java", "line_number": 159, "column_number": -1, "description": "Taking false branch", "snippet": "156.                     int rowCount = configInfoAggrPersistService.aggrConfigInfoCount(dataId, group, tenant);\n157.                     int pageCount = (int) Math.ceil(rowCount * 1.0 / PAGE_SIZE);\n158. >                     for (int pageNo = 1; pageNo <= pageCount; pageNo++) {\n159.                         Page<ConfigInfoAggr> page = configInfoAggrPersistService\n160.                                 .findConfigInfoAggrByPage(dataId, group, tenant, pageNo, PAGE_SIZE);\n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/merge/MergeDatumService.java", "line_number": 169, "column_number": -1, "description": "", "snippet": "166.                     }\n167.                     \n168. >                     final Timestamp time = TimeUtils.getCurrentTime();\n169.                     \n170.                     if (datumList.size() > 0) {\n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/TimeUtils.java", "line_number": 33, "column_number": -1, "description": "start of procedure getCurrentTime()", "snippet": "30.     private static final String YYYYMMMDDHHMMSS = \"yyyy-MM-dd HH:mm:ss\";\n31.     \n32. >     public static Timestamp getCurrentTime() {\n33.         return new Timestamp(System.currentTimeMillis());\n34.     }\n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/TimeUtils.java", "line_number": 34, "column_number": -1, "description": "return from a call to Timestamp TimeUtils.getCurrentTime()", "snippet": "31.     \n32.     public static Timestamp getCurrentTime() {\n33. >         return new Timestamp(System.currentTimeMillis());\n34.     }\n35.     \n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/merge/MergeDatumService.java", "line_number": 171, "column_number": -1, "description": "Taking true branch", "snippet": "168.                     final Timestamp time = TimeUtils.getCurrentTime();\n169.                     \n170. >                     if (datumList.size() > 0) {\n171.                         // merge\n172.                         ConfigInfo cf = MergeTaskProcessor.merge(dataId, group, tenant, datumList);\n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/merge/MergeDatumService.java", "line_number": 173, "column_number": -1, "description": "", "snippet": "170.                     if (datumList.size() > 0) {\n171.                         // merge\n172. >                         ConfigInfo cf = MergeTaskProcessor.merge(dataId, group, tenant, datumList);\n173.                         configInfoPersistService.insertOrUpdate(null, null, cf, null);\n174.                         LOGGER.info(\"[merge-ok] {}, {}, size={}, length={}, md5={}, content={}\", dataId, group,\n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/merge/MergeTaskProcessor.java", "line_number": 144, "column_number": -1, "description": "start of procedure merge(...)", "snippet": "141.      * @return {@link ConfigInfo}\n142.      */\n143. >     public static ConfigInfo merge(String dataId, String group, String tenant, List<ConfigInfoAggr> datumList) {\n144.         StringBuilder sb = new StringBuilder();\n145.         String appName = null;\n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/merge/MergeTaskProcessor.java", "line_number": 145, "column_number": -1, "description": "Skipping StringBuilder(): unknown method", "snippet": "142.      */\n143.     public static ConfigInfo merge(String dataId, String group, String tenant, List<ConfigInfoAggr> datumList) {\n144. >         StringBuilder sb = new StringBuilder();\n145.         String appName = null;\n146.         for (ConfigInfoAggr aggrInfo : datumList) {\n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/merge/MergeTaskProcessor.java", "line_number": 146, "column_number": -1, "description": "", "snippet": "143.     public static ConfigInfo merge(String dataId, String group, String tenant, List<ConfigInfoAggr> datumList) {\n144.         StringBuilder sb = new StringBuilder();\n145. >         String appName = null;\n146.         for (ConfigInfoAggr aggrInfo : datumList) {\n147.             if (aggrInfo.getAppName() != null) {\n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/merge/MergeTaskProcessor.java", "line_number": 147, "column_number": -1, "description": "Taking false branch", "snippet": "144.         StringBuilder sb = new StringBuilder();\n145.         String appName = null;\n146. >         for (ConfigInfoAggr aggrInfo : datumList) {\n147.             if (aggrInfo.getAppName() != null) {\n148.                 appName = aggrInfo.getAppName();\n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/merge/MergeTaskProcessor.java", "line_number": 154, "column_number": -1, "description": "Skipping substring(...): unknown method", "snippet": "151.             sb.append(Constants.NACOS_LINE_SEPARATOR);\n152.         }\n153. >         String content = sb.substring(0, sb.lastIndexOf(Constants.NACOS_LINE_SEPARATOR));\n154.         return new ConfigInfo(dataId, group, tenant, appName, content);\n155.     }\n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/merge/MergeTaskProcessor.java", "line_number": 155, "column_number": -1, "description": "", "snippet": "152.         }\n153.         String content = sb.substring(0, sb.lastIndexOf(Constants.NACOS_LINE_SEPARATOR));\n154. >         return new ConfigInfo(dataId, group, tenant, appName, content);\n155.     }\n156. }\n"}, {"level": 2, "filename": "config/src/main/java/com/alibaba/nacos/config/server/model/ConfigInfo.java", "line_number": 48, "column_number": -1, "description": "start of procedure ConfigInfo(...)", "snippet": "45.     \n46.     public ConfigInfo(String dataId, String group, String tenant, String appName, String content) {\n47. >         super(dataId, group, content);\n48.         this.tenant = tenant;\n49.         this.appName = appName;\n"}, {"level": 3, "filename": "config/src/main/java/com/alibaba/nacos/config/server/model/ConfigInfoBase.java", "line_number": 54, "column_number": -1, "description": "start of procedure ConfigInfoBase(...)", "snippet": "51.     }\n52.     \n53. >     public ConfigInfoBase(String dataId, String group, String content) {\n54.         this.dataId = dataId;\n55.         this.group = group;\n"}, {"level": 3, "filename": "config/src/main/java/com/alibaba/nacos/config/server/model/ConfigInfoBase.java", "line_number": 55, "column_number": -1, "description": "", "snippet": "52.     \n53.     public ConfigInfoBase(String dataId, String group, String content) {\n54. >         this.dataId = dataId;\n55.         this.group = group;\n56.         this.content = content;\n"}, {"level": 3, "filename": "config/src/main/java/com/alibaba/nacos/config/server/model/ConfigInfoBase.java", "line_number": 56, "column_number": -1, "description": "", "snippet": "53.     public ConfigInfoBase(String dataId, String group, String content) {\n54.         this.dataId = dataId;\n55. >         this.group = group;\n56.         this.content = content;\n57.         if (this.content != null) {\n"}, {"level": 3, "filename": "config/src/main/java/com/alibaba/nacos/config/server/model/ConfigInfoBase.java", "line_number": 57, "column_number": -1, "description": "", "snippet": "54.         this.dataId = dataId;\n55.         this.group = group;\n56. >         this.content = content;\n57.         if (this.content != null) {\n58.             this.md5 = MD5Utils.md5Hex(this.content, Constants.ENCODE);\n"}, {"level": 3, "filename": "config/src/main/java/com/alibaba/nacos/config/server/model/ConfigInfoBase.java", "line_number": 58, "column_number": -1, "description": "Taking false branch", "snippet": "55.         this.group = group;\n56.         this.content = content;\n57. >         if (this.content != null) {\n58.             this.md5 = MD5Utils.md5Hex(this.content, Constants.ENCODE);\n59.         }\n"}, {"level": 3, "filename": "config/src/main/java/com/alibaba/nacos/config/server/model/ConfigInfoBase.java", "line_number": 61, "column_number": -1, "description": "return from a call to ConfigInfoBase.<init>(String,String,String)", "snippet": "58.             this.md5 = MD5Utils.md5Hex(this.content, Constants.ENCODE);\n59.         }\n60. >     }\n61.     \n62.     public long getId() {\n"}, {"level": 2, "filename": "config/src/main/java/com/alibaba/nacos/config/server/model/ConfigInfo.java", "line_number": 49, "column_number": -1, "description": "", "snippet": "46.     public ConfigInfo(String dataId, String group, String tenant, String appName, String content) {\n47.         super(dataId, group, content);\n48. >         this.tenant = tenant;\n49.         this.appName = appName;\n50.     }\n"}, {"level": 2, "filename": "config/src/main/java/com/alibaba/nacos/config/server/model/ConfigInfo.java", "line_number": 50, "column_number": -1, "description": "", "snippet": "47.         super(dataId, group, content);\n48.         this.tenant = tenant;\n49. >         this.appName = appName;\n50.     }\n51.     \n"}, {"level": 2, "filename": "config/src/main/java/com/alibaba/nacos/config/server/model/ConfigInfo.java", "line_number": 51, "column_number": -1, "description": "return from a call to ConfigInfo.<init>(String,String,String,String,String)", "snippet": "48.         this.tenant = tenant;\n49.         this.appName = appName;\n50. >     }\n51.     \n52.     public String getTenant() {\n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/merge/MergeTaskProcessor.java", "line_number": 155, "column_number": -1, "description": "return from a call to ConfigInfo MergeTaskProcessor.merge(String,String,String,ArrayList)", "snippet": "152.         }\n153.         String content = sb.substring(0, sb.lastIndexOf(Constants.NACOS_LINE_SEPARATOR));\n154. >         return new ConfigInfo(dataId, group, tenant, appName, content);\n155.     }\n156. }\n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/merge/MergeDatumService.java", "line_number": 174, "column_number": -1, "description": "Skipping insertOrUpdate(...): unknown method", "snippet": "171.                         // merge\n172.                         ConfigInfo cf = MergeTaskProcessor.merge(dataId, group, tenant, datumList);\n173. >                         configInfoPersistService.insertOrUpdate(null, null, cf, null);\n174.                         LOGGER.info(\"[merge-ok] {}, {}, size={}, length={}, md5={}, content={}\", dataId, group,\n175.                                 datumList.size(), cf.getContent().length(), cf.getMd5(),\n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/ConfigInfoPersistService.java", "line_number": -1, "column_number": -1, "description": "Definition of insertOrUpdate(...)", "snippet": ""}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/merge/MergeDatumService.java", "line_number": 175, "column_number": -1, "description": "", "snippet": "172.                         ConfigInfo cf = MergeTaskProcessor.merge(dataId, group, tenant, datumList);\n173.                         configInfoPersistService.insertOrUpdate(null, null, cf, null);\n174. >                         LOGGER.info(\"[merge-ok] {}, {}, size={}, length={}, md5={}, content={}\", dataId, group,\n175.                                 datumList.size(), cf.getContent().length(), cf.getMd5(),\n176.                                 ContentUtils.truncateContent(cf.getContent()));\n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/merge/MergeDatumService.java", "line_number": 176, "column_number": -1, "description": "", "snippet": "173.                         configInfoPersistService.insertOrUpdate(null, null, cf, null);\n174.                         LOGGER.info(\"[merge-ok] {}, {}, size={}, length={}, md5={}, content={}\", dataId, group,\n175. >                                 datumList.size(), cf.getContent().length(), cf.getMd5(),\n176.                                 ContentUtils.truncateContent(cf.getContent()));\n177.                     } else {\n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/model/ConfigInfoBase.java", "line_number": 87, "column_number": -1, "description": "start of procedure getContent()", "snippet": "84.     }\n85.     \n86. >     public String getContent() {\n87.         return content;\n88.     }\n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/model/ConfigInfoBase.java", "line_number": 88, "column_number": -1, "description": "return from a call to String ConfigInfoBase.getContent()", "snippet": "85.     \n86.     public String getContent() {\n87. >         return content;\n88.     }\n89.     \n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/service/merge/MergeDatumService.java", "line_number": 176, "column_number": -1, "description": "", "snippet": "173.                         configInfoPersistService.insertOrUpdate(null, null, cf, null);\n174.                         LOGGER.info(\"[merge-ok] {}, {}, size={}, length={}, md5={}, content={}\", dataId, group,\n175. >                                 datumList.size(), cf.getContent().length(), cf.getMd5(),\n176.                                 ContentUtils.truncateContent(cf.getContent()));\n177.                     } else {\n"}]}, {"url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "rawCode": "/*\n * Copyright 1999-2018 Alibaba Group Holding Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.alibaba.nacos.sys.utils;\n\nimport com.alibaba.nacos.common.utils.ByteUtils;\nimport org.apache.commons.io.FileUtils;\nimport org.apache.commons.io.IOUtils;\nimport org.apache.commons.io.output.NullOutputStream;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.BufferedInputStream;\nimport java.io.BufferedOutputStream;\nimport java.io.BufferedReader;\nimport java.io.ByteArrayOutputStream;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.nio.ByteBuffer;\nimport java.nio.CharBuffer;\nimport java.nio.channels.FileChannel;\nimport java.nio.charset.Charset;\nimport java.nio.charset.CharsetDecoder;\nimport java.nio.charset.StandardCharsets;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.util.Objects;\nimport java.util.function.Consumer;\nimport java.util.zip.CheckedInputStream;\nimport java.util.zip.CheckedOutputStream;\nimport java.util.zip.Checksum;\nimport java.util.zip.ZipEntry;\nimport java.util.zip.ZipInputStream;\nimport java.util.zip.ZipOutputStream;\n\n/**\n * IO operates on the utility class.\n *\n * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n */\npublic final class DiskUtils {\n    \n    private static final Logger LOGGER = LoggerFactory.getLogger(DiskUtils.class);\n    \n    private static final String NO_SPACE_CN = \"\u8bbe\u5907\u4e0a\u6ca1\u6709\u7a7a\u95f4\";\n    \n    private static final String NO_SPACE_EN = \"No space left on device\";\n    \n    private static final String DISK_QUOTA_CN = \"\u8d85\u51fa\u78c1\u76d8\u9650\u989d\";\n    \n    private static final String DISK_QUOTA_EN = \"Disk quota exceeded\";\n    \n    private static final Charset CHARSET = StandardCharsets.UTF_8;\n    \n    private static final CharsetDecoder DECODER = CHARSET.newDecoder();\n    \n    public static void touch(String path, String fileName) throws IOException {\n        FileUtils.touch(Paths.get(path, fileName).toFile());\n    }\n    \n    /**\n     * Implements the same behaviour as the \"touch\" utility on Unix. It creates a new file with size 0 or, if the file\n     * exists already, it is opened and closed without modifying it, but updating the file date and time.\n     *\n     * <p>NOTE: As from v1.3, this method throws an IOException if the last\n     * modified date of the file cannot be set. Also, as from v1.3 this method creates parent directories if they do not\n     * exist.\n     *\n     * @param file the File to touch\n     * @throws IOException If an I/O problem occurs\n     */\n    public static void touch(File file) throws IOException {\n        FileUtils.touch(file);\n    }\n    \n    /**\n     * Creates a new empty file in the specified directory, using the given prefix and suffix strings to generate its\n     * name. The resulting {@code Path} is associated with the same {@code FileSystem} as the given directory.\n     *\n     * <p>The details as to how the name of the file is constructed is\n     * implementation dependent and therefore not specified. Where possible the {@code prefix} and {@code suffix} are\n     * used to construct candidate names in the same manner as the {@link java.io.File#createTempFile(String, String,\n     * File)} method.\n     *\n     * @param dir    the path to directory in which to create the file\n     * @param prefix the prefix string to be used in generating the file's name; may be {@code null}\n     * @param suffix the suffix string to be used in generating the file's name; may be {@code null}, in which case\n     *               \"{@code .tmp}\" is used\n     * @return the path to the newly created file that did not exist before this method was invoked\n     * @throws IllegalArgumentException      if the prefix or suffix parameters cannot be used to generate a candidate\n     *                                       file name\n     * @throws UnsupportedOperationException if the array contains an attribute that cannot be set atomically when\n     *                                       creating the directory\n     * @throws IOException                   if an I/O error occurs or {@code dir} does not exist\n     * @throws SecurityException             In the case of the default provider, and a security manager is installed,\n     *                                       the {@link SecurityManager#checkWrite(String) checkWrite} method is invoked\n     *                                       to check write access to the file.\n     */\n    public static File createTmpFile(String dir, String prefix, String suffix) throws IOException {\n        return Files.createTempFile(Paths.get(dir), prefix, suffix).toFile();\n    }\n    \n    /**\n     * Creates an empty file in the default temporary-file directory, using the given prefix and suffix to generate its\n     * name. The resulting {@code Path} is associated with the default {@code FileSystem}.\n     *\n     * @param prefix the prefix string to be used in generating the file's name; may be {@code null}\n     * @param suffix the suffix string to be used in generating the file's name; may be {@code null}, in which case\n     *               \"{@code .tmp}\" is used\n     * @return the path to the newly created file that did not exist before this method was invoked\n     * @throws IllegalArgumentException      if the prefix or suffix parameters cannot be used to generate a candidate\n     *                                       file name\n     * @throws UnsupportedOperationException if the array contains an attribute that cannot be set atomically when\n     *                                       creating the directory\n     * @throws IOException                   if an I/O error occurs or the temporary-file directory does not exist\n     * @throws SecurityException             In the case of the default provider, and a security manager is installed,\n     *                                       the {@link SecurityManager#checkWrite(String) checkWrite} method is invoked\n     *                                       to check write access to the file.\n     */\n    public static File createTmpFile(String prefix, String suffix) throws IOException {\n        return Files.createTempFile(prefix, suffix).toFile();\n    }\n    \n    /**\n     * read file which under the path.\n     *\n     * @param path     directory\n     * @param fileName filename\n     * @return content\n     */\n    public static String readFile(String path, String fileName) {\n        File file = openFile(path, fileName);\n        if (file.exists()) {\n            return readFile(file);\n        }\n        return null;\n    }\n    \n    /**\n     * read file content by {@link InputStream}.\n     *\n     * @param is {@link InputStream}\n     * @return content\n     */\n    public static String readFile(InputStream is) {\n        try (BufferedReader reader = new BufferedReader(new InputStreamReader(is))) {\n            StringBuilder textBuilder = new StringBuilder();\n            String lineTxt = null;\n            while ((lineTxt = reader.readLine()) != null) {\n                textBuilder.append(lineTxt);\n            }\n            return textBuilder.toString();\n        } catch (IOException e) {\n            return null;\n        }\n    }\n    \n    /**\n     * read this file content.\n     *\n     * @param file {@link File}\n     * @return content\n     */\n    public static String readFile(File file) {\n        try (FileChannel fileChannel = new FileInputStream(file).getChannel()) {\n            StringBuilder text = new StringBuilder();\n            ByteBuffer buffer = ByteBuffer.allocate(4096);\n            CharBuffer charBuffer = CharBuffer.allocate(4096);\n            while (fileChannel.read(buffer) != -1) {\n                buffer.flip();\n                DECODER.decode(buffer, charBuffer, false);\n                charBuffer.flip();\n                while (charBuffer.hasRemaining()) {\n                    text.append(charBuffer.get());\n                }\n                buffer.clear();\n                charBuffer.clear();\n            }\n            return text.toString();\n        } catch (IOException e) {\n            return null;\n        }\n    }\n    \n    /**\n     * read this file content then return bytes.\n     *\n     * @param file {@link File}\n     * @return content bytes\n     */\n    public static byte[] readFileBytes(File file) {\n        if (file.exists()) {\n            String result = readFile(file);\n            if (result != null) {\n                return ByteUtils.toBytes(result);\n            }\n        }\n        return null;\n    }\n    \n    public static byte[] readFileBytes(String path, String fileName) {\n        File file = openFile(path, fileName);\n        return readFileBytes(file);\n    }\n    \n    /**\n     * Writes the contents to the target file.\n     *\n     * @param file    target file\n     * @param content content\n     * @param append  write append mode\n     * @return write success\n     */\n    public static boolean writeFile(File file, byte[] content, boolean append) {\n        try (FileChannel fileChannel = new FileOutputStream(file, append).getChannel()) {\n            ByteBuffer buffer = ByteBuffer.wrap(content);\n            fileChannel.write(buffer);\n            return true;\n        } catch (IOException ioe) {\n            if (ioe.getMessage() != null) {\n                String errMsg = ioe.getMessage();\n                if (NO_SPACE_CN.equals(errMsg) || NO_SPACE_EN.equals(errMsg) || errMsg.contains(DISK_QUOTA_CN) || errMsg\n                        .contains(DISK_QUOTA_EN)) {\n                    LOGGER.warn(\"\u78c1\u76d8\u6ee1\uff0c\u81ea\u6740\u9000\u51fa\");\n                    System.exit(0);\n                }\n            }\n        }\n        return false;\n    }\n    \n    public static void deleteQuietly(File file) {\n        Objects.requireNonNull(file, \"file\");\n        FileUtils.deleteQuietly(file);\n    }\n    \n    public static void deleteQuietly(Path path) {\n        Objects.requireNonNull(path, \"path\");\n        FileUtils.deleteQuietly(path.toFile());\n    }\n    \n    /**\n     * delete target file.\n     *\n     * @param path     directory\n     * @param fileName filename\n     * @return delete success\n     */\n    public static boolean deleteFile(String path, String fileName) {\n        File file = Paths.get(path, fileName).toFile();\n        if (file.exists()) {\n            return file.delete();\n        }\n        return false;\n    }\n    \n    public static void deleteDirectory(String path) throws IOException {\n        FileUtils.deleteDirectory(new File(path));\n    }\n    \n    public static void forceMkdir(String path) throws IOException {\n        FileUtils.forceMkdir(new File(path));\n    }\n    \n    public static void forceMkdir(File file) throws IOException {\n        FileUtils.forceMkdir(file);\n    }\n    \n    public static void deleteDirThenMkdir(String path) throws IOException {\n        deleteDirectory(path);\n        forceMkdir(path);\n    }\n    \n    public static void copyDirectory(File srcDir, File destDir) throws IOException {\n        FileUtils.copyDirectory(srcDir, destDir);\n    }\n    \n    public static void copyFile(File src, File target) throws IOException {\n        FileUtils.copyFile(src, target);\n    }\n    \n    public static File openFile(String path, String fileName) {\n        return openFile(path, fileName, false);\n    }\n    \n    /**\n     * open file.\n     *\n     * @param path     directory\n     * @param fileName filename\n     * @param rewrite  if rewrite is true, will delete old file and create new one\n     * @return {@link File}\n     */\n    public static File openFile(String path, String fileName, boolean rewrite) {\n        File directory = new File(path);\n        boolean mkdirs = true;\n        if (!directory.exists()) {\n            mkdirs = directory.mkdirs();\n        }\n        if (!mkdirs) {\n            LOGGER.error(\"[DiskUtils] can't create directory\");\n            return null;\n        }\n        File file = new File(path, fileName);\n        try {\n            boolean create = true;\n            if (!file.exists()) {\n                file.createNewFile();\n            }\n            if (file.exists()) {\n                if (rewrite) {\n                    file.delete();\n                } else {\n                    create = false;\n                }\n            }\n            if (create) {\n                file.createNewFile();\n            }\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n        return file;\n    }\n    \n    // copy from sofa-jraft\n    \n    /**\n     * Compress a folder in a directory.\n     *\n     * @param rootDir    directory\n     * @param sourceDir  folder\n     * @param outputFile output file\n     * @param checksum   checksum\n     * @throws IOException IOException\n     */\n    public static void compress(final String rootDir, final String sourceDir, final String outputFile,\n            final Checksum checksum) throws IOException {\n        try (final FileOutputStream fos = new FileOutputStream(outputFile);\n                final CheckedOutputStream cos = new CheckedOutputStream(fos, checksum);\n                final ZipOutputStream zos = new ZipOutputStream(new BufferedOutputStream(cos))) {\n            compressDirectoryToZipFile(rootDir, sourceDir, zos);\n            zos.flush();\n            fos.getFD().sync();\n        }\n    }\n    \n    // copy from sofa-jraft\n    \n    private static void compressDirectoryToZipFile(final String rootDir, final String sourceDir,\n            final ZipOutputStream zos) throws IOException {\n        final String dir = Paths.get(rootDir, sourceDir).toString();\n        final File[] files = Objects.requireNonNull(new File(dir).listFiles(), \"files\");\n        for (final File file : files) {\n            final String child = Paths.get(sourceDir, file.getName()).toString();\n            if (file.isDirectory()) {\n                compressDirectoryToZipFile(rootDir, child, zos);\n            } else {\n                try (final FileInputStream fis = new FileInputStream(file);\n                        final BufferedInputStream bis = new BufferedInputStream(fis)) {\n                    compressIntoZipFile(child, bis, zos);\n                }\n            }\n        }\n    }\n    \n    /**\n     * Compress an input stream to zip file.\n     *\n     * @param childName   child name in zip file\n     * @param inputStream input stream needed compress\n     * @param outputFile  output file\n     * @param checksum    check sum\n     * @throws IOException IOException during compress\n     */\n    public static void compressIntoZipFile(final String childName, final InputStream inputStream,\n            final String outputFile, final Checksum checksum) throws IOException {\n        try (final FileOutputStream fileOutputStream = new FileOutputStream(outputFile);\n                final CheckedOutputStream checkedOutputStream = new CheckedOutputStream(fileOutputStream, checksum);\n                final ZipOutputStream zipStream = new ZipOutputStream(new BufferedOutputStream(checkedOutputStream))) {\n            compressIntoZipFile(childName, inputStream, zipStream);\n            zipStream.flush();\n            fileOutputStream.getFD().sync();\n        }\n    }\n    \n    private static void compressIntoZipFile(final String childName, final InputStream inputStream,\n            final ZipOutputStream zipOutputStream) throws IOException {\n        zipOutputStream.putNextEntry(new ZipEntry(childName));\n        IOUtils.copy(inputStream, zipOutputStream);\n    }\n    \n    // copy from sofa-jraft\n    \n    /**\n     * Unzip the target file to the specified folder.\n     *\n     * @param sourceFile target file\n     * @param outputDir  specified folder\n     * @param checksum   checksum\n     * @throws IOException IOException\n     */\n    public static void decompress(final String sourceFile, final String outputDir, final Checksum checksum)\n            throws IOException {\n        try (final FileInputStream fis = new FileInputStream(sourceFile);\n                final CheckedInputStream cis = new CheckedInputStream(fis, checksum);\n                final ZipInputStream zis = new ZipInputStream(new BufferedInputStream(cis))) {\n            ZipEntry entry;\n            while ((entry = zis.getNextEntry()) != null) {\n                final String fileName = entry.getName();\n                final File entryFile = new File(Paths.get(outputDir, fileName).toString());\n                FileUtils.forceMkdir(entryFile.getParentFile());\n                try (final FileOutputStream fos = new FileOutputStream(entryFile);\n                        final BufferedOutputStream bos = new BufferedOutputStream(fos)) {\n                    IOUtils.copy(zis, bos);\n                    bos.flush();\n                    fos.getFD().sync();\n                }\n            }\n            // Continue to read all remaining bytes(extra metadata of ZipEntry) directly from the checked stream,\n            // Otherwise, the checksum value maybe unexpected.\n            //\n            // See https://coderanch.com/t/279175/java/ZipInputStream\n            IOUtils.copy(cis, NullOutputStream.NULL_OUTPUT_STREAM);\n        }\n    }\n    \n    /**\n     * Unzip the target file to byte array.\n     *\n     * @param sourceFile target file\n     * @param checksum   checksum\n     * @return decompress byte array\n     * @throws IOException IOException during decompress\n     */\n    public static byte[] decompress(final String sourceFile, final Checksum checksum) throws IOException {\n        byte[] result;\n        try (final FileInputStream fis = new FileInputStream(sourceFile);\n                final CheckedInputStream cis = new CheckedInputStream(fis, checksum);\n                final ZipInputStream zis = new ZipInputStream(new BufferedInputStream(cis));\n                final ByteArrayOutputStream bos = new ByteArrayOutputStream(1024)) {\n            while (zis.getNextEntry() != null) {\n                IOUtils.copy(zis, bos);\n                bos.flush();\n            }\n            IOUtils.copy(cis, NullOutputStream.NULL_OUTPUT_STREAM);\n            result = bos.toByteArray();\n        }\n        return result;\n    }\n    \n    /**\n     * Returns an Iterator for the lines in a <code>File</code>.\n     * <p>\n     * This method opens an <code>InputStream</code> for the file. When you have finished with the iterator you should\n     * close the stream to free internal resources. This can be done by calling the {@link\n     * org.apache.commons.io.LineIterator#close()} or {@link org.apache.commons.io.LineIterator#closeQuietly(org.apache.commons.io.LineIterator)}\n     * method.\n     * </p>\n     * The recommended usage pattern is:\n     * <pre>\n     * LineIterator it = FileUtils.lineIterator(file, \"UTF-8\");\n     * try {\n     *   while (it.hasNext()) {\n     *     String line = it.nextLine();\n     *     /// do something with line\n     *   }\n     * } finally {\n     *   LineIterator.closeQuietly(iterator);\n     * }\n     * </pre>\n     * <p>\n     * If an exception occurs during the creation of the iterator, the underlying stream is closed.\n     * </p>\n     *\n     * @param file     the file to open for input, must not be <code>null</code>\n     * @param encoding the encoding to use, <code>null</code> means platform default\n     * @return an Iterator of the lines in the file, never <code>null</code>\n     * @throws IOException in case of an I/O error (file closed)\n     * @since 1.2\n     */\n    public static LineIterator lineIterator(File file, String encoding) throws IOException {\n        return new LineIterator(FileUtils.lineIterator(file, encoding));\n    }\n    \n    /**\n     * Returns an Iterator for the lines in a <code>File</code> using the default encoding for the VM.\n     *\n     * @param file the file to open for input, must not be <code>null</code>\n     * @return an Iterator of the lines in the file, never <code>null</code>\n     * @throws IOException in case of an I/O error (file closed)\n     * @see #lineIterator(File, String)\n     * @since 1.3\n     */\n    public static LineIterator lineIterator(File file) throws IOException {\n        return new LineIterator(FileUtils.lineIterator(file, null));\n    }\n    \n    public static class LineIterator implements AutoCloseable {\n        \n        private final org.apache.commons.io.LineIterator target;\n        \n        /**\n         * Constructs an iterator of the lines for a <code>Reader</code>.\n         *\n         * @param target {@link org.apache.commons.io.LineIterator}\n         */\n        LineIterator(org.apache.commons.io.LineIterator target) {\n            this.target = target;\n        }\n        \n        public boolean hasNext() {\n            return target.hasNext();\n        }\n        \n        public String next() {\n            return target.next();\n        }\n        \n        public String nextLine() {\n            return target.nextLine();\n        }\n        \n        @Override\n        public void close() throws IOException {\n            target.close();\n        }\n        \n        public void remove() {\n            target.remove();\n        }\n        \n        public void forEachRemaining(Consumer<? super String> action) {\n            target.forEachRemaining(action);\n        }\n    }\n    \n}\n", "methodName": "com.alibaba.nacos.sys.utils.DiskUtils.readFile(java.lang.String,java.lang.String):java.lang.String", "exampleID": 24, "dataset": "infer", "filepath": "sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "line": 151, "sink": "file", "source": "file", "sourceLine": 150, "qualifier": "$$file/$ could be null, and is @@dereferenced/@", "steps": [{"line": 301, "source": "file", "filepath": "sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "methodName": "DiskUtils.openFile", "exampleID": 25}], "line_number": 150, "records": [{"level": 1, "filename": "sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "line_number": 301, "column_number": -1, "description": "start of procedure openFile(...)", "snippet": "        return openFile(path, fileName, false);", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "methodName": "openFile"}, {"level": 2, "filename": "sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "line_number": 312, "column_number": -1, "description": "start of procedure openFile(...)", "snippet": "    public static File openFile(String path, String fileName, boolean rewrite) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "methodName": "openFile"}, {"level": 2, "filename": "sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "line_number": 313, "column_number": -1, "description": "Skipping File(...): unknown method", "snippet": "        File directory = new File(path);", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "methodName": "openFile"}, {"level": 2, "filename": "sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "line_number": 314, "column_number": -1, "description": "", "snippet": "        boolean mkdirs = true;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "methodName": "openFile"}, {"level": 2, "filename": "sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "line_number": 315, "column_number": -1, "description": "Taking true branch", "snippet": "        if (!directory.exists()) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "methodName": "openFile"}, {"level": 2, "filename": "sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "line_number": 316, "column_number": -1, "description": "Skipping mkdirs(): unknown method", "snippet": "            mkdirs = directory.mkdirs();", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "methodName": "openFile"}, {"level": 2, "filename": "sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "line_number": 318, "column_number": -1, "description": "Taking true branch", "snippet": "        if (!mkdirs) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "methodName": "openFile"}, {"level": 2, "filename": "sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "line_number": 319, "column_number": -1, "description": "Skipping error(...): unknown method", "snippet": "            LOGGER.error(\"[DiskUtils] can't create directory\");", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "methodName": "openFile"}, {"level": 2, "filename": "sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "line_number": 320, "column_number": -1, "description": "", "snippet": "            return null;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "methodName": "openFile"}, {"level": 2, "filename": "sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "line_number": 341, "column_number": -1, "description": "return from a call to File DiskUtils.openFile(String,String,boolean)", "snippet": "        return file;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "methodName": "openFile"}, {"level": 1, "filename": "sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "line_number": 301, "column_number": -1, "description": "return from a call to File DiskUtils.openFile(String,String)", "snippet": "        return openFile(path, fileName, false);", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "methodName": "openFile"}], "combined_records": [{"level": 1, "filename": "sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "line_number": 301, "column_number": -1, "description": "start of procedure openFile(...)", "snippet": "298.    public static File openFile(String path, String fileName) {\n299.        return openFile(path, fileName, false);\n300.    }\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "methodName": "openFile", "line_numbers": [301]}, {"level": 2, "filename": "sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "line_number": 341, "column_number": -1, "description": "start of procedure openFile(...)", "snippet": "309.     */\n310.    public static File openFile(String path, String fileName, boolean rewrite) {\n311.>         File directory = new File(path);\n312.>         boolean mkdirs = true;\n313.>         if (!directory.exists()) {\n314.>             mkdirs = directory.mkdirs();\n315.        }\n316.        if (!mkdirs) {\n317.>             LOGGER.error(\"[DiskUtils] can't create directory\");\n318.>             return null;\n319.        }\n320.        File file = new File(path, fileName);\n321.        try {\n322.            boolean create = true;\n323.            if (!file.exists()) {\n324.                file.createNewFile();\n325.            }\n326.            if (file.exists()) {\n327.                if (rewrite) {\n328.                    file.delete();\n329.                } else {\n330.                    create = false;\n331.                }\n332.            }\n333.            if (create) {\n334.                file.createNewFile();\n335.            }\n336.        } catch (IOException e) {\n337.            throw new RuntimeException(e);\n338.        }\n339.        return file;\n340.    }\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "methodName": "openFile", "line_numbers": [312, 313, 314, 315, 316, 318, 319, 320, 341]}, {"level": 1, "filename": "sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "line_number": 301, "column_number": -1, "description": "return from a call to File DiskUtils.openFile(String,String)", "snippet": "298.    public static File openFile(String path, String fileName) {\n299.        return openFile(path, fileName, false);\n300.    }\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "methodName": "openFile", "line_numbers": [301]}], "infer_explore": [{"level": 0, "filename": "sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "line_number": 149, "column_number": -1, "description": "start of procedure readFile(...)", "snippet": "146.      * @return content\n147.      */\n148. >     public static String readFile(String path, String fileName) {\n149.         File file = openFile(path, fileName);\n150.         if (file.exists()) {\n"}, {"level": 0, "filename": "sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "line_number": 150, "column_number": -1, "description": "", "snippet": "147.      */\n148.     public static String readFile(String path, String fileName) {\n149. >         File file = openFile(path, fileName);\n150.         if (file.exists()) {\n151.             return readFile(file);\n"}, {"level": 1, "filename": "sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "line_number": 301, "column_number": -1, "description": "start of procedure openFile(...)", "snippet": "298.     \n299.     public static File openFile(String path, String fileName) {\n300. >         return openFile(path, fileName, false);\n301.     }\n302.     \n"}, {"level": 2, "filename": "sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "line_number": 312, "column_number": -1, "description": "start of procedure openFile(...)", "snippet": "309.      * @return {@link File}\n310.      */\n311. >     public static File openFile(String path, String fileName, boolean rewrite) {\n312.         File directory = new File(path);\n313.         boolean mkdirs = true;\n"}, {"level": 2, "filename": "sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "line_number": 313, "column_number": -1, "description": "Skipping File(...): unknown method", "snippet": "310.      */\n311.     public static File openFile(String path, String fileName, boolean rewrite) {\n312. >         File directory = new File(path);\n313.         boolean mkdirs = true;\n314.         if (!directory.exists()) {\n"}, {"level": 2, "filename": "sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "line_number": 314, "column_number": -1, "description": "", "snippet": "311.     public static File openFile(String path, String fileName, boolean rewrite) {\n312.         File directory = new File(path);\n313. >         boolean mkdirs = true;\n314.         if (!directory.exists()) {\n315.             mkdirs = directory.mkdirs();\n"}, {"level": 2, "filename": "sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "line_number": 315, "column_number": -1, "description": "Taking true branch", "snippet": "312.         File directory = new File(path);\n313.         boolean mkdirs = true;\n314. >         if (!directory.exists()) {\n315.             mkdirs = directory.mkdirs();\n316.         }\n"}, {"level": 2, "filename": "sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "line_number": 316, "column_number": -1, "description": "Skipping mkdirs(): unknown method", "snippet": "313.         boolean mkdirs = true;\n314.         if (!directory.exists()) {\n315. >             mkdirs = directory.mkdirs();\n316.         }\n317.         if (!mkdirs) {\n"}, {"level": 2, "filename": "sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "line_number": 318, "column_number": -1, "description": "Taking true branch", "snippet": "315.             mkdirs = directory.mkdirs();\n316.         }\n317. >         if (!mkdirs) {\n318.             LOGGER.error(\"[DiskUtils] can't create directory\");\n319.             return null;\n"}, {"level": 2, "filename": "sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "line_number": 319, "column_number": -1, "description": "Skipping error(...): unknown method", "snippet": "316.         }\n317.         if (!mkdirs) {\n318. >             LOGGER.error(\"[DiskUtils] can't create directory\");\n319.             return null;\n320.         }\n"}, {"level": 2, "filename": "sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "line_number": 320, "column_number": -1, "description": "", "snippet": "317.         if (!mkdirs) {\n318.             LOGGER.error(\"[DiskUtils] can't create directory\");\n319. >             return null;\n320.         }\n321.         File file = new File(path, fileName);\n"}, {"level": 2, "filename": "sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "line_number": 341, "column_number": -1, "description": "return from a call to File DiskUtils.openFile(String,String,boolean)", "snippet": "338.             throw new RuntimeException(e);\n339.         }\n340. >         return file;\n341.     }\n342.     \n"}, {"level": 1, "filename": "sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "line_number": 301, "column_number": -1, "description": "return from a call to File DiskUtils.openFile(String,String)", "snippet": "298.     \n299.     public static File openFile(String path, String fileName) {\n300. >         return openFile(path, fileName, false);\n301.     }\n302.     \n"}, {"level": 0, "filename": "sys/src/main/java/com/alibaba/nacos/sys/utils/DiskUtils.java", "line_number": 151, "column_number": -1, "description": "", "snippet": "148.     public static String readFile(String path, String fileName) {\n149.         File file = openFile(path, fileName);\n150. >         if (file.exists()) {\n151.             return readFile(file);\n152.         }\n"}]}, {"url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "rawCode": "/*\n * Copyright 1999-2018 Alibaba Group Holding Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.alibaba.nacos.plugin.control.ruleactivator;\n\nimport com.alibaba.nacos.common.utils.ByteUtils;\nimport org.apache.commons.io.FileUtils;\nimport org.apache.commons.io.IOUtils;\nimport org.apache.commons.io.output.NullOutputStream;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.BufferedInputStream;\nimport java.io.BufferedOutputStream;\nimport java.io.BufferedReader;\nimport java.io.ByteArrayOutputStream;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.nio.ByteBuffer;\nimport java.nio.CharBuffer;\nimport java.nio.channels.FileChannel;\nimport java.nio.charset.Charset;\nimport java.nio.charset.CharsetDecoder;\nimport java.nio.charset.StandardCharsets;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.util.Objects;\nimport java.util.function.Consumer;\nimport java.util.zip.CheckedInputStream;\nimport java.util.zip.CheckedOutputStream;\nimport java.util.zip.Checksum;\nimport java.util.zip.ZipEntry;\nimport java.util.zip.ZipInputStream;\nimport java.util.zip.ZipOutputStream;\n\n/**\n * IO operates on the utility class.\n *\n * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n */\npublic final class DiskUtils {\n    \n    private static final Logger LOGGER = LoggerFactory.getLogger(DiskUtils.class);\n    \n    private static final String NO_SPACE_CN = \"\u8bbe\u5907\u4e0a\u6ca1\u6709\u7a7a\u95f4\";\n    \n    private static final String NO_SPACE_EN = \"No space left on device\";\n    \n    private static final String DISK_QUOTA_CN = \"\u8d85\u51fa\u78c1\u76d8\u9650\u989d\";\n    \n    private static final String DISK_QUOTA_EN = \"Disk quota exceeded\";\n    \n    private static final Charset CHARSET = StandardCharsets.UTF_8;\n    \n    private static final CharsetDecoder DECODER = CHARSET.newDecoder();\n    \n    public static void touch(String path, String fileName) throws IOException {\n        FileUtils.touch(Paths.get(path, fileName).toFile());\n    }\n    \n    /**\n     * Implements the same behaviour as the \"touch\" utility on Unix. It creates a new file with size 0 or, if the file\n     * exists already, it is opened and closed without modifying it, but updating the file date and time.\n     *\n     * <p>NOTE: As from v1.3, this method throws an IOException if the last\n     * modified date of the file cannot be set. Also, as from v1.3 this method creates parent directories if they do not\n     * exist.\n     *\n     * @param file the File to touch\n     * @throws IOException If an I/O problem occurs\n     */\n    public static void touch(File file) throws IOException {\n        FileUtils.touch(file);\n    }\n    \n    /**\n     * Creates a new empty file in the specified directory, using the given prefix and suffix strings to generate its\n     * name. The resulting {@code Path} is associated with the same {@code FileSystem} as the given directory.\n     *\n     * <p>The details as to how the name of the file is constructed is\n     * implementation dependent and therefore not specified. Where possible the {@code prefix} and {@code suffix} are\n     * used to construct candidate names in the same manner as the {@link File#createTempFile(String, String,\n     * File)} method.\n     *\n     * @param dir    the path to directory in which to create the file\n     * @param prefix the prefix string to be used in generating the file's name; may be {@code null}\n     * @param suffix the suffix string to be used in generating the file's name; may be {@code null}, in which case\n     *               \"{@code .tmp}\" is used\n     * @return the path to the newly created file that did not exist before this method was invoked\n     * @throws IllegalArgumentException      if the prefix or suffix parameters cannot be used to generate a candidate\n     *                                       file name\n     * @throws UnsupportedOperationException if the array contains an attribute that cannot be set atomically when\n     *                                       creating the directory\n     * @throws IOException                   if an I/O error occurs or {@code dir} does not exist\n     * @throws SecurityException             In the case of the default provider, and a security manager is installed,\n     *                                       the {@link SecurityManager#checkWrite(String) checkWrite} method is invoked\n     *                                       to check write access to the file.\n     */\n    public static File createTmpFile(String dir, String prefix, String suffix) throws IOException {\n        return Files.createTempFile(Paths.get(dir), prefix, suffix).toFile();\n    }\n    \n    /**\n     * Creates an empty file in the default temporary-file directory, using the given prefix and suffix to generate its\n     * name. The resulting {@code Path} is associated with the default {@code FileSystem}.\n     *\n     * @param prefix the prefix string to be used in generating the file's name; may be {@code null}\n     * @param suffix the suffix string to be used in generating the file's name; may be {@code null}, in which case\n     *               \"{@code .tmp}\" is used\n     * @return the path to the newly created file that did not exist before this method was invoked\n     * @throws IllegalArgumentException      if the prefix or suffix parameters cannot be used to generate a candidate\n     *                                       file name\n     * @throws UnsupportedOperationException if the array contains an attribute that cannot be set atomically when\n     *                                       creating the directory\n     * @throws IOException                   if an I/O error occurs or the temporary-file directory does not exist\n     * @throws SecurityException             In the case of the default provider, and a security manager is installed,\n     *                                       the {@link SecurityManager#checkWrite(String) checkWrite} method is invoked\n     *                                       to check write access to the file.\n     */\n    public static File createTmpFile(String prefix, String suffix) throws IOException {\n        return Files.createTempFile(prefix, suffix).toFile();\n    }\n    \n    /**\n     * read file which under the path.\n     *\n     * @param path     directory\n     * @param fileName filename\n     * @return content\n     */\n    public static String readFile(String path, String fileName) {\n        File file = openFile(path, fileName);\n        if (file.exists()) {\n            return readFile(file);\n        }\n        return null;\n    }\n    \n    /**\n     * read file content by {@link InputStream}.\n     *\n     * @param is {@link InputStream}\n     * @return content\n     */\n    public static String readFile(InputStream is) {\n        try (BufferedReader reader = new BufferedReader(new InputStreamReader(is))) {\n            StringBuilder textBuilder = new StringBuilder();\n            String lineTxt = null;\n            while ((lineTxt = reader.readLine()) != null) {\n                textBuilder.append(lineTxt);\n            }\n            return textBuilder.toString();\n        } catch (IOException e) {\n            return null;\n        }\n    }\n    \n    /**\n     * read this file content.\n     *\n     * @param file {@link File}\n     * @return content\n     */\n    public static String readFile(File file) {\n        try (FileChannel fileChannel = new FileInputStream(file).getChannel()) {\n            StringBuilder text = new StringBuilder();\n            ByteBuffer buffer = ByteBuffer.allocate(4096);\n            CharBuffer charBuffer = CharBuffer.allocate(4096);\n            while (fileChannel.read(buffer) != -1) {\n                buffer.flip();\n                DECODER.decode(buffer, charBuffer, false);\n                charBuffer.flip();\n                while (charBuffer.hasRemaining()) {\n                    text.append(charBuffer.get());\n                }\n                buffer.clear();\n                charBuffer.clear();\n            }\n            return text.toString();\n        } catch (IOException e) {\n            return null;\n        }\n    }\n    \n    /**\n     * read this file content then return bytes.\n     *\n     * @param file {@link File}\n     * @return content bytes\n     */\n    public static byte[] readFileBytes(File file) {\n        if (file.exists()) {\n            String result = readFile(file);\n            if (result != null) {\n                return ByteUtils.toBytes(result);\n            }\n        }\n        return null;\n    }\n    \n    public static byte[] readFileBytes(String path, String fileName) {\n        File file = openFile(path, fileName);\n        return readFileBytes(file);\n    }\n    \n    /**\n     * Writes the contents to the target file.\n     *\n     * @param file    target file\n     * @param content content\n     * @param append  write append mode\n     * @return write success\n     */\n    public static boolean writeFile(File file, byte[] content, boolean append) {\n        try (FileChannel fileChannel = new FileOutputStream(file, append).getChannel()) {\n            ByteBuffer buffer = ByteBuffer.wrap(content);\n            fileChannel.write(buffer);\n            return true;\n        } catch (IOException ioe) {\n            if (ioe.getMessage() != null) {\n                String errMsg = ioe.getMessage();\n                if (NO_SPACE_CN.equals(errMsg) || NO_SPACE_EN.equals(errMsg) || errMsg.contains(DISK_QUOTA_CN) || errMsg\n                        .contains(DISK_QUOTA_EN)) {\n                    LOGGER.warn(\"\u78c1\u76d8\u6ee1\uff0c\u81ea\u6740\u9000\u51fa\");\n                    System.exit(0);\n                }\n            }\n        }\n        return false;\n    }\n    \n    public static void deleteQuietly(File file) {\n        Objects.requireNonNull(file, \"file\");\n        FileUtils.deleteQuietly(file);\n    }\n    \n    public static void deleteQuietly(Path path) {\n        Objects.requireNonNull(path, \"path\");\n        FileUtils.deleteQuietly(path.toFile());\n    }\n    \n    /**\n     * delete target file.\n     *\n     * @param path     directory\n     * @param fileName filename\n     * @return delete success\n     */\n    public static boolean deleteFile(String path, String fileName) {\n        File file = Paths.get(path, fileName).toFile();\n        if (file.exists()) {\n            return file.delete();\n        }\n        return false;\n    }\n    \n    public static void deleteDirectory(String path) throws IOException {\n        FileUtils.deleteDirectory(new File(path));\n    }\n    \n    public static void forceMkdir(String path) throws IOException {\n        FileUtils.forceMkdir(new File(path));\n    }\n    \n    public static void forceMkdir(File file) throws IOException {\n        FileUtils.forceMkdir(file);\n    }\n    \n    public static void deleteDirThenMkdir(String path) throws IOException {\n        deleteDirectory(path);\n        forceMkdir(path);\n    }\n    \n    public static void copyDirectory(File srcDir, File destDir) throws IOException {\n        FileUtils.copyDirectory(srcDir, destDir);\n    }\n    \n    public static void copyFile(File src, File target) throws IOException {\n        FileUtils.copyFile(src, target);\n    }\n    \n    public static File openFile(String path, String fileName) {\n        return openFile(path, fileName, false);\n    }\n    \n    /**\n     * open file.\n     *\n     * @param path     directory\n     * @param fileName filename\n     * @param rewrite  if rewrite is true, will delete old file and create new one\n     * @return {@link File}\n     */\n    public static File openFile(String path, String fileName, boolean rewrite) {\n        File directory = new File(path);\n        boolean mkdirs = true;\n        if (!directory.exists()) {\n            mkdirs = directory.mkdirs();\n        }\n        if (!mkdirs) {\n            LOGGER.error(\"[DiskUtils] can't create directory\");\n            return null;\n        }\n        File file = new File(path, fileName);\n        try {\n            boolean create = true;\n            if (!file.exists()) {\n                file.createNewFile();\n            }\n            if (file.exists()) {\n                if (rewrite) {\n                    file.delete();\n                } else {\n                    create = false;\n                }\n            }\n            if (create) {\n                file.createNewFile();\n            }\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n        return file;\n    }\n    \n    // copy from sofa-jraft\n    \n    /**\n     * Compress a folder in a directory.\n     *\n     * @param rootDir    directory\n     * @param sourceDir  folder\n     * @param outputFile output file\n     * @param checksum   checksum\n     * @throws IOException IOException\n     */\n    public static void compress(final String rootDir, final String sourceDir, final String outputFile,\n            final Checksum checksum) throws IOException {\n        try (final FileOutputStream fos = new FileOutputStream(outputFile);\n                final CheckedOutputStream cos = new CheckedOutputStream(fos, checksum);\n                final ZipOutputStream zos = new ZipOutputStream(new BufferedOutputStream(cos))) {\n            compressDirectoryToZipFile(rootDir, sourceDir, zos);\n            zos.flush();\n            fos.getFD().sync();\n        }\n    }\n    \n    // copy from sofa-jraft\n    \n    private static void compressDirectoryToZipFile(final String rootDir, final String sourceDir,\n            final ZipOutputStream zos) throws IOException {\n        final String dir = Paths.get(rootDir, sourceDir).toString();\n        final File[] files = Objects.requireNonNull(new File(dir).listFiles(), \"files\");\n        for (final File file : files) {\n            final String child = Paths.get(sourceDir, file.getName()).toString();\n            if (file.isDirectory()) {\n                compressDirectoryToZipFile(rootDir, child, zos);\n            } else {\n                try (final FileInputStream fis = new FileInputStream(file);\n                        final BufferedInputStream bis = new BufferedInputStream(fis)) {\n                    compressIntoZipFile(child, bis, zos);\n                }\n            }\n        }\n    }\n    \n    /**\n     * Compress an input stream to zip file.\n     *\n     * @param childName   child name in zip file\n     * @param inputStream input stream needed compress\n     * @param outputFile  output file\n     * @param checksum    check sum\n     * @throws IOException IOException during compress\n     */\n    public static void compressIntoZipFile(final String childName, final InputStream inputStream,\n            final String outputFile, final Checksum checksum) throws IOException {\n        try (final FileOutputStream fileOutputStream = new FileOutputStream(outputFile);\n                final CheckedOutputStream checkedOutputStream = new CheckedOutputStream(fileOutputStream, checksum);\n                final ZipOutputStream zipStream = new ZipOutputStream(new BufferedOutputStream(checkedOutputStream))) {\n            compressIntoZipFile(childName, inputStream, zipStream);\n            zipStream.flush();\n            fileOutputStream.getFD().sync();\n        }\n    }\n    \n    private static void compressIntoZipFile(final String childName, final InputStream inputStream,\n            final ZipOutputStream zipOutputStream) throws IOException {\n        zipOutputStream.putNextEntry(new ZipEntry(childName));\n        IOUtils.copy(inputStream, zipOutputStream);\n    }\n    \n    // copy from sofa-jraft\n    \n    /**\n     * Unzip the target file to the specified folder.\n     *\n     * @param sourceFile target file\n     * @param outputDir  specified folder\n     * @param checksum   checksum\n     * @throws IOException IOException\n     */\n    public static void decompress(final String sourceFile, final String outputDir, final Checksum checksum)\n            throws IOException {\n        try (final FileInputStream fis = new FileInputStream(sourceFile);\n                final CheckedInputStream cis = new CheckedInputStream(fis, checksum);\n                final ZipInputStream zis = new ZipInputStream(new BufferedInputStream(cis))) {\n            ZipEntry entry;\n            while ((entry = zis.getNextEntry()) != null) {\n                final String fileName = entry.getName();\n                final File entryFile = new File(Paths.get(outputDir, fileName).toString());\n                FileUtils.forceMkdir(entryFile.getParentFile());\n                try (final FileOutputStream fos = new FileOutputStream(entryFile);\n                        final BufferedOutputStream bos = new BufferedOutputStream(fos)) {\n                    IOUtils.copy(zis, bos);\n                    bos.flush();\n                    fos.getFD().sync();\n                }\n            }\n            // Continue to read all remaining bytes(extra metadata of ZipEntry) directly from the checked stream,\n            // Otherwise, the checksum value maybe unexpected.\n            //\n            // See https://coderanch.com/t/279175/java/ZipInputStream\n            IOUtils.copy(cis, NullOutputStream.NULL_OUTPUT_STREAM);\n        }\n    }\n    \n    /**\n     * Unzip the target file to byte array.\n     *\n     * @param sourceFile target file\n     * @param checksum   checksum\n     * @return decompress byte array\n     * @throws IOException IOException during decompress\n     */\n    public static byte[] decompress(final String sourceFile, final Checksum checksum) throws IOException {\n        byte[] result;\n        try (final FileInputStream fis = new FileInputStream(sourceFile);\n                final CheckedInputStream cis = new CheckedInputStream(fis, checksum);\n                final ZipInputStream zis = new ZipInputStream(new BufferedInputStream(cis));\n                final ByteArrayOutputStream bos = new ByteArrayOutputStream(1024)) {\n            while (zis.getNextEntry() != null) {\n                IOUtils.copy(zis, bos);\n                bos.flush();\n            }\n            IOUtils.copy(cis, NullOutputStream.NULL_OUTPUT_STREAM);\n            result = bos.toByteArray();\n        }\n        return result;\n    }\n    \n    /**\n     * Returns an Iterator for the lines in a <code>File</code>.\n     * <p>\n     * This method opens an <code>InputStream</code> for the file. When you have finished with the iterator you should\n     * close the stream to free internal resources. This can be done by calling the {@link\n     * org.apache.commons.io.LineIterator#close()} or {@link org.apache.commons.io.LineIterator#closeQuietly(org.apache.commons.io.LineIterator)}\n     * method.\n     * </p>\n     * The recommended usage pattern is:\n     * <pre>\n     * LineIterator it = FileUtils.lineIterator(file, \"UTF-8\");\n     * try {\n     *   while (it.hasNext()) {\n     *     String line = it.nextLine();\n     *     /// do something with line\n     *   }\n     * } finally {\n     *   LineIterator.closeQuietly(iterator);\n     * }\n     * </pre>\n     * <p>\n     * If an exception occurs during the creation of the iterator, the underlying stream is closed.\n     * </p>\n     *\n     * @param file     the file to open for input, must not be <code>null</code>\n     * @param encoding the encoding to use, <code>null</code> means platform default\n     * @return an Iterator of the lines in the file, never <code>null</code>\n     * @throws IOException in case of an I/O error (file closed)\n     * @since 1.2\n     */\n    public static LineIterator lineIterator(File file, String encoding) throws IOException {\n        return new LineIterator(FileUtils.lineIterator(file, encoding));\n    }\n    \n    /**\n     * Returns an Iterator for the lines in a <code>File</code> using the default encoding for the VM.\n     *\n     * @param file the file to open for input, must not be <code>null</code>\n     * @return an Iterator of the lines in the file, never <code>null</code>\n     * @throws IOException in case of an I/O error (file closed)\n     * @see #lineIterator(File, String)\n     * @since 1.3\n     */\n    public static LineIterator lineIterator(File file) throws IOException {\n        return new LineIterator(FileUtils.lineIterator(file, null));\n    }\n    \n    public static class LineIterator implements AutoCloseable {\n        \n        private final org.apache.commons.io.LineIterator target;\n        \n        /**\n         * Constructs an iterator of the lines for a <code>Reader</code>.\n         *\n         * @param target {@link org.apache.commons.io.LineIterator}\n         */\n        LineIterator(org.apache.commons.io.LineIterator target) {\n            this.target = target;\n        }\n        \n        public boolean hasNext() {\n            return target.hasNext();\n        }\n        \n        public String next() {\n            return target.next();\n        }\n        \n        public String nextLine() {\n            return target.nextLine();\n        }\n        \n        @Override\n        public void close() throws IOException {\n            target.close();\n        }\n        \n        public void remove() {\n            target.remove();\n        }\n        \n        public void forEachRemaining(Consumer<? super String> action) {\n            target.forEachRemaining(action);\n        }\n    }\n    \n}\n", "methodName": "com.alibaba.nacos.plugin.control.ruleactivator.DiskUtils.readFile(java.lang.String,java.lang.String):java.lang.String", "exampleID": 26, "dataset": "infer", "filepath": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "line": 151, "sink": "file", "source": "file", "sourceLine": 150, "qualifier": "$$file/$ could be null, and is @@dereferenced/@", "steps": [{"line": 301, "source": "file", "filepath": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "methodName": "DiskUtils.openFile", "exampleID": 27}], "line_number": 150, "records": [{"level": 1, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "line_number": 301, "column_number": -1, "description": "start of procedure openFile(...)", "snippet": "        return openFile(path, fileName, false);", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "methodName": "openFile"}, {"level": 2, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "line_number": 312, "column_number": -1, "description": "start of procedure openFile(...)", "snippet": "    public static File openFile(String path, String fileName, boolean rewrite) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "methodName": "openFile"}, {"level": 2, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "line_number": 313, "column_number": -1, "description": "Skipping File(...): unknown method", "snippet": "        File directory = new File(path);", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "methodName": "openFile"}, {"level": 2, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "line_number": 314, "column_number": -1, "description": "", "snippet": "        boolean mkdirs = true;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "methodName": "openFile"}, {"level": 2, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "line_number": 315, "column_number": -1, "description": "Taking true branch", "snippet": "        if (!directory.exists()) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "methodName": "openFile"}, {"level": 2, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "line_number": 316, "column_number": -1, "description": "Skipping mkdirs(): unknown method", "snippet": "            mkdirs = directory.mkdirs();", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "methodName": "openFile"}, {"level": 2, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "line_number": 318, "column_number": -1, "description": "Taking true branch", "snippet": "        if (!mkdirs) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "methodName": "openFile"}, {"level": 2, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "line_number": 319, "column_number": -1, "description": "Skipping error(...): unknown method", "snippet": "            LOGGER.error(\"[DiskUtils] can't create directory\");", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "methodName": "openFile"}, {"level": 2, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "line_number": 320, "column_number": -1, "description": "", "snippet": "            return null;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "methodName": "openFile"}, {"level": 2, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "line_number": 341, "column_number": -1, "description": "return from a call to File DiskUtils.openFile(String,String,boolean)", "snippet": "        return file;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "methodName": "openFile"}, {"level": 1, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "line_number": 301, "column_number": -1, "description": "return from a call to File DiskUtils.openFile(String,String)", "snippet": "        return openFile(path, fileName, false);", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "methodName": "openFile"}], "combined_records": [{"level": 1, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "line_number": 301, "column_number": -1, "description": "start of procedure openFile(...)", "snippet": "298.    public static File openFile(String path, String fileName) {\n299.        return openFile(path, fileName, false);\n300.    }\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "methodName": "openFile", "line_numbers": [301]}, {"level": 2, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "line_number": 341, "column_number": -1, "description": "start of procedure openFile(...)", "snippet": "309.     */\n310.    public static File openFile(String path, String fileName, boolean rewrite) {\n311.>         File directory = new File(path);\n312.>         boolean mkdirs = true;\n313.>         if (!directory.exists()) {\n314.>             mkdirs = directory.mkdirs();\n315.        }\n316.        if (!mkdirs) {\n317.>             LOGGER.error(\"[DiskUtils] can't create directory\");\n318.>             return null;\n319.        }\n320.        File file = new File(path, fileName);\n321.        try {\n322.            boolean create = true;\n323.            if (!file.exists()) {\n324.                file.createNewFile();\n325.            }\n326.            if (file.exists()) {\n327.                if (rewrite) {\n328.                    file.delete();\n329.                } else {\n330.                    create = false;\n331.                }\n332.            }\n333.            if (create) {\n334.                file.createNewFile();\n335.            }\n336.        } catch (IOException e) {\n337.            throw new RuntimeException(e);\n338.        }\n339.        return file;\n340.    }\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "methodName": "openFile", "line_numbers": [312, 313, 314, 315, 316, 318, 319, 320, 341]}, {"level": 1, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "line_number": 301, "column_number": -1, "description": "return from a call to File DiskUtils.openFile(String,String)", "snippet": "298.    public static File openFile(String path, String fileName) {\n299.        return openFile(path, fileName, false);\n300.    }\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "methodName": "openFile", "line_numbers": [301]}], "infer_explore": [{"level": 0, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "line_number": 149, "column_number": -1, "description": "start of procedure readFile(...)", "snippet": "146.      * @return content\n147.      */\n148. >     public static String readFile(String path, String fileName) {\n149.         File file = openFile(path, fileName);\n150.         if (file.exists()) {\n"}, {"level": 0, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "line_number": 150, "column_number": -1, "description": "", "snippet": "147.      */\n148.     public static String readFile(String path, String fileName) {\n149. >         File file = openFile(path, fileName);\n150.         if (file.exists()) {\n151.             return readFile(file);\n"}, {"level": 1, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "line_number": 301, "column_number": -1, "description": "start of procedure openFile(...)", "snippet": "298.     \n299.     public static File openFile(String path, String fileName) {\n300. >         return openFile(path, fileName, false);\n301.     }\n302.     \n"}, {"level": 2, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "line_number": 312, "column_number": -1, "description": "start of procedure openFile(...)", "snippet": "309.      * @return {@link File}\n310.      */\n311. >     public static File openFile(String path, String fileName, boolean rewrite) {\n312.         File directory = new File(path);\n313.         boolean mkdirs = true;\n"}, {"level": 2, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "line_number": 313, "column_number": -1, "description": "Skipping File(...): unknown method", "snippet": "310.      */\n311.     public static File openFile(String path, String fileName, boolean rewrite) {\n312. >         File directory = new File(path);\n313.         boolean mkdirs = true;\n314.         if (!directory.exists()) {\n"}, {"level": 2, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "line_number": 314, "column_number": -1, "description": "", "snippet": "311.     public static File openFile(String path, String fileName, boolean rewrite) {\n312.         File directory = new File(path);\n313. >         boolean mkdirs = true;\n314.         if (!directory.exists()) {\n315.             mkdirs = directory.mkdirs();\n"}, {"level": 2, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "line_number": 315, "column_number": -1, "description": "Taking true branch", "snippet": "312.         File directory = new File(path);\n313.         boolean mkdirs = true;\n314. >         if (!directory.exists()) {\n315.             mkdirs = directory.mkdirs();\n316.         }\n"}, {"level": 2, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "line_number": 316, "column_number": -1, "description": "Skipping mkdirs(): unknown method", "snippet": "313.         boolean mkdirs = true;\n314.         if (!directory.exists()) {\n315. >             mkdirs = directory.mkdirs();\n316.         }\n317.         if (!mkdirs) {\n"}, {"level": 2, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "line_number": 318, "column_number": -1, "description": "Taking true branch", "snippet": "315.             mkdirs = directory.mkdirs();\n316.         }\n317. >         if (!mkdirs) {\n318.             LOGGER.error(\"[DiskUtils] can't create directory\");\n319.             return null;\n"}, {"level": 2, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "line_number": 319, "column_number": -1, "description": "Skipping error(...): unknown method", "snippet": "316.         }\n317.         if (!mkdirs) {\n318. >             LOGGER.error(\"[DiskUtils] can't create directory\");\n319.             return null;\n320.         }\n"}, {"level": 2, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "line_number": 320, "column_number": -1, "description": "", "snippet": "317.         if (!mkdirs) {\n318.             LOGGER.error(\"[DiskUtils] can't create directory\");\n319. >             return null;\n320.         }\n321.         File file = new File(path, fileName);\n"}, {"level": 2, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "line_number": 341, "column_number": -1, "description": "return from a call to File DiskUtils.openFile(String,String,boolean)", "snippet": "338.             throw new RuntimeException(e);\n339.         }\n340. >         return file;\n341.     }\n342.     \n"}, {"level": 1, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "line_number": 301, "column_number": -1, "description": "return from a call to File DiskUtils.openFile(String,String)", "snippet": "298.     \n299.     public static File openFile(String path, String fileName) {\n300. >         return openFile(path, fileName, false);\n301.     }\n302.     \n"}, {"level": 0, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/DiskUtils.java", "line_number": 151, "column_number": -1, "description": "", "snippet": "148.     public static String readFile(String path, String fileName) {\n149.         File file = openFile(path, fileName);\n150. >         if (file.exists()) {\n151.             return readFile(file);\n152.         }\n"}]}, {"url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/controller/ClientMetricsController.java", "rawCode": "/*\n * Copyright 1999-2018 Alibaba Group Holding Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.alibaba.nacos.config.server.controller;\n\nimport com.alibaba.nacos.api.config.remote.request.ClientConfigMetricRequest;\nimport com.alibaba.nacos.api.config.remote.response.ClientConfigMetricResponse;\nimport com.alibaba.nacos.auth.annotation.Secured;\nimport com.alibaba.nacos.common.http.Callback;\nimport com.alibaba.nacos.common.http.HttpClientBeanHolder;\nimport com.alibaba.nacos.common.http.HttpUtils;\nimport com.alibaba.nacos.common.http.client.NacosAsyncRestTemplate;\nimport com.alibaba.nacos.common.http.param.Header;\nimport com.alibaba.nacos.common.http.param.Query;\nimport com.alibaba.nacos.common.model.RestResult;\nimport com.alibaba.nacos.common.utils.StringUtils;\nimport com.alibaba.nacos.config.server.constant.Constants;\nimport com.alibaba.nacos.config.server.utils.GroupKey2;\nimport com.alibaba.nacos.core.cluster.Member;\nimport com.alibaba.nacos.core.cluster.ServerMemberManager;\nimport com.alibaba.nacos.core.remote.Connection;\nimport com.alibaba.nacos.core.remote.ConnectionManager;\nimport com.alibaba.nacos.core.utils.GenericType;\nimport com.alibaba.nacos.core.utils.Loggers;\nimport com.alibaba.nacos.plugin.auth.constant.ActionTypes;\nimport com.alibaba.nacos.plugin.auth.constant.SignType;\nimport com.alibaba.nacos.sys.env.EnvUtil;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.CountDownLatch;\nimport java.util.concurrent.TimeUnit;\n\nimport static com.alibaba.nacos.api.config.remote.request.ClientConfigMetricRequest.MetricsKey.CACHE_DATA;\nimport static com.alibaba.nacos.api.config.remote.request.ClientConfigMetricRequest.MetricsKey.SNAPSHOT_DATA;\n\n/**\n * ClientMetricsController.\n *\n * @author zunfei.lzf\n */\n@RestController\n@RequestMapping(Constants.METRICS_CONTROLLER_PATH)\npublic class ClientMetricsController {\n    \n    private final ServerMemberManager serverMemberManager;\n    \n    private final ConnectionManager connectionManager;\n    \n    public ClientMetricsController(ServerMemberManager serverMemberManager, ConnectionManager connectionManager) {\n        this.serverMemberManager = serverMemberManager;\n        this.connectionManager = connectionManager;\n    }\n    \n    /**\n     * get client metric.\n     *\n     * @param ip client ip .\n     * @return ResponseEntity\n     */\n    @GetMapping(\"/cluster\")\n    @Secured(resource = Constants.METRICS_CONTROLLER_PATH, action = ActionTypes.READ, signType = SignType.CONFIG)\n    public ResponseEntity metric(@RequestParam(\"ip\") String ip,\n            @RequestParam(value = \"dataId\", required = false) String dataId,\n            @RequestParam(value = \"group\", required = false) String group,\n            @RequestParam(value = \"tenant\", required = false) String tenant) {\n        Loggers.CORE.info(\"Get cluster config metrics received, ip={},dataId={},group={},tenant={}\", ip, dataId, group,\n                tenant);\n        Map<String, Object> responseMap = new HashMap<>(3);\n        Collection<Member> members = serverMemberManager.allMembers();\n        final NacosAsyncRestTemplate nacosAsyncRestTemplate = HttpClientBeanHolder\n                .getNacosAsyncRestTemplate(Loggers.CLUSTER);\n        CountDownLatch latch = new CountDownLatch(members.size());\n        for (Member member : members) {\n            String url = HttpUtils\n                    .buildUrl(false, member.getAddress(), EnvUtil.getContextPath(), Constants.METRICS_CONTROLLER_PATH,\n                            \"current\");\n            Query query = Query.newInstance().addParam(\"ip\", ip).addParam(\"dataId\", dataId).addParam(\"group\", group)\n                    .addParam(\"tenant\", tenant);\n            nacosAsyncRestTemplate.get(url, Header.EMPTY, query, new GenericType<Map>() {\n            }.getType(), new Callback<Map>() {\n                \n                @Override\n                public void onReceive(RestResult<Map> result) {\n                    if (result.ok()) {\n                        responseMap.putAll(result.getData());\n                    }\n                    latch.countDown();\n                }\n                \n                @Override\n                public void onError(Throwable throwable) {\n                    Loggers.CORE\n                            .error(\"Get config metrics error from member address={}, ip={},dataId={},group={},tenant={},error={}\",\n                                    member.getAddress(), ip, dataId, group, tenant, throwable);\n                    latch.countDown();\n                }\n                \n                @Override\n                public void onCancel() {\n                    latch.countDown();\n                }\n            });\n        }\n        try {\n            latch.await(3L, TimeUnit.SECONDS);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        \n        return ResponseEntity.ok().body(responseMap);\n    }\n    \n    \n    /**\n     * Get client config listener lists of subscriber in local machine.\n     */\n    @GetMapping(\"/current\")\n    @Secured(resource = Constants.METRICS_CONTROLLER_PATH, action = ActionTypes.READ, signType = SignType.CONFIG)\n    public Map<String, Object> getClientMetrics(@RequestParam(\"ip\") String ip,\n            @RequestParam(value = \"dataId\", required = false) String dataId,\n            @RequestParam(value = \"group\", required = false) String group,\n            @RequestParam(value = \"tenant\", required = false) String tenant) {\n        Map<String, Object> metrics = new HashMap<>(16);\n        List<Connection> connectionsByIp = connectionManager.getConnectionByIp(ip);\n        for (Connection connectionByIp : connectionsByIp) {\n            try {\n                ClientConfigMetricRequest clientMetrics = new ClientConfigMetricRequest();\n                if (StringUtils.isNotBlank(dataId)) {\n                    clientMetrics.getMetricsKeys().add(ClientConfigMetricRequest.MetricsKey\n                            .build(CACHE_DATA, GroupKey2.getKey(dataId, group, tenant)));\n                    clientMetrics.getMetricsKeys().add(ClientConfigMetricRequest.MetricsKey\n                            .build(SNAPSHOT_DATA, GroupKey2.getKey(dataId, group, tenant)));\n                }\n                \n                ClientConfigMetricResponse request1 = (ClientConfigMetricResponse) connectionByIp\n                        .request(clientMetrics, 1000L);\n                metrics.putAll(request1.getMetrics());\n            } catch (Exception e) {\n                Loggers.CORE.error(\"Get config metrics error from client ip={},dataId={},group={},tenant={},error={}\", ip, dataId,\n                        group, tenant, e);\n            }\n        }\n        return metrics;\n        \n    }\n    \n}\n", "methodName": "com.alibaba.nacos.config.server.controller.ClientMetricsController.getClientMetrics(java.lang.String,java.lang.String,java.lang.String,java.lang.String):java.util.Map", "exampleID": 28, "dataset": "infer", "filepath": "config/src/main/java/com/alibaba/nacos/config/server/controller/ClientMetricsController.java", "line": 150, "sink": "getMetricsKeys(clientMetrics)", "source": "getMetricsKeys(clientMetrics)", "sourceLine": 150, "qualifier": "$$getMetricsKeys(clientMetrics)/$ could return null, and is @@dereferenced/@", "steps": [{"line": 42, "source": "getMetricsKeys(clientMetrics)", "filepath": "api/src/main/java/com/alibaba/nacos/api/config/remote/request/ClientConfigMetricRequest.java", "methodName": "ClientConfigMetricRequest.getMetricsKeys", "exampleID": 29}], "line_number": 150, "records": [{"level": 1, "filename": "api/src/main/java/com/alibaba/nacos/api/config/remote/request/ClientConfigMetricRequest.java", "line_number": 42, "column_number": -1, "description": "start of procedure getMetricsKeys()", "snippet": "    public List<MetricsKey> getMetricsKeys() {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/api/src/main/java/com/alibaba/nacos/api/config/remote/request/ClientConfigMetricRequest.java", "methodName": "getMetricsKeys"}, {"level": 1, "filename": "api/src/main/java/com/alibaba/nacos/api/config/remote/request/ClientConfigMetricRequest.java", "line_number": 43, "column_number": -1, "description": "return from a call to List ClientConfigMetricRequest.getMetricsKeys()", "snippet": "        return metricsKeys;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/api/src/main/java/com/alibaba/nacos/api/config/remote/request/ClientConfigMetricRequest.java", "methodName": "getMetricsKeys"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey2.java", "line_number": 36, "column_number": -1, "description": "start of procedure getKey(...)", "snippet": "    public static String getKey(String dataId, String group, String tenant) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey2.java", "methodName": "getKey"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey2.java", "line_number": 37, "column_number": -1, "description": "Skipping StringBuilder(): unknown method", "snippet": "        StringBuilder sb = new StringBuilder();", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey2.java", "methodName": "getKey"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey2.java", "line_number": 38, "column_number": -1, "description": "", "snippet": "        urlEncode(dataId, sb);", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey2.java", "methodName": "getKey"}, {"level": 2, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey2.java", "line_number": 99, "column_number": -1, "description": "start of procedure urlEncode(...)", "snippet": "    static void urlEncode(String str, StringBuilder sb) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey2.java", "methodName": "urlEncode"}, {"level": 2, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey2.java", "line_number": 100, "column_number": -1, "description": "Taking false branch", "snippet": "        for (int idx = 0; idx < str.length(); ++idx) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey2.java", "methodName": "urlEncode"}, {"level": 2, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey2.java", "line_number": 110, "column_number": -1, "description": "return from a call to void GroupKey2.urlEncode(String,StringBuilder)", "snippet": "    }", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey2.java", "methodName": "urlEncode"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey2.java", "line_number": 39, "column_number": -1, "description": "Skipping append(...): unknown method", "snippet": "        sb.append('+');", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey2.java", "methodName": "getKey"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey2.java", "line_number": 40, "column_number": -1, "description": "", "snippet": "        urlEncode(group, sb);", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey2.java", "methodName": "getKey"}, {"level": 2, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey2.java", "line_number": 99, "column_number": -1, "description": "start of procedure urlEncode(...)", "snippet": "    static void urlEncode(String str, StringBuilder sb) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey2.java", "methodName": "urlEncode"}, {"level": 2, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey2.java", "line_number": 100, "column_number": -1, "description": "Taking false branch", "snippet": "        for (int idx = 0; idx < str.length(); ++idx) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey2.java", "methodName": "urlEncode"}, {"level": 2, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey2.java", "line_number": 110, "column_number": -1, "description": "return from a call to void GroupKey2.urlEncode(String,StringBuilder)", "snippet": "    }", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey2.java", "methodName": "urlEncode"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey2.java", "line_number": 41, "column_number": -1, "description": "", "snippet": "        if (StringUtils.isNotEmpty(tenant)) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey2.java", "methodName": "getKey"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 106, "column_number": -1, "description": "start of procedure isNotEmpty(...)", "snippet": "    public static boolean isNotEmpty(String str) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isNotEmpty"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 107, "column_number": -1, "description": "", "snippet": "        return !isEmpty(str);", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isNotEmpty"}, {"level": 3, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 116, "column_number": -1, "description": "start of procedure isEmpty(...)", "snippet": "    public static boolean isEmpty(String str) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isEmpty"}, {"level": 3, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 117, "column_number": -1, "description": "Taking true branch", "snippet": "        return str == null || str.length() == 0;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isEmpty"}, {"level": 3, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 117, "column_number": -1, "description": "Taking true branch", "snippet": "        return str == null || str.length() == 0;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isEmpty"}, {"level": 3, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 117, "column_number": -1, "description": "return from a call to boolean StringUtils.isEmpty(String)", "snippet": "        return str == null || str.length() == 0;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isEmpty"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 107, "column_number": -1, "description": "Taking false branch", "snippet": "        return !isEmpty(str);", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isNotEmpty"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 107, "column_number": -1, "description": "return from a call to boolean StringUtils.isNotEmpty(String)", "snippet": "        return !isEmpty(str);", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isNotEmpty"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey2.java", "line_number": 41, "column_number": -1, "description": "Taking false branch", "snippet": "        if (StringUtils.isNotEmpty(tenant)) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey2.java", "methodName": "getKey"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey2.java", "line_number": 45, "column_number": -1, "description": "return from a call to String GroupKey2.getKey(CharSequence,String,String)", "snippet": "        return sb.toString();", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey2.java", "methodName": "getKey"}, {"level": 1, "filename": "api/src/main/java/com/alibaba/nacos/api/config/remote/request/ClientConfigMetricRequest.java", "line_number": 69, "column_number": -1, "description": "start of procedure build(...)", "snippet": "        public static MetricsKey build(String type, String key) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/api/src/main/java/com/alibaba/nacos/api/config/remote/request/ClientConfigMetricRequest.java", "methodName": "build"}, {"level": 1, "filename": "api/src/main/java/com/alibaba/nacos/api/config/remote/request/ClientConfigMetricRequest.java", "line_number": 70, "column_number": -1, "description": "", "snippet": "            MetricsKey metricsKey = new MetricsKey();", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/api/src/main/java/com/alibaba/nacos/api/config/remote/request/ClientConfigMetricRequest.java", "methodName": "build"}, {"level": 2, "filename": "api/src/main/java/com/alibaba/nacos/api/config/remote/request/ClientConfigMetricRequest.java", "line_number": 50, "column_number": -1, "description": "start of procedure ClientConfigMetricRequest$MetricsKey()", "snippet": "    public static class MetricsKey implements Serializable {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/api/src/main/java/com/alibaba/nacos/api/config/remote/request/ClientConfigMetricRequest.java", "methodName": "ClientConfigMetricRequest$MetricsKey"}, {"level": 2, "filename": "api/src/main/java/com/alibaba/nacos/api/config/remote/request/ClientConfigMetricRequest.java", "line_number": 50, "column_number": -1, "description": "return from a call to ClientConfigMetricRequest$MetricsKey.<init>()", "snippet": "    public static class MetricsKey implements Serializable {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/api/src/main/java/com/alibaba/nacos/api/config/remote/request/ClientConfigMetricRequest.java", "methodName": "ClientConfigMetricRequest$MetricsKey"}, {"level": 1, "filename": "api/src/main/java/com/alibaba/nacos/api/config/remote/request/ClientConfigMetricRequest.java", "line_number": 71, "column_number": -1, "description": "", "snippet": "            metricsKey.type = type;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/api/src/main/java/com/alibaba/nacos/api/config/remote/request/ClientConfigMetricRequest.java", "methodName": "build"}, {"level": 1, "filename": "api/src/main/java/com/alibaba/nacos/api/config/remote/request/ClientConfigMetricRequest.java", "line_number": 72, "column_number": -1, "description": "", "snippet": "            metricsKey.key = key;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/api/src/main/java/com/alibaba/nacos/api/config/remote/request/ClientConfigMetricRequest.java", "methodName": "build"}, {"level": 1, "filename": "api/src/main/java/com/alibaba/nacos/api/config/remote/request/ClientConfigMetricRequest.java", "line_number": 73, "column_number": -1, "description": "return from a call to ClientConfigMetricRequest$MetricsKey ClientConfigMetricRequest$MetricsKey.build(String,String)", "snippet": "            return metricsKey;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/api/src/main/java/com/alibaba/nacos/api/config/remote/request/ClientConfigMetricRequest.java", "methodName": "build"}], "combined_records": [{"level": 1, "filename": "api/src/main/java/com/alibaba/nacos/api/config/remote/request/ClientConfigMetricRequest.java", "line_number": 43, "column_number": -1, "description": "start of procedure getMetricsKeys()", "snippet": "39.    \n40.    public List<MetricsKey> getMetricsKeys() {\n41.>         return metricsKeys;\n42.    }\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/api/src/main/java/com/alibaba/nacos/api/config/remote/request/ClientConfigMetricRequest.java", "methodName": "getMetricsKeys", "line_numbers": [42, 43]}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey2.java", "line_number": 38, "column_number": -1, "description": "start of procedure getKey(...)", "snippet": "33.    \n34.    public static String getKey(String dataId, String group, String tenant) {\n35.>         StringBuilder sb = new StringBuilder();\n36.>         urlEncode(dataId, sb);\n37.>         sb.append('+');\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey2.java", "methodName": "getKey", "line_numbers": [36, 37, 38]}, {"level": 2, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey2.java", "line_number": 110, "column_number": -1, "description": "start of procedure urlEncode(...)", "snippet": "96.     */\n97.    static void urlEncode(String str, StringBuilder sb) {\n98.>         for (int idx = 0; idx < str.length(); ++idx) {\n99.>             char c = str.charAt(idx);\n100.            if ('+' == c) {\n101.                sb.append(\"%2B\");\n102.            } else if ('%' == c) {\n103.                sb.append(\"%25\");\n104.            } else {\n105.                sb.append(c);\n106.            }\n107.        }\n108.    }\n109.>     \n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey2.java", "methodName": "urlEncode", "line_numbers": [99, 100, 110]}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey2.java", "line_number": 40, "column_number": -1, "description": "Skipping append(...): unknown method", "snippet": "36.        urlEncode(dataId, sb);\n37.        sb.append('+');\n38.>         urlEncode(group, sb);\n39.>         if (StringUtils.isNotEmpty(tenant)) {\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey2.java", "methodName": "getKey", "line_numbers": [39, 40]}, {"level": 2, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey2.java", "line_number": 110, "column_number": -1, "description": "start of procedure urlEncode(...)", "snippet": "96.     */\n97.    static void urlEncode(String str, StringBuilder sb) {\n98.>         for (int idx = 0; idx < str.length(); ++idx) {\n99.>             char c = str.charAt(idx);\n100.            if ('+' == c) {\n101.                sb.append(\"%2B\");\n102.            } else if ('%' == c) {\n103.                sb.append(\"%25\");\n104.            } else {\n105.                sb.append(c);\n106.            }\n107.        }\n108.    }\n109.>     \n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey2.java", "methodName": "urlEncode", "line_numbers": [99, 100, 110]}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey2.java", "line_number": 41, "column_number": -1, "description": "", "snippet": "38.        urlEncode(group, sb);\n39.        if (StringUtils.isNotEmpty(tenant)) {\n40.>             sb.append('+');\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey2.java", "methodName": "getKey", "line_numbers": [41]}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 107, "column_number": -1, "description": "start of procedure isNotEmpty(...)", "snippet": "103.     */\n104.    public static boolean isNotEmpty(String str) {\n105.>         return !isEmpty(str);\n106.    }\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isNotEmpty", "line_numbers": [106, 107]}, {"level": 3, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 117, "column_number": -1, "description": "start of procedure isEmpty(...)", "snippet": "113.     */\n114.    public static boolean isEmpty(String str) {\n115.>         return str == null || str.length() == 0;\n116.    }\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isEmpty", "line_numbers": [116, 117, 117, 117]}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 107, "column_number": -1, "description": "Taking false branch", "snippet": "104.    public static boolean isNotEmpty(String str) {\n105.        return !isEmpty(str);\n106.    }\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isNotEmpty", "line_numbers": [107, 107]}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey2.java", "line_number": 45, "column_number": -1, "description": "Taking false branch", "snippet": "38.        urlEncode(group, sb);\n39.        if (StringUtils.isNotEmpty(tenant)) {\n40.>             sb.append('+');\n41.            urlEncode(tenant, sb);\n42.        }\n43.        return sb.toString();\n44.    }\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey2.java", "methodName": "getKey", "line_numbers": [41, 45]}, {"level": 1, "filename": "api/src/main/java/com/alibaba/nacos/api/config/remote/request/ClientConfigMetricRequest.java", "line_number": 70, "column_number": -1, "description": "start of procedure build(...)", "snippet": "66.         */\n67.        public static MetricsKey build(String type, String key) {\n68.>             MetricsKey metricsKey = new MetricsKey();\n69.>             metricsKey.type = type;\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/api/src/main/java/com/alibaba/nacos/api/config/remote/request/ClientConfigMetricRequest.java", "methodName": "build", "line_numbers": [69, 70]}, {"level": 2, "filename": "api/src/main/java/com/alibaba/nacos/api/config/remote/request/ClientConfigMetricRequest.java", "line_number": 50, "column_number": -1, "description": "start of procedure ClientConfigMetricRequest$MetricsKey()", "snippet": "47.    \n48.    public static class MetricsKey implements Serializable {\n49.> \n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/api/src/main/java/com/alibaba/nacos/api/config/remote/request/ClientConfigMetricRequest.java", "methodName": "ClientConfigMetricRequest$MetricsKey", "line_numbers": [50, 50]}, {"level": 1, "filename": "api/src/main/java/com/alibaba/nacos/api/config/remote/request/ClientConfigMetricRequest.java", "line_number": 73, "column_number": -1, "description": "", "snippet": "68.            MetricsKey metricsKey = new MetricsKey();\n69.            metricsKey.type = type;\n70.>             metricsKey.key = key;\n71.>             return metricsKey;\n72.        }\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/api/src/main/java/com/alibaba/nacos/api/config/remote/request/ClientConfigMetricRequest.java", "methodName": "build", "line_numbers": [71, 72, 73]}], "infer_explore": [{"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/controller/ClientMetricsController.java", "line_number": 140, "column_number": -1, "description": "start of procedure getClientMetrics(...)", "snippet": "137.     @GetMapping(\"/current\")\n138.     @Secured(resource = Constants.METRICS_CONTROLLER_PATH, action = ActionTypes.READ, signType = SignType.CONFIG)\n139. >     public Map<String, Object> getClientMetrics(@RequestParam(\"ip\") String ip,\n140.             @RequestParam(value = \"dataId\", required = false) String dataId,\n141.             @RequestParam(value = \"group\", required = false) String group,\n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/controller/ClientMetricsController.java", "line_number": 144, "column_number": -1, "description": "Skipping HashMap(...): unknown method", "snippet": "141.             @RequestParam(value = \"group\", required = false) String group,\n142.             @RequestParam(value = \"tenant\", required = false) String tenant) {\n143. >         Map<String, Object> metrics = new HashMap<>(16);\n144.         List<Connection> connectionsByIp = connectionManager.getConnectionByIp(ip);\n145.         for (Connection connectionByIp : connectionsByIp) {\n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/controller/ClientMetricsController.java", "line_number": 145, "column_number": -1, "description": "Skipping getConnectionByIp(...): empty list of specs", "snippet": "142.             @RequestParam(value = \"tenant\", required = false) String tenant) {\n143.         Map<String, Object> metrics = new HashMap<>(16);\n144. >         List<Connection> connectionsByIp = connectionManager.getConnectionByIp(ip);\n145.         for (Connection connectionByIp : connectionsByIp) {\n146.             try {\n"}, {"level": 1, "filename": "core/src/main/java/com/alibaba/nacos/core/remote/ConnectionManager.java", "line_number": 181, "column_number": -1, "description": "Definition of getConnectionByIp(...)", "snippet": "178.      * @return connections of the client ip.\n179.      */\n180. >     public List<Connection> getConnectionByIp(String clientIp) {\n181.         Set<Map.Entry<String, Connection>> entries = connections.entrySet();\n182.         List<Connection> connections = new ArrayList<>();\n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/controller/ClientMetricsController.java", "line_number": 146, "column_number": -1, "description": "Taking true branch", "snippet": "143.         Map<String, Object> metrics = new HashMap<>(16);\n144.         List<Connection> connectionsByIp = connectionManager.getConnectionByIp(ip);\n145. >         for (Connection connectionByIp : connectionsByIp) {\n146.             try {\n147.                 ClientConfigMetricRequest clientMetrics = new ClientConfigMetricRequest();\n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/controller/ClientMetricsController.java", "line_number": 148, "column_number": -1, "description": "Skipping ClientConfigMetricRequest(): empty list of specs", "snippet": "145.         for (Connection connectionByIp : connectionsByIp) {\n146.             try {\n147. >                 ClientConfigMetricRequest clientMetrics = new ClientConfigMetricRequest();\n148.                 if (StringUtils.isNotBlank(dataId)) {\n149.                     clientMetrics.getMetricsKeys().add(ClientConfigMetricRequest.MetricsKey\n"}, {"level": 1, "filename": "api/src/main/java/com/alibaba/nacos/api/config/remote/request/ClientConfigMetricRequest.java", "line_number": 33, "column_number": -1, "description": "Definition of ClientConfigMetricRequest()", "snippet": "30.  * @version $Id: ClientConfigMetricRequest.java, v 0.1 2020\u5e7412\u670830\u65e5 9:05 PM liuzunfei Exp $\n31.  */\n32. > public class ClientConfigMetricRequest extends ServerRequest {\n33.     \n34.     private List<MetricsKey> metricsKeys = new ArrayList<>();\n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/controller/ClientMetricsController.java", "line_number": 149, "column_number": -1, "description": "", "snippet": "146.             try {\n147.                 ClientConfigMetricRequest clientMetrics = new ClientConfigMetricRequest();\n148. >                 if (StringUtils.isNotBlank(dataId)) {\n149.                     clientMetrics.getMetricsKeys().add(ClientConfigMetricRequest.MetricsKey\n150.                             .build(CACHE_DATA, GroupKey2.getKey(dataId, group, tenant)));\n"}, {"level": 1, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 96, "column_number": -1, "description": "start of procedure isNotBlank(...)", "snippet": "93.      * @return {@code true} if the string is not empty and not null and not whitespace\n94.      */\n95. >     public static boolean isNotBlank(String str) {\n96.         return !isBlank(str);\n97.     }\n"}, {"level": 1, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 97, "column_number": -1, "description": "", "snippet": "94.      */\n95.     public static boolean isNotBlank(String str) {\n96. >         return !isBlank(str);\n97.     }\n98.     \n"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 77, "column_number": -1, "description": "start of procedure isBlank(...)", "snippet": "74.      * @return {@code true} if the string is empty and null and whitespace\n75.      */\n76. >     public static boolean isBlank(final CharSequence cs) {\n77.         int strLen;\n78.         if (cs == null || (strLen = cs.length()) == 0) {\n"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 79, "column_number": -1, "description": "Taking true branch", "snippet": "76.     public static boolean isBlank(final CharSequence cs) {\n77.         int strLen;\n78. >         if (cs == null || (strLen = cs.length()) == 0) {\n79.             return true;\n80.         }\n"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 79, "column_number": -1, "description": "Taking false branch", "snippet": "76.     public static boolean isBlank(final CharSequence cs) {\n77.         int strLen;\n78. >         if (cs == null || (strLen = cs.length()) == 0) {\n79.             return true;\n80.         }\n"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 82, "column_number": -1, "description": "Taking true branch", "snippet": "79.             return true;\n80.         }\n81. >         for (int i = 0; i < strLen; i++) {\n82.             if (!Character.isWhitespace(cs.charAt(i))) {\n83.                 return false;\n"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 83, "column_number": -1, "description": "Taking true branch", "snippet": "80.         }\n81.         for (int i = 0; i < strLen; i++) {\n82. >             if (!Character.isWhitespace(cs.charAt(i))) {\n83.                 return false;\n84.             }\n"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 84, "column_number": -1, "description": "", "snippet": "81.         for (int i = 0; i < strLen; i++) {\n82.             if (!Character.isWhitespace(cs.charAt(i))) {\n83. >                 return false;\n84.             }\n85.         }\n"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 87, "column_number": -1, "description": "return from a call to boolean StringUtils.isBlank(CharSequence)", "snippet": "84.             }\n85.         }\n86. >         return true;\n87.     }\n88.     \n"}, {"level": 1, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 97, "column_number": -1, "description": "Taking true branch", "snippet": "94.      */\n95.     public static boolean isNotBlank(String str) {\n96. >         return !isBlank(str);\n97.     }\n98.     \n"}, {"level": 1, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 97, "column_number": -1, "description": "return from a call to boolean StringUtils.isNotBlank(String)", "snippet": "94.      */\n95.     public static boolean isNotBlank(String str) {\n96. >         return !isBlank(str);\n97.     }\n98.     \n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/controller/ClientMetricsController.java", "line_number": 149, "column_number": -1, "description": "Taking true branch", "snippet": "146.             try {\n147.                 ClientConfigMetricRequest clientMetrics = new ClientConfigMetricRequest();\n148. >                 if (StringUtils.isNotBlank(dataId)) {\n149.                     clientMetrics.getMetricsKeys().add(ClientConfigMetricRequest.MetricsKey\n150.                             .build(CACHE_DATA, GroupKey2.getKey(dataId, group, tenant)));\n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/controller/ClientMetricsController.java", "line_number": 150, "column_number": -1, "description": "", "snippet": "147.                 ClientConfigMetricRequest clientMetrics = new ClientConfigMetricRequest();\n148.                 if (StringUtils.isNotBlank(dataId)) {\n149. >                     clientMetrics.getMetricsKeys().add(ClientConfigMetricRequest.MetricsKey\n150.                             .build(CACHE_DATA, GroupKey2.getKey(dataId, group, tenant)));\n151.                     clientMetrics.getMetricsKeys().add(ClientConfigMetricRequest.MetricsKey\n"}, {"level": 1, "filename": "api/src/main/java/com/alibaba/nacos/api/config/remote/request/ClientConfigMetricRequest.java", "line_number": 42, "column_number": -1, "description": "start of procedure getMetricsKeys()", "snippet": "39.     }\n40.     \n41. >     public List<MetricsKey> getMetricsKeys() {\n42.         return metricsKeys;\n43.     }\n"}, {"level": 1, "filename": "api/src/main/java/com/alibaba/nacos/api/config/remote/request/ClientConfigMetricRequest.java", "line_number": 43, "column_number": -1, "description": "return from a call to List ClientConfigMetricRequest.getMetricsKeys()", "snippet": "40.     \n41.     public List<MetricsKey> getMetricsKeys() {\n42. >         return metricsKeys;\n43.     }\n44.     \n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/controller/ClientMetricsController.java", "line_number": 151, "column_number": -1, "description": "", "snippet": "148.                 if (StringUtils.isNotBlank(dataId)) {\n149.                     clientMetrics.getMetricsKeys().add(ClientConfigMetricRequest.MetricsKey\n150. >                             .build(CACHE_DATA, GroupKey2.getKey(dataId, group, tenant)));\n151.                     clientMetrics.getMetricsKeys().add(ClientConfigMetricRequest.MetricsKey\n152.                             .build(SNAPSHOT_DATA, GroupKey2.getKey(dataId, group, tenant)));\n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey2.java", "line_number": 36, "column_number": -1, "description": "start of procedure getKey(...)", "snippet": "33.     }\n34.     \n35. >     public static String getKey(String dataId, String group, String tenant) {\n36.         StringBuilder sb = new StringBuilder();\n37.         urlEncode(dataId, sb);\n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey2.java", "line_number": 37, "column_number": -1, "description": "Skipping StringBuilder(): unknown method", "snippet": "34.     \n35.     public static String getKey(String dataId, String group, String tenant) {\n36. >         StringBuilder sb = new StringBuilder();\n37.         urlEncode(dataId, sb);\n38.         sb.append('+');\n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey2.java", "line_number": 38, "column_number": -1, "description": "", "snippet": "35.     public static String getKey(String dataId, String group, String tenant) {\n36.         StringBuilder sb = new StringBuilder();\n37. >         urlEncode(dataId, sb);\n38.         sb.append('+');\n39.         urlEncode(group, sb);\n"}, {"level": 2, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey2.java", "line_number": 99, "column_number": -1, "description": "start of procedure urlEncode(...)", "snippet": "96.      * + -> %2B % -> %25.\n97.      */\n98. >     static void urlEncode(String str, StringBuilder sb) {\n99.         for (int idx = 0; idx < str.length(); ++idx) {\n100.             char c = str.charAt(idx);\n"}, {"level": 2, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey2.java", "line_number": 100, "column_number": -1, "description": "Taking false branch", "snippet": "97.      */\n98.     static void urlEncode(String str, StringBuilder sb) {\n99. >         for (int idx = 0; idx < str.length(); ++idx) {\n100.             char c = str.charAt(idx);\n101.             if ('+' == c) {\n"}, {"level": 2, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey2.java", "line_number": 110, "column_number": -1, "description": "return from a call to void GroupKey2.urlEncode(String,StringBuilder)", "snippet": "107.             }\n108.         }\n109. >     }\n110.     \n111. }\n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey2.java", "line_number": 39, "column_number": -1, "description": "Skipping append(...): unknown method", "snippet": "36.         StringBuilder sb = new StringBuilder();\n37.         urlEncode(dataId, sb);\n38. >         sb.append('+');\n39.         urlEncode(group, sb);\n40.         if (StringUtils.isNotEmpty(tenant)) {\n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey2.java", "line_number": 40, "column_number": -1, "description": "", "snippet": "37.         urlEncode(dataId, sb);\n38.         sb.append('+');\n39. >         urlEncode(group, sb);\n40.         if (StringUtils.isNotEmpty(tenant)) {\n41.             sb.append('+');\n"}, {"level": 2, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey2.java", "line_number": 99, "column_number": -1, "description": "start of procedure urlEncode(...)", "snippet": "96.      * + -> %2B % -> %25.\n97.      */\n98. >     static void urlEncode(String str, StringBuilder sb) {\n99.         for (int idx = 0; idx < str.length(); ++idx) {\n100.             char c = str.charAt(idx);\n"}, {"level": 2, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey2.java", "line_number": 100, "column_number": -1, "description": "Taking false branch", "snippet": "97.      */\n98.     static void urlEncode(String str, StringBuilder sb) {\n99. >         for (int idx = 0; idx < str.length(); ++idx) {\n100.             char c = str.charAt(idx);\n101.             if ('+' == c) {\n"}, {"level": 2, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey2.java", "line_number": 110, "column_number": -1, "description": "return from a call to void GroupKey2.urlEncode(String,StringBuilder)", "snippet": "107.             }\n108.         }\n109. >     }\n110.     \n111. }\n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey2.java", "line_number": 41, "column_number": -1, "description": "", "snippet": "38.         sb.append('+');\n39.         urlEncode(group, sb);\n40. >         if (StringUtils.isNotEmpty(tenant)) {\n41.             sb.append('+');\n42.             urlEncode(tenant, sb);\n"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 106, "column_number": -1, "description": "start of procedure isNotEmpty(...)", "snippet": "103.      * @return {@code true} if the str is not empty or not null\n104.      */\n105. >     public static boolean isNotEmpty(String str) {\n106.         return !isEmpty(str);\n107.     }\n"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 107, "column_number": -1, "description": "", "snippet": "104.      */\n105.     public static boolean isNotEmpty(String str) {\n106. >         return !isEmpty(str);\n107.     }\n108.     \n"}, {"level": 3, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 116, "column_number": -1, "description": "start of procedure isEmpty(...)", "snippet": "113.      * @return {@code true} if the str is empty or null\n114.      */\n115. >     public static boolean isEmpty(String str) {\n116.         return str == null || str.length() == 0;\n117.     }\n"}, {"level": 3, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 117, "column_number": -1, "description": "Taking true branch", "snippet": "114.      */\n115.     public static boolean isEmpty(String str) {\n116. >         return str == null || str.length() == 0;\n117.     }\n118.     \n"}, {"level": 3, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 117, "column_number": -1, "description": "Taking true branch", "snippet": "114.      */\n115.     public static boolean isEmpty(String str) {\n116. >         return str == null || str.length() == 0;\n117.     }\n118.     \n"}, {"level": 3, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 117, "column_number": -1, "description": "return from a call to boolean StringUtils.isEmpty(String)", "snippet": "114.      */\n115.     public static boolean isEmpty(String str) {\n116. >         return str == null || str.length() == 0;\n117.     }\n118.     \n"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 107, "column_number": -1, "description": "Taking false branch", "snippet": "104.      */\n105.     public static boolean isNotEmpty(String str) {\n106. >         return !isEmpty(str);\n107.     }\n108.     \n"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 107, "column_number": -1, "description": "return from a call to boolean StringUtils.isNotEmpty(String)", "snippet": "104.      */\n105.     public static boolean isNotEmpty(String str) {\n106. >         return !isEmpty(str);\n107.     }\n108.     \n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey2.java", "line_number": 41, "column_number": -1, "description": "Taking false branch", "snippet": "38.         sb.append('+');\n39.         urlEncode(group, sb);\n40. >         if (StringUtils.isNotEmpty(tenant)) {\n41.             sb.append('+');\n42.             urlEncode(tenant, sb);\n"}, {"level": 1, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey2.java", "line_number": 45, "column_number": -1, "description": "return from a call to String GroupKey2.getKey(CharSequence,String,String)", "snippet": "42.             urlEncode(tenant, sb);\n43.         }\n44. >         return sb.toString();\n45.     }\n46.     \n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/controller/ClientMetricsController.java", "line_number": 151, "column_number": -1, "description": "", "snippet": "148.                 if (StringUtils.isNotBlank(dataId)) {\n149.                     clientMetrics.getMetricsKeys().add(ClientConfigMetricRequest.MetricsKey\n150. >                             .build(CACHE_DATA, GroupKey2.getKey(dataId, group, tenant)));\n151.                     clientMetrics.getMetricsKeys().add(ClientConfigMetricRequest.MetricsKey\n152.                             .build(SNAPSHOT_DATA, GroupKey2.getKey(dataId, group, tenant)));\n"}, {"level": 1, "filename": "api/src/main/java/com/alibaba/nacos/api/config/remote/request/ClientConfigMetricRequest.java", "line_number": 69, "column_number": -1, "description": "start of procedure build(...)", "snippet": "66.          * @return metric key.\n67.          */\n68. >         public static MetricsKey build(String type, String key) {\n69.             MetricsKey metricsKey = new MetricsKey();\n70.             metricsKey.type = type;\n"}, {"level": 1, "filename": "api/src/main/java/com/alibaba/nacos/api/config/remote/request/ClientConfigMetricRequest.java", "line_number": 70, "column_number": -1, "description": "", "snippet": "67.          */\n68.         public static MetricsKey build(String type, String key) {\n69. >             MetricsKey metricsKey = new MetricsKey();\n70.             metricsKey.type = type;\n71.             metricsKey.key = key;\n"}, {"level": 2, "filename": "api/src/main/java/com/alibaba/nacos/api/config/remote/request/ClientConfigMetricRequest.java", "line_number": 50, "column_number": -1, "description": "start of procedure ClientConfigMetricRequest$MetricsKey()", "snippet": "47.     }\n48.     \n49. >     public static class MetricsKey implements Serializable {\n50. \n51.         private static final long serialVersionUID = -2731160029960311757L;\n"}, {"level": 2, "filename": "api/src/main/java/com/alibaba/nacos/api/config/remote/request/ClientConfigMetricRequest.java", "line_number": 50, "column_number": -1, "description": "return from a call to ClientConfigMetricRequest$MetricsKey.<init>()", "snippet": "47.     }\n48.     \n49. >     public static class MetricsKey implements Serializable {\n50. \n51.         private static final long serialVersionUID = -2731160029960311757L;\n"}, {"level": 1, "filename": "api/src/main/java/com/alibaba/nacos/api/config/remote/request/ClientConfigMetricRequest.java", "line_number": 71, "column_number": -1, "description": "", "snippet": "68.         public static MetricsKey build(String type, String key) {\n69.             MetricsKey metricsKey = new MetricsKey();\n70. >             metricsKey.type = type;\n71.             metricsKey.key = key;\n72.             return metricsKey;\n"}, {"level": 1, "filename": "api/src/main/java/com/alibaba/nacos/api/config/remote/request/ClientConfigMetricRequest.java", "line_number": 72, "column_number": -1, "description": "", "snippet": "69.             MetricsKey metricsKey = new MetricsKey();\n70.             metricsKey.type = type;\n71. >             metricsKey.key = key;\n72.             return metricsKey;\n73.         }\n"}, {"level": 1, "filename": "api/src/main/java/com/alibaba/nacos/api/config/remote/request/ClientConfigMetricRequest.java", "line_number": 73, "column_number": -1, "description": "return from a call to ClientConfigMetricRequest$MetricsKey ClientConfigMetricRequest$MetricsKey.build(String,String)", "snippet": "70.             metricsKey.type = type;\n71.             metricsKey.key = key;\n72. >             return metricsKey;\n73.         }\n74.         \n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/controller/ClientMetricsController.java", "line_number": 150, "column_number": -1, "description": "", "snippet": "147.                 ClientConfigMetricRequest clientMetrics = new ClientConfigMetricRequest();\n148.                 if (StringUtils.isNotBlank(dataId)) {\n149. >                     clientMetrics.getMetricsKeys().add(ClientConfigMetricRequest.MetricsKey\n150.                             .build(CACHE_DATA, GroupKey2.getKey(dataId, group, tenant)));\n151.                     clientMetrics.getMetricsKeys().add(ClientConfigMetricRequest.MetricsKey\n"}]}, {"url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/persistence/src/main/java/com/alibaba/nacos/persistence/repository/extrnal/ExternalStoragePaginationHelperImpl.java", "rawCode": "/*\n * Copyright 1999-2023 Alibaba Group Holding Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.alibaba.nacos.persistence.repository.extrnal;\n\nimport com.alibaba.nacos.persistence.model.Page;\nimport com.alibaba.nacos.persistence.repository.PaginationHelper;\nimport com.alibaba.nacos.persistence.repository.embedded.EmbeddedStorageContextHolder;\nimport com.alibaba.nacos.plugin.datasource.model.MapperResult;\nimport org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.jdbc.core.RowMapper;\n\nimport java.util.List;\n\n/**\n * External Storage Pagination utils.\n *\n * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n */\n\npublic class ExternalStoragePaginationHelperImpl<E> implements PaginationHelper {\n    \n    private final JdbcTemplate jdbcTemplate;\n    \n    public ExternalStoragePaginationHelperImpl(JdbcTemplate jdbcTemplate) {\n        this.jdbcTemplate = jdbcTemplate;\n    }\n    \n    /**\n     * Take paging.\n     *\n     * @param sqlCountRows query total SQL\n     * @param sqlFetchRows query data sql\n     * @param args         query parameters\n     * @param pageNo       page number\n     * @param pageSize     page size\n     * @param rowMapper    {@link RowMapper}\n     * @return Paginated data {@code <E>}\n     */\n    @Override\n    public Page<E> fetchPage(final String sqlCountRows, final String sqlFetchRows, final Object[] args,\n            final int pageNo, final int pageSize, final RowMapper rowMapper) {\n        return fetchPage(sqlCountRows, sqlFetchRows, args, pageNo, pageSize, null, rowMapper);\n    }\n    \n    @Override\n    public Page<E> fetchPage(final String sqlCountRows, final String sqlFetchRows, final Object[] args,\n            final int pageNo, final int pageSize, final Long lastMaxId, final RowMapper rowMapper) {\n        if (pageNo <= 0 || pageSize <= 0) {\n            throw new IllegalArgumentException(\"pageNo and pageSize must be greater than zero\");\n        }\n        \n        // Query the total number of current records.\n        Integer rowCountInt = jdbcTemplate.queryForObject(sqlCountRows, args, Integer.class);\n        if (rowCountInt == null) {\n            throw new IllegalArgumentException(\"fetchPageLimit error\");\n        }\n        \n        // Compute pages count\n        int pageCount = rowCountInt / pageSize;\n        if (rowCountInt > pageSize * pageCount) {\n            pageCount++;\n        }\n        \n        // Create Page object\n        final Page<E> page = new Page<>();\n        page.setPageNumber(pageNo);\n        page.setPagesAvailable(pageCount);\n        page.setTotalCount(rowCountInt);\n        \n        if (pageNo > pageCount) {\n            return page;\n        }\n        \n        List<E> result = jdbcTemplate.query(sqlFetchRows, args, rowMapper);\n        for (E item : result) {\n            page.getPageItems().add(item);\n        }\n        return page;\n    }\n    \n    @Override\n    public Page<E> fetchPageLimit(final String sqlCountRows, final String sqlFetchRows, final Object[] args,\n            final int pageNo, final int pageSize, final RowMapper rowMapper) {\n        if (pageNo <= 0 || pageSize <= 0) {\n            throw new IllegalArgumentException(\"pageNo and pageSize must be greater than zero\");\n        }\n        // Query the total number of current records\n        Integer rowCountInt = jdbcTemplate.queryForObject(sqlCountRows, Integer.class);\n        if (rowCountInt == null) {\n            throw new IllegalArgumentException(\"fetchPageLimit error\");\n        }\n        \n        // Compute pages count\n        int pageCount = rowCountInt / pageSize;\n        if (rowCountInt > pageSize * pageCount) {\n            pageCount++;\n        }\n        \n        // Create Page object\n        final Page<E> page = new Page<>();\n        page.setPageNumber(pageNo);\n        page.setPagesAvailable(pageCount);\n        page.setTotalCount(rowCountInt);\n        \n        if (pageNo > pageCount) {\n            return page;\n        }\n        \n        List<E> result = jdbcTemplate.query(sqlFetchRows, args, rowMapper);\n        for (E item : result) {\n            page.getPageItems().add(item);\n        }\n        return page;\n    }\n    \n    @Override\n    public Page fetchPageLimit(MapperResult countMapperResult, MapperResult mapperResult, int pageNo, int pageSize,\n            RowMapper rowMapper) {\n        return fetchPageLimit(countMapperResult.getSql(), countMapperResult.getParamList().toArray(),\n                mapperResult.getSql(), mapperResult.getParamList().toArray(), pageNo, pageSize, rowMapper);\n    }\n    \n    @Override\n    public Page<E> fetchPageLimit(final String sqlCountRows, final Object[] args1, final String sqlFetchRows,\n            final Object[] args2, final int pageNo, final int pageSize, final RowMapper rowMapper) {\n        if (pageNo <= 0 || pageSize <= 0) {\n            throw new IllegalArgumentException(\"pageNo and pageSize must be greater than zero\");\n        }\n        // Query the total number of current records\n        Integer rowCountInt = jdbcTemplate.queryForObject(sqlCountRows, args1, Integer.class);\n        if (rowCountInt == null) {\n            throw new IllegalArgumentException(\"fetchPageLimit error\");\n        }\n        \n        // Compute pages count\n        int pageCount = rowCountInt / pageSize;\n        if (rowCountInt > pageSize * pageCount) {\n            pageCount++;\n        }\n        \n        // Create Page object\n        final Page<E> page = new Page<>();\n        page.setPageNumber(pageNo);\n        page.setPagesAvailable(pageCount);\n        page.setTotalCount(rowCountInt);\n        \n        if (pageNo > pageCount) {\n            return page;\n        }\n        List<E> result = jdbcTemplate.query(sqlFetchRows, args2, rowMapper);\n        for (E item : result) {\n            page.getPageItems().add(item);\n        }\n        return page;\n    }\n    \n    @Override\n    public Page<E> fetchPageLimit(final String sqlFetchRows, final Object[] args, final int pageNo, final int pageSize,\n            final RowMapper rowMapper) {\n        if (pageNo <= 0 || pageSize <= 0) {\n            throw new IllegalArgumentException(\"pageNo and pageSize must be greater than zero\");\n        }\n        // Create Page object\n        final Page<E> page = new Page<>();\n        List<E> result = jdbcTemplate.query(sqlFetchRows, args, rowMapper);\n        for (E item : result) {\n            page.getPageItems().add(item);\n        }\n        return page;\n    }\n    \n    @Override\n    public void updateLimit(final String sql, final Object[] args) {\n        try {\n            jdbcTemplate.update(sql, args);\n        } finally {\n            EmbeddedStorageContextHolder.cleanAllContext();\n        }\n    }\n    \n    /**\n     * Update limit with response.\n     *\n     * @param sql  sql\n     * @param args args\n     * @return update row count\n     */\n    public int updateLimitWithResponse(final String sql, final Object[] args) {\n        String sqlUpdate = sql;\n        \n        try {\n            return jdbcTemplate.update(sqlUpdate, args);\n        } finally {\n            EmbeddedStorageContextHolder.cleanAllContext();\n        }\n    }\n    \n}\n", "methodName": "com.alibaba.nacos.persistence.repository.extrnal.ExternalStoragePaginationHelperImpl.fetchPageLimit(java.lang.String,java.lang.Object[],java.lang.String,java.lang.Object[],int,int,org.springframework.jdbc.core.RowMapper):com.alibaba.nacos.persistence.model.Page", "exampleID": 30, "dataset": "infer", "filepath": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/extrnal/ExternalStoragePaginationHelperImpl.java", "line": 166, "sink": "getPageItems(page)", "source": "getPageItems(page)", "sourceLine": 166, "qualifier": "$$getPageItems(page)/$ could return null, and is @@dereferenced/@", "steps": [{"line": 81, "source": "getPageItems(page)", "filepath": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "methodName": "Page.getPageItems", "exampleID": 31}], "line_number": 166, "records": [{"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 81, "column_number": -1, "description": "start of procedure getPageItems()", "snippet": "    public List<E> getPageItems() {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "methodName": "getPageItems"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 82, "column_number": -1, "description": "return from a call to List Page.getPageItems()", "snippet": "        return pageItems;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "methodName": "getPageItems"}], "combined_records": [{"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 82, "column_number": -1, "description": "start of procedure getPageItems()", "snippet": "78.    \n79.    public List<E> getPageItems() {\n80.>         return pageItems;\n81.    }\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "methodName": "getPageItems", "line_numbers": [81, 82]}], "infer_explore": [{"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/extrnal/ExternalStoragePaginationHelperImpl.java", "line_number": 138, "column_number": -1, "description": "start of procedure fetchPageLimit(...)", "snippet": "135.     \n136.     @Override\n137. >     public Page<E> fetchPageLimit(final String sqlCountRows, final Object[] args1, final String sqlFetchRows,\n138.             final Object[] args2, final int pageNo, final int pageSize, final RowMapper rowMapper) {\n139.         if (pageNo <= 0 || pageSize <= 0) {\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/extrnal/ExternalStoragePaginationHelperImpl.java", "line_number": 140, "column_number": -1, "description": "Taking true branch", "snippet": "137.     public Page<E> fetchPageLimit(final String sqlCountRows, final Object[] args1, final String sqlFetchRows,\n138.             final Object[] args2, final int pageNo, final int pageSize, final RowMapper rowMapper) {\n139. >         if (pageNo <= 0 || pageSize <= 0) {\n140.             throw new IllegalArgumentException(\"pageNo and pageSize must be greater than zero\");\n141.         }\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/extrnal/ExternalStoragePaginationHelperImpl.java", "line_number": 140, "column_number": -1, "description": "Taking false branch", "snippet": "137.     public Page<E> fetchPageLimit(final String sqlCountRows, final Object[] args1, final String sqlFetchRows,\n138.             final Object[] args2, final int pageNo, final int pageSize, final RowMapper rowMapper) {\n139. >         if (pageNo <= 0 || pageSize <= 0) {\n140.             throw new IllegalArgumentException(\"pageNo and pageSize must be greater than zero\");\n141.         }\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/extrnal/ExternalStoragePaginationHelperImpl.java", "line_number": 144, "column_number": -1, "description": "", "snippet": "141.         }\n142.         // Query the total number of current records\n143. >         Integer rowCountInt = jdbcTemplate.queryForObject(sqlCountRows, args1, Integer.class);\n144.         if (rowCountInt == null) {\n145.             throw new IllegalArgumentException(\"fetchPageLimit error\");\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/extrnal/ExternalStoragePaginationHelperImpl.java", "line_number": 145, "column_number": -1, "description": "Taking false branch", "snippet": "142.         // Query the total number of current records\n143.         Integer rowCountInt = jdbcTemplate.queryForObject(sqlCountRows, args1, Integer.class);\n144. >         if (rowCountInt == null) {\n145.             throw new IllegalArgumentException(\"fetchPageLimit error\");\n146.         }\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/extrnal/ExternalStoragePaginationHelperImpl.java", "line_number": 150, "column_number": -1, "description": "", "snippet": "147.         \n148.         // Compute pages count\n149. >         int pageCount = rowCountInt / pageSize;\n150.         if (rowCountInt > pageSize * pageCount) {\n151.             pageCount++;\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/extrnal/ExternalStoragePaginationHelperImpl.java", "line_number": 151, "column_number": -1, "description": "Taking false branch", "snippet": "148.         // Compute pages count\n149.         int pageCount = rowCountInt / pageSize;\n150. >         if (rowCountInt > pageSize * pageCount) {\n151.             pageCount++;\n152.         }\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/extrnal/ExternalStoragePaginationHelperImpl.java", "line_number": 156, "column_number": -1, "description": "Skipping Page(): empty list of specs", "snippet": "153.         \n154.         // Create Page object\n155. >         final Page<E> page = new Page<>();\n156.         page.setPageNumber(pageNo);\n157.         page.setPagesAvailable(pageCount);\n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 29, "column_number": -1, "description": "Definition of Page()", "snippet": "26.  * @date 2010-5-6\n27.  */\n28. > public class Page<E> implements Serializable {\n29. \n30.     static final long serialVersionUID = 1234544030560484292L;\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/extrnal/ExternalStoragePaginationHelperImpl.java", "line_number": 157, "column_number": -1, "description": "", "snippet": "154.         // Create Page object\n155.         final Page<E> page = new Page<>();\n156. >         page.setPageNumber(pageNo);\n157.         page.setPagesAvailable(pageCount);\n158.         page.setTotalCount(rowCountInt);\n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 53, "column_number": -1, "description": "start of procedure setPageNumber(...)", "snippet": "50.     private List<E> pageItems = new ArrayList<>();\n51.     \n52. >     public void setPageNumber(int pageNumber) {\n53.         this.pageNumber = pageNumber;\n54.     }\n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 54, "column_number": -1, "description": "", "snippet": "51.     \n52.     public void setPageNumber(int pageNumber) {\n53. >         this.pageNumber = pageNumber;\n54.     }\n55.     \n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 55, "column_number": -1, "description": "return from a call to void Page.setPageNumber(int)", "snippet": "52.     public void setPageNumber(int pageNumber) {\n53.         this.pageNumber = pageNumber;\n54. >     }\n55.     \n56.     public void setPagesAvailable(int pagesAvailable) {\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/extrnal/ExternalStoragePaginationHelperImpl.java", "line_number": 158, "column_number": -1, "description": "", "snippet": "155.         final Page<E> page = new Page<>();\n156.         page.setPageNumber(pageNo);\n157. >         page.setPagesAvailable(pageCount);\n158.         page.setTotalCount(rowCountInt);\n159.         \n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 57, "column_number": -1, "description": "start of procedure setPagesAvailable(...)", "snippet": "54.     }\n55.     \n56. >     public void setPagesAvailable(int pagesAvailable) {\n57.         this.pagesAvailable = pagesAvailable;\n58.     }\n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 58, "column_number": -1, "description": "", "snippet": "55.     \n56.     public void setPagesAvailable(int pagesAvailable) {\n57. >         this.pagesAvailable = pagesAvailable;\n58.     }\n59.     \n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 59, "column_number": -1, "description": "return from a call to void Page.setPagesAvailable(int)", "snippet": "56.     public void setPagesAvailable(int pagesAvailable) {\n57.         this.pagesAvailable = pagesAvailable;\n58. >     }\n59.     \n60.     public void setPageItems(List<E> pageItems) {\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/extrnal/ExternalStoragePaginationHelperImpl.java", "line_number": 159, "column_number": -1, "description": "", "snippet": "156.         page.setPageNumber(pageNo);\n157.         page.setPagesAvailable(pageCount);\n158. >         page.setTotalCount(rowCountInt);\n159.         \n160.         if (pageNo > pageCount) {\n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 69, "column_number": -1, "description": "start of procedure setTotalCount(...)", "snippet": "66.     }\n67.     \n68. >     public void setTotalCount(int totalCount) {\n69.         this.totalCount = totalCount;\n70.     }\n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 70, "column_number": -1, "description": "", "snippet": "67.     \n68.     public void setTotalCount(int totalCount) {\n69. >         this.totalCount = totalCount;\n70.     }\n71.     \n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 71, "column_number": -1, "description": "return from a call to void Page.setTotalCount(int)", "snippet": "68.     public void setTotalCount(int totalCount) {\n69.         this.totalCount = totalCount;\n70. >     }\n71.     \n72.     public int getPageNumber() {\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/extrnal/ExternalStoragePaginationHelperImpl.java", "line_number": 161, "column_number": -1, "description": "Taking false branch", "snippet": "158.         page.setTotalCount(rowCountInt);\n159.         \n160. >         if (pageNo > pageCount) {\n161.             return page;\n162.         }\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/extrnal/ExternalStoragePaginationHelperImpl.java", "line_number": 164, "column_number": -1, "description": "Skipping query(...): unknown method", "snippet": "161.             return page;\n162.         }\n163. >         List<E> result = jdbcTemplate.query(sqlFetchRows, args2, rowMapper);\n164.         for (E item : result) {\n165.             page.getPageItems().add(item);\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/extrnal/ExternalStoragePaginationHelperImpl.java", "line_number": 165, "column_number": -1, "description": "Taking true branch", "snippet": "162.         }\n163.         List<E> result = jdbcTemplate.query(sqlFetchRows, args2, rowMapper);\n164. >         for (E item : result) {\n165.             page.getPageItems().add(item);\n166.         }\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/extrnal/ExternalStoragePaginationHelperImpl.java", "line_number": 166, "column_number": -1, "description": "", "snippet": "163.         List<E> result = jdbcTemplate.query(sqlFetchRows, args2, rowMapper);\n164.         for (E item : result) {\n165. >             page.getPageItems().add(item);\n166.         }\n167.         return page;\n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 81, "column_number": -1, "description": "start of procedure getPageItems()", "snippet": "78.     }\n79.     \n80. >     public List<E> getPageItems() {\n81.         return pageItems;\n82.     }\n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 82, "column_number": -1, "description": "return from a call to List Page.getPageItems()", "snippet": "79.     \n80.     public List<E> getPageItems() {\n81. >         return pageItems;\n82.     }\n83. }\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/extrnal/ExternalStoragePaginationHelperImpl.java", "line_number": 166, "column_number": -1, "description": "", "snippet": "163.         List<E> result = jdbcTemplate.query(sqlFetchRows, args2, rowMapper);\n164.         for (E item : result) {\n165. >             page.getPageItems().add(item);\n166.         }\n167.         return page;\n"}]}, {"url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/core/src/main/java/com/alibaba/nacos/core/cluster/lookup/AddressServerMemberLookup.java", "rawCode": "/*\n * Copyright 1999-2018 Alibaba Group Holding Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.alibaba.nacos.core.cluster.lookup;\n\nimport com.alibaba.nacos.api.exception.NacosException;\nimport com.alibaba.nacos.common.http.HttpClientBeanHolder;\nimport com.alibaba.nacos.common.http.client.NacosRestTemplate;\nimport com.alibaba.nacos.common.http.param.Header;\nimport com.alibaba.nacos.common.http.param.Query;\nimport com.alibaba.nacos.common.model.RestResult;\nimport com.alibaba.nacos.common.utils.ExceptionUtil;\nimport com.alibaba.nacos.core.cluster.AbstractMemberLookup;\nimport com.alibaba.nacos.core.cluster.MemberUtil;\nimport com.alibaba.nacos.core.utils.GenericType;\nimport com.alibaba.nacos.core.utils.GlobalExecutor;\nimport com.alibaba.nacos.core.utils.Loggers;\nimport com.alibaba.nacos.sys.env.EnvUtil;\nimport com.alibaba.nacos.common.utils.StringUtils;\n\nimport java.io.Reader;\nimport java.io.StringReader;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport static com.alibaba.nacos.common.constant.RequestUrlConstants.HTTP_PREFIX;\n\n/**\n * Cluster member addressing mode for the address server.\n *\n * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n */\npublic class AddressServerMemberLookup extends AbstractMemberLookup {\n    \n    private final GenericType<String> genericType = new GenericType<String>() { };\n    \n    public String domainName;\n    \n    public String addressPort;\n    \n    public String addressUrl;\n    \n    public String envIdUrl;\n    \n    public String addressServerUrl;\n    \n    private volatile boolean isAddressServerHealth = true;\n    \n    private int addressServerFailCount = 0;\n    \n    private int maxFailCount = 12;\n    \n    private final NacosRestTemplate restTemplate = HttpClientBeanHolder.getNacosRestTemplate(Loggers.CORE);\n    \n    private volatile boolean shutdown = false;\n    \n    private static final String HEALTH_CHECK_FAIL_COUNT_PROPERTY = \"maxHealthCheckFailCount\";\n    \n    private static final String DEFAULT_HEALTH_CHECK_FAIL_COUNT = \"12\";\n    \n    private static final String DEFAULT_SERVER_DOMAIN = \"jmenv.tbsite.net\";\n    \n    private static final String DEFAULT_SERVER_POINT = \"8080\";\n    \n    private static final int DEFAULT_SERVER_RETRY_TIME = 5;\n    \n    private static final long DEFAULT_SYNC_TASK_DELAY_MS = 5_000L;\n    \n    private static final String ADDRESS_SERVER_DOMAIN_ENV = \"address_server_domain\";\n    \n    private static final String ADDRESS_SERVER_DOMAIN_PROPERTY = \"address.server.domain\";\n    \n    private static final String ADDRESS_SERVER_PORT_ENV = \"address_server_port\";\n    \n    private static final String ADDRESS_SERVER_PORT_PROPERTY = \"address.server.port\";\n    \n    private static final String ADDRESS_SERVER_URL_ENV = \"address_server_url\";\n    \n    private static final String ADDRESS_SERVER_URL_PROPERTY = \"address.server.url\";\n    \n    private static final String ADDRESS_SERVER_RETRY_PROPERTY = \"nacos.core.address-server.retry\";\n    \n    @Override\n    public void doStart() throws NacosException {\n        this.maxFailCount = Integer.parseInt(EnvUtil.getProperty(HEALTH_CHECK_FAIL_COUNT_PROPERTY, DEFAULT_HEALTH_CHECK_FAIL_COUNT));\n        initAddressSys();\n        run();\n    }\n    \n    @Override\n    public boolean useAddressServer() {\n        return true;\n    }\n    \n    private void initAddressSys() {\n        String envDomainName = System.getenv(ADDRESS_SERVER_DOMAIN_ENV);\n        if (StringUtils.isBlank(envDomainName)) {\n            domainName = EnvUtil.getProperty(ADDRESS_SERVER_DOMAIN_PROPERTY, DEFAULT_SERVER_DOMAIN);\n        } else {\n            domainName = envDomainName;\n        }\n        String envAddressPort = System.getenv(ADDRESS_SERVER_PORT_ENV);\n        if (StringUtils.isBlank(envAddressPort)) {\n            addressPort = EnvUtil.getProperty(ADDRESS_SERVER_PORT_PROPERTY, DEFAULT_SERVER_POINT);\n        } else {\n            addressPort = envAddressPort;\n        }\n        String envAddressUrl = System.getenv(ADDRESS_SERVER_URL_ENV);\n        if (StringUtils.isBlank(envAddressUrl)) {\n            addressUrl = EnvUtil.getProperty(ADDRESS_SERVER_URL_PROPERTY, EnvUtil.getContextPath() + \"/\" + \"serverlist\");\n        } else {\n            addressUrl = envAddressUrl;\n        }\n        addressServerUrl = HTTP_PREFIX + domainName + \":\" + addressPort + addressUrl;\n        envIdUrl = HTTP_PREFIX + domainName + \":\" + addressPort + \"/env\";\n        \n        Loggers.CORE.info(\"ServerListService address-server port:\" + addressPort);\n        Loggers.CORE.info(\"ADDRESS_SERVER_URL:\" + addressServerUrl);\n    }\n    \n    @SuppressWarnings(\"PMD.UndefineMagicConstantRule\")\n    private void run() throws NacosException {\n        // With the address server, you need to perform a synchronous member node pull at startup\n        // Repeat three times, successfully jump out\n        boolean success = false;\n        Throwable ex = null;\n        int maxRetry = EnvUtil.getProperty(ADDRESS_SERVER_RETRY_PROPERTY, Integer.class, DEFAULT_SERVER_RETRY_TIME);\n        for (int i = 0; i < maxRetry; i++) {\n            try {\n                syncFromAddressUrl();\n                success = true;\n                break;\n            } catch (Throwable e) {\n                ex = e;\n                Loggers.CLUSTER.error(\"[serverlist] exception, error : {}\", ExceptionUtil.getAllExceptionMsg(ex));\n            }\n        }\n        if (!success) {\n            throw new NacosException(NacosException.SERVER_ERROR, ex);\n        }\n        \n        GlobalExecutor.scheduleByCommon(new AddressServerSyncTask(), DEFAULT_SYNC_TASK_DELAY_MS);\n    }\n    \n    @Override\n    protected void doDestroy() throws NacosException {\n        shutdown = true;\n    }\n    \n    @Override\n    public Map<String, Object> info() {\n        Map<String, Object> info = new HashMap<>(4);\n        info.put(\"addressServerHealth\", isAddressServerHealth);\n        info.put(\"addressServerUrl\", addressServerUrl);\n        info.put(\"envIdUrl\", envIdUrl);\n        info.put(\"addressServerFailCount\", addressServerFailCount);\n        return info;\n    }\n    \n    private void syncFromAddressUrl() throws Exception {\n        RestResult<String> result = restTemplate\n                .get(addressServerUrl, Header.EMPTY, Query.EMPTY, genericType.getType());\n        if (result.ok()) {\n            isAddressServerHealth = true;\n            Reader reader = new StringReader(result.getData());\n            try {\n                afterLookup(MemberUtil.readServerConf(EnvUtil.analyzeClusterConf(reader)));\n            } catch (Throwable e) {\n                Loggers.CLUSTER.error(\"[serverlist] exception for analyzeClusterConf, error : {}\",\n                        ExceptionUtil.getAllExceptionMsg(e));\n            }\n            addressServerFailCount = 0;\n        } else {\n            addressServerFailCount++;\n            if (addressServerFailCount >= maxFailCount) {\n                isAddressServerHealth = false;\n            }\n            Loggers.CLUSTER.error(\"[serverlist] failed to get serverlist, error code {}\", result.getCode());\n        }\n    }\n    \n    class AddressServerSyncTask implements Runnable {\n        \n        @Override\n        public void run() {\n            if (shutdown) {\n                return;\n            }\n            try {\n                syncFromAddressUrl();\n            } catch (Throwable ex) {\n                addressServerFailCount++;\n                if (addressServerFailCount >= maxFailCount) {\n                    isAddressServerHealth = false;\n                }\n                Loggers.CLUSTER.error(\"[serverlist] exception, error : {}\", ExceptionUtil.getAllExceptionMsg(ex));\n            } finally {\n                GlobalExecutor.scheduleByCommon(this, DEFAULT_SYNC_TASK_DELAY_MS);\n            }\n        }\n    }\n}\n", "methodName": "com.alibaba.nacos.core.cluster.lookup.AddressServerMemberLookup.run():void", "exampleID": 32, "dataset": "infer", "filepath": "core/src/main/java/com/alibaba/nacos/core/cluster/lookup/AddressServerMemberLookup.java", "line": 152, "sink": "NacosException(...)", "source": "ex", "sourceLine": 139, "qualifier": "$$ex/$ could be null, and is @@dereferenced by NacosException(...)/@", "steps": [{"line": 160, "source": "ex", "filepath": "sys/src/main/java/com/alibaba/nacos/sys/env/EnvUtil.java", "methodName": "EnvUtil.getProperty", "exampleID": 33}], "line_number": 139, "records": [{"level": 1, "filename": "sys/src/main/java/com/alibaba/nacos/sys/env/EnvUtil.java", "line_number": 160, "column_number": -1, "description": "start of procedure getProperty(...)", "snippet": "    public static <T> T getProperty(String key, Class<T> targetType, T defaultValue) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/sys/src/main/java/com/alibaba/nacos/sys/env/EnvUtil.java", "methodName": "getProperty"}, {"level": 1, "filename": "sys/src/main/java/com/alibaba/nacos/sys/env/EnvUtil.java", "line_number": 161, "column_number": -1, "description": "return from a call to Object EnvUtil.getProperty(String,Class,Integer)", "snippet": "        return environment.getProperty(key, targetType, defaultValue);", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/sys/src/main/java/com/alibaba/nacos/sys/env/EnvUtil.java", "methodName": "getProperty"}, {"level": 1, "filename": "api/src/main/java/com/alibaba/nacos/api/exception/NacosException.java", "line_number": 50, "column_number": -1, "description": "start of procedure NacosException(...)", "snippet": "        super(throwable);", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/api/src/main/java/com/alibaba/nacos/api/exception/NacosException.java", "methodName": "NacosException"}, {"level": 1, "filename": "api/src/main/java/com/alibaba/nacos/api/exception/NacosException.java", "line_number": 51, "column_number": -1, "description": "", "snippet": "        this.errCode = errCode;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/api/src/main/java/com/alibaba/nacos/api/exception/NacosException.java", "methodName": "NacosException"}, {"level": 1, "filename": "api/src/main/java/com/alibaba/nacos/api/exception/NacosException.java", "line_number": 52, "column_number": -1, "description": "", "snippet": "        this.setCauseThrowable(throwable);", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/api/src/main/java/com/alibaba/nacos/api/exception/NacosException.java", "methodName": "NacosException"}, {"level": 2, "filename": "api/src/main/java/com/alibaba/nacos/api/exception/NacosException.java", "line_number": 84, "column_number": -1, "description": "start of procedure setCauseThrowable(...)", "snippet": "    public void setCauseThrowable(final Throwable throwable) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/api/src/main/java/com/alibaba/nacos/api/exception/NacosException.java", "methodName": "setCauseThrowable"}, {"level": 2, "filename": "api/src/main/java/com/alibaba/nacos/api/exception/NacosException.java", "line_number": 85, "column_number": -1, "description": "", "snippet": "        this.causeThrowable = this.getCauseThrowable(throwable);", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/api/src/main/java/com/alibaba/nacos/api/exception/NacosException.java", "methodName": "setCauseThrowable"}, {"level": 3, "filename": "api/src/main/java/com/alibaba/nacos/api/exception/NacosException.java", "line_number": 88, "column_number": -1, "description": "start of procedure getCauseThrowable(...)", "snippet": "    private Throwable getCauseThrowable(final Throwable t) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/api/src/main/java/com/alibaba/nacos/api/exception/NacosException.java", "methodName": "getCauseThrowable"}, {"level": 3, "filename": "api/src/main/java/com/alibaba/nacos/api/exception/NacosException.java", "line_number": 89, "column_number": -1, "description": "Skipping getCause(): unknown method", "snippet": "        if (t.getCause() == null) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/api/src/main/java/com/alibaba/nacos/api/exception/NacosException.java", "methodName": "getCauseThrowable"}], "combined_records": [{"level": 1, "filename": "sys/src/main/java/com/alibaba/nacos/sys/env/EnvUtil.java", "line_number": 161, "column_number": -1, "description": "start of procedure getProperty(...)", "snippet": "157.    \n158.    public static <T> T getProperty(String key, Class<T> targetType, T defaultValue) {\n159.>         return environment.getProperty(key, targetType, defaultValue);\n160.    }\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/sys/src/main/java/com/alibaba/nacos/sys/env/EnvUtil.java", "methodName": "getProperty", "line_numbers": [160, 161]}, {"level": 1, "filename": "api/src/main/java/com/alibaba/nacos/api/exception/NacosException.java", "line_number": 52, "column_number": -1, "description": "start of procedure NacosException(...)", "snippet": "47.    public NacosException(final int errCode, final Throwable throwable) {\n48.        super(throwable);\n49.>         this.errCode = errCode;\n50.>         this.setCauseThrowable(throwable);\n51.    }\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/api/src/main/java/com/alibaba/nacos/api/exception/NacosException.java", "methodName": "NacosException", "line_numbers": [50, 51, 52]}, {"level": 2, "filename": "api/src/main/java/com/alibaba/nacos/api/exception/NacosException.java", "line_number": 85, "column_number": -1, "description": "start of procedure setCauseThrowable(...)", "snippet": "81.    \n82.    public void setCauseThrowable(final Throwable throwable) {\n83.>         this.causeThrowable = this.getCauseThrowable(throwable);\n84.    }\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/api/src/main/java/com/alibaba/nacos/api/exception/NacosException.java", "methodName": "setCauseThrowable", "line_numbers": [84, 85]}, {"level": 3, "filename": "api/src/main/java/com/alibaba/nacos/api/exception/NacosException.java", "line_number": 89, "column_number": -1, "description": "start of procedure getCauseThrowable(...)", "snippet": "85.    \n86.    private Throwable getCauseThrowable(final Throwable t) {\n87.>         if (t.getCause() == null) {\n88.>             return t;\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/api/src/main/java/com/alibaba/nacos/api/exception/NacosException.java", "methodName": "getCauseThrowable", "line_numbers": [88, 89]}], "infer_explore": [{"level": 0, "filename": "core/src/main/java/com/alibaba/nacos/core/cluster/lookup/AddressServerMemberLookup.java", "line_number": 135, "column_number": -1, "description": "start of procedure run()", "snippet": "132.     \n133.     @SuppressWarnings(\"PMD.UndefineMagicConstantRule\")\n134. >     private void run() throws NacosException {\n135.         // With the address server, you need to perform a synchronous member node pull at startup\n136.         // Repeat three times, successfully jump out\n"}, {"level": 0, "filename": "core/src/main/java/com/alibaba/nacos/core/cluster/lookup/AddressServerMemberLookup.java", "line_number": 138, "column_number": -1, "description": "", "snippet": "135.         // With the address server, you need to perform a synchronous member node pull at startup\n136.         // Repeat three times, successfully jump out\n137. >         boolean success = false;\n138.         Throwable ex = null;\n139.         int maxRetry = EnvUtil.getProperty(ADDRESS_SERVER_RETRY_PROPERTY, Integer.class, DEFAULT_SERVER_RETRY_TIME);\n"}, {"level": 0, "filename": "core/src/main/java/com/alibaba/nacos/core/cluster/lookup/AddressServerMemberLookup.java", "line_number": 139, "column_number": -1, "description": "", "snippet": "136.         // Repeat three times, successfully jump out\n137.         boolean success = false;\n138. >         Throwable ex = null;\n139.         int maxRetry = EnvUtil.getProperty(ADDRESS_SERVER_RETRY_PROPERTY, Integer.class, DEFAULT_SERVER_RETRY_TIME);\n140.         for (int i = 0; i < maxRetry; i++) {\n"}, {"level": 0, "filename": "core/src/main/java/com/alibaba/nacos/core/cluster/lookup/AddressServerMemberLookup.java", "line_number": 140, "column_number": -1, "description": "", "snippet": "137.         boolean success = false;\n138.         Throwable ex = null;\n139. >         int maxRetry = EnvUtil.getProperty(ADDRESS_SERVER_RETRY_PROPERTY, Integer.class, DEFAULT_SERVER_RETRY_TIME);\n140.         for (int i = 0; i < maxRetry; i++) {\n141.             try {\n"}, {"level": 1, "filename": "sys/src/main/java/com/alibaba/nacos/sys/env/EnvUtil.java", "line_number": 160, "column_number": -1, "description": "start of procedure getProperty(...)", "snippet": "157.     }\n158.     \n159. >     public static <T> T getProperty(String key, Class<T> targetType, T defaultValue) {\n160.         return environment.getProperty(key, targetType, defaultValue);\n161.     }\n"}, {"level": 1, "filename": "sys/src/main/java/com/alibaba/nacos/sys/env/EnvUtil.java", "line_number": 161, "column_number": -1, "description": "return from a call to Object EnvUtil.getProperty(String,Class,Integer)", "snippet": "158.     \n159.     public static <T> T getProperty(String key, Class<T> targetType, T defaultValue) {\n160. >         return environment.getProperty(key, targetType, defaultValue);\n161.     }\n162.     \n"}, {"level": 0, "filename": "core/src/main/java/com/alibaba/nacos/core/cluster/lookup/AddressServerMemberLookup.java", "line_number": 140, "column_number": -1, "description": "", "snippet": "137.         boolean success = false;\n138.         Throwable ex = null;\n139. >         int maxRetry = EnvUtil.getProperty(ADDRESS_SERVER_RETRY_PROPERTY, Integer.class, DEFAULT_SERVER_RETRY_TIME);\n140.         for (int i = 0; i < maxRetry; i++) {\n141.             try {\n"}, {"level": 0, "filename": "core/src/main/java/com/alibaba/nacos/core/cluster/lookup/AddressServerMemberLookup.java", "line_number": 141, "column_number": -1, "description": "Taking false branch", "snippet": "138.         Throwable ex = null;\n139.         int maxRetry = EnvUtil.getProperty(ADDRESS_SERVER_RETRY_PROPERTY, Integer.class, DEFAULT_SERVER_RETRY_TIME);\n140. >         for (int i = 0; i < maxRetry; i++) {\n141.             try {\n142.                 syncFromAddressUrl();\n"}, {"level": 0, "filename": "core/src/main/java/com/alibaba/nacos/core/cluster/lookup/AddressServerMemberLookup.java", "line_number": 151, "column_number": -1, "description": "Taking true branch", "snippet": "148.             }\n149.         }\n150. >         if (!success) {\n151.             throw new NacosException(NacosException.SERVER_ERROR, ex);\n152.         }\n"}, {"level": 0, "filename": "core/src/main/java/com/alibaba/nacos/core/cluster/lookup/AddressServerMemberLookup.java", "line_number": 152, "column_number": -1, "description": "", "snippet": "149.         }\n150.         if (!success) {\n151. >             throw new NacosException(NacosException.SERVER_ERROR, ex);\n152.         }\n153.         \n"}, {"level": 1, "filename": "api/src/main/java/com/alibaba/nacos/api/exception/NacosException.java", "line_number": 50, "column_number": -1, "description": "start of procedure NacosException(...)", "snippet": "47.     \n48.     public NacosException(final int errCode, final Throwable throwable) {\n49. >         super(throwable);\n50.         this.errCode = errCode;\n51.         this.setCauseThrowable(throwable);\n"}, {"level": 1, "filename": "api/src/main/java/com/alibaba/nacos/api/exception/NacosException.java", "line_number": 51, "column_number": -1, "description": "", "snippet": "48.     public NacosException(final int errCode, final Throwable throwable) {\n49.         super(throwable);\n50. >         this.errCode = errCode;\n51.         this.setCauseThrowable(throwable);\n52.     }\n"}, {"level": 1, "filename": "api/src/main/java/com/alibaba/nacos/api/exception/NacosException.java", "line_number": 52, "column_number": -1, "description": "", "snippet": "49.         super(throwable);\n50.         this.errCode = errCode;\n51. >         this.setCauseThrowable(throwable);\n52.     }\n53.     \n"}, {"level": 2, "filename": "api/src/main/java/com/alibaba/nacos/api/exception/NacosException.java", "line_number": 84, "column_number": -1, "description": "start of procedure setCauseThrowable(...)", "snippet": "81.     }\n82.     \n83. >     public void setCauseThrowable(final Throwable throwable) {\n84.         this.causeThrowable = this.getCauseThrowable(throwable);\n85.     }\n"}, {"level": 2, "filename": "api/src/main/java/com/alibaba/nacos/api/exception/NacosException.java", "line_number": 85, "column_number": -1, "description": "", "snippet": "82.     \n83.     public void setCauseThrowable(final Throwable throwable) {\n84. >         this.causeThrowable = this.getCauseThrowable(throwable);\n85.     }\n86.     \n"}, {"level": 3, "filename": "api/src/main/java/com/alibaba/nacos/api/exception/NacosException.java", "line_number": 88, "column_number": -1, "description": "start of procedure getCauseThrowable(...)", "snippet": "85.     }\n86.     \n87. >     private Throwable getCauseThrowable(final Throwable t) {\n88.         if (t.getCause() == null) {\n89.             return t;\n"}, {"level": 3, "filename": "api/src/main/java/com/alibaba/nacos/api/exception/NacosException.java", "line_number": 89, "column_number": -1, "description": "Skipping getCause(): unknown method", "snippet": "86.     \n87.     private Throwable getCauseThrowable(final Throwable t) {\n88. >         if (t.getCause() == null) {\n89.             return t;\n90.         }\n"}]}, {"url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/EmbeddedPaginationHelperImpl.java", "rawCode": "/*\n * Copyright 1999-2023 Alibaba Group Holding Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.alibaba.nacos.persistence.repository.embedded;\n\nimport com.alibaba.nacos.persistence.model.Page;\nimport com.alibaba.nacos.persistence.repository.PaginationHelper;\nimport com.alibaba.nacos.persistence.repository.embedded.operate.DatabaseOperate;\nimport com.alibaba.nacos.plugin.datasource.model.MapperResult;\nimport org.springframework.jdbc.core.RowMapper;\n\nimport java.util.List;\n\n/**\n * Pagination Utils For Apache Derby.\n *\n * @param <E> Generic class\n * @author boyan\n * @date 2010-5-6\n */\npublic class EmbeddedPaginationHelperImpl<E> implements PaginationHelper {\n    \n    private final DatabaseOperate databaseOperate;\n    \n    public EmbeddedPaginationHelperImpl(DatabaseOperate databaseOperate) {\n        this.databaseOperate = databaseOperate;\n    }\n    \n    /**\n     * Take paging.\n     *\n     * @param sqlCountRows Query total SQL\n     * @param sqlFetchRows Query data sql\n     * @param args         query args\n     * @param pageNo       page number\n     * @param pageSize     page size\n     * @param rowMapper    Entity mapping\n     * @return Paging data\n     */\n    @Override\n    public Page<E> fetchPage(final String sqlCountRows, final String sqlFetchRows, final Object[] args,\n            final int pageNo, final int pageSize, final RowMapper rowMapper) {\n        return fetchPage(sqlCountRows, sqlFetchRows, args, pageNo, pageSize, null, rowMapper);\n    }\n    \n    @Override\n    public Page<E> fetchPage(final String sqlCountRows, final String sqlFetchRows, final Object[] args,\n            final int pageNo, final int pageSize, final Long lastMaxId, final RowMapper rowMapper) {\n        if (pageNo <= 0 || pageSize <= 0) {\n            throw new IllegalArgumentException(\"pageNo and pageSize must be greater than zero\");\n        }\n        \n        // Query the total number of current records\n        Integer rowCountInt = databaseOperate.queryOne(sqlCountRows, args, Integer.class);\n        if (rowCountInt == null) {\n            throw new IllegalArgumentException(\"fetchPageLimit error\");\n        }\n        \n        // Count pages\n        int pageCount = rowCountInt / pageSize;\n        if (rowCountInt > pageSize * pageCount) {\n            pageCount++;\n        }\n        \n        // Create Page object\n        final Page<E> page = new Page<>();\n        page.setPageNumber(pageNo);\n        page.setPagesAvailable(pageCount);\n        page.setTotalCount(rowCountInt);\n        \n        if (pageNo > pageCount) {\n            return page;\n        }\n        \n        List<E> result = databaseOperate.queryMany(sqlFetchRows, args, rowMapper);\n        for (E item : result) {\n            page.getPageItems().add(item);\n        }\n        return page;\n    }\n    \n    @Override\n    public Page<E> fetchPageLimit(final String sqlCountRows, final String sqlFetchRows, final Object[] args,\n            final int pageNo, final int pageSize, final RowMapper rowMapper) {\n        if (pageNo <= 0 || pageSize <= 0) {\n            throw new IllegalArgumentException(\"pageNo and pageSize must be greater than zero\");\n        }\n        // Query the total number of current records\n        Integer rowCountInt = databaseOperate.queryOne(sqlCountRows, Integer.class);\n        if (rowCountInt == null) {\n            throw new IllegalArgumentException(\"fetchPageLimit error\");\n        }\n        \n        // Count pages\n        int pageCount = rowCountInt / pageSize;\n        if (rowCountInt > pageSize * pageCount) {\n            pageCount++;\n        }\n        \n        // Create Page object\n        final Page<E> page = new Page<>();\n        page.setPageNumber(pageNo);\n        page.setPagesAvailable(pageCount);\n        page.setTotalCount(rowCountInt);\n        \n        if (pageNo > pageCount) {\n            return page;\n        }\n        \n        List<E> result = databaseOperate.queryMany(sqlFetchRows, args, rowMapper);\n        for (E item : result) {\n            page.getPageItems().add(item);\n        }\n        return page;\n    }\n    \n    @Override\n    public Page<E> fetchPageLimit(final String sqlCountRows, final Object[] args1, final String sqlFetchRows,\n            final Object[] args2, final int pageNo, final int pageSize, final RowMapper rowMapper) {\n        if (pageNo <= 0 || pageSize <= 0) {\n            throw new IllegalArgumentException(\"pageNo and pageSize must be greater than zero\");\n        }\n        // Query the total number of current records\n        Integer rowCountInt = databaseOperate.queryOne(sqlCountRows, args1, Integer.class);\n        if (rowCountInt == null) {\n            throw new IllegalArgumentException(\"fetchPageLimit error\");\n        }\n        \n        // Count pages\n        int pageCount = rowCountInt / pageSize;\n        if (rowCountInt > pageSize * pageCount) {\n            pageCount++;\n        }\n        \n        // Create Page object\n        final Page<E> page = new Page<>();\n        page.setPageNumber(pageNo);\n        page.setPagesAvailable(pageCount);\n        page.setTotalCount(rowCountInt);\n        \n        if (pageNo > pageCount) {\n            return page;\n        }\n        \n        List<E> result = databaseOperate.queryMany(sqlFetchRows, args2, rowMapper);\n        for (E item : result) {\n            page.getPageItems().add(item);\n        }\n        return page;\n    }\n    \n    @Override\n    public Page<E> fetchPageLimit(final String sqlFetchRows, final Object[] args, final int pageNo, final int pageSize,\n            final RowMapper rowMapper) {\n        if (pageNo <= 0 || pageSize <= 0) {\n            throw new IllegalArgumentException(\"pageNo and pageSize must be greater than zero\");\n        }\n        // Create Page object\n        final Page<E> page = new Page<>();\n        \n        List<E> result = databaseOperate.queryMany(sqlFetchRows, args, rowMapper);\n        for (E item : result) {\n            page.getPageItems().add(item);\n        }\n        return page;\n    }\n    \n    @Override\n    public Page fetchPageLimit(MapperResult countMapperResult, MapperResult mapperResult, int pageNo, int pageSize,\n            RowMapper rowMapper) {\n        return fetchPageLimit(countMapperResult.getSql(), countMapperResult.getParamList().toArray(),\n                mapperResult.getSql(), mapperResult.getParamList().toArray(), pageNo, pageSize, rowMapper);\n    }\n    \n    @Override\n    public void updateLimit(final String sql, final Object[] args) {\n        EmbeddedStorageContextHolder.addSqlContext(sql, args);\n        try {\n            databaseOperate.update(EmbeddedStorageContextHolder.getCurrentSqlContext());\n        } finally {\n            EmbeddedStorageContextHolder.cleanAllContext();\n        }\n    }\n    \n}\n", "methodName": "com.alibaba.nacos.persistence.repository.embedded.EmbeddedPaginationHelperImpl.fetchPageLimit(java.lang.String,java.lang.Object[],java.lang.String,java.lang.Object[],int,int,org.springframework.jdbc.core.RowMapper):com.alibaba.nacos.persistence.model.Page", "exampleID": 34, "dataset": "infer", "filepath": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/EmbeddedPaginationHelperImpl.java", "line": 160, "sink": "getPageItems(page)", "source": "getPageItems(page)", "sourceLine": 160, "qualifier": "$$getPageItems(page)/$ could return null, and is @@dereferenced/@", "steps": [{"line": 81, "source": "getPageItems(page)", "filepath": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "methodName": "Page.getPageItems", "exampleID": 35}], "line_number": 160, "records": [{"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 81, "column_number": -1, "description": "start of procedure getPageItems()", "snippet": "    public List<E> getPageItems() {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "methodName": "getPageItems"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 82, "column_number": -1, "description": "return from a call to List Page.getPageItems()", "snippet": "        return pageItems;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "methodName": "getPageItems"}], "combined_records": [{"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 82, "column_number": -1, "description": "start of procedure getPageItems()", "snippet": "78.    \n79.    public List<E> getPageItems() {\n80.>         return pageItems;\n81.    }\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "methodName": "getPageItems", "line_numbers": [81, 82]}], "infer_explore": [{"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/EmbeddedPaginationHelperImpl.java", "line_number": 131, "column_number": -1, "description": "start of procedure fetchPageLimit(...)", "snippet": "128.     \n129.     @Override\n130. >     public Page<E> fetchPageLimit(final String sqlCountRows, final Object[] args1, final String sqlFetchRows,\n131.             final Object[] args2, final int pageNo, final int pageSize, final RowMapper rowMapper) {\n132.         if (pageNo <= 0 || pageSize <= 0) {\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/EmbeddedPaginationHelperImpl.java", "line_number": 133, "column_number": -1, "description": "Taking true branch", "snippet": "130.     public Page<E> fetchPageLimit(final String sqlCountRows, final Object[] args1, final String sqlFetchRows,\n131.             final Object[] args2, final int pageNo, final int pageSize, final RowMapper rowMapper) {\n132. >         if (pageNo <= 0 || pageSize <= 0) {\n133.             throw new IllegalArgumentException(\"pageNo and pageSize must be greater than zero\");\n134.         }\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/EmbeddedPaginationHelperImpl.java", "line_number": 133, "column_number": -1, "description": "Taking false branch", "snippet": "130.     public Page<E> fetchPageLimit(final String sqlCountRows, final Object[] args1, final String sqlFetchRows,\n131.             final Object[] args2, final int pageNo, final int pageSize, final RowMapper rowMapper) {\n132. >         if (pageNo <= 0 || pageSize <= 0) {\n133.             throw new IllegalArgumentException(\"pageNo and pageSize must be greater than zero\");\n134.         }\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/EmbeddedPaginationHelperImpl.java", "line_number": 137, "column_number": -1, "description": "Skipping queryOne(...): unknown method", "snippet": "134.         }\n135.         // Query the total number of current records\n136. >         Integer rowCountInt = databaseOperate.queryOne(sqlCountRows, args1, Integer.class);\n137.         if (rowCountInt == null) {\n138.             throw new IllegalArgumentException(\"fetchPageLimit error\");\n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/operate/DatabaseOperate.java", "line_number": -1, "column_number": -1, "description": "Definition of queryOne(...)", "snippet": ""}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/EmbeddedPaginationHelperImpl.java", "line_number": 137, "column_number": -1, "description": "", "snippet": "134.         }\n135.         // Query the total number of current records\n136. >         Integer rowCountInt = databaseOperate.queryOne(sqlCountRows, args1, Integer.class);\n137.         if (rowCountInt == null) {\n138.             throw new IllegalArgumentException(\"fetchPageLimit error\");\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/EmbeddedPaginationHelperImpl.java", "line_number": 138, "column_number": -1, "description": "Taking false branch", "snippet": "135.         // Query the total number of current records\n136.         Integer rowCountInt = databaseOperate.queryOne(sqlCountRows, args1, Integer.class);\n137. >         if (rowCountInt == null) {\n138.             throw new IllegalArgumentException(\"fetchPageLimit error\");\n139.         }\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/EmbeddedPaginationHelperImpl.java", "line_number": 143, "column_number": -1, "description": "", "snippet": "140.         \n141.         // Count pages\n142. >         int pageCount = rowCountInt / pageSize;\n143.         if (rowCountInt > pageSize * pageCount) {\n144.             pageCount++;\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/EmbeddedPaginationHelperImpl.java", "line_number": 144, "column_number": -1, "description": "Taking false branch", "snippet": "141.         // Count pages\n142.         int pageCount = rowCountInt / pageSize;\n143. >         if (rowCountInt > pageSize * pageCount) {\n144.             pageCount++;\n145.         }\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/EmbeddedPaginationHelperImpl.java", "line_number": 149, "column_number": -1, "description": "Skipping Page(): empty list of specs", "snippet": "146.         \n147.         // Create Page object\n148. >         final Page<E> page = new Page<>();\n149.         page.setPageNumber(pageNo);\n150.         page.setPagesAvailable(pageCount);\n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 29, "column_number": -1, "description": "Definition of Page()", "snippet": "26.  * @date 2010-5-6\n27.  */\n28. > public class Page<E> implements Serializable {\n29. \n30.     static final long serialVersionUID = 1234544030560484292L;\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/EmbeddedPaginationHelperImpl.java", "line_number": 150, "column_number": -1, "description": "", "snippet": "147.         // Create Page object\n148.         final Page<E> page = new Page<>();\n149. >         page.setPageNumber(pageNo);\n150.         page.setPagesAvailable(pageCount);\n151.         page.setTotalCount(rowCountInt);\n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 53, "column_number": -1, "description": "start of procedure setPageNumber(...)", "snippet": "50.     private List<E> pageItems = new ArrayList<>();\n51.     \n52. >     public void setPageNumber(int pageNumber) {\n53.         this.pageNumber = pageNumber;\n54.     }\n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 54, "column_number": -1, "description": "", "snippet": "51.     \n52.     public void setPageNumber(int pageNumber) {\n53. >         this.pageNumber = pageNumber;\n54.     }\n55.     \n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 55, "column_number": -1, "description": "return from a call to void Page.setPageNumber(int)", "snippet": "52.     public void setPageNumber(int pageNumber) {\n53.         this.pageNumber = pageNumber;\n54. >     }\n55.     \n56.     public void setPagesAvailable(int pagesAvailable) {\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/EmbeddedPaginationHelperImpl.java", "line_number": 151, "column_number": -1, "description": "", "snippet": "148.         final Page<E> page = new Page<>();\n149.         page.setPageNumber(pageNo);\n150. >         page.setPagesAvailable(pageCount);\n151.         page.setTotalCount(rowCountInt);\n152.         \n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 57, "column_number": -1, "description": "start of procedure setPagesAvailable(...)", "snippet": "54.     }\n55.     \n56. >     public void setPagesAvailable(int pagesAvailable) {\n57.         this.pagesAvailable = pagesAvailable;\n58.     }\n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 58, "column_number": -1, "description": "", "snippet": "55.     \n56.     public void setPagesAvailable(int pagesAvailable) {\n57. >         this.pagesAvailable = pagesAvailable;\n58.     }\n59.     \n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 59, "column_number": -1, "description": "return from a call to void Page.setPagesAvailable(int)", "snippet": "56.     public void setPagesAvailable(int pagesAvailable) {\n57.         this.pagesAvailable = pagesAvailable;\n58. >     }\n59.     \n60.     public void setPageItems(List<E> pageItems) {\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/EmbeddedPaginationHelperImpl.java", "line_number": 152, "column_number": -1, "description": "", "snippet": "149.         page.setPageNumber(pageNo);\n150.         page.setPagesAvailable(pageCount);\n151. >         page.setTotalCount(rowCountInt);\n152.         \n153.         if (pageNo > pageCount) {\n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 69, "column_number": -1, "description": "start of procedure setTotalCount(...)", "snippet": "66.     }\n67.     \n68. >     public void setTotalCount(int totalCount) {\n69.         this.totalCount = totalCount;\n70.     }\n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 70, "column_number": -1, "description": "", "snippet": "67.     \n68.     public void setTotalCount(int totalCount) {\n69. >         this.totalCount = totalCount;\n70.     }\n71.     \n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 71, "column_number": -1, "description": "return from a call to void Page.setTotalCount(int)", "snippet": "68.     public void setTotalCount(int totalCount) {\n69.         this.totalCount = totalCount;\n70. >     }\n71.     \n72.     public int getPageNumber() {\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/EmbeddedPaginationHelperImpl.java", "line_number": 154, "column_number": -1, "description": "Taking false branch", "snippet": "151.         page.setTotalCount(rowCountInt);\n152.         \n153. >         if (pageNo > pageCount) {\n154.             return page;\n155.         }\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/EmbeddedPaginationHelperImpl.java", "line_number": 158, "column_number": -1, "description": "Skipping queryMany(...): unknown method", "snippet": "155.         }\n156.         \n157. >         List<E> result = databaseOperate.queryMany(sqlFetchRows, args2, rowMapper);\n158.         for (E item : result) {\n159.             page.getPageItems().add(item);\n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/operate/DatabaseOperate.java", "line_number": -1, "column_number": -1, "description": "Definition of queryMany(...)", "snippet": ""}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/EmbeddedPaginationHelperImpl.java", "line_number": 159, "column_number": -1, "description": "Taking true branch", "snippet": "156.         \n157.         List<E> result = databaseOperate.queryMany(sqlFetchRows, args2, rowMapper);\n158. >         for (E item : result) {\n159.             page.getPageItems().add(item);\n160.         }\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/EmbeddedPaginationHelperImpl.java", "line_number": 160, "column_number": -1, "description": "", "snippet": "157.         List<E> result = databaseOperate.queryMany(sqlFetchRows, args2, rowMapper);\n158.         for (E item : result) {\n159. >             page.getPageItems().add(item);\n160.         }\n161.         return page;\n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 81, "column_number": -1, "description": "start of procedure getPageItems()", "snippet": "78.     }\n79.     \n80. >     public List<E> getPageItems() {\n81.         return pageItems;\n82.     }\n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 82, "column_number": -1, "description": "return from a call to List Page.getPageItems()", "snippet": "79.     \n80.     public List<E> getPageItems() {\n81. >         return pageItems;\n82.     }\n83. }\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/EmbeddedPaginationHelperImpl.java", "line_number": 160, "column_number": -1, "description": "", "snippet": "157.         List<E> result = databaseOperate.queryMany(sqlFetchRows, args2, rowMapper);\n158.         for (E item : result) {\n159. >             page.getPageItems().add(item);\n160.         }\n161.         return page;\n"}]}, {"url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/auth/ram/utils/SpasAdapter.java", "rawCode": "/*\n * Copyright 1999-2021 Alibaba Group Holding Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.alibaba.nacos.client.auth.ram.utils;\n\nimport com.alibaba.nacos.api.common.Constants;\nimport com.alibaba.nacos.client.auth.ram.identify.CredentialService;\nimport com.alibaba.nacos.common.codec.Base64;\nimport com.alibaba.nacos.common.utils.StringUtils;\n\nimport javax.crypto.Mac;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.SecretKeySpec;\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * adapt spas interface.\n *\n * @author Nacos\n */\npublic class SpasAdapter {\n    \n    private static final String TIMESTAMP_HEADER = \"Timestamp\";\n    \n    private static final String SIGNATURE_HEADER = \"Spas-Signature\";\n    \n    private static final String GROUP_KEY = \"group\";\n    \n    public static final String TENANT_KEY = \"tenant\";\n    \n    private static final String SHA_ENCRYPT = \"HmacSHA1\";\n    \n    public static Map<String, String> getSignHeaders(String resource, String secretKey) {\n        Map<String, String> header = new HashMap<>(2);\n        String timeStamp = String.valueOf(System.currentTimeMillis());\n        header.put(TIMESTAMP_HEADER, timeStamp);\n        if (secretKey != null) {\n            String signature;\n            if (StringUtils.isBlank(resource)) {\n                signature = signWithHmacSha1Encrypt(timeStamp, secretKey);\n            } else {\n                signature = signWithHmacSha1Encrypt(resource + \"+\" + timeStamp, secretKey);\n            }\n            header.put(SIGNATURE_HEADER, signature);\n        }\n        return header;\n    }\n    \n    public static Map<String, String> getSignHeaders(String groupKey, String tenant, String secretKey) {\n        if (StringUtils.isBlank(groupKey) && StringUtils.isBlank(tenant)) {\n            return null;\n        }\n        \n        String resource = \"\";\n        if (StringUtils.isNotBlank(groupKey) && StringUtils.isNotBlank(tenant)) {\n            resource = tenant + \"+\" + groupKey;\n        } else {\n            if (!StringUtils.isBlank(groupKey)) {\n                resource = groupKey;\n            }\n        }\n        return getSignHeaders(resource, secretKey);\n    }\n    \n    public static Map<String, String> getSignHeaders(Map<String, String> paramValues, String secretKey) {\n        if (null == paramValues) {\n            return null;\n        }\n        \n        String resource = \"\";\n        if (paramValues.containsKey(TENANT_KEY) && paramValues.containsKey(GROUP_KEY)) {\n            resource = paramValues.get(TENANT_KEY) + \"+\" + paramValues.get(GROUP_KEY);\n        } else {\n            if (!StringUtils.isBlank(paramValues.get(GROUP_KEY))) {\n                resource = paramValues.get(GROUP_KEY);\n            }\n        }\n        return getSignHeaders(resource, secretKey);\n    }\n    \n    public static String getSk() {\n        return CredentialService.getInstance().getCredential().getSecretKey();\n    }\n    \n    public static String getAk() {\n        return CredentialService.getInstance().getCredential().getAccessKey();\n    }\n    \n    public static void freeCredentialInstance() {\n        CredentialService.freeInstance();\n    }\n    \n    /**\n     * Sign with hmac SHA1 encrtpt.\n     *\n     * @param encryptText encrypt text\n     * @param encryptKey  encrypt key\n     * @return base64 string\n     */\n    public static String signWithHmacSha1Encrypt(String encryptText, String encryptKey) {\n        try {\n            byte[] data = encryptKey.getBytes(Constants.ENCODE);\n            // Construct a key according to the given byte array, and the second parameter specifies the name of a key algorithm\n            SecretKey secretKey = new SecretKeySpec(data, SHA_ENCRYPT);\n            // Generate a Mac object specifying Mac algorithm\n            Mac mac = Mac.getInstance(SHA_ENCRYPT);\n            // Initialize the Mac object with the given key\n            mac.init(secretKey);\n            byte[] text = encryptText.getBytes(Constants.ENCODE);\n            byte[] textFinal = mac.doFinal(text);\n            // Complete Mac operation, base64 encoding, convert byte array to string\n            return new String(Base64.encodeBase64(textFinal), Constants.ENCODE);\n        } catch (Exception e) {\n            throw new RuntimeException(\"signWithhmacSHA1Encrypt fail\", e);\n        }\n    }\n}\n", "methodName": "com.alibaba.nacos.client.auth.ram.utils.SpasAdapter.getAk():java.lang.String", "exampleID": 36, "dataset": "infer", "filepath": "client/src/main/java/com/alibaba/nacos/client/auth/ram/utils/SpasAdapter.java", "line": 100, "sink": "getInstance()", "source": "getInstance()", "sourceLine": 100, "qualifier": "$$getInstance()/$ could return null, and is @@dereferenced/@", "steps": [{"line": 57, "source": "getInstance()", "filepath": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "methodName": "CredentialService.getInstance", "exampleID": 37}], "line_number": 100, "records": [{"level": 1, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 57, "column_number": -1, "description": "start of procedure getInstance()", "snippet": "        return getInstance(null);", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "methodName": "getInstance"}, {"level": 2, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 60, "column_number": -1, "description": "start of procedure getInstance(...)", "snippet": "    public static CredentialService getInstance(String appName) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "methodName": "getInstance"}, {"level": 2, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 61, "column_number": -1, "description": "Taking false branch", "snippet": "        String key = appName != null ? appName : IdentifyConstants.NO_APP_NAME;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "methodName": "getInstance"}, {"level": 2, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 62, "column_number": -1, "description": "Taking true branch", "snippet": "        if (INSTANCES.get(key) == null) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "methodName": "getInstance"}, {"level": 2, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 63, "column_number": -1, "description": "", "snippet": "            synchronized (CredentialService.INSTANCES) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "methodName": "getInstance"}, {"level": 2, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 64, "column_number": -1, "description": "Taking true branch", "snippet": "                if (INSTANCES.get(key) == null) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "methodName": "getInstance"}, {"level": 2, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 65, "column_number": -1, "description": "", "snippet": "                    CredentialService instance = new CredentialService(appName);", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "methodName": "getInstance"}, {"level": 3, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 45, "column_number": -1, "description": "start of procedure CredentialService(...)", "snippet": "    private CredentialService(String appName) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "methodName": "CredentialService"}, {"level": 3, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 39, "column_number": -1, "description": "", "snippet": "    private Credentials credentials = new Credentials();", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "methodName": "CredentialService"}, {"level": 4, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/Credentials.java", "line_number": 39, "column_number": -1, "description": "start of procedure Credentials()", "snippet": "        this(null, null, null);", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/Credentials.java", "methodName": "Credentials"}, {"level": 5, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/Credentials.java", "line_number": 32, "column_number": -1, "description": "start of procedure Credentials(...)", "snippet": "    public Credentials(String accessKey, String secretKey, String tenantId) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/Credentials.java", "methodName": "Credentials"}, {"level": 5, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/Credentials.java", "line_number": 33, "column_number": -1, "description": "", "snippet": "        this.accessKey = accessKey;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/Credentials.java", "methodName": "Credentials"}, {"level": 5, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/Credentials.java", "line_number": 34, "column_number": -1, "description": "", "snippet": "        this.secretKey = secretKey;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/Credentials.java", "methodName": "Credentials"}, {"level": 5, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/Credentials.java", "line_number": 35, "column_number": -1, "description": "", "snippet": "        this.tenantId = tenantId;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/Credentials.java", "methodName": "Credentials"}, {"level": 5, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/Credentials.java", "line_number": 36, "column_number": -1, "description": "return from a call to Credentials.<init>(String,String,String)", "snippet": "    }", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/Credentials.java", "methodName": "Credentials"}, {"level": 4, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/Credentials.java", "line_number": 40, "column_number": -1, "description": "return from a call to Credentials.<init>()", "snippet": "    }", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/Credentials.java", "methodName": "Credentials"}, {"level": 3, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 39, "column_number": -1, "description": "", "snippet": "    private Credentials credentials = new Credentials();", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "methodName": "CredentialService"}, {"level": 3, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 46, "column_number": -1, "description": "Taking true branch", "snippet": "        if (appName == null) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "methodName": "CredentialService"}, {"level": 3, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 47, "column_number": -1, "description": "Skipping getProperty(...): unknown method", "snippet": "            String value = NacosClientProperties.PROTOTYPE.getProperty(IdentifyConstants.PROJECT_NAME_PROPERTY);", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "methodName": "CredentialService"}, {"level": 3, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 48, "column_number": -1, "description": "", "snippet": "            if (StringUtils.isNotEmpty(value)) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "methodName": "CredentialService"}, {"level": 4, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 106, "column_number": -1, "description": "start of procedure isNotEmpty(...)", "snippet": "    public static boolean isNotEmpty(String str) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isNotEmpty"}, {"level": 4, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 107, "column_number": -1, "description": "", "snippet": "        return !isEmpty(str);", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isNotEmpty"}, {"level": 5, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 116, "column_number": -1, "description": "start of procedure isEmpty(...)", "snippet": "    public static boolean isEmpty(String str) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isEmpty"}, {"level": 5, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 117, "column_number": -1, "description": "Taking true branch", "snippet": "        return str == null || str.length() == 0;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isEmpty"}, {"level": 5, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 117, "column_number": -1, "description": "Taking true branch", "snippet": "        return str == null || str.length() == 0;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isEmpty"}, {"level": 5, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 117, "column_number": -1, "description": "return from a call to boolean StringUtils.isEmpty(String)", "snippet": "        return str == null || str.length() == 0;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isEmpty"}, {"level": 4, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 107, "column_number": -1, "description": "Taking false branch", "snippet": "        return !isEmpty(str);", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isNotEmpty"}, {"level": 4, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 107, "column_number": -1, "description": "return from a call to boolean StringUtils.isNotEmpty(String)", "snippet": "        return !isEmpty(str);", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isNotEmpty"}, {"level": 3, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 48, "column_number": -1, "description": "Taking false branch", "snippet": "            if (StringUtils.isNotEmpty(value)) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "methodName": "CredentialService"}, {"level": 3, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 52, "column_number": -1, "description": "", "snippet": "        this.appName = appName;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "methodName": "CredentialService"}, {"level": 3, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 53, "column_number": -1, "description": "Skipping CredentialWatcher(...): empty list of specs", "snippet": "        watcher = new CredentialWatcher(appName, this);", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "methodName": "CredentialService"}, {"level": 4, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialWatcher.java", "line_number": 57, "column_number": -1, "description": "Definition of CredentialWatcher(...)", "snippet": "    public CredentialWatcher(String appName, CredentialService serviceInstance) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialWatcher.java", "methodName": "CredentialService"}, {"level": 3, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 53, "column_number": -1, "description": "", "snippet": "        watcher = new CredentialWatcher(appName, this);", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "methodName": "CredentialService"}, {"level": 3, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 54, "column_number": -1, "description": "return from a call to CredentialService.<init>(String)", "snippet": "    }", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "methodName": "CredentialService"}, {"level": 2, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 66, "column_number": -1, "description": "Skipping putIfAbsent(...): unknown method", "snippet": "                    INSTANCES.putIfAbsent(key, instance);", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "methodName": "getInstance"}, {"level": 2, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 68, "column_number": -1, "description": "", "snippet": "            }", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "methodName": "getInstance"}, {"level": 2, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 70, "column_number": -1, "description": "return from a call to CredentialService CredentialService.getInstance(String)", "snippet": "        return INSTANCES.get(key);", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "methodName": "getInstance"}, {"level": 1, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 57, "column_number": -1, "description": "return from a call to CredentialService CredentialService.getInstance()", "snippet": "        return getInstance(null);", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "methodName": "getInstance"}], "combined_records": [{"level": 1, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 57, "column_number": -1, "description": "start of procedure getInstance()", "snippet": "54.    public static CredentialService getInstance() {\n55.        return getInstance(null);\n56.    }\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "methodName": "getInstance", "line_numbers": [57]}, {"level": 2, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 65, "column_number": -1, "description": "start of procedure getInstance(...)", "snippet": "57.    \n58.    public static CredentialService getInstance(String appName) {\n59.>         String key = appName != null ? appName : IdentifyConstants.NO_APP_NAME;\n60.>         if (INSTANCES.get(key) == null) {\n61.>             synchronized (CredentialService.INSTANCES) {\n62.>                 if (INSTANCES.get(key) == null) {\n63.>                     CredentialService instance = new CredentialService(appName);\n64.>                     INSTANCES.putIfAbsent(key, instance);\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "methodName": "getInstance", "line_numbers": [60, 61, 62, 63, 64, 65]}, {"level": 3, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 39, "column_number": -1, "description": "start of procedure CredentialService(...)", "snippet": "36.    \n37.    private Credentials credentials = new Credentials();\n38.>     \n39.    private final CredentialWatcher watcher;\n40.    \n41.    private CredentialListener listener;\n42.    \n43.    private CredentialService(String appName) {\n44.>         if (appName == null) {\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "methodName": "CredentialService", "line_numbers": [45, 39]}, {"level": 4, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/Credentials.java", "line_number": 39, "column_number": -1, "description": "start of procedure Credentials()", "snippet": "36.    public Credentials() {\n37.        this(null, null, null);\n38.    }\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/Credentials.java", "methodName": "Credentials", "line_numbers": [39]}, {"level": 5, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/Credentials.java", "line_number": 36, "column_number": -1, "description": "start of procedure Credentials(...)", "snippet": "29.    \n30.    public Credentials(String accessKey, String secretKey, String tenantId) {\n31.>         this.accessKey = accessKey;\n32.>         this.secretKey = secretKey;\n33.>         this.tenantId = tenantId;\n34.    }\n35.>     \n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/Credentials.java", "methodName": "Credentials", "line_numbers": [32, 33, 34, 35, 36]}, {"level": 4, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/Credentials.java", "line_number": 40, "column_number": -1, "description": "return from a call to Credentials.<init>()", "snippet": "37.        this(null, null, null);\n38.    }\n39.>     \n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/Credentials.java", "methodName": "Credentials", "line_numbers": [40]}, {"level": 3, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 48, "column_number": -1, "description": "", "snippet": "36.    \n37.    private Credentials credentials = new Credentials();\n38.>     \n39.    private final CredentialWatcher watcher;\n40.    \n41.    private CredentialListener listener;\n42.    \n43.    private CredentialService(String appName) {\n44.        if (appName == null) {\n45.>             String value = NacosClientProperties.PROTOTYPE.getProperty(IdentifyConstants.PROJECT_NAME_PROPERTY);\n46.>             if (StringUtils.isNotEmpty(value)) {\n47.>                 appName = value;\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "methodName": "CredentialService", "line_numbers": [39, 46, 47, 48]}, {"level": 4, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 107, "column_number": -1, "description": "start of procedure isNotEmpty(...)", "snippet": "103.     */\n104.    public static boolean isNotEmpty(String str) {\n105.>         return !isEmpty(str);\n106.    }\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isNotEmpty", "line_numbers": [106, 107]}, {"level": 5, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 117, "column_number": -1, "description": "start of procedure isEmpty(...)", "snippet": "113.     */\n114.    public static boolean isEmpty(String str) {\n115.>         return str == null || str.length() == 0;\n116.    }\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isEmpty", "line_numbers": [116, 117, 117, 117]}, {"level": 4, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 107, "column_number": -1, "description": "Taking false branch", "snippet": "104.    public static boolean isNotEmpty(String str) {\n105.        return !isEmpty(str);\n106.    }\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isNotEmpty", "line_numbers": [107, 107]}, {"level": 3, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 53, "column_number": -1, "description": "Taking false branch", "snippet": "45.            String value = NacosClientProperties.PROTOTYPE.getProperty(IdentifyConstants.PROJECT_NAME_PROPERTY);\n46.            if (StringUtils.isNotEmpty(value)) {\n47.>                 appName = value;\n48.            }\n49.        }\n50.        this.appName = appName;\n51.>         watcher = new CredentialWatcher(appName, this);\n52.    }\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "methodName": "CredentialService", "line_numbers": [48, 52, 53]}, {"level": 4, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialWatcher.java", "line_number": 57, "column_number": -1, "description": "Definition of CredentialWatcher(...)", "snippet": "54.    \n55.    public CredentialWatcher(String appName, CredentialService serviceInstance) {\n56.>         this.appName = appName;\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialWatcher.java", "methodName": "CredentialService", "line_numbers": [57]}, {"level": 3, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 54, "column_number": -1, "description": "", "snippet": "50.        this.appName = appName;\n51.        watcher = new CredentialWatcher(appName, this);\n52.    }\n53.>     \n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "methodName": "CredentialService", "line_numbers": [53, 54]}, {"level": 2, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 70, "column_number": -1, "description": "Skipping putIfAbsent(...): unknown method", "snippet": "63.                    CredentialService instance = new CredentialService(appName);\n64.                    INSTANCES.putIfAbsent(key, instance);\n65.                }\n66.            }\n67.        }\n68.        return INSTANCES.get(key);\n69.    }\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "methodName": "getInstance", "line_numbers": [66, 68, 70]}, {"level": 1, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 57, "column_number": -1, "description": "return from a call to CredentialService CredentialService.getInstance()", "snippet": "54.    public static CredentialService getInstance() {\n55.        return getInstance(null);\n56.    }\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "methodName": "getInstance", "line_numbers": [57]}], "infer_explore": [{"level": 0, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/utils/SpasAdapter.java", "line_number": 99, "column_number": -1, "description": "start of procedure getAk()", "snippet": "96.     }\n97.     \n98. >     public static String getAk() {\n99.         return CredentialService.getInstance().getCredential().getAccessKey();\n100.     }\n"}, {"level": 0, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/utils/SpasAdapter.java", "line_number": 100, "column_number": -1, "description": "", "snippet": "97.     \n98.     public static String getAk() {\n99. >         return CredentialService.getInstance().getCredential().getAccessKey();\n100.     }\n101.     \n"}, {"level": 1, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 57, "column_number": -1, "description": "start of procedure getInstance()", "snippet": "54.     \n55.     public static CredentialService getInstance() {\n56. >         return getInstance(null);\n57.     }\n58.     \n"}, {"level": 2, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 60, "column_number": -1, "description": "start of procedure getInstance(...)", "snippet": "57.     }\n58.     \n59. >     public static CredentialService getInstance(String appName) {\n60.         String key = appName != null ? appName : IdentifyConstants.NO_APP_NAME;\n61.         if (INSTANCES.get(key) == null) {\n"}, {"level": 2, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 61, "column_number": -1, "description": "Taking false branch", "snippet": "58.     \n59.     public static CredentialService getInstance(String appName) {\n60. >         String key = appName != null ? appName : IdentifyConstants.NO_APP_NAME;\n61.         if (INSTANCES.get(key) == null) {\n62.             synchronized (CredentialService.INSTANCES) {\n"}, {"level": 2, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 62, "column_number": -1, "description": "Taking true branch", "snippet": "59.     public static CredentialService getInstance(String appName) {\n60.         String key = appName != null ? appName : IdentifyConstants.NO_APP_NAME;\n61. >         if (INSTANCES.get(key) == null) {\n62.             synchronized (CredentialService.INSTANCES) {\n63.                 if (INSTANCES.get(key) == null) {\n"}, {"level": 2, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 63, "column_number": -1, "description": "", "snippet": "60.         String key = appName != null ? appName : IdentifyConstants.NO_APP_NAME;\n61.         if (INSTANCES.get(key) == null) {\n62. >             synchronized (CredentialService.INSTANCES) {\n63.                 if (INSTANCES.get(key) == null) {\n64.                     CredentialService instance = new CredentialService(appName);\n"}, {"level": 2, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 64, "column_number": -1, "description": "Taking true branch", "snippet": "61.         if (INSTANCES.get(key) == null) {\n62.             synchronized (CredentialService.INSTANCES) {\n63. >                 if (INSTANCES.get(key) == null) {\n64.                     CredentialService instance = new CredentialService(appName);\n65.                     INSTANCES.putIfAbsent(key, instance);\n"}, {"level": 2, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 65, "column_number": -1, "description": "", "snippet": "62.             synchronized (CredentialService.INSTANCES) {\n63.                 if (INSTANCES.get(key) == null) {\n64. >                     CredentialService instance = new CredentialService(appName);\n65.                     INSTANCES.putIfAbsent(key, instance);\n66.                 }\n"}, {"level": 3, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 45, "column_number": -1, "description": "start of procedure CredentialService(...)", "snippet": "42.     private CredentialListener listener;\n43.     \n44. >     private CredentialService(String appName) {\n45.         if (appName == null) {\n46.             String value = NacosClientProperties.PROTOTYPE.getProperty(IdentifyConstants.PROJECT_NAME_PROPERTY);\n"}, {"level": 3, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 39, "column_number": -1, "description": "", "snippet": "36.     private final String appName;\n37.     \n38. >     private Credentials credentials = new Credentials();\n39.     \n40.     private final CredentialWatcher watcher;\n"}, {"level": 4, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/Credentials.java", "line_number": 39, "column_number": -1, "description": "start of procedure Credentials()", "snippet": "36.     \n37.     public Credentials() {\n38. >         this(null, null, null);\n39.     }\n40.     \n"}, {"level": 5, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/Credentials.java", "line_number": 32, "column_number": -1, "description": "start of procedure Credentials(...)", "snippet": "29.     private volatile String tenantId;\n30.     \n31. >     public Credentials(String accessKey, String secretKey, String tenantId) {\n32.         this.accessKey = accessKey;\n33.         this.secretKey = secretKey;\n"}, {"level": 5, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/Credentials.java", "line_number": 33, "column_number": -1, "description": "", "snippet": "30.     \n31.     public Credentials(String accessKey, String secretKey, String tenantId) {\n32. >         this.accessKey = accessKey;\n33.         this.secretKey = secretKey;\n34.         this.tenantId = tenantId;\n"}, {"level": 5, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/Credentials.java", "line_number": 34, "column_number": -1, "description": "", "snippet": "31.     public Credentials(String accessKey, String secretKey, String tenantId) {\n32.         this.accessKey = accessKey;\n33. >         this.secretKey = secretKey;\n34.         this.tenantId = tenantId;\n35.     }\n"}, {"level": 5, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/Credentials.java", "line_number": 35, "column_number": -1, "description": "", "snippet": "32.         this.accessKey = accessKey;\n33.         this.secretKey = secretKey;\n34. >         this.tenantId = tenantId;\n35.     }\n36.     \n"}, {"level": 5, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/Credentials.java", "line_number": 36, "column_number": -1, "description": "return from a call to Credentials.<init>(String,String,String)", "snippet": "33.         this.secretKey = secretKey;\n34.         this.tenantId = tenantId;\n35. >     }\n36.     \n37.     public Credentials() {\n"}, {"level": 4, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/Credentials.java", "line_number": 40, "column_number": -1, "description": "return from a call to Credentials.<init>()", "snippet": "37.     public Credentials() {\n38.         this(null, null, null);\n39. >     }\n40.     \n41.     @Override\n"}, {"level": 3, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 39, "column_number": -1, "description": "", "snippet": "36.     private final String appName;\n37.     \n38. >     private Credentials credentials = new Credentials();\n39.     \n40.     private final CredentialWatcher watcher;\n"}, {"level": 3, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 46, "column_number": -1, "description": "Taking true branch", "snippet": "43.     \n44.     private CredentialService(String appName) {\n45. >         if (appName == null) {\n46.             String value = NacosClientProperties.PROTOTYPE.getProperty(IdentifyConstants.PROJECT_NAME_PROPERTY);\n47.             if (StringUtils.isNotEmpty(value)) {\n"}, {"level": 3, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 47, "column_number": -1, "description": "Skipping getProperty(...): unknown method", "snippet": "44.     private CredentialService(String appName) {\n45.         if (appName == null) {\n46. >             String value = NacosClientProperties.PROTOTYPE.getProperty(IdentifyConstants.PROJECT_NAME_PROPERTY);\n47.             if (StringUtils.isNotEmpty(value)) {\n48.                 appName = value;\n"}, {"level": 4, "filename": "client/src/main/java/com/alibaba/nacos/client/env/NacosClientProperties.java", "line_number": -1, "column_number": -1, "description": "Definition of getProperty(...)", "snippet": ""}, {"level": 3, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 48, "column_number": -1, "description": "", "snippet": "45.         if (appName == null) {\n46.             String value = NacosClientProperties.PROTOTYPE.getProperty(IdentifyConstants.PROJECT_NAME_PROPERTY);\n47. >             if (StringUtils.isNotEmpty(value)) {\n48.                 appName = value;\n49.             }\n"}, {"level": 4, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 106, "column_number": -1, "description": "start of procedure isNotEmpty(...)", "snippet": "103.      * @return {@code true} if the str is not empty or not null\n104.      */\n105. >     public static boolean isNotEmpty(String str) {\n106.         return !isEmpty(str);\n107.     }\n"}, {"level": 4, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 107, "column_number": -1, "description": "", "snippet": "104.      */\n105.     public static boolean isNotEmpty(String str) {\n106. >         return !isEmpty(str);\n107.     }\n108.     \n"}, {"level": 5, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 116, "column_number": -1, "description": "start of procedure isEmpty(...)", "snippet": "113.      * @return {@code true} if the str is empty or null\n114.      */\n115. >     public static boolean isEmpty(String str) {\n116.         return str == null || str.length() == 0;\n117.     }\n"}, {"level": 5, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 117, "column_number": -1, "description": "Taking true branch", "snippet": "114.      */\n115.     public static boolean isEmpty(String str) {\n116. >         return str == null || str.length() == 0;\n117.     }\n118.     \n"}, {"level": 5, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 117, "column_number": -1, "description": "Taking true branch", "snippet": "114.      */\n115.     public static boolean isEmpty(String str) {\n116. >         return str == null || str.length() == 0;\n117.     }\n118.     \n"}, {"level": 5, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 117, "column_number": -1, "description": "return from a call to boolean StringUtils.isEmpty(String)", "snippet": "114.      */\n115.     public static boolean isEmpty(String str) {\n116. >         return str == null || str.length() == 0;\n117.     }\n118.     \n"}, {"level": 4, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 107, "column_number": -1, "description": "Taking false branch", "snippet": "104.      */\n105.     public static boolean isNotEmpty(String str) {\n106. >         return !isEmpty(str);\n107.     }\n108.     \n"}, {"level": 4, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 107, "column_number": -1, "description": "return from a call to boolean StringUtils.isNotEmpty(String)", "snippet": "104.      */\n105.     public static boolean isNotEmpty(String str) {\n106. >         return !isEmpty(str);\n107.     }\n108.     \n"}, {"level": 3, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 48, "column_number": -1, "description": "Taking false branch", "snippet": "45.         if (appName == null) {\n46.             String value = NacosClientProperties.PROTOTYPE.getProperty(IdentifyConstants.PROJECT_NAME_PROPERTY);\n47. >             if (StringUtils.isNotEmpty(value)) {\n48.                 appName = value;\n49.             }\n"}, {"level": 3, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 52, "column_number": -1, "description": "", "snippet": "49.             }\n50.         }\n51. >         this.appName = appName;\n52.         watcher = new CredentialWatcher(appName, this);\n53.     }\n"}, {"level": 3, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 53, "column_number": -1, "description": "Skipping CredentialWatcher(...): empty list of specs", "snippet": "50.         }\n51.         this.appName = appName;\n52. >         watcher = new CredentialWatcher(appName, this);\n53.     }\n54.     \n"}, {"level": 4, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialWatcher.java", "line_number": 57, "column_number": -1, "description": "Definition of CredentialWatcher(...)", "snippet": "54.     private final ScheduledExecutorService executor;\n55.     \n56. >     public CredentialWatcher(String appName, CredentialService serviceInstance) {\n57.         this.appName = appName;\n58.         this.serviceInstance = serviceInstance;\n"}, {"level": 3, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 53, "column_number": -1, "description": "", "snippet": "50.         }\n51.         this.appName = appName;\n52. >         watcher = new CredentialWatcher(appName, this);\n53.     }\n54.     \n"}, {"level": 3, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 54, "column_number": -1, "description": "return from a call to CredentialService.<init>(String)", "snippet": "51.         this.appName = appName;\n52.         watcher = new CredentialWatcher(appName, this);\n53. >     }\n54.     \n55.     public static CredentialService getInstance() {\n"}, {"level": 2, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 66, "column_number": -1, "description": "Skipping putIfAbsent(...): unknown method", "snippet": "63.                 if (INSTANCES.get(key) == null) {\n64.                     CredentialService instance = new CredentialService(appName);\n65. >                     INSTANCES.putIfAbsent(key, instance);\n66.                 }\n67.             }\n"}, {"level": 2, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 68, "column_number": -1, "description": "", "snippet": "65.                     INSTANCES.putIfAbsent(key, instance);\n66.                 }\n67. >             }\n68.         }\n69.         return INSTANCES.get(key);\n"}, {"level": 2, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 70, "column_number": -1, "description": "return from a call to CredentialService CredentialService.getInstance(String)", "snippet": "67.             }\n68.         }\n69. >         return INSTANCES.get(key);\n70.     }\n71.     \n"}, {"level": 1, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 57, "column_number": -1, "description": "return from a call to CredentialService CredentialService.getInstance()", "snippet": "54.     \n55.     public static CredentialService getInstance() {\n56. >         return getInstance(null);\n57.     }\n58.     \n"}, {"level": 0, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/utils/SpasAdapter.java", "line_number": 100, "column_number": -1, "description": "", "snippet": "97.     \n98.     public static String getAk() {\n99. >         return CredentialService.getInstance().getCredential().getAccessKey();\n100.     }\n101.     \n"}]}, {"url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/persistence/src/main/java/com/alibaba/nacos/persistence/repository/extrnal/ExternalStoragePaginationHelperImpl.java", "rawCode": "/*\n * Copyright 1999-2023 Alibaba Group Holding Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.alibaba.nacos.persistence.repository.extrnal;\n\nimport com.alibaba.nacos.persistence.model.Page;\nimport com.alibaba.nacos.persistence.repository.PaginationHelper;\nimport com.alibaba.nacos.persistence.repository.embedded.EmbeddedStorageContextHolder;\nimport com.alibaba.nacos.plugin.datasource.model.MapperResult;\nimport org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.jdbc.core.RowMapper;\n\nimport java.util.List;\n\n/**\n * External Storage Pagination utils.\n *\n * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n */\n\npublic class ExternalStoragePaginationHelperImpl<E> implements PaginationHelper {\n    \n    private final JdbcTemplate jdbcTemplate;\n    \n    public ExternalStoragePaginationHelperImpl(JdbcTemplate jdbcTemplate) {\n        this.jdbcTemplate = jdbcTemplate;\n    }\n    \n    /**\n     * Take paging.\n     *\n     * @param sqlCountRows query total SQL\n     * @param sqlFetchRows query data sql\n     * @param args         query parameters\n     * @param pageNo       page number\n     * @param pageSize     page size\n     * @param rowMapper    {@link RowMapper}\n     * @return Paginated data {@code <E>}\n     */\n    @Override\n    public Page<E> fetchPage(final String sqlCountRows, final String sqlFetchRows, final Object[] args,\n            final int pageNo, final int pageSize, final RowMapper rowMapper) {\n        return fetchPage(sqlCountRows, sqlFetchRows, args, pageNo, pageSize, null, rowMapper);\n    }\n    \n    @Override\n    public Page<E> fetchPage(final String sqlCountRows, final String sqlFetchRows, final Object[] args,\n            final int pageNo, final int pageSize, final Long lastMaxId, final RowMapper rowMapper) {\n        if (pageNo <= 0 || pageSize <= 0) {\n            throw new IllegalArgumentException(\"pageNo and pageSize must be greater than zero\");\n        }\n        \n        // Query the total number of current records.\n        Integer rowCountInt = jdbcTemplate.queryForObject(sqlCountRows, args, Integer.class);\n        if (rowCountInt == null) {\n            throw new IllegalArgumentException(\"fetchPageLimit error\");\n        }\n        \n        // Compute pages count\n        int pageCount = rowCountInt / pageSize;\n        if (rowCountInt > pageSize * pageCount) {\n            pageCount++;\n        }\n        \n        // Create Page object\n        final Page<E> page = new Page<>();\n        page.setPageNumber(pageNo);\n        page.setPagesAvailable(pageCount);\n        page.setTotalCount(rowCountInt);\n        \n        if (pageNo > pageCount) {\n            return page;\n        }\n        \n        List<E> result = jdbcTemplate.query(sqlFetchRows, args, rowMapper);\n        for (E item : result) {\n            page.getPageItems().add(item);\n        }\n        return page;\n    }\n    \n    @Override\n    public Page<E> fetchPageLimit(final String sqlCountRows, final String sqlFetchRows, final Object[] args,\n            final int pageNo, final int pageSize, final RowMapper rowMapper) {\n        if (pageNo <= 0 || pageSize <= 0) {\n            throw new IllegalArgumentException(\"pageNo and pageSize must be greater than zero\");\n        }\n        // Query the total number of current records\n        Integer rowCountInt = jdbcTemplate.queryForObject(sqlCountRows, Integer.class);\n        if (rowCountInt == null) {\n            throw new IllegalArgumentException(\"fetchPageLimit error\");\n        }\n        \n        // Compute pages count\n        int pageCount = rowCountInt / pageSize;\n        if (rowCountInt > pageSize * pageCount) {\n            pageCount++;\n        }\n        \n        // Create Page object\n        final Page<E> page = new Page<>();\n        page.setPageNumber(pageNo);\n        page.setPagesAvailable(pageCount);\n        page.setTotalCount(rowCountInt);\n        \n        if (pageNo > pageCount) {\n            return page;\n        }\n        \n        List<E> result = jdbcTemplate.query(sqlFetchRows, args, rowMapper);\n        for (E item : result) {\n            page.getPageItems().add(item);\n        }\n        return page;\n    }\n    \n    @Override\n    public Page fetchPageLimit(MapperResult countMapperResult, MapperResult mapperResult, int pageNo, int pageSize,\n            RowMapper rowMapper) {\n        return fetchPageLimit(countMapperResult.getSql(), countMapperResult.getParamList().toArray(),\n                mapperResult.getSql(), mapperResult.getParamList().toArray(), pageNo, pageSize, rowMapper);\n    }\n    \n    @Override\n    public Page<E> fetchPageLimit(final String sqlCountRows, final Object[] args1, final String sqlFetchRows,\n            final Object[] args2, final int pageNo, final int pageSize, final RowMapper rowMapper) {\n        if (pageNo <= 0 || pageSize <= 0) {\n            throw new IllegalArgumentException(\"pageNo and pageSize must be greater than zero\");\n        }\n        // Query the total number of current records\n        Integer rowCountInt = jdbcTemplate.queryForObject(sqlCountRows, args1, Integer.class);\n        if (rowCountInt == null) {\n            throw new IllegalArgumentException(\"fetchPageLimit error\");\n        }\n        \n        // Compute pages count\n        int pageCount = rowCountInt / pageSize;\n        if (rowCountInt > pageSize * pageCount) {\n            pageCount++;\n        }\n        \n        // Create Page object\n        final Page<E> page = new Page<>();\n        page.setPageNumber(pageNo);\n        page.setPagesAvailable(pageCount);\n        page.setTotalCount(rowCountInt);\n        \n        if (pageNo > pageCount) {\n            return page;\n        }\n        List<E> result = jdbcTemplate.query(sqlFetchRows, args2, rowMapper);\n        for (E item : result) {\n            page.getPageItems().add(item);\n        }\n        return page;\n    }\n    \n    @Override\n    public Page<E> fetchPageLimit(final String sqlFetchRows, final Object[] args, final int pageNo, final int pageSize,\n            final RowMapper rowMapper) {\n        if (pageNo <= 0 || pageSize <= 0) {\n            throw new IllegalArgumentException(\"pageNo and pageSize must be greater than zero\");\n        }\n        // Create Page object\n        final Page<E> page = new Page<>();\n        List<E> result = jdbcTemplate.query(sqlFetchRows, args, rowMapper);\n        for (E item : result) {\n            page.getPageItems().add(item);\n        }\n        return page;\n    }\n    \n    @Override\n    public void updateLimit(final String sql, final Object[] args) {\n        try {\n            jdbcTemplate.update(sql, args);\n        } finally {\n            EmbeddedStorageContextHolder.cleanAllContext();\n        }\n    }\n    \n    /**\n     * Update limit with response.\n     *\n     * @param sql  sql\n     * @param args args\n     * @return update row count\n     */\n    public int updateLimitWithResponse(final String sql, final Object[] args) {\n        String sqlUpdate = sql;\n        \n        try {\n            return jdbcTemplate.update(sqlUpdate, args);\n        } finally {\n            EmbeddedStorageContextHolder.cleanAllContext();\n        }\n    }\n    \n}\n", "methodName": "com.alibaba.nacos.persistence.repository.extrnal.ExternalStoragePaginationHelperImpl.fetchPageLimit(java.lang.String,java.lang.String,java.lang.Object[],int,int,org.springframework.jdbc.core.RowMapper):com.alibaba.nacos.persistence.model.Page", "exampleID": 38, "dataset": "infer", "filepath": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/extrnal/ExternalStoragePaginationHelperImpl.java", "line": 125, "sink": "getPageItems(page)", "source": "getPageItems(page)", "sourceLine": 125, "qualifier": "$$getPageItems(page)/$ could return null, and is @@dereferenced/@", "steps": [{"line": 81, "source": "getPageItems(page)", "filepath": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "methodName": "Page.getPageItems", "exampleID": 39}], "line_number": 125, "records": [{"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 81, "column_number": -1, "description": "start of procedure getPageItems()", "snippet": "    public List<E> getPageItems() {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "methodName": "getPageItems"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 82, "column_number": -1, "description": "return from a call to List Page.getPageItems()", "snippet": "        return pageItems;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "methodName": "getPageItems"}], "combined_records": [{"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 82, "column_number": -1, "description": "start of procedure getPageItems()", "snippet": "78.    \n79.    public List<E> getPageItems() {\n80.>         return pageItems;\n81.    }\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "methodName": "getPageItems", "line_numbers": [81, 82]}], "infer_explore": [{"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/extrnal/ExternalStoragePaginationHelperImpl.java", "line_number": 96, "column_number": -1, "description": "start of procedure fetchPageLimit(...)", "snippet": "93.     \n94.     @Override\n95. >     public Page<E> fetchPageLimit(final String sqlCountRows, final String sqlFetchRows, final Object[] args,\n96.             final int pageNo, final int pageSize, final RowMapper rowMapper) {\n97.         if (pageNo <= 0 || pageSize <= 0) {\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/extrnal/ExternalStoragePaginationHelperImpl.java", "line_number": 98, "column_number": -1, "description": "Taking true branch", "snippet": "95.     public Page<E> fetchPageLimit(final String sqlCountRows, final String sqlFetchRows, final Object[] args,\n96.             final int pageNo, final int pageSize, final RowMapper rowMapper) {\n97. >         if (pageNo <= 0 || pageSize <= 0) {\n98.             throw new IllegalArgumentException(\"pageNo and pageSize must be greater than zero\");\n99.         }\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/extrnal/ExternalStoragePaginationHelperImpl.java", "line_number": 98, "column_number": -1, "description": "Taking false branch", "snippet": "95.     public Page<E> fetchPageLimit(final String sqlCountRows, final String sqlFetchRows, final Object[] args,\n96.             final int pageNo, final int pageSize, final RowMapper rowMapper) {\n97. >         if (pageNo <= 0 || pageSize <= 0) {\n98.             throw new IllegalArgumentException(\"pageNo and pageSize must be greater than zero\");\n99.         }\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/extrnal/ExternalStoragePaginationHelperImpl.java", "line_number": 102, "column_number": -1, "description": "", "snippet": "99.         }\n100.         // Query the total number of current records\n101. >         Integer rowCountInt = jdbcTemplate.queryForObject(sqlCountRows, Integer.class);\n102.         if (rowCountInt == null) {\n103.             throw new IllegalArgumentException(\"fetchPageLimit error\");\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/extrnal/ExternalStoragePaginationHelperImpl.java", "line_number": 103, "column_number": -1, "description": "Taking false branch", "snippet": "100.         // Query the total number of current records\n101.         Integer rowCountInt = jdbcTemplate.queryForObject(sqlCountRows, Integer.class);\n102. >         if (rowCountInt == null) {\n103.             throw new IllegalArgumentException(\"fetchPageLimit error\");\n104.         }\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/extrnal/ExternalStoragePaginationHelperImpl.java", "line_number": 108, "column_number": -1, "description": "", "snippet": "105.         \n106.         // Compute pages count\n107. >         int pageCount = rowCountInt / pageSize;\n108.         if (rowCountInt > pageSize * pageCount) {\n109.             pageCount++;\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/extrnal/ExternalStoragePaginationHelperImpl.java", "line_number": 109, "column_number": -1, "description": "Taking false branch", "snippet": "106.         // Compute pages count\n107.         int pageCount = rowCountInt / pageSize;\n108. >         if (rowCountInt > pageSize * pageCount) {\n109.             pageCount++;\n110.         }\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/extrnal/ExternalStoragePaginationHelperImpl.java", "line_number": 114, "column_number": -1, "description": "Skipping Page(): empty list of specs", "snippet": "111.         \n112.         // Create Page object\n113. >         final Page<E> page = new Page<>();\n114.         page.setPageNumber(pageNo);\n115.         page.setPagesAvailable(pageCount);\n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 29, "column_number": -1, "description": "Definition of Page()", "snippet": "26.  * @date 2010-5-6\n27.  */\n28. > public class Page<E> implements Serializable {\n29. \n30.     static final long serialVersionUID = 1234544030560484292L;\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/extrnal/ExternalStoragePaginationHelperImpl.java", "line_number": 115, "column_number": -1, "description": "", "snippet": "112.         // Create Page object\n113.         final Page<E> page = new Page<>();\n114. >         page.setPageNumber(pageNo);\n115.         page.setPagesAvailable(pageCount);\n116.         page.setTotalCount(rowCountInt);\n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 53, "column_number": -1, "description": "start of procedure setPageNumber(...)", "snippet": "50.     private List<E> pageItems = new ArrayList<>();\n51.     \n52. >     public void setPageNumber(int pageNumber) {\n53.         this.pageNumber = pageNumber;\n54.     }\n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 54, "column_number": -1, "description": "", "snippet": "51.     \n52.     public void setPageNumber(int pageNumber) {\n53. >         this.pageNumber = pageNumber;\n54.     }\n55.     \n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 55, "column_number": -1, "description": "return from a call to void Page.setPageNumber(int)", "snippet": "52.     public void setPageNumber(int pageNumber) {\n53.         this.pageNumber = pageNumber;\n54. >     }\n55.     \n56.     public void setPagesAvailable(int pagesAvailable) {\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/extrnal/ExternalStoragePaginationHelperImpl.java", "line_number": 116, "column_number": -1, "description": "", "snippet": "113.         final Page<E> page = new Page<>();\n114.         page.setPageNumber(pageNo);\n115. >         page.setPagesAvailable(pageCount);\n116.         page.setTotalCount(rowCountInt);\n117.         \n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 57, "column_number": -1, "description": "start of procedure setPagesAvailable(...)", "snippet": "54.     }\n55.     \n56. >     public void setPagesAvailable(int pagesAvailable) {\n57.         this.pagesAvailable = pagesAvailable;\n58.     }\n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 58, "column_number": -1, "description": "", "snippet": "55.     \n56.     public void setPagesAvailable(int pagesAvailable) {\n57. >         this.pagesAvailable = pagesAvailable;\n58.     }\n59.     \n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 59, "column_number": -1, "description": "return from a call to void Page.setPagesAvailable(int)", "snippet": "56.     public void setPagesAvailable(int pagesAvailable) {\n57.         this.pagesAvailable = pagesAvailable;\n58. >     }\n59.     \n60.     public void setPageItems(List<E> pageItems) {\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/extrnal/ExternalStoragePaginationHelperImpl.java", "line_number": 117, "column_number": -1, "description": "", "snippet": "114.         page.setPageNumber(pageNo);\n115.         page.setPagesAvailable(pageCount);\n116. >         page.setTotalCount(rowCountInt);\n117.         \n118.         if (pageNo > pageCount) {\n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 69, "column_number": -1, "description": "start of procedure setTotalCount(...)", "snippet": "66.     }\n67.     \n68. >     public void setTotalCount(int totalCount) {\n69.         this.totalCount = totalCount;\n70.     }\n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 70, "column_number": -1, "description": "", "snippet": "67.     \n68.     public void setTotalCount(int totalCount) {\n69. >         this.totalCount = totalCount;\n70.     }\n71.     \n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 71, "column_number": -1, "description": "return from a call to void Page.setTotalCount(int)", "snippet": "68.     public void setTotalCount(int totalCount) {\n69.         this.totalCount = totalCount;\n70. >     }\n71.     \n72.     public int getPageNumber() {\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/extrnal/ExternalStoragePaginationHelperImpl.java", "line_number": 119, "column_number": -1, "description": "Taking false branch", "snippet": "116.         page.setTotalCount(rowCountInt);\n117.         \n118. >         if (pageNo > pageCount) {\n119.             return page;\n120.         }\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/extrnal/ExternalStoragePaginationHelperImpl.java", "line_number": 123, "column_number": -1, "description": "Skipping query(...): unknown method", "snippet": "120.         }\n121.         \n122. >         List<E> result = jdbcTemplate.query(sqlFetchRows, args, rowMapper);\n123.         for (E item : result) {\n124.             page.getPageItems().add(item);\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/extrnal/ExternalStoragePaginationHelperImpl.java", "line_number": 124, "column_number": -1, "description": "Taking true branch", "snippet": "121.         \n122.         List<E> result = jdbcTemplate.query(sqlFetchRows, args, rowMapper);\n123. >         for (E item : result) {\n124.             page.getPageItems().add(item);\n125.         }\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/extrnal/ExternalStoragePaginationHelperImpl.java", "line_number": 125, "column_number": -1, "description": "", "snippet": "122.         List<E> result = jdbcTemplate.query(sqlFetchRows, args, rowMapper);\n123.         for (E item : result) {\n124. >             page.getPageItems().add(item);\n125.         }\n126.         return page;\n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 81, "column_number": -1, "description": "start of procedure getPageItems()", "snippet": "78.     }\n79.     \n80. >     public List<E> getPageItems() {\n81.         return pageItems;\n82.     }\n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 82, "column_number": -1, "description": "return from a call to List Page.getPageItems()", "snippet": "79.     \n80.     public List<E> getPageItems() {\n81. >         return pageItems;\n82.     }\n83. }\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/extrnal/ExternalStoragePaginationHelperImpl.java", "line_number": 125, "column_number": -1, "description": "", "snippet": "122.         List<E> result = jdbcTemplate.query(sqlFetchRows, args, rowMapper);\n123.         for (E item : result) {\n124. >             page.getPageItems().add(item);\n125.         }\n126.         return page;\n"}]}, {"url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/EmbeddedPaginationHelperImpl.java", "rawCode": "/*\n * Copyright 1999-2023 Alibaba Group Holding Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.alibaba.nacos.persistence.repository.embedded;\n\nimport com.alibaba.nacos.persistence.model.Page;\nimport com.alibaba.nacos.persistence.repository.PaginationHelper;\nimport com.alibaba.nacos.persistence.repository.embedded.operate.DatabaseOperate;\nimport com.alibaba.nacos.plugin.datasource.model.MapperResult;\nimport org.springframework.jdbc.core.RowMapper;\n\nimport java.util.List;\n\n/**\n * Pagination Utils For Apache Derby.\n *\n * @param <E> Generic class\n * @author boyan\n * @date 2010-5-6\n */\npublic class EmbeddedPaginationHelperImpl<E> implements PaginationHelper {\n    \n    private final DatabaseOperate databaseOperate;\n    \n    public EmbeddedPaginationHelperImpl(DatabaseOperate databaseOperate) {\n        this.databaseOperate = databaseOperate;\n    }\n    \n    /**\n     * Take paging.\n     *\n     * @param sqlCountRows Query total SQL\n     * @param sqlFetchRows Query data sql\n     * @param args         query args\n     * @param pageNo       page number\n     * @param pageSize     page size\n     * @param rowMapper    Entity mapping\n     * @return Paging data\n     */\n    @Override\n    public Page<E> fetchPage(final String sqlCountRows, final String sqlFetchRows, final Object[] args,\n            final int pageNo, final int pageSize, final RowMapper rowMapper) {\n        return fetchPage(sqlCountRows, sqlFetchRows, args, pageNo, pageSize, null, rowMapper);\n    }\n    \n    @Override\n    public Page<E> fetchPage(final String sqlCountRows, final String sqlFetchRows, final Object[] args,\n            final int pageNo, final int pageSize, final Long lastMaxId, final RowMapper rowMapper) {\n        if (pageNo <= 0 || pageSize <= 0) {\n            throw new IllegalArgumentException(\"pageNo and pageSize must be greater than zero\");\n        }\n        \n        // Query the total number of current records\n        Integer rowCountInt = databaseOperate.queryOne(sqlCountRows, args, Integer.class);\n        if (rowCountInt == null) {\n            throw new IllegalArgumentException(\"fetchPageLimit error\");\n        }\n        \n        // Count pages\n        int pageCount = rowCountInt / pageSize;\n        if (rowCountInt > pageSize * pageCount) {\n            pageCount++;\n        }\n        \n        // Create Page object\n        final Page<E> page = new Page<>();\n        page.setPageNumber(pageNo);\n        page.setPagesAvailable(pageCount);\n        page.setTotalCount(rowCountInt);\n        \n        if (pageNo > pageCount) {\n            return page;\n        }\n        \n        List<E> result = databaseOperate.queryMany(sqlFetchRows, args, rowMapper);\n        for (E item : result) {\n            page.getPageItems().add(item);\n        }\n        return page;\n    }\n    \n    @Override\n    public Page<E> fetchPageLimit(final String sqlCountRows, final String sqlFetchRows, final Object[] args,\n            final int pageNo, final int pageSize, final RowMapper rowMapper) {\n        if (pageNo <= 0 || pageSize <= 0) {\n            throw new IllegalArgumentException(\"pageNo and pageSize must be greater than zero\");\n        }\n        // Query the total number of current records\n        Integer rowCountInt = databaseOperate.queryOne(sqlCountRows, Integer.class);\n        if (rowCountInt == null) {\n            throw new IllegalArgumentException(\"fetchPageLimit error\");\n        }\n        \n        // Count pages\n        int pageCount = rowCountInt / pageSize;\n        if (rowCountInt > pageSize * pageCount) {\n            pageCount++;\n        }\n        \n        // Create Page object\n        final Page<E> page = new Page<>();\n        page.setPageNumber(pageNo);\n        page.setPagesAvailable(pageCount);\n        page.setTotalCount(rowCountInt);\n        \n        if (pageNo > pageCount) {\n            return page;\n        }\n        \n        List<E> result = databaseOperate.queryMany(sqlFetchRows, args, rowMapper);\n        for (E item : result) {\n            page.getPageItems().add(item);\n        }\n        return page;\n    }\n    \n    @Override\n    public Page<E> fetchPageLimit(final String sqlCountRows, final Object[] args1, final String sqlFetchRows,\n            final Object[] args2, final int pageNo, final int pageSize, final RowMapper rowMapper) {\n        if (pageNo <= 0 || pageSize <= 0) {\n            throw new IllegalArgumentException(\"pageNo and pageSize must be greater than zero\");\n        }\n        // Query the total number of current records\n        Integer rowCountInt = databaseOperate.queryOne(sqlCountRows, args1, Integer.class);\n        if (rowCountInt == null) {\n            throw new IllegalArgumentException(\"fetchPageLimit error\");\n        }\n        \n        // Count pages\n        int pageCount = rowCountInt / pageSize;\n        if (rowCountInt > pageSize * pageCount) {\n            pageCount++;\n        }\n        \n        // Create Page object\n        final Page<E> page = new Page<>();\n        page.setPageNumber(pageNo);\n        page.setPagesAvailable(pageCount);\n        page.setTotalCount(rowCountInt);\n        \n        if (pageNo > pageCount) {\n            return page;\n        }\n        \n        List<E> result = databaseOperate.queryMany(sqlFetchRows, args2, rowMapper);\n        for (E item : result) {\n            page.getPageItems().add(item);\n        }\n        return page;\n    }\n    \n    @Override\n    public Page<E> fetchPageLimit(final String sqlFetchRows, final Object[] args, final int pageNo, final int pageSize,\n            final RowMapper rowMapper) {\n        if (pageNo <= 0 || pageSize <= 0) {\n            throw new IllegalArgumentException(\"pageNo and pageSize must be greater than zero\");\n        }\n        // Create Page object\n        final Page<E> page = new Page<>();\n        \n        List<E> result = databaseOperate.queryMany(sqlFetchRows, args, rowMapper);\n        for (E item : result) {\n            page.getPageItems().add(item);\n        }\n        return page;\n    }\n    \n    @Override\n    public Page fetchPageLimit(MapperResult countMapperResult, MapperResult mapperResult, int pageNo, int pageSize,\n            RowMapper rowMapper) {\n        return fetchPageLimit(countMapperResult.getSql(), countMapperResult.getParamList().toArray(),\n                mapperResult.getSql(), mapperResult.getParamList().toArray(), pageNo, pageSize, rowMapper);\n    }\n    \n    @Override\n    public void updateLimit(final String sql, final Object[] args) {\n        EmbeddedStorageContextHolder.addSqlContext(sql, args);\n        try {\n            databaseOperate.update(EmbeddedStorageContextHolder.getCurrentSqlContext());\n        } finally {\n            EmbeddedStorageContextHolder.cleanAllContext();\n        }\n    }\n    \n}\n", "methodName": "com.alibaba.nacos.persistence.repository.embedded.EmbeddedPaginationHelperImpl.fetchPageLimit(java.lang.String,java.lang.String,java.lang.Object[],int,int,org.springframework.jdbc.core.RowMapper):com.alibaba.nacos.persistence.model.Page", "exampleID": 40, "dataset": "infer", "filepath": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/EmbeddedPaginationHelperImpl.java", "line": 125, "sink": "getPageItems(page)", "source": "getPageItems(page)", "sourceLine": 125, "qualifier": "$$getPageItems(page)/$ could return null, and is @@dereferenced/@", "steps": [{"line": 81, "source": "getPageItems(page)", "filepath": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "methodName": "Page.getPageItems", "exampleID": 41}], "line_number": 125, "records": [{"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 81, "column_number": -1, "description": "start of procedure getPageItems()", "snippet": "    public List<E> getPageItems() {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "methodName": "getPageItems"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 82, "column_number": -1, "description": "return from a call to List Page.getPageItems()", "snippet": "        return pageItems;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "methodName": "getPageItems"}], "combined_records": [{"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 82, "column_number": -1, "description": "start of procedure getPageItems()", "snippet": "78.    \n79.    public List<E> getPageItems() {\n80.>         return pageItems;\n81.    }\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "methodName": "getPageItems", "line_numbers": [81, 82]}], "infer_explore": [{"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/EmbeddedPaginationHelperImpl.java", "line_number": 96, "column_number": -1, "description": "start of procedure fetchPageLimit(...)", "snippet": "93.     \n94.     @Override\n95. >     public Page<E> fetchPageLimit(final String sqlCountRows, final String sqlFetchRows, final Object[] args,\n96.             final int pageNo, final int pageSize, final RowMapper rowMapper) {\n97.         if (pageNo <= 0 || pageSize <= 0) {\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/EmbeddedPaginationHelperImpl.java", "line_number": 98, "column_number": -1, "description": "Taking true branch", "snippet": "95.     public Page<E> fetchPageLimit(final String sqlCountRows, final String sqlFetchRows, final Object[] args,\n96.             final int pageNo, final int pageSize, final RowMapper rowMapper) {\n97. >         if (pageNo <= 0 || pageSize <= 0) {\n98.             throw new IllegalArgumentException(\"pageNo and pageSize must be greater than zero\");\n99.         }\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/EmbeddedPaginationHelperImpl.java", "line_number": 98, "column_number": -1, "description": "Taking false branch", "snippet": "95.     public Page<E> fetchPageLimit(final String sqlCountRows, final String sqlFetchRows, final Object[] args,\n96.             final int pageNo, final int pageSize, final RowMapper rowMapper) {\n97. >         if (pageNo <= 0 || pageSize <= 0) {\n98.             throw new IllegalArgumentException(\"pageNo and pageSize must be greater than zero\");\n99.         }\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/EmbeddedPaginationHelperImpl.java", "line_number": 102, "column_number": -1, "description": "Skipping queryOne(...): unknown method", "snippet": "99.         }\n100.         // Query the total number of current records\n101. >         Integer rowCountInt = databaseOperate.queryOne(sqlCountRows, Integer.class);\n102.         if (rowCountInt == null) {\n103.             throw new IllegalArgumentException(\"fetchPageLimit error\");\n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/operate/DatabaseOperate.java", "line_number": -1, "column_number": -1, "description": "Definition of queryOne(...)", "snippet": ""}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/EmbeddedPaginationHelperImpl.java", "line_number": 102, "column_number": -1, "description": "", "snippet": "99.         }\n100.         // Query the total number of current records\n101. >         Integer rowCountInt = databaseOperate.queryOne(sqlCountRows, Integer.class);\n102.         if (rowCountInt == null) {\n103.             throw new IllegalArgumentException(\"fetchPageLimit error\");\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/EmbeddedPaginationHelperImpl.java", "line_number": 103, "column_number": -1, "description": "Taking false branch", "snippet": "100.         // Query the total number of current records\n101.         Integer rowCountInt = databaseOperate.queryOne(sqlCountRows, Integer.class);\n102. >         if (rowCountInt == null) {\n103.             throw new IllegalArgumentException(\"fetchPageLimit error\");\n104.         }\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/EmbeddedPaginationHelperImpl.java", "line_number": 108, "column_number": -1, "description": "", "snippet": "105.         \n106.         // Count pages\n107. >         int pageCount = rowCountInt / pageSize;\n108.         if (rowCountInt > pageSize * pageCount) {\n109.             pageCount++;\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/EmbeddedPaginationHelperImpl.java", "line_number": 109, "column_number": -1, "description": "Taking false branch", "snippet": "106.         // Count pages\n107.         int pageCount = rowCountInt / pageSize;\n108. >         if (rowCountInt > pageSize * pageCount) {\n109.             pageCount++;\n110.         }\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/EmbeddedPaginationHelperImpl.java", "line_number": 114, "column_number": -1, "description": "Skipping Page(): empty list of specs", "snippet": "111.         \n112.         // Create Page object\n113. >         final Page<E> page = new Page<>();\n114.         page.setPageNumber(pageNo);\n115.         page.setPagesAvailable(pageCount);\n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 29, "column_number": -1, "description": "Definition of Page()", "snippet": "26.  * @date 2010-5-6\n27.  */\n28. > public class Page<E> implements Serializable {\n29. \n30.     static final long serialVersionUID = 1234544030560484292L;\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/EmbeddedPaginationHelperImpl.java", "line_number": 115, "column_number": -1, "description": "", "snippet": "112.         // Create Page object\n113.         final Page<E> page = new Page<>();\n114. >         page.setPageNumber(pageNo);\n115.         page.setPagesAvailable(pageCount);\n116.         page.setTotalCount(rowCountInt);\n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 53, "column_number": -1, "description": "start of procedure setPageNumber(...)", "snippet": "50.     private List<E> pageItems = new ArrayList<>();\n51.     \n52. >     public void setPageNumber(int pageNumber) {\n53.         this.pageNumber = pageNumber;\n54.     }\n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 54, "column_number": -1, "description": "", "snippet": "51.     \n52.     public void setPageNumber(int pageNumber) {\n53. >         this.pageNumber = pageNumber;\n54.     }\n55.     \n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 55, "column_number": -1, "description": "return from a call to void Page.setPageNumber(int)", "snippet": "52.     public void setPageNumber(int pageNumber) {\n53.         this.pageNumber = pageNumber;\n54. >     }\n55.     \n56.     public void setPagesAvailable(int pagesAvailable) {\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/EmbeddedPaginationHelperImpl.java", "line_number": 116, "column_number": -1, "description": "", "snippet": "113.         final Page<E> page = new Page<>();\n114.         page.setPageNumber(pageNo);\n115. >         page.setPagesAvailable(pageCount);\n116.         page.setTotalCount(rowCountInt);\n117.         \n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 57, "column_number": -1, "description": "start of procedure setPagesAvailable(...)", "snippet": "54.     }\n55.     \n56. >     public void setPagesAvailable(int pagesAvailable) {\n57.         this.pagesAvailable = pagesAvailable;\n58.     }\n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 58, "column_number": -1, "description": "", "snippet": "55.     \n56.     public void setPagesAvailable(int pagesAvailable) {\n57. >         this.pagesAvailable = pagesAvailable;\n58.     }\n59.     \n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 59, "column_number": -1, "description": "return from a call to void Page.setPagesAvailable(int)", "snippet": "56.     public void setPagesAvailable(int pagesAvailable) {\n57.         this.pagesAvailable = pagesAvailable;\n58. >     }\n59.     \n60.     public void setPageItems(List<E> pageItems) {\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/EmbeddedPaginationHelperImpl.java", "line_number": 117, "column_number": -1, "description": "", "snippet": "114.         page.setPageNumber(pageNo);\n115.         page.setPagesAvailable(pageCount);\n116. >         page.setTotalCount(rowCountInt);\n117.         \n118.         if (pageNo > pageCount) {\n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 69, "column_number": -1, "description": "start of procedure setTotalCount(...)", "snippet": "66.     }\n67.     \n68. >     public void setTotalCount(int totalCount) {\n69.         this.totalCount = totalCount;\n70.     }\n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 70, "column_number": -1, "description": "", "snippet": "67.     \n68.     public void setTotalCount(int totalCount) {\n69. >         this.totalCount = totalCount;\n70.     }\n71.     \n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 71, "column_number": -1, "description": "return from a call to void Page.setTotalCount(int)", "snippet": "68.     public void setTotalCount(int totalCount) {\n69.         this.totalCount = totalCount;\n70. >     }\n71.     \n72.     public int getPageNumber() {\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/EmbeddedPaginationHelperImpl.java", "line_number": 119, "column_number": -1, "description": "Taking false branch", "snippet": "116.         page.setTotalCount(rowCountInt);\n117.         \n118. >         if (pageNo > pageCount) {\n119.             return page;\n120.         }\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/EmbeddedPaginationHelperImpl.java", "line_number": 123, "column_number": -1, "description": "Skipping queryMany(...): unknown method", "snippet": "120.         }\n121.         \n122. >         List<E> result = databaseOperate.queryMany(sqlFetchRows, args, rowMapper);\n123.         for (E item : result) {\n124.             page.getPageItems().add(item);\n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/operate/DatabaseOperate.java", "line_number": -1, "column_number": -1, "description": "Definition of queryMany(...)", "snippet": ""}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/EmbeddedPaginationHelperImpl.java", "line_number": 124, "column_number": -1, "description": "Taking true branch", "snippet": "121.         \n122.         List<E> result = databaseOperate.queryMany(sqlFetchRows, args, rowMapper);\n123. >         for (E item : result) {\n124.             page.getPageItems().add(item);\n125.         }\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/EmbeddedPaginationHelperImpl.java", "line_number": 125, "column_number": -1, "description": "", "snippet": "122.         List<E> result = databaseOperate.queryMany(sqlFetchRows, args, rowMapper);\n123.         for (E item : result) {\n124. >             page.getPageItems().add(item);\n125.         }\n126.         return page;\n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 81, "column_number": -1, "description": "start of procedure getPageItems()", "snippet": "78.     }\n79.     \n80. >     public List<E> getPageItems() {\n81.         return pageItems;\n82.     }\n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 82, "column_number": -1, "description": "return from a call to List Page.getPageItems()", "snippet": "79.     \n80.     public List<E> getPageItems() {\n81. >         return pageItems;\n82.     }\n83. }\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/EmbeddedPaginationHelperImpl.java", "line_number": 125, "column_number": -1, "description": "", "snippet": "122.         List<E> result = databaseOperate.queryMany(sqlFetchRows, args, rowMapper);\n123.         for (E item : result) {\n124. >             page.getPageItems().add(item);\n125.         }\n126.         return page;\n"}]}, {"url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/ControlRuleChangeActivator.java", "rawCode": "/*\n * Copyright 1999-2020 Alibaba Group Holding Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.alibaba.nacos.plugin.control.ruleactivator;\n\nimport com.alibaba.nacos.common.notify.Event;\nimport com.alibaba.nacos.common.notify.NotifyCenter;\nimport com.alibaba.nacos.common.notify.listener.Subscriber;\nimport com.alibaba.nacos.common.utils.StringUtils;\nimport com.alibaba.nacos.plugin.control.ControlManagerCenter;\nimport com.alibaba.nacos.plugin.control.Loggers;\nimport com.alibaba.nacos.plugin.control.connection.rule.ConnectionControlRule;\nimport com.alibaba.nacos.plugin.control.event.ConnectionLimitRuleChangeEvent;\nimport com.alibaba.nacos.plugin.control.event.TpsControlRuleChangeEvent;\nimport com.alibaba.nacos.plugin.control.tps.rule.TpsControlRule;\nimport org.slf4j.Logger;\n\n/**\n * control rule activator.\n *\n * @author shiyiyue\n */\npublic class ControlRuleChangeActivator {\n    \n    private static final Logger LOGGER = Loggers.CONTROL;\n    \n    TpsRuleChangeSubscriber tpsRuleChangeSubscriber = new TpsRuleChangeSubscriber();\n    \n    ConnectionRuleChangeSubscriber connectionRuleChangeSubscriber = new ConnectionRuleChangeSubscriber();\n    \n    public ControlRuleChangeActivator() {\n        NotifyCenter.registerSubscriber(tpsRuleChangeSubscriber);\n        NotifyCenter.registerSubscriber(connectionRuleChangeSubscriber);\n    }\n    \n    class TpsRuleChangeSubscriber extends Subscriber<TpsControlRuleChangeEvent> {\n        \n        @Override\n        public void onEvent(TpsControlRuleChangeEvent event) {\n            String pointName = event.getPointName();\n            LOGGER.info(\"Tps control rule change event receive,pointName={}, external={} \", pointName,\n                    event.isExternal());\n            if (event == null || event.getPointName() == null) {\n                return;\n            }\n            try {\n                RuleStorageProxy ruleStorageProxy = ControlManagerCenter.getInstance().getRuleStorageProxy();\n                \n                if (event.isExternal()) {\n                    if (ruleStorageProxy.getExternalStorage() != null) {\n                        String persistTpsRule = ruleStorageProxy.getExternalStorage().getTpsRule(pointName);\n                        ruleStorageProxy.getLocalDiskStorage().saveTpsRule(pointName, persistTpsRule);\n                    } else {\n                        Loggers.CONTROL\n                                .info(\"No external rule storage found,will load local disk instead,point name={}\",\n                                        event.getPointName());\n                    }\n                    \n                }\n                String tpsRuleContent = ruleStorageProxy.getLocalDiskStorage().getTpsRule(pointName);\n                \n                TpsControlRule tpsControlRule = StringUtils.isBlank(tpsRuleContent) ? new TpsControlRule()\n                        : ControlManagerCenter.getInstance().getRuleParser().parseTpsRule(tpsRuleContent);\n                \n                ControlManagerCenter.getInstance().getTpsControlManager().applyTpsRule(pointName, tpsControlRule);\n                \n            } catch (Exception e) {\n                LOGGER.warn(\"Tps control rule apply error ,error= \", e);\n            }\n            \n        }\n        \n        @Override\n        public Class<? extends Event> subscribeType() {\n            return TpsControlRuleChangeEvent.class;\n        }\n    }\n    \n    class ConnectionRuleChangeSubscriber extends Subscriber<ConnectionLimitRuleChangeEvent> {\n        \n        @Override\n        public void onEvent(ConnectionLimitRuleChangeEvent event) {\n            LOGGER.info(\"connection limit rule change event receive ,external:{}\", event.isExternal());\n            \n            try {\n                \n                RuleStorageProxy ruleStorageProxy = ControlManagerCenter.getInstance().getRuleStorageProxy();\n                \n                if (event.isExternal()) {\n                    if (ruleStorageProxy.getExternalStorage() != null) {\n                        String connectionRule = ruleStorageProxy.getExternalStorage().getConnectionRule();\n                        ruleStorageProxy.getLocalDiskStorage().saveConnectionRule(connectionRule);\n                    } else {\n                        Loggers.CONTROL.info(\"No external rule storage found,will load local disk instead\");\n                        \n                    }\n                    \n                }\n                String limitRule = ruleStorageProxy.getLocalDiskStorage().getConnectionRule();\n                \n                Loggers.CONTROL.info(\"start to apply connection rule content \" + limitRule);\n                \n                ConnectionControlRule connectionControlRule =\n                        StringUtils.isBlank(limitRule) ? new ConnectionControlRule()\n                                : ControlManagerCenter.getInstance().getRuleParser().parseConnectionRule(limitRule);\n                Loggers.CONTROL.info(\"end to  apply connection rule content \");\n                \n                if (connectionControlRule != null) {\n                    ControlManagerCenter.getInstance().getConnectionControlManager()\n                            .applyConnectionLimitRule(connectionControlRule);\n                } else {\n                    LOGGER.info(\"Parse rule is null,Ignore illegal rule  :{}\", limitRule);\n                }\n                \n            } catch (Exception e) {\n                LOGGER.error(\"Fail to parse connection limit rule ,persit:{}\", event.isExternal(), e);\n            }\n        }\n        \n        @Override\n        public Class<? extends Event> subscribeType() {\n            return ConnectionLimitRuleChangeEvent.class;\n        }\n    }\n    \n}\n", "methodName": "com.alibaba.nacos.plugin.control.ruleactivator.ControlRuleChangeActivator$ConnectionRuleChangeSubscriber.onEvent(com.alibaba.nacos.plugin.control.event.ConnectionLimitRuleChangeEvent):void", "exampleID": 42, "dataset": "infer", "filepath": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/ControlRuleChangeActivator.java", "line": 112, "sink": "ruleStorageProxy.getLocalDiskStorage()", "source": "ruleStorageProxy.getLocalDiskStorage()", "sourceLine": 112, "qualifier": "$$ruleStorageProxy.getLocalDiskStorage()/$ could return null, and is @@dereferenced/@", "steps": [{"line": 70, "source": "ruleStorageProxy.getLocalDiskStorage()", "filepath": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/RuleStorageProxy.java", "methodName": "RuleStorageProxy.getLocalDiskStorage", "exampleID": 43}], "line_number": 112, "records": [{"level": 1, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/RuleStorageProxy.java", "line_number": 70, "column_number": -1, "description": "start of procedure getLocalDiskStorage()", "snippet": "    public RuleStorage getLocalDiskStorage() {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/RuleStorageProxy.java", "methodName": "getLocalDiskStorage"}, {"level": 1, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/RuleStorageProxy.java", "line_number": 71, "column_number": -1, "description": "return from a call to RuleStorage RuleStorageProxy.getLocalDiskStorage()", "snippet": "        return localDiskRuleStorage;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/RuleStorageProxy.java", "methodName": "getLocalDiskStorage"}], "combined_records": [{"level": 1, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/RuleStorageProxy.java", "line_number": 71, "column_number": -1, "description": "start of procedure getLocalDiskStorage()", "snippet": "67.    \n68.    public RuleStorage getLocalDiskStorage() {\n69.>         return localDiskRuleStorage;\n70.    }\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/RuleStorageProxy.java", "methodName": "getLocalDiskStorage", "line_numbers": [70, 71]}], "infer_explore": [{"level": 0, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/ControlRuleChangeActivator.java", "line_number": 95, "column_number": -1, "description": "start of procedure onEvent(...)", "snippet": "92.         \n93.         @Override\n94. >         public void onEvent(ConnectionLimitRuleChangeEvent event) {\n95.             LOGGER.info(\"connection limit rule change event receive ,external:{}\", event.isExternal());\n96.             \n"}, {"level": 0, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/ControlRuleChangeActivator.java", "line_number": 96, "column_number": -1, "description": "", "snippet": "93.         @Override\n94.         public void onEvent(ConnectionLimitRuleChangeEvent event) {\n95. >             LOGGER.info(\"connection limit rule change event receive ,external:{}\", event.isExternal());\n96.             \n97.             try {\n"}, {"level": 1, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/event/ConnectionLimitRuleChangeEvent.java", "line_number": 33, "column_number": -1, "description": "start of procedure isExternal()", "snippet": "30.     }\n31.     \n32. >     public boolean isExternal() {\n33.         return external;\n34.     }\n"}, {"level": 1, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/event/ConnectionLimitRuleChangeEvent.java", "line_number": 34, "column_number": -1, "description": "return from a call to boolean ConnectionLimitRuleChangeEvent.isExternal()", "snippet": "31.     \n32.     public boolean isExternal() {\n33. >         return external;\n34.     }\n35.     \n"}, {"level": 0, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/ControlRuleChangeActivator.java", "line_number": 96, "column_number": -1, "description": "Skipping info(...): unknown method", "snippet": "93.         @Override\n94.         public void onEvent(ConnectionLimitRuleChangeEvent event) {\n95. >             LOGGER.info(\"connection limit rule change event receive ,external:{}\", event.isExternal());\n96.             \n97.             try {\n"}, {"level": 0, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/ControlRuleChangeActivator.java", "line_number": 100, "column_number": -1, "description": "", "snippet": "97.             try {\n98.                 \n99. >                 RuleStorageProxy ruleStorageProxy = ControlManagerCenter.getInstance().getRuleStorageProxy();\n100.                 \n101.                 if (event.isExternal()) {\n"}, {"level": 1, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ControlManagerCenter.java", "line_number": 112, "column_number": -1, "description": "start of procedure getInstance()", "snippet": "109.     }\n110.     \n111. >     public static ControlManagerCenter getInstance() {\n112.         if (instance == null) {\n113.             synchronized (ControlManagerCenter.class) {\n"}, {"level": 1, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ControlManagerCenter.java", "line_number": 113, "column_number": -1, "description": "Taking true branch", "snippet": "110.     \n111.     public static ControlManagerCenter getInstance() {\n112. >         if (instance == null) {\n113.             synchronized (ControlManagerCenter.class) {\n114.                 if (instance == null) {\n"}, {"level": 1, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ControlManagerCenter.java", "line_number": 114, "column_number": -1, "description": "", "snippet": "111.     public static ControlManagerCenter getInstance() {\n112.         if (instance == null) {\n113. >             synchronized (ControlManagerCenter.class) {\n114.                 if (instance == null) {\n115.                     instance = new ControlManagerCenter();\n"}, {"level": 1, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ControlManagerCenter.java", "line_number": 115, "column_number": -1, "description": "Taking true branch", "snippet": "112.         if (instance == null) {\n113.             synchronized (ControlManagerCenter.class) {\n114. >                 if (instance == null) {\n115.                     instance = new ControlManagerCenter();\n116.                 }\n"}, {"level": 1, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ControlManagerCenter.java", "line_number": 116, "column_number": -1, "description": "", "snippet": "113.             synchronized (ControlManagerCenter.class) {\n114.                 if (instance == null) {\n115. >                     instance = new ControlManagerCenter();\n116.                 }\n117.             }\n"}, {"level": 2, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ControlManagerCenter.java", "line_number": 90, "column_number": -1, "description": "start of procedure ControlManagerCenter()", "snippet": "87.     }\n88.     \n89. >     private ControlManagerCenter() {\n90.         initTpsControlManager();\n91.         initConnectionManager();\n"}, {"level": 2, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ControlManagerCenter.java", "line_number": 91, "column_number": -1, "description": "", "snippet": "88.     \n89.     private ControlManagerCenter() {\n90. >         initTpsControlManager();\n91.         initConnectionManager();\n92.         ruleStorageProxy = new RuleStorageProxy();\n"}, {"level": 3, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ControlManagerCenter.java", "line_number": 70, "column_number": -1, "description": "start of procedure initTpsControlManager()", "snippet": "67.     }\n68.     \n69. >     private void initTpsControlManager() {\n70.         \n71.         Collection<TpsControlManager> tpsControlManagers = NacosServiceLoader.load(TpsControlManager.class);\n"}, {"level": 3, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ControlManagerCenter.java", "line_number": 72, "column_number": -1, "description": "", "snippet": "69.     private void initTpsControlManager() {\n70.         \n71. >         Collection<TpsControlManager> tpsControlManagers = NacosServiceLoader.load(TpsControlManager.class);\n72.         String tpsManagerName = ControlConfigs.getInstance().getTpsManager();\n73.         \n"}, {"level": 4, "filename": "common/src/main/java/com/alibaba/nacos/common/spi/NacosServiceLoader.java", "line_number": 44, "column_number": -1, "description": "start of procedure load(...)", "snippet": "41.      * @return service instances\n42.      */\n43. >     public static <T> Collection<T> load(final Class<T> service) {\n44.         if (SERVICES.containsKey(service)) {\n45.             return newServiceInstances(service);\n"}, {"level": 4, "filename": "common/src/main/java/com/alibaba/nacos/common/spi/NacosServiceLoader.java", "line_number": 45, "column_number": -1, "description": "Taking true branch", "snippet": "42.      */\n43.     public static <T> Collection<T> load(final Class<T> service) {\n44. >         if (SERVICES.containsKey(service)) {\n45.             return newServiceInstances(service);\n46.         }\n"}, {"level": 4, "filename": "common/src/main/java/com/alibaba/nacos/common/spi/NacosServiceLoader.java", "line_number": 46, "column_number": -1, "description": "", "snippet": "43.     public static <T> Collection<T> load(final Class<T> service) {\n44.         if (SERVICES.containsKey(service)) {\n45. >             return newServiceInstances(service);\n46.         }\n47.         Collection<T> result = new LinkedHashSet<>();\n"}, {"level": 5, "filename": "common/src/main/java/com/alibaba/nacos/common/spi/NacosServiceLoader.java", "line_number": 70, "column_number": -1, "description": "start of procedure newServiceInstances(...)", "snippet": "67.      * @return service instances\n68.      */\n69. >     public static <T> Collection<T> newServiceInstances(final Class<T> service) {\n70.         return SERVICES.containsKey(service) ? newServiceInstancesFromCache(service) : Collections.<T>emptyList();\n71.     }\n"}, {"level": 5, "filename": "common/src/main/java/com/alibaba/nacos/common/spi/NacosServiceLoader.java", "line_number": 71, "column_number": -1, "description": "Taking false branch", "snippet": "68.      */\n69.     public static <T> Collection<T> newServiceInstances(final Class<T> service) {\n70. >         return SERVICES.containsKey(service) ? newServiceInstancesFromCache(service) : Collections.<T>emptyList();\n71.     }\n72.     \n"}, {"level": 5, "filename": "common/src/main/java/com/alibaba/nacos/common/spi/NacosServiceLoader.java", "line_number": 71, "column_number": -1, "description": "return from a call to Collection NacosServiceLoader.newServiceInstances(Class)", "snippet": "68.      */\n69.     public static <T> Collection<T> newServiceInstances(final Class<T> service) {\n70. >         return SERVICES.containsKey(service) ? newServiceInstancesFromCache(service) : Collections.<T>emptyList();\n71.     }\n72.     \n"}, {"level": 4, "filename": "common/src/main/java/com/alibaba/nacos/common/spi/NacosServiceLoader.java", "line_number": 46, "column_number": -1, "description": "", "snippet": "43.     public static <T> Collection<T> load(final Class<T> service) {\n44.         if (SERVICES.containsKey(service)) {\n45. >             return newServiceInstances(service);\n46.         }\n47.         Collection<T> result = new LinkedHashSet<>();\n"}, {"level": 4, "filename": "common/src/main/java/com/alibaba/nacos/common/spi/NacosServiceLoader.java", "line_number": 53, "column_number": -1, "description": "return from a call to Collection NacosServiceLoader.load(Class)", "snippet": "50.             cacheServiceClass(service, each);\n51.         }\n52. >         return result;\n53.     }\n54.     \n"}, {"level": 3, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ControlManagerCenter.java", "line_number": 73, "column_number": -1, "description": "", "snippet": "70.         \n71.         Collection<TpsControlManager> tpsControlManagers = NacosServiceLoader.load(TpsControlManager.class);\n72. >         String tpsManagerName = ControlConfigs.getInstance().getTpsManager();\n73.         \n74.         for (TpsControlManager tpsControlManagerInternal : tpsControlManagers) {\n"}, {"level": 4, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/configs/ControlConfigs.java", "line_number": 32, "column_number": -1, "description": "start of procedure getInstance()", "snippet": "29.     private static volatile ControlConfigs instance = null;\n30.     \n31. >     public static ControlConfigs getInstance() {\n32.         if (instance == null) {\n33.             synchronized (ControlConfigs.class) {\n"}, {"level": 4, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/configs/ControlConfigs.java", "line_number": 33, "column_number": -1, "description": "Taking true branch", "snippet": "30.     \n31.     public static ControlConfigs getInstance() {\n32. >         if (instance == null) {\n33.             synchronized (ControlConfigs.class) {\n34.                 if (instance == null) {\n"}, {"level": 4, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/configs/ControlConfigs.java", "line_number": 34, "column_number": -1, "description": "", "snippet": "31.     public static ControlConfigs getInstance() {\n32.         if (instance == null) {\n33. >             synchronized (ControlConfigs.class) {\n34.                 if (instance == null) {\n35.                     instance = new ControlConfigs();\n"}, {"level": 4, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/configs/ControlConfigs.java", "line_number": 35, "column_number": -1, "description": "Taking true branch", "snippet": "32.         if (instance == null) {\n33.             synchronized (ControlConfigs.class) {\n34. >                 if (instance == null) {\n35.                     instance = new ControlConfigs();\n36.                     Collection<ControlConfigsInitializer> load = NacosServiceLoader\n"}, {"level": 4, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/configs/ControlConfigs.java", "line_number": 36, "column_number": -1, "description": "", "snippet": "33.             synchronized (ControlConfigs.class) {\n34.                 if (instance == null) {\n35. >                     instance = new ControlConfigs();\n36.                     Collection<ControlConfigsInitializer> load = NacosServiceLoader\n37.                             .load(ControlConfigsInitializer.class);\n"}, {"level": 5, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/configs/ControlConfigs.java", "line_number": 28, "column_number": -1, "description": "start of procedure ControlConfigs()", "snippet": "25.  * @author shiyiyue\n26.  */\n27. > public class ControlConfigs {\n28.     \n29.     private static volatile ControlConfigs instance = null;\n"}, {"level": 5, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/configs/ControlConfigs.java", "line_number": 53, "column_number": -1, "description": "", "snippet": "50.     }\n51.     \n52. >     private String tpsBarrierCreator = \"nacos\";\n53.     \n54.     private String tpsRuleBarrierCreator = \"nacos\";\n"}, {"level": 5, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/configs/ControlConfigs.java", "line_number": 55, "column_number": -1, "description": "", "snippet": "52.     private String tpsBarrierCreator = \"nacos\";\n53.     \n54. >     private String tpsRuleBarrierCreator = \"nacos\";\n55.     \n56.     private String connectionRuntimeEjector = \"nacos\";\n"}, {"level": 5, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/configs/ControlConfigs.java", "line_number": 57, "column_number": -1, "description": "", "snippet": "54.     private String tpsRuleBarrierCreator = \"nacos\";\n55.     \n56. >     private String connectionRuntimeEjector = \"nacos\";\n57.     \n58.     private String connectionManager = \"nacos\";\n"}, {"level": 5, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/configs/ControlConfigs.java", "line_number": 59, "column_number": -1, "description": "", "snippet": "56.     private String connectionRuntimeEjector = \"nacos\";\n57.     \n58. >     private String connectionManager = \"nacos\";\n59.     \n60.     private String tpsManager = \"nacos\";\n"}, {"level": 5, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/configs/ControlConfigs.java", "line_number": 61, "column_number": -1, "description": "", "snippet": "58.     private String connectionManager = \"nacos\";\n59.     \n60. >     private String tpsManager = \"nacos\";\n61.     \n62.     private String ruleExternalStorage = \"\";\n"}, {"level": 5, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/configs/ControlConfigs.java", "line_number": 63, "column_number": -1, "description": "", "snippet": "60.     private String tpsManager = \"nacos\";\n61.     \n62. >     private String ruleExternalStorage = \"\";\n63.     \n64.     private String ruleParser = \"nacos\";\n"}, {"level": 5, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/configs/ControlConfigs.java", "line_number": 65, "column_number": -1, "description": "", "snippet": "62.     private String ruleExternalStorage = \"\";\n63.     \n64. >     private String ruleParser = \"nacos\";\n65.     \n66.     private String localRuleStorageBaseDir = \"\";\n"}, {"level": 5, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/configs/ControlConfigs.java", "line_number": 67, "column_number": -1, "description": "return from a call to ControlConfigs.<init>()", "snippet": "64.     private String ruleParser = \"nacos\";\n65.     \n66. >     private String localRuleStorageBaseDir = \"\";\n67.     \n68.     public String getTpsBarrierCreator() {\n"}, {"level": 4, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/configs/ControlConfigs.java", "line_number": 36, "column_number": -1, "description": "", "snippet": "33.             synchronized (ControlConfigs.class) {\n34.                 if (instance == null) {\n35. >                     instance = new ControlConfigs();\n36.                     Collection<ControlConfigsInitializer> load = NacosServiceLoader\n37.                             .load(ControlConfigsInitializer.class);\n"}, {"level": 4, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/configs/ControlConfigs.java", "line_number": 38, "column_number": -1, "description": "", "snippet": "35.                     instance = new ControlConfigs();\n36.                     Collection<ControlConfigsInitializer> load = NacosServiceLoader\n37. >                             .load(ControlConfigsInitializer.class);\n38.                     for (ControlConfigsInitializer controlConfigsInitializer : load) {\n39.                         controlConfigsInitializer.initialize(instance);\n"}, {"level": 5, "filename": "common/src/main/java/com/alibaba/nacos/common/spi/NacosServiceLoader.java", "line_number": 44, "column_number": -1, "description": "start of procedure load(...)", "snippet": "41.      * @return service instances\n42.      */\n43. >     public static <T> Collection<T> load(final Class<T> service) {\n44.         if (SERVICES.containsKey(service)) {\n45.             return newServiceInstances(service);\n"}, {"level": 5, "filename": "common/src/main/java/com/alibaba/nacos/common/spi/NacosServiceLoader.java", "line_number": 45, "column_number": -1, "description": "Taking true branch", "snippet": "42.      */\n43.     public static <T> Collection<T> load(final Class<T> service) {\n44. >         if (SERVICES.containsKey(service)) {\n45.             return newServiceInstances(service);\n46.         }\n"}, {"level": 5, "filename": "common/src/main/java/com/alibaba/nacos/common/spi/NacosServiceLoader.java", "line_number": 46, "column_number": -1, "description": "", "snippet": "43.     public static <T> Collection<T> load(final Class<T> service) {\n44.         if (SERVICES.containsKey(service)) {\n45. >             return newServiceInstances(service);\n46.         }\n47.         Collection<T> result = new LinkedHashSet<>();\n"}, {"level": 6, "filename": "common/src/main/java/com/alibaba/nacos/common/spi/NacosServiceLoader.java", "line_number": 70, "column_number": -1, "description": "start of procedure newServiceInstances(...)", "snippet": "67.      * @return service instances\n68.      */\n69. >     public static <T> Collection<T> newServiceInstances(final Class<T> service) {\n70.         return SERVICES.containsKey(service) ? newServiceInstancesFromCache(service) : Collections.<T>emptyList();\n71.     }\n"}, {"level": 6, "filename": "common/src/main/java/com/alibaba/nacos/common/spi/NacosServiceLoader.java", "line_number": 71, "column_number": -1, "description": "Taking false branch", "snippet": "68.      */\n69.     public static <T> Collection<T> newServiceInstances(final Class<T> service) {\n70. >         return SERVICES.containsKey(service) ? newServiceInstancesFromCache(service) : Collections.<T>emptyList();\n71.     }\n72.     \n"}, {"level": 6, "filename": "common/src/main/java/com/alibaba/nacos/common/spi/NacosServiceLoader.java", "line_number": 71, "column_number": -1, "description": "return from a call to Collection NacosServiceLoader.newServiceInstances(Class)", "snippet": "68.      */\n69.     public static <T> Collection<T> newServiceInstances(final Class<T> service) {\n70. >         return SERVICES.containsKey(service) ? newServiceInstancesFromCache(service) : Collections.<T>emptyList();\n71.     }\n72.     \n"}, {"level": 5, "filename": "common/src/main/java/com/alibaba/nacos/common/spi/NacosServiceLoader.java", "line_number": 46, "column_number": -1, "description": "", "snippet": "43.     public static <T> Collection<T> load(final Class<T> service) {\n44.         if (SERVICES.containsKey(service)) {\n45. >             return newServiceInstances(service);\n46.         }\n47.         Collection<T> result = new LinkedHashSet<>();\n"}, {"level": 5, "filename": "common/src/main/java/com/alibaba/nacos/common/spi/NacosServiceLoader.java", "line_number": 53, "column_number": -1, "description": "return from a call to Collection NacosServiceLoader.load(Class)", "snippet": "50.             cacheServiceClass(service, each);\n51.         }\n52. >         return result;\n53.     }\n54.     \n"}, {"level": 4, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/configs/ControlConfigs.java", "line_number": 39, "column_number": -1, "description": "Taking false branch", "snippet": "36.                     Collection<ControlConfigsInitializer> load = NacosServiceLoader\n37.                             .load(ControlConfigsInitializer.class);\n38. >                     for (ControlConfigsInitializer controlConfigsInitializer : load) {\n39.                         controlConfigsInitializer.initialize(instance);\n40.                     }\n"}, {"level": 4, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/configs/ControlConfigs.java", "line_number": 43, "column_number": -1, "description": "", "snippet": "40.                     }\n41.                 }\n42. >             }\n43.         }\n44.         \n"}, {"level": 4, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/configs/ControlConfigs.java", "line_number": 46, "column_number": -1, "description": "return from a call to ControlConfigs ControlConfigs.getInstance()", "snippet": "43.         }\n44.         \n45. >         return instance;\n46.     }\n47.     \n"}, {"level": 3, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ControlManagerCenter.java", "line_number": 73, "column_number": -1, "description": "", "snippet": "70.         \n71.         Collection<TpsControlManager> tpsControlManagers = NacosServiceLoader.load(TpsControlManager.class);\n72. >         String tpsManagerName = ControlConfigs.getInstance().getTpsManager();\n73.         \n74.         for (TpsControlManager tpsControlManagerInternal : tpsControlManagers) {\n"}, {"level": 4, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/configs/ControlConfigs.java", "line_number": 117, "column_number": -1, "description": "start of procedure getTpsManager()", "snippet": "114.     }\n115.     \n116. >     public String getTpsManager() {\n117.         return tpsManager;\n118.     }\n"}, {"level": 4, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/configs/ControlConfigs.java", "line_number": 118, "column_number": -1, "description": "return from a call to String ControlConfigs.getTpsManager()", "snippet": "115.     \n116.     public String getTpsManager() {\n117. >         return tpsManager;\n118.     }\n119.     \n"}, {"level": 3, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ControlManagerCenter.java", "line_number": 75, "column_number": -1, "description": "Taking false branch", "snippet": "72.         String tpsManagerName = ControlConfigs.getInstance().getTpsManager();\n73.         \n74. >         for (TpsControlManager tpsControlManagerInternal : tpsControlManagers) {\n75.             if (tpsControlManagerInternal.getName().equalsIgnoreCase(tpsManagerName)) {\n76.                 Loggers.CONTROL.info(\"Found  tps control manager of name={},class={}\", tpsManagerName,\n"}, {"level": 3, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ControlManagerCenter.java", "line_number": 83, "column_number": -1, "description": "Taking true branch", "snippet": "80.             }\n81.         }\n82. >         if (tpsControlManager == null) {\n83.             Loggers.CONTROL.warn(\"Fail to found tps control manager of name \uff1a\" + tpsManagerName);\n84.             tpsControlManager = new NacosTpsControlManager();\n"}, {"level": 3, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ControlManagerCenter.java", "line_number": 84, "column_number": -1, "description": "Skipping warn(...): unknown method", "snippet": "81.         }\n82.         if (tpsControlManager == null) {\n83. >             Loggers.CONTROL.warn(\"Fail to found tps control manager of name \uff1a\" + tpsManagerName);\n84.             tpsControlManager = new NacosTpsControlManager();\n85.         }\n"}, {"level": 3, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ControlManagerCenter.java", "line_number": 85, "column_number": -1, "description": "", "snippet": "82.         if (tpsControlManager == null) {\n83.             Loggers.CONTROL.warn(\"Fail to found tps control manager of name \uff1a\" + tpsManagerName);\n84. >             tpsControlManager = new NacosTpsControlManager();\n85.         }\n86.         \n"}, {"level": 4, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/tps/nacos/NacosTpsControlManager.java", "line_number": 57, "column_number": -1, "description": "start of procedure NacosTpsControlManager()", "snippet": "54.     protected ScheduledExecutorService executorService;\n55.     \n56. >     public NacosTpsControlManager() {\n57.         executorService = ExecutorFactory.newSingleScheduledExecutorService(r -> {\n58.             Thread thread = new Thread(r, \"nacos.plugin.tps.control.reporter\");\n"}, {"level": 5, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/tps/TpsControlManager.java", "line_number": 35, "column_number": -1, "description": "start of procedure TpsControlManager()", "snippet": "32.  */\n33. @SuppressWarnings(\"PMD.AbstractClassShouldStartWithAbstractNamingRule\")\n34. > public abstract class TpsControlManager {\n35.     \n36.     /**\n"}, {"level": 5, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/tps/TpsControlManager.java", "line_number": 35, "column_number": -1, "description": "return from a call to TpsControlManager.<init>()", "snippet": "32.  */\n33. @SuppressWarnings(\"PMD.AbstractClassShouldStartWithAbstractNamingRule\")\n34. > public abstract class TpsControlManager {\n35.     \n36.     /**\n"}, {"level": 4, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/tps/nacos/NacosTpsControlManager.java", "line_number": 48, "column_number": -1, "description": "", "snippet": "45.      * point name -> tps barrier.\n46.      */\n47. >     protected final Map<String, TpsBarrier> points = new ConcurrentHashMap<>(16);\n48.     \n49.     /**\n"}, {"level": 4, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/tps/nacos/NacosTpsControlManager.java", "line_number": 53, "column_number": -1, "description": "", "snippet": "50.      * point name -> tps control rule.\n51.      */\n52. >     protected final Map<String, TpsControlRule> rules = new ConcurrentHashMap<>(16);\n53.     \n54.     protected ScheduledExecutorService executorService;\n"}, {"level": 4, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/tps/nacos/NacosTpsControlManager.java", "line_number": 58, "column_number": -1, "description": "", "snippet": "55.     \n56.     public NacosTpsControlManager() {\n57. >         executorService = ExecutorFactory.newSingleScheduledExecutorService(r -> {\n58.             Thread thread = new Thread(r, \"nacos.plugin.tps.control.reporter\");\n59.             thread.setDaemon(true);\n"}, {"level": 5, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/tps/nacos/NacosTpsControlManager.java", "line_number": 58, "column_number": -1, "description": "start of procedure callsite_com.alibaba.nacos.plugin.control.tps.nacos.NacosTpsControlManager$Lambda$_1_31()", "snippet": "55.     \n56.     public NacosTpsControlManager() {\n57. >         executorService = ExecutorFactory.newSingleScheduledExecutorService(r -> {\n58.             Thread thread = new Thread(r, \"nacos.plugin.tps.control.reporter\");\n59.             thread.setDaemon(true);\n"}, {"level": 5, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/tps/nacos/NacosTpsControlManager.java", "line_number": 58, "column_number": -1, "description": "return from a call to ThreadFactory NacosTpsControlManager.callsite_com.alibaba.nacos.plugin.control.tps.nacos.NacosTpsControlManager$Lambda$_1_31()", "snippet": "55.     \n56.     public NacosTpsControlManager() {\n57. >         executorService = ExecutorFactory.newSingleScheduledExecutorService(r -> {\n58.             Thread thread = new Thread(r, \"nacos.plugin.tps.control.reporter\");\n59.             thread.setDaemon(true);\n"}, {"level": 4, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/tps/nacos/NacosTpsControlManager.java", "line_number": 58, "column_number": -1, "description": "", "snippet": "55.     \n56.     public NacosTpsControlManager() {\n57. >         executorService = ExecutorFactory.newSingleScheduledExecutorService(r -> {\n58.             Thread thread = new Thread(r, \"nacos.plugin.tps.control.reporter\");\n59.             thread.setDaemon(true);\n"}, {"level": 5, "filename": "common/src/main/java/com/alibaba/nacos/common/executor/ExecutorFactory.java", "line_number": 59, "column_number": -1, "description": "start of procedure newSingleScheduledExecutorService(...)", "snippet": "56.     }\n57.     \n58. >     public static ScheduledExecutorService newSingleScheduledExecutorService(final ThreadFactory threadFactory) {\n59.         return Executors.newScheduledThreadPool(1, threadFactory);\n60.     }\n"}, {"level": 5, "filename": "common/src/main/java/com/alibaba/nacos/common/executor/ExecutorFactory.java", "line_number": 60, "column_number": -1, "description": "return from a call to ScheduledExecutorService ExecutorFactory.newSingleScheduledExecutorService(NacosTpsControlManager$Lambda$_1_31)", "snippet": "57.     \n58.     public static ScheduledExecutorService newSingleScheduledExecutorService(final ThreadFactory threadFactory) {\n59. >         return Executors.newScheduledThreadPool(1, threadFactory);\n60.     }\n61.     \n"}, {"level": 4, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/tps/nacos/NacosTpsControlManager.java", "line_number": 58, "column_number": -1, "description": "", "snippet": "55.     \n56.     public NacosTpsControlManager() {\n57. >         executorService = ExecutorFactory.newSingleScheduledExecutorService(r -> {\n58.             Thread thread = new Thread(r, \"nacos.plugin.tps.control.reporter\");\n59.             thread.setDaemon(true);\n"}, {"level": 4, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/tps/nacos/NacosTpsControlManager.java", "line_number": 64, "column_number": -1, "description": "Skipping startTpsReport(): empty list of specs", "snippet": "61.         });\n62.         \n63. >         startTpsReport();\n64.     }\n65.     \n"}, {"level": 5, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/tps/nacos/NacosTpsControlManager.java", "line_number": 67, "column_number": -1, "description": "Definition of startTpsReport()", "snippet": "64.     }\n65.     \n66. >     protected void startTpsReport() {\n67.         executorService\n68.                 .scheduleWithFixedDelay(new NacosTpsControlManager.TpsMetricsReporter(), 0, 900, TimeUnit.MILLISECONDS);\n"}, {"level": 4, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/tps/nacos/NacosTpsControlManager.java", "line_number": 65, "column_number": -1, "description": "return from a call to NacosTpsControlManager.<init>()", "snippet": "62.         \n63.         startTpsReport();\n64. >     }\n65.     \n66.     protected void startTpsReport() {\n"}, {"level": 3, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ControlManagerCenter.java", "line_number": 85, "column_number": -1, "description": "", "snippet": "82.         if (tpsControlManager == null) {\n83.             Loggers.CONTROL.warn(\"Fail to found tps control manager of name \uff1a\" + tpsManagerName);\n84. >             tpsControlManager = new NacosTpsControlManager();\n85.         }\n86.         \n"}, {"level": 3, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ControlManagerCenter.java", "line_number": 88, "column_number": -1, "description": "return from a call to void ControlManagerCenter.initTpsControlManager()", "snippet": "85.         }\n86.         \n87. >     }\n88.     \n89.     private ControlManagerCenter() {\n"}, {"level": 2, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ControlManagerCenter.java", "line_number": 92, "column_number": -1, "description": "", "snippet": "89.     private ControlManagerCenter() {\n90.         initTpsControlManager();\n91. >         initConnectionManager();\n92.         ruleStorageProxy = new RuleStorageProxy();\n93.     }\n"}, {"level": 3, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ControlManagerCenter.java", "line_number": 49, "column_number": -1, "description": "start of procedure initConnectionManager()", "snippet": "46.     private RuleStorageProxy ruleStorageProxy;\n47.     \n48. >     private void initConnectionManager() {\n49.         \n50.         Collection<ConnectionControlManager> connectionControlManagers = NacosServiceLoader\n"}, {"level": 3, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ControlManagerCenter.java", "line_number": 52, "column_number": -1, "description": "", "snippet": "49.         \n50.         Collection<ConnectionControlManager> connectionControlManagers = NacosServiceLoader\n51. >                 .load(ConnectionControlManager.class);\n52.         String connectionManagerName = ControlConfigs.getInstance().getConnectionManager();\n53.         \n"}, {"level": 4, "filename": "common/src/main/java/com/alibaba/nacos/common/spi/NacosServiceLoader.java", "line_number": 44, "column_number": -1, "description": "start of procedure load(...)", "snippet": "41.      * @return service instances\n42.      */\n43. >     public static <T> Collection<T> load(final Class<T> service) {\n44.         if (SERVICES.containsKey(service)) {\n45.             return newServiceInstances(service);\n"}, {"level": 4, "filename": "common/src/main/java/com/alibaba/nacos/common/spi/NacosServiceLoader.java", "line_number": 45, "column_number": -1, "description": "Taking true branch", "snippet": "42.      */\n43.     public static <T> Collection<T> load(final Class<T> service) {\n44. >         if (SERVICES.containsKey(service)) {\n45.             return newServiceInstances(service);\n46.         }\n"}, {"level": 4, "filename": "common/src/main/java/com/alibaba/nacos/common/spi/NacosServiceLoader.java", "line_number": 46, "column_number": -1, "description": "", "snippet": "43.     public static <T> Collection<T> load(final Class<T> service) {\n44.         if (SERVICES.containsKey(service)) {\n45. >             return newServiceInstances(service);\n46.         }\n47.         Collection<T> result = new LinkedHashSet<>();\n"}, {"level": 5, "filename": "common/src/main/java/com/alibaba/nacos/common/spi/NacosServiceLoader.java", "line_number": 70, "column_number": -1, "description": "start of procedure newServiceInstances(...)", "snippet": "67.      * @return service instances\n68.      */\n69. >     public static <T> Collection<T> newServiceInstances(final Class<T> service) {\n70.         return SERVICES.containsKey(service) ? newServiceInstancesFromCache(service) : Collections.<T>emptyList();\n71.     }\n"}, {"level": 5, "filename": "common/src/main/java/com/alibaba/nacos/common/spi/NacosServiceLoader.java", "line_number": 71, "column_number": -1, "description": "Taking false branch", "snippet": "68.      */\n69.     public static <T> Collection<T> newServiceInstances(final Class<T> service) {\n70. >         return SERVICES.containsKey(service) ? newServiceInstancesFromCache(service) : Collections.<T>emptyList();\n71.     }\n72.     \n"}, {"level": 5, "filename": "common/src/main/java/com/alibaba/nacos/common/spi/NacosServiceLoader.java", "line_number": 71, "column_number": -1, "description": "return from a call to Collection NacosServiceLoader.newServiceInstances(Class)", "snippet": "68.      */\n69.     public static <T> Collection<T> newServiceInstances(final Class<T> service) {\n70. >         return SERVICES.containsKey(service) ? newServiceInstancesFromCache(service) : Collections.<T>emptyList();\n71.     }\n72.     \n"}, {"level": 4, "filename": "common/src/main/java/com/alibaba/nacos/common/spi/NacosServiceLoader.java", "line_number": 46, "column_number": -1, "description": "", "snippet": "43.     public static <T> Collection<T> load(final Class<T> service) {\n44.         if (SERVICES.containsKey(service)) {\n45. >             return newServiceInstances(service);\n46.         }\n47.         Collection<T> result = new LinkedHashSet<>();\n"}, {"level": 4, "filename": "common/src/main/java/com/alibaba/nacos/common/spi/NacosServiceLoader.java", "line_number": 53, "column_number": -1, "description": "return from a call to Collection NacosServiceLoader.load(Class)", "snippet": "50.             cacheServiceClass(service, each);\n51.         }\n52. >         return result;\n53.     }\n54.     \n"}, {"level": 3, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ControlManagerCenter.java", "line_number": 53, "column_number": -1, "description": "", "snippet": "50.         Collection<ConnectionControlManager> connectionControlManagers = NacosServiceLoader\n51.                 .load(ConnectionControlManager.class);\n52. >         String connectionManagerName = ControlConfigs.getInstance().getConnectionManager();\n53.         \n54.         for (ConnectionControlManager connectionControlManagerInternal : connectionControlManagers) {\n"}, {"level": 4, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/configs/ControlConfigs.java", "line_number": 32, "column_number": -1, "description": "start of procedure getInstance()", "snippet": "29.     private static volatile ControlConfigs instance = null;\n30.     \n31. >     public static ControlConfigs getInstance() {\n32.         if (instance == null) {\n33.             synchronized (ControlConfigs.class) {\n"}, {"level": 4, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/configs/ControlConfigs.java", "line_number": 33, "column_number": -1, "description": "Taking false branch", "snippet": "30.     \n31.     public static ControlConfigs getInstance() {\n32. >         if (instance == null) {\n33.             synchronized (ControlConfigs.class) {\n34.                 if (instance == null) {\n"}, {"level": 4, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/configs/ControlConfigs.java", "line_number": 46, "column_number": -1, "description": "return from a call to ControlConfigs ControlConfigs.getInstance()", "snippet": "43.         }\n44.         \n45. >         return instance;\n46.     }\n47.     \n"}, {"level": 3, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ControlManagerCenter.java", "line_number": 53, "column_number": -1, "description": "", "snippet": "50.         Collection<ConnectionControlManager> connectionControlManagers = NacosServiceLoader\n51.                 .load(ConnectionControlManager.class);\n52. >         String connectionManagerName = ControlConfigs.getInstance().getConnectionManager();\n53.         \n54.         for (ConnectionControlManager connectionControlManagerInternal : connectionControlManagers) {\n"}, {"level": 4, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/configs/ControlConfigs.java", "line_number": 101, "column_number": -1, "description": "start of procedure getConnectionManager()", "snippet": "98.     }\n99.     \n100. >     public String getConnectionManager() {\n101.         return connectionManager;\n102.     }\n"}, {"level": 4, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/configs/ControlConfigs.java", "line_number": 102, "column_number": -1, "description": "return from a call to String ControlConfigs.getConnectionManager()", "snippet": "99.     \n100.     public String getConnectionManager() {\n101. >         return connectionManager;\n102.     }\n103.     \n"}, {"level": 3, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ControlManagerCenter.java", "line_number": 55, "column_number": -1, "description": "Taking false branch", "snippet": "52.         String connectionManagerName = ControlConfigs.getInstance().getConnectionManager();\n53.         \n54. >         for (ConnectionControlManager connectionControlManagerInternal : connectionControlManagers) {\n55.             if (connectionControlManagerInternal.getName().equalsIgnoreCase(connectionManagerName)) {\n56.                 Loggers.CONTROL.info(\"Found  connection control manager of name={},class={}\", connectionManagerName,\n"}, {"level": 3, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ControlManagerCenter.java", "line_number": 63, "column_number": -1, "description": "Taking true branch", "snippet": "60.             }\n61.         }\n62. >         if (connectionControlManager == null) {\n63.             Loggers.CONTROL.warn(\"Fail to connection control manager of name \uff1a\" + connectionManagerName);\n64.             connectionControlManager = new NacosConnectionControlManager();\n"}, {"level": 3, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ControlManagerCenter.java", "line_number": 64, "column_number": -1, "description": "Skipping warn(...): unknown method", "snippet": "61.         }\n62.         if (connectionControlManager == null) {\n63. >             Loggers.CONTROL.warn(\"Fail to connection control manager of name \uff1a\" + connectionManagerName);\n64.             connectionControlManager = new NacosConnectionControlManager();\n65.         }\n"}, {"level": 3, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ControlManagerCenter.java", "line_number": 65, "column_number": -1, "description": "", "snippet": "62.         if (connectionControlManager == null) {\n63.             Loggers.CONTROL.warn(\"Fail to connection control manager of name \uff1a\" + connectionManagerName);\n64. >             connectionControlManager = new NacosConnectionControlManager();\n65.         }\n66.         \n"}, {"level": 4, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/connection/nacos/NacosConnectionControlManager.java", "line_number": 40, "column_number": -1, "description": "start of procedure NacosConnectionControlManager()", "snippet": "37.     \n38.     public NacosConnectionControlManager() {\n39. >         super();\n40.     }\n41.     \n"}, {"level": 5, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/connection/ConnectionControlManager.java", "line_number": 56, "column_number": -1, "description": "start of procedure ConnectionControlManager()", "snippet": "53.     private ScheduledExecutorService executorService;\n54.     \n55. >     public ConnectionControlManager() {\n56.         metricsCollectorList = NacosServiceLoader.load(ConnectionMetricsCollector.class);\n57.         Loggers.CONTROL.info(\"Load connection metrics collector,size={},{}\", metricsCollectorList.size(),\n"}, {"level": 5, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/connection/ConnectionControlManager.java", "line_number": 57, "column_number": -1, "description": "", "snippet": "54.     \n55.     public ConnectionControlManager() {\n56. >         metricsCollectorList = NacosServiceLoader.load(ConnectionMetricsCollector.class);\n57.         Loggers.CONTROL.info(\"Load connection metrics collector,size={},{}\", metricsCollectorList.size(),\n58.                 metricsCollectorList);\n"}, {"level": 6, "filename": "common/src/main/java/com/alibaba/nacos/common/spi/NacosServiceLoader.java", "line_number": 44, "column_number": -1, "description": "start of procedure load(...)", "snippet": "41.      * @return service instances\n42.      */\n43. >     public static <T> Collection<T> load(final Class<T> service) {\n44.         if (SERVICES.containsKey(service)) {\n45.             return newServiceInstances(service);\n"}, {"level": 6, "filename": "common/src/main/java/com/alibaba/nacos/common/spi/NacosServiceLoader.java", "line_number": 45, "column_number": -1, "description": "Taking false branch", "snippet": "42.      */\n43.     public static <T> Collection<T> load(final Class<T> service) {\n44. >         if (SERVICES.containsKey(service)) {\n45.             return newServiceInstances(service);\n46.         }\n"}, {"level": 6, "filename": "common/src/main/java/com/alibaba/nacos/common/spi/NacosServiceLoader.java", "line_number": 48, "column_number": -1, "description": "Skipping LinkedHashSet(): unknown method", "snippet": "45.             return newServiceInstances(service);\n46.         }\n47. >         Collection<T> result = new LinkedHashSet<>();\n48.         for (T each : ServiceLoader.load(service)) {\n49.             result.add(each);\n"}, {"level": 6, "filename": "common/src/main/java/com/alibaba/nacos/common/spi/NacosServiceLoader.java", "line_number": 49, "column_number": -1, "description": "Taking false branch", "snippet": "46.         }\n47.         Collection<T> result = new LinkedHashSet<>();\n48. >         for (T each : ServiceLoader.load(service)) {\n49.             result.add(each);\n50.             cacheServiceClass(service, each);\n"}, {"level": 6, "filename": "common/src/main/java/com/alibaba/nacos/common/spi/NacosServiceLoader.java", "line_number": 53, "column_number": -1, "description": "return from a call to Collection NacosServiceLoader.load(Class)", "snippet": "50.             cacheServiceClass(service, each);\n51.         }\n52. >         return result;\n53.     }\n54.     \n"}, {"level": 5, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/connection/ConnectionControlManager.java", "line_number": 57, "column_number": -1, "description": "", "snippet": "54.     \n55.     public ConnectionControlManager() {\n56. >         metricsCollectorList = NacosServiceLoader.load(ConnectionMetricsCollector.class);\n57.         Loggers.CONTROL.info(\"Load connection metrics collector,size={},{}\", metricsCollectorList.size(),\n58.                 metricsCollectorList);\n"}, {"level": 5, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/connection/ConnectionControlManager.java", "line_number": 58, "column_number": -1, "description": "Skipping info(...): unknown method", "snippet": "55.     public ConnectionControlManager() {\n56.         metricsCollectorList = NacosServiceLoader.load(ConnectionMetricsCollector.class);\n57. >         Loggers.CONTROL.info(\"Load connection metrics collector,size={},{}\", metricsCollectorList.size(),\n58.                 metricsCollectorList);\n59.         initConnectionRule();\n"}, {"level": 5, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/connection/ConnectionControlManager.java", "line_number": 60, "column_number": -1, "description": "", "snippet": "57.         Loggers.CONTROL.info(\"Load connection metrics collector,size={},{}\", metricsCollectorList.size(),\n58.                 metricsCollectorList);\n59. >         initConnectionRule();\n60.         if (!metricsCollectorList.isEmpty()) {\n61.             initExecuteService();\n"}, {"level": 6, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/connection/ConnectionControlManager.java", "line_number": 80, "column_number": -1, "description": "start of procedure initConnectionRule()", "snippet": "77.     }\n78.     \n79. >     private void initConnectionRule() {\n80.         RuleStorageProxy ruleStorageProxy = RuleStorageProxy.getInstance();\n81.         String localRuleContent = ruleStorageProxy.getLocalDiskStorage().getConnectionRule();\n"}, {"level": 6, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/connection/ConnectionControlManager.java", "line_number": 81, "column_number": -1, "description": "", "snippet": "78.     \n79.     private void initConnectionRule() {\n80. >         RuleStorageProxy ruleStorageProxy = RuleStorageProxy.getInstance();\n81.         String localRuleContent = ruleStorageProxy.getLocalDiskStorage().getConnectionRule();\n82.         if (StringUtils.isNotBlank(localRuleContent)) {\n"}, {"level": 7, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/RuleStorageProxy.java", "line_number": 78, "column_number": -1, "description": "start of procedure getInstance()", "snippet": "75.     }\n76.     \n77. >     public static final RuleStorageProxy getInstance() {\n78.         return INSTANCE;\n79.     }\n"}, {"level": 7, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/RuleStorageProxy.java", "line_number": 79, "column_number": -1, "description": "return from a call to RuleStorageProxy RuleStorageProxy.getInstance()", "snippet": "76.     \n77.     public static final RuleStorageProxy getInstance() {\n78. >         return INSTANCE;\n79.     }\n80. }\n"}, {"level": 6, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/connection/ConnectionControlManager.java", "line_number": 82, "column_number": -1, "description": "", "snippet": "79.     private void initConnectionRule() {\n80.         RuleStorageProxy ruleStorageProxy = RuleStorageProxy.getInstance();\n81. >         String localRuleContent = ruleStorageProxy.getLocalDiskStorage().getConnectionRule();\n82.         if (StringUtils.isNotBlank(localRuleContent)) {\n83.             Loggers.CONTROL.info(\"Found local disk connection rule content on start up,value  ={}\", localRuleContent);\n"}, {"level": 7, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/RuleStorageProxy.java", "line_number": 70, "column_number": -1, "description": "start of procedure getLocalDiskStorage()", "snippet": "67.     }\n68.     \n69. >     public RuleStorage getLocalDiskStorage() {\n70.         return localDiskRuleStorage;\n71.     }\n"}, {"level": 7, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/RuleStorageProxy.java", "line_number": 71, "column_number": -1, "description": "return from a call to RuleStorage RuleStorageProxy.getLocalDiskStorage()", "snippet": "68.     \n69.     public RuleStorage getLocalDiskStorage() {\n70. >         return localDiskRuleStorage;\n71.     }\n72.     \n"}, {"level": 6, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/connection/ConnectionControlManager.java", "line_number": 82, "column_number": -1, "description": "Skipping getConnectionRule(): unknown method", "snippet": "79.     private void initConnectionRule() {\n80.         RuleStorageProxy ruleStorageProxy = RuleStorageProxy.getInstance();\n81. >         String localRuleContent = ruleStorageProxy.getLocalDiskStorage().getConnectionRule();\n82.         if (StringUtils.isNotBlank(localRuleContent)) {\n83.             Loggers.CONTROL.info(\"Found local disk connection rule content on start up,value  ={}\", localRuleContent);\n"}, {"level": 7, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/RuleStorage.java", "line_number": -1, "column_number": -1, "description": "Definition of getConnectionRule()", "snippet": ""}, {"level": 6, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/connection/ConnectionControlManager.java", "line_number": 83, "column_number": -1, "description": "", "snippet": "80.         RuleStorageProxy ruleStorageProxy = RuleStorageProxy.getInstance();\n81.         String localRuleContent = ruleStorageProxy.getLocalDiskStorage().getConnectionRule();\n82. >         if (StringUtils.isNotBlank(localRuleContent)) {\n83.             Loggers.CONTROL.info(\"Found local disk connection rule content on start up,value  ={}\", localRuleContent);\n84.         } else if (ruleStorageProxy.getExternalStorage() != null\n"}, {"level": 7, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 96, "column_number": -1, "description": "start of procedure isNotBlank(...)", "snippet": "93.      * @return {@code true} if the string is not empty and not null and not whitespace\n94.      */\n95. >     public static boolean isNotBlank(String str) {\n96.         return !isBlank(str);\n97.     }\n"}, {"level": 7, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 97, "column_number": -1, "description": "", "snippet": "94.      */\n95.     public static boolean isNotBlank(String str) {\n96. >         return !isBlank(str);\n97.     }\n98.     \n"}, {"level": 8, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 77, "column_number": -1, "description": "start of procedure isBlank(...)", "snippet": "74.      * @return {@code true} if the string is empty and null and whitespace\n75.      */\n76. >     public static boolean isBlank(final CharSequence cs) {\n77.         int strLen;\n78.         if (cs == null || (strLen = cs.length()) == 0) {\n"}, {"level": 8, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 79, "column_number": -1, "description": "Taking true branch", "snippet": "76.     public static boolean isBlank(final CharSequence cs) {\n77.         int strLen;\n78. >         if (cs == null || (strLen = cs.length()) == 0) {\n79.             return true;\n80.         }\n"}, {"level": 8, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 79, "column_number": -1, "description": "Taking false branch", "snippet": "76.     public static boolean isBlank(final CharSequence cs) {\n77.         int strLen;\n78. >         if (cs == null || (strLen = cs.length()) == 0) {\n79.             return true;\n80.         }\n"}, {"level": 8, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 82, "column_number": -1, "description": "Taking true branch", "snippet": "79.             return true;\n80.         }\n81. >         for (int i = 0; i < strLen; i++) {\n82.             if (!Character.isWhitespace(cs.charAt(i))) {\n83.                 return false;\n"}, {"level": 8, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 83, "column_number": -1, "description": "Taking true branch", "snippet": "80.         }\n81.         for (int i = 0; i < strLen; i++) {\n82. >             if (!Character.isWhitespace(cs.charAt(i))) {\n83.                 return false;\n84.             }\n"}, {"level": 8, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 84, "column_number": -1, "description": "", "snippet": "81.         for (int i = 0; i < strLen; i++) {\n82.             if (!Character.isWhitespace(cs.charAt(i))) {\n83. >                 return false;\n84.             }\n85.         }\n"}, {"level": 8, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 87, "column_number": -1, "description": "return from a call to boolean StringUtils.isBlank(CharSequence)", "snippet": "84.             }\n85.         }\n86. >         return true;\n87.     }\n88.     \n"}, {"level": 7, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 97, "column_number": -1, "description": "Taking true branch", "snippet": "94.      */\n95.     public static boolean isNotBlank(String str) {\n96. >         return !isBlank(str);\n97.     }\n98.     \n"}, {"level": 7, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 97, "column_number": -1, "description": "return from a call to boolean StringUtils.isNotBlank(CharSequence)", "snippet": "94.      */\n95.     public static boolean isNotBlank(String str) {\n96. >         return !isBlank(str);\n97.     }\n98.     \n"}, {"level": 6, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/connection/ConnectionControlManager.java", "line_number": 83, "column_number": -1, "description": "Taking true branch", "snippet": "80.         RuleStorageProxy ruleStorageProxy = RuleStorageProxy.getInstance();\n81.         String localRuleContent = ruleStorageProxy.getLocalDiskStorage().getConnectionRule();\n82. >         if (StringUtils.isNotBlank(localRuleContent)) {\n83.             Loggers.CONTROL.info(\"Found local disk connection rule content on start up,value  ={}\", localRuleContent);\n84.         } else if (ruleStorageProxy.getExternalStorage() != null\n"}, {"level": 6, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/connection/ConnectionControlManager.java", "line_number": 84, "column_number": -1, "description": "Skipping info(...): unknown method", "snippet": "81.         String localRuleContent = ruleStorageProxy.getLocalDiskStorage().getConnectionRule();\n82.         if (StringUtils.isNotBlank(localRuleContent)) {\n83. >             Loggers.CONTROL.info(\"Found local disk connection rule content on start up,value  ={}\", localRuleContent);\n84.         } else if (ruleStorageProxy.getExternalStorage() != null\n85.                 && ruleStorageProxy.getExternalStorage().getConnectionRule() != null) {\n"}, {"level": 6, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/connection/ConnectionControlManager.java", "line_number": 94, "column_number": -1, "description": "", "snippet": "91.         }\n92.         \n93. >         if (StringUtils.isNotBlank(localRuleContent)) {\n94.             connectionControlRule = RuleParserProxy.getInstance().parseConnectionRule(localRuleContent);\n95.             Loggers.CONTROL.info(\"init connection rule end\");\n"}, {"level": 7, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 96, "column_number": -1, "description": "start of procedure isNotBlank(...)", "snippet": "93.      * @return {@code true} if the string is not empty and not null and not whitespace\n94.      */\n95. >     public static boolean isNotBlank(String str) {\n96.         return !isBlank(str);\n97.     }\n"}, {"level": 7, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 97, "column_number": -1, "description": "", "snippet": "94.      */\n95.     public static boolean isNotBlank(String str) {\n96. >         return !isBlank(str);\n97.     }\n98.     \n"}, {"level": 8, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 77, "column_number": -1, "description": "start of procedure isBlank(...)", "snippet": "74.      * @return {@code true} if the string is empty and null and whitespace\n75.      */\n76. >     public static boolean isBlank(final CharSequence cs) {\n77.         int strLen;\n78.         if (cs == null || (strLen = cs.length()) == 0) {\n"}, {"level": 8, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 79, "column_number": -1, "description": "Taking true branch", "snippet": "76.     public static boolean isBlank(final CharSequence cs) {\n77.         int strLen;\n78. >         if (cs == null || (strLen = cs.length()) == 0) {\n79.             return true;\n80.         }\n"}, {"level": 8, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 79, "column_number": -1, "description": "Taking false branch", "snippet": "76.     public static boolean isBlank(final CharSequence cs) {\n77.         int strLen;\n78. >         if (cs == null || (strLen = cs.length()) == 0) {\n79.             return true;\n80.         }\n"}, {"level": 8, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 82, "column_number": -1, "description": "Taking false branch", "snippet": "79.             return true;\n80.         }\n81. >         for (int i = 0; i < strLen; i++) {\n82.             if (!Character.isWhitespace(cs.charAt(i))) {\n83.                 return false;\n"}, {"level": 8, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 87, "column_number": -1, "description": "return from a call to boolean StringUtils.isBlank(CharSequence)", "snippet": "84.             }\n85.         }\n86. >         return true;\n87.     }\n88.     \n"}, {"level": 7, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 97, "column_number": -1, "description": "Taking false branch", "snippet": "94.      */\n95.     public static boolean isNotBlank(String str) {\n96. >         return !isBlank(str);\n97.     }\n98.     \n"}, {"level": 7, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 97, "column_number": -1, "description": "return from a call to boolean StringUtils.isNotBlank(CharSequence)", "snippet": "94.      */\n95.     public static boolean isNotBlank(String str) {\n96. >         return !isBlank(str);\n97.     }\n98.     \n"}, {"level": 6, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/connection/ConnectionControlManager.java", "line_number": 94, "column_number": -1, "description": "Taking false branch", "snippet": "91.         }\n92.         \n93. >         if (StringUtils.isNotBlank(localRuleContent)) {\n94.             connectionControlRule = RuleParserProxy.getInstance().parseConnectionRule(localRuleContent);\n95.             Loggers.CONTROL.info(\"init connection rule end\");\n"}, {"level": 6, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/connection/ConnectionControlManager.java", "line_number": 99, "column_number": -1, "description": "Skipping info(...): unknown method", "snippet": "96.             \n97.         } else {\n98. >             Loggers.CONTROL.info(\"No connection rule content found ,use default empty rule \");\n99.             connectionControlRule = new ConnectionControlRule();\n100.         }\n"}, {"level": 6, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/connection/ConnectionControlManager.java", "line_number": 100, "column_number": -1, "description": "", "snippet": "97.         } else {\n98.             Loggers.CONTROL.info(\"No connection rule content found ,use default empty rule \");\n99. >             connectionControlRule = new ConnectionControlRule();\n100.         }\n101.     }\n"}, {"level": 7, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/connection/rule/ConnectionControlRule.java", "line_number": 27, "column_number": -1, "description": "start of procedure ConnectionControlRule()", "snippet": "24.  * @author shiyiyue\n25.  */\n26. > public class ConnectionControlRule {\n27.     \n28.     private Set<String> monitorIpList = new HashSet<>();\n"}, {"level": 7, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/connection/rule/ConnectionControlRule.java", "line_number": 29, "column_number": -1, "description": "", "snippet": "26. public class ConnectionControlRule {\n27.     \n28. >     private Set<String> monitorIpList = new HashSet<>();\n29.     \n30.     private int countLimit = -1;\n"}, {"level": 7, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/connection/rule/ConnectionControlRule.java", "line_number": 31, "column_number": -1, "description": "return from a call to ConnectionControlRule.<init>()", "snippet": "28.     private Set<String> monitorIpList = new HashSet<>();\n29.     \n30. >     private int countLimit = -1;\n31.     \n32.     public int getCountLimit() {\n"}, {"level": 6, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/connection/ConnectionControlManager.java", "line_number": 100, "column_number": -1, "description": "", "snippet": "97.         } else {\n98.             Loggers.CONTROL.info(\"No connection rule content found ,use default empty rule \");\n99. >             connectionControlRule = new ConnectionControlRule();\n100.         }\n101.     }\n"}, {"level": 6, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/connection/ConnectionControlManager.java", "line_number": 102, "column_number": -1, "description": "return from a call to void ConnectionControlManager.initConnectionRule()", "snippet": "99.             connectionControlRule = new ConnectionControlRule();\n100.         }\n101. >     }\n102.     \n103.     public ConnectionControlRule getConnectionLimitRule() {\n"}, {"level": 5, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/connection/ConnectionControlManager.java", "line_number": 61, "column_number": -1, "description": "Taking true branch", "snippet": "58.                 metricsCollectorList);\n59.         initConnectionRule();\n60. >         if (!metricsCollectorList.isEmpty()) {\n61.             initExecuteService();\n62.             startConnectionMetricsReport();\n"}, {"level": 5, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/connection/ConnectionControlManager.java", "line_number": 62, "column_number": -1, "description": "", "snippet": "59.         initConnectionRule();\n60.         if (!metricsCollectorList.isEmpty()) {\n61. >             initExecuteService();\n62.             startConnectionMetricsReport();\n63.         }\n"}, {"level": 6, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/connection/ConnectionControlManager.java", "line_number": 68, "column_number": -1, "description": "start of procedure initExecuteService()", "snippet": "65.     }\n66.     \n67. >     private void initExecuteService() {\n68.         executorService = ExecutorFactory.newSingleScheduledExecutorService(r -> {\n69.             Thread thread = new Thread(r, \"nacos.plugin.control.connection.reporter\");\n"}, {"level": 6, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/connection/ConnectionControlManager.java", "line_number": 69, "column_number": -1, "description": "", "snippet": "66.     \n67.     private void initExecuteService() {\n68. >         executorService = ExecutorFactory.newSingleScheduledExecutorService(r -> {\n69.             Thread thread = new Thread(r, \"nacos.plugin.control.connection.reporter\");\n70.             thread.setDaemon(true);\n"}, {"level": 7, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/connection/ConnectionControlManager.java", "line_number": 69, "column_number": -1, "description": "start of procedure callsite_com.alibaba.nacos.plugin.control.connection.ConnectionControlManager$Lambda$_4_1()", "snippet": "66.     \n67.     private void initExecuteService() {\n68. >         executorService = ExecutorFactory.newSingleScheduledExecutorService(r -> {\n69.             Thread thread = new Thread(r, \"nacos.plugin.control.connection.reporter\");\n70.             thread.setDaemon(true);\n"}, {"level": 7, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/connection/ConnectionControlManager.java", "line_number": 69, "column_number": -1, "description": "return from a call to ThreadFactory ConnectionControlManager.callsite_com.alibaba.nacos.plugin.control.connection.ConnectionControlManager$Lambda$_4_1()", "snippet": "66.     \n67.     private void initExecuteService() {\n68. >         executorService = ExecutorFactory.newSingleScheduledExecutorService(r -> {\n69.             Thread thread = new Thread(r, \"nacos.plugin.control.connection.reporter\");\n70.             thread.setDaemon(true);\n"}, {"level": 6, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/connection/ConnectionControlManager.java", "line_number": 69, "column_number": -1, "description": "", "snippet": "66.     \n67.     private void initExecuteService() {\n68. >         executorService = ExecutorFactory.newSingleScheduledExecutorService(r -> {\n69.             Thread thread = new Thread(r, \"nacos.plugin.control.connection.reporter\");\n70.             thread.setDaemon(true);\n"}, {"level": 7, "filename": "common/src/main/java/com/alibaba/nacos/common/executor/ExecutorFactory.java", "line_number": 59, "column_number": -1, "description": "start of procedure newSingleScheduledExecutorService(...)", "snippet": "56.     }\n57.     \n58. >     public static ScheduledExecutorService newSingleScheduledExecutorService(final ThreadFactory threadFactory) {\n59.         return Executors.newScheduledThreadPool(1, threadFactory);\n60.     }\n"}, {"level": 7, "filename": "common/src/main/java/com/alibaba/nacos/common/executor/ExecutorFactory.java", "line_number": 60, "column_number": -1, "description": "return from a call to ScheduledExecutorService ExecutorFactory.newSingleScheduledExecutorService(ConnectionControlManager$Lambda$_4_1)", "snippet": "57.     \n58.     public static ScheduledExecutorService newSingleScheduledExecutorService(final ThreadFactory threadFactory) {\n59. >         return Executors.newScheduledThreadPool(1, threadFactory);\n60.     }\n61.     \n"}, {"level": 6, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/connection/ConnectionControlManager.java", "line_number": 69, "column_number": -1, "description": "", "snippet": "66.     \n67.     private void initExecuteService() {\n68. >         executorService = ExecutorFactory.newSingleScheduledExecutorService(r -> {\n69.             Thread thread = new Thread(r, \"nacos.plugin.control.connection.reporter\");\n70.             thread.setDaemon(true);\n"}, {"level": 6, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/connection/ConnectionControlManager.java", "line_number": 74, "column_number": -1, "description": "return from a call to void ConnectionControlManager.initExecuteService()", "snippet": "71.             return thread;\n72.         });\n73. >     }\n74.     \n75.     private void startConnectionMetricsReport() {\n"}, {"level": 5, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/connection/ConnectionControlManager.java", "line_number": 63, "column_number": -1, "description": "Skipping startConnectionMetricsReport(): empty list of specs", "snippet": "60.         if (!metricsCollectorList.isEmpty()) {\n61.             initExecuteService();\n62. >             startConnectionMetricsReport();\n63.         }\n64.         \n"}, {"level": 6, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/connection/ConnectionControlManager.java", "line_number": 76, "column_number": -1, "description": "Definition of startConnectionMetricsReport()", "snippet": "73.     }\n74.     \n75. >     private void startConnectionMetricsReport() {\n76.         executorService.scheduleWithFixedDelay(new ConnectionMetricsReporter(), 0, 3000, TimeUnit.MILLISECONDS);\n77.     }\n"}, {"level": 5, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/connection/ConnectionControlManager.java", "line_number": 66, "column_number": -1, "description": "return from a call to ConnectionControlManager.<init>()", "snippet": "63.         }\n64.         \n65. >     }\n66.     \n67.     private void initExecuteService() {\n"}, {"level": 4, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/connection/nacos/NacosConnectionControlManager.java", "line_number": 41, "column_number": -1, "description": "return from a call to NacosConnectionControlManager.<init>()", "snippet": "38.     public NacosConnectionControlManager() {\n39.         super();\n40. >     }\n41.     \n42.     @Override\n"}, {"level": 3, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ControlManagerCenter.java", "line_number": 65, "column_number": -1, "description": "", "snippet": "62.         if (connectionControlManager == null) {\n63.             Loggers.CONTROL.warn(\"Fail to connection control manager of name \uff1a\" + connectionManagerName);\n64. >             connectionControlManager = new NacosConnectionControlManager();\n65.         }\n66.         \n"}, {"level": 3, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ControlManagerCenter.java", "line_number": 68, "column_number": -1, "description": "return from a call to void ControlManagerCenter.initConnectionManager()", "snippet": "65.         }\n66.         \n67. >     }\n68.     \n69.     private void initTpsControlManager() {\n"}, {"level": 2, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ControlManagerCenter.java", "line_number": 93, "column_number": -1, "description": "Skipping RuleStorageProxy(): empty list of specs", "snippet": "90.         initTpsControlManager();\n91.         initConnectionManager();\n92. >         ruleStorageProxy = new RuleStorageProxy();\n93.     }\n94.     \n"}, {"level": 3, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/RuleStorageProxy.java", "line_number": 44, "column_number": -1, "description": "Definition of RuleStorageProxy()", "snippet": "41.     ControlRuleChangeActivator controlRuleChangeActivator = null;\n42.     \n43. >     public RuleStorageProxy() {\n44.         \n45.         Collection<ExternalRuleStorage> persistRuleActivators = NacosServiceLoader.load(ExternalRuleStorage.class);\n"}, {"level": 2, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ControlManagerCenter.java", "line_number": 93, "column_number": -1, "description": "", "snippet": "90.         initTpsControlManager();\n91.         initConnectionManager();\n92. >         ruleStorageProxy = new RuleStorageProxy();\n93.     }\n94.     \n"}, {"level": 2, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ControlManagerCenter.java", "line_number": 94, "column_number": -1, "description": "return from a call to ControlManagerCenter.<init>()", "snippet": "91.         initConnectionManager();\n92.         ruleStorageProxy = new RuleStorageProxy();\n93. >     }\n94.     \n95.     public RuleStorageProxy getRuleStorageProxy() {\n"}, {"level": 1, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ControlManagerCenter.java", "line_number": 116, "column_number": -1, "description": "", "snippet": "113.             synchronized (ControlManagerCenter.class) {\n114.                 if (instance == null) {\n115. >                     instance = new ControlManagerCenter();\n116.                 }\n117.             }\n"}, {"level": 1, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ControlManagerCenter.java", "line_number": 118, "column_number": -1, "description": "", "snippet": "115.                     instance = new ControlManagerCenter();\n116.                 }\n117. >             }\n118.         }\n119.         return instance;\n"}, {"level": 1, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ControlManagerCenter.java", "line_number": 120, "column_number": -1, "description": "return from a call to ControlManagerCenter ControlManagerCenter.getInstance()", "snippet": "117.             }\n118.         }\n119. >         return instance;\n120.     }\n121.     \n"}, {"level": 0, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/ControlRuleChangeActivator.java", "line_number": 100, "column_number": -1, "description": "", "snippet": "97.             try {\n98.                 \n99. >                 RuleStorageProxy ruleStorageProxy = ControlManagerCenter.getInstance().getRuleStorageProxy();\n100.                 \n101.                 if (event.isExternal()) {\n"}, {"level": 1, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ControlManagerCenter.java", "line_number": 96, "column_number": -1, "description": "start of procedure getRuleStorageProxy()", "snippet": "93.     }\n94.     \n95. >     public RuleStorageProxy getRuleStorageProxy() {\n96.         return ruleStorageProxy;\n97.     }\n"}, {"level": 1, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ControlManagerCenter.java", "line_number": 97, "column_number": -1, "description": "return from a call to RuleStorageProxy ControlManagerCenter.getRuleStorageProxy()", "snippet": "94.     \n95.     public RuleStorageProxy getRuleStorageProxy() {\n96. >         return ruleStorageProxy;\n97.     }\n98.     \n"}, {"level": 0, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/ControlRuleChangeActivator.java", "line_number": 102, "column_number": -1, "description": "", "snippet": "99.                 RuleStorageProxy ruleStorageProxy = ControlManagerCenter.getInstance().getRuleStorageProxy();\n100.                 \n101. >                 if (event.isExternal()) {\n102.                     if (ruleStorageProxy.getExternalStorage() != null) {\n103.                         String connectionRule = ruleStorageProxy.getExternalStorage().getConnectionRule();\n"}, {"level": 1, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/event/ConnectionLimitRuleChangeEvent.java", "line_number": 33, "column_number": -1, "description": "start of procedure isExternal()", "snippet": "30.     }\n31.     \n32. >     public boolean isExternal() {\n33.         return external;\n34.     }\n"}, {"level": 1, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/event/ConnectionLimitRuleChangeEvent.java", "line_number": 34, "column_number": -1, "description": "return from a call to boolean ConnectionLimitRuleChangeEvent.isExternal()", "snippet": "31.     \n32.     public boolean isExternal() {\n33. >         return external;\n34.     }\n35.     \n"}, {"level": 0, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/ControlRuleChangeActivator.java", "line_number": 102, "column_number": -1, "description": "Taking false branch", "snippet": "99.                 RuleStorageProxy ruleStorageProxy = ControlManagerCenter.getInstance().getRuleStorageProxy();\n100.                 \n101. >                 if (event.isExternal()) {\n102.                     if (ruleStorageProxy.getExternalStorage() != null) {\n103.                         String connectionRule = ruleStorageProxy.getExternalStorage().getConnectionRule();\n"}, {"level": 0, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/ControlRuleChangeActivator.java", "line_number": 112, "column_number": -1, "description": "", "snippet": "109.                     \n110.                 }\n111. >                 String limitRule = ruleStorageProxy.getLocalDiskStorage().getConnectionRule();\n112.                 \n113.                 Loggers.CONTROL.info(\"start to apply connection rule content \" + limitRule);\n"}, {"level": 1, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/RuleStorageProxy.java", "line_number": 70, "column_number": -1, "description": "start of procedure getLocalDiskStorage()", "snippet": "67.     }\n68.     \n69. >     public RuleStorage getLocalDiskStorage() {\n70.         return localDiskRuleStorage;\n71.     }\n"}, {"level": 1, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/RuleStorageProxy.java", "line_number": 71, "column_number": -1, "description": "return from a call to RuleStorage RuleStorageProxy.getLocalDiskStorage()", "snippet": "68.     \n69.     public RuleStorage getLocalDiskStorage() {\n70. >         return localDiskRuleStorage;\n71.     }\n72.     \n"}, {"level": 0, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/ControlRuleChangeActivator.java", "line_number": 112, "column_number": -1, "description": "", "snippet": "109.                     \n110.                 }\n111. >                 String limitRule = ruleStorageProxy.getLocalDiskStorage().getConnectionRule();\n112.                 \n113.                 Loggers.CONTROL.info(\"start to apply connection rule content \" + limitRule);\n"}]}, {"url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/auth/ram/utils/SpasAdapter.java", "rawCode": "/*\n * Copyright 1999-2021 Alibaba Group Holding Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.alibaba.nacos.client.auth.ram.utils;\n\nimport com.alibaba.nacos.api.common.Constants;\nimport com.alibaba.nacos.client.auth.ram.identify.CredentialService;\nimport com.alibaba.nacos.common.codec.Base64;\nimport com.alibaba.nacos.common.utils.StringUtils;\n\nimport javax.crypto.Mac;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.SecretKeySpec;\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * adapt spas interface.\n *\n * @author Nacos\n */\npublic class SpasAdapter {\n    \n    private static final String TIMESTAMP_HEADER = \"Timestamp\";\n    \n    private static final String SIGNATURE_HEADER = \"Spas-Signature\";\n    \n    private static final String GROUP_KEY = \"group\";\n    \n    public static final String TENANT_KEY = \"tenant\";\n    \n    private static final String SHA_ENCRYPT = \"HmacSHA1\";\n    \n    public static Map<String, String> getSignHeaders(String resource, String secretKey) {\n        Map<String, String> header = new HashMap<>(2);\n        String timeStamp = String.valueOf(System.currentTimeMillis());\n        header.put(TIMESTAMP_HEADER, timeStamp);\n        if (secretKey != null) {\n            String signature;\n            if (StringUtils.isBlank(resource)) {\n                signature = signWithHmacSha1Encrypt(timeStamp, secretKey);\n            } else {\n                signature = signWithHmacSha1Encrypt(resource + \"+\" + timeStamp, secretKey);\n            }\n            header.put(SIGNATURE_HEADER, signature);\n        }\n        return header;\n    }\n    \n    public static Map<String, String> getSignHeaders(String groupKey, String tenant, String secretKey) {\n        if (StringUtils.isBlank(groupKey) && StringUtils.isBlank(tenant)) {\n            return null;\n        }\n        \n        String resource = \"\";\n        if (StringUtils.isNotBlank(groupKey) && StringUtils.isNotBlank(tenant)) {\n            resource = tenant + \"+\" + groupKey;\n        } else {\n            if (!StringUtils.isBlank(groupKey)) {\n                resource = groupKey;\n            }\n        }\n        return getSignHeaders(resource, secretKey);\n    }\n    \n    public static Map<String, String> getSignHeaders(Map<String, String> paramValues, String secretKey) {\n        if (null == paramValues) {\n            return null;\n        }\n        \n        String resource = \"\";\n        if (paramValues.containsKey(TENANT_KEY) && paramValues.containsKey(GROUP_KEY)) {\n            resource = paramValues.get(TENANT_KEY) + \"+\" + paramValues.get(GROUP_KEY);\n        } else {\n            if (!StringUtils.isBlank(paramValues.get(GROUP_KEY))) {\n                resource = paramValues.get(GROUP_KEY);\n            }\n        }\n        return getSignHeaders(resource, secretKey);\n    }\n    \n    public static String getSk() {\n        return CredentialService.getInstance().getCredential().getSecretKey();\n    }\n    \n    public static String getAk() {\n        return CredentialService.getInstance().getCredential().getAccessKey();\n    }\n    \n    public static void freeCredentialInstance() {\n        CredentialService.freeInstance();\n    }\n    \n    /**\n     * Sign with hmac SHA1 encrtpt.\n     *\n     * @param encryptText encrypt text\n     * @param encryptKey  encrypt key\n     * @return base64 string\n     */\n    public static String signWithHmacSha1Encrypt(String encryptText, String encryptKey) {\n        try {\n            byte[] data = encryptKey.getBytes(Constants.ENCODE);\n            // Construct a key according to the given byte array, and the second parameter specifies the name of a key algorithm\n            SecretKey secretKey = new SecretKeySpec(data, SHA_ENCRYPT);\n            // Generate a Mac object specifying Mac algorithm\n            Mac mac = Mac.getInstance(SHA_ENCRYPT);\n            // Initialize the Mac object with the given key\n            mac.init(secretKey);\n            byte[] text = encryptText.getBytes(Constants.ENCODE);\n            byte[] textFinal = mac.doFinal(text);\n            // Complete Mac operation, base64 encoding, convert byte array to string\n            return new String(Base64.encodeBase64(textFinal), Constants.ENCODE);\n        } catch (Exception e) {\n            throw new RuntimeException(\"signWithhmacSHA1Encrypt fail\", e);\n        }\n    }\n}\n", "methodName": "com.alibaba.nacos.client.auth.ram.utils.SpasAdapter.getSk():java.lang.String", "exampleID": 44, "dataset": "infer", "filepath": "client/src/main/java/com/alibaba/nacos/client/auth/ram/utils/SpasAdapter.java", "line": 96, "sink": "getInstance()", "source": "getInstance()", "sourceLine": 96, "qualifier": "$$getInstance()/$ could return null, and is @@dereferenced/@", "steps": [{"line": 57, "source": "getInstance()", "filepath": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "methodName": "CredentialService.getInstance", "exampleID": 45}], "line_number": 96, "records": [{"level": 1, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 57, "column_number": -1, "description": "start of procedure getInstance()", "snippet": "        return getInstance(null);", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "methodName": "getInstance"}, {"level": 2, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 60, "column_number": -1, "description": "start of procedure getInstance(...)", "snippet": "    public static CredentialService getInstance(String appName) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "methodName": "getInstance"}, {"level": 2, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 61, "column_number": -1, "description": "Taking false branch", "snippet": "        String key = appName != null ? appName : IdentifyConstants.NO_APP_NAME;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "methodName": "getInstance"}, {"level": 2, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 62, "column_number": -1, "description": "Taking true branch", "snippet": "        if (INSTANCES.get(key) == null) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "methodName": "getInstance"}, {"level": 2, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 63, "column_number": -1, "description": "", "snippet": "            synchronized (CredentialService.INSTANCES) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "methodName": "getInstance"}, {"level": 2, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 64, "column_number": -1, "description": "Taking true branch", "snippet": "                if (INSTANCES.get(key) == null) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "methodName": "getInstance"}, {"level": 2, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 65, "column_number": -1, "description": "", "snippet": "                    CredentialService instance = new CredentialService(appName);", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "methodName": "getInstance"}, {"level": 3, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 45, "column_number": -1, "description": "start of procedure CredentialService(...)", "snippet": "    private CredentialService(String appName) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "methodName": "CredentialService"}, {"level": 3, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 39, "column_number": -1, "description": "", "snippet": "    private Credentials credentials = new Credentials();", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "methodName": "CredentialService"}, {"level": 4, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/Credentials.java", "line_number": 39, "column_number": -1, "description": "start of procedure Credentials()", "snippet": "        this(null, null, null);", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/Credentials.java", "methodName": "Credentials"}, {"level": 5, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/Credentials.java", "line_number": 32, "column_number": -1, "description": "start of procedure Credentials(...)", "snippet": "    public Credentials(String accessKey, String secretKey, String tenantId) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/Credentials.java", "methodName": "Credentials"}, {"level": 5, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/Credentials.java", "line_number": 33, "column_number": -1, "description": "", "snippet": "        this.accessKey = accessKey;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/Credentials.java", "methodName": "Credentials"}, {"level": 5, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/Credentials.java", "line_number": 34, "column_number": -1, "description": "", "snippet": "        this.secretKey = secretKey;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/Credentials.java", "methodName": "Credentials"}, {"level": 5, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/Credentials.java", "line_number": 35, "column_number": -1, "description": "", "snippet": "        this.tenantId = tenantId;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/Credentials.java", "methodName": "Credentials"}, {"level": 5, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/Credentials.java", "line_number": 36, "column_number": -1, "description": "return from a call to Credentials.<init>(String,String,String)", "snippet": "    }", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/Credentials.java", "methodName": "Credentials"}, {"level": 4, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/Credentials.java", "line_number": 40, "column_number": -1, "description": "return from a call to Credentials.<init>()", "snippet": "    }", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/Credentials.java", "methodName": "Credentials"}, {"level": 3, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 39, "column_number": -1, "description": "", "snippet": "    private Credentials credentials = new Credentials();", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "methodName": "CredentialService"}, {"level": 3, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 46, "column_number": -1, "description": "Taking true branch", "snippet": "        if (appName == null) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "methodName": "CredentialService"}, {"level": 3, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 47, "column_number": -1, "description": "Skipping getProperty(...): unknown method", "snippet": "            String value = NacosClientProperties.PROTOTYPE.getProperty(IdentifyConstants.PROJECT_NAME_PROPERTY);", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "methodName": "CredentialService"}, {"level": 3, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 48, "column_number": -1, "description": "", "snippet": "            if (StringUtils.isNotEmpty(value)) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "methodName": "CredentialService"}, {"level": 4, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 106, "column_number": -1, "description": "start of procedure isNotEmpty(...)", "snippet": "    public static boolean isNotEmpty(String str) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isNotEmpty"}, {"level": 4, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 107, "column_number": -1, "description": "", "snippet": "        return !isEmpty(str);", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isNotEmpty"}, {"level": 5, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 116, "column_number": -1, "description": "start of procedure isEmpty(...)", "snippet": "    public static boolean isEmpty(String str) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isEmpty"}, {"level": 5, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 117, "column_number": -1, "description": "Taking true branch", "snippet": "        return str == null || str.length() == 0;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isEmpty"}, {"level": 5, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 117, "column_number": -1, "description": "Taking true branch", "snippet": "        return str == null || str.length() == 0;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isEmpty"}, {"level": 5, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 117, "column_number": -1, "description": "return from a call to boolean StringUtils.isEmpty(String)", "snippet": "        return str == null || str.length() == 0;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isEmpty"}, {"level": 4, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 107, "column_number": -1, "description": "Taking false branch", "snippet": "        return !isEmpty(str);", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isNotEmpty"}, {"level": 4, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 107, "column_number": -1, "description": "return from a call to boolean StringUtils.isNotEmpty(String)", "snippet": "        return !isEmpty(str);", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isNotEmpty"}, {"level": 3, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 48, "column_number": -1, "description": "Taking false branch", "snippet": "            if (StringUtils.isNotEmpty(value)) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "methodName": "CredentialService"}, {"level": 3, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 52, "column_number": -1, "description": "", "snippet": "        this.appName = appName;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "methodName": "CredentialService"}, {"level": 3, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 53, "column_number": -1, "description": "Skipping CredentialWatcher(...): empty list of specs", "snippet": "        watcher = new CredentialWatcher(appName, this);", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "methodName": "CredentialService"}, {"level": 4, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialWatcher.java", "line_number": 57, "column_number": -1, "description": "Definition of CredentialWatcher(...)", "snippet": "    public CredentialWatcher(String appName, CredentialService serviceInstance) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialWatcher.java", "methodName": "CredentialService"}, {"level": 3, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 53, "column_number": -1, "description": "", "snippet": "        watcher = new CredentialWatcher(appName, this);", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "methodName": "CredentialService"}, {"level": 3, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 54, "column_number": -1, "description": "return from a call to CredentialService.<init>(String)", "snippet": "    }", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "methodName": "CredentialService"}, {"level": 2, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 66, "column_number": -1, "description": "Skipping putIfAbsent(...): unknown method", "snippet": "                    INSTANCES.putIfAbsent(key, instance);", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "methodName": "getInstance"}, {"level": 2, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 68, "column_number": -1, "description": "", "snippet": "            }", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "methodName": "getInstance"}, {"level": 2, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 70, "column_number": -1, "description": "return from a call to CredentialService CredentialService.getInstance(String)", "snippet": "        return INSTANCES.get(key);", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "methodName": "getInstance"}, {"level": 1, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 57, "column_number": -1, "description": "return from a call to CredentialService CredentialService.getInstance()", "snippet": "        return getInstance(null);", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "methodName": "getInstance"}], "combined_records": [{"level": 1, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 57, "column_number": -1, "description": "start of procedure getInstance()", "snippet": "54.    public static CredentialService getInstance() {\n55.        return getInstance(null);\n56.    }\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "methodName": "getInstance", "line_numbers": [57]}, {"level": 2, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 65, "column_number": -1, "description": "start of procedure getInstance(...)", "snippet": "57.    \n58.    public static CredentialService getInstance(String appName) {\n59.>         String key = appName != null ? appName : IdentifyConstants.NO_APP_NAME;\n60.>         if (INSTANCES.get(key) == null) {\n61.>             synchronized (CredentialService.INSTANCES) {\n62.>                 if (INSTANCES.get(key) == null) {\n63.>                     CredentialService instance = new CredentialService(appName);\n64.>                     INSTANCES.putIfAbsent(key, instance);\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "methodName": "getInstance", "line_numbers": [60, 61, 62, 63, 64, 65]}, {"level": 3, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 39, "column_number": -1, "description": "start of procedure CredentialService(...)", "snippet": "36.    \n37.    private Credentials credentials = new Credentials();\n38.>     \n39.    private final CredentialWatcher watcher;\n40.    \n41.    private CredentialListener listener;\n42.    \n43.    private CredentialService(String appName) {\n44.>         if (appName == null) {\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "methodName": "CredentialService", "line_numbers": [45, 39]}, {"level": 4, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/Credentials.java", "line_number": 39, "column_number": -1, "description": "start of procedure Credentials()", "snippet": "36.    public Credentials() {\n37.        this(null, null, null);\n38.    }\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/Credentials.java", "methodName": "Credentials", "line_numbers": [39]}, {"level": 5, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/Credentials.java", "line_number": 36, "column_number": -1, "description": "start of procedure Credentials(...)", "snippet": "29.    \n30.    public Credentials(String accessKey, String secretKey, String tenantId) {\n31.>         this.accessKey = accessKey;\n32.>         this.secretKey = secretKey;\n33.>         this.tenantId = tenantId;\n34.    }\n35.>     \n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/Credentials.java", "methodName": "Credentials", "line_numbers": [32, 33, 34, 35, 36]}, {"level": 4, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/Credentials.java", "line_number": 40, "column_number": -1, "description": "return from a call to Credentials.<init>()", "snippet": "37.        this(null, null, null);\n38.    }\n39.>     \n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/Credentials.java", "methodName": "Credentials", "line_numbers": [40]}, {"level": 3, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 48, "column_number": -1, "description": "", "snippet": "36.    \n37.    private Credentials credentials = new Credentials();\n38.>     \n39.    private final CredentialWatcher watcher;\n40.    \n41.    private CredentialListener listener;\n42.    \n43.    private CredentialService(String appName) {\n44.        if (appName == null) {\n45.>             String value = NacosClientProperties.PROTOTYPE.getProperty(IdentifyConstants.PROJECT_NAME_PROPERTY);\n46.>             if (StringUtils.isNotEmpty(value)) {\n47.>                 appName = value;\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "methodName": "CredentialService", "line_numbers": [39, 46, 47, 48]}, {"level": 4, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 107, "column_number": -1, "description": "start of procedure isNotEmpty(...)", "snippet": "103.     */\n104.    public static boolean isNotEmpty(String str) {\n105.>         return !isEmpty(str);\n106.    }\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isNotEmpty", "line_numbers": [106, 107]}, {"level": 5, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 117, "column_number": -1, "description": "start of procedure isEmpty(...)", "snippet": "113.     */\n114.    public static boolean isEmpty(String str) {\n115.>         return str == null || str.length() == 0;\n116.    }\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isEmpty", "line_numbers": [116, 117, 117, 117]}, {"level": 4, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 107, "column_number": -1, "description": "Taking false branch", "snippet": "104.    public static boolean isNotEmpty(String str) {\n105.        return !isEmpty(str);\n106.    }\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isNotEmpty", "line_numbers": [107, 107]}, {"level": 3, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 53, "column_number": -1, "description": "Taking false branch", "snippet": "45.            String value = NacosClientProperties.PROTOTYPE.getProperty(IdentifyConstants.PROJECT_NAME_PROPERTY);\n46.            if (StringUtils.isNotEmpty(value)) {\n47.>                 appName = value;\n48.            }\n49.        }\n50.        this.appName = appName;\n51.>         watcher = new CredentialWatcher(appName, this);\n52.    }\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "methodName": "CredentialService", "line_numbers": [48, 52, 53]}, {"level": 4, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialWatcher.java", "line_number": 57, "column_number": -1, "description": "Definition of CredentialWatcher(...)", "snippet": "54.    \n55.    public CredentialWatcher(String appName, CredentialService serviceInstance) {\n56.>         this.appName = appName;\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialWatcher.java", "methodName": "CredentialService", "line_numbers": [57]}, {"level": 3, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 54, "column_number": -1, "description": "", "snippet": "50.        this.appName = appName;\n51.        watcher = new CredentialWatcher(appName, this);\n52.    }\n53.>     \n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "methodName": "CredentialService", "line_numbers": [53, 54]}, {"level": 2, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 70, "column_number": -1, "description": "Skipping putIfAbsent(...): unknown method", "snippet": "63.                    CredentialService instance = new CredentialService(appName);\n64.                    INSTANCES.putIfAbsent(key, instance);\n65.                }\n66.            }\n67.        }\n68.        return INSTANCES.get(key);\n69.    }\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "methodName": "getInstance", "line_numbers": [66, 68, 70]}, {"level": 1, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 57, "column_number": -1, "description": "return from a call to CredentialService CredentialService.getInstance()", "snippet": "54.    public static CredentialService getInstance() {\n55.        return getInstance(null);\n56.    }\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "methodName": "getInstance", "line_numbers": [57]}], "infer_explore": [{"level": 0, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/utils/SpasAdapter.java", "line_number": 95, "column_number": -1, "description": "start of procedure getSk()", "snippet": "92.     }\n93.     \n94. >     public static String getSk() {\n95.         return CredentialService.getInstance().getCredential().getSecretKey();\n96.     }\n"}, {"level": 0, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/utils/SpasAdapter.java", "line_number": 96, "column_number": -1, "description": "", "snippet": "93.     \n94.     public static String getSk() {\n95. >         return CredentialService.getInstance().getCredential().getSecretKey();\n96.     }\n97.     \n"}, {"level": 1, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 57, "column_number": -1, "description": "start of procedure getInstance()", "snippet": "54.     \n55.     public static CredentialService getInstance() {\n56. >         return getInstance(null);\n57.     }\n58.     \n"}, {"level": 2, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 60, "column_number": -1, "description": "start of procedure getInstance(...)", "snippet": "57.     }\n58.     \n59. >     public static CredentialService getInstance(String appName) {\n60.         String key = appName != null ? appName : IdentifyConstants.NO_APP_NAME;\n61.         if (INSTANCES.get(key) == null) {\n"}, {"level": 2, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 61, "column_number": -1, "description": "Taking false branch", "snippet": "58.     \n59.     public static CredentialService getInstance(String appName) {\n60. >         String key = appName != null ? appName : IdentifyConstants.NO_APP_NAME;\n61.         if (INSTANCES.get(key) == null) {\n62.             synchronized (CredentialService.INSTANCES) {\n"}, {"level": 2, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 62, "column_number": -1, "description": "Taking true branch", "snippet": "59.     public static CredentialService getInstance(String appName) {\n60.         String key = appName != null ? appName : IdentifyConstants.NO_APP_NAME;\n61. >         if (INSTANCES.get(key) == null) {\n62.             synchronized (CredentialService.INSTANCES) {\n63.                 if (INSTANCES.get(key) == null) {\n"}, {"level": 2, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 63, "column_number": -1, "description": "", "snippet": "60.         String key = appName != null ? appName : IdentifyConstants.NO_APP_NAME;\n61.         if (INSTANCES.get(key) == null) {\n62. >             synchronized (CredentialService.INSTANCES) {\n63.                 if (INSTANCES.get(key) == null) {\n64.                     CredentialService instance = new CredentialService(appName);\n"}, {"level": 2, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 64, "column_number": -1, "description": "Taking true branch", "snippet": "61.         if (INSTANCES.get(key) == null) {\n62.             synchronized (CredentialService.INSTANCES) {\n63. >                 if (INSTANCES.get(key) == null) {\n64.                     CredentialService instance = new CredentialService(appName);\n65.                     INSTANCES.putIfAbsent(key, instance);\n"}, {"level": 2, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 65, "column_number": -1, "description": "", "snippet": "62.             synchronized (CredentialService.INSTANCES) {\n63.                 if (INSTANCES.get(key) == null) {\n64. >                     CredentialService instance = new CredentialService(appName);\n65.                     INSTANCES.putIfAbsent(key, instance);\n66.                 }\n"}, {"level": 3, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 45, "column_number": -1, "description": "start of procedure CredentialService(...)", "snippet": "42.     private CredentialListener listener;\n43.     \n44. >     private CredentialService(String appName) {\n45.         if (appName == null) {\n46.             String value = NacosClientProperties.PROTOTYPE.getProperty(IdentifyConstants.PROJECT_NAME_PROPERTY);\n"}, {"level": 3, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 39, "column_number": -1, "description": "", "snippet": "36.     private final String appName;\n37.     \n38. >     private Credentials credentials = new Credentials();\n39.     \n40.     private final CredentialWatcher watcher;\n"}, {"level": 4, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/Credentials.java", "line_number": 39, "column_number": -1, "description": "start of procedure Credentials()", "snippet": "36.     \n37.     public Credentials() {\n38. >         this(null, null, null);\n39.     }\n40.     \n"}, {"level": 5, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/Credentials.java", "line_number": 32, "column_number": -1, "description": "start of procedure Credentials(...)", "snippet": "29.     private volatile String tenantId;\n30.     \n31. >     public Credentials(String accessKey, String secretKey, String tenantId) {\n32.         this.accessKey = accessKey;\n33.         this.secretKey = secretKey;\n"}, {"level": 5, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/Credentials.java", "line_number": 33, "column_number": -1, "description": "", "snippet": "30.     \n31.     public Credentials(String accessKey, String secretKey, String tenantId) {\n32. >         this.accessKey = accessKey;\n33.         this.secretKey = secretKey;\n34.         this.tenantId = tenantId;\n"}, {"level": 5, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/Credentials.java", "line_number": 34, "column_number": -1, "description": "", "snippet": "31.     public Credentials(String accessKey, String secretKey, String tenantId) {\n32.         this.accessKey = accessKey;\n33. >         this.secretKey = secretKey;\n34.         this.tenantId = tenantId;\n35.     }\n"}, {"level": 5, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/Credentials.java", "line_number": 35, "column_number": -1, "description": "", "snippet": "32.         this.accessKey = accessKey;\n33.         this.secretKey = secretKey;\n34. >         this.tenantId = tenantId;\n35.     }\n36.     \n"}, {"level": 5, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/Credentials.java", "line_number": 36, "column_number": -1, "description": "return from a call to Credentials.<init>(String,String,String)", "snippet": "33.         this.secretKey = secretKey;\n34.         this.tenantId = tenantId;\n35. >     }\n36.     \n37.     public Credentials() {\n"}, {"level": 4, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/Credentials.java", "line_number": 40, "column_number": -1, "description": "return from a call to Credentials.<init>()", "snippet": "37.     public Credentials() {\n38.         this(null, null, null);\n39. >     }\n40.     \n41.     @Override\n"}, {"level": 3, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 39, "column_number": -1, "description": "", "snippet": "36.     private final String appName;\n37.     \n38. >     private Credentials credentials = new Credentials();\n39.     \n40.     private final CredentialWatcher watcher;\n"}, {"level": 3, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 46, "column_number": -1, "description": "Taking true branch", "snippet": "43.     \n44.     private CredentialService(String appName) {\n45. >         if (appName == null) {\n46.             String value = NacosClientProperties.PROTOTYPE.getProperty(IdentifyConstants.PROJECT_NAME_PROPERTY);\n47.             if (StringUtils.isNotEmpty(value)) {\n"}, {"level": 3, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 47, "column_number": -1, "description": "Skipping getProperty(...): unknown method", "snippet": "44.     private CredentialService(String appName) {\n45.         if (appName == null) {\n46. >             String value = NacosClientProperties.PROTOTYPE.getProperty(IdentifyConstants.PROJECT_NAME_PROPERTY);\n47.             if (StringUtils.isNotEmpty(value)) {\n48.                 appName = value;\n"}, {"level": 4, "filename": "client/src/main/java/com/alibaba/nacos/client/env/NacosClientProperties.java", "line_number": -1, "column_number": -1, "description": "Definition of getProperty(...)", "snippet": ""}, {"level": 3, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 48, "column_number": -1, "description": "", "snippet": "45.         if (appName == null) {\n46.             String value = NacosClientProperties.PROTOTYPE.getProperty(IdentifyConstants.PROJECT_NAME_PROPERTY);\n47. >             if (StringUtils.isNotEmpty(value)) {\n48.                 appName = value;\n49.             }\n"}, {"level": 4, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 106, "column_number": -1, "description": "start of procedure isNotEmpty(...)", "snippet": "103.      * @return {@code true} if the str is not empty or not null\n104.      */\n105. >     public static boolean isNotEmpty(String str) {\n106.         return !isEmpty(str);\n107.     }\n"}, {"level": 4, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 107, "column_number": -1, "description": "", "snippet": "104.      */\n105.     public static boolean isNotEmpty(String str) {\n106. >         return !isEmpty(str);\n107.     }\n108.     \n"}, {"level": 5, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 116, "column_number": -1, "description": "start of procedure isEmpty(...)", "snippet": "113.      * @return {@code true} if the str is empty or null\n114.      */\n115. >     public static boolean isEmpty(String str) {\n116.         return str == null || str.length() == 0;\n117.     }\n"}, {"level": 5, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 117, "column_number": -1, "description": "Taking true branch", "snippet": "114.      */\n115.     public static boolean isEmpty(String str) {\n116. >         return str == null || str.length() == 0;\n117.     }\n118.     \n"}, {"level": 5, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 117, "column_number": -1, "description": "Taking true branch", "snippet": "114.      */\n115.     public static boolean isEmpty(String str) {\n116. >         return str == null || str.length() == 0;\n117.     }\n118.     \n"}, {"level": 5, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 117, "column_number": -1, "description": "return from a call to boolean StringUtils.isEmpty(String)", "snippet": "114.      */\n115.     public static boolean isEmpty(String str) {\n116. >         return str == null || str.length() == 0;\n117.     }\n118.     \n"}, {"level": 4, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 107, "column_number": -1, "description": "Taking false branch", "snippet": "104.      */\n105.     public static boolean isNotEmpty(String str) {\n106. >         return !isEmpty(str);\n107.     }\n108.     \n"}, {"level": 4, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 107, "column_number": -1, "description": "return from a call to boolean StringUtils.isNotEmpty(String)", "snippet": "104.      */\n105.     public static boolean isNotEmpty(String str) {\n106. >         return !isEmpty(str);\n107.     }\n108.     \n"}, {"level": 3, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 48, "column_number": -1, "description": "Taking false branch", "snippet": "45.         if (appName == null) {\n46.             String value = NacosClientProperties.PROTOTYPE.getProperty(IdentifyConstants.PROJECT_NAME_PROPERTY);\n47. >             if (StringUtils.isNotEmpty(value)) {\n48.                 appName = value;\n49.             }\n"}, {"level": 3, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 52, "column_number": -1, "description": "", "snippet": "49.             }\n50.         }\n51. >         this.appName = appName;\n52.         watcher = new CredentialWatcher(appName, this);\n53.     }\n"}, {"level": 3, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 53, "column_number": -1, "description": "Skipping CredentialWatcher(...): empty list of specs", "snippet": "50.         }\n51.         this.appName = appName;\n52. >         watcher = new CredentialWatcher(appName, this);\n53.     }\n54.     \n"}, {"level": 4, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialWatcher.java", "line_number": 57, "column_number": -1, "description": "Definition of CredentialWatcher(...)", "snippet": "54.     private final ScheduledExecutorService executor;\n55.     \n56. >     public CredentialWatcher(String appName, CredentialService serviceInstance) {\n57.         this.appName = appName;\n58.         this.serviceInstance = serviceInstance;\n"}, {"level": 3, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 53, "column_number": -1, "description": "", "snippet": "50.         }\n51.         this.appName = appName;\n52. >         watcher = new CredentialWatcher(appName, this);\n53.     }\n54.     \n"}, {"level": 3, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 54, "column_number": -1, "description": "return from a call to CredentialService.<init>(String)", "snippet": "51.         this.appName = appName;\n52.         watcher = new CredentialWatcher(appName, this);\n53. >     }\n54.     \n55.     public static CredentialService getInstance() {\n"}, {"level": 2, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 66, "column_number": -1, "description": "Skipping putIfAbsent(...): unknown method", "snippet": "63.                 if (INSTANCES.get(key) == null) {\n64.                     CredentialService instance = new CredentialService(appName);\n65. >                     INSTANCES.putIfAbsent(key, instance);\n66.                 }\n67.             }\n"}, {"level": 2, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 68, "column_number": -1, "description": "", "snippet": "65.                     INSTANCES.putIfAbsent(key, instance);\n66.                 }\n67. >             }\n68.         }\n69.         return INSTANCES.get(key);\n"}, {"level": 2, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 70, "column_number": -1, "description": "return from a call to CredentialService CredentialService.getInstance(String)", "snippet": "67.             }\n68.         }\n69. >         return INSTANCES.get(key);\n70.     }\n71.     \n"}, {"level": 1, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/identify/CredentialService.java", "line_number": 57, "column_number": -1, "description": "return from a call to CredentialService CredentialService.getInstance()", "snippet": "54.     \n55.     public static CredentialService getInstance() {\n56. >         return getInstance(null);\n57.     }\n58.     \n"}, {"level": 0, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/ram/utils/SpasAdapter.java", "line_number": 96, "column_number": -1, "description": "", "snippet": "93.     \n94.     public static String getSk() {\n95. >         return CredentialService.getInstance().getCredential().getSecretKey();\n96.     }\n97.     \n"}]}, {"url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/naming/src/main/java/com/alibaba/nacos/naming/core/v2/client/manager/impl/ConnectionBasedClientManager.java", "rawCode": "/*\n * Copyright 1999-2018 Alibaba Group Holding Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.alibaba.nacos.naming.core.v2.client.manager.impl;\n\nimport com.alibaba.nacos.api.common.Constants;\nimport com.alibaba.nacos.api.remote.RemoteConstants;\nimport com.alibaba.nacos.common.notify.NotifyCenter;\nimport com.alibaba.nacos.core.remote.ClientConnectionEventListener;\nimport com.alibaba.nacos.core.remote.Connection;\nimport com.alibaba.nacos.naming.consistency.ephemeral.distro.v2.DistroClientVerifyInfo;\nimport com.alibaba.nacos.naming.constants.ClientConstants;\nimport com.alibaba.nacos.naming.core.v2.client.Client;\nimport com.alibaba.nacos.naming.core.v2.client.ClientAttributes;\nimport com.alibaba.nacos.naming.core.v2.client.factory.ClientFactory;\nimport com.alibaba.nacos.naming.core.v2.client.factory.ClientFactoryHolder;\nimport com.alibaba.nacos.naming.core.v2.client.impl.ConnectionBasedClient;\nimport com.alibaba.nacos.naming.core.v2.client.manager.ClientManager;\nimport com.alibaba.nacos.naming.core.v2.event.client.ClientEvent;\nimport com.alibaba.nacos.naming.core.v2.event.client.ClientOperationEvent;\nimport com.alibaba.nacos.naming.misc.GlobalExecutor;\nimport com.alibaba.nacos.naming.misc.Loggers;\nimport org.springframework.stereotype.Component;\n\nimport java.util.Collection;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\nimport java.util.concurrent.TimeUnit;\n\n/**\n * The manager of {@code ConnectionBasedClient}.\n *\n * @author xiweng.yy\n */\n@Component(\"connectionBasedClientManager\")\npublic class ConnectionBasedClientManager extends ClientConnectionEventListener implements ClientManager {\n    \n    private final ConcurrentMap<String, ConnectionBasedClient> clients = new ConcurrentHashMap<>();\n    \n    public ConnectionBasedClientManager() {\n        GlobalExecutor\n                .scheduleExpiredClientCleaner(new ExpiredClientCleaner(this), 0, Constants.DEFAULT_HEART_BEAT_INTERVAL,\n                        TimeUnit.MILLISECONDS);\n    }\n    \n    @Override\n    public void clientConnected(Connection connect) {\n        if (!RemoteConstants.LABEL_MODULE_NAMING.equals(connect.getMetaInfo().getLabel(RemoteConstants.LABEL_MODULE))) {\n            return;\n        }\n        ClientAttributes attributes = new ClientAttributes();\n        attributes.addClientAttribute(ClientConstants.CONNECTION_TYPE, connect.getMetaInfo().getConnectType());\n        attributes.addClientAttribute(ClientConstants.CONNECTION_METADATA, connect.getMetaInfo());\n        clientConnected(connect.getMetaInfo().getConnectionId(), attributes);\n    }\n    \n    @Override\n    public boolean clientConnected(String clientId, ClientAttributes attributes) {\n        String type = attributes.getClientAttribute(ClientConstants.CONNECTION_TYPE);\n        ClientFactory clientFactory = ClientFactoryHolder.getInstance().findClientFactory(type);\n        return clientConnected(clientFactory.newClient(clientId, attributes));\n    }\n    \n    @Override\n    public boolean clientConnected(final Client client) {\n        clients.computeIfAbsent(client.getClientId(), s -> {\n            Loggers.SRV_LOG.info(\"Client connection {} connect\", client.getClientId());\n            return (ConnectionBasedClient) client;\n        });\n        return true;\n    }\n    \n    @Override\n    public boolean syncClientConnected(String clientId, ClientAttributes attributes) {\n        String type = attributes.getClientAttribute(ClientConstants.CONNECTION_TYPE);\n        ClientFactory clientFactory = ClientFactoryHolder.getInstance().findClientFactory(type);\n        return clientConnected(clientFactory.newSyncedClient(clientId, attributes));\n    }\n    \n    @Override\n    public void clientDisConnected(Connection connect) {\n        clientDisconnected(connect.getMetaInfo().getConnectionId());\n    }\n    \n    @Override\n    public boolean clientDisconnected(String clientId) {\n        Loggers.SRV_LOG.info(\"Client connection {} disconnect, remove instances and subscribers\", clientId);\n        ConnectionBasedClient client = clients.remove(clientId);\n        if (null == client) {\n            return true;\n        }\n        client.release();\n        boolean isResponsible = isResponsibleClient(client);\n        NotifyCenter.publishEvent(new ClientOperationEvent.ClientReleaseEvent(client, isResponsible));\n        NotifyCenter.publishEvent(new ClientEvent.ClientDisconnectEvent(client, isResponsible));\n        return true;\n    }\n    \n    @Override\n    public Client getClient(String clientId) {\n        return clients.get(clientId);\n    }\n    \n    @Override\n    public boolean contains(String clientId) {\n        return clients.containsKey(clientId);\n    }\n    \n    @Override\n    public Collection<String> allClientId() {\n        return clients.keySet();\n    }\n    \n    @Override\n    public boolean isResponsibleClient(Client client) {\n        return (client instanceof ConnectionBasedClient) && ((ConnectionBasedClient) client).isNative();\n    }\n    \n    @Override\n    public boolean verifyClient(DistroClientVerifyInfo verifyData) {\n        ConnectionBasedClient client = clients.get(verifyData.getClientId());\n        if (null != client) {\n            // remote node of old version will always verify with zero revision\n            if (0 == verifyData.getRevision() || client.getRevision() == verifyData.getRevision()) {\n                client.setLastRenewTime();\n                return true;\n            } else {\n                Loggers.DISTRO.info(\"[DISTRO-VERIFY-FAILED] ConnectionBasedClient[{}] revision local={}, remote={}\",\n                        client.getClientId(), client.getRevision(), verifyData.getRevision());\n            }\n        }\n        return false;\n    }\n    \n    private static class ExpiredClientCleaner implements Runnable {\n        \n        private final ConnectionBasedClientManager clientManager;\n        \n        public ExpiredClientCleaner(ConnectionBasedClientManager clientManager) {\n            this.clientManager = clientManager;\n        }\n        \n        @Override\n        public void run() {\n            long currentTime = System.currentTimeMillis();\n            for (String each : clientManager.allClientId()) {\n                ConnectionBasedClient client = (ConnectionBasedClient) clientManager.getClient(each);\n                if (null != client && client.isExpire(currentTime)) {\n                    clientManager.clientDisconnected(each);\n                }\n            }\n        }\n    }\n}\n", "methodName": "com.alibaba.nacos.naming.core.v2.client.manager.impl.ConnectionBasedClientManager.syncClientConnected(java.lang.String,com.alibaba.nacos.naming.core.v2.client.ClientAttributes):boolean", "exampleID": 46, "dataset": "infer", "filepath": "naming/src/main/java/com/alibaba/nacos/naming/core/v2/client/manager/impl/ConnectionBasedClientManager.java", "line": 90, "sink": "clientFactory", "source": "clientFactory", "sourceLine": 89, "qualifier": "$$clientFactory/$ could be null, and is @@dereferenced/@", "steps": [{"line": 60, "source": "clientFactory", "filepath": "naming/src/main/java/com/alibaba/nacos/naming/core/v2/client/factory/ClientFactoryHolder.java", "methodName": "ClientFactoryHolder.findClientFactory", "exampleID": 47}], "line_number": 89, "records": [{"level": 1, "filename": "naming/src/main/java/com/alibaba/nacos/naming/core/v2/client/factory/ClientFactoryHolder.java", "line_number": 50, "column_number": -1, "description": "start of procedure getInstance()", "snippet": "    public static ClientFactoryHolder getInstance() {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/naming/src/main/java/com/alibaba/nacos/naming/core/v2/client/factory/ClientFactoryHolder.java", "methodName": "getInstance"}, {"level": 1, "filename": "naming/src/main/java/com/alibaba/nacos/naming/core/v2/client/factory/ClientFactoryHolder.java", "line_number": 51, "column_number": -1, "description": "return from a call to ClientFactoryHolder ClientFactoryHolder.getInstance()", "snippet": "        return INSTANCE;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/naming/src/main/java/com/alibaba/nacos/naming/core/v2/client/factory/ClientFactoryHolder.java", "methodName": "getInstance"}, {"level": 1, "filename": "naming/src/main/java/com/alibaba/nacos/naming/core/v2/client/factory/ClientFactoryHolder.java", "line_number": 60, "column_number": -1, "description": "start of procedure findClientFactory(...)", "snippet": "    public ClientFactory findClientFactory(String type) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/naming/src/main/java/com/alibaba/nacos/naming/core/v2/client/factory/ClientFactoryHolder.java", "methodName": "findClientFactory"}, {"level": 1, "filename": "naming/src/main/java/com/alibaba/nacos/naming/core/v2/client/factory/ClientFactoryHolder.java", "line_number": 61, "column_number": -1, "description": "", "snippet": "        if (StringUtils.isEmpty(type) || !clientFactories.containsKey(type)) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/naming/src/main/java/com/alibaba/nacos/naming/core/v2/client/factory/ClientFactoryHolder.java", "methodName": "findClientFactory"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 116, "column_number": -1, "description": "start of procedure isEmpty(...)", "snippet": "    public static boolean isEmpty(String str) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isEmpty"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 117, "column_number": -1, "description": "Taking true branch", "snippet": "        return str == null || str.length() == 0;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isEmpty"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 117, "column_number": -1, "description": "Taking true branch", "snippet": "        return str == null || str.length() == 0;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isEmpty"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 117, "column_number": -1, "description": "return from a call to boolean StringUtils.isEmpty(String)", "snippet": "        return str == null || str.length() == 0;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isEmpty"}, {"level": 1, "filename": "naming/src/main/java/com/alibaba/nacos/naming/core/v2/client/factory/ClientFactoryHolder.java", "line_number": 61, "column_number": -1, "description": "Taking false branch", "snippet": "        if (StringUtils.isEmpty(type) || !clientFactories.containsKey(type)) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/naming/src/main/java/com/alibaba/nacos/naming/core/v2/client/factory/ClientFactoryHolder.java", "methodName": "findClientFactory"}, {"level": 1, "filename": "naming/src/main/java/com/alibaba/nacos/naming/core/v2/client/factory/ClientFactoryHolder.java", "line_number": 62, "column_number": -1, "description": "", "snippet": "            return clientFactories.get(ClientConstants.DEFAULT_FACTORY);", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/naming/src/main/java/com/alibaba/nacos/naming/core/v2/client/factory/ClientFactoryHolder.java", "methodName": "findClientFactory"}, {"level": 1, "filename": "naming/src/main/java/com/alibaba/nacos/naming/core/v2/client/factory/ClientFactoryHolder.java", "line_number": 64, "column_number": -1, "description": "return from a call to ClientFactory ClientFactoryHolder.findClientFactory(String)", "snippet": "        return clientFactories.get(type);", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/naming/src/main/java/com/alibaba/nacos/naming/core/v2/client/factory/ClientFactoryHolder.java", "methodName": "findClientFactory"}], "combined_records": [{"level": 1, "filename": "naming/src/main/java/com/alibaba/nacos/naming/core/v2/client/factory/ClientFactoryHolder.java", "line_number": 51, "column_number": -1, "description": "start of procedure getInstance()", "snippet": "47.    \n48.    public static ClientFactoryHolder getInstance() {\n49.>         return INSTANCE;\n50.    }\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/naming/src/main/java/com/alibaba/nacos/naming/core/v2/client/factory/ClientFactoryHolder.java", "methodName": "getInstance", "line_numbers": [50, 51]}, {"level": 1, "filename": "naming/src/main/java/com/alibaba/nacos/naming/core/v2/client/factory/ClientFactoryHolder.java", "line_number": 61, "column_number": -1, "description": "start of procedure findClientFactory(...)", "snippet": "57.     */\n58.    public ClientFactory findClientFactory(String type) {\n59.>         if (StringUtils.isEmpty(type) || !clientFactories.containsKey(type)) {\n60.>             return clientFactories.get(ClientConstants.DEFAULT_FACTORY);\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/naming/src/main/java/com/alibaba/nacos/naming/core/v2/client/factory/ClientFactoryHolder.java", "methodName": "findClientFactory", "line_numbers": [60, 61]}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 117, "column_number": -1, "description": "start of procedure isEmpty(...)", "snippet": "113.     */\n114.    public static boolean isEmpty(String str) {\n115.>         return str == null || str.length() == 0;\n116.    }\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isEmpty", "line_numbers": [116, 117, 117, 117]}, {"level": 1, "filename": "naming/src/main/java/com/alibaba/nacos/naming/core/v2/client/factory/ClientFactoryHolder.java", "line_number": 64, "column_number": -1, "description": "Taking false branch", "snippet": "58.    public ClientFactory findClientFactory(String type) {\n59.        if (StringUtils.isEmpty(type) || !clientFactories.containsKey(type)) {\n60.>             return clientFactories.get(ClientConstants.DEFAULT_FACTORY);\n61.        }\n62.        return clientFactories.get(type);\n63.    }\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/naming/src/main/java/com/alibaba/nacos/naming/core/v2/client/factory/ClientFactoryHolder.java", "methodName": "findClientFactory", "line_numbers": [61, 62, 64]}], "infer_explore": [{"level": 0, "filename": "naming/src/main/java/com/alibaba/nacos/naming/core/v2/client/manager/impl/ConnectionBasedClientManager.java", "line_number": 87, "column_number": -1, "description": "start of procedure syncClientConnected(...)", "snippet": "84.     \n85.     @Override\n86. >     public boolean syncClientConnected(String clientId, ClientAttributes attributes) {\n87.         String type = attributes.getClientAttribute(ClientConstants.CONNECTION_TYPE);\n88.         ClientFactory clientFactory = ClientFactoryHolder.getInstance().findClientFactory(type);\n"}, {"level": 0, "filename": "naming/src/main/java/com/alibaba/nacos/naming/core/v2/client/manager/impl/ConnectionBasedClientManager.java", "line_number": 88, "column_number": -1, "description": "", "snippet": "85.     @Override\n86.     public boolean syncClientConnected(String clientId, ClientAttributes attributes) {\n87. >         String type = attributes.getClientAttribute(ClientConstants.CONNECTION_TYPE);\n88.         ClientFactory clientFactory = ClientFactoryHolder.getInstance().findClientFactory(type);\n89.         return clientConnected(clientFactory.newSyncedClient(clientId, attributes));\n"}, {"level": 1, "filename": "naming/src/main/java/com/alibaba/nacos/naming/core/v2/client/ClientAttributes.java", "line_number": 57, "column_number": -1, "description": "start of procedure getClientAttribute(...)", "snippet": "54.      * @return client attribute, if not exist or type can't case, return {@code null}\n55.      */\n56. >     public <T> T getClientAttribute(String key) {\n57.         try {\n58.             return (T) clientAttributes.get(key);\n"}, {"level": 1, "filename": "naming/src/main/java/com/alibaba/nacos/naming/core/v2/client/ClientAttributes.java", "line_number": 59, "column_number": -1, "description": "", "snippet": "56.     public <T> T getClientAttribute(String key) {\n57.         try {\n58. >             return (T) clientAttributes.get(key);\n59.         } catch (Exception e) {\n60.             return null;\n"}, {"level": 1, "filename": "naming/src/main/java/com/alibaba/nacos/naming/core/v2/client/ClientAttributes.java", "line_number": 61, "column_number": -1, "description": "return from a call to Object ClientAttributes.getClientAttribute(String)", "snippet": "58.             return (T) clientAttributes.get(key);\n59.         } catch (Exception e) {\n60. >             return null;\n61.         }\n62.     }\n"}, {"level": 0, "filename": "naming/src/main/java/com/alibaba/nacos/naming/core/v2/client/manager/impl/ConnectionBasedClientManager.java", "line_number": 88, "column_number": -1, "description": "", "snippet": "85.     @Override\n86.     public boolean syncClientConnected(String clientId, ClientAttributes attributes) {\n87. >         String type = attributes.getClientAttribute(ClientConstants.CONNECTION_TYPE);\n88.         ClientFactory clientFactory = ClientFactoryHolder.getInstance().findClientFactory(type);\n89.         return clientConnected(clientFactory.newSyncedClient(clientId, attributes));\n"}, {"level": 0, "filename": "naming/src/main/java/com/alibaba/nacos/naming/core/v2/client/manager/impl/ConnectionBasedClientManager.java", "line_number": 89, "column_number": -1, "description": "", "snippet": "86.     public boolean syncClientConnected(String clientId, ClientAttributes attributes) {\n87.         String type = attributes.getClientAttribute(ClientConstants.CONNECTION_TYPE);\n88. >         ClientFactory clientFactory = ClientFactoryHolder.getInstance().findClientFactory(type);\n89.         return clientConnected(clientFactory.newSyncedClient(clientId, attributes));\n90.     }\n"}, {"level": 1, "filename": "naming/src/main/java/com/alibaba/nacos/naming/core/v2/client/factory/ClientFactoryHolder.java", "line_number": 50, "column_number": -1, "description": "start of procedure getInstance()", "snippet": "47.     }\n48.     \n49. >     public static ClientFactoryHolder getInstance() {\n50.         return INSTANCE;\n51.     }\n"}, {"level": 1, "filename": "naming/src/main/java/com/alibaba/nacos/naming/core/v2/client/factory/ClientFactoryHolder.java", "line_number": 51, "column_number": -1, "description": "return from a call to ClientFactoryHolder ClientFactoryHolder.getInstance()", "snippet": "48.     \n49.     public static ClientFactoryHolder getInstance() {\n50. >         return INSTANCE;\n51.     }\n52.     \n"}, {"level": 0, "filename": "naming/src/main/java/com/alibaba/nacos/naming/core/v2/client/manager/impl/ConnectionBasedClientManager.java", "line_number": 89, "column_number": -1, "description": "", "snippet": "86.     public boolean syncClientConnected(String clientId, ClientAttributes attributes) {\n87.         String type = attributes.getClientAttribute(ClientConstants.CONNECTION_TYPE);\n88. >         ClientFactory clientFactory = ClientFactoryHolder.getInstance().findClientFactory(type);\n89.         return clientConnected(clientFactory.newSyncedClient(clientId, attributes));\n90.     }\n"}, {"level": 1, "filename": "naming/src/main/java/com/alibaba/nacos/naming/core/v2/client/factory/ClientFactoryHolder.java", "line_number": 60, "column_number": -1, "description": "start of procedure findClientFactory(...)", "snippet": "57.      * @return target type {@link ClientFactory}, if not fount, return 'default' client factory.\n58.      */\n59. >     public ClientFactory findClientFactory(String type) {\n60.         if (StringUtils.isEmpty(type) || !clientFactories.containsKey(type)) {\n61.             return clientFactories.get(ClientConstants.DEFAULT_FACTORY);\n"}, {"level": 1, "filename": "naming/src/main/java/com/alibaba/nacos/naming/core/v2/client/factory/ClientFactoryHolder.java", "line_number": 61, "column_number": -1, "description": "", "snippet": "58.      */\n59.     public ClientFactory findClientFactory(String type) {\n60. >         if (StringUtils.isEmpty(type) || !clientFactories.containsKey(type)) {\n61.             return clientFactories.get(ClientConstants.DEFAULT_FACTORY);\n62.         }\n"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 116, "column_number": -1, "description": "start of procedure isEmpty(...)", "snippet": "113.      * @return {@code true} if the str is empty or null\n114.      */\n115. >     public static boolean isEmpty(String str) {\n116.         return str == null || str.length() == 0;\n117.     }\n"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 117, "column_number": -1, "description": "Taking true branch", "snippet": "114.      */\n115.     public static boolean isEmpty(String str) {\n116. >         return str == null || str.length() == 0;\n117.     }\n118.     \n"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 117, "column_number": -1, "description": "Taking true branch", "snippet": "114.      */\n115.     public static boolean isEmpty(String str) {\n116. >         return str == null || str.length() == 0;\n117.     }\n118.     \n"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 117, "column_number": -1, "description": "return from a call to boolean StringUtils.isEmpty(String)", "snippet": "114.      */\n115.     public static boolean isEmpty(String str) {\n116. >         return str == null || str.length() == 0;\n117.     }\n118.     \n"}, {"level": 1, "filename": "naming/src/main/java/com/alibaba/nacos/naming/core/v2/client/factory/ClientFactoryHolder.java", "line_number": 61, "column_number": -1, "description": "Taking false branch", "snippet": "58.      */\n59.     public ClientFactory findClientFactory(String type) {\n60. >         if (StringUtils.isEmpty(type) || !clientFactories.containsKey(type)) {\n61.             return clientFactories.get(ClientConstants.DEFAULT_FACTORY);\n62.         }\n"}, {"level": 1, "filename": "naming/src/main/java/com/alibaba/nacos/naming/core/v2/client/factory/ClientFactoryHolder.java", "line_number": 62, "column_number": -1, "description": "", "snippet": "59.     public ClientFactory findClientFactory(String type) {\n60.         if (StringUtils.isEmpty(type) || !clientFactories.containsKey(type)) {\n61. >             return clientFactories.get(ClientConstants.DEFAULT_FACTORY);\n62.         }\n63.         return clientFactories.get(type);\n"}, {"level": 1, "filename": "naming/src/main/java/com/alibaba/nacos/naming/core/v2/client/factory/ClientFactoryHolder.java", "line_number": 64, "column_number": -1, "description": "return from a call to ClientFactory ClientFactoryHolder.findClientFactory(String)", "snippet": "61.             return clientFactories.get(ClientConstants.DEFAULT_FACTORY);\n62.         }\n63. >         return clientFactories.get(type);\n64.     }\n65. }\n"}, {"level": 0, "filename": "naming/src/main/java/com/alibaba/nacos/naming/core/v2/client/manager/impl/ConnectionBasedClientManager.java", "line_number": 90, "column_number": -1, "description": "", "snippet": "87.         String type = attributes.getClientAttribute(ClientConstants.CONNECTION_TYPE);\n88.         ClientFactory clientFactory = ClientFactoryHolder.getInstance().findClientFactory(type);\n89. >         return clientConnected(clientFactory.newSyncedClient(clientId, attributes));\n90.     }\n91.     \n"}]}, {"url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/logging/logback/LogbackNacosLogging.java", "rawCode": "/*\n * Copyright 1999-2018 Alibaba Group Holding Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.alibaba.nacos.client.logging.logback;\n\nimport ch.qos.logback.classic.Level;\nimport ch.qos.logback.classic.Logger;\nimport ch.qos.logback.classic.LoggerContext;\nimport ch.qos.logback.classic.spi.LoggerContextListener;\nimport ch.qos.logback.core.CoreConstants;\nimport com.alibaba.nacos.client.logging.AbstractNacosLogging;\nimport com.alibaba.nacos.common.log.NacosLogbackConfigurator;\nimport com.alibaba.nacos.common.spi.NacosServiceLoader;\nimport com.alibaba.nacos.common.utils.ResourceUtils;\nimport org.slf4j.LoggerFactory;\nimport java.util.Collection;\nimport java.util.stream.Collectors;\n\n/**\n * Support for Logback version 1.0.8 or higher\n *\n * @author <a href=\"mailto:huangxiaoyu1018@gmail.com\">hxy1991</a>\n * @author <a href=\"mailto:hujun3@xiaomi.com\">hujun</a>\n *\n * @since 0.9.0\n */\npublic class LogbackNacosLogging extends AbstractNacosLogging {\n    \n    private static final String NACOS_LOGBACK_LOCATION = \"classpath:nacos-logback.xml\";\n    \n    private Integer userVersion = 2;\n    \n    /**\n     * logback use 'ch.qos.logback.core.model.Model' since 1.3.0, set logback version during initialization.\n     */\n    public LogbackNacosLogging() {\n        try {\n            Class.forName(\"ch.qos.logback.core.model.Model\");\n        } catch (ClassNotFoundException e) {\n            userVersion = 1;\n        }\n    }\n    \n    @Override\n    public void loadConfiguration() {\n        LoggerContext loggerContext = loadConfigurationOnStart();\n        if (loggerContext.getObject(CoreConstants.RECONFIGURE_ON_CHANGE_TASK) != null && !hasListener(loggerContext)) {\n            addListener(loggerContext);\n        }\n    }\n\n    private boolean hasListener(LoggerContext loggerContext) {\n        for (LoggerContextListener loggerContextListener : loggerContext.getCopyOfListenerList()) {\n            if (loggerContextListener instanceof NacosLoggerContextListener) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private LoggerContext loadConfigurationOnStart() {\n        String location = getLocation(NACOS_LOGBACK_LOCATION);\n        try {\n            LoggerContext loggerContext = (LoggerContext) LoggerFactory.getILoggerFactory();\n            Collection<NacosLogbackConfigurator> nacosLogbackConfigurators = NacosServiceLoader.load(\n                    NacosLogbackConfigurator.class);\n            NacosLogbackConfigurator nacosLogbackConfigurator = nacosLogbackConfigurators.stream()\n                    .filter(c -> c.getVersion() == userVersion).collect(Collectors.toList()).get(0);\n            nacosLogbackConfigurator.setContext(loggerContext);\n            nacosLogbackConfigurator.configure(ResourceUtils.getResourceUrl(location));\n            return loggerContext;\n        } catch (Exception e) {\n            throw new IllegalStateException(\"Could not initialize Logback Nacos logging from \" + location, e);\n        }\n    }\n\n    class NacosLoggerContextListener implements LoggerContextListener {\n        @Override\n        public boolean isResetResistant() {\n            return true;\n        }\n\n        @Override\n        public void onReset(LoggerContext context) {\n            loadConfigurationOnStart();\n        }\n\n        @Override\n        public void onStart(LoggerContext context) {\n\n        }\n\n        @Override\n        public void onStop(LoggerContext context) {\n\n        }\n\n        @Override\n        public void onLevelChange(Logger logger, Level level) {\n\n        }\n    }\n\n    private void addListener(LoggerContext loggerContext) {\n        loggerContext.addListener(new NacosLoggerContextListener());\n    }\n    \n}\n", "methodName": "com.alibaba.nacos.client.logging.logback.LogbackNacosLogging.loadConfigurationOnStart():ch.qos.logback.classic.LoggerContext", "exampleID": 48, "dataset": "infer", "filepath": "client/src/main/java/com/alibaba/nacos/client/logging/logback/LogbackNacosLogging.java", "line": 83, "sink": "getResourceUrl(...)", "source": "location", "sourceLine": 75, "qualifier": "$$location/$ could be null, and is @@dereferenced by getResourceUrl(...)/@", "steps": [{"line": 35, "source": "location", "filepath": "client/src/main/java/com/alibaba/nacos/client/logging/AbstractNacosLogging.java", "methodName": "AbstractNacosLogging.getLocation", "exampleID": 49}], "line_number": 75, "records": [{"level": 1, "filename": "client/src/main/java/com/alibaba/nacos/client/logging/AbstractNacosLogging.java", "line_number": 35, "column_number": -1, "description": "start of procedure getLocation(...)", "snippet": "    protected String getLocation(String defaultLocation) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/logging/AbstractNacosLogging.java", "methodName": "getLocation"}, {"level": 1, "filename": "client/src/main/java/com/alibaba/nacos/client/logging/AbstractNacosLogging.java", "line_number": 36, "column_number": -1, "description": "Skipping getProperty(...): unknown method", "snippet": "        String location = NacosClientProperties.PROTOTYPE.getProperty(NACOS_LOGGING_CONFIG_PROPERTY);", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/logging/AbstractNacosLogging.java", "methodName": "getLocation"}, {"level": 1, "filename": "client/src/main/java/com/alibaba/nacos/client/logging/AbstractNacosLogging.java", "line_number": 37, "column_number": -1, "description": "", "snippet": "        if (StringUtils.isBlank(location)) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/logging/AbstractNacosLogging.java", "methodName": "getLocation"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 77, "column_number": -1, "description": "start of procedure isBlank(...)", "snippet": "    public static boolean isBlank(final CharSequence cs) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isBlank"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 79, "column_number": -1, "description": "Taking true branch", "snippet": "        if (cs == null || (strLen = cs.length()) == 0) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isBlank"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 79, "column_number": -1, "description": "Taking false branch", "snippet": "        if (cs == null || (strLen = cs.length()) == 0) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isBlank"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 82, "column_number": -1, "description": "Taking false branch", "snippet": "        for (int i = 0; i < strLen; i++) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isBlank"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 87, "column_number": -1, "description": "return from a call to boolean StringUtils.isBlank(CharSequence)", "snippet": "        return true;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isBlank"}, {"level": 1, "filename": "client/src/main/java/com/alibaba/nacos/client/logging/AbstractNacosLogging.java", "line_number": 37, "column_number": -1, "description": "Taking true branch", "snippet": "        if (StringUtils.isBlank(location)) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/logging/AbstractNacosLogging.java", "methodName": "getLocation"}, {"level": 1, "filename": "client/src/main/java/com/alibaba/nacos/client/logging/AbstractNacosLogging.java", "line_number": 38, "column_number": -1, "description": "", "snippet": "            if (isDefaultConfigEnabled()) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/logging/AbstractNacosLogging.java", "methodName": "getLocation"}, {"level": 2, "filename": "client/src/main/java/com/alibaba/nacos/client/logging/AbstractNacosLogging.java", "line_number": 46, "column_number": -1, "description": "start of procedure isDefaultConfigEnabled()", "snippet": "    private boolean isDefaultConfigEnabled() {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/logging/AbstractNacosLogging.java", "methodName": "isDefaultConfigEnabled"}, {"level": 2, "filename": "client/src/main/java/com/alibaba/nacos/client/logging/AbstractNacosLogging.java", "line_number": 47, "column_number": -1, "description": "Skipping getProperty(...): unknown method", "snippet": "        String property = NacosClientProperties.PROTOTYPE.getProperty(NACOS_LOGGING_DEFAULT_CONFIG_ENABLED_PROPERTY);", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/logging/AbstractNacosLogging.java", "methodName": "isDefaultConfigEnabled"}, {"level": 2, "filename": "client/src/main/java/com/alibaba/nacos/client/logging/AbstractNacosLogging.java", "line_number": 49, "column_number": -1, "description": "Taking true branch", "snippet": "        return property == null || ConvertUtils.toBoolean(property);", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/logging/AbstractNacosLogging.java", "methodName": "isDefaultConfigEnabled"}, {"level": 3, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/ConvertUtils.java", "line_number": 159, "column_number": -1, "description": "Definition of toBoolean(...)", "snippet": "    public static boolean toBoolean(final String str) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/ConvertUtils.java", "methodName": "isDefaultConfigEnabled"}, {"level": 2, "filename": "client/src/main/java/com/alibaba/nacos/client/logging/AbstractNacosLogging.java", "line_number": 49, "column_number": -1, "description": "Taking false branch", "snippet": "        return property == null || ConvertUtils.toBoolean(property);", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/logging/AbstractNacosLogging.java", "methodName": "isDefaultConfigEnabled"}, {"level": 2, "filename": "client/src/main/java/com/alibaba/nacos/client/logging/AbstractNacosLogging.java", "line_number": 49, "column_number": -1, "description": "return from a call to boolean AbstractNacosLogging.isDefaultConfigEnabled()", "snippet": "        return property == null || ConvertUtils.toBoolean(property);", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/logging/AbstractNacosLogging.java", "methodName": "isDefaultConfigEnabled"}, {"level": 1, "filename": "client/src/main/java/com/alibaba/nacos/client/logging/AbstractNacosLogging.java", "line_number": 38, "column_number": -1, "description": "Taking false branch", "snippet": "            if (isDefaultConfigEnabled()) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/logging/AbstractNacosLogging.java", "methodName": "getLocation"}, {"level": 1, "filename": "client/src/main/java/com/alibaba/nacos/client/logging/AbstractNacosLogging.java", "line_number": 41, "column_number": -1, "description": "", "snippet": "            return null;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/logging/AbstractNacosLogging.java", "methodName": "getLocation"}, {"level": 1, "filename": "client/src/main/java/com/alibaba/nacos/client/logging/AbstractNacosLogging.java", "line_number": 43, "column_number": -1, "description": "return from a call to String AbstractNacosLogging.getLocation(String)", "snippet": "        return location;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/logging/AbstractNacosLogging.java", "methodName": "getLocation"}, {"level": 1, "filename": "common/src/main/java/com/alibaba/nacos/common/spi/NacosServiceLoader.java", "line_number": 44, "column_number": -1, "description": "start of procedure load(...)", "snippet": "    public static <T> Collection<T> load(final Class<T> service) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/spi/NacosServiceLoader.java", "methodName": "load"}, {"level": 1, "filename": "common/src/main/java/com/alibaba/nacos/common/spi/NacosServiceLoader.java", "line_number": 45, "column_number": -1, "description": "Taking false branch", "snippet": "        if (SERVICES.containsKey(service)) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/spi/NacosServiceLoader.java", "methodName": "load"}, {"level": 1, "filename": "common/src/main/java/com/alibaba/nacos/common/spi/NacosServiceLoader.java", "line_number": 48, "column_number": -1, "description": "Skipping LinkedHashSet(): unknown method", "snippet": "        Collection<T> result = new LinkedHashSet<>();", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/spi/NacosServiceLoader.java", "methodName": "load"}, {"level": 1, "filename": "common/src/main/java/com/alibaba/nacos/common/spi/NacosServiceLoader.java", "line_number": 49, "column_number": -1, "description": "Taking false branch", "snippet": "        for (T each : ServiceLoader.load(service)) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/spi/NacosServiceLoader.java", "methodName": "load"}, {"level": 1, "filename": "common/src/main/java/com/alibaba/nacos/common/spi/NacosServiceLoader.java", "line_number": 53, "column_number": -1, "description": "return from a call to Collection NacosServiceLoader.load(Class)", "snippet": "        return result;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/spi/NacosServiceLoader.java", "methodName": "load"}, {"level": 1, "filename": "client/src/main/java/com/alibaba/nacos/client/logging/logback/LogbackNacosLogging.java", "line_number": 80, "column_number": -1, "description": "start of procedure callsite_com.alibaba.nacos.client.logging.logback.LogbackNacosLogging$Lambda$_6_27(...)", "snippet": "            NacosLogbackConfigurator nacosLogbackConfigurator = nacosLogbackConfigurators.stream()", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/logging/logback/LogbackNacosLogging.java", "methodName": "callsite_com.alibaba.nacos.client.logging.logback.LogbackNacosLogging$Lambda$_6_27"}, {"level": 1, "filename": "client/src/main/java/com/alibaba/nacos/client/logging/logback/LogbackNacosLogging.java", "line_number": 80, "column_number": -1, "description": "return from a call to Predicate LogbackNacosLogging.callsite_com.alibaba.nacos.client.logging.logback.LogbackNacosLogging$Lambda$_6_27(LogbackNacosLogging)", "snippet": "            NacosLogbackConfigurator nacosLogbackConfigurator = nacosLogbackConfigurators.stream()", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/logging/logback/LogbackNacosLogging.java", "methodName": "callsite_com.alibaba.nacos.client.logging.logback.LogbackNacosLogging$Lambda$_6_27"}, {"level": 1, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/ResourceUtils.java", "line_number": 48, "column_number": -1, "description": "start of procedure getResourceUrl(...)", "snippet": "    public static URL getResourceUrl(String resource) throws IOException {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/ResourceUtils.java", "methodName": "getResourceUrl"}, {"level": 1, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/ResourceUtils.java", "line_number": 49, "column_number": -1, "description": "Skipping startsWith(...): unknown method", "snippet": "        if (resource.startsWith(CLASSPATH_PREFIX)) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/ResourceUtils.java", "methodName": "getResourceUrl"}], "combined_records": [{"level": 1, "filename": "client/src/main/java/com/alibaba/nacos/client/logging/AbstractNacosLogging.java", "line_number": 37, "column_number": -1, "description": "start of procedure getLocation(...)", "snippet": "32.    \n33.    protected String getLocation(String defaultLocation) {\n34.>         String location = NacosClientProperties.PROTOTYPE.getProperty(NACOS_LOGGING_CONFIG_PROPERTY);\n35.>         if (StringUtils.isBlank(location)) {\n36.>             if (isDefaultConfigEnabled()) {\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/logging/AbstractNacosLogging.java", "methodName": "getLocation", "line_numbers": [35, 36, 37]}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 87, "column_number": -1, "description": "start of procedure isBlank(...)", "snippet": "74.     */\n75.    public static boolean isBlank(final CharSequence cs) {\n76.>         int strLen;\n77.        if (cs == null || (strLen = cs.length()) == 0) {\n78.>             return true;\n79.        }\n80.        for (int i = 0; i < strLen; i++) {\n81.>             if (!Character.isWhitespace(cs.charAt(i))) {\n82.                return false;\n83.            }\n84.        }\n85.        return true;\n86.    }\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isBlank", "line_numbers": [77, 79, 79, 82, 87]}, {"level": 1, "filename": "client/src/main/java/com/alibaba/nacos/client/logging/AbstractNacosLogging.java", "line_number": 38, "column_number": -1, "description": "Taking true branch", "snippet": "34.        String location = NacosClientProperties.PROTOTYPE.getProperty(NACOS_LOGGING_CONFIG_PROPERTY);\n35.        if (StringUtils.isBlank(location)) {\n36.>             if (isDefaultConfigEnabled()) {\n37.>                 return defaultLocation;\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/logging/AbstractNacosLogging.java", "methodName": "getLocation", "line_numbers": [37, 38]}, {"level": 2, "filename": "client/src/main/java/com/alibaba/nacos/client/logging/AbstractNacosLogging.java", "line_number": 49, "column_number": -1, "description": "start of procedure isDefaultConfigEnabled()", "snippet": "43.    \n44.    private boolean isDefaultConfigEnabled() {\n45.>         String property = NacosClientProperties.PROTOTYPE.getProperty(NACOS_LOGGING_DEFAULT_CONFIG_ENABLED_PROPERTY);\n46.>         // The default value is true.\n47.        return property == null || ConvertUtils.toBoolean(property);\n48.    }\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/logging/AbstractNacosLogging.java", "methodName": "isDefaultConfigEnabled", "line_numbers": [46, 47, 49]}, {"level": 3, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/ConvertUtils.java", "line_number": 159, "column_number": -1, "description": "Definition of toBoolean(...)", "snippet": "156.     */\n157.    public static boolean toBoolean(final String str) {\n158.>         return Boolean.TRUE.equals(toBooleanObject(str));\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/ConvertUtils.java", "methodName": "isDefaultConfigEnabled", "line_numbers": [159]}, {"level": 2, "filename": "client/src/main/java/com/alibaba/nacos/client/logging/AbstractNacosLogging.java", "line_number": 49, "column_number": -1, "description": "Taking false branch", "snippet": "46.        // The default value is true.\n47.        return property == null || ConvertUtils.toBoolean(property);\n48.    }\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/logging/AbstractNacosLogging.java", "methodName": "isDefaultConfigEnabled", "line_numbers": [49, 49]}, {"level": 1, "filename": "client/src/main/java/com/alibaba/nacos/client/logging/AbstractNacosLogging.java", "line_number": 43, "column_number": -1, "description": "Taking false branch", "snippet": "35.        if (StringUtils.isBlank(location)) {\n36.            if (isDefaultConfigEnabled()) {\n37.>                 return defaultLocation;\n38.            }\n39.            return null;\n40.        }\n41.        return location;\n42.    }\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/logging/AbstractNacosLogging.java", "methodName": "getLocation", "line_numbers": [38, 41, 43]}, {"level": 1, "filename": "common/src/main/java/com/alibaba/nacos/common/spi/NacosServiceLoader.java", "line_number": 53, "column_number": -1, "description": "start of procedure load(...)", "snippet": "41.     */\n42.    public static <T> Collection<T> load(final Class<T> service) {\n43.>         if (SERVICES.containsKey(service)) {\n44.>             return newServiceInstances(service);\n45.        }\n46.        Collection<T> result = new LinkedHashSet<>();\n47.>         for (T each : ServiceLoader.load(service)) {\n48.>             result.add(each);\n49.            cacheServiceClass(service, each);\n50.        }\n51.        return result;\n52.    }\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/spi/NacosServiceLoader.java", "methodName": "load", "line_numbers": [44, 45, 48, 49, 53]}, {"level": 1, "filename": "client/src/main/java/com/alibaba/nacos/client/logging/logback/LogbackNacosLogging.java", "line_number": 80, "column_number": -1, "description": "start of procedure callsite_com.alibaba.nacos.client.logging.logback.LogbackNacosLogging$Lambda$_6_27(...)", "snippet": "77.                    NacosLogbackConfigurator.class);\n78.            NacosLogbackConfigurator nacosLogbackConfigurator = nacosLogbackConfigurators.stream()\n79.>                     .filter(c -> c.getVersion() == userVersion).collect(Collectors.toList()).get(0);\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/logging/logback/LogbackNacosLogging.java", "methodName": "callsite_com.alibaba.nacos.client.logging.logback.LogbackNacosLogging$Lambda$_6_27", "line_numbers": [80, 80]}, {"level": 1, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/ResourceUtils.java", "line_number": 49, "column_number": -1, "description": "start of procedure getResourceUrl(...)", "snippet": "45.     */\n46.    public static URL getResourceUrl(String resource) throws IOException {\n47.>         if (resource.startsWith(CLASSPATH_PREFIX)) {\n48.>             String path = resource.substring(CLASSPATH_PREFIX.length());\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/ResourceUtils.java", "methodName": "getResourceUrl", "line_numbers": [48, 49]}], "infer_explore": [{"level": 0, "filename": "client/src/main/java/com/alibaba/nacos/client/logging/logback/LogbackNacosLogging.java", "line_number": 74, "column_number": -1, "description": "start of procedure loadConfigurationOnStart()", "snippet": "71.     }\n72. \n73. >     private LoggerContext loadConfigurationOnStart() {\n74.         String location = getLocation(NACOS_LOGBACK_LOCATION);\n75.         try {\n"}, {"level": 0, "filename": "client/src/main/java/com/alibaba/nacos/client/logging/logback/LogbackNacosLogging.java", "line_number": 75, "column_number": -1, "description": "", "snippet": "72. \n73.     private LoggerContext loadConfigurationOnStart() {\n74. >         String location = getLocation(NACOS_LOGBACK_LOCATION);\n75.         try {\n76.             LoggerContext loggerContext = (LoggerContext) LoggerFactory.getILoggerFactory();\n"}, {"level": 1, "filename": "client/src/main/java/com/alibaba/nacos/client/logging/AbstractNacosLogging.java", "line_number": 35, "column_number": -1, "description": "start of procedure getLocation(...)", "snippet": "32.     private static final String NACOS_LOGGING_DEFAULT_CONFIG_ENABLED_PROPERTY = \"nacos.logging.default.config.enabled\";\n33.     \n34. >     protected String getLocation(String defaultLocation) {\n35.         String location = NacosClientProperties.PROTOTYPE.getProperty(NACOS_LOGGING_CONFIG_PROPERTY);\n36.         if (StringUtils.isBlank(location)) {\n"}, {"level": 1, "filename": "client/src/main/java/com/alibaba/nacos/client/logging/AbstractNacosLogging.java", "line_number": 36, "column_number": -1, "description": "Skipping getProperty(...): unknown method", "snippet": "33.     \n34.     protected String getLocation(String defaultLocation) {\n35. >         String location = NacosClientProperties.PROTOTYPE.getProperty(NACOS_LOGGING_CONFIG_PROPERTY);\n36.         if (StringUtils.isBlank(location)) {\n37.             if (isDefaultConfigEnabled()) {\n"}, {"level": 2, "filename": "client/src/main/java/com/alibaba/nacos/client/env/NacosClientProperties.java", "line_number": -1, "column_number": -1, "description": "Definition of getProperty(...)", "snippet": ""}, {"level": 1, "filename": "client/src/main/java/com/alibaba/nacos/client/logging/AbstractNacosLogging.java", "line_number": 37, "column_number": -1, "description": "", "snippet": "34.     protected String getLocation(String defaultLocation) {\n35.         String location = NacosClientProperties.PROTOTYPE.getProperty(NACOS_LOGGING_CONFIG_PROPERTY);\n36. >         if (StringUtils.isBlank(location)) {\n37.             if (isDefaultConfigEnabled()) {\n38.                 return defaultLocation;\n"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 77, "column_number": -1, "description": "start of procedure isBlank(...)", "snippet": "74.      * @return {@code true} if the string is empty and null and whitespace\n75.      */\n76. >     public static boolean isBlank(final CharSequence cs) {\n77.         int strLen;\n78.         if (cs == null || (strLen = cs.length()) == 0) {\n"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 79, "column_number": -1, "description": "Taking true branch", "snippet": "76.     public static boolean isBlank(final CharSequence cs) {\n77.         int strLen;\n78. >         if (cs == null || (strLen = cs.length()) == 0) {\n79.             return true;\n80.         }\n"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 79, "column_number": -1, "description": "Taking false branch", "snippet": "76.     public static boolean isBlank(final CharSequence cs) {\n77.         int strLen;\n78. >         if (cs == null || (strLen = cs.length()) == 0) {\n79.             return true;\n80.         }\n"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 82, "column_number": -1, "description": "Taking false branch", "snippet": "79.             return true;\n80.         }\n81. >         for (int i = 0; i < strLen; i++) {\n82.             if (!Character.isWhitespace(cs.charAt(i))) {\n83.                 return false;\n"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 87, "column_number": -1, "description": "return from a call to boolean StringUtils.isBlank(CharSequence)", "snippet": "84.             }\n85.         }\n86. >         return true;\n87.     }\n88.     \n"}, {"level": 1, "filename": "client/src/main/java/com/alibaba/nacos/client/logging/AbstractNacosLogging.java", "line_number": 37, "column_number": -1, "description": "Taking true branch", "snippet": "34.     protected String getLocation(String defaultLocation) {\n35.         String location = NacosClientProperties.PROTOTYPE.getProperty(NACOS_LOGGING_CONFIG_PROPERTY);\n36. >         if (StringUtils.isBlank(location)) {\n37.             if (isDefaultConfigEnabled()) {\n38.                 return defaultLocation;\n"}, {"level": 1, "filename": "client/src/main/java/com/alibaba/nacos/client/logging/AbstractNacosLogging.java", "line_number": 38, "column_number": -1, "description": "", "snippet": "35.         String location = NacosClientProperties.PROTOTYPE.getProperty(NACOS_LOGGING_CONFIG_PROPERTY);\n36.         if (StringUtils.isBlank(location)) {\n37. >             if (isDefaultConfigEnabled()) {\n38.                 return defaultLocation;\n39.             }\n"}, {"level": 2, "filename": "client/src/main/java/com/alibaba/nacos/client/logging/AbstractNacosLogging.java", "line_number": 46, "column_number": -1, "description": "start of procedure isDefaultConfigEnabled()", "snippet": "43.     }\n44.     \n45. >     private boolean isDefaultConfigEnabled() {\n46.         String property = NacosClientProperties.PROTOTYPE.getProperty(NACOS_LOGGING_DEFAULT_CONFIG_ENABLED_PROPERTY);\n47.         // The default value is true.\n"}, {"level": 2, "filename": "client/src/main/java/com/alibaba/nacos/client/logging/AbstractNacosLogging.java", "line_number": 47, "column_number": -1, "description": "Skipping getProperty(...): unknown method", "snippet": "44.     \n45.     private boolean isDefaultConfigEnabled() {\n46. >         String property = NacosClientProperties.PROTOTYPE.getProperty(NACOS_LOGGING_DEFAULT_CONFIG_ENABLED_PROPERTY);\n47.         // The default value is true.\n48.         return property == null || ConvertUtils.toBoolean(property);\n"}, {"level": 3, "filename": "client/src/main/java/com/alibaba/nacos/client/env/NacosClientProperties.java", "line_number": -1, "column_number": -1, "description": "Definition of getProperty(...)", "snippet": ""}, {"level": 2, "filename": "client/src/main/java/com/alibaba/nacos/client/logging/AbstractNacosLogging.java", "line_number": 49, "column_number": -1, "description": "Taking true branch", "snippet": "46.         String property = NacosClientProperties.PROTOTYPE.getProperty(NACOS_LOGGING_DEFAULT_CONFIG_ENABLED_PROPERTY);\n47.         // The default value is true.\n48. >         return property == null || ConvertUtils.toBoolean(property);\n49.     }\n50.     \n"}, {"level": 3, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/ConvertUtils.java", "line_number": 159, "column_number": -1, "description": "Definition of toBoolean(...)", "snippet": "156.      * @return the boolean value of the string, {@code false} if no match or the String is null\n157.      */\n158. >     public static boolean toBoolean(final String str) {\n159.         return Boolean.TRUE.equals(toBooleanObject(str));\n160.     }\n"}, {"level": 2, "filename": "client/src/main/java/com/alibaba/nacos/client/logging/AbstractNacosLogging.java", "line_number": 49, "column_number": -1, "description": "Taking false branch", "snippet": "46.         String property = NacosClientProperties.PROTOTYPE.getProperty(NACOS_LOGGING_DEFAULT_CONFIG_ENABLED_PROPERTY);\n47.         // The default value is true.\n48. >         return property == null || ConvertUtils.toBoolean(property);\n49.     }\n50.     \n"}, {"level": 2, "filename": "client/src/main/java/com/alibaba/nacos/client/logging/AbstractNacosLogging.java", "line_number": 49, "column_number": -1, "description": "return from a call to boolean AbstractNacosLogging.isDefaultConfigEnabled()", "snippet": "46.         String property = NacosClientProperties.PROTOTYPE.getProperty(NACOS_LOGGING_DEFAULT_CONFIG_ENABLED_PROPERTY);\n47.         // The default value is true.\n48. >         return property == null || ConvertUtils.toBoolean(property);\n49.     }\n50.     \n"}, {"level": 1, "filename": "client/src/main/java/com/alibaba/nacos/client/logging/AbstractNacosLogging.java", "line_number": 38, "column_number": -1, "description": "Taking false branch", "snippet": "35.         String location = NacosClientProperties.PROTOTYPE.getProperty(NACOS_LOGGING_CONFIG_PROPERTY);\n36.         if (StringUtils.isBlank(location)) {\n37. >             if (isDefaultConfigEnabled()) {\n38.                 return defaultLocation;\n39.             }\n"}, {"level": 1, "filename": "client/src/main/java/com/alibaba/nacos/client/logging/AbstractNacosLogging.java", "line_number": 41, "column_number": -1, "description": "", "snippet": "38.                 return defaultLocation;\n39.             }\n40. >             return null;\n41.         }\n42.         return location;\n"}, {"level": 1, "filename": "client/src/main/java/com/alibaba/nacos/client/logging/AbstractNacosLogging.java", "line_number": 43, "column_number": -1, "description": "return from a call to String AbstractNacosLogging.getLocation(String)", "snippet": "40.             return null;\n41.         }\n42. >         return location;\n43.     }\n44.     \n"}, {"level": 0, "filename": "client/src/main/java/com/alibaba/nacos/client/logging/logback/LogbackNacosLogging.java", "line_number": 77, "column_number": -1, "description": "", "snippet": "74.         String location = getLocation(NACOS_LOGBACK_LOCATION);\n75.         try {\n76. >             LoggerContext loggerContext = (LoggerContext) LoggerFactory.getILoggerFactory();\n77.             Collection<NacosLogbackConfigurator> nacosLogbackConfigurators = NacosServiceLoader.load(\n78.                     NacosLogbackConfigurator.class);\n"}, {"level": 0, "filename": "client/src/main/java/com/alibaba/nacos/client/logging/logback/LogbackNacosLogging.java", "line_number": 78, "column_number": -1, "description": "", "snippet": "75.         try {\n76.             LoggerContext loggerContext = (LoggerContext) LoggerFactory.getILoggerFactory();\n77. >             Collection<NacosLogbackConfigurator> nacosLogbackConfigurators = NacosServiceLoader.load(\n78.                     NacosLogbackConfigurator.class);\n79.             NacosLogbackConfigurator nacosLogbackConfigurator = nacosLogbackConfigurators.stream()\n"}, {"level": 1, "filename": "common/src/main/java/com/alibaba/nacos/common/spi/NacosServiceLoader.java", "line_number": 44, "column_number": -1, "description": "start of procedure load(...)", "snippet": "41.      * @return service instances\n42.      */\n43. >     public static <T> Collection<T> load(final Class<T> service) {\n44.         if (SERVICES.containsKey(service)) {\n45.             return newServiceInstances(service);\n"}, {"level": 1, "filename": "common/src/main/java/com/alibaba/nacos/common/spi/NacosServiceLoader.java", "line_number": 45, "column_number": -1, "description": "Taking false branch", "snippet": "42.      */\n43.     public static <T> Collection<T> load(final Class<T> service) {\n44. >         if (SERVICES.containsKey(service)) {\n45.             return newServiceInstances(service);\n46.         }\n"}, {"level": 1, "filename": "common/src/main/java/com/alibaba/nacos/common/spi/NacosServiceLoader.java", "line_number": 48, "column_number": -1, "description": "Skipping LinkedHashSet(): unknown method", "snippet": "45.             return newServiceInstances(service);\n46.         }\n47. >         Collection<T> result = new LinkedHashSet<>();\n48.         for (T each : ServiceLoader.load(service)) {\n49.             result.add(each);\n"}, {"level": 1, "filename": "common/src/main/java/com/alibaba/nacos/common/spi/NacosServiceLoader.java", "line_number": 49, "column_number": -1, "description": "Taking false branch", "snippet": "46.         }\n47.         Collection<T> result = new LinkedHashSet<>();\n48. >         for (T each : ServiceLoader.load(service)) {\n49.             result.add(each);\n50.             cacheServiceClass(service, each);\n"}, {"level": 1, "filename": "common/src/main/java/com/alibaba/nacos/common/spi/NacosServiceLoader.java", "line_number": 53, "column_number": -1, "description": "return from a call to Collection NacosServiceLoader.load(Class)", "snippet": "50.             cacheServiceClass(service, each);\n51.         }\n52. >         return result;\n53.     }\n54.     \n"}, {"level": 0, "filename": "client/src/main/java/com/alibaba/nacos/client/logging/logback/LogbackNacosLogging.java", "line_number": 80, "column_number": -1, "description": "", "snippet": "77.             Collection<NacosLogbackConfigurator> nacosLogbackConfigurators = NacosServiceLoader.load(\n78.                     NacosLogbackConfigurator.class);\n79. >             NacosLogbackConfigurator nacosLogbackConfigurator = nacosLogbackConfigurators.stream()\n80.                     .filter(c -> c.getVersion() == userVersion).collect(Collectors.toList()).get(0);\n81.             nacosLogbackConfigurator.setContext(loggerContext);\n"}, {"level": 1, "filename": "client/src/main/java/com/alibaba/nacos/client/logging/logback/LogbackNacosLogging.java", "line_number": 80, "column_number": -1, "description": "start of procedure callsite_com.alibaba.nacos.client.logging.logback.LogbackNacosLogging$Lambda$_6_27(...)", "snippet": "77.             Collection<NacosLogbackConfigurator> nacosLogbackConfigurators = NacosServiceLoader.load(\n78.                     NacosLogbackConfigurator.class);\n79. >             NacosLogbackConfigurator nacosLogbackConfigurator = nacosLogbackConfigurators.stream()\n80.                     .filter(c -> c.getVersion() == userVersion).collect(Collectors.toList()).get(0);\n81.             nacosLogbackConfigurator.setContext(loggerContext);\n"}, {"level": 1, "filename": "client/src/main/java/com/alibaba/nacos/client/logging/logback/LogbackNacosLogging.java", "line_number": 80, "column_number": -1, "description": "return from a call to Predicate LogbackNacosLogging.callsite_com.alibaba.nacos.client.logging.logback.LogbackNacosLogging$Lambda$_6_27(LogbackNacosLogging)", "snippet": "77.             Collection<NacosLogbackConfigurator> nacosLogbackConfigurators = NacosServiceLoader.load(\n78.                     NacosLogbackConfigurator.class);\n79. >             NacosLogbackConfigurator nacosLogbackConfigurator = nacosLogbackConfigurators.stream()\n80.                     .filter(c -> c.getVersion() == userVersion).collect(Collectors.toList()).get(0);\n81.             nacosLogbackConfigurator.setContext(loggerContext);\n"}, {"level": 0, "filename": "client/src/main/java/com/alibaba/nacos/client/logging/logback/LogbackNacosLogging.java", "line_number": 81, "column_number": -1, "description": "", "snippet": "78.                     NacosLogbackConfigurator.class);\n79.             NacosLogbackConfigurator nacosLogbackConfigurator = nacosLogbackConfigurators.stream()\n80. >                     .filter(c -> c.getVersion() == userVersion).collect(Collectors.toList()).get(0);\n81.             nacosLogbackConfigurator.setContext(loggerContext);\n82.             nacosLogbackConfigurator.configure(ResourceUtils.getResourceUrl(location));\n"}, {"level": 0, "filename": "client/src/main/java/com/alibaba/nacos/client/logging/logback/LogbackNacosLogging.java", "line_number": 82, "column_number": -1, "description": "Skipping setContext(...): unknown method", "snippet": "79.             NacosLogbackConfigurator nacosLogbackConfigurator = nacosLogbackConfigurators.stream()\n80.                     .filter(c -> c.getVersion() == userVersion).collect(Collectors.toList()).get(0);\n81. >             nacosLogbackConfigurator.setContext(loggerContext);\n82.             nacosLogbackConfigurator.configure(ResourceUtils.getResourceUrl(location));\n83.             return loggerContext;\n"}, {"level": 1, "filename": "common/src/main/java/com/alibaba/nacos/common/log/NacosLogbackConfigurator.java", "line_number": -1, "column_number": -1, "description": "Definition of setContext(...)", "snippet": ""}, {"level": 0, "filename": "client/src/main/java/com/alibaba/nacos/client/logging/logback/LogbackNacosLogging.java", "line_number": 83, "column_number": -1, "description": "", "snippet": "80.                     .filter(c -> c.getVersion() == userVersion).collect(Collectors.toList()).get(0);\n81.             nacosLogbackConfigurator.setContext(loggerContext);\n82. >             nacosLogbackConfigurator.configure(ResourceUtils.getResourceUrl(location));\n83.             return loggerContext;\n84.         } catch (Exception e) {\n"}, {"level": 1, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/ResourceUtils.java", "line_number": 48, "column_number": -1, "description": "start of procedure getResourceUrl(...)", "snippet": "45.      * @throws IOException If the resource cannot be found or read\n46.      */\n47. >     public static URL getResourceUrl(String resource) throws IOException {\n48.         if (resource.startsWith(CLASSPATH_PREFIX)) {\n49.             String path = resource.substring(CLASSPATH_PREFIX.length());\n"}, {"level": 1, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/ResourceUtils.java", "line_number": 49, "column_number": -1, "description": "Skipping startsWith(...): unknown method", "snippet": "46.      */\n47.     public static URL getResourceUrl(String resource) throws IOException {\n48. >         if (resource.startsWith(CLASSPATH_PREFIX)) {\n49.             String path = resource.substring(CLASSPATH_PREFIX.length());\n50.             \n"}]}, {"url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/naming/src/main/java/com/alibaba/nacos/naming/core/v2/client/manager/impl/ConnectionBasedClientManager.java", "rawCode": "/*\n * Copyright 1999-2018 Alibaba Group Holding Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.alibaba.nacos.naming.core.v2.client.manager.impl;\n\nimport com.alibaba.nacos.api.common.Constants;\nimport com.alibaba.nacos.api.remote.RemoteConstants;\nimport com.alibaba.nacos.common.notify.NotifyCenter;\nimport com.alibaba.nacos.core.remote.ClientConnectionEventListener;\nimport com.alibaba.nacos.core.remote.Connection;\nimport com.alibaba.nacos.naming.consistency.ephemeral.distro.v2.DistroClientVerifyInfo;\nimport com.alibaba.nacos.naming.constants.ClientConstants;\nimport com.alibaba.nacos.naming.core.v2.client.Client;\nimport com.alibaba.nacos.naming.core.v2.client.ClientAttributes;\nimport com.alibaba.nacos.naming.core.v2.client.factory.ClientFactory;\nimport com.alibaba.nacos.naming.core.v2.client.factory.ClientFactoryHolder;\nimport com.alibaba.nacos.naming.core.v2.client.impl.ConnectionBasedClient;\nimport com.alibaba.nacos.naming.core.v2.client.manager.ClientManager;\nimport com.alibaba.nacos.naming.core.v2.event.client.ClientEvent;\nimport com.alibaba.nacos.naming.core.v2.event.client.ClientOperationEvent;\nimport com.alibaba.nacos.naming.misc.GlobalExecutor;\nimport com.alibaba.nacos.naming.misc.Loggers;\nimport org.springframework.stereotype.Component;\n\nimport java.util.Collection;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\nimport java.util.concurrent.TimeUnit;\n\n/**\n * The manager of {@code ConnectionBasedClient}.\n *\n * @author xiweng.yy\n */\n@Component(\"connectionBasedClientManager\")\npublic class ConnectionBasedClientManager extends ClientConnectionEventListener implements ClientManager {\n    \n    private final ConcurrentMap<String, ConnectionBasedClient> clients = new ConcurrentHashMap<>();\n    \n    public ConnectionBasedClientManager() {\n        GlobalExecutor\n                .scheduleExpiredClientCleaner(new ExpiredClientCleaner(this), 0, Constants.DEFAULT_HEART_BEAT_INTERVAL,\n                        TimeUnit.MILLISECONDS);\n    }\n    \n    @Override\n    public void clientConnected(Connection connect) {\n        if (!RemoteConstants.LABEL_MODULE_NAMING.equals(connect.getMetaInfo().getLabel(RemoteConstants.LABEL_MODULE))) {\n            return;\n        }\n        ClientAttributes attributes = new ClientAttributes();\n        attributes.addClientAttribute(ClientConstants.CONNECTION_TYPE, connect.getMetaInfo().getConnectType());\n        attributes.addClientAttribute(ClientConstants.CONNECTION_METADATA, connect.getMetaInfo());\n        clientConnected(connect.getMetaInfo().getConnectionId(), attributes);\n    }\n    \n    @Override\n    public boolean clientConnected(String clientId, ClientAttributes attributes) {\n        String type = attributes.getClientAttribute(ClientConstants.CONNECTION_TYPE);\n        ClientFactory clientFactory = ClientFactoryHolder.getInstance().findClientFactory(type);\n        return clientConnected(clientFactory.newClient(clientId, attributes));\n    }\n    \n    @Override\n    public boolean clientConnected(final Client client) {\n        clients.computeIfAbsent(client.getClientId(), s -> {\n            Loggers.SRV_LOG.info(\"Client connection {} connect\", client.getClientId());\n            return (ConnectionBasedClient) client;\n        });\n        return true;\n    }\n    \n    @Override\n    public boolean syncClientConnected(String clientId, ClientAttributes attributes) {\n        String type = attributes.getClientAttribute(ClientConstants.CONNECTION_TYPE);\n        ClientFactory clientFactory = ClientFactoryHolder.getInstance().findClientFactory(type);\n        return clientConnected(clientFactory.newSyncedClient(clientId, attributes));\n    }\n    \n    @Override\n    public void clientDisConnected(Connection connect) {\n        clientDisconnected(connect.getMetaInfo().getConnectionId());\n    }\n    \n    @Override\n    public boolean clientDisconnected(String clientId) {\n        Loggers.SRV_LOG.info(\"Client connection {} disconnect, remove instances and subscribers\", clientId);\n        ConnectionBasedClient client = clients.remove(clientId);\n        if (null == client) {\n            return true;\n        }\n        client.release();\n        boolean isResponsible = isResponsibleClient(client);\n        NotifyCenter.publishEvent(new ClientOperationEvent.ClientReleaseEvent(client, isResponsible));\n        NotifyCenter.publishEvent(new ClientEvent.ClientDisconnectEvent(client, isResponsible));\n        return true;\n    }\n    \n    @Override\n    public Client getClient(String clientId) {\n        return clients.get(clientId);\n    }\n    \n    @Override\n    public boolean contains(String clientId) {\n        return clients.containsKey(clientId);\n    }\n    \n    @Override\n    public Collection<String> allClientId() {\n        return clients.keySet();\n    }\n    \n    @Override\n    public boolean isResponsibleClient(Client client) {\n        return (client instanceof ConnectionBasedClient) && ((ConnectionBasedClient) client).isNative();\n    }\n    \n    @Override\n    public boolean verifyClient(DistroClientVerifyInfo verifyData) {\n        ConnectionBasedClient client = clients.get(verifyData.getClientId());\n        if (null != client) {\n            // remote node of old version will always verify with zero revision\n            if (0 == verifyData.getRevision() || client.getRevision() == verifyData.getRevision()) {\n                client.setLastRenewTime();\n                return true;\n            } else {\n                Loggers.DISTRO.info(\"[DISTRO-VERIFY-FAILED] ConnectionBasedClient[{}] revision local={}, remote={}\",\n                        client.getClientId(), client.getRevision(), verifyData.getRevision());\n            }\n        }\n        return false;\n    }\n    \n    private static class ExpiredClientCleaner implements Runnable {\n        \n        private final ConnectionBasedClientManager clientManager;\n        \n        public ExpiredClientCleaner(ConnectionBasedClientManager clientManager) {\n            this.clientManager = clientManager;\n        }\n        \n        @Override\n        public void run() {\n            long currentTime = System.currentTimeMillis();\n            for (String each : clientManager.allClientId()) {\n                ConnectionBasedClient client = (ConnectionBasedClient) clientManager.getClient(each);\n                if (null != client && client.isExpire(currentTime)) {\n                    clientManager.clientDisconnected(each);\n                }\n            }\n        }\n    }\n}\n", "methodName": "com.alibaba.nacos.naming.core.v2.client.manager.impl.ConnectionBasedClientManager.clientConnected(java.lang.String,com.alibaba.nacos.naming.core.v2.client.ClientAttributes):boolean", "exampleID": 50, "dataset": "infer", "filepath": "naming/src/main/java/com/alibaba/nacos/naming/core/v2/client/manager/impl/ConnectionBasedClientManager.java", "line": 74, "sink": "clientFactory", "source": "clientFactory", "sourceLine": 73, "qualifier": "$$clientFactory/$ could be null, and is @@dereferenced/@", "steps": [{"line": 60, "source": "clientFactory", "filepath": "naming/src/main/java/com/alibaba/nacos/naming/core/v2/client/factory/ClientFactoryHolder.java", "methodName": "ClientFactoryHolder.findClientFactory", "exampleID": 51}], "line_number": 73, "records": [{"level": 1, "filename": "naming/src/main/java/com/alibaba/nacos/naming/core/v2/client/factory/ClientFactoryHolder.java", "line_number": 50, "column_number": -1, "description": "start of procedure getInstance()", "snippet": "    public static ClientFactoryHolder getInstance() {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/naming/src/main/java/com/alibaba/nacos/naming/core/v2/client/factory/ClientFactoryHolder.java", "methodName": "getInstance"}, {"level": 1, "filename": "naming/src/main/java/com/alibaba/nacos/naming/core/v2/client/factory/ClientFactoryHolder.java", "line_number": 51, "column_number": -1, "description": "return from a call to ClientFactoryHolder ClientFactoryHolder.getInstance()", "snippet": "        return INSTANCE;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/naming/src/main/java/com/alibaba/nacos/naming/core/v2/client/factory/ClientFactoryHolder.java", "methodName": "getInstance"}, {"level": 1, "filename": "naming/src/main/java/com/alibaba/nacos/naming/core/v2/client/factory/ClientFactoryHolder.java", "line_number": 60, "column_number": -1, "description": "start of procedure findClientFactory(...)", "snippet": "    public ClientFactory findClientFactory(String type) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/naming/src/main/java/com/alibaba/nacos/naming/core/v2/client/factory/ClientFactoryHolder.java", "methodName": "findClientFactory"}, {"level": 1, "filename": "naming/src/main/java/com/alibaba/nacos/naming/core/v2/client/factory/ClientFactoryHolder.java", "line_number": 61, "column_number": -1, "description": "", "snippet": "        if (StringUtils.isEmpty(type) || !clientFactories.containsKey(type)) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/naming/src/main/java/com/alibaba/nacos/naming/core/v2/client/factory/ClientFactoryHolder.java", "methodName": "findClientFactory"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 116, "column_number": -1, "description": "start of procedure isEmpty(...)", "snippet": "    public static boolean isEmpty(String str) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isEmpty"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 117, "column_number": -1, "description": "Taking true branch", "snippet": "        return str == null || str.length() == 0;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isEmpty"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 117, "column_number": -1, "description": "Taking true branch", "snippet": "        return str == null || str.length() == 0;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isEmpty"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 117, "column_number": -1, "description": "return from a call to boolean StringUtils.isEmpty(String)", "snippet": "        return str == null || str.length() == 0;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isEmpty"}, {"level": 1, "filename": "naming/src/main/java/com/alibaba/nacos/naming/core/v2/client/factory/ClientFactoryHolder.java", "line_number": 61, "column_number": -1, "description": "Taking false branch", "snippet": "        if (StringUtils.isEmpty(type) || !clientFactories.containsKey(type)) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/naming/src/main/java/com/alibaba/nacos/naming/core/v2/client/factory/ClientFactoryHolder.java", "methodName": "findClientFactory"}, {"level": 1, "filename": "naming/src/main/java/com/alibaba/nacos/naming/core/v2/client/factory/ClientFactoryHolder.java", "line_number": 62, "column_number": -1, "description": "", "snippet": "            return clientFactories.get(ClientConstants.DEFAULT_FACTORY);", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/naming/src/main/java/com/alibaba/nacos/naming/core/v2/client/factory/ClientFactoryHolder.java", "methodName": "findClientFactory"}, {"level": 1, "filename": "naming/src/main/java/com/alibaba/nacos/naming/core/v2/client/factory/ClientFactoryHolder.java", "line_number": 64, "column_number": -1, "description": "return from a call to ClientFactory ClientFactoryHolder.findClientFactory(String)", "snippet": "        return clientFactories.get(type);", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/naming/src/main/java/com/alibaba/nacos/naming/core/v2/client/factory/ClientFactoryHolder.java", "methodName": "findClientFactory"}], "combined_records": [{"level": 1, "filename": "naming/src/main/java/com/alibaba/nacos/naming/core/v2/client/factory/ClientFactoryHolder.java", "line_number": 51, "column_number": -1, "description": "start of procedure getInstance()", "snippet": "47.    \n48.    public static ClientFactoryHolder getInstance() {\n49.>         return INSTANCE;\n50.    }\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/naming/src/main/java/com/alibaba/nacos/naming/core/v2/client/factory/ClientFactoryHolder.java", "methodName": "getInstance", "line_numbers": [50, 51]}, {"level": 1, "filename": "naming/src/main/java/com/alibaba/nacos/naming/core/v2/client/factory/ClientFactoryHolder.java", "line_number": 61, "column_number": -1, "description": "start of procedure findClientFactory(...)", "snippet": "57.     */\n58.    public ClientFactory findClientFactory(String type) {\n59.>         if (StringUtils.isEmpty(type) || !clientFactories.containsKey(type)) {\n60.>             return clientFactories.get(ClientConstants.DEFAULT_FACTORY);\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/naming/src/main/java/com/alibaba/nacos/naming/core/v2/client/factory/ClientFactoryHolder.java", "methodName": "findClientFactory", "line_numbers": [60, 61]}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 117, "column_number": -1, "description": "start of procedure isEmpty(...)", "snippet": "113.     */\n114.    public static boolean isEmpty(String str) {\n115.>         return str == null || str.length() == 0;\n116.    }\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "methodName": "isEmpty", "line_numbers": [116, 117, 117, 117]}, {"level": 1, "filename": "naming/src/main/java/com/alibaba/nacos/naming/core/v2/client/factory/ClientFactoryHolder.java", "line_number": 64, "column_number": -1, "description": "Taking false branch", "snippet": "58.    public ClientFactory findClientFactory(String type) {\n59.        if (StringUtils.isEmpty(type) || !clientFactories.containsKey(type)) {\n60.>             return clientFactories.get(ClientConstants.DEFAULT_FACTORY);\n61.        }\n62.        return clientFactories.get(type);\n63.    }\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/naming/src/main/java/com/alibaba/nacos/naming/core/v2/client/factory/ClientFactoryHolder.java", "methodName": "findClientFactory", "line_numbers": [61, 62, 64]}], "infer_explore": [{"level": 0, "filename": "naming/src/main/java/com/alibaba/nacos/naming/core/v2/client/manager/impl/ConnectionBasedClientManager.java", "line_number": 71, "column_number": -1, "description": "start of procedure clientConnected(...)", "snippet": "68.     \n69.     @Override\n70. >     public boolean clientConnected(String clientId, ClientAttributes attributes) {\n71.         String type = attributes.getClientAttribute(ClientConstants.CONNECTION_TYPE);\n72.         ClientFactory clientFactory = ClientFactoryHolder.getInstance().findClientFactory(type);\n"}, {"level": 0, "filename": "naming/src/main/java/com/alibaba/nacos/naming/core/v2/client/manager/impl/ConnectionBasedClientManager.java", "line_number": 72, "column_number": -1, "description": "", "snippet": "69.     @Override\n70.     public boolean clientConnected(String clientId, ClientAttributes attributes) {\n71. >         String type = attributes.getClientAttribute(ClientConstants.CONNECTION_TYPE);\n72.         ClientFactory clientFactory = ClientFactoryHolder.getInstance().findClientFactory(type);\n73.         return clientConnected(clientFactory.newClient(clientId, attributes));\n"}, {"level": 1, "filename": "naming/src/main/java/com/alibaba/nacos/naming/core/v2/client/ClientAttributes.java", "line_number": 57, "column_number": -1, "description": "start of procedure getClientAttribute(...)", "snippet": "54.      * @return client attribute, if not exist or type can't case, return {@code null}\n55.      */\n56. >     public <T> T getClientAttribute(String key) {\n57.         try {\n58.             return (T) clientAttributes.get(key);\n"}, {"level": 1, "filename": "naming/src/main/java/com/alibaba/nacos/naming/core/v2/client/ClientAttributes.java", "line_number": 59, "column_number": -1, "description": "", "snippet": "56.     public <T> T getClientAttribute(String key) {\n57.         try {\n58. >             return (T) clientAttributes.get(key);\n59.         } catch (Exception e) {\n60.             return null;\n"}, {"level": 1, "filename": "naming/src/main/java/com/alibaba/nacos/naming/core/v2/client/ClientAttributes.java", "line_number": 61, "column_number": -1, "description": "return from a call to Object ClientAttributes.getClientAttribute(String)", "snippet": "58.             return (T) clientAttributes.get(key);\n59.         } catch (Exception e) {\n60. >             return null;\n61.         }\n62.     }\n"}, {"level": 0, "filename": "naming/src/main/java/com/alibaba/nacos/naming/core/v2/client/manager/impl/ConnectionBasedClientManager.java", "line_number": 72, "column_number": -1, "description": "", "snippet": "69.     @Override\n70.     public boolean clientConnected(String clientId, ClientAttributes attributes) {\n71. >         String type = attributes.getClientAttribute(ClientConstants.CONNECTION_TYPE);\n72.         ClientFactory clientFactory = ClientFactoryHolder.getInstance().findClientFactory(type);\n73.         return clientConnected(clientFactory.newClient(clientId, attributes));\n"}, {"level": 0, "filename": "naming/src/main/java/com/alibaba/nacos/naming/core/v2/client/manager/impl/ConnectionBasedClientManager.java", "line_number": 73, "column_number": -1, "description": "", "snippet": "70.     public boolean clientConnected(String clientId, ClientAttributes attributes) {\n71.         String type = attributes.getClientAttribute(ClientConstants.CONNECTION_TYPE);\n72. >         ClientFactory clientFactory = ClientFactoryHolder.getInstance().findClientFactory(type);\n73.         return clientConnected(clientFactory.newClient(clientId, attributes));\n74.     }\n"}, {"level": 1, "filename": "naming/src/main/java/com/alibaba/nacos/naming/core/v2/client/factory/ClientFactoryHolder.java", "line_number": 50, "column_number": -1, "description": "start of procedure getInstance()", "snippet": "47.     }\n48.     \n49. >     public static ClientFactoryHolder getInstance() {\n50.         return INSTANCE;\n51.     }\n"}, {"level": 1, "filename": "naming/src/main/java/com/alibaba/nacos/naming/core/v2/client/factory/ClientFactoryHolder.java", "line_number": 51, "column_number": -1, "description": "return from a call to ClientFactoryHolder ClientFactoryHolder.getInstance()", "snippet": "48.     \n49.     public static ClientFactoryHolder getInstance() {\n50. >         return INSTANCE;\n51.     }\n52.     \n"}, {"level": 0, "filename": "naming/src/main/java/com/alibaba/nacos/naming/core/v2/client/manager/impl/ConnectionBasedClientManager.java", "line_number": 73, "column_number": -1, "description": "", "snippet": "70.     public boolean clientConnected(String clientId, ClientAttributes attributes) {\n71.         String type = attributes.getClientAttribute(ClientConstants.CONNECTION_TYPE);\n72. >         ClientFactory clientFactory = ClientFactoryHolder.getInstance().findClientFactory(type);\n73.         return clientConnected(clientFactory.newClient(clientId, attributes));\n74.     }\n"}, {"level": 1, "filename": "naming/src/main/java/com/alibaba/nacos/naming/core/v2/client/factory/ClientFactoryHolder.java", "line_number": 60, "column_number": -1, "description": "start of procedure findClientFactory(...)", "snippet": "57.      * @return target type {@link ClientFactory}, if not fount, return 'default' client factory.\n58.      */\n59. >     public ClientFactory findClientFactory(String type) {\n60.         if (StringUtils.isEmpty(type) || !clientFactories.containsKey(type)) {\n61.             return clientFactories.get(ClientConstants.DEFAULT_FACTORY);\n"}, {"level": 1, "filename": "naming/src/main/java/com/alibaba/nacos/naming/core/v2/client/factory/ClientFactoryHolder.java", "line_number": 61, "column_number": -1, "description": "", "snippet": "58.      */\n59.     public ClientFactory findClientFactory(String type) {\n60. >         if (StringUtils.isEmpty(type) || !clientFactories.containsKey(type)) {\n61.             return clientFactories.get(ClientConstants.DEFAULT_FACTORY);\n62.         }\n"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 116, "column_number": -1, "description": "start of procedure isEmpty(...)", "snippet": "113.      * @return {@code true} if the str is empty or null\n114.      */\n115. >     public static boolean isEmpty(String str) {\n116.         return str == null || str.length() == 0;\n117.     }\n"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 117, "column_number": -1, "description": "Taking true branch", "snippet": "114.      */\n115.     public static boolean isEmpty(String str) {\n116. >         return str == null || str.length() == 0;\n117.     }\n118.     \n"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 117, "column_number": -1, "description": "Taking true branch", "snippet": "114.      */\n115.     public static boolean isEmpty(String str) {\n116. >         return str == null || str.length() == 0;\n117.     }\n118.     \n"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 117, "column_number": -1, "description": "return from a call to boolean StringUtils.isEmpty(String)", "snippet": "114.      */\n115.     public static boolean isEmpty(String str) {\n116. >         return str == null || str.length() == 0;\n117.     }\n118.     \n"}, {"level": 1, "filename": "naming/src/main/java/com/alibaba/nacos/naming/core/v2/client/factory/ClientFactoryHolder.java", "line_number": 61, "column_number": -1, "description": "Taking false branch", "snippet": "58.      */\n59.     public ClientFactory findClientFactory(String type) {\n60. >         if (StringUtils.isEmpty(type) || !clientFactories.containsKey(type)) {\n61.             return clientFactories.get(ClientConstants.DEFAULT_FACTORY);\n62.         }\n"}, {"level": 1, "filename": "naming/src/main/java/com/alibaba/nacos/naming/core/v2/client/factory/ClientFactoryHolder.java", "line_number": 62, "column_number": -1, "description": "", "snippet": "59.     public ClientFactory findClientFactory(String type) {\n60.         if (StringUtils.isEmpty(type) || !clientFactories.containsKey(type)) {\n61. >             return clientFactories.get(ClientConstants.DEFAULT_FACTORY);\n62.         }\n63.         return clientFactories.get(type);\n"}, {"level": 1, "filename": "naming/src/main/java/com/alibaba/nacos/naming/core/v2/client/factory/ClientFactoryHolder.java", "line_number": 64, "column_number": -1, "description": "return from a call to ClientFactory ClientFactoryHolder.findClientFactory(String)", "snippet": "61.             return clientFactories.get(ClientConstants.DEFAULT_FACTORY);\n62.         }\n63. >         return clientFactories.get(type);\n64.     }\n65. }\n"}, {"level": 0, "filename": "naming/src/main/java/com/alibaba/nacos/naming/core/v2/client/manager/impl/ConnectionBasedClientManager.java", "line_number": 74, "column_number": -1, "description": "", "snippet": "71.         String type = attributes.getClientAttribute(ClientConstants.CONNECTION_TYPE);\n72.         ClientFactory clientFactory = ClientFactoryHolder.getInstance().findClientFactory(type);\n73. >         return clientConnected(clientFactory.newClient(clientId, attributes));\n74.     }\n75.     \n"}]}, {"url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/address/src/main/java/com/alibaba/nacos/address/component/AddressServerGeneratorManager.java", "rawCode": "/*\n * Copyright 1999-2018 Alibaba Group Holding Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.alibaba.nacos.address.component;\n\nimport com.alibaba.nacos.address.constant.AddressServerConstants;\nimport com.alibaba.nacos.api.common.Constants;\nimport com.alibaba.nacos.api.naming.pojo.Instance;\nimport com.alibaba.nacos.common.utils.InternetAddressUtil;\nimport com.alibaba.nacos.common.utils.StringUtils;\nimport org.springframework.stereotype.Component;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\n/**\n * will generator some result by the input parameter.\n *\n * @author pbting\n * @date 2019-07-01 8:53 PM\n * @since 1.1.0\n */\n@Component\npublic class AddressServerGeneratorManager {\n    \n    /**\n     * Generate product name.\n     *\n     * @param name name\n     * @return product\n     */\n    public String generateProductName(String name) {\n        \n        if (StringUtils.isBlank(name) || AddressServerConstants.DEFAULT_PRODUCT.equals(name)) {\n            \n            return AddressServerConstants.ALIWARE_NACOS_DEFAULT_PRODUCT_NAME;\n        }\n        \n        return String.format(AddressServerConstants.ALIWARE_NACOS_PRODUCT_DOM_TEMPLATE, name);\n    }\n    \n    /**\n     * Note: if the parameter inputted is empty then will return the empty list.\n     *\n     * @param serviceName service name\n     * @param clusterName cluster name\n     * @param ipArray array of ips\n     * @return instance list\n     */\n    public List<Instance> generateInstancesByIps(String serviceName, String rawProductName, String clusterName,\n            String[] ipArray) {\n        if (StringUtils.isEmpty(serviceName) || StringUtils.isEmpty(clusterName) || ipArray == null\n                || ipArray.length == 0) {\n            return Collections.emptyList();\n        }\n        \n        List<Instance> instanceList = new ArrayList<>(ipArray.length);\n        for (String ip : ipArray) {\n            String[] ipAndPort = generateIpAndPort(ip);\n            Instance instance = new Instance();\n            instance.setIp(ipAndPort[0]);\n            instance.setPort(Integer.parseInt(ipAndPort[1]));\n            instance.setClusterName(clusterName);\n            instance.setServiceName(serviceName);\n            instance.setEphemeral(false);\n            instance.getMetadata().put(\"app\", rawProductName);\n            instance.getMetadata().put(\"tenant\", Constants.DEFAULT_NAMESPACE_ID);\n            instanceList.add(instance);\n        }\n        \n        return instanceList;\n    }\n    \n    private String[] generateIpAndPort(String ip) {\n        String[] result = InternetAddressUtil.splitIPPortStr(ip);\n        if (result.length != InternetAddressUtil.SPLIT_IP_PORT_RESULT_LENGTH) {\n            return new String[] {result[0], String.valueOf(AddressServerConstants.DEFAULT_SERVER_PORT)};\n        }\n        return result;\n    }\n    \n    /**\n     * Generate response ips.\n     *\n     * @param instanceList a instance set will generate string response to client.\n     * @return the result of response to client\n     */\n    public String generateResponseIps(List<com.alibaba.nacos.api.naming.pojo.Instance> instanceList) {\n        \n        StringBuilder ips = new StringBuilder();\n        instanceList.forEach(instance -> {\n            ips.append(instance.getIp()).append(':').append(instance.getPort());\n            ips.append('\\n');\n        });\n        \n        return ips.toString();\n    }\n    \n    /**\n     * Generate nacos service name.\n     *\n     * @param rawServiceName the raw service name will not contains the {@link Constants#DEFAULT_GROUP}.\n     * @return the nacos service name\n     */\n    public String generateNacosServiceName(String rawServiceName) {\n        \n        if (rawServiceName.contains(Constants.DEFAULT_GROUP)) {\n            return rawServiceName;\n        }\n        \n        return Constants.DEFAULT_GROUP + AddressServerConstants.GROUP_SERVICE_NAME_SEP + rawServiceName;\n    }\n}\n", "methodName": "com.alibaba.nacos.address.component.AddressServerGeneratorManager.generateInstancesByIps(java.lang.CharSequence,java.lang.String,java.lang.String,java.lang.String[]):java.util.List", "exampleID": 52, "dataset": "infer", "filepath": "address/src/main/java/com/alibaba/nacos/address/component/AddressServerGeneratorManager.java", "line": 80, "sink": "getMetadata(instance)", "source": "getMetadata(instance)", "sourceLine": 80, "qualifier": "$$getMetadata(instance)/$ could return null, and is @@dereferenced/@", "steps": [{"line": 148, "source": "getMetadata(instance)", "filepath": "api/src/main/java/com/alibaba/nacos/api/naming/pojo/Instance.java", "methodName": "Instance.getMetadata", "exampleID": 53}], "line_number": 80, "records": [{"level": 1, "filename": "api/src/main/java/com/alibaba/nacos/api/naming/pojo/Instance.java", "line_number": 148, "column_number": -1, "description": "start of procedure getMetadata()", "snippet": "    public Map<String, String> getMetadata() {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/api/src/main/java/com/alibaba/nacos/api/naming/pojo/Instance.java", "methodName": "getMetadata"}, {"level": 1, "filename": "api/src/main/java/com/alibaba/nacos/api/naming/pojo/Instance.java", "line_number": 149, "column_number": -1, "description": "return from a call to Map Instance.getMetadata()", "snippet": "        return this.metadata;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/api/src/main/java/com/alibaba/nacos/api/naming/pojo/Instance.java", "methodName": "getMetadata"}], "combined_records": [{"level": 1, "filename": "api/src/main/java/com/alibaba/nacos/api/naming/pojo/Instance.java", "line_number": 149, "column_number": -1, "description": "start of procedure getMetadata()", "snippet": "145.    \n146.    public Map<String, String> getMetadata() {\n147.>         return this.metadata;\n148.    }\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/api/src/main/java/com/alibaba/nacos/api/naming/pojo/Instance.java", "methodName": "getMetadata", "line_numbers": [148, 149]}], "infer_explore": [{"level": 0, "filename": "address/src/main/java/com/alibaba/nacos/address/component/AddressServerGeneratorManager.java", "line_number": 64, "column_number": -1, "description": "start of procedure generateInstancesByIps(...)", "snippet": "61.      * @return instance list\n62.      */\n63. >     public List<Instance> generateInstancesByIps(String serviceName, String rawProductName, String clusterName,\n64.             String[] ipArray) {\n65.         if (StringUtils.isEmpty(serviceName) || StringUtils.isEmpty(clusterName) || ipArray == null\n"}, {"level": 0, "filename": "address/src/main/java/com/alibaba/nacos/address/component/AddressServerGeneratorManager.java", "line_number": 66, "column_number": -1, "description": "", "snippet": "63.     public List<Instance> generateInstancesByIps(String serviceName, String rawProductName, String clusterName,\n64.             String[] ipArray) {\n65. >         if (StringUtils.isEmpty(serviceName) || StringUtils.isEmpty(clusterName) || ipArray == null\n66.                 || ipArray.length == 0) {\n67.             return Collections.emptyList();\n"}, {"level": 1, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 116, "column_number": -1, "description": "start of procedure isEmpty(...)", "snippet": "113.      * @return {@code true} if the str is empty or null\n114.      */\n115. >     public static boolean isEmpty(String str) {\n116.         return str == null || str.length() == 0;\n117.     }\n"}, {"level": 1, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 117, "column_number": -1, "description": "Taking true branch", "snippet": "114.      */\n115.     public static boolean isEmpty(String str) {\n116. >         return str == null || str.length() == 0;\n117.     }\n118.     \n"}, {"level": 1, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 117, "column_number": -1, "description": "Taking false branch", "snippet": "114.      */\n115.     public static boolean isEmpty(String str) {\n116. >         return str == null || str.length() == 0;\n117.     }\n118.     \n"}, {"level": 1, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 117, "column_number": -1, "description": "return from a call to boolean StringUtils.isEmpty(String)", "snippet": "114.      */\n115.     public static boolean isEmpty(String str) {\n116. >         return str == null || str.length() == 0;\n117.     }\n118.     \n"}, {"level": 0, "filename": "address/src/main/java/com/alibaba/nacos/address/component/AddressServerGeneratorManager.java", "line_number": 66, "column_number": -1, "description": "Taking true branch", "snippet": "63.     public List<Instance> generateInstancesByIps(String serviceName, String rawProductName, String clusterName,\n64.             String[] ipArray) {\n65. >         if (StringUtils.isEmpty(serviceName) || StringUtils.isEmpty(clusterName) || ipArray == null\n66.                 || ipArray.length == 0) {\n67.             return Collections.emptyList();\n"}, {"level": 1, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 116, "column_number": -1, "description": "start of procedure isEmpty(...)", "snippet": "113.      * @return {@code true} if the str is empty or null\n114.      */\n115. >     public static boolean isEmpty(String str) {\n116.         return str == null || str.length() == 0;\n117.     }\n"}, {"level": 1, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 117, "column_number": -1, "description": "Taking true branch", "snippet": "114.      */\n115.     public static boolean isEmpty(String str) {\n116. >         return str == null || str.length() == 0;\n117.     }\n118.     \n"}, {"level": 1, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 117, "column_number": -1, "description": "Taking false branch", "snippet": "114.      */\n115.     public static boolean isEmpty(String str) {\n116. >         return str == null || str.length() == 0;\n117.     }\n118.     \n"}, {"level": 1, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 117, "column_number": -1, "description": "return from a call to boolean StringUtils.isEmpty(String)", "snippet": "114.      */\n115.     public static boolean isEmpty(String str) {\n116. >         return str == null || str.length() == 0;\n117.     }\n118.     \n"}, {"level": 0, "filename": "address/src/main/java/com/alibaba/nacos/address/component/AddressServerGeneratorManager.java", "line_number": 66, "column_number": -1, "description": "Taking true branch", "snippet": "63.     public List<Instance> generateInstancesByIps(String serviceName, String rawProductName, String clusterName,\n64.             String[] ipArray) {\n65. >         if (StringUtils.isEmpty(serviceName) || StringUtils.isEmpty(clusterName) || ipArray == null\n66.                 || ipArray.length == 0) {\n67.             return Collections.emptyList();\n"}, {"level": 0, "filename": "address/src/main/java/com/alibaba/nacos/address/component/AddressServerGeneratorManager.java", "line_number": 66, "column_number": -1, "description": "Taking true branch", "snippet": "63.     public List<Instance> generateInstancesByIps(String serviceName, String rawProductName, String clusterName,\n64.             String[] ipArray) {\n65. >         if (StringUtils.isEmpty(serviceName) || StringUtils.isEmpty(clusterName) || ipArray == null\n66.                 || ipArray.length == 0) {\n67.             return Collections.emptyList();\n"}, {"level": 0, "filename": "address/src/main/java/com/alibaba/nacos/address/component/AddressServerGeneratorManager.java", "line_number": 66, "column_number": -1, "description": "Taking false branch", "snippet": "63.     public List<Instance> generateInstancesByIps(String serviceName, String rawProductName, String clusterName,\n64.             String[] ipArray) {\n65. >         if (StringUtils.isEmpty(serviceName) || StringUtils.isEmpty(clusterName) || ipArray == null\n66.                 || ipArray.length == 0) {\n67.             return Collections.emptyList();\n"}, {"level": 0, "filename": "address/src/main/java/com/alibaba/nacos/address/component/AddressServerGeneratorManager.java", "line_number": 71, "column_number": -1, "description": "Skipping ArrayList(...): unknown method", "snippet": "68.         }\n69.         \n70. >         List<Instance> instanceList = new ArrayList<>(ipArray.length);\n71.         for (String ip : ipArray) {\n72.             String[] ipAndPort = generateIpAndPort(ip);\n"}, {"level": 0, "filename": "address/src/main/java/com/alibaba/nacos/address/component/AddressServerGeneratorManager.java", "line_number": 72, "column_number": -1, "description": "Taking true branch", "snippet": "69.         \n70.         List<Instance> instanceList = new ArrayList<>(ipArray.length);\n71. >         for (String ip : ipArray) {\n72.             String[] ipAndPort = generateIpAndPort(ip);\n73.             Instance instance = new Instance();\n"}, {"level": 0, "filename": "address/src/main/java/com/alibaba/nacos/address/component/AddressServerGeneratorManager.java", "line_number": 73, "column_number": -1, "description": "", "snippet": "70.         List<Instance> instanceList = new ArrayList<>(ipArray.length);\n71.         for (String ip : ipArray) {\n72. >             String[] ipAndPort = generateIpAndPort(ip);\n73.             Instance instance = new Instance();\n74.             instance.setIp(ipAndPort[0]);\n"}, {"level": 1, "filename": "address/src/main/java/com/alibaba/nacos/address/component/AddressServerGeneratorManager.java", "line_number": 88, "column_number": -1, "description": "start of procedure generateIpAndPort(...)", "snippet": "85.     }\n86.     \n87. >     private String[] generateIpAndPort(String ip) {\n88.         String[] result = InternetAddressUtil.splitIPPortStr(ip);\n89.         if (result.length != InternetAddressUtil.SPLIT_IP_PORT_RESULT_LENGTH) {\n"}, {"level": 1, "filename": "address/src/main/java/com/alibaba/nacos/address/component/AddressServerGeneratorManager.java", "line_number": 89, "column_number": -1, "description": "", "snippet": "86.     \n87.     private String[] generateIpAndPort(String ip) {\n88. >         String[] result = InternetAddressUtil.splitIPPortStr(ip);\n89.         if (result.length != InternetAddressUtil.SPLIT_IP_PORT_RESULT_LENGTH) {\n90.             return new String[] {result[0], String.valueOf(AddressServerConstants.DEFAULT_SERVER_PORT)};\n"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/InternetAddressUtil.java", "line_number": 125, "column_number": -1, "description": "start of procedure splitIPPortStr(...)", "snippet": "122.      * @return java.lang.String[]\n123.      */\n124. >     public static String[] splitIPPortStr(String str) {\n125.         if (StringUtils.isBlank(str)) {\n126.             throw new IllegalArgumentException(\"ip and port string cannot be empty!\");\n"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/InternetAddressUtil.java", "line_number": 126, "column_number": -1, "description": "", "snippet": "123.      */\n124.     public static String[] splitIPPortStr(String str) {\n125. >         if (StringUtils.isBlank(str)) {\n126.             throw new IllegalArgumentException(\"ip and port string cannot be empty!\");\n127.         }\n"}, {"level": 3, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 77, "column_number": -1, "description": "start of procedure isBlank(...)", "snippet": "74.      * @return {@code true} if the string is empty and null and whitespace\n75.      */\n76. >     public static boolean isBlank(final CharSequence cs) {\n77.         int strLen;\n78.         if (cs == null || (strLen = cs.length()) == 0) {\n"}, {"level": 3, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 79, "column_number": -1, "description": "Taking true branch", "snippet": "76.     public static boolean isBlank(final CharSequence cs) {\n77.         int strLen;\n78. >         if (cs == null || (strLen = cs.length()) == 0) {\n79.             return true;\n80.         }\n"}, {"level": 3, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 79, "column_number": -1, "description": "Taking false branch", "snippet": "76.     public static boolean isBlank(final CharSequence cs) {\n77.         int strLen;\n78. >         if (cs == null || (strLen = cs.length()) == 0) {\n79.             return true;\n80.         }\n"}, {"level": 3, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 82, "column_number": -1, "description": "Taking true branch", "snippet": "79.             return true;\n80.         }\n81. >         for (int i = 0; i < strLen; i++) {\n82.             if (!Character.isWhitespace(cs.charAt(i))) {\n83.                 return false;\n"}, {"level": 3, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 83, "column_number": -1, "description": "Taking true branch", "snippet": "80.         }\n81.         for (int i = 0; i < strLen; i++) {\n82. >             if (!Character.isWhitespace(cs.charAt(i))) {\n83.                 return false;\n84.             }\n"}, {"level": 3, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 84, "column_number": -1, "description": "", "snippet": "81.         for (int i = 0; i < strLen; i++) {\n82.             if (!Character.isWhitespace(cs.charAt(i))) {\n83. >                 return false;\n84.             }\n85.         }\n"}, {"level": 3, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 87, "column_number": -1, "description": "return from a call to boolean StringUtils.isBlank(CharSequence)", "snippet": "84.             }\n85.         }\n86. >         return true;\n87.     }\n88.     \n"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/InternetAddressUtil.java", "line_number": 126, "column_number": -1, "description": "Taking false branch", "snippet": "123.      */\n124.     public static String[] splitIPPortStr(String str) {\n125. >         if (StringUtils.isBlank(str)) {\n126.             throw new IllegalArgumentException(\"ip and port string cannot be empty!\");\n127.         }\n"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/InternetAddressUtil.java", "line_number": 130, "column_number": -1, "description": "Taking false branch", "snippet": "127.         }\n128.         String[] serverAddrArr;\n129. >         if (str.startsWith(IPV6_START_MARK) && StringUtils.containsIgnoreCase(str, IPV6_END_MARK)) {\n130.             if (str.endsWith(IPV6_END_MARK)) {\n131.                 serverAddrArr = new String[1];\n"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/InternetAddressUtil.java", "line_number": 140, "column_number": -1, "description": "Skipping split(...): unknown method", "snippet": "137.             }\n138.         } else {\n139. >             serverAddrArr = str.split(IP_PORT_SPLITER);\n140.         }\n141.         return serverAddrArr;\n"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/InternetAddressUtil.java", "line_number": 142, "column_number": -1, "description": "return from a call to String[] InternetAddressUtil.splitIPPortStr(CharSequence)", "snippet": "139.             serverAddrArr = str.split(IP_PORT_SPLITER);\n140.         }\n141. >         return serverAddrArr;\n142.     }\n143.     \n"}, {"level": 1, "filename": "address/src/main/java/com/alibaba/nacos/address/component/AddressServerGeneratorManager.java", "line_number": 90, "column_number": -1, "description": "Taking true branch", "snippet": "87.     private String[] generateIpAndPort(String ip) {\n88.         String[] result = InternetAddressUtil.splitIPPortStr(ip);\n89. >         if (result.length != InternetAddressUtil.SPLIT_IP_PORT_RESULT_LENGTH) {\n90.             return new String[] {result[0], String.valueOf(AddressServerConstants.DEFAULT_SERVER_PORT)};\n91.         }\n"}, {"level": 1, "filename": "address/src/main/java/com/alibaba/nacos/address/component/AddressServerGeneratorManager.java", "line_number": 91, "column_number": -1, "description": "", "snippet": "88.         String[] result = InternetAddressUtil.splitIPPortStr(ip);\n89.         if (result.length != InternetAddressUtil.SPLIT_IP_PORT_RESULT_LENGTH) {\n90. >             return new String[] {result[0], String.valueOf(AddressServerConstants.DEFAULT_SERVER_PORT)};\n91.         }\n92.         return result;\n"}, {"level": 1, "filename": "address/src/main/java/com/alibaba/nacos/address/component/AddressServerGeneratorManager.java", "line_number": 93, "column_number": -1, "description": "return from a call to String[] AddressServerGeneratorManager.generateIpAndPort(String)", "snippet": "90.             return new String[] {result[0], String.valueOf(AddressServerConstants.DEFAULT_SERVER_PORT)};\n91.         }\n92. >         return result;\n93.     }\n94.     \n"}, {"level": 0, "filename": "address/src/main/java/com/alibaba/nacos/address/component/AddressServerGeneratorManager.java", "line_number": 74, "column_number": -1, "description": "Skipping Instance(): empty list of specs", "snippet": "71.         for (String ip : ipArray) {\n72.             String[] ipAndPort = generateIpAndPort(ip);\n73. >             Instance instance = new Instance();\n74.             instance.setIp(ipAndPort[0]);\n75.             instance.setPort(Integer.parseInt(ipAndPort[1]));\n"}, {"level": 1, "filename": "api/src/main/java/com/alibaba/nacos/api/naming/pojo/Instance.java", "line_number": 36, "column_number": -1, "description": "Definition of Instance()", "snippet": "33.  */\n34. @JsonInclude(Include.NON_NULL)\n35. > public class Instance implements Serializable {\n36.     \n37.     private static final long serialVersionUID = -742906310567291979L;\n"}, {"level": 0, "filename": "address/src/main/java/com/alibaba/nacos/address/component/AddressServerGeneratorManager.java", "line_number": 75, "column_number": -1, "description": "", "snippet": "72.             String[] ipAndPort = generateIpAndPort(ip);\n73.             Instance instance = new Instance();\n74. >             instance.setIp(ipAndPort[0]);\n75.             instance.setPort(Integer.parseInt(ipAndPort[1]));\n76.             instance.setClusterName(clusterName);\n"}, {"level": 1, "filename": "api/src/main/java/com/alibaba/nacos/api/naming/pojo/Instance.java", "line_number": 104, "column_number": -1, "description": "start of procedure setIp(...)", "snippet": "101.     }\n102.     \n103. >     public void setIp(final String ip) {\n104.         this.ip = ip;\n105.     }\n"}, {"level": 1, "filename": "api/src/main/java/com/alibaba/nacos/api/naming/pojo/Instance.java", "line_number": 105, "column_number": -1, "description": "", "snippet": "102.     \n103.     public void setIp(final String ip) {\n104. >         this.ip = ip;\n105.     }\n106.     \n"}, {"level": 1, "filename": "api/src/main/java/com/alibaba/nacos/api/naming/pojo/Instance.java", "line_number": 106, "column_number": -1, "description": "return from a call to void Instance.setIp(String)", "snippet": "103.     public void setIp(final String ip) {\n104.         this.ip = ip;\n105. >     }\n106.     \n107.     public int getPort() {\n"}, {"level": 0, "filename": "address/src/main/java/com/alibaba/nacos/address/component/AddressServerGeneratorManager.java", "line_number": 76, "column_number": -1, "description": "", "snippet": "73.             Instance instance = new Instance();\n74.             instance.setIp(ipAndPort[0]);\n75. >             instance.setPort(Integer.parseInt(ipAndPort[1]));\n76.             instance.setClusterName(clusterName);\n77.             instance.setServiceName(serviceName);\n"}, {"level": 1, "filename": "api/src/main/java/com/alibaba/nacos/api/naming/pojo/Instance.java", "line_number": 112, "column_number": -1, "description": "start of procedure setPort(...)", "snippet": "109.     }\n110.     \n111. >     public void setPort(final int port) {\n112.         this.port = port;\n113.     }\n"}, {"level": 1, "filename": "api/src/main/java/com/alibaba/nacos/api/naming/pojo/Instance.java", "line_number": 113, "column_number": -1, "description": "", "snippet": "110.     \n111.     public void setPort(final int port) {\n112. >         this.port = port;\n113.     }\n114.     \n"}, {"level": 1, "filename": "api/src/main/java/com/alibaba/nacos/api/naming/pojo/Instance.java", "line_number": 114, "column_number": -1, "description": "return from a call to void Instance.setPort(int)", "snippet": "111.     public void setPort(final int port) {\n112.         this.port = port;\n113. >     }\n114.     \n115.     public double getWeight() {\n"}, {"level": 0, "filename": "address/src/main/java/com/alibaba/nacos/address/component/AddressServerGeneratorManager.java", "line_number": 77, "column_number": -1, "description": "", "snippet": "74.             instance.setIp(ipAndPort[0]);\n75.             instance.setPort(Integer.parseInt(ipAndPort[1]));\n76. >             instance.setClusterName(clusterName);\n77.             instance.setServiceName(serviceName);\n78.             instance.setEphemeral(false);\n"}, {"level": 1, "filename": "api/src/main/java/com/alibaba/nacos/api/naming/pojo/Instance.java", "line_number": 136, "column_number": -1, "description": "start of procedure setClusterName(...)", "snippet": "133.     }\n134.     \n135. >     public void setClusterName(final String clusterName) {\n136.         this.clusterName = clusterName;\n137.     }\n"}, {"level": 1, "filename": "api/src/main/java/com/alibaba/nacos/api/naming/pojo/Instance.java", "line_number": 137, "column_number": -1, "description": "", "snippet": "134.     \n135.     public void setClusterName(final String clusterName) {\n136. >         this.clusterName = clusterName;\n137.     }\n138.     \n"}, {"level": 1, "filename": "api/src/main/java/com/alibaba/nacos/api/naming/pojo/Instance.java", "line_number": 138, "column_number": -1, "description": "return from a call to void Instance.setClusterName(String)", "snippet": "135.     public void setClusterName(final String clusterName) {\n136.         this.clusterName = clusterName;\n137. >     }\n138.     \n139.     public String getServiceName() {\n"}, {"level": 0, "filename": "address/src/main/java/com/alibaba/nacos/address/component/AddressServerGeneratorManager.java", "line_number": 78, "column_number": -1, "description": "", "snippet": "75.             instance.setPort(Integer.parseInt(ipAndPort[1]));\n76.             instance.setClusterName(clusterName);\n77. >             instance.setServiceName(serviceName);\n78.             instance.setEphemeral(false);\n79.             instance.getMetadata().put(\"app\", rawProductName);\n"}, {"level": 1, "filename": "api/src/main/java/com/alibaba/nacos/api/naming/pojo/Instance.java", "line_number": 144, "column_number": -1, "description": "start of procedure setServiceName(...)", "snippet": "141.     }\n142.     \n143. >     public void setServiceName(final String serviceName) {\n144.         this.serviceName = serviceName;\n145.     }\n"}, {"level": 1, "filename": "api/src/main/java/com/alibaba/nacos/api/naming/pojo/Instance.java", "line_number": 145, "column_number": -1, "description": "", "snippet": "142.     \n143.     public void setServiceName(final String serviceName) {\n144. >         this.serviceName = serviceName;\n145.     }\n146.     \n"}, {"level": 1, "filename": "api/src/main/java/com/alibaba/nacos/api/naming/pojo/Instance.java", "line_number": 146, "column_number": -1, "description": "return from a call to void Instance.setServiceName(String)", "snippet": "143.     public void setServiceName(final String serviceName) {\n144.         this.serviceName = serviceName;\n145. >     }\n146.     \n147.     public Map<String, String> getMetadata() {\n"}, {"level": 0, "filename": "address/src/main/java/com/alibaba/nacos/address/component/AddressServerGeneratorManager.java", "line_number": 79, "column_number": -1, "description": "", "snippet": "76.             instance.setClusterName(clusterName);\n77.             instance.setServiceName(serviceName);\n78. >             instance.setEphemeral(false);\n79.             instance.getMetadata().put(\"app\", rawProductName);\n80.             instance.getMetadata().put(\"tenant\", Constants.DEFAULT_NAMESPACE_ID);\n"}, {"level": 1, "filename": "api/src/main/java/com/alibaba/nacos/api/naming/pojo/Instance.java", "line_number": 181, "column_number": -1, "description": "start of procedure setEphemeral(...)", "snippet": "178.     }\n179.     \n180. >     public void setEphemeral(final boolean ephemeral) {\n181.         this.ephemeral = ephemeral;\n182.     }\n"}, {"level": 1, "filename": "api/src/main/java/com/alibaba/nacos/api/naming/pojo/Instance.java", "line_number": 182, "column_number": -1, "description": "", "snippet": "179.     \n180.     public void setEphemeral(final boolean ephemeral) {\n181. >         this.ephemeral = ephemeral;\n182.     }\n183.     \n"}, {"level": 1, "filename": "api/src/main/java/com/alibaba/nacos/api/naming/pojo/Instance.java", "line_number": 183, "column_number": -1, "description": "return from a call to void Instance.setEphemeral(boolean)", "snippet": "180.     public void setEphemeral(final boolean ephemeral) {\n181.         this.ephemeral = ephemeral;\n182. >     }\n183.     \n184.     @Override\n"}, {"level": 0, "filename": "address/src/main/java/com/alibaba/nacos/address/component/AddressServerGeneratorManager.java", "line_number": 80, "column_number": -1, "description": "", "snippet": "77.             instance.setServiceName(serviceName);\n78.             instance.setEphemeral(false);\n79. >             instance.getMetadata().put(\"app\", rawProductName);\n80.             instance.getMetadata().put(\"tenant\", Constants.DEFAULT_NAMESPACE_ID);\n81.             instanceList.add(instance);\n"}, {"level": 1, "filename": "api/src/main/java/com/alibaba/nacos/api/naming/pojo/Instance.java", "line_number": 148, "column_number": -1, "description": "start of procedure getMetadata()", "snippet": "145.     }\n146.     \n147. >     public Map<String, String> getMetadata() {\n148.         return this.metadata;\n149.     }\n"}, {"level": 1, "filename": "api/src/main/java/com/alibaba/nacos/api/naming/pojo/Instance.java", "line_number": 149, "column_number": -1, "description": "return from a call to Map Instance.getMetadata()", "snippet": "146.     \n147.     public Map<String, String> getMetadata() {\n148. >         return this.metadata;\n149.     }\n150.     \n"}, {"level": 0, "filename": "address/src/main/java/com/alibaba/nacos/address/component/AddressServerGeneratorManager.java", "line_number": 80, "column_number": -1, "description": "", "snippet": "77.             instance.setServiceName(serviceName);\n78.             instance.setEphemeral(false);\n79. >             instance.getMetadata().put(\"app\", rawProductName);\n80.             instance.getMetadata().put(\"tenant\", Constants.DEFAULT_NAMESPACE_ID);\n81.             instanceList.add(instance);\n"}]}, {"url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/auth/impl/process/HttpLoginProcessor.java", "rawCode": "/*\n * Copyright 1999-2021 Alibaba Group Holding Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.alibaba.nacos.client.auth.impl.process;\n\nimport com.alibaba.nacos.api.PropertyKeyConst;\nimport com.alibaba.nacos.api.common.Constants;\nimport com.alibaba.nacos.client.auth.impl.NacosAuthLoginConstant;\nimport com.alibaba.nacos.client.utils.ContextPathUtil;\nimport com.alibaba.nacos.client.utils.ParamUtil;\nimport com.alibaba.nacos.common.http.HttpRestResult;\nimport com.alibaba.nacos.common.http.client.NacosRestTemplate;\nimport com.alibaba.nacos.common.http.param.Header;\nimport com.alibaba.nacos.common.http.param.Query;\nimport com.alibaba.nacos.common.utils.InternetAddressUtil;\nimport com.alibaba.nacos.common.utils.JacksonUtils;\nimport com.alibaba.nacos.common.utils.StringUtils;\nimport com.alibaba.nacos.plugin.auth.api.LoginIdentityContext;\nimport com.fasterxml.jackson.databind.JsonNode;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Properties;\n\nimport static com.alibaba.nacos.client.naming.utils.UtilAndComs.webContext;\nimport static com.alibaba.nacos.common.constant.RequestUrlConstants.HTTPS_PREFIX;\nimport static com.alibaba.nacos.common.constant.RequestUrlConstants.HTTP_PREFIX;\n\n/**\n * Login processor for Http.\n *\n * @author Nacos\n */\npublic class HttpLoginProcessor implements LoginProcessor {\n    \n    private static final Logger SECURITY_LOGGER = LoggerFactory.getLogger(HttpLoginProcessor.class);\n    \n    private static final String LOGIN_URL = \"/v1/auth/users/login\";\n    \n    private final NacosRestTemplate nacosRestTemplate;\n    \n    public HttpLoginProcessor(NacosRestTemplate nacosRestTemplate) {\n        this.nacosRestTemplate = nacosRestTemplate;\n    }\n    \n    @Override\n    public LoginIdentityContext getResponse(Properties properties) {\n        \n        String contextPath = ContextPathUtil.normalizeContextPath(\n                properties.getProperty(PropertyKeyConst.CONTEXT_PATH, webContext));\n        String server = properties.getProperty(NacosAuthLoginConstant.SERVER, StringUtils.EMPTY);\n        \n        if (!server.startsWith(HTTPS_PREFIX) && !server.startsWith(HTTP_PREFIX)) {\n            if (!InternetAddressUtil.containsPort(server)) {\n                server = server + InternetAddressUtil.IP_PORT_SPLITER + ParamUtil.getDefaultServerPort();\n            }\n            server = HTTP_PREFIX + server;\n        }\n        \n        String url = server + contextPath + LOGIN_URL;\n        \n        Map<String, String> params = new HashMap<>(2);\n        Map<String, String> bodyMap = new HashMap<>(2);\n        params.put(PropertyKeyConst.USERNAME, properties.getProperty(PropertyKeyConst.USERNAME, StringUtils.EMPTY));\n        bodyMap.put(PropertyKeyConst.PASSWORD, properties.getProperty(PropertyKeyConst.PASSWORD, StringUtils.EMPTY));\n        try {\n            HttpRestResult<String> restResult = nacosRestTemplate.postForm(url, Header.EMPTY,\n                    Query.newInstance().initParams(params), bodyMap, String.class);\n            if (!restResult.ok()) {\n                SECURITY_LOGGER.error(\"login failed: {}\", JacksonUtils.toJson(restResult));\n                return null;\n            }\n            JsonNode obj = JacksonUtils.toObj(restResult.getData());\n            \n            LoginIdentityContext loginIdentityContext = new LoginIdentityContext();\n            \n            if (obj.has(Constants.ACCESS_TOKEN)) {\n                loginIdentityContext.setParameter(NacosAuthLoginConstant.ACCESSTOKEN,\n                        obj.get(Constants.ACCESS_TOKEN).asText());\n                loginIdentityContext.setParameter(NacosAuthLoginConstant.TOKENTTL,\n                        obj.get(Constants.TOKEN_TTL).asText());\n            } else {\n                SECURITY_LOGGER.info(\"[NacosClientAuthServiceImpl] ACCESS_TOKEN is empty from response\");\n            }\n            return loginIdentityContext;\n        } catch (Exception e) {\n            SECURITY_LOGGER.error(\"[NacosClientAuthServiceImpl] login http request failed\"\n                    + \" url: {}, params: {}, bodyMap: {}, errorMsg: {}\", url, params, bodyMap, e.getMessage());\n            return null;\n        }\n    }\n    \n}\n", "methodName": "com.alibaba.nacos.client.auth.impl.process.HttpLoginProcessor.getResponse(java.util.Properties):com.alibaba.nacos.plugin.auth.api.LoginIdentityContext", "exampleID": 54, "dataset": "infer", "filepath": "client/src/main/java/com/alibaba/nacos/client/auth/impl/process/HttpLoginProcessor.java", "line": 68, "sink": "server", "source": "server", "sourceLine": 66, "qualifier": "$$server/$ could be null, and is @@dereferenced/@", "steps": [{"line": 66, "source": "server", "filepath": "client/src/main/java/com/alibaba/nacos/client/auth/impl/process/HttpLoginProcessor.java", "methodName": "com.alibaba.nacos.client.auth.impl.process.HttpLoginProcessor.getResponse(java.util.Properties):com.alibaba.nacos.plugin.auth.api.LoginIdentityContext", "exampleID": 55}], "line_number": 66, "records": [], "combined_records": [], "infer_explore": [{"level": 0, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/impl/process/HttpLoginProcessor.java", "line_number": 62, "column_number": -1, "description": "start of procedure getResponse(...)", "snippet": "59.     \n60.     @Override\n61. >     public LoginIdentityContext getResponse(Properties properties) {\n62.         \n63.         String contextPath = ContextPathUtil.normalizeContextPath(\n"}, {"level": 0, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/impl/process/HttpLoginProcessor.java", "line_number": 65, "column_number": -1, "description": "Skipping getProperty(...): unknown method", "snippet": "62.         \n63.         String contextPath = ContextPathUtil.normalizeContextPath(\n64. >                 properties.getProperty(PropertyKeyConst.CONTEXT_PATH, webContext));\n65.         String server = properties.getProperty(NacosAuthLoginConstant.SERVER, StringUtils.EMPTY);\n66.         \n"}, {"level": 0, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/impl/process/HttpLoginProcessor.java", "line_number": 64, "column_number": -1, "description": "", "snippet": "61.     public LoginIdentityContext getResponse(Properties properties) {\n62.         \n63. >         String contextPath = ContextPathUtil.normalizeContextPath(\n64.                 properties.getProperty(PropertyKeyConst.CONTEXT_PATH, webContext));\n65.         String server = properties.getProperty(NacosAuthLoginConstant.SERVER, StringUtils.EMPTY);\n"}, {"level": 1, "filename": "client/src/main/java/com/alibaba/nacos/client/utils/ContextPathUtil.java", "line_number": 36, "column_number": -1, "description": "start of procedure normalizeContextPath(...)", "snippet": "33.      * @return normalized context path\n34.      */\n35. >     public static String normalizeContextPath(String contextPath) {\n36.         if (StringUtils.isBlank(contextPath) || ROOT_WEB_CONTEXT_PATH.equals(contextPath)) {\n37.             return StringUtils.EMPTY;\n"}, {"level": 1, "filename": "client/src/main/java/com/alibaba/nacos/client/utils/ContextPathUtil.java", "line_number": 37, "column_number": -1, "description": "", "snippet": "34.      */\n35.     public static String normalizeContextPath(String contextPath) {\n36. >         if (StringUtils.isBlank(contextPath) || ROOT_WEB_CONTEXT_PATH.equals(contextPath)) {\n37.             return StringUtils.EMPTY;\n38.         }\n"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 77, "column_number": -1, "description": "start of procedure isBlank(...)", "snippet": "74.      * @return {@code true} if the string is empty and null and whitespace\n75.      */\n76. >     public static boolean isBlank(final CharSequence cs) {\n77.         int strLen;\n78.         if (cs == null || (strLen = cs.length()) == 0) {\n"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 79, "column_number": -1, "description": "Taking false branch", "snippet": "76.     public static boolean isBlank(final CharSequence cs) {\n77.         int strLen;\n78. >         if (cs == null || (strLen = cs.length()) == 0) {\n79.             return true;\n80.         }\n"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 80, "column_number": -1, "description": "", "snippet": "77.         int strLen;\n78.         if (cs == null || (strLen = cs.length()) == 0) {\n79. >             return true;\n80.         }\n81.         for (int i = 0; i < strLen; i++) {\n"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 87, "column_number": -1, "description": "return from a call to boolean StringUtils.isBlank(CharSequence)", "snippet": "84.             }\n85.         }\n86. >         return true;\n87.     }\n88.     \n"}, {"level": 1, "filename": "client/src/main/java/com/alibaba/nacos/client/utils/ContextPathUtil.java", "line_number": 37, "column_number": -1, "description": "Taking false branch", "snippet": "34.      */\n35.     public static String normalizeContextPath(String contextPath) {\n36. >         if (StringUtils.isBlank(contextPath) || ROOT_WEB_CONTEXT_PATH.equals(contextPath)) {\n37.             return StringUtils.EMPTY;\n38.         }\n"}, {"level": 1, "filename": "client/src/main/java/com/alibaba/nacos/client/utils/ContextPathUtil.java", "line_number": 38, "column_number": -1, "description": "", "snippet": "35.     public static String normalizeContextPath(String contextPath) {\n36.         if (StringUtils.isBlank(contextPath) || ROOT_WEB_CONTEXT_PATH.equals(contextPath)) {\n37. >             return StringUtils.EMPTY;\n38.         }\n39.         return contextPath.startsWith(ROOT_WEB_CONTEXT_PATH) ? contextPath : ROOT_WEB_CONTEXT_PATH + contextPath;\n"}, {"level": 1, "filename": "client/src/main/java/com/alibaba/nacos/client/utils/ContextPathUtil.java", "line_number": 40, "column_number": -1, "description": "return from a call to String ContextPathUtil.normalizeContextPath(String)", "snippet": "37.             return StringUtils.EMPTY;\n38.         }\n39. >         return contextPath.startsWith(ROOT_WEB_CONTEXT_PATH) ? contextPath : ROOT_WEB_CONTEXT_PATH + contextPath;\n40.     }\n41. }\n"}, {"level": 0, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/impl/process/HttpLoginProcessor.java", "line_number": 66, "column_number": -1, "description": "Skipping getProperty(...): unknown method", "snippet": "63.         String contextPath = ContextPathUtil.normalizeContextPath(\n64.                 properties.getProperty(PropertyKeyConst.CONTEXT_PATH, webContext));\n65. >         String server = properties.getProperty(NacosAuthLoginConstant.SERVER, StringUtils.EMPTY);\n66.         \n67.         if (!server.startsWith(HTTPS_PREFIX) && !server.startsWith(HTTP_PREFIX)) {\n"}, {"level": 0, "filename": "client/src/main/java/com/alibaba/nacos/client/auth/impl/process/HttpLoginProcessor.java", "line_number": 68, "column_number": -1, "description": "", "snippet": "65.         String server = properties.getProperty(NacosAuthLoginConstant.SERVER, StringUtils.EMPTY);\n66.         \n67. >         if (!server.startsWith(HTTPS_PREFIX) && !server.startsWith(HTTP_PREFIX)) {\n68.             if (!InternetAddressUtil.containsPort(server)) {\n69.                 server = server + InternetAddressUtil.IP_PORT_SPLITER + ParamUtil.getDefaultServerPort();\n"}]}, {"url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/persistence/src/main/java/com/alibaba/nacos/persistence/repository/extrnal/ExternalStoragePaginationHelperImpl.java", "rawCode": "/*\n * Copyright 1999-2023 Alibaba Group Holding Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.alibaba.nacos.persistence.repository.extrnal;\n\nimport com.alibaba.nacos.persistence.model.Page;\nimport com.alibaba.nacos.persistence.repository.PaginationHelper;\nimport com.alibaba.nacos.persistence.repository.embedded.EmbeddedStorageContextHolder;\nimport com.alibaba.nacos.plugin.datasource.model.MapperResult;\nimport org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.jdbc.core.RowMapper;\n\nimport java.util.List;\n\n/**\n * External Storage Pagination utils.\n *\n * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n */\n\npublic class ExternalStoragePaginationHelperImpl<E> implements PaginationHelper {\n    \n    private final JdbcTemplate jdbcTemplate;\n    \n    public ExternalStoragePaginationHelperImpl(JdbcTemplate jdbcTemplate) {\n        this.jdbcTemplate = jdbcTemplate;\n    }\n    \n    /**\n     * Take paging.\n     *\n     * @param sqlCountRows query total SQL\n     * @param sqlFetchRows query data sql\n     * @param args         query parameters\n     * @param pageNo       page number\n     * @param pageSize     page size\n     * @param rowMapper    {@link RowMapper}\n     * @return Paginated data {@code <E>}\n     */\n    @Override\n    public Page<E> fetchPage(final String sqlCountRows, final String sqlFetchRows, final Object[] args,\n            final int pageNo, final int pageSize, final RowMapper rowMapper) {\n        return fetchPage(sqlCountRows, sqlFetchRows, args, pageNo, pageSize, null, rowMapper);\n    }\n    \n    @Override\n    public Page<E> fetchPage(final String sqlCountRows, final String sqlFetchRows, final Object[] args,\n            final int pageNo, final int pageSize, final Long lastMaxId, final RowMapper rowMapper) {\n        if (pageNo <= 0 || pageSize <= 0) {\n            throw new IllegalArgumentException(\"pageNo and pageSize must be greater than zero\");\n        }\n        \n        // Query the total number of current records.\n        Integer rowCountInt = jdbcTemplate.queryForObject(sqlCountRows, args, Integer.class);\n        if (rowCountInt == null) {\n            throw new IllegalArgumentException(\"fetchPageLimit error\");\n        }\n        \n        // Compute pages count\n        int pageCount = rowCountInt / pageSize;\n        if (rowCountInt > pageSize * pageCount) {\n            pageCount++;\n        }\n        \n        // Create Page object\n        final Page<E> page = new Page<>();\n        page.setPageNumber(pageNo);\n        page.setPagesAvailable(pageCount);\n        page.setTotalCount(rowCountInt);\n        \n        if (pageNo > pageCount) {\n            return page;\n        }\n        \n        List<E> result = jdbcTemplate.query(sqlFetchRows, args, rowMapper);\n        for (E item : result) {\n            page.getPageItems().add(item);\n        }\n        return page;\n    }\n    \n    @Override\n    public Page<E> fetchPageLimit(final String sqlCountRows, final String sqlFetchRows, final Object[] args,\n            final int pageNo, final int pageSize, final RowMapper rowMapper) {\n        if (pageNo <= 0 || pageSize <= 0) {\n            throw new IllegalArgumentException(\"pageNo and pageSize must be greater than zero\");\n        }\n        // Query the total number of current records\n        Integer rowCountInt = jdbcTemplate.queryForObject(sqlCountRows, Integer.class);\n        if (rowCountInt == null) {\n            throw new IllegalArgumentException(\"fetchPageLimit error\");\n        }\n        \n        // Compute pages count\n        int pageCount = rowCountInt / pageSize;\n        if (rowCountInt > pageSize * pageCount) {\n            pageCount++;\n        }\n        \n        // Create Page object\n        final Page<E> page = new Page<>();\n        page.setPageNumber(pageNo);\n        page.setPagesAvailable(pageCount);\n        page.setTotalCount(rowCountInt);\n        \n        if (pageNo > pageCount) {\n            return page;\n        }\n        \n        List<E> result = jdbcTemplate.query(sqlFetchRows, args, rowMapper);\n        for (E item : result) {\n            page.getPageItems().add(item);\n        }\n        return page;\n    }\n    \n    @Override\n    public Page fetchPageLimit(MapperResult countMapperResult, MapperResult mapperResult, int pageNo, int pageSize,\n            RowMapper rowMapper) {\n        return fetchPageLimit(countMapperResult.getSql(), countMapperResult.getParamList().toArray(),\n                mapperResult.getSql(), mapperResult.getParamList().toArray(), pageNo, pageSize, rowMapper);\n    }\n    \n    @Override\n    public Page<E> fetchPageLimit(final String sqlCountRows, final Object[] args1, final String sqlFetchRows,\n            final Object[] args2, final int pageNo, final int pageSize, final RowMapper rowMapper) {\n        if (pageNo <= 0 || pageSize <= 0) {\n            throw new IllegalArgumentException(\"pageNo and pageSize must be greater than zero\");\n        }\n        // Query the total number of current records\n        Integer rowCountInt = jdbcTemplate.queryForObject(sqlCountRows, args1, Integer.class);\n        if (rowCountInt == null) {\n            throw new IllegalArgumentException(\"fetchPageLimit error\");\n        }\n        \n        // Compute pages count\n        int pageCount = rowCountInt / pageSize;\n        if (rowCountInt > pageSize * pageCount) {\n            pageCount++;\n        }\n        \n        // Create Page object\n        final Page<E> page = new Page<>();\n        page.setPageNumber(pageNo);\n        page.setPagesAvailable(pageCount);\n        page.setTotalCount(rowCountInt);\n        \n        if (pageNo > pageCount) {\n            return page;\n        }\n        List<E> result = jdbcTemplate.query(sqlFetchRows, args2, rowMapper);\n        for (E item : result) {\n            page.getPageItems().add(item);\n        }\n        return page;\n    }\n    \n    @Override\n    public Page<E> fetchPageLimit(final String sqlFetchRows, final Object[] args, final int pageNo, final int pageSize,\n            final RowMapper rowMapper) {\n        if (pageNo <= 0 || pageSize <= 0) {\n            throw new IllegalArgumentException(\"pageNo and pageSize must be greater than zero\");\n        }\n        // Create Page object\n        final Page<E> page = new Page<>();\n        List<E> result = jdbcTemplate.query(sqlFetchRows, args, rowMapper);\n        for (E item : result) {\n            page.getPageItems().add(item);\n        }\n        return page;\n    }\n    \n    @Override\n    public void updateLimit(final String sql, final Object[] args) {\n        try {\n            jdbcTemplate.update(sql, args);\n        } finally {\n            EmbeddedStorageContextHolder.cleanAllContext();\n        }\n    }\n    \n    /**\n     * Update limit with response.\n     *\n     * @param sql  sql\n     * @param args args\n     * @return update row count\n     */\n    public int updateLimitWithResponse(final String sql, final Object[] args) {\n        String sqlUpdate = sql;\n        \n        try {\n            return jdbcTemplate.update(sqlUpdate, args);\n        } finally {\n            EmbeddedStorageContextHolder.cleanAllContext();\n        }\n    }\n    \n}\n", "methodName": "com.alibaba.nacos.persistence.repository.extrnal.ExternalStoragePaginationHelperImpl.fetchPage(java.lang.String,java.lang.String,java.lang.Object[],int,int,java.lang.Long,org.springframework.jdbc.core.RowMapper):com.alibaba.nacos.persistence.model.Page", "exampleID": 56, "dataset": "infer", "filepath": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/extrnal/ExternalStoragePaginationHelperImpl.java", "line": 90, "sink": "getPageItems(page)", "source": "getPageItems(page)", "sourceLine": 90, "qualifier": "$$getPageItems(page)/$ could return null, and is @@dereferenced/@", "steps": [{"line": 81, "source": "getPageItems(page)", "filepath": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "methodName": "Page.getPageItems", "exampleID": 57}], "line_number": 90, "records": [{"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 81, "column_number": -1, "description": "start of procedure getPageItems()", "snippet": "    public List<E> getPageItems() {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "methodName": "getPageItems"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 82, "column_number": -1, "description": "return from a call to List Page.getPageItems()", "snippet": "        return pageItems;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "methodName": "getPageItems"}], "combined_records": [{"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 82, "column_number": -1, "description": "start of procedure getPageItems()", "snippet": "78.    \n79.    public List<E> getPageItems() {\n80.>         return pageItems;\n81.    }\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "methodName": "getPageItems", "line_numbers": [81, 82]}], "infer_explore": [{"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/extrnal/ExternalStoragePaginationHelperImpl.java", "line_number": 60, "column_number": -1, "description": "start of procedure fetchPage(...)", "snippet": "57.     \n58.     @Override\n59. >     public Page<E> fetchPage(final String sqlCountRows, final String sqlFetchRows, final Object[] args,\n60.             final int pageNo, final int pageSize, final Long lastMaxId, final RowMapper rowMapper) {\n61.         if (pageNo <= 0 || pageSize <= 0) {\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/extrnal/ExternalStoragePaginationHelperImpl.java", "line_number": 62, "column_number": -1, "description": "Taking true branch", "snippet": "59.     public Page<E> fetchPage(final String sqlCountRows, final String sqlFetchRows, final Object[] args,\n60.             final int pageNo, final int pageSize, final Long lastMaxId, final RowMapper rowMapper) {\n61. >         if (pageNo <= 0 || pageSize <= 0) {\n62.             throw new IllegalArgumentException(\"pageNo and pageSize must be greater than zero\");\n63.         }\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/extrnal/ExternalStoragePaginationHelperImpl.java", "line_number": 62, "column_number": -1, "description": "Taking false branch", "snippet": "59.     public Page<E> fetchPage(final String sqlCountRows, final String sqlFetchRows, final Object[] args,\n60.             final int pageNo, final int pageSize, final Long lastMaxId, final RowMapper rowMapper) {\n61. >         if (pageNo <= 0 || pageSize <= 0) {\n62.             throw new IllegalArgumentException(\"pageNo and pageSize must be greater than zero\");\n63.         }\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/extrnal/ExternalStoragePaginationHelperImpl.java", "line_number": 67, "column_number": -1, "description": "", "snippet": "64.         \n65.         // Query the total number of current records.\n66. >         Integer rowCountInt = jdbcTemplate.queryForObject(sqlCountRows, args, Integer.class);\n67.         if (rowCountInt == null) {\n68.             throw new IllegalArgumentException(\"fetchPageLimit error\");\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/extrnal/ExternalStoragePaginationHelperImpl.java", "line_number": 68, "column_number": -1, "description": "Taking false branch", "snippet": "65.         // Query the total number of current records.\n66.         Integer rowCountInt = jdbcTemplate.queryForObject(sqlCountRows, args, Integer.class);\n67. >         if (rowCountInt == null) {\n68.             throw new IllegalArgumentException(\"fetchPageLimit error\");\n69.         }\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/extrnal/ExternalStoragePaginationHelperImpl.java", "line_number": 73, "column_number": -1, "description": "", "snippet": "70.         \n71.         // Compute pages count\n72. >         int pageCount = rowCountInt / pageSize;\n73.         if (rowCountInt > pageSize * pageCount) {\n74.             pageCount++;\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/extrnal/ExternalStoragePaginationHelperImpl.java", "line_number": 74, "column_number": -1, "description": "Taking false branch", "snippet": "71.         // Compute pages count\n72.         int pageCount = rowCountInt / pageSize;\n73. >         if (rowCountInt > pageSize * pageCount) {\n74.             pageCount++;\n75.         }\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/extrnal/ExternalStoragePaginationHelperImpl.java", "line_number": 79, "column_number": -1, "description": "Skipping Page(): empty list of specs", "snippet": "76.         \n77.         // Create Page object\n78. >         final Page<E> page = new Page<>();\n79.         page.setPageNumber(pageNo);\n80.         page.setPagesAvailable(pageCount);\n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 29, "column_number": -1, "description": "Definition of Page()", "snippet": "26.  * @date 2010-5-6\n27.  */\n28. > public class Page<E> implements Serializable {\n29. \n30.     static final long serialVersionUID = 1234544030560484292L;\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/extrnal/ExternalStoragePaginationHelperImpl.java", "line_number": 80, "column_number": -1, "description": "", "snippet": "77.         // Create Page object\n78.         final Page<E> page = new Page<>();\n79. >         page.setPageNumber(pageNo);\n80.         page.setPagesAvailable(pageCount);\n81.         page.setTotalCount(rowCountInt);\n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 53, "column_number": -1, "description": "start of procedure setPageNumber(...)", "snippet": "50.     private List<E> pageItems = new ArrayList<>();\n51.     \n52. >     public void setPageNumber(int pageNumber) {\n53.         this.pageNumber = pageNumber;\n54.     }\n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 54, "column_number": -1, "description": "", "snippet": "51.     \n52.     public void setPageNumber(int pageNumber) {\n53. >         this.pageNumber = pageNumber;\n54.     }\n55.     \n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 55, "column_number": -1, "description": "return from a call to void Page.setPageNumber(int)", "snippet": "52.     public void setPageNumber(int pageNumber) {\n53.         this.pageNumber = pageNumber;\n54. >     }\n55.     \n56.     public void setPagesAvailable(int pagesAvailable) {\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/extrnal/ExternalStoragePaginationHelperImpl.java", "line_number": 81, "column_number": -1, "description": "", "snippet": "78.         final Page<E> page = new Page<>();\n79.         page.setPageNumber(pageNo);\n80. >         page.setPagesAvailable(pageCount);\n81.         page.setTotalCount(rowCountInt);\n82.         \n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 57, "column_number": -1, "description": "start of procedure setPagesAvailable(...)", "snippet": "54.     }\n55.     \n56. >     public void setPagesAvailable(int pagesAvailable) {\n57.         this.pagesAvailable = pagesAvailable;\n58.     }\n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 58, "column_number": -1, "description": "", "snippet": "55.     \n56.     public void setPagesAvailable(int pagesAvailable) {\n57. >         this.pagesAvailable = pagesAvailable;\n58.     }\n59.     \n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 59, "column_number": -1, "description": "return from a call to void Page.setPagesAvailable(int)", "snippet": "56.     public void setPagesAvailable(int pagesAvailable) {\n57.         this.pagesAvailable = pagesAvailable;\n58. >     }\n59.     \n60.     public void setPageItems(List<E> pageItems) {\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/extrnal/ExternalStoragePaginationHelperImpl.java", "line_number": 82, "column_number": -1, "description": "", "snippet": "79.         page.setPageNumber(pageNo);\n80.         page.setPagesAvailable(pageCount);\n81. >         page.setTotalCount(rowCountInt);\n82.         \n83.         if (pageNo > pageCount) {\n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 69, "column_number": -1, "description": "start of procedure setTotalCount(...)", "snippet": "66.     }\n67.     \n68. >     public void setTotalCount(int totalCount) {\n69.         this.totalCount = totalCount;\n70.     }\n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 70, "column_number": -1, "description": "", "snippet": "67.     \n68.     public void setTotalCount(int totalCount) {\n69. >         this.totalCount = totalCount;\n70.     }\n71.     \n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 71, "column_number": -1, "description": "return from a call to void Page.setTotalCount(int)", "snippet": "68.     public void setTotalCount(int totalCount) {\n69.         this.totalCount = totalCount;\n70. >     }\n71.     \n72.     public int getPageNumber() {\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/extrnal/ExternalStoragePaginationHelperImpl.java", "line_number": 84, "column_number": -1, "description": "Taking false branch", "snippet": "81.         page.setTotalCount(rowCountInt);\n82.         \n83. >         if (pageNo > pageCount) {\n84.             return page;\n85.         }\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/extrnal/ExternalStoragePaginationHelperImpl.java", "line_number": 88, "column_number": -1, "description": "Skipping query(...): unknown method", "snippet": "85.         }\n86.         \n87. >         List<E> result = jdbcTemplate.query(sqlFetchRows, args, rowMapper);\n88.         for (E item : result) {\n89.             page.getPageItems().add(item);\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/extrnal/ExternalStoragePaginationHelperImpl.java", "line_number": 89, "column_number": -1, "description": "Taking true branch", "snippet": "86.         \n87.         List<E> result = jdbcTemplate.query(sqlFetchRows, args, rowMapper);\n88. >         for (E item : result) {\n89.             page.getPageItems().add(item);\n90.         }\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/extrnal/ExternalStoragePaginationHelperImpl.java", "line_number": 90, "column_number": -1, "description": "", "snippet": "87.         List<E> result = jdbcTemplate.query(sqlFetchRows, args, rowMapper);\n88.         for (E item : result) {\n89. >             page.getPageItems().add(item);\n90.         }\n91.         return page;\n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 81, "column_number": -1, "description": "start of procedure getPageItems()", "snippet": "78.     }\n79.     \n80. >     public List<E> getPageItems() {\n81.         return pageItems;\n82.     }\n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 82, "column_number": -1, "description": "return from a call to List Page.getPageItems()", "snippet": "79.     \n80.     public List<E> getPageItems() {\n81. >         return pageItems;\n82.     }\n83. }\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/extrnal/ExternalStoragePaginationHelperImpl.java", "line_number": 90, "column_number": -1, "description": "", "snippet": "87.         List<E> result = jdbcTemplate.query(sqlFetchRows, args, rowMapper);\n88.         for (E item : result) {\n89. >             page.getPageItems().add(item);\n90.         }\n91.         return page;\n"}]}, {"url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/EmbeddedPaginationHelperImpl.java", "rawCode": "/*\n * Copyright 1999-2023 Alibaba Group Holding Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.alibaba.nacos.persistence.repository.embedded;\n\nimport com.alibaba.nacos.persistence.model.Page;\nimport com.alibaba.nacos.persistence.repository.PaginationHelper;\nimport com.alibaba.nacos.persistence.repository.embedded.operate.DatabaseOperate;\nimport com.alibaba.nacos.plugin.datasource.model.MapperResult;\nimport org.springframework.jdbc.core.RowMapper;\n\nimport java.util.List;\n\n/**\n * Pagination Utils For Apache Derby.\n *\n * @param <E> Generic class\n * @author boyan\n * @date 2010-5-6\n */\npublic class EmbeddedPaginationHelperImpl<E> implements PaginationHelper {\n    \n    private final DatabaseOperate databaseOperate;\n    \n    public EmbeddedPaginationHelperImpl(DatabaseOperate databaseOperate) {\n        this.databaseOperate = databaseOperate;\n    }\n    \n    /**\n     * Take paging.\n     *\n     * @param sqlCountRows Query total SQL\n     * @param sqlFetchRows Query data sql\n     * @param args         query args\n     * @param pageNo       page number\n     * @param pageSize     page size\n     * @param rowMapper    Entity mapping\n     * @return Paging data\n     */\n    @Override\n    public Page<E> fetchPage(final String sqlCountRows, final String sqlFetchRows, final Object[] args,\n            final int pageNo, final int pageSize, final RowMapper rowMapper) {\n        return fetchPage(sqlCountRows, sqlFetchRows, args, pageNo, pageSize, null, rowMapper);\n    }\n    \n    @Override\n    public Page<E> fetchPage(final String sqlCountRows, final String sqlFetchRows, final Object[] args,\n            final int pageNo, final int pageSize, final Long lastMaxId, final RowMapper rowMapper) {\n        if (pageNo <= 0 || pageSize <= 0) {\n            throw new IllegalArgumentException(\"pageNo and pageSize must be greater than zero\");\n        }\n        \n        // Query the total number of current records\n        Integer rowCountInt = databaseOperate.queryOne(sqlCountRows, args, Integer.class);\n        if (rowCountInt == null) {\n            throw new IllegalArgumentException(\"fetchPageLimit error\");\n        }\n        \n        // Count pages\n        int pageCount = rowCountInt / pageSize;\n        if (rowCountInt > pageSize * pageCount) {\n            pageCount++;\n        }\n        \n        // Create Page object\n        final Page<E> page = new Page<>();\n        page.setPageNumber(pageNo);\n        page.setPagesAvailable(pageCount);\n        page.setTotalCount(rowCountInt);\n        \n        if (pageNo > pageCount) {\n            return page;\n        }\n        \n        List<E> result = databaseOperate.queryMany(sqlFetchRows, args, rowMapper);\n        for (E item : result) {\n            page.getPageItems().add(item);\n        }\n        return page;\n    }\n    \n    @Override\n    public Page<E> fetchPageLimit(final String sqlCountRows, final String sqlFetchRows, final Object[] args,\n            final int pageNo, final int pageSize, final RowMapper rowMapper) {\n        if (pageNo <= 0 || pageSize <= 0) {\n            throw new IllegalArgumentException(\"pageNo and pageSize must be greater than zero\");\n        }\n        // Query the total number of current records\n        Integer rowCountInt = databaseOperate.queryOne(sqlCountRows, Integer.class);\n        if (rowCountInt == null) {\n            throw new IllegalArgumentException(\"fetchPageLimit error\");\n        }\n        \n        // Count pages\n        int pageCount = rowCountInt / pageSize;\n        if (rowCountInt > pageSize * pageCount) {\n            pageCount++;\n        }\n        \n        // Create Page object\n        final Page<E> page = new Page<>();\n        page.setPageNumber(pageNo);\n        page.setPagesAvailable(pageCount);\n        page.setTotalCount(rowCountInt);\n        \n        if (pageNo > pageCount) {\n            return page;\n        }\n        \n        List<E> result = databaseOperate.queryMany(sqlFetchRows, args, rowMapper);\n        for (E item : result) {\n            page.getPageItems().add(item);\n        }\n        return page;\n    }\n    \n    @Override\n    public Page<E> fetchPageLimit(final String sqlCountRows, final Object[] args1, final String sqlFetchRows,\n            final Object[] args2, final int pageNo, final int pageSize, final RowMapper rowMapper) {\n        if (pageNo <= 0 || pageSize <= 0) {\n            throw new IllegalArgumentException(\"pageNo and pageSize must be greater than zero\");\n        }\n        // Query the total number of current records\n        Integer rowCountInt = databaseOperate.queryOne(sqlCountRows, args1, Integer.class);\n        if (rowCountInt == null) {\n            throw new IllegalArgumentException(\"fetchPageLimit error\");\n        }\n        \n        // Count pages\n        int pageCount = rowCountInt / pageSize;\n        if (rowCountInt > pageSize * pageCount) {\n            pageCount++;\n        }\n        \n        // Create Page object\n        final Page<E> page = new Page<>();\n        page.setPageNumber(pageNo);\n        page.setPagesAvailable(pageCount);\n        page.setTotalCount(rowCountInt);\n        \n        if (pageNo > pageCount) {\n            return page;\n        }\n        \n        List<E> result = databaseOperate.queryMany(sqlFetchRows, args2, rowMapper);\n        for (E item : result) {\n            page.getPageItems().add(item);\n        }\n        return page;\n    }\n    \n    @Override\n    public Page<E> fetchPageLimit(final String sqlFetchRows, final Object[] args, final int pageNo, final int pageSize,\n            final RowMapper rowMapper) {\n        if (pageNo <= 0 || pageSize <= 0) {\n            throw new IllegalArgumentException(\"pageNo and pageSize must be greater than zero\");\n        }\n        // Create Page object\n        final Page<E> page = new Page<>();\n        \n        List<E> result = databaseOperate.queryMany(sqlFetchRows, args, rowMapper);\n        for (E item : result) {\n            page.getPageItems().add(item);\n        }\n        return page;\n    }\n    \n    @Override\n    public Page fetchPageLimit(MapperResult countMapperResult, MapperResult mapperResult, int pageNo, int pageSize,\n            RowMapper rowMapper) {\n        return fetchPageLimit(countMapperResult.getSql(), countMapperResult.getParamList().toArray(),\n                mapperResult.getSql(), mapperResult.getParamList().toArray(), pageNo, pageSize, rowMapper);\n    }\n    \n    @Override\n    public void updateLimit(final String sql, final Object[] args) {\n        EmbeddedStorageContextHolder.addSqlContext(sql, args);\n        try {\n            databaseOperate.update(EmbeddedStorageContextHolder.getCurrentSqlContext());\n        } finally {\n            EmbeddedStorageContextHolder.cleanAllContext();\n        }\n    }\n    \n}\n", "methodName": "com.alibaba.nacos.persistence.repository.embedded.EmbeddedPaginationHelperImpl.fetchPage(java.lang.String,java.lang.String,java.lang.Object[],int,int,java.lang.Long,org.springframework.jdbc.core.RowMapper):com.alibaba.nacos.persistence.model.Page", "exampleID": 58, "dataset": "infer", "filepath": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/EmbeddedPaginationHelperImpl.java", "line": 90, "sink": "getPageItems(page)", "source": "getPageItems(page)", "sourceLine": 90, "qualifier": "$$getPageItems(page)/$ could return null, and is @@dereferenced/@", "steps": [{"line": 81, "source": "getPageItems(page)", "filepath": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "methodName": "Page.getPageItems", "exampleID": 59}], "line_number": 90, "records": [{"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 81, "column_number": -1, "description": "start of procedure getPageItems()", "snippet": "    public List<E> getPageItems() {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "methodName": "getPageItems"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 82, "column_number": -1, "description": "return from a call to List Page.getPageItems()", "snippet": "        return pageItems;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "methodName": "getPageItems"}], "combined_records": [{"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 82, "column_number": -1, "description": "start of procedure getPageItems()", "snippet": "78.    \n79.    public List<E> getPageItems() {\n80.>         return pageItems;\n81.    }\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "methodName": "getPageItems", "line_numbers": [81, 82]}], "infer_explore": [{"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/EmbeddedPaginationHelperImpl.java", "line_number": 60, "column_number": -1, "description": "start of procedure fetchPage(...)", "snippet": "57.     \n58.     @Override\n59. >     public Page<E> fetchPage(final String sqlCountRows, final String sqlFetchRows, final Object[] args,\n60.             final int pageNo, final int pageSize, final Long lastMaxId, final RowMapper rowMapper) {\n61.         if (pageNo <= 0 || pageSize <= 0) {\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/EmbeddedPaginationHelperImpl.java", "line_number": 62, "column_number": -1, "description": "Taking true branch", "snippet": "59.     public Page<E> fetchPage(final String sqlCountRows, final String sqlFetchRows, final Object[] args,\n60.             final int pageNo, final int pageSize, final Long lastMaxId, final RowMapper rowMapper) {\n61. >         if (pageNo <= 0 || pageSize <= 0) {\n62.             throw new IllegalArgumentException(\"pageNo and pageSize must be greater than zero\");\n63.         }\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/EmbeddedPaginationHelperImpl.java", "line_number": 62, "column_number": -1, "description": "Taking false branch", "snippet": "59.     public Page<E> fetchPage(final String sqlCountRows, final String sqlFetchRows, final Object[] args,\n60.             final int pageNo, final int pageSize, final Long lastMaxId, final RowMapper rowMapper) {\n61. >         if (pageNo <= 0 || pageSize <= 0) {\n62.             throw new IllegalArgumentException(\"pageNo and pageSize must be greater than zero\");\n63.         }\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/EmbeddedPaginationHelperImpl.java", "line_number": 67, "column_number": -1, "description": "Skipping queryOne(...): unknown method", "snippet": "64.         \n65.         // Query the total number of current records\n66. >         Integer rowCountInt = databaseOperate.queryOne(sqlCountRows, args, Integer.class);\n67.         if (rowCountInt == null) {\n68.             throw new IllegalArgumentException(\"fetchPageLimit error\");\n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/operate/DatabaseOperate.java", "line_number": -1, "column_number": -1, "description": "Definition of queryOne(...)", "snippet": ""}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/EmbeddedPaginationHelperImpl.java", "line_number": 67, "column_number": -1, "description": "", "snippet": "64.         \n65.         // Query the total number of current records\n66. >         Integer rowCountInt = databaseOperate.queryOne(sqlCountRows, args, Integer.class);\n67.         if (rowCountInt == null) {\n68.             throw new IllegalArgumentException(\"fetchPageLimit error\");\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/EmbeddedPaginationHelperImpl.java", "line_number": 68, "column_number": -1, "description": "Taking false branch", "snippet": "65.         // Query the total number of current records\n66.         Integer rowCountInt = databaseOperate.queryOne(sqlCountRows, args, Integer.class);\n67. >         if (rowCountInt == null) {\n68.             throw new IllegalArgumentException(\"fetchPageLimit error\");\n69.         }\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/EmbeddedPaginationHelperImpl.java", "line_number": 73, "column_number": -1, "description": "", "snippet": "70.         \n71.         // Count pages\n72. >         int pageCount = rowCountInt / pageSize;\n73.         if (rowCountInt > pageSize * pageCount) {\n74.             pageCount++;\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/EmbeddedPaginationHelperImpl.java", "line_number": 74, "column_number": -1, "description": "Taking false branch", "snippet": "71.         // Count pages\n72.         int pageCount = rowCountInt / pageSize;\n73. >         if (rowCountInt > pageSize * pageCount) {\n74.             pageCount++;\n75.         }\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/EmbeddedPaginationHelperImpl.java", "line_number": 79, "column_number": -1, "description": "Skipping Page(): empty list of specs", "snippet": "76.         \n77.         // Create Page object\n78. >         final Page<E> page = new Page<>();\n79.         page.setPageNumber(pageNo);\n80.         page.setPagesAvailable(pageCount);\n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 29, "column_number": -1, "description": "Definition of Page()", "snippet": "26.  * @date 2010-5-6\n27.  */\n28. > public class Page<E> implements Serializable {\n29. \n30.     static final long serialVersionUID = 1234544030560484292L;\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/EmbeddedPaginationHelperImpl.java", "line_number": 80, "column_number": -1, "description": "", "snippet": "77.         // Create Page object\n78.         final Page<E> page = new Page<>();\n79. >         page.setPageNumber(pageNo);\n80.         page.setPagesAvailable(pageCount);\n81.         page.setTotalCount(rowCountInt);\n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 53, "column_number": -1, "description": "start of procedure setPageNumber(...)", "snippet": "50.     private List<E> pageItems = new ArrayList<>();\n51.     \n52. >     public void setPageNumber(int pageNumber) {\n53.         this.pageNumber = pageNumber;\n54.     }\n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 54, "column_number": -1, "description": "", "snippet": "51.     \n52.     public void setPageNumber(int pageNumber) {\n53. >         this.pageNumber = pageNumber;\n54.     }\n55.     \n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 55, "column_number": -1, "description": "return from a call to void Page.setPageNumber(int)", "snippet": "52.     public void setPageNumber(int pageNumber) {\n53.         this.pageNumber = pageNumber;\n54. >     }\n55.     \n56.     public void setPagesAvailable(int pagesAvailable) {\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/EmbeddedPaginationHelperImpl.java", "line_number": 81, "column_number": -1, "description": "", "snippet": "78.         final Page<E> page = new Page<>();\n79.         page.setPageNumber(pageNo);\n80. >         page.setPagesAvailable(pageCount);\n81.         page.setTotalCount(rowCountInt);\n82.         \n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 57, "column_number": -1, "description": "start of procedure setPagesAvailable(...)", "snippet": "54.     }\n55.     \n56. >     public void setPagesAvailable(int pagesAvailable) {\n57.         this.pagesAvailable = pagesAvailable;\n58.     }\n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 58, "column_number": -1, "description": "", "snippet": "55.     \n56.     public void setPagesAvailable(int pagesAvailable) {\n57. >         this.pagesAvailable = pagesAvailable;\n58.     }\n59.     \n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 59, "column_number": -1, "description": "return from a call to void Page.setPagesAvailable(int)", "snippet": "56.     public void setPagesAvailable(int pagesAvailable) {\n57.         this.pagesAvailable = pagesAvailable;\n58. >     }\n59.     \n60.     public void setPageItems(List<E> pageItems) {\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/EmbeddedPaginationHelperImpl.java", "line_number": 82, "column_number": -1, "description": "", "snippet": "79.         page.setPageNumber(pageNo);\n80.         page.setPagesAvailable(pageCount);\n81. >         page.setTotalCount(rowCountInt);\n82.         \n83.         if (pageNo > pageCount) {\n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 69, "column_number": -1, "description": "start of procedure setTotalCount(...)", "snippet": "66.     }\n67.     \n68. >     public void setTotalCount(int totalCount) {\n69.         this.totalCount = totalCount;\n70.     }\n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 70, "column_number": -1, "description": "", "snippet": "67.     \n68.     public void setTotalCount(int totalCount) {\n69. >         this.totalCount = totalCount;\n70.     }\n71.     \n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 71, "column_number": -1, "description": "return from a call to void Page.setTotalCount(int)", "snippet": "68.     public void setTotalCount(int totalCount) {\n69.         this.totalCount = totalCount;\n70. >     }\n71.     \n72.     public int getPageNumber() {\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/EmbeddedPaginationHelperImpl.java", "line_number": 84, "column_number": -1, "description": "Taking false branch", "snippet": "81.         page.setTotalCount(rowCountInt);\n82.         \n83. >         if (pageNo > pageCount) {\n84.             return page;\n85.         }\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/EmbeddedPaginationHelperImpl.java", "line_number": 88, "column_number": -1, "description": "Skipping queryMany(...): unknown method", "snippet": "85.         }\n86.         \n87. >         List<E> result = databaseOperate.queryMany(sqlFetchRows, args, rowMapper);\n88.         for (E item : result) {\n89.             page.getPageItems().add(item);\n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/operate/DatabaseOperate.java", "line_number": -1, "column_number": -1, "description": "Definition of queryMany(...)", "snippet": ""}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/EmbeddedPaginationHelperImpl.java", "line_number": 89, "column_number": -1, "description": "Taking true branch", "snippet": "86.         \n87.         List<E> result = databaseOperate.queryMany(sqlFetchRows, args, rowMapper);\n88. >         for (E item : result) {\n89.             page.getPageItems().add(item);\n90.         }\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/EmbeddedPaginationHelperImpl.java", "line_number": 90, "column_number": -1, "description": "", "snippet": "87.         List<E> result = databaseOperate.queryMany(sqlFetchRows, args, rowMapper);\n88.         for (E item : result) {\n89. >             page.getPageItems().add(item);\n90.         }\n91.         return page;\n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 81, "column_number": -1, "description": "start of procedure getPageItems()", "snippet": "78.     }\n79.     \n80. >     public List<E> getPageItems() {\n81.         return pageItems;\n82.     }\n"}, {"level": 1, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java", "line_number": 82, "column_number": -1, "description": "return from a call to List Page.getPageItems()", "snippet": "79.     \n80.     public List<E> getPageItems() {\n81. >         return pageItems;\n82.     }\n83. }\n"}, {"level": 0, "filename": "persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/EmbeddedPaginationHelperImpl.java", "line_number": 90, "column_number": -1, "description": "", "snippet": "87.         List<E> result = databaseOperate.queryMany(sqlFetchRows, args, rowMapper);\n88.         for (E item : result) {\n89. >             page.getPageItems().add(item);\n90.         }\n91.         return page;\n"}]}, {"url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "rawCode": "/*\n * Copyright 1999-2018 Alibaba Group Holding Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.alibaba.nacos.config.server.utils;\n\nimport com.alibaba.nacos.common.utils.StringUtils;\n\n/**\n * Synthesize dataId+groupId form. Escape reserved characters in dataId and groupId.\n *\n * @author jiuRen\n */\npublic class GroupKey {\n    \n    public static String getKey(String dataId, String group) {\n        return doGetKey(dataId, group, \"\");\n    }\n    \n    public static String getKey(String dataId, String group, String datumStr) {\n        return doGetKey(dataId, group, datumStr);\n    }\n    \n    public static String getKeyTenant(String dataId, String group, String tenant) {\n        return doGetKey(dataId, group, tenant);\n    }\n    \n    private static String doGetKey(String dataId, String group, String datumStr) {\n        StringBuilder sb = new StringBuilder();\n        urlEncode(dataId, sb);\n        sb.append('+');\n        urlEncode(group, sb);\n        if (StringUtils.isNotEmpty(datumStr)) {\n            sb.append('+');\n            urlEncode(datumStr, sb);\n        }\n        \n        return sb.toString();\n    }\n    \n    /**\n     * Parse the group key.\n     */\n    public static String[] parseKey(String groupKey) {\n        StringBuilder sb = new StringBuilder();\n        String dataId = null;\n        String group = null;\n        String tenant = null;\n        \n        for (int i = 0; i < groupKey.length(); ++i) {\n            char c = groupKey.charAt(i);\n            if ('+' == c) {\n                if (null == dataId) {\n                    dataId = sb.toString();\n                    sb.setLength(0);\n                } else if (null == group) {\n                    group = sb.toString();\n                    sb.setLength(0);\n                } else {\n                    throw new IllegalArgumentException(\"invalid groupkey:\" + groupKey);\n                }\n            } else if ('%' == c) {\n                char next = groupKey.charAt(++i);\n                char nextnext = groupKey.charAt(++i);\n                if ('2' == next && 'B' == nextnext) {\n                    sb.append('+');\n                } else if ('2' == next && '5' == nextnext) {\n                    sb.append('%');\n                } else {\n                    throw new IllegalArgumentException(\"invalid groupkey:\" + groupKey);\n                }\n            } else {\n                sb.append(c);\n            }\n        }\n        \n        if (StringUtils.isBlank(group)) {\n            group = sb.toString();\n        } else {\n            tenant = sb.toString();\n        }\n        if (group.length() == 0) {\n            throw new IllegalArgumentException(\"invalid groupkey:\" + groupKey);\n        }\n    \n        return new String[] {dataId, group, tenant};\n    }\n    \n    /**\n     * + -> %2B % -> %25.\n     */\n    static void urlEncode(String str, StringBuilder sb) {\n        for (int idx = 0; idx < str.length(); ++idx) {\n            char c = str.charAt(idx);\n            if ('+' == c) {\n                sb.append(\"%2B\");\n            } else if ('%' == c) {\n                sb.append(\"%25\");\n            } else {\n                sb.append(c);\n            }\n        }\n    }\n    \n}\n", "methodName": "com.alibaba.nacos.config.server.utils.GroupKey.parseKey(java.lang.String):java.lang.String[]", "exampleID": 60, "dataset": "infer", "filepath": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "line": 94, "sink": "group", "source": "group", "sourceLine": 90, "qualifier": "$$group/$ could be null, and is @@dereferenced/@", "steps": [{"line": 90, "source": "group", "filepath": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "methodName": "com.alibaba.nacos.config.server.utils.GroupKey.parseKey(java.lang.String):java.lang.String[]", "exampleID": 61}], "line_number": 90, "records": [], "combined_records": [], "infer_explore": [{"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "line_number": 56, "column_number": -1, "description": "start of procedure parseKey(...)", "snippet": "53.      * Parse the group key.\n54.      */\n55. >     public static String[] parseKey(String groupKey) {\n56.         StringBuilder sb = new StringBuilder();\n57.         String dataId = null;\n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "line_number": 57, "column_number": -1, "description": "Skipping StringBuilder(): unknown method", "snippet": "54.      */\n55.     public static String[] parseKey(String groupKey) {\n56. >         StringBuilder sb = new StringBuilder();\n57.         String dataId = null;\n58.         String group = null;\n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "line_number": 58, "column_number": -1, "description": "", "snippet": "55.     public static String[] parseKey(String groupKey) {\n56.         StringBuilder sb = new StringBuilder();\n57. >         String dataId = null;\n58.         String group = null;\n59.         String tenant = null;\n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "line_number": 59, "column_number": -1, "description": "", "snippet": "56.         StringBuilder sb = new StringBuilder();\n57.         String dataId = null;\n58. >         String group = null;\n59.         String tenant = null;\n60.         \n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "line_number": 60, "column_number": -1, "description": "", "snippet": "57.         String dataId = null;\n58.         String group = null;\n59. >         String tenant = null;\n60.         \n61.         for (int i = 0; i < groupKey.length(); ++i) {\n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "line_number": 62, "column_number": -1, "description": "Taking true branch", "snippet": "59.         String tenant = null;\n60.         \n61. >         for (int i = 0; i < groupKey.length(); ++i) {\n62.             char c = groupKey.charAt(i);\n63.             if ('+' == c) {\n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "line_number": 63, "column_number": -1, "description": "Skipping charAt(...): unknown method", "snippet": "60.         \n61.         for (int i = 0; i < groupKey.length(); ++i) {\n62. >             char c = groupKey.charAt(i);\n63.             if ('+' == c) {\n64.                 if (null == dataId) {\n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "line_number": 64, "column_number": -1, "description": "Taking true branch", "snippet": "61.         for (int i = 0; i < groupKey.length(); ++i) {\n62.             char c = groupKey.charAt(i);\n63. >             if ('+' == c) {\n64.                 if (null == dataId) {\n65.                     dataId = sb.toString();\n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "line_number": 65, "column_number": -1, "description": "Taking true branch", "snippet": "62.             char c = groupKey.charAt(i);\n63.             if ('+' == c) {\n64. >                 if (null == dataId) {\n65.                     dataId = sb.toString();\n66.                     sb.setLength(0);\n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "line_number": 66, "column_number": -1, "description": "Skipping toString(): unknown method", "snippet": "63.             if ('+' == c) {\n64.                 if (null == dataId) {\n65. >                     dataId = sb.toString();\n66.                     sb.setLength(0);\n67.                 } else if (null == group) {\n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "line_number": 67, "column_number": -1, "description": "Skipping setLength(...): unknown method", "snippet": "64.                 if (null == dataId) {\n65.                     dataId = sb.toString();\n66. >                     sb.setLength(0);\n67.                 } else if (null == group) {\n68.                     group = sb.toString();\n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "line_number": 62, "column_number": -1, "description": "Taking true branch", "snippet": "59.         String tenant = null;\n60.         \n61. >         for (int i = 0; i < groupKey.length(); ++i) {\n62.             char c = groupKey.charAt(i);\n63.             if ('+' == c) {\n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "line_number": 63, "column_number": -1, "description": "Skipping charAt(...): unknown method", "snippet": "60.         \n61.         for (int i = 0; i < groupKey.length(); ++i) {\n62. >             char c = groupKey.charAt(i);\n63.             if ('+' == c) {\n64.                 if (null == dataId) {\n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "line_number": 64, "column_number": -1, "description": "Taking true branch", "snippet": "61.         for (int i = 0; i < groupKey.length(); ++i) {\n62.             char c = groupKey.charAt(i);\n63. >             if ('+' == c) {\n64.                 if (null == dataId) {\n65.                     dataId = sb.toString();\n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "line_number": 65, "column_number": -1, "description": "Taking true branch", "snippet": "62.             char c = groupKey.charAt(i);\n63.             if ('+' == c) {\n64. >                 if (null == dataId) {\n65.                     dataId = sb.toString();\n66.                     sb.setLength(0);\n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "line_number": 66, "column_number": -1, "description": "Skipping toString(): unknown method", "snippet": "63.             if ('+' == c) {\n64.                 if (null == dataId) {\n65. >                     dataId = sb.toString();\n66.                     sb.setLength(0);\n67.                 } else if (null == group) {\n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "line_number": 67, "column_number": -1, "description": "Skipping setLength(...): unknown method", "snippet": "64.                 if (null == dataId) {\n65.                     dataId = sb.toString();\n66. >                     sb.setLength(0);\n67.                 } else if (null == group) {\n68.                     group = sb.toString();\n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "line_number": 62, "column_number": -1, "description": "Taking false branch", "snippet": "59.         String tenant = null;\n60.         \n61. >         for (int i = 0; i < groupKey.length(); ++i) {\n62.             char c = groupKey.charAt(i);\n63.             if ('+' == c) {\n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "line_number": 89, "column_number": -1, "description": "", "snippet": "86.         }\n87.         \n88. >         if (StringUtils.isBlank(group)) {\n89.             group = sb.toString();\n90.         } else {\n"}, {"level": 1, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 77, "column_number": -1, "description": "start of procedure isBlank(...)", "snippet": "74.      * @return {@code true} if the string is empty and null and whitespace\n75.      */\n76. >     public static boolean isBlank(final CharSequence cs) {\n77.         int strLen;\n78.         if (cs == null || (strLen = cs.length()) == 0) {\n"}, {"level": 1, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 79, "column_number": -1, "description": "Taking false branch", "snippet": "76.     public static boolean isBlank(final CharSequence cs) {\n77.         int strLen;\n78. >         if (cs == null || (strLen = cs.length()) == 0) {\n79.             return true;\n80.         }\n"}, {"level": 1, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 80, "column_number": -1, "description": "", "snippet": "77.         int strLen;\n78.         if (cs == null || (strLen = cs.length()) == 0) {\n79. >             return true;\n80.         }\n81.         for (int i = 0; i < strLen; i++) {\n"}, {"level": 1, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 87, "column_number": -1, "description": "return from a call to boolean StringUtils.isBlank(CharSequence)", "snippet": "84.             }\n85.         }\n86. >         return true;\n87.     }\n88.     \n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "line_number": 89, "column_number": -1, "description": "Taking true branch", "snippet": "86.         }\n87.         \n88. >         if (StringUtils.isBlank(group)) {\n89.             group = sb.toString();\n90.         } else {\n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "line_number": 90, "column_number": -1, "description": "Skipping toString(): unknown method", "snippet": "87.         \n88.         if (StringUtils.isBlank(group)) {\n89. >             group = sb.toString();\n90.         } else {\n91.             tenant = sb.toString();\n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey.java", "line_number": 94, "column_number": -1, "description": "", "snippet": "91.             tenant = sb.toString();\n92.         }\n93. >         if (group.length() == 0) {\n94.             throw new IllegalArgumentException(\"invalid groupkey:\" + groupKey);\n95.         }\n"}]}, {"url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/ControlRuleChangeActivator.java", "rawCode": "/*\n * Copyright 1999-2020 Alibaba Group Holding Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.alibaba.nacos.plugin.control.ruleactivator;\n\nimport com.alibaba.nacos.common.notify.Event;\nimport com.alibaba.nacos.common.notify.NotifyCenter;\nimport com.alibaba.nacos.common.notify.listener.Subscriber;\nimport com.alibaba.nacos.common.utils.StringUtils;\nimport com.alibaba.nacos.plugin.control.ControlManagerCenter;\nimport com.alibaba.nacos.plugin.control.Loggers;\nimport com.alibaba.nacos.plugin.control.connection.rule.ConnectionControlRule;\nimport com.alibaba.nacos.plugin.control.event.ConnectionLimitRuleChangeEvent;\nimport com.alibaba.nacos.plugin.control.event.TpsControlRuleChangeEvent;\nimport com.alibaba.nacos.plugin.control.tps.rule.TpsControlRule;\nimport org.slf4j.Logger;\n\n/**\n * control rule activator.\n *\n * @author shiyiyue\n */\npublic class ControlRuleChangeActivator {\n    \n    private static final Logger LOGGER = Loggers.CONTROL;\n    \n    TpsRuleChangeSubscriber tpsRuleChangeSubscriber = new TpsRuleChangeSubscriber();\n    \n    ConnectionRuleChangeSubscriber connectionRuleChangeSubscriber = new ConnectionRuleChangeSubscriber();\n    \n    public ControlRuleChangeActivator() {\n        NotifyCenter.registerSubscriber(tpsRuleChangeSubscriber);\n        NotifyCenter.registerSubscriber(connectionRuleChangeSubscriber);\n    }\n    \n    class TpsRuleChangeSubscriber extends Subscriber<TpsControlRuleChangeEvent> {\n        \n        @Override\n        public void onEvent(TpsControlRuleChangeEvent event) {\n            String pointName = event.getPointName();\n            LOGGER.info(\"Tps control rule change event receive,pointName={}, external={} \", pointName,\n                    event.isExternal());\n            if (event == null || event.getPointName() == null) {\n                return;\n            }\n            try {\n                RuleStorageProxy ruleStorageProxy = ControlManagerCenter.getInstance().getRuleStorageProxy();\n                \n                if (event.isExternal()) {\n                    if (ruleStorageProxy.getExternalStorage() != null) {\n                        String persistTpsRule = ruleStorageProxy.getExternalStorage().getTpsRule(pointName);\n                        ruleStorageProxy.getLocalDiskStorage().saveTpsRule(pointName, persistTpsRule);\n                    } else {\n                        Loggers.CONTROL\n                                .info(\"No external rule storage found,will load local disk instead,point name={}\",\n                                        event.getPointName());\n                    }\n                    \n                }\n                String tpsRuleContent = ruleStorageProxy.getLocalDiskStorage().getTpsRule(pointName);\n                \n                TpsControlRule tpsControlRule = StringUtils.isBlank(tpsRuleContent) ? new TpsControlRule()\n                        : ControlManagerCenter.getInstance().getRuleParser().parseTpsRule(tpsRuleContent);\n                \n                ControlManagerCenter.getInstance().getTpsControlManager().applyTpsRule(pointName, tpsControlRule);\n                \n            } catch (Exception e) {\n                LOGGER.warn(\"Tps control rule apply error ,error= \", e);\n            }\n            \n        }\n        \n        @Override\n        public Class<? extends Event> subscribeType() {\n            return TpsControlRuleChangeEvent.class;\n        }\n    }\n    \n    class ConnectionRuleChangeSubscriber extends Subscriber<ConnectionLimitRuleChangeEvent> {\n        \n        @Override\n        public void onEvent(ConnectionLimitRuleChangeEvent event) {\n            LOGGER.info(\"connection limit rule change event receive ,external:{}\", event.isExternal());\n            \n            try {\n                \n                RuleStorageProxy ruleStorageProxy = ControlManagerCenter.getInstance().getRuleStorageProxy();\n                \n                if (event.isExternal()) {\n                    if (ruleStorageProxy.getExternalStorage() != null) {\n                        String connectionRule = ruleStorageProxy.getExternalStorage().getConnectionRule();\n                        ruleStorageProxy.getLocalDiskStorage().saveConnectionRule(connectionRule);\n                    } else {\n                        Loggers.CONTROL.info(\"No external rule storage found,will load local disk instead\");\n                        \n                    }\n                    \n                }\n                String limitRule = ruleStorageProxy.getLocalDiskStorage().getConnectionRule();\n                \n                Loggers.CONTROL.info(\"start to apply connection rule content \" + limitRule);\n                \n                ConnectionControlRule connectionControlRule =\n                        StringUtils.isBlank(limitRule) ? new ConnectionControlRule()\n                                : ControlManagerCenter.getInstance().getRuleParser().parseConnectionRule(limitRule);\n                Loggers.CONTROL.info(\"end to  apply connection rule content \");\n                \n                if (connectionControlRule != null) {\n                    ControlManagerCenter.getInstance().getConnectionControlManager()\n                            .applyConnectionLimitRule(connectionControlRule);\n                } else {\n                    LOGGER.info(\"Parse rule is null,Ignore illegal rule  :{}\", limitRule);\n                }\n                \n            } catch (Exception e) {\n                LOGGER.error(\"Fail to parse connection limit rule ,persit:{}\", event.isExternal(), e);\n            }\n        }\n        \n        @Override\n        public Class<? extends Event> subscribeType() {\n            return ConnectionLimitRuleChangeEvent.class;\n        }\n    }\n    \n}\n", "methodName": "com.alibaba.nacos.plugin.control.ruleactivator.ControlRuleChangeActivator$TpsRuleChangeSubscriber.onEvent(com.alibaba.nacos.plugin.control.event.TpsControlRuleChangeEvent):void", "exampleID": 62, "dataset": "infer", "filepath": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/ControlRuleChangeActivator.java", "line": 73, "sink": "ruleStorageProxy.getLocalDiskStorage()", "source": "ruleStorageProxy.getLocalDiskStorage()", "sourceLine": 73, "qualifier": "$$ruleStorageProxy.getLocalDiskStorage()/$ could return null, and is @@dereferenced/@", "steps": [{"line": 70, "source": "ruleStorageProxy.getLocalDiskStorage()", "filepath": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/RuleStorageProxy.java", "methodName": "RuleStorageProxy.getLocalDiskStorage", "exampleID": 63}], "line_number": 73, "records": [{"level": 1, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/RuleStorageProxy.java", "line_number": 70, "column_number": -1, "description": "start of procedure getLocalDiskStorage()", "snippet": "    public RuleStorage getLocalDiskStorage() {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/RuleStorageProxy.java", "methodName": "getLocalDiskStorage"}, {"level": 1, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/RuleStorageProxy.java", "line_number": 71, "column_number": -1, "description": "return from a call to RuleStorage RuleStorageProxy.getLocalDiskStorage()", "snippet": "        return localDiskRuleStorage;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/RuleStorageProxy.java", "methodName": "getLocalDiskStorage"}], "combined_records": [{"level": 1, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/RuleStorageProxy.java", "line_number": 71, "column_number": -1, "description": "start of procedure getLocalDiskStorage()", "snippet": "67.    \n68.    public RuleStorage getLocalDiskStorage() {\n69.>         return localDiskRuleStorage;\n70.    }\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/RuleStorageProxy.java", "methodName": "getLocalDiskStorage", "line_numbers": [70, 71]}], "infer_explore": [{"level": 0, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/ControlRuleChangeActivator.java", "line_number": 52, "column_number": -1, "description": "start of procedure onEvent(...)", "snippet": "49.         \n50.         @Override\n51. >         public void onEvent(TpsControlRuleChangeEvent event) {\n52.             String pointName = event.getPointName();\n53.             LOGGER.info(\"Tps control rule change event receive,pointName={}, external={} \", pointName,\n"}, {"level": 0, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/ControlRuleChangeActivator.java", "line_number": 53, "column_number": -1, "description": "", "snippet": "50.         @Override\n51.         public void onEvent(TpsControlRuleChangeEvent event) {\n52. >             String pointName = event.getPointName();\n53.             LOGGER.info(\"Tps control rule change event receive,pointName={}, external={} \", pointName,\n54.                     event.isExternal());\n"}, {"level": 1, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/event/TpsControlRuleChangeEvent.java", "line_number": 38, "column_number": -1, "description": "start of procedure getPointName()", "snippet": "35.     }\n36.     \n37. >     public String getPointName() {\n38.         return pointName;\n39.     }\n"}, {"level": 1, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/event/TpsControlRuleChangeEvent.java", "line_number": 39, "column_number": -1, "description": "return from a call to String TpsControlRuleChangeEvent.getPointName()", "snippet": "36.     \n37.     public String getPointName() {\n38. >         return pointName;\n39.     }\n40.     \n"}, {"level": 0, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/ControlRuleChangeActivator.java", "line_number": 55, "column_number": -1, "description": "", "snippet": "52.             String pointName = event.getPointName();\n53.             LOGGER.info(\"Tps control rule change event receive,pointName={}, external={} \", pointName,\n54. >                     event.isExternal());\n55.             if (event == null || event.getPointName() == null) {\n56.                 return;\n"}, {"level": 1, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/event/TpsControlRuleChangeEvent.java", "line_number": 46, "column_number": -1, "description": "start of procedure isExternal()", "snippet": "43.     }\n44.     \n45. >     public boolean isExternal() {\n46.         return external;\n47.     }\n"}, {"level": 1, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/event/TpsControlRuleChangeEvent.java", "line_number": 47, "column_number": -1, "description": "return from a call to boolean TpsControlRuleChangeEvent.isExternal()", "snippet": "44.     \n45.     public boolean isExternal() {\n46. >         return external;\n47.     }\n48.     \n"}, {"level": 0, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/ControlRuleChangeActivator.java", "line_number": 55, "column_number": -1, "description": "Skipping valueOf(...): unknown method", "snippet": "52.             String pointName = event.getPointName();\n53.             LOGGER.info(\"Tps control rule change event receive,pointName={}, external={} \", pointName,\n54. >                     event.isExternal());\n55.             if (event == null || event.getPointName() == null) {\n56.                 return;\n"}, {"level": 0, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/ControlRuleChangeActivator.java", "line_number": 54, "column_number": -1, "description": "Skipping info(...): unknown method", "snippet": "51.         public void onEvent(TpsControlRuleChangeEvent event) {\n52.             String pointName = event.getPointName();\n53. >             LOGGER.info(\"Tps control rule change event receive,pointName={}, external={} \", pointName,\n54.                     event.isExternal());\n55.             if (event == null || event.getPointName() == null) {\n"}, {"level": 0, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/ControlRuleChangeActivator.java", "line_number": 56, "column_number": -1, "description": "Taking true branch", "snippet": "53.             LOGGER.info(\"Tps control rule change event receive,pointName={}, external={} \", pointName,\n54.                     event.isExternal());\n55. >             if (event == null || event.getPointName() == null) {\n56.                 return;\n57.             }\n"}, {"level": 1, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/event/TpsControlRuleChangeEvent.java", "line_number": 38, "column_number": -1, "description": "start of procedure getPointName()", "snippet": "35.     }\n36.     \n37. >     public String getPointName() {\n38.         return pointName;\n39.     }\n"}, {"level": 1, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/event/TpsControlRuleChangeEvent.java", "line_number": 39, "column_number": -1, "description": "return from a call to String TpsControlRuleChangeEvent.getPointName()", "snippet": "36.     \n37.     public String getPointName() {\n38. >         return pointName;\n39.     }\n40.     \n"}, {"level": 0, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/ControlRuleChangeActivator.java", "line_number": 56, "column_number": -1, "description": "Taking false branch", "snippet": "53.             LOGGER.info(\"Tps control rule change event receive,pointName={}, external={} \", pointName,\n54.                     event.isExternal());\n55. >             if (event == null || event.getPointName() == null) {\n56.                 return;\n57.             }\n"}, {"level": 0, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/ControlRuleChangeActivator.java", "line_number": 60, "column_number": -1, "description": "", "snippet": "57.             }\n58.             try {\n59. >                 RuleStorageProxy ruleStorageProxy = ControlManagerCenter.getInstance().getRuleStorageProxy();\n60.                 \n61.                 if (event.isExternal()) {\n"}, {"level": 1, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ControlManagerCenter.java", "line_number": 112, "column_number": -1, "description": "start of procedure getInstance()", "snippet": "109.     }\n110.     \n111. >     public static ControlManagerCenter getInstance() {\n112.         if (instance == null) {\n113.             synchronized (ControlManagerCenter.class) {\n"}, {"level": 1, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ControlManagerCenter.java", "line_number": 113, "column_number": -1, "description": "Taking true branch", "snippet": "110.     \n111.     public static ControlManagerCenter getInstance() {\n112. >         if (instance == null) {\n113.             synchronized (ControlManagerCenter.class) {\n114.                 if (instance == null) {\n"}, {"level": 1, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ControlManagerCenter.java", "line_number": 114, "column_number": -1, "description": "", "snippet": "111.     public static ControlManagerCenter getInstance() {\n112.         if (instance == null) {\n113. >             synchronized (ControlManagerCenter.class) {\n114.                 if (instance == null) {\n115.                     instance = new ControlManagerCenter();\n"}, {"level": 1, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ControlManagerCenter.java", "line_number": 115, "column_number": -1, "description": "Taking true branch", "snippet": "112.         if (instance == null) {\n113.             synchronized (ControlManagerCenter.class) {\n114. >                 if (instance == null) {\n115.                     instance = new ControlManagerCenter();\n116.                 }\n"}, {"level": 1, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ControlManagerCenter.java", "line_number": 116, "column_number": -1, "description": "", "snippet": "113.             synchronized (ControlManagerCenter.class) {\n114.                 if (instance == null) {\n115. >                     instance = new ControlManagerCenter();\n116.                 }\n117.             }\n"}, {"level": 2, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ControlManagerCenter.java", "line_number": 90, "column_number": -1, "description": "start of procedure ControlManagerCenter()", "snippet": "87.     }\n88.     \n89. >     private ControlManagerCenter() {\n90.         initTpsControlManager();\n91.         initConnectionManager();\n"}, {"level": 2, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ControlManagerCenter.java", "line_number": 91, "column_number": -1, "description": "", "snippet": "88.     \n89.     private ControlManagerCenter() {\n90. >         initTpsControlManager();\n91.         initConnectionManager();\n92.         ruleStorageProxy = new RuleStorageProxy();\n"}, {"level": 3, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ControlManagerCenter.java", "line_number": 70, "column_number": -1, "description": "start of procedure initTpsControlManager()", "snippet": "67.     }\n68.     \n69. >     private void initTpsControlManager() {\n70.         \n71.         Collection<TpsControlManager> tpsControlManagers = NacosServiceLoader.load(TpsControlManager.class);\n"}, {"level": 3, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ControlManagerCenter.java", "line_number": 72, "column_number": -1, "description": "", "snippet": "69.     private void initTpsControlManager() {\n70.         \n71. >         Collection<TpsControlManager> tpsControlManagers = NacosServiceLoader.load(TpsControlManager.class);\n72.         String tpsManagerName = ControlConfigs.getInstance().getTpsManager();\n73.         \n"}, {"level": 4, "filename": "common/src/main/java/com/alibaba/nacos/common/spi/NacosServiceLoader.java", "line_number": 44, "column_number": -1, "description": "start of procedure load(...)", "snippet": "41.      * @return service instances\n42.      */\n43. >     public static <T> Collection<T> load(final Class<T> service) {\n44.         if (SERVICES.containsKey(service)) {\n45.             return newServiceInstances(service);\n"}, {"level": 4, "filename": "common/src/main/java/com/alibaba/nacos/common/spi/NacosServiceLoader.java", "line_number": 45, "column_number": -1, "description": "Taking true branch", "snippet": "42.      */\n43.     public static <T> Collection<T> load(final Class<T> service) {\n44. >         if (SERVICES.containsKey(service)) {\n45.             return newServiceInstances(service);\n46.         }\n"}, {"level": 4, "filename": "common/src/main/java/com/alibaba/nacos/common/spi/NacosServiceLoader.java", "line_number": 46, "column_number": -1, "description": "", "snippet": "43.     public static <T> Collection<T> load(final Class<T> service) {\n44.         if (SERVICES.containsKey(service)) {\n45. >             return newServiceInstances(service);\n46.         }\n47.         Collection<T> result = new LinkedHashSet<>();\n"}, {"level": 5, "filename": "common/src/main/java/com/alibaba/nacos/common/spi/NacosServiceLoader.java", "line_number": 70, "column_number": -1, "description": "start of procedure newServiceInstances(...)", "snippet": "67.      * @return service instances\n68.      */\n69. >     public static <T> Collection<T> newServiceInstances(final Class<T> service) {\n70.         return SERVICES.containsKey(service) ? newServiceInstancesFromCache(service) : Collections.<T>emptyList();\n71.     }\n"}, {"level": 5, "filename": "common/src/main/java/com/alibaba/nacos/common/spi/NacosServiceLoader.java", "line_number": 71, "column_number": -1, "description": "Taking false branch", "snippet": "68.      */\n69.     public static <T> Collection<T> newServiceInstances(final Class<T> service) {\n70. >         return SERVICES.containsKey(service) ? newServiceInstancesFromCache(service) : Collections.<T>emptyList();\n71.     }\n72.     \n"}, {"level": 5, "filename": "common/src/main/java/com/alibaba/nacos/common/spi/NacosServiceLoader.java", "line_number": 71, "column_number": -1, "description": "return from a call to Collection NacosServiceLoader.newServiceInstances(Class)", "snippet": "68.      */\n69.     public static <T> Collection<T> newServiceInstances(final Class<T> service) {\n70. >         return SERVICES.containsKey(service) ? newServiceInstancesFromCache(service) : Collections.<T>emptyList();\n71.     }\n72.     \n"}, {"level": 4, "filename": "common/src/main/java/com/alibaba/nacos/common/spi/NacosServiceLoader.java", "line_number": 46, "column_number": -1, "description": "", "snippet": "43.     public static <T> Collection<T> load(final Class<T> service) {\n44.         if (SERVICES.containsKey(service)) {\n45. >             return newServiceInstances(service);\n46.         }\n47.         Collection<T> result = new LinkedHashSet<>();\n"}, {"level": 4, "filename": "common/src/main/java/com/alibaba/nacos/common/spi/NacosServiceLoader.java", "line_number": 53, "column_number": -1, "description": "return from a call to Collection NacosServiceLoader.load(Class)", "snippet": "50.             cacheServiceClass(service, each);\n51.         }\n52. >         return result;\n53.     }\n54.     \n"}, {"level": 3, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ControlManagerCenter.java", "line_number": 73, "column_number": -1, "description": "", "snippet": "70.         \n71.         Collection<TpsControlManager> tpsControlManagers = NacosServiceLoader.load(TpsControlManager.class);\n72. >         String tpsManagerName = ControlConfigs.getInstance().getTpsManager();\n73.         \n74.         for (TpsControlManager tpsControlManagerInternal : tpsControlManagers) {\n"}, {"level": 4, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/configs/ControlConfigs.java", "line_number": 32, "column_number": -1, "description": "start of procedure getInstance()", "snippet": "29.     private static volatile ControlConfigs instance = null;\n30.     \n31. >     public static ControlConfigs getInstance() {\n32.         if (instance == null) {\n33.             synchronized (ControlConfigs.class) {\n"}, {"level": 4, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/configs/ControlConfigs.java", "line_number": 33, "column_number": -1, "description": "Taking true branch", "snippet": "30.     \n31.     public static ControlConfigs getInstance() {\n32. >         if (instance == null) {\n33.             synchronized (ControlConfigs.class) {\n34.                 if (instance == null) {\n"}, {"level": 4, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/configs/ControlConfigs.java", "line_number": 34, "column_number": -1, "description": "", "snippet": "31.     public static ControlConfigs getInstance() {\n32.         if (instance == null) {\n33. >             synchronized (ControlConfigs.class) {\n34.                 if (instance == null) {\n35.                     instance = new ControlConfigs();\n"}, {"level": 4, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/configs/ControlConfigs.java", "line_number": 35, "column_number": -1, "description": "Taking true branch", "snippet": "32.         if (instance == null) {\n33.             synchronized (ControlConfigs.class) {\n34. >                 if (instance == null) {\n35.                     instance = new ControlConfigs();\n36.                     Collection<ControlConfigsInitializer> load = NacosServiceLoader\n"}, {"level": 4, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/configs/ControlConfigs.java", "line_number": 36, "column_number": -1, "description": "", "snippet": "33.             synchronized (ControlConfigs.class) {\n34.                 if (instance == null) {\n35. >                     instance = new ControlConfigs();\n36.                     Collection<ControlConfigsInitializer> load = NacosServiceLoader\n37.                             .load(ControlConfigsInitializer.class);\n"}, {"level": 5, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/configs/ControlConfigs.java", "line_number": 28, "column_number": -1, "description": "start of procedure ControlConfigs()", "snippet": "25.  * @author shiyiyue\n26.  */\n27. > public class ControlConfigs {\n28.     \n29.     private static volatile ControlConfigs instance = null;\n"}, {"level": 5, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/configs/ControlConfigs.java", "line_number": 53, "column_number": -1, "description": "", "snippet": "50.     }\n51.     \n52. >     private String tpsBarrierCreator = \"nacos\";\n53.     \n54.     private String tpsRuleBarrierCreator = \"nacos\";\n"}, {"level": 5, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/configs/ControlConfigs.java", "line_number": 55, "column_number": -1, "description": "", "snippet": "52.     private String tpsBarrierCreator = \"nacos\";\n53.     \n54. >     private String tpsRuleBarrierCreator = \"nacos\";\n55.     \n56.     private String connectionRuntimeEjector = \"nacos\";\n"}, {"level": 5, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/configs/ControlConfigs.java", "line_number": 57, "column_number": -1, "description": "", "snippet": "54.     private String tpsRuleBarrierCreator = \"nacos\";\n55.     \n56. >     private String connectionRuntimeEjector = \"nacos\";\n57.     \n58.     private String connectionManager = \"nacos\";\n"}, {"level": 5, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/configs/ControlConfigs.java", "line_number": 59, "column_number": -1, "description": "", "snippet": "56.     private String connectionRuntimeEjector = \"nacos\";\n57.     \n58. >     private String connectionManager = \"nacos\";\n59.     \n60.     private String tpsManager = \"nacos\";\n"}, {"level": 5, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/configs/ControlConfigs.java", "line_number": 61, "column_number": -1, "description": "", "snippet": "58.     private String connectionManager = \"nacos\";\n59.     \n60. >     private String tpsManager = \"nacos\";\n61.     \n62.     private String ruleExternalStorage = \"\";\n"}, {"level": 5, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/configs/ControlConfigs.java", "line_number": 63, "column_number": -1, "description": "", "snippet": "60.     private String tpsManager = \"nacos\";\n61.     \n62. >     private String ruleExternalStorage = \"\";\n63.     \n64.     private String ruleParser = \"nacos\";\n"}, {"level": 5, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/configs/ControlConfigs.java", "line_number": 65, "column_number": -1, "description": "", "snippet": "62.     private String ruleExternalStorage = \"\";\n63.     \n64. >     private String ruleParser = \"nacos\";\n65.     \n66.     private String localRuleStorageBaseDir = \"\";\n"}, {"level": 5, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/configs/ControlConfigs.java", "line_number": 67, "column_number": -1, "description": "return from a call to ControlConfigs.<init>()", "snippet": "64.     private String ruleParser = \"nacos\";\n65.     \n66. >     private String localRuleStorageBaseDir = \"\";\n67.     \n68.     public String getTpsBarrierCreator() {\n"}, {"level": 4, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/configs/ControlConfigs.java", "line_number": 36, "column_number": -1, "description": "", "snippet": "33.             synchronized (ControlConfigs.class) {\n34.                 if (instance == null) {\n35. >                     instance = new ControlConfigs();\n36.                     Collection<ControlConfigsInitializer> load = NacosServiceLoader\n37.                             .load(ControlConfigsInitializer.class);\n"}, {"level": 4, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/configs/ControlConfigs.java", "line_number": 38, "column_number": -1, "description": "", "snippet": "35.                     instance = new ControlConfigs();\n36.                     Collection<ControlConfigsInitializer> load = NacosServiceLoader\n37. >                             .load(ControlConfigsInitializer.class);\n38.                     for (ControlConfigsInitializer controlConfigsInitializer : load) {\n39.                         controlConfigsInitializer.initialize(instance);\n"}, {"level": 5, "filename": "common/src/main/java/com/alibaba/nacos/common/spi/NacosServiceLoader.java", "line_number": 44, "column_number": -1, "description": "start of procedure load(...)", "snippet": "41.      * @return service instances\n42.      */\n43. >     public static <T> Collection<T> load(final Class<T> service) {\n44.         if (SERVICES.containsKey(service)) {\n45.             return newServiceInstances(service);\n"}, {"level": 5, "filename": "common/src/main/java/com/alibaba/nacos/common/spi/NacosServiceLoader.java", "line_number": 45, "column_number": -1, "description": "Taking true branch", "snippet": "42.      */\n43.     public static <T> Collection<T> load(final Class<T> service) {\n44. >         if (SERVICES.containsKey(service)) {\n45.             return newServiceInstances(service);\n46.         }\n"}, {"level": 5, "filename": "common/src/main/java/com/alibaba/nacos/common/spi/NacosServiceLoader.java", "line_number": 46, "column_number": -1, "description": "", "snippet": "43.     public static <T> Collection<T> load(final Class<T> service) {\n44.         if (SERVICES.containsKey(service)) {\n45. >             return newServiceInstances(service);\n46.         }\n47.         Collection<T> result = new LinkedHashSet<>();\n"}, {"level": 6, "filename": "common/src/main/java/com/alibaba/nacos/common/spi/NacosServiceLoader.java", "line_number": 70, "column_number": -1, "description": "start of procedure newServiceInstances(...)", "snippet": "67.      * @return service instances\n68.      */\n69. >     public static <T> Collection<T> newServiceInstances(final Class<T> service) {\n70.         return SERVICES.containsKey(service) ? newServiceInstancesFromCache(service) : Collections.<T>emptyList();\n71.     }\n"}, {"level": 6, "filename": "common/src/main/java/com/alibaba/nacos/common/spi/NacosServiceLoader.java", "line_number": 71, "column_number": -1, "description": "Taking false branch", "snippet": "68.      */\n69.     public static <T> Collection<T> newServiceInstances(final Class<T> service) {\n70. >         return SERVICES.containsKey(service) ? newServiceInstancesFromCache(service) : Collections.<T>emptyList();\n71.     }\n72.     \n"}, {"level": 6, "filename": "common/src/main/java/com/alibaba/nacos/common/spi/NacosServiceLoader.java", "line_number": 71, "column_number": -1, "description": "return from a call to Collection NacosServiceLoader.newServiceInstances(Class)", "snippet": "68.      */\n69.     public static <T> Collection<T> newServiceInstances(final Class<T> service) {\n70. >         return SERVICES.containsKey(service) ? newServiceInstancesFromCache(service) : Collections.<T>emptyList();\n71.     }\n72.     \n"}, {"level": 5, "filename": "common/src/main/java/com/alibaba/nacos/common/spi/NacosServiceLoader.java", "line_number": 46, "column_number": -1, "description": "", "snippet": "43.     public static <T> Collection<T> load(final Class<T> service) {\n44.         if (SERVICES.containsKey(service)) {\n45. >             return newServiceInstances(service);\n46.         }\n47.         Collection<T> result = new LinkedHashSet<>();\n"}, {"level": 5, "filename": "common/src/main/java/com/alibaba/nacos/common/spi/NacosServiceLoader.java", "line_number": 53, "column_number": -1, "description": "return from a call to Collection NacosServiceLoader.load(Class)", "snippet": "50.             cacheServiceClass(service, each);\n51.         }\n52. >         return result;\n53.     }\n54.     \n"}, {"level": 4, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/configs/ControlConfigs.java", "line_number": 39, "column_number": -1, "description": "Taking false branch", "snippet": "36.                     Collection<ControlConfigsInitializer> load = NacosServiceLoader\n37.                             .load(ControlConfigsInitializer.class);\n38. >                     for (ControlConfigsInitializer controlConfigsInitializer : load) {\n39.                         controlConfigsInitializer.initialize(instance);\n40.                     }\n"}, {"level": 4, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/configs/ControlConfigs.java", "line_number": 43, "column_number": -1, "description": "", "snippet": "40.                     }\n41.                 }\n42. >             }\n43.         }\n44.         \n"}, {"level": 4, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/configs/ControlConfigs.java", "line_number": 46, "column_number": -1, "description": "return from a call to ControlConfigs ControlConfigs.getInstance()", "snippet": "43.         }\n44.         \n45. >         return instance;\n46.     }\n47.     \n"}, {"level": 3, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ControlManagerCenter.java", "line_number": 73, "column_number": -1, "description": "", "snippet": "70.         \n71.         Collection<TpsControlManager> tpsControlManagers = NacosServiceLoader.load(TpsControlManager.class);\n72. >         String tpsManagerName = ControlConfigs.getInstance().getTpsManager();\n73.         \n74.         for (TpsControlManager tpsControlManagerInternal : tpsControlManagers) {\n"}, {"level": 4, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/configs/ControlConfigs.java", "line_number": 117, "column_number": -1, "description": "start of procedure getTpsManager()", "snippet": "114.     }\n115.     \n116. >     public String getTpsManager() {\n117.         return tpsManager;\n118.     }\n"}, {"level": 4, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/configs/ControlConfigs.java", "line_number": 118, "column_number": -1, "description": "return from a call to String ControlConfigs.getTpsManager()", "snippet": "115.     \n116.     public String getTpsManager() {\n117. >         return tpsManager;\n118.     }\n119.     \n"}, {"level": 3, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ControlManagerCenter.java", "line_number": 75, "column_number": -1, "description": "Taking false branch", "snippet": "72.         String tpsManagerName = ControlConfigs.getInstance().getTpsManager();\n73.         \n74. >         for (TpsControlManager tpsControlManagerInternal : tpsControlManagers) {\n75.             if (tpsControlManagerInternal.getName().equalsIgnoreCase(tpsManagerName)) {\n76.                 Loggers.CONTROL.info(\"Found  tps control manager of name={},class={}\", tpsManagerName,\n"}, {"level": 3, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ControlManagerCenter.java", "line_number": 83, "column_number": -1, "description": "Taking true branch", "snippet": "80.             }\n81.         }\n82. >         if (tpsControlManager == null) {\n83.             Loggers.CONTROL.warn(\"Fail to found tps control manager of name \uff1a\" + tpsManagerName);\n84.             tpsControlManager = new NacosTpsControlManager();\n"}, {"level": 3, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ControlManagerCenter.java", "line_number": 84, "column_number": -1, "description": "Skipping warn(...): unknown method", "snippet": "81.         }\n82.         if (tpsControlManager == null) {\n83. >             Loggers.CONTROL.warn(\"Fail to found tps control manager of name \uff1a\" + tpsManagerName);\n84.             tpsControlManager = new NacosTpsControlManager();\n85.         }\n"}, {"level": 3, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ControlManagerCenter.java", "line_number": 85, "column_number": -1, "description": "", "snippet": "82.         if (tpsControlManager == null) {\n83.             Loggers.CONTROL.warn(\"Fail to found tps control manager of name \uff1a\" + tpsManagerName);\n84. >             tpsControlManager = new NacosTpsControlManager();\n85.         }\n86.         \n"}, {"level": 4, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/tps/nacos/NacosTpsControlManager.java", "line_number": 57, "column_number": -1, "description": "start of procedure NacosTpsControlManager()", "snippet": "54.     protected ScheduledExecutorService executorService;\n55.     \n56. >     public NacosTpsControlManager() {\n57.         executorService = ExecutorFactory.newSingleScheduledExecutorService(r -> {\n58.             Thread thread = new Thread(r, \"nacos.plugin.tps.control.reporter\");\n"}, {"level": 5, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/tps/TpsControlManager.java", "line_number": 35, "column_number": -1, "description": "start of procedure TpsControlManager()", "snippet": "32.  */\n33. @SuppressWarnings(\"PMD.AbstractClassShouldStartWithAbstractNamingRule\")\n34. > public abstract class TpsControlManager {\n35.     \n36.     /**\n"}, {"level": 5, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/tps/TpsControlManager.java", "line_number": 35, "column_number": -1, "description": "return from a call to TpsControlManager.<init>()", "snippet": "32.  */\n33. @SuppressWarnings(\"PMD.AbstractClassShouldStartWithAbstractNamingRule\")\n34. > public abstract class TpsControlManager {\n35.     \n36.     /**\n"}, {"level": 4, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/tps/nacos/NacosTpsControlManager.java", "line_number": 48, "column_number": -1, "description": "", "snippet": "45.      * point name -> tps barrier.\n46.      */\n47. >     protected final Map<String, TpsBarrier> points = new ConcurrentHashMap<>(16);\n48.     \n49.     /**\n"}, {"level": 4, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/tps/nacos/NacosTpsControlManager.java", "line_number": 53, "column_number": -1, "description": "", "snippet": "50.      * point name -> tps control rule.\n51.      */\n52. >     protected final Map<String, TpsControlRule> rules = new ConcurrentHashMap<>(16);\n53.     \n54.     protected ScheduledExecutorService executorService;\n"}, {"level": 4, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/tps/nacos/NacosTpsControlManager.java", "line_number": 58, "column_number": -1, "description": "", "snippet": "55.     \n56.     public NacosTpsControlManager() {\n57. >         executorService = ExecutorFactory.newSingleScheduledExecutorService(r -> {\n58.             Thread thread = new Thread(r, \"nacos.plugin.tps.control.reporter\");\n59.             thread.setDaemon(true);\n"}, {"level": 5, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/tps/nacos/NacosTpsControlManager.java", "line_number": 58, "column_number": -1, "description": "start of procedure callsite_com.alibaba.nacos.plugin.control.tps.nacos.NacosTpsControlManager$Lambda$_1_31()", "snippet": "55.     \n56.     public NacosTpsControlManager() {\n57. >         executorService = ExecutorFactory.newSingleScheduledExecutorService(r -> {\n58.             Thread thread = new Thread(r, \"nacos.plugin.tps.control.reporter\");\n59.             thread.setDaemon(true);\n"}, {"level": 5, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/tps/nacos/NacosTpsControlManager.java", "line_number": 58, "column_number": -1, "description": "return from a call to ThreadFactory NacosTpsControlManager.callsite_com.alibaba.nacos.plugin.control.tps.nacos.NacosTpsControlManager$Lambda$_1_31()", "snippet": "55.     \n56.     public NacosTpsControlManager() {\n57. >         executorService = ExecutorFactory.newSingleScheduledExecutorService(r -> {\n58.             Thread thread = new Thread(r, \"nacos.plugin.tps.control.reporter\");\n59.             thread.setDaemon(true);\n"}, {"level": 4, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/tps/nacos/NacosTpsControlManager.java", "line_number": 58, "column_number": -1, "description": "", "snippet": "55.     \n56.     public NacosTpsControlManager() {\n57. >         executorService = ExecutorFactory.newSingleScheduledExecutorService(r -> {\n58.             Thread thread = new Thread(r, \"nacos.plugin.tps.control.reporter\");\n59.             thread.setDaemon(true);\n"}, {"level": 5, "filename": "common/src/main/java/com/alibaba/nacos/common/executor/ExecutorFactory.java", "line_number": 59, "column_number": -1, "description": "start of procedure newSingleScheduledExecutorService(...)", "snippet": "56.     }\n57.     \n58. >     public static ScheduledExecutorService newSingleScheduledExecutorService(final ThreadFactory threadFactory) {\n59.         return Executors.newScheduledThreadPool(1, threadFactory);\n60.     }\n"}, {"level": 5, "filename": "common/src/main/java/com/alibaba/nacos/common/executor/ExecutorFactory.java", "line_number": 60, "column_number": -1, "description": "return from a call to ScheduledExecutorService ExecutorFactory.newSingleScheduledExecutorService(NacosTpsControlManager$Lambda$_1_31)", "snippet": "57.     \n58.     public static ScheduledExecutorService newSingleScheduledExecutorService(final ThreadFactory threadFactory) {\n59. >         return Executors.newScheduledThreadPool(1, threadFactory);\n60.     }\n61.     \n"}, {"level": 4, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/tps/nacos/NacosTpsControlManager.java", "line_number": 58, "column_number": -1, "description": "", "snippet": "55.     \n56.     public NacosTpsControlManager() {\n57. >         executorService = ExecutorFactory.newSingleScheduledExecutorService(r -> {\n58.             Thread thread = new Thread(r, \"nacos.plugin.tps.control.reporter\");\n59.             thread.setDaemon(true);\n"}, {"level": 4, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/tps/nacos/NacosTpsControlManager.java", "line_number": 64, "column_number": -1, "description": "Skipping startTpsReport(): empty list of specs", "snippet": "61.         });\n62.         \n63. >         startTpsReport();\n64.     }\n65.     \n"}, {"level": 5, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/tps/nacos/NacosTpsControlManager.java", "line_number": 67, "column_number": -1, "description": "Definition of startTpsReport()", "snippet": "64.     }\n65.     \n66. >     protected void startTpsReport() {\n67.         executorService\n68.                 .scheduleWithFixedDelay(new NacosTpsControlManager.TpsMetricsReporter(), 0, 900, TimeUnit.MILLISECONDS);\n"}, {"level": 4, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/tps/nacos/NacosTpsControlManager.java", "line_number": 65, "column_number": -1, "description": "return from a call to NacosTpsControlManager.<init>()", "snippet": "62.         \n63.         startTpsReport();\n64. >     }\n65.     \n66.     protected void startTpsReport() {\n"}, {"level": 3, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ControlManagerCenter.java", "line_number": 85, "column_number": -1, "description": "", "snippet": "82.         if (tpsControlManager == null) {\n83.             Loggers.CONTROL.warn(\"Fail to found tps control manager of name \uff1a\" + tpsManagerName);\n84. >             tpsControlManager = new NacosTpsControlManager();\n85.         }\n86.         \n"}, {"level": 3, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ControlManagerCenter.java", "line_number": 88, "column_number": -1, "description": "return from a call to void ControlManagerCenter.initTpsControlManager()", "snippet": "85.         }\n86.         \n87. >     }\n88.     \n89.     private ControlManagerCenter() {\n"}, {"level": 2, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ControlManagerCenter.java", "line_number": 92, "column_number": -1, "description": "", "snippet": "89.     private ControlManagerCenter() {\n90.         initTpsControlManager();\n91. >         initConnectionManager();\n92.         ruleStorageProxy = new RuleStorageProxy();\n93.     }\n"}, {"level": 3, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ControlManagerCenter.java", "line_number": 49, "column_number": -1, "description": "start of procedure initConnectionManager()", "snippet": "46.     private RuleStorageProxy ruleStorageProxy;\n47.     \n48. >     private void initConnectionManager() {\n49.         \n50.         Collection<ConnectionControlManager> connectionControlManagers = NacosServiceLoader\n"}, {"level": 3, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ControlManagerCenter.java", "line_number": 52, "column_number": -1, "description": "", "snippet": "49.         \n50.         Collection<ConnectionControlManager> connectionControlManagers = NacosServiceLoader\n51. >                 .load(ConnectionControlManager.class);\n52.         String connectionManagerName = ControlConfigs.getInstance().getConnectionManager();\n53.         \n"}, {"level": 4, "filename": "common/src/main/java/com/alibaba/nacos/common/spi/NacosServiceLoader.java", "line_number": 44, "column_number": -1, "description": "start of procedure load(...)", "snippet": "41.      * @return service instances\n42.      */\n43. >     public static <T> Collection<T> load(final Class<T> service) {\n44.         if (SERVICES.containsKey(service)) {\n45.             return newServiceInstances(service);\n"}, {"level": 4, "filename": "common/src/main/java/com/alibaba/nacos/common/spi/NacosServiceLoader.java", "line_number": 45, "column_number": -1, "description": "Taking true branch", "snippet": "42.      */\n43.     public static <T> Collection<T> load(final Class<T> service) {\n44. >         if (SERVICES.containsKey(service)) {\n45.             return newServiceInstances(service);\n46.         }\n"}, {"level": 4, "filename": "common/src/main/java/com/alibaba/nacos/common/spi/NacosServiceLoader.java", "line_number": 46, "column_number": -1, "description": "", "snippet": "43.     public static <T> Collection<T> load(final Class<T> service) {\n44.         if (SERVICES.containsKey(service)) {\n45. >             return newServiceInstances(service);\n46.         }\n47.         Collection<T> result = new LinkedHashSet<>();\n"}, {"level": 5, "filename": "common/src/main/java/com/alibaba/nacos/common/spi/NacosServiceLoader.java", "line_number": 70, "column_number": -1, "description": "start of procedure newServiceInstances(...)", "snippet": "67.      * @return service instances\n68.      */\n69. >     public static <T> Collection<T> newServiceInstances(final Class<T> service) {\n70.         return SERVICES.containsKey(service) ? newServiceInstancesFromCache(service) : Collections.<T>emptyList();\n71.     }\n"}, {"level": 5, "filename": "common/src/main/java/com/alibaba/nacos/common/spi/NacosServiceLoader.java", "line_number": 71, "column_number": -1, "description": "Taking false branch", "snippet": "68.      */\n69.     public static <T> Collection<T> newServiceInstances(final Class<T> service) {\n70. >         return SERVICES.containsKey(service) ? newServiceInstancesFromCache(service) : Collections.<T>emptyList();\n71.     }\n72.     \n"}, {"level": 5, "filename": "common/src/main/java/com/alibaba/nacos/common/spi/NacosServiceLoader.java", "line_number": 71, "column_number": -1, "description": "return from a call to Collection NacosServiceLoader.newServiceInstances(Class)", "snippet": "68.      */\n69.     public static <T> Collection<T> newServiceInstances(final Class<T> service) {\n70. >         return SERVICES.containsKey(service) ? newServiceInstancesFromCache(service) : Collections.<T>emptyList();\n71.     }\n72.     \n"}, {"level": 4, "filename": "common/src/main/java/com/alibaba/nacos/common/spi/NacosServiceLoader.java", "line_number": 46, "column_number": -1, "description": "", "snippet": "43.     public static <T> Collection<T> load(final Class<T> service) {\n44.         if (SERVICES.containsKey(service)) {\n45. >             return newServiceInstances(service);\n46.         }\n47.         Collection<T> result = new LinkedHashSet<>();\n"}, {"level": 4, "filename": "common/src/main/java/com/alibaba/nacos/common/spi/NacosServiceLoader.java", "line_number": 53, "column_number": -1, "description": "return from a call to Collection NacosServiceLoader.load(Class)", "snippet": "50.             cacheServiceClass(service, each);\n51.         }\n52. >         return result;\n53.     }\n54.     \n"}, {"level": 3, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ControlManagerCenter.java", "line_number": 53, "column_number": -1, "description": "", "snippet": "50.         Collection<ConnectionControlManager> connectionControlManagers = NacosServiceLoader\n51.                 .load(ConnectionControlManager.class);\n52. >         String connectionManagerName = ControlConfigs.getInstance().getConnectionManager();\n53.         \n54.         for (ConnectionControlManager connectionControlManagerInternal : connectionControlManagers) {\n"}, {"level": 4, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/configs/ControlConfigs.java", "line_number": 32, "column_number": -1, "description": "start of procedure getInstance()", "snippet": "29.     private static volatile ControlConfigs instance = null;\n30.     \n31. >     public static ControlConfigs getInstance() {\n32.         if (instance == null) {\n33.             synchronized (ControlConfigs.class) {\n"}, {"level": 4, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/configs/ControlConfigs.java", "line_number": 33, "column_number": -1, "description": "Taking false branch", "snippet": "30.     \n31.     public static ControlConfigs getInstance() {\n32. >         if (instance == null) {\n33.             synchronized (ControlConfigs.class) {\n34.                 if (instance == null) {\n"}, {"level": 4, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/configs/ControlConfigs.java", "line_number": 46, "column_number": -1, "description": "return from a call to ControlConfigs ControlConfigs.getInstance()", "snippet": "43.         }\n44.         \n45. >         return instance;\n46.     }\n47.     \n"}, {"level": 3, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ControlManagerCenter.java", "line_number": 53, "column_number": -1, "description": "", "snippet": "50.         Collection<ConnectionControlManager> connectionControlManagers = NacosServiceLoader\n51.                 .load(ConnectionControlManager.class);\n52. >         String connectionManagerName = ControlConfigs.getInstance().getConnectionManager();\n53.         \n54.         for (ConnectionControlManager connectionControlManagerInternal : connectionControlManagers) {\n"}, {"level": 4, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/configs/ControlConfigs.java", "line_number": 101, "column_number": -1, "description": "start of procedure getConnectionManager()", "snippet": "98.     }\n99.     \n100. >     public String getConnectionManager() {\n101.         return connectionManager;\n102.     }\n"}, {"level": 4, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/configs/ControlConfigs.java", "line_number": 102, "column_number": -1, "description": "return from a call to String ControlConfigs.getConnectionManager()", "snippet": "99.     \n100.     public String getConnectionManager() {\n101. >         return connectionManager;\n102.     }\n103.     \n"}, {"level": 3, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ControlManagerCenter.java", "line_number": 55, "column_number": -1, "description": "Taking false branch", "snippet": "52.         String connectionManagerName = ControlConfigs.getInstance().getConnectionManager();\n53.         \n54. >         for (ConnectionControlManager connectionControlManagerInternal : connectionControlManagers) {\n55.             if (connectionControlManagerInternal.getName().equalsIgnoreCase(connectionManagerName)) {\n56.                 Loggers.CONTROL.info(\"Found  connection control manager of name={},class={}\", connectionManagerName,\n"}, {"level": 3, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ControlManagerCenter.java", "line_number": 63, "column_number": -1, "description": "Taking true branch", "snippet": "60.             }\n61.         }\n62. >         if (connectionControlManager == null) {\n63.             Loggers.CONTROL.warn(\"Fail to connection control manager of name \uff1a\" + connectionManagerName);\n64.             connectionControlManager = new NacosConnectionControlManager();\n"}, {"level": 3, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ControlManagerCenter.java", "line_number": 64, "column_number": -1, "description": "Skipping warn(...): unknown method", "snippet": "61.         }\n62.         if (connectionControlManager == null) {\n63. >             Loggers.CONTROL.warn(\"Fail to connection control manager of name \uff1a\" + connectionManagerName);\n64.             connectionControlManager = new NacosConnectionControlManager();\n65.         }\n"}, {"level": 3, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ControlManagerCenter.java", "line_number": 65, "column_number": -1, "description": "", "snippet": "62.         if (connectionControlManager == null) {\n63.             Loggers.CONTROL.warn(\"Fail to connection control manager of name \uff1a\" + connectionManagerName);\n64. >             connectionControlManager = new NacosConnectionControlManager();\n65.         }\n66.         \n"}, {"level": 4, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/connection/nacos/NacosConnectionControlManager.java", "line_number": 40, "column_number": -1, "description": "start of procedure NacosConnectionControlManager()", "snippet": "37.     \n38.     public NacosConnectionControlManager() {\n39. >         super();\n40.     }\n41.     \n"}, {"level": 5, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/connection/ConnectionControlManager.java", "line_number": 56, "column_number": -1, "description": "start of procedure ConnectionControlManager()", "snippet": "53.     private ScheduledExecutorService executorService;\n54.     \n55. >     public ConnectionControlManager() {\n56.         metricsCollectorList = NacosServiceLoader.load(ConnectionMetricsCollector.class);\n57.         Loggers.CONTROL.info(\"Load connection metrics collector,size={},{}\", metricsCollectorList.size(),\n"}, {"level": 5, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/connection/ConnectionControlManager.java", "line_number": 57, "column_number": -1, "description": "", "snippet": "54.     \n55.     public ConnectionControlManager() {\n56. >         metricsCollectorList = NacosServiceLoader.load(ConnectionMetricsCollector.class);\n57.         Loggers.CONTROL.info(\"Load connection metrics collector,size={},{}\", metricsCollectorList.size(),\n58.                 metricsCollectorList);\n"}, {"level": 6, "filename": "common/src/main/java/com/alibaba/nacos/common/spi/NacosServiceLoader.java", "line_number": 44, "column_number": -1, "description": "start of procedure load(...)", "snippet": "41.      * @return service instances\n42.      */\n43. >     public static <T> Collection<T> load(final Class<T> service) {\n44.         if (SERVICES.containsKey(service)) {\n45.             return newServiceInstances(service);\n"}, {"level": 6, "filename": "common/src/main/java/com/alibaba/nacos/common/spi/NacosServiceLoader.java", "line_number": 45, "column_number": -1, "description": "Taking false branch", "snippet": "42.      */\n43.     public static <T> Collection<T> load(final Class<T> service) {\n44. >         if (SERVICES.containsKey(service)) {\n45.             return newServiceInstances(service);\n46.         }\n"}, {"level": 6, "filename": "common/src/main/java/com/alibaba/nacos/common/spi/NacosServiceLoader.java", "line_number": 48, "column_number": -1, "description": "Skipping LinkedHashSet(): unknown method", "snippet": "45.             return newServiceInstances(service);\n46.         }\n47. >         Collection<T> result = new LinkedHashSet<>();\n48.         for (T each : ServiceLoader.load(service)) {\n49.             result.add(each);\n"}, {"level": 6, "filename": "common/src/main/java/com/alibaba/nacos/common/spi/NacosServiceLoader.java", "line_number": 49, "column_number": -1, "description": "Taking false branch", "snippet": "46.         }\n47.         Collection<T> result = new LinkedHashSet<>();\n48. >         for (T each : ServiceLoader.load(service)) {\n49.             result.add(each);\n50.             cacheServiceClass(service, each);\n"}, {"level": 6, "filename": "common/src/main/java/com/alibaba/nacos/common/spi/NacosServiceLoader.java", "line_number": 53, "column_number": -1, "description": "return from a call to Collection NacosServiceLoader.load(Class)", "snippet": "50.             cacheServiceClass(service, each);\n51.         }\n52. >         return result;\n53.     }\n54.     \n"}, {"level": 5, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/connection/ConnectionControlManager.java", "line_number": 57, "column_number": -1, "description": "", "snippet": "54.     \n55.     public ConnectionControlManager() {\n56. >         metricsCollectorList = NacosServiceLoader.load(ConnectionMetricsCollector.class);\n57.         Loggers.CONTROL.info(\"Load connection metrics collector,size={},{}\", metricsCollectorList.size(),\n58.                 metricsCollectorList);\n"}, {"level": 5, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/connection/ConnectionControlManager.java", "line_number": 58, "column_number": -1, "description": "Skipping info(...): unknown method", "snippet": "55.     public ConnectionControlManager() {\n56.         metricsCollectorList = NacosServiceLoader.load(ConnectionMetricsCollector.class);\n57. >         Loggers.CONTROL.info(\"Load connection metrics collector,size={},{}\", metricsCollectorList.size(),\n58.                 metricsCollectorList);\n59.         initConnectionRule();\n"}, {"level": 5, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/connection/ConnectionControlManager.java", "line_number": 60, "column_number": -1, "description": "", "snippet": "57.         Loggers.CONTROL.info(\"Load connection metrics collector,size={},{}\", metricsCollectorList.size(),\n58.                 metricsCollectorList);\n59. >         initConnectionRule();\n60.         if (!metricsCollectorList.isEmpty()) {\n61.             initExecuteService();\n"}, {"level": 6, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/connection/ConnectionControlManager.java", "line_number": 80, "column_number": -1, "description": "start of procedure initConnectionRule()", "snippet": "77.     }\n78.     \n79. >     private void initConnectionRule() {\n80.         RuleStorageProxy ruleStorageProxy = RuleStorageProxy.getInstance();\n81.         String localRuleContent = ruleStorageProxy.getLocalDiskStorage().getConnectionRule();\n"}, {"level": 6, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/connection/ConnectionControlManager.java", "line_number": 81, "column_number": -1, "description": "", "snippet": "78.     \n79.     private void initConnectionRule() {\n80. >         RuleStorageProxy ruleStorageProxy = RuleStorageProxy.getInstance();\n81.         String localRuleContent = ruleStorageProxy.getLocalDiskStorage().getConnectionRule();\n82.         if (StringUtils.isNotBlank(localRuleContent)) {\n"}, {"level": 7, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/RuleStorageProxy.java", "line_number": 78, "column_number": -1, "description": "start of procedure getInstance()", "snippet": "75.     }\n76.     \n77. >     public static final RuleStorageProxy getInstance() {\n78.         return INSTANCE;\n79.     }\n"}, {"level": 7, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/RuleStorageProxy.java", "line_number": 79, "column_number": -1, "description": "return from a call to RuleStorageProxy RuleStorageProxy.getInstance()", "snippet": "76.     \n77.     public static final RuleStorageProxy getInstance() {\n78. >         return INSTANCE;\n79.     }\n80. }\n"}, {"level": 6, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/connection/ConnectionControlManager.java", "line_number": 82, "column_number": -1, "description": "", "snippet": "79.     private void initConnectionRule() {\n80.         RuleStorageProxy ruleStorageProxy = RuleStorageProxy.getInstance();\n81. >         String localRuleContent = ruleStorageProxy.getLocalDiskStorage().getConnectionRule();\n82.         if (StringUtils.isNotBlank(localRuleContent)) {\n83.             Loggers.CONTROL.info(\"Found local disk connection rule content on start up,value  ={}\", localRuleContent);\n"}, {"level": 7, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/RuleStorageProxy.java", "line_number": 70, "column_number": -1, "description": "start of procedure getLocalDiskStorage()", "snippet": "67.     }\n68.     \n69. >     public RuleStorage getLocalDiskStorage() {\n70.         return localDiskRuleStorage;\n71.     }\n"}, {"level": 7, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/RuleStorageProxy.java", "line_number": 71, "column_number": -1, "description": "return from a call to RuleStorage RuleStorageProxy.getLocalDiskStorage()", "snippet": "68.     \n69.     public RuleStorage getLocalDiskStorage() {\n70. >         return localDiskRuleStorage;\n71.     }\n72.     \n"}, {"level": 6, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/connection/ConnectionControlManager.java", "line_number": 82, "column_number": -1, "description": "Skipping getConnectionRule(): unknown method", "snippet": "79.     private void initConnectionRule() {\n80.         RuleStorageProxy ruleStorageProxy = RuleStorageProxy.getInstance();\n81. >         String localRuleContent = ruleStorageProxy.getLocalDiskStorage().getConnectionRule();\n82.         if (StringUtils.isNotBlank(localRuleContent)) {\n83.             Loggers.CONTROL.info(\"Found local disk connection rule content on start up,value  ={}\", localRuleContent);\n"}, {"level": 7, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/RuleStorage.java", "line_number": -1, "column_number": -1, "description": "Definition of getConnectionRule()", "snippet": ""}, {"level": 6, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/connection/ConnectionControlManager.java", "line_number": 83, "column_number": -1, "description": "", "snippet": "80.         RuleStorageProxy ruleStorageProxy = RuleStorageProxy.getInstance();\n81.         String localRuleContent = ruleStorageProxy.getLocalDiskStorage().getConnectionRule();\n82. >         if (StringUtils.isNotBlank(localRuleContent)) {\n83.             Loggers.CONTROL.info(\"Found local disk connection rule content on start up,value  ={}\", localRuleContent);\n84.         } else if (ruleStorageProxy.getExternalStorage() != null\n"}, {"level": 7, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 96, "column_number": -1, "description": "start of procedure isNotBlank(...)", "snippet": "93.      * @return {@code true} if the string is not empty and not null and not whitespace\n94.      */\n95. >     public static boolean isNotBlank(String str) {\n96.         return !isBlank(str);\n97.     }\n"}, {"level": 7, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 97, "column_number": -1, "description": "", "snippet": "94.      */\n95.     public static boolean isNotBlank(String str) {\n96. >         return !isBlank(str);\n97.     }\n98.     \n"}, {"level": 8, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 77, "column_number": -1, "description": "start of procedure isBlank(...)", "snippet": "74.      * @return {@code true} if the string is empty and null and whitespace\n75.      */\n76. >     public static boolean isBlank(final CharSequence cs) {\n77.         int strLen;\n78.         if (cs == null || (strLen = cs.length()) == 0) {\n"}, {"level": 8, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 79, "column_number": -1, "description": "Taking true branch", "snippet": "76.     public static boolean isBlank(final CharSequence cs) {\n77.         int strLen;\n78. >         if (cs == null || (strLen = cs.length()) == 0) {\n79.             return true;\n80.         }\n"}, {"level": 8, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 79, "column_number": -1, "description": "Taking false branch", "snippet": "76.     public static boolean isBlank(final CharSequence cs) {\n77.         int strLen;\n78. >         if (cs == null || (strLen = cs.length()) == 0) {\n79.             return true;\n80.         }\n"}, {"level": 8, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 82, "column_number": -1, "description": "Taking true branch", "snippet": "79.             return true;\n80.         }\n81. >         for (int i = 0; i < strLen; i++) {\n82.             if (!Character.isWhitespace(cs.charAt(i))) {\n83.                 return false;\n"}, {"level": 8, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 83, "column_number": -1, "description": "Taking true branch", "snippet": "80.         }\n81.         for (int i = 0; i < strLen; i++) {\n82. >             if (!Character.isWhitespace(cs.charAt(i))) {\n83.                 return false;\n84.             }\n"}, {"level": 8, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 84, "column_number": -1, "description": "", "snippet": "81.         for (int i = 0; i < strLen; i++) {\n82.             if (!Character.isWhitespace(cs.charAt(i))) {\n83. >                 return false;\n84.             }\n85.         }\n"}, {"level": 8, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 87, "column_number": -1, "description": "return from a call to boolean StringUtils.isBlank(CharSequence)", "snippet": "84.             }\n85.         }\n86. >         return true;\n87.     }\n88.     \n"}, {"level": 7, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 97, "column_number": -1, "description": "Taking true branch", "snippet": "94.      */\n95.     public static boolean isNotBlank(String str) {\n96. >         return !isBlank(str);\n97.     }\n98.     \n"}, {"level": 7, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 97, "column_number": -1, "description": "return from a call to boolean StringUtils.isNotBlank(CharSequence)", "snippet": "94.      */\n95.     public static boolean isNotBlank(String str) {\n96. >         return !isBlank(str);\n97.     }\n98.     \n"}, {"level": 6, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/connection/ConnectionControlManager.java", "line_number": 83, "column_number": -1, "description": "Taking true branch", "snippet": "80.         RuleStorageProxy ruleStorageProxy = RuleStorageProxy.getInstance();\n81.         String localRuleContent = ruleStorageProxy.getLocalDiskStorage().getConnectionRule();\n82. >         if (StringUtils.isNotBlank(localRuleContent)) {\n83.             Loggers.CONTROL.info(\"Found local disk connection rule content on start up,value  ={}\", localRuleContent);\n84.         } else if (ruleStorageProxy.getExternalStorage() != null\n"}, {"level": 6, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/connection/ConnectionControlManager.java", "line_number": 84, "column_number": -1, "description": "Skipping info(...): unknown method", "snippet": "81.         String localRuleContent = ruleStorageProxy.getLocalDiskStorage().getConnectionRule();\n82.         if (StringUtils.isNotBlank(localRuleContent)) {\n83. >             Loggers.CONTROL.info(\"Found local disk connection rule content on start up,value  ={}\", localRuleContent);\n84.         } else if (ruleStorageProxy.getExternalStorage() != null\n85.                 && ruleStorageProxy.getExternalStorage().getConnectionRule() != null) {\n"}, {"level": 6, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/connection/ConnectionControlManager.java", "line_number": 94, "column_number": -1, "description": "", "snippet": "91.         }\n92.         \n93. >         if (StringUtils.isNotBlank(localRuleContent)) {\n94.             connectionControlRule = RuleParserProxy.getInstance().parseConnectionRule(localRuleContent);\n95.             Loggers.CONTROL.info(\"init connection rule end\");\n"}, {"level": 7, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 96, "column_number": -1, "description": "start of procedure isNotBlank(...)", "snippet": "93.      * @return {@code true} if the string is not empty and not null and not whitespace\n94.      */\n95. >     public static boolean isNotBlank(String str) {\n96.         return !isBlank(str);\n97.     }\n"}, {"level": 7, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 97, "column_number": -1, "description": "", "snippet": "94.      */\n95.     public static boolean isNotBlank(String str) {\n96. >         return !isBlank(str);\n97.     }\n98.     \n"}, {"level": 8, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 77, "column_number": -1, "description": "start of procedure isBlank(...)", "snippet": "74.      * @return {@code true} if the string is empty and null and whitespace\n75.      */\n76. >     public static boolean isBlank(final CharSequence cs) {\n77.         int strLen;\n78.         if (cs == null || (strLen = cs.length()) == 0) {\n"}, {"level": 8, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 79, "column_number": -1, "description": "Taking true branch", "snippet": "76.     public static boolean isBlank(final CharSequence cs) {\n77.         int strLen;\n78. >         if (cs == null || (strLen = cs.length()) == 0) {\n79.             return true;\n80.         }\n"}, {"level": 8, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 79, "column_number": -1, "description": "Taking false branch", "snippet": "76.     public static boolean isBlank(final CharSequence cs) {\n77.         int strLen;\n78. >         if (cs == null || (strLen = cs.length()) == 0) {\n79.             return true;\n80.         }\n"}, {"level": 8, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 82, "column_number": -1, "description": "Taking false branch", "snippet": "79.             return true;\n80.         }\n81. >         for (int i = 0; i < strLen; i++) {\n82.             if (!Character.isWhitespace(cs.charAt(i))) {\n83.                 return false;\n"}, {"level": 8, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 87, "column_number": -1, "description": "return from a call to boolean StringUtils.isBlank(CharSequence)", "snippet": "84.             }\n85.         }\n86. >         return true;\n87.     }\n88.     \n"}, {"level": 7, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 97, "column_number": -1, "description": "Taking false branch", "snippet": "94.      */\n95.     public static boolean isNotBlank(String str) {\n96. >         return !isBlank(str);\n97.     }\n98.     \n"}, {"level": 7, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 97, "column_number": -1, "description": "return from a call to boolean StringUtils.isNotBlank(CharSequence)", "snippet": "94.      */\n95.     public static boolean isNotBlank(String str) {\n96. >         return !isBlank(str);\n97.     }\n98.     \n"}, {"level": 6, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/connection/ConnectionControlManager.java", "line_number": 94, "column_number": -1, "description": "Taking false branch", "snippet": "91.         }\n92.         \n93. >         if (StringUtils.isNotBlank(localRuleContent)) {\n94.             connectionControlRule = RuleParserProxy.getInstance().parseConnectionRule(localRuleContent);\n95.             Loggers.CONTROL.info(\"init connection rule end\");\n"}, {"level": 6, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/connection/ConnectionControlManager.java", "line_number": 99, "column_number": -1, "description": "Skipping info(...): unknown method", "snippet": "96.             \n97.         } else {\n98. >             Loggers.CONTROL.info(\"No connection rule content found ,use default empty rule \");\n99.             connectionControlRule = new ConnectionControlRule();\n100.         }\n"}, {"level": 6, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/connection/ConnectionControlManager.java", "line_number": 100, "column_number": -1, "description": "", "snippet": "97.         } else {\n98.             Loggers.CONTROL.info(\"No connection rule content found ,use default empty rule \");\n99. >             connectionControlRule = new ConnectionControlRule();\n100.         }\n101.     }\n"}, {"level": 7, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/connection/rule/ConnectionControlRule.java", "line_number": 27, "column_number": -1, "description": "start of procedure ConnectionControlRule()", "snippet": "24.  * @author shiyiyue\n25.  */\n26. > public class ConnectionControlRule {\n27.     \n28.     private Set<String> monitorIpList = new HashSet<>();\n"}, {"level": 7, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/connection/rule/ConnectionControlRule.java", "line_number": 29, "column_number": -1, "description": "", "snippet": "26. public class ConnectionControlRule {\n27.     \n28. >     private Set<String> monitorIpList = new HashSet<>();\n29.     \n30.     private int countLimit = -1;\n"}, {"level": 7, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/connection/rule/ConnectionControlRule.java", "line_number": 31, "column_number": -1, "description": "return from a call to ConnectionControlRule.<init>()", "snippet": "28.     private Set<String> monitorIpList = new HashSet<>();\n29.     \n30. >     private int countLimit = -1;\n31.     \n32.     public int getCountLimit() {\n"}, {"level": 6, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/connection/ConnectionControlManager.java", "line_number": 100, "column_number": -1, "description": "", "snippet": "97.         } else {\n98.             Loggers.CONTROL.info(\"No connection rule content found ,use default empty rule \");\n99. >             connectionControlRule = new ConnectionControlRule();\n100.         }\n101.     }\n"}, {"level": 6, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/connection/ConnectionControlManager.java", "line_number": 102, "column_number": -1, "description": "return from a call to void ConnectionControlManager.initConnectionRule()", "snippet": "99.             connectionControlRule = new ConnectionControlRule();\n100.         }\n101. >     }\n102.     \n103.     public ConnectionControlRule getConnectionLimitRule() {\n"}, {"level": 5, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/connection/ConnectionControlManager.java", "line_number": 61, "column_number": -1, "description": "Taking true branch", "snippet": "58.                 metricsCollectorList);\n59.         initConnectionRule();\n60. >         if (!metricsCollectorList.isEmpty()) {\n61.             initExecuteService();\n62.             startConnectionMetricsReport();\n"}, {"level": 5, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/connection/ConnectionControlManager.java", "line_number": 62, "column_number": -1, "description": "", "snippet": "59.         initConnectionRule();\n60.         if (!metricsCollectorList.isEmpty()) {\n61. >             initExecuteService();\n62.             startConnectionMetricsReport();\n63.         }\n"}, {"level": 6, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/connection/ConnectionControlManager.java", "line_number": 68, "column_number": -1, "description": "start of procedure initExecuteService()", "snippet": "65.     }\n66.     \n67. >     private void initExecuteService() {\n68.         executorService = ExecutorFactory.newSingleScheduledExecutorService(r -> {\n69.             Thread thread = new Thread(r, \"nacos.plugin.control.connection.reporter\");\n"}, {"level": 6, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/connection/ConnectionControlManager.java", "line_number": 69, "column_number": -1, "description": "", "snippet": "66.     \n67.     private void initExecuteService() {\n68. >         executorService = ExecutorFactory.newSingleScheduledExecutorService(r -> {\n69.             Thread thread = new Thread(r, \"nacos.plugin.control.connection.reporter\");\n70.             thread.setDaemon(true);\n"}, {"level": 7, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/connection/ConnectionControlManager.java", "line_number": 69, "column_number": -1, "description": "start of procedure callsite_com.alibaba.nacos.plugin.control.connection.ConnectionControlManager$Lambda$_4_1()", "snippet": "66.     \n67.     private void initExecuteService() {\n68. >         executorService = ExecutorFactory.newSingleScheduledExecutorService(r -> {\n69.             Thread thread = new Thread(r, \"nacos.plugin.control.connection.reporter\");\n70.             thread.setDaemon(true);\n"}, {"level": 7, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/connection/ConnectionControlManager.java", "line_number": 69, "column_number": -1, "description": "return from a call to ThreadFactory ConnectionControlManager.callsite_com.alibaba.nacos.plugin.control.connection.ConnectionControlManager$Lambda$_4_1()", "snippet": "66.     \n67.     private void initExecuteService() {\n68. >         executorService = ExecutorFactory.newSingleScheduledExecutorService(r -> {\n69.             Thread thread = new Thread(r, \"nacos.plugin.control.connection.reporter\");\n70.             thread.setDaemon(true);\n"}, {"level": 6, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/connection/ConnectionControlManager.java", "line_number": 69, "column_number": -1, "description": "", "snippet": "66.     \n67.     private void initExecuteService() {\n68. >         executorService = ExecutorFactory.newSingleScheduledExecutorService(r -> {\n69.             Thread thread = new Thread(r, \"nacos.plugin.control.connection.reporter\");\n70.             thread.setDaemon(true);\n"}, {"level": 7, "filename": "common/src/main/java/com/alibaba/nacos/common/executor/ExecutorFactory.java", "line_number": 59, "column_number": -1, "description": "start of procedure newSingleScheduledExecutorService(...)", "snippet": "56.     }\n57.     \n58. >     public static ScheduledExecutorService newSingleScheduledExecutorService(final ThreadFactory threadFactory) {\n59.         return Executors.newScheduledThreadPool(1, threadFactory);\n60.     }\n"}, {"level": 7, "filename": "common/src/main/java/com/alibaba/nacos/common/executor/ExecutorFactory.java", "line_number": 60, "column_number": -1, "description": "return from a call to ScheduledExecutorService ExecutorFactory.newSingleScheduledExecutorService(ConnectionControlManager$Lambda$_4_1)", "snippet": "57.     \n58.     public static ScheduledExecutorService newSingleScheduledExecutorService(final ThreadFactory threadFactory) {\n59. >         return Executors.newScheduledThreadPool(1, threadFactory);\n60.     }\n61.     \n"}, {"level": 6, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/connection/ConnectionControlManager.java", "line_number": 69, "column_number": -1, "description": "", "snippet": "66.     \n67.     private void initExecuteService() {\n68. >         executorService = ExecutorFactory.newSingleScheduledExecutorService(r -> {\n69.             Thread thread = new Thread(r, \"nacos.plugin.control.connection.reporter\");\n70.             thread.setDaemon(true);\n"}, {"level": 6, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/connection/ConnectionControlManager.java", "line_number": 74, "column_number": -1, "description": "return from a call to void ConnectionControlManager.initExecuteService()", "snippet": "71.             return thread;\n72.         });\n73. >     }\n74.     \n75.     private void startConnectionMetricsReport() {\n"}, {"level": 5, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/connection/ConnectionControlManager.java", "line_number": 63, "column_number": -1, "description": "Skipping startConnectionMetricsReport(): empty list of specs", "snippet": "60.         if (!metricsCollectorList.isEmpty()) {\n61.             initExecuteService();\n62. >             startConnectionMetricsReport();\n63.         }\n64.         \n"}, {"level": 6, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/connection/ConnectionControlManager.java", "line_number": 76, "column_number": -1, "description": "Definition of startConnectionMetricsReport()", "snippet": "73.     }\n74.     \n75. >     private void startConnectionMetricsReport() {\n76.         executorService.scheduleWithFixedDelay(new ConnectionMetricsReporter(), 0, 3000, TimeUnit.MILLISECONDS);\n77.     }\n"}, {"level": 5, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/connection/ConnectionControlManager.java", "line_number": 66, "column_number": -1, "description": "return from a call to ConnectionControlManager.<init>()", "snippet": "63.         }\n64.         \n65. >     }\n66.     \n67.     private void initExecuteService() {\n"}, {"level": 4, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/connection/nacos/NacosConnectionControlManager.java", "line_number": 41, "column_number": -1, "description": "return from a call to NacosConnectionControlManager.<init>()", "snippet": "38.     public NacosConnectionControlManager() {\n39.         super();\n40. >     }\n41.     \n42.     @Override\n"}, {"level": 3, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ControlManagerCenter.java", "line_number": 65, "column_number": -1, "description": "", "snippet": "62.         if (connectionControlManager == null) {\n63.             Loggers.CONTROL.warn(\"Fail to connection control manager of name \uff1a\" + connectionManagerName);\n64. >             connectionControlManager = new NacosConnectionControlManager();\n65.         }\n66.         \n"}, {"level": 3, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ControlManagerCenter.java", "line_number": 68, "column_number": -1, "description": "return from a call to void ControlManagerCenter.initConnectionManager()", "snippet": "65.         }\n66.         \n67. >     }\n68.     \n69.     private void initTpsControlManager() {\n"}, {"level": 2, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ControlManagerCenter.java", "line_number": 93, "column_number": -1, "description": "Skipping RuleStorageProxy(): empty list of specs", "snippet": "90.         initTpsControlManager();\n91.         initConnectionManager();\n92. >         ruleStorageProxy = new RuleStorageProxy();\n93.     }\n94.     \n"}, {"level": 3, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/RuleStorageProxy.java", "line_number": 44, "column_number": -1, "description": "Definition of RuleStorageProxy()", "snippet": "41.     ControlRuleChangeActivator controlRuleChangeActivator = null;\n42.     \n43. >     public RuleStorageProxy() {\n44.         \n45.         Collection<ExternalRuleStorage> persistRuleActivators = NacosServiceLoader.load(ExternalRuleStorage.class);\n"}, {"level": 2, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ControlManagerCenter.java", "line_number": 93, "column_number": -1, "description": "", "snippet": "90.         initTpsControlManager();\n91.         initConnectionManager();\n92. >         ruleStorageProxy = new RuleStorageProxy();\n93.     }\n94.     \n"}, {"level": 2, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ControlManagerCenter.java", "line_number": 94, "column_number": -1, "description": "return from a call to ControlManagerCenter.<init>()", "snippet": "91.         initConnectionManager();\n92.         ruleStorageProxy = new RuleStorageProxy();\n93. >     }\n94.     \n95.     public RuleStorageProxy getRuleStorageProxy() {\n"}, {"level": 1, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ControlManagerCenter.java", "line_number": 116, "column_number": -1, "description": "", "snippet": "113.             synchronized (ControlManagerCenter.class) {\n114.                 if (instance == null) {\n115. >                     instance = new ControlManagerCenter();\n116.                 }\n117.             }\n"}, {"level": 1, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ControlManagerCenter.java", "line_number": 118, "column_number": -1, "description": "", "snippet": "115.                     instance = new ControlManagerCenter();\n116.                 }\n117. >             }\n118.         }\n119.         return instance;\n"}, {"level": 1, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ControlManagerCenter.java", "line_number": 120, "column_number": -1, "description": "return from a call to ControlManagerCenter ControlManagerCenter.getInstance()", "snippet": "117.             }\n118.         }\n119. >         return instance;\n120.     }\n121.     \n"}, {"level": 0, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/ControlRuleChangeActivator.java", "line_number": 60, "column_number": -1, "description": "", "snippet": "57.             }\n58.             try {\n59. >                 RuleStorageProxy ruleStorageProxy = ControlManagerCenter.getInstance().getRuleStorageProxy();\n60.                 \n61.                 if (event.isExternal()) {\n"}, {"level": 1, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ControlManagerCenter.java", "line_number": 96, "column_number": -1, "description": "start of procedure getRuleStorageProxy()", "snippet": "93.     }\n94.     \n95. >     public RuleStorageProxy getRuleStorageProxy() {\n96.         return ruleStorageProxy;\n97.     }\n"}, {"level": 1, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ControlManagerCenter.java", "line_number": 97, "column_number": -1, "description": "return from a call to RuleStorageProxy ControlManagerCenter.getRuleStorageProxy()", "snippet": "94.     \n95.     public RuleStorageProxy getRuleStorageProxy() {\n96. >         return ruleStorageProxy;\n97.     }\n98.     \n"}, {"level": 0, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/ControlRuleChangeActivator.java", "line_number": 62, "column_number": -1, "description": "", "snippet": "59.                 RuleStorageProxy ruleStorageProxy = ControlManagerCenter.getInstance().getRuleStorageProxy();\n60.                 \n61. >                 if (event.isExternal()) {\n62.                     if (ruleStorageProxy.getExternalStorage() != null) {\n63.                         String persistTpsRule = ruleStorageProxy.getExternalStorage().getTpsRule(pointName);\n"}, {"level": 1, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/event/TpsControlRuleChangeEvent.java", "line_number": 46, "column_number": -1, "description": "start of procedure isExternal()", "snippet": "43.     }\n44.     \n45. >     public boolean isExternal() {\n46.         return external;\n47.     }\n"}, {"level": 1, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/event/TpsControlRuleChangeEvent.java", "line_number": 47, "column_number": -1, "description": "return from a call to boolean TpsControlRuleChangeEvent.isExternal()", "snippet": "44.     \n45.     public boolean isExternal() {\n46. >         return external;\n47.     }\n48.     \n"}, {"level": 0, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/ControlRuleChangeActivator.java", "line_number": 62, "column_number": -1, "description": "Taking false branch", "snippet": "59.                 RuleStorageProxy ruleStorageProxy = ControlManagerCenter.getInstance().getRuleStorageProxy();\n60.                 \n61. >                 if (event.isExternal()) {\n62.                     if (ruleStorageProxy.getExternalStorage() != null) {\n63.                         String persistTpsRule = ruleStorageProxy.getExternalStorage().getTpsRule(pointName);\n"}, {"level": 0, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/ControlRuleChangeActivator.java", "line_number": 73, "column_number": -1, "description": "", "snippet": "70.                     \n71.                 }\n72. >                 String tpsRuleContent = ruleStorageProxy.getLocalDiskStorage().getTpsRule(pointName);\n73.                 \n74.                 TpsControlRule tpsControlRule = StringUtils.isBlank(tpsRuleContent) ? new TpsControlRule()\n"}, {"level": 1, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/RuleStorageProxy.java", "line_number": 70, "column_number": -1, "description": "start of procedure getLocalDiskStorage()", "snippet": "67.     }\n68.     \n69. >     public RuleStorage getLocalDiskStorage() {\n70.         return localDiskRuleStorage;\n71.     }\n"}, {"level": 1, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/RuleStorageProxy.java", "line_number": 71, "column_number": -1, "description": "return from a call to RuleStorage RuleStorageProxy.getLocalDiskStorage()", "snippet": "68.     \n69.     public RuleStorage getLocalDiskStorage() {\n70. >         return localDiskRuleStorage;\n71.     }\n72.     \n"}, {"level": 0, "filename": "plugin/control/src/main/java/com/alibaba/nacos/plugin/control/ruleactivator/ControlRuleChangeActivator.java", "line_number": 73, "column_number": -1, "description": "", "snippet": "70.                     \n71.                 }\n72. >                 String tpsRuleContent = ruleStorageProxy.getLocalDiskStorage().getTpsRule(pointName);\n73.                 \n74.                 TpsControlRule tpsControlRule = StringUtils.isBlank(tpsRuleContent) ? new TpsControlRule()\n"}]}, {"url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey2.java", "rawCode": "/*\n * Copyright 1999-2018 Alibaba Group Holding Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.alibaba.nacos.config.server.utils;\n\nimport com.alibaba.nacos.common.utils.StringUtils;\n\n/**\n * Group key util.\n *\n * @author Nacos\n */\npublic class GroupKey2 {\n    \n    public static String getKey(String dataId, String group) {\n        StringBuilder sb = new StringBuilder();\n        urlEncode(dataId, sb);\n        sb.append('+');\n        urlEncode(group, sb);\n        return sb.toString();\n    }\n    \n    public static String getKey(String dataId, String group, String tenant) {\n        StringBuilder sb = new StringBuilder();\n        urlEncode(dataId, sb);\n        sb.append('+');\n        urlEncode(group, sb);\n        if (StringUtils.isNotEmpty(tenant)) {\n            sb.append('+');\n            urlEncode(tenant, sb);\n        }\n        return sb.toString();\n    }\n    \n    /**\n     * Parse the group key.\n     */\n    public static String[] parseKey(String groupKey) {\n        StringBuilder sb = new StringBuilder();\n        String dataId = null;\n        String group = null;\n        String tenant = null;\n        \n        for (int i = 0; i < groupKey.length(); ++i) {\n            char c = groupKey.charAt(i);\n            if ('+' == c) {\n                if (null == dataId) {\n                    dataId = sb.toString();\n                    sb.setLength(0);\n                } else if (null == group) {\n                    group = sb.toString();\n                    sb.setLength(0);\n                } else {\n                    throw new IllegalArgumentException(\"invalid groupkey:\" + groupKey);\n                }\n            } else if ('%' == c) {\n                char next = groupKey.charAt(++i);\n                char nextnext = groupKey.charAt(++i);\n                if ('2' == next && 'B' == nextnext) {\n                    sb.append('+');\n                } else if ('2' == next && '5' == nextnext) {\n                    sb.append('%');\n                } else {\n                    throw new IllegalArgumentException(\"invalid groupkey:\" + groupKey);\n                }\n            } else {\n                sb.append(c);\n            }\n        }\n        \n        if (StringUtils.isBlank(group)) {\n            group = sb.toString();\n        } else {\n            tenant = sb.toString();\n        }\n        if (group.length() == 0) {\n            throw new IllegalArgumentException(\"invalid groupkey:\" + groupKey);\n        }\n    \n        return new String[] {dataId, group, tenant};\n    }\n    \n    /**\n     * + -> %2B % -> %25.\n     */\n    static void urlEncode(String str, StringBuilder sb) {\n        for (int idx = 0; idx < str.length(); ++idx) {\n            char c = str.charAt(idx);\n            if ('+' == c) {\n                sb.append(\"%2B\");\n            } else if ('%' == c) {\n                sb.append(\"%25\");\n            } else {\n                sb.append(c);\n            }\n        }\n    }\n    \n}\n", "methodName": "com.alibaba.nacos.config.server.utils.GroupKey2.parseKey(java.lang.String):java.lang.String[]", "exampleID": 64, "dataset": "infer", "filepath": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey2.java", "line": 89, "sink": "group", "source": "group", "sourceLine": 85, "qualifier": "$$group/$ could be null, and is @@dereferenced/@", "steps": [{"line": 85, "source": "group", "filepath": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey2.java", "methodName": "com.alibaba.nacos.config.server.utils.GroupKey2.parseKey(java.lang.String):java.lang.String[]", "exampleID": 65}], "line_number": 85, "records": [], "combined_records": [], "infer_explore": [{"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey2.java", "line_number": 51, "column_number": -1, "description": "start of procedure parseKey(...)", "snippet": "48.      * Parse the group key.\n49.      */\n50. >     public static String[] parseKey(String groupKey) {\n51.         StringBuilder sb = new StringBuilder();\n52.         String dataId = null;\n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey2.java", "line_number": 52, "column_number": -1, "description": "Skipping StringBuilder(): unknown method", "snippet": "49.      */\n50.     public static String[] parseKey(String groupKey) {\n51. >         StringBuilder sb = new StringBuilder();\n52.         String dataId = null;\n53.         String group = null;\n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey2.java", "line_number": 53, "column_number": -1, "description": "", "snippet": "50.     public static String[] parseKey(String groupKey) {\n51.         StringBuilder sb = new StringBuilder();\n52. >         String dataId = null;\n53.         String group = null;\n54.         String tenant = null;\n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey2.java", "line_number": 54, "column_number": -1, "description": "", "snippet": "51.         StringBuilder sb = new StringBuilder();\n52.         String dataId = null;\n53. >         String group = null;\n54.         String tenant = null;\n55.         \n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey2.java", "line_number": 55, "column_number": -1, "description": "", "snippet": "52.         String dataId = null;\n53.         String group = null;\n54. >         String tenant = null;\n55.         \n56.         for (int i = 0; i < groupKey.length(); ++i) {\n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey2.java", "line_number": 57, "column_number": -1, "description": "Taking true branch", "snippet": "54.         String tenant = null;\n55.         \n56. >         for (int i = 0; i < groupKey.length(); ++i) {\n57.             char c = groupKey.charAt(i);\n58.             if ('+' == c) {\n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey2.java", "line_number": 58, "column_number": -1, "description": "Skipping charAt(...): unknown method", "snippet": "55.         \n56.         for (int i = 0; i < groupKey.length(); ++i) {\n57. >             char c = groupKey.charAt(i);\n58.             if ('+' == c) {\n59.                 if (null == dataId) {\n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey2.java", "line_number": 59, "column_number": -1, "description": "Taking true branch", "snippet": "56.         for (int i = 0; i < groupKey.length(); ++i) {\n57.             char c = groupKey.charAt(i);\n58. >             if ('+' == c) {\n59.                 if (null == dataId) {\n60.                     dataId = sb.toString();\n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey2.java", "line_number": 60, "column_number": -1, "description": "Taking true branch", "snippet": "57.             char c = groupKey.charAt(i);\n58.             if ('+' == c) {\n59. >                 if (null == dataId) {\n60.                     dataId = sb.toString();\n61.                     sb.setLength(0);\n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey2.java", "line_number": 61, "column_number": -1, "description": "Skipping toString(): unknown method", "snippet": "58.             if ('+' == c) {\n59.                 if (null == dataId) {\n60. >                     dataId = sb.toString();\n61.                     sb.setLength(0);\n62.                 } else if (null == group) {\n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey2.java", "line_number": 62, "column_number": -1, "description": "Skipping setLength(...): unknown method", "snippet": "59.                 if (null == dataId) {\n60.                     dataId = sb.toString();\n61. >                     sb.setLength(0);\n62.                 } else if (null == group) {\n63.                     group = sb.toString();\n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey2.java", "line_number": 57, "column_number": -1, "description": "Taking true branch", "snippet": "54.         String tenant = null;\n55.         \n56. >         for (int i = 0; i < groupKey.length(); ++i) {\n57.             char c = groupKey.charAt(i);\n58.             if ('+' == c) {\n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey2.java", "line_number": 58, "column_number": -1, "description": "Skipping charAt(...): unknown method", "snippet": "55.         \n56.         for (int i = 0; i < groupKey.length(); ++i) {\n57. >             char c = groupKey.charAt(i);\n58.             if ('+' == c) {\n59.                 if (null == dataId) {\n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey2.java", "line_number": 59, "column_number": -1, "description": "Taking true branch", "snippet": "56.         for (int i = 0; i < groupKey.length(); ++i) {\n57.             char c = groupKey.charAt(i);\n58. >             if ('+' == c) {\n59.                 if (null == dataId) {\n60.                     dataId = sb.toString();\n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey2.java", "line_number": 60, "column_number": -1, "description": "Taking true branch", "snippet": "57.             char c = groupKey.charAt(i);\n58.             if ('+' == c) {\n59. >                 if (null == dataId) {\n60.                     dataId = sb.toString();\n61.                     sb.setLength(0);\n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey2.java", "line_number": 61, "column_number": -1, "description": "Skipping toString(): unknown method", "snippet": "58.             if ('+' == c) {\n59.                 if (null == dataId) {\n60. >                     dataId = sb.toString();\n61.                     sb.setLength(0);\n62.                 } else if (null == group) {\n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey2.java", "line_number": 62, "column_number": -1, "description": "Skipping setLength(...): unknown method", "snippet": "59.                 if (null == dataId) {\n60.                     dataId = sb.toString();\n61. >                     sb.setLength(0);\n62.                 } else if (null == group) {\n63.                     group = sb.toString();\n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey2.java", "line_number": 57, "column_number": -1, "description": "Taking false branch", "snippet": "54.         String tenant = null;\n55.         \n56. >         for (int i = 0; i < groupKey.length(); ++i) {\n57.             char c = groupKey.charAt(i);\n58.             if ('+' == c) {\n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey2.java", "line_number": 84, "column_number": -1, "description": "", "snippet": "81.         }\n82.         \n83. >         if (StringUtils.isBlank(group)) {\n84.             group = sb.toString();\n85.         } else {\n"}, {"level": 1, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 77, "column_number": -1, "description": "start of procedure isBlank(...)", "snippet": "74.      * @return {@code true} if the string is empty and null and whitespace\n75.      */\n76. >     public static boolean isBlank(final CharSequence cs) {\n77.         int strLen;\n78.         if (cs == null || (strLen = cs.length()) == 0) {\n"}, {"level": 1, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 79, "column_number": -1, "description": "Taking false branch", "snippet": "76.     public static boolean isBlank(final CharSequence cs) {\n77.         int strLen;\n78. >         if (cs == null || (strLen = cs.length()) == 0) {\n79.             return true;\n80.         }\n"}, {"level": 1, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 80, "column_number": -1, "description": "", "snippet": "77.         int strLen;\n78.         if (cs == null || (strLen = cs.length()) == 0) {\n79. >             return true;\n80.         }\n81.         for (int i = 0; i < strLen; i++) {\n"}, {"level": 1, "filename": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "line_number": 87, "column_number": -1, "description": "return from a call to boolean StringUtils.isBlank(CharSequence)", "snippet": "84.             }\n85.         }\n86. >         return true;\n87.     }\n88.     \n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey2.java", "line_number": 84, "column_number": -1, "description": "Taking true branch", "snippet": "81.         }\n82.         \n83. >         if (StringUtils.isBlank(group)) {\n84.             group = sb.toString();\n85.         } else {\n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey2.java", "line_number": 85, "column_number": -1, "description": "Skipping toString(): unknown method", "snippet": "82.         \n83.         if (StringUtils.isBlank(group)) {\n84. >             group = sb.toString();\n85.         } else {\n86.             tenant = sb.toString();\n"}, {"level": 0, "filename": "config/src/main/java/com/alibaba/nacos/config/server/utils/GroupKey2.java", "line_number": 89, "column_number": -1, "description": "", "snippet": "86.             tenant = sb.toString();\n87.         }\n88. >         if (group.length() == 0) {\n89.             throw new IllegalArgumentException(\"invalid groupkey:\" + groupKey);\n90.         }\n"}]}, {"url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/common/src/main/java/com/alibaba/nacos/common/pathencoder/PathEncoderManager.java", "rawCode": "/*\n * Copyright 1999-2023 Alibaba Group Holding Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.alibaba.nacos.common.pathencoder;\n\nimport com.alibaba.nacos.common.spi.NacosServiceLoader;\n\nimport java.nio.charset.Charset;\nimport java.util.Collection;\n\n/**\n * To expose interface from {@link PathEncoder}.\n *\n * @author daydreamer-ia\n */\npublic class PathEncoderManager {\n\n    /**\n     * singleton.\n     */\n    private static final PathEncoderManager INSTANCE = new PathEncoderManager();\n\n    /**\n     * encoder.\n     */\n    private PathEncoder targetEncoder = null;\n\n    private PathEncoderManager() {\n        // load path encoder\n        Collection<PathEncoder> load = NacosServiceLoader.load(PathEncoder.class);\n        if (!load.isEmpty()) {\n            String currentOs = System.getProperty(\"os.name\").toLowerCase();\n            for (PathEncoder pathEncoder : load) {\n                // match first\n                if (currentOs.contains(pathEncoder.name())) {\n                    targetEncoder = pathEncoder;\n                    break;\n                }\n            }\n        }\n    }\n\n    /**\n     * encode path if necessary.\n     *\n     * @param path    origin path\n     * @param charset charset of origin path\n     * @return encoded path\n     */\n    public String encode(String path, String charset) {\n        if (path == null || charset == null) {\n            return path;\n        }\n        if (targetEncoder != null && targetEncoder.needEncode(path)) {\n            return targetEncoder.encode(path, charset);\n        }\n        return path;\n    }\n\n    /**\n     * encode path if necessary.\n     *\n     * @param path origin path\n     * @return encoded path\n     */\n    public String encode(String path) {\n        return encode(path, Charset.defaultCharset().name());\n    }\n\n    /**\n     * decode path.\n     *\n     * @param path    encoded path\n     * @param charset charset of encoded path\n     * @return origin path\n     */\n    public String decode(String path, String charset) {\n        if (path == null || charset == null) {\n            return path;\n        }\n        if (targetEncoder != null) {\n            return targetEncoder.decode(path, charset);\n        }\n        return path;\n    }\n\n    /**\n     * decode path.\n     *\n     * @param path encoded path\n     * @return origin path\n     */\n    public String decode(String path) {\n        return decode(path, Charset.defaultCharset().name());\n    }\n\n    /**\n     * get singleton.\n     *\n     * @return singleton.\n     */\n    public static PathEncoderManager getInstance() {\n        return INSTANCE;\n    }\n\n}\n", "methodName": "com.alibaba.nacos.common.pathencoder.PathEncoderManager.<init>()", "exampleID": 66, "dataset": "infer", "filepath": "common/src/main/java/com/alibaba/nacos/common/pathencoder/PathEncoderManager.java", "line": 45, "sink": "getProperty(\"os.name\")", "source": "getProperty(\"os.name\")", "sourceLine": 45, "qualifier": "$$getProperty(\"os.name\")/$ could return null, and is @@dereferenced/@", "steps": [{"line": 45, "source": "getProperty(\"os.name\")", "filepath": "common/src/main/java/com/alibaba/nacos/common/pathencoder/PathEncoderManager.java", "methodName": "com.alibaba.nacos.common.pathencoder.PathEncoderManager.<init>()", "exampleID": 67}], "line_number": 45, "records": [], "combined_records": [], "infer_explore": [{"level": 0, "filename": "common/src/main/java/com/alibaba/nacos/common/pathencoder/PathEncoderManager.java", "line_number": 41, "column_number": -1, "description": "start of procedure PathEncoderManager()", "snippet": "38.     private PathEncoder targetEncoder = null;\n39. \n40. >     private PathEncoderManager() {\n41.         // load path encoder\n42.         Collection<PathEncoder> load = NacosServiceLoader.load(PathEncoder.class);\n"}, {"level": 0, "filename": "common/src/main/java/com/alibaba/nacos/common/pathencoder/PathEncoderManager.java", "line_number": 39, "column_number": -1, "description": "", "snippet": "36.      * encoder.\n37.      */\n38. >     private PathEncoder targetEncoder = null;\n39. \n40.     private PathEncoderManager() {\n"}, {"level": 0, "filename": "common/src/main/java/com/alibaba/nacos/common/pathencoder/PathEncoderManager.java", "line_number": 43, "column_number": -1, "description": "", "snippet": "40.     private PathEncoderManager() {\n41.         // load path encoder\n42. >         Collection<PathEncoder> load = NacosServiceLoader.load(PathEncoder.class);\n43.         if (!load.isEmpty()) {\n44.             String currentOs = System.getProperty(\"os.name\").toLowerCase();\n"}, {"level": 1, "filename": "common/src/main/java/com/alibaba/nacos/common/spi/NacosServiceLoader.java", "line_number": 44, "column_number": -1, "description": "start of procedure load(...)", "snippet": "41.      * @return service instances\n42.      */\n43. >     public static <T> Collection<T> load(final Class<T> service) {\n44.         if (SERVICES.containsKey(service)) {\n45.             return newServiceInstances(service);\n"}, {"level": 1, "filename": "common/src/main/java/com/alibaba/nacos/common/spi/NacosServiceLoader.java", "line_number": 45, "column_number": -1, "description": "Taking true branch", "snippet": "42.      */\n43.     public static <T> Collection<T> load(final Class<T> service) {\n44. >         if (SERVICES.containsKey(service)) {\n45.             return newServiceInstances(service);\n46.         }\n"}, {"level": 1, "filename": "common/src/main/java/com/alibaba/nacos/common/spi/NacosServiceLoader.java", "line_number": 46, "column_number": -1, "description": "", "snippet": "43.     public static <T> Collection<T> load(final Class<T> service) {\n44.         if (SERVICES.containsKey(service)) {\n45. >             return newServiceInstances(service);\n46.         }\n47.         Collection<T> result = new LinkedHashSet<>();\n"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/spi/NacosServiceLoader.java", "line_number": 70, "column_number": -1, "description": "start of procedure newServiceInstances(...)", "snippet": "67.      * @return service instances\n68.      */\n69. >     public static <T> Collection<T> newServiceInstances(final Class<T> service) {\n70.         return SERVICES.containsKey(service) ? newServiceInstancesFromCache(service) : Collections.<T>emptyList();\n71.     }\n"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/spi/NacosServiceLoader.java", "line_number": 71, "column_number": -1, "description": "Taking false branch", "snippet": "68.      */\n69.     public static <T> Collection<T> newServiceInstances(final Class<T> service) {\n70. >         return SERVICES.containsKey(service) ? newServiceInstancesFromCache(service) : Collections.<T>emptyList();\n71.     }\n72.     \n"}, {"level": 2, "filename": "common/src/main/java/com/alibaba/nacos/common/spi/NacosServiceLoader.java", "line_number": 71, "column_number": -1, "description": "return from a call to Collection NacosServiceLoader.newServiceInstances(Class)", "snippet": "68.      */\n69.     public static <T> Collection<T> newServiceInstances(final Class<T> service) {\n70. >         return SERVICES.containsKey(service) ? newServiceInstancesFromCache(service) : Collections.<T>emptyList();\n71.     }\n72.     \n"}, {"level": 1, "filename": "common/src/main/java/com/alibaba/nacos/common/spi/NacosServiceLoader.java", "line_number": 46, "column_number": -1, "description": "", "snippet": "43.     public static <T> Collection<T> load(final Class<T> service) {\n44.         if (SERVICES.containsKey(service)) {\n45. >             return newServiceInstances(service);\n46.         }\n47.         Collection<T> result = new LinkedHashSet<>();\n"}, {"level": 1, "filename": "common/src/main/java/com/alibaba/nacos/common/spi/NacosServiceLoader.java", "line_number": 53, "column_number": -1, "description": "return from a call to Collection NacosServiceLoader.load(Class)", "snippet": "50.             cacheServiceClass(service, each);\n51.         }\n52. >         return result;\n53.     }\n54.     \n"}, {"level": 0, "filename": "common/src/main/java/com/alibaba/nacos/common/pathencoder/PathEncoderManager.java", "line_number": 44, "column_number": -1, "description": "Taking true branch", "snippet": "41.         // load path encoder\n42.         Collection<PathEncoder> load = NacosServiceLoader.load(PathEncoder.class);\n43. >         if (!load.isEmpty()) {\n44.             String currentOs = System.getProperty(\"os.name\").toLowerCase();\n45.             for (PathEncoder pathEncoder : load) {\n"}, {"level": 0, "filename": "common/src/main/java/com/alibaba/nacos/common/pathencoder/PathEncoderManager.java", "line_number": 45, "column_number": -1, "description": "", "snippet": "42.         Collection<PathEncoder> load = NacosServiceLoader.load(PathEncoder.class);\n43.         if (!load.isEmpty()) {\n44. >             String currentOs = System.getProperty(\"os.name\").toLowerCase();\n45.             for (PathEncoder pathEncoder : load) {\n46.                 // match first\n"}]}, {"url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/utils/EnvUtil.java", "rawCode": "/*\n * Copyright 1999-2018 Alibaba Group Holding Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.alibaba.nacos.client.utils;\n\nimport com.alibaba.nacos.api.common.Constants;\nimport org.slf4j.Logger;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * env util.\n *\n * @author Nacos\n */\npublic class EnvUtil {\n    \n    public static final Logger LOGGER = LogUtils.logger(EnvUtil.class);\n    \n    private static String selfAmoryTag;\n    \n    private static String selfVipserverTag;\n    \n    private static String selfLocationTag;\n    \n    public static void setSelfEnv(Map<String, List<String>> headers) {\n        if (headers != null) {\n            List<String> amoryTagTmp = headers.get(Constants.AMORY_TAG);\n            if (amoryTagTmp == null) {\n                if (selfAmoryTag != null) {\n                    selfAmoryTag = null;\n                    LOGGER.warn(\"selfAmoryTag:null\");\n                }\n            } else {\n                String amoryTagTmpStr = listToString(amoryTagTmp);\n                if (!amoryTagTmpStr.equals(selfAmoryTag)) {\n                    selfAmoryTag = amoryTagTmpStr;\n                    LOGGER.warn(\"selfAmoryTag:{}\", selfAmoryTag);\n                }\n            }\n            \n            List<String> vipserverTagTmp = headers.get(Constants.VIPSERVER_TAG);\n            if (vipserverTagTmp == null) {\n                if (selfVipserverTag != null) {\n                    selfVipserverTag = null;\n                    LOGGER.warn(\"selfVipserverTag:null\");\n                }\n            } else {\n                String vipserverTagTmpStr = listToString(vipserverTagTmp);\n                if (!vipserverTagTmpStr.equals(selfVipserverTag)) {\n                    selfVipserverTag = vipserverTagTmpStr;\n                    LOGGER.warn(\"selfVipserverTag:{}\", selfVipserverTag);\n                }\n            }\n            List<String> locationTagTmp = headers.get(Constants.LOCATION_TAG);\n            if (locationTagTmp == null) {\n                if (selfLocationTag != null) {\n                    selfLocationTag = null;\n                    LOGGER.warn(\"selfLocationTag:null\");\n                }\n            } else {\n                String locationTagTmpStr = listToString(locationTagTmp);\n                if (!locationTagTmpStr.equals(selfLocationTag)) {\n                    selfLocationTag = locationTagTmpStr;\n                    LOGGER.warn(\"selfLocationTag:{}\", selfLocationTag);\n                }\n            }\n        }\n    }\n    \n    public static String getSelfAmoryTag() {\n        return selfAmoryTag;\n    }\n    \n    public static String getSelfVipserverTag() {\n        return selfVipserverTag;\n    }\n    \n    public static String getSelfLocationTag() {\n        return selfLocationTag;\n    }\n    \n    private static String listToString(List<String> list) {\n        if (list == null || list.isEmpty()) {\n            return null;\n        }\n        StringBuilder result = new StringBuilder();\n        for (String string : list) {\n            result.append(string);\n            result.append(',');\n        }\n        return result.substring(0, result.length() - 1);\n    }\n}", "methodName": "com.alibaba.nacos.client.utils.EnvUtil.setSelfEnv(java.util.Map):void", "exampleID": 68, "dataset": "infer", "filepath": "client/src/main/java/com/alibaba/nacos/client/utils/EnvUtil.java", "line": 50, "sink": "amoryTagTmpStr", "source": "amoryTagTmpStr", "sourceLine": 49, "qualifier": "$$amoryTagTmpStr/$ could be null, and is @@dereferenced/@", "steps": [{"line": 97, "source": "amoryTagTmpStr", "filepath": "client/src/main/java/com/alibaba/nacos/client/utils/EnvUtil.java", "methodName": "EnvUtil.listToString", "exampleID": 69}], "line_number": 49, "records": [{"level": 1, "filename": "client/src/main/java/com/alibaba/nacos/client/utils/EnvUtil.java", "line_number": 97, "column_number": -1, "description": "start of procedure listToString(...)", "snippet": "    private static String listToString(List<String> list) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/utils/EnvUtil.java", "methodName": "listToString"}, {"level": 1, "filename": "client/src/main/java/com/alibaba/nacos/client/utils/EnvUtil.java", "line_number": 98, "column_number": -1, "description": "Taking true branch", "snippet": "        if (list == null || list.isEmpty()) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/utils/EnvUtil.java", "methodName": "listToString"}, {"level": 1, "filename": "client/src/main/java/com/alibaba/nacos/client/utils/EnvUtil.java", "line_number": 98, "column_number": -1, "description": "Taking true branch", "snippet": "        if (list == null || list.isEmpty()) {", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/utils/EnvUtil.java", "methodName": "listToString"}, {"level": 1, "filename": "client/src/main/java/com/alibaba/nacos/client/utils/EnvUtil.java", "line_number": 99, "column_number": -1, "description": "", "snippet": "            return null;", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/utils/EnvUtil.java", "methodName": "listToString"}, {"level": 1, "filename": "client/src/main/java/com/alibaba/nacos/client/utils/EnvUtil.java", "line_number": 106, "column_number": -1, "description": "return from a call to String EnvUtil.listToString(List)", "snippet": "        return result.substring(0, result.length() - 1);", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/utils/EnvUtil.java", "methodName": "listToString"}], "combined_records": [{"level": 1, "filename": "client/src/main/java/com/alibaba/nacos/client/utils/EnvUtil.java", "line_number": 106, "column_number": -1, "description": "start of procedure listToString(...)", "snippet": "94.    \n95.    private static String listToString(List<String> list) {\n96.>         if (list == null || list.isEmpty()) {\n97.>             return null;\n98.        }\n99.        StringBuilder result = new StringBuilder();\n100.        for (String string : list) {\n101.            result.append(string);\n102.            result.append(',');\n103.        }\n104.        return result.substring(0, result.length() - 1);\n105.    }\n", "url": "https://github.com/alibaba/nacos/blob/828acd3b2baf0685e372c0e9f0cc47ed0a8b389a/client/src/main/java/com/alibaba/nacos/client/utils/EnvUtil.java", "methodName": "listToString", "line_numbers": [97, 98, 98, 99, 106]}], "infer_explore": [{"level": 0, "filename": "client/src/main/java/com/alibaba/nacos/client/utils/EnvUtil.java", "line_number": 40, "column_number": -1, "description": "start of procedure setSelfEnv(...)", "snippet": "37.     private static String selfLocationTag;\n38.     \n39. >     public static void setSelfEnv(Map<String, List<String>> headers) {\n40.         if (headers != null) {\n41.             List<String> amoryTagTmp = headers.get(Constants.AMORY_TAG);\n"}, {"level": 0, "filename": "client/src/main/java/com/alibaba/nacos/client/utils/EnvUtil.java", "line_number": 41, "column_number": -1, "description": "Taking true branch", "snippet": "38.     \n39.     public static void setSelfEnv(Map<String, List<String>> headers) {\n40. >         if (headers != null) {\n41.             List<String> amoryTagTmp = headers.get(Constants.AMORY_TAG);\n42.             if (amoryTagTmp == null) {\n"}, {"level": 0, "filename": "client/src/main/java/com/alibaba/nacos/client/utils/EnvUtil.java", "line_number": 42, "column_number": -1, "description": "", "snippet": "39.     public static void setSelfEnv(Map<String, List<String>> headers) {\n40.         if (headers != null) {\n41. >             List<String> amoryTagTmp = headers.get(Constants.AMORY_TAG);\n42.             if (amoryTagTmp == null) {\n43.                 if (selfAmoryTag != null) {\n"}, {"level": 0, "filename": "client/src/main/java/com/alibaba/nacos/client/utils/EnvUtil.java", "line_number": 43, "column_number": -1, "description": "Taking false branch", "snippet": "40.         if (headers != null) {\n41.             List<String> amoryTagTmp = headers.get(Constants.AMORY_TAG);\n42. >             if (amoryTagTmp == null) {\n43.                 if (selfAmoryTag != null) {\n44.                     selfAmoryTag = null;\n"}, {"level": 0, "filename": "client/src/main/java/com/alibaba/nacos/client/utils/EnvUtil.java", "line_number": 49, "column_number": -1, "description": "", "snippet": "46.                 }\n47.             } else {\n48. >                 String amoryTagTmpStr = listToString(amoryTagTmp);\n49.                 if (!amoryTagTmpStr.equals(selfAmoryTag)) {\n50.                     selfAmoryTag = amoryTagTmpStr;\n"}, {"level": 1, "filename": "client/src/main/java/com/alibaba/nacos/client/utils/EnvUtil.java", "line_number": 97, "column_number": -1, "description": "start of procedure listToString(...)", "snippet": "94.     }\n95.     \n96. >     private static String listToString(List<String> list) {\n97.         if (list == null || list.isEmpty()) {\n98.             return null;\n"}, {"level": 1, "filename": "client/src/main/java/com/alibaba/nacos/client/utils/EnvUtil.java", "line_number": 98, "column_number": -1, "description": "Taking true branch", "snippet": "95.     \n96.     private static String listToString(List<String> list) {\n97. >         if (list == null || list.isEmpty()) {\n98.             return null;\n99.         }\n"}, {"level": 1, "filename": "client/src/main/java/com/alibaba/nacos/client/utils/EnvUtil.java", "line_number": 98, "column_number": -1, "description": "Taking true branch", "snippet": "95.     \n96.     private static String listToString(List<String> list) {\n97. >         if (list == null || list.isEmpty()) {\n98.             return null;\n99.         }\n"}, {"level": 1, "filename": "client/src/main/java/com/alibaba/nacos/client/utils/EnvUtil.java", "line_number": 99, "column_number": -1, "description": "", "snippet": "96.     private static String listToString(List<String> list) {\n97.         if (list == null || list.isEmpty()) {\n98. >             return null;\n99.         }\n100.         StringBuilder result = new StringBuilder();\n"}, {"level": 1, "filename": "client/src/main/java/com/alibaba/nacos/client/utils/EnvUtil.java", "line_number": 106, "column_number": -1, "description": "return from a call to String EnvUtil.listToString(List)", "snippet": "103.             result.append(',');\n104.         }\n105. >         return result.substring(0, result.length() - 1);\n106.     }\n107. }\n"}, {"level": 0, "filename": "client/src/main/java/com/alibaba/nacos/client/utils/EnvUtil.java", "line_number": 50, "column_number": -1, "description": "", "snippet": "47.             } else {\n48.                 String amoryTagTmpStr = listToString(amoryTagTmp);\n49. >                 if (!amoryTagTmpStr.equals(selfAmoryTag)) {\n50.                     selfAmoryTag = amoryTagTmpStr;\n51.                     LOGGER.warn(\"selfAmoryTag:{}\", selfAmoryTag);\n"}]}]