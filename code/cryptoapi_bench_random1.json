[{"url": "https://raw.githubusercontent.com/OWASP-Benchmark/BenchmarkJava/master/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02721.java", "rawCode": "// False\npublic class BenchmarkTest02721 extends HttpServlet {\n\n    private static final long serialVersionUID = 1L;\n\n    @Override\n    public void doGet(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        doPost(request, response);\n    }\n\n    @Override\n    public void doPost(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        response.setContentType(\"text/html;charset=UTF-8\");\n\n        org.owasp.benchmark.helpers.SeparateClassRequest scr =\n                new org.owasp.benchmark.helpers.SeparateClassRequest(request);\n        String param = scr.getTheValue(\"BenchmarkTest02721\");\n\n        String bar = doSomething(request, param);\n\n        try {\n            long l = SecureRandom.getInstance(\"SHA1PRNG\").nextLong();\n            String rememberMeKey = Long.toString(l);\n\n            String user = \"SafeLogan\";\n            String fullClassName = this.getClass().getName();\n            String testCaseNumber =\n                    fullClassName.substring(\n                            fullClassName.lastIndexOf('.') + 1 + \"BenchmarkTest\".length());\n            user += testCaseNumber;\n\n            String cookieName = \"rememberMe\" + testCaseNumber;\n\n            boolean foundUser = false;\n            javax.servlet.http.Cookie[] cookies = request.getCookies();\n            if (cookies != null) {\n                for (int i = 0; !foundUser && i < cookies.length; i++) {\n                    javax.servlet.http.Cookie cookie = cookies[i];\n                    if (cookieName.equals(cookie.getName())) {\n                        if (cookie.getValue()\n                                .equals(request.getSession().getAttribute(cookieName))) {\n                            foundUser = true;\n                        }\n                    }\n                }\n            }\n\n            if (foundUser) {\n                response.getWriter().println(\"Welcome back: \" + user + \"<br/>\");\n            } else {\n                javax.servlet.http.Cookie rememberMe =\n                        new javax.servlet.http.Cookie(cookieName, rememberMeKey);\n                rememberMe.setSecure(true);\n                rememberMe.setHttpOnly(true);\n                rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet\n                // e.g., /benchmark/sql-01/BenchmarkTest01001\n                request.getSession().setAttribute(cookieName, rememberMeKey);\n                response.addCookie(rememberMe);\n                response.getWriter()\n                        .println(\n                                user\n                                        + \" has been remembered with cookie: \"\n                                        + rememberMe.getName()\n                                        + \" whose value is: \"\n                                        + rememberMe.getValue()\n                                        + \"<br/>\");\n            }\n        } catch (java.security.NoSuchAlgorithmException e) {\n            System.out.println(\"Problem executing SecureRandom.nextLong() - TestCase\");\n            throw new ServletException(e);\n        }\n        response.getWriter()\n                .println(\"Weak Randomness Test SecureRandom.nextLong() executed\");\n    } // end doPost\n\n    private static String doSomething(HttpServletRequest request, String param)\n            throws ServletException, IOException {\n\n        String bar = org.springframework.web.util.HtmlUtils.htmlEscape(param);\n\n        return bar;\n    }\n}", "exampleID": 502, "dataset": "random", "filepath": "/Users/xxx/repos/active_learning_interface/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02721.java"}, {"url": "https://raw.githubusercontent.com/OWASP-Benchmark/BenchmarkJava/master/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00419.java", "rawCode": "// False\npublic class BenchmarkTest00419 extends HttpServlet {\n\n    private static final long serialVersionUID = 1L;\n\n    @Override\n    public void doGet(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        doPost(request, response);\n    }\n\n    @Override\n    public void doPost(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        response.setContentType(\"text/html;charset=UTF-8\");\n\n        String param = request.getParameter(\"BenchmarkTest00419\");\n        if (param == null) param = \"\";\n\n        String bar = \"\";\n        if (param != null) {\n            java.util.List<String> valuesList = new java.util.ArrayList<String>();\n            valuesList.add(\"safe\");\n            valuesList.add(param);\n            valuesList.add(\"moresafe\");\n\n            valuesList.remove(0); // remove the 1st safe value\n\n            bar = valuesList.get(0); // get the param value\n        }\n\n        try {\n            double stuff = SecureRandom.getInstance(\"SHA1PRNG\").nextGaussian();\n            String rememberMeKey =\n                    Double.toString(stuff).substring(2); // Trim off the 0. at the front.\n\n            String user = \"SafeGayle\";\n            String fullClassName = this.getClass().getName();\n            String testCaseNumber =\n                    fullClassName.substring(\n                            fullClassName.lastIndexOf('.') + 1 + \"BenchmarkTest\".length());\n            user += testCaseNumber;\n\n            String cookieName = \"rememberMe\" + testCaseNumber;\n\n            boolean foundUser = false;\n            javax.servlet.http.Cookie[] cookies = request.getCookies();\n            if (cookies != null) {\n                for (int i = 0; !foundUser && i < cookies.length; i++) {\n                    javax.servlet.http.Cookie cookie = cookies[i];\n                    if (cookieName.equals(cookie.getName())) {\n                        if (cookie.getValue()\n                                .equals(request.getSession().getAttribute(cookieName))) {\n                            foundUser = true;\n                        }\n                    }\n                }\n            }\n\n            if (foundUser) {\n                response.getWriter().println(\"Welcome back: \" + user + \"<br/>\");\n            } else {\n                javax.servlet.http.Cookie rememberMe =\n                        new javax.servlet.http.Cookie(cookieName, rememberMeKey);\n                rememberMe.setSecure(true);\n                rememberMe.setHttpOnly(true);\n                rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet\n                // e.g., /benchmark/sql-01/BenchmarkTest01001\n                request.getSession().setAttribute(cookieName, rememberMeKey);\n                response.addCookie(rememberMe);\n                response.getWriter()\n                        .println(\n                                user\n                                        + \" has been remembered with cookie: \"\n                                        + rememberMe.getName()\n                                        + \" whose value is: \"\n                                        + rememberMe.getValue()\n                                        + \"<br/>\");\n            }\n        } catch (java.security.NoSuchAlgorithmException e) {\n            System.out.println(\"Problem executing SecureRandom.nextGaussian() - TestCase\");\n            throw new ServletException(e);\n        }\n        response.getWriter()\n                .println(\"Weak Randomness Test SecureRandom.nextGaussian() executed\");\n    }\n}", "exampleID": 506, "dataset": "random", "filepath": "/Users/xxx/repos/active_learning_interface/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00419.java"}, {"url": "https://raw.githubusercontent.com/OWASP-Benchmark/BenchmarkJava/master/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01951.java", "rawCode": "// False\npublic class BenchmarkTest01951 extends HttpServlet {\n\n    private static final long serialVersionUID = 1L;\n\n    @Override\n    public void doGet(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        doPost(request, response);\n    }\n\n    @Override\n    public void doPost(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        response.setContentType(\"text/html;charset=UTF-8\");\n\n        String param = \"\";\n        if (request.getHeader(\"BenchmarkTest01951\") != null) {\n            param = request.getHeader(\"BenchmarkTest01951\");\n        }\n\n        // URL Decode the header value since req.getHeader() doesn't. Unlike req.getParameter().\n        param = java.net.URLDecoder.decode(param, \"UTF-8\");\n\n        String bar = doSomething(request, param);\n\n        try {\n            float rand = SecureRandom.getInstance(\"SHA1PRNG\").nextFloat();\n            String rememberMeKey =\n                    Float.toString(rand).substring(2); // Trim off the 0. at the front.\n\n            String user = \"SafeFloyd\";\n            String fullClassName = this.getClass().getName();\n            String testCaseNumber =\n                    fullClassName.substring(\n                            fullClassName.lastIndexOf('.') + 1 + \"BenchmarkTest\".length());\n            user += testCaseNumber;\n\n            String cookieName = \"rememberMe\" + testCaseNumber;\n\n            boolean foundUser = false;\n            javax.servlet.http.Cookie[] cookies = request.getCookies();\n            if (cookies != null) {\n                for (int i = 0; !foundUser && i < cookies.length; i++) {\n                    javax.servlet.http.Cookie cookie = cookies[i];\n                    if (cookieName.equals(cookie.getName())) {\n                        if (cookie.getValue()\n                                .equals(request.getSession().getAttribute(cookieName))) {\n                            foundUser = true;\n                        }\n                    }\n                }\n            }\n\n            if (foundUser) {\n                response.getWriter().println(\"Welcome back: \" + user + \"<br/>\");\n            } else {\n                javax.servlet.http.Cookie rememberMe =\n                        new javax.servlet.http.Cookie(cookieName, rememberMeKey);\n                rememberMe.setSecure(true);\n                rememberMe.setHttpOnly(true);\n                rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet\n                // e.g., /benchmark/sql-01/BenchmarkTest01001\n                request.getSession().setAttribute(cookieName, rememberMeKey);\n                response.addCookie(rememberMe);\n                response.getWriter()\n                        .println(\n                                user\n                                        + \" has been remembered with cookie: \"\n                                        + rememberMe.getName()\n                                        + \" whose value is: \"\n                                        + rememberMe.getValue()\n                                        + \"<br/>\");\n            }\n        } catch (java.security.NoSuchAlgorithmException e) {\n            System.out.println(\"Problem executing SecureRandom.nextFloat() - TestCase\");\n            throw new ServletException(e);\n        }\n        response.getWriter()\n                .println(\"Weak Randomness Test SecureRandom.nextFloat() executed\");\n    } // end doPost\n\n    private static String doSomething(HttpServletRequest request, String param)\n            throws ServletException, IOException {\n\n        String bar = org.apache.commons.lang.StringEscapeUtils.escapeHtml(param);\n\n        return bar;\n    }\n}", "exampleID": 513, "dataset": "random", "filepath": "/Users/xxx/repos/active_learning_interface/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01951.java"}, {"url": "https://raw.githubusercontent.com/OWASP-Benchmark/BenchmarkJava/master/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00182.java", "rawCode": "// False\npublic class BenchmarkTest00182 extends HttpServlet {\n\n    private static final long serialVersionUID = 1L;\n\n    @Override\n    public void doGet(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        doPost(request, response);\n    }\n\n    @Override\n    public void doPost(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        response.setContentType(\"text/html;charset=UTF-8\");\n\n        String param = \"\";\n        if (request.getHeader(\"BenchmarkTest00182\") != null) {\n            param = request.getHeader(\"BenchmarkTest00182\");\n        }\n\n        // URL Decode the header value since req.getHeader() doesn't. Unlike req.getParameter().\n        param = java.net.URLDecoder.decode(param, \"UTF-8\");\n\n        // Chain a bunch of propagators in sequence\n        String a48649 = param; // assign\n        StringBuilder b48649 = new StringBuilder(a48649); // stick in stringbuilder\n        b48649.append(\" SafeStuff\"); // append some safe content\n        b48649.replace(\n                b48649.length() - \"Chars\".length(),\n                b48649.length(),\n                \"Chars\"); // replace some of the end content\n        java.util.HashMap<String, Object> map48649 = new java.util.HashMap<String, Object>();\n        map48649.put(\"key48649\", b48649.toString()); // put in a collection\n        String c48649 = (String) map48649.get(\"key48649\"); // get it back out\n        String d48649 = c48649.substring(0, c48649.length() - 1); // extract most of it\n        String e48649 =\n                new String(\n                        org.apache.commons.codec.binary.Base64.decodeBase64(\n                                org.apache.commons.codec.binary.Base64.encodeBase64(\n                                        d48649.getBytes()))); // B64 encode and decode it\n        String f48649 = e48649.split(\" \")[0]; // split it on a space\n        org.owasp.benchmark.helpers.ThingInterface thing =\n                org.owasp.benchmark.helpers.ThingFactory.createThing();\n        String g48649 = \"barbarians_at_the_gate\"; // This is static so this whole flow is 'safe'\n        String bar = thing.doSomething(g48649); // reflection\n\n        try {\n            double stuff = SecureRandom.getInstance(\"SHA1PRNG\").nextGaussian();\n            String rememberMeKey =\n                    Double.toString(stuff).substring(2); // Trim off the 0. at the front.\n\n            String user = \"SafeGayle\";\n            String fullClassName = this.getClass().getName();\n            String testCaseNumber =\n                    fullClassName.substring(\n                            fullClassName.lastIndexOf('.') + 1 + \"BenchmarkTest\".length());\n            user += testCaseNumber;\n\n            String cookieName = \"rememberMe\" + testCaseNumber;\n\n            boolean foundUser = false;\n            javax.servlet.http.Cookie[] cookies = request.getCookies();\n            if (cookies != null) {\n                for (int i = 0; !foundUser && i < cookies.length; i++) {\n                    javax.servlet.http.Cookie cookie = cookies[i];\n                    if (cookieName.equals(cookie.getName())) {\n                        if (cookie.getValue()\n                                .equals(request.getSession().getAttribute(cookieName))) {\n                            foundUser = true;\n                        }\n                    }\n                }\n            }\n\n            if (foundUser) {\n                response.getWriter().println(\"Welcome back: \" + user + \"<br/>\");\n            } else {\n                javax.servlet.http.Cookie rememberMe =\n                        new javax.servlet.http.Cookie(cookieName, rememberMeKey);\n                rememberMe.setSecure(true);\n                rememberMe.setHttpOnly(true);\n                rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet\n                // e.g., /benchmark/sql-01/BenchmarkTest01001\n                request.getSession().setAttribute(cookieName, rememberMeKey);\n                response.addCookie(rememberMe);\n                response.getWriter()\n                        .println(\n                                user\n                                        + \" has been remembered with cookie: \"\n                                        + rememberMe.getName()\n                                        + \" whose value is: \"\n                                        + rememberMe.getValue()\n                                        + \"<br/>\");\n            }\n        } catch (java.security.NoSuchAlgorithmException e) {\n            System.out.println(\"Problem executing SecureRandom.nextGaussian() - TestCase\");\n            throw new ServletException(e);\n        }\n        response.getWriter()\n                .println(\"Weak Randomness Test SecureRandom.nextGaussian() executed\");\n    }\n}", "exampleID": 514, "dataset": "random", "filepath": "/Users/xxx/repos/active_learning_interface/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00182.java"}, {"url": "https://raw.githubusercontent.com/OWASP-Benchmark/BenchmarkJava/master/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00911.java", "rawCode": "// False\npublic class BenchmarkTest00911 extends HttpServlet {\n\n    private static final long serialVersionUID = 1L;\n\n    @Override\n    public void doGet(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        doPost(request, response);\n    }\n\n    @Override\n    public void doPost(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        response.setContentType(\"text/html;charset=UTF-8\");\n\n        org.owasp.benchmark.helpers.SeparateClassRequest scr =\n                new org.owasp.benchmark.helpers.SeparateClassRequest(request);\n        String param = scr.getTheValue(\"BenchmarkTest00911\");\n\n        org.owasp.benchmark.helpers.ThingInterface thing =\n                org.owasp.benchmark.helpers.ThingFactory.createThing();\n        String bar = thing.doSomething(param);\n\n        try {\n            SecureRandom secureRandomGenerator =\n                    SecureRandom.getInstance(\"SHA1PRNG\");\n\n            // Get 40 random bytes\n            byte[] randomBytes = new byte[40];\n            secureRandomGenerator.nextBytes(randomBytes);\n\n            String rememberMeKey =\n                    org.owasp.esapi.ESAPI.encoder().encodeForBase64(randomBytes, true);\n\n            String user = \"SafeByron\";\n            String fullClassName = this.getClass().getName();\n            String testCaseNumber =\n                    fullClassName.substring(\n                            fullClassName.lastIndexOf('.') + 1 + \"BenchmarkTest\".length());\n            user += testCaseNumber;\n\n            String cookieName = \"rememberMe\" + testCaseNumber;\n\n            boolean foundUser = false;\n            javax.servlet.http.Cookie[] cookies = request.getCookies();\n            if (cookies != null) {\n                for (int i = 0; !foundUser && i < cookies.length; i++) {\n                    javax.servlet.http.Cookie cookie = cookies[i];\n                    if (cookieName.equals(cookie.getName())) {\n                        if (cookie.getValue()\n                                .equals(request.getSession().getAttribute(cookieName))) {\n                            foundUser = true;\n                        }\n                    }\n                }\n            }\n\n            if (foundUser) {\n                response.getWriter().println(\"Welcome back: \" + user + \"<br/>\");\n            } else {\n                javax.servlet.http.Cookie rememberMe =\n                        new javax.servlet.http.Cookie(cookieName, rememberMeKey);\n                rememberMe.setSecure(true);\n                rememberMe.setHttpOnly(true);\n                rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet\n                // e.g., /benchmark/sql-01/BenchmarkTest01001\n                request.getSession().setAttribute(cookieName, rememberMeKey);\n                response.addCookie(rememberMe);\n                response.getWriter()\n                        .println(\n                                user\n                                        + \" has been remembered with cookie: \"\n                                        + rememberMe.getName()\n                                        + \" whose value is: \"\n                                        + rememberMe.getValue()\n                                        + \"<br/>\");\n            }\n        } catch (java.security.NoSuchAlgorithmException e) {\n            System.out.println(\"Problem executing SecureRandom.nextBytes() - TestCase\");\n            throw new ServletException(e);\n        } finally {\n            response.getWriter()\n                    .println(\n                            \"Randomness Test SecureRandom.nextBytes(byte[]) executed\");\n        }\n    }\n}", "exampleID": 525, "dataset": "random", "filepath": "/Users/xxx/repos/active_learning_interface/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00911.java"}, {"url": "https://raw.githubusercontent.com/OWASP-Benchmark/BenchmarkJava/master/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00316.java", "rawCode": "// False\npublic class BenchmarkTest00316 extends HttpServlet {\n\n    private static final long serialVersionUID = 1L;\n\n    @Override\n    public void doGet(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        doPost(request, response);\n    }\n\n    @Override\n    public void doPost(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        response.setContentType(\"text/html;charset=UTF-8\");\n\n        String param = \"\";\n        java.util.Enumeration<String> headers = request.getHeaders(\"BenchmarkTest00316\");\n\n        if (headers != null && headers.hasMoreElements()) {\n            param = headers.nextElement(); // just grab first element\n        }\n\n        // URL Decode the header value since req.getHeaders() doesn't. Unlike req.getParameters().\n        param = java.net.URLDecoder.decode(param, \"UTF-8\");\n\n        // Chain a bunch of propagators in sequence\n        String a78780 = param; // assign\n        StringBuilder b78780 = new StringBuilder(a78780); // stick in stringbuilder\n        b78780.append(\" SafeStuff\"); // append some safe content\n        b78780.replace(\n                b78780.length() - \"Chars\".length(),\n                b78780.length(),\n                \"Chars\"); // replace some of the end content\n        java.util.HashMap<String, Object> map78780 = new java.util.HashMap<String, Object>();\n        map78780.put(\"key78780\", b78780.toString()); // put in a collection\n        String c78780 = (String) map78780.get(\"key78780\"); // get it back out\n        String d78780 = c78780.substring(0, c78780.length() - 1); // extract most of it\n        String e78780 =\n                new String(\n                        org.apache.commons.codec.binary.Base64.decodeBase64(\n                                org.apache.commons.codec.binary.Base64.encodeBase64(\n                                        d78780.getBytes()))); // B64 encode and decode it\n        String f78780 = e78780.split(\" \")[0]; // split it on a space\n        org.owasp.benchmark.helpers.ThingInterface thing =\n                org.owasp.benchmark.helpers.ThingFactory.createThing();\n        String bar = thing.doSomething(f78780); // reflection\n\n        try {\n            double rand = SecureRandom.getInstance(\"SHA1PRNG\").nextDouble();\n\n            String rememberMeKey =\n                    Double.toString(rand).substring(2); // Trim off the 0. at the front.\n\n            String user = \"SafeDonna\";\n            String fullClassName = this.getClass().getName();\n            String testCaseNumber =\n                    fullClassName.substring(\n                            fullClassName.lastIndexOf('.') + 1 + \"BenchmarkTest\".length());\n            user += testCaseNumber;\n\n            String cookieName = \"rememberMe\" + testCaseNumber;\n\n            boolean foundUser = false;\n            javax.servlet.http.Cookie[] cookies = request.getCookies();\n            if (cookies != null) {\n                for (int i = 0; !foundUser && i < cookies.length; i++) {\n                    javax.servlet.http.Cookie cookie = cookies[i];\n                    if (cookieName.equals(cookie.getName())) {\n                        if (cookie.getValue()\n                                .equals(request.getSession().getAttribute(cookieName))) {\n                            foundUser = true;\n                        }\n                    }\n                }\n            }\n\n            if (foundUser) {\n                response.getWriter().println(\"Welcome back: \" + user + \"<br/>\");\n\n            } else {\n                javax.servlet.http.Cookie rememberMe =\n                        new javax.servlet.http.Cookie(cookieName, rememberMeKey);\n                rememberMe.setSecure(true);\n                rememberMe.setHttpOnly(true);\n                rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet\n                // e.g., /benchmark/sql-01/BenchmarkTest01001\n                request.getSession().setAttribute(cookieName, rememberMeKey);\n                response.addCookie(rememberMe);\n                response.getWriter()\n                        .println(\n                                user\n                                        + \" has been remembered with cookie: \"\n                                        + rememberMe.getName()\n                                        + \" whose value is: \"\n                                        + rememberMe.getValue()\n                                        + \"<br/>\");\n            }\n        } catch (java.security.NoSuchAlgorithmException e) {\n            System.out.println(\"Problem executing SecureRandom.nextDouble() - TestCase\");\n            throw new ServletException(e);\n        }\n        response.getWriter()\n                .println(\"Weak Randomness Test SecureRandom.nextDouble() executed\");\n    }\n}", "exampleID": 549, "dataset": "random", "filepath": "/Users/xxx/repos/active_learning_interface/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00316.java"}, {"url": "https://raw.githubusercontent.com/OWASP-Benchmark/BenchmarkJava/master/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01136.java", "rawCode": "// False\npublic class BenchmarkTest01136 extends HttpServlet {\n\n    private static final long serialVersionUID = 1L;\n\n    @Override\n    public void doGet(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        doPost(request, response);\n    }\n\n    @Override\n    public void doPost(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        response.setContentType(\"text/html;charset=UTF-8\");\n\n        String param = \"\";\n        java.util.Enumeration<String> names = request.getHeaderNames();\n        while (names.hasMoreElements()) {\n            String name = (String) names.nextElement();\n\n            if (org.owasp.benchmark.helpers.Utils.commonHeaders.contains(name)) {\n                continue; // If standard header, move on to next one\n            }\n\n            java.util.Enumeration<String> values = request.getHeaders(name);\n            if (values != null && values.hasMoreElements()) {\n                param = name; // Grabs the name of the first non-standard header as the parameter\n                // value\n                break;\n            }\n        }\n        // Note: We don't URL decode header names because people don't normally do that\n\n        String bar = new Test().doSomething(request, param);\n\n        try {\n            SecureRandom secureRandomGenerator =\n                    SecureRandom.getInstance(\"SHA1PRNG\");\n\n            // Get 40 random bytes\n            byte[] randomBytes = new byte[40];\n            secureRandomGenerator.nextBytes(randomBytes);\n\n            String rememberMeKey =\n                    org.owasp.esapi.ESAPI.encoder().encodeForBase64(randomBytes, true);\n\n            String user = \"SafeByron\";\n            String fullClassName = this.getClass().getName();\n            String testCaseNumber =\n                    fullClassName.substring(\n                            fullClassName.lastIndexOf('.') + 1 + \"BenchmarkTest\".length());\n            user += testCaseNumber;\n\n            String cookieName = \"rememberMe\" + testCaseNumber;\n\n            boolean foundUser = false;\n            javax.servlet.http.Cookie[] cookies = request.getCookies();\n            if (cookies != null) {\n                for (int i = 0; !foundUser && i < cookies.length; i++) {\n                    javax.servlet.http.Cookie cookie = cookies[i];\n                    if (cookieName.equals(cookie.getName())) {\n                        if (cookie.getValue()\n                                .equals(request.getSession().getAttribute(cookieName))) {\n                            foundUser = true;\n                        }\n                    }\n                }\n            }\n\n            if (foundUser) {\n                response.getWriter().println(\"Welcome back: \" + user + \"<br/>\");\n            } else {\n                javax.servlet.http.Cookie rememberMe =\n                        new javax.servlet.http.Cookie(cookieName, rememberMeKey);\n                rememberMe.setSecure(true);\n                rememberMe.setHttpOnly(true);\n                rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet\n                // e.g., /benchmark/sql-01/BenchmarkTest01001\n                request.getSession().setAttribute(cookieName, rememberMeKey);\n                response.addCookie(rememberMe);\n                response.getWriter()\n                        .println(\n                                user\n                                        + \" has been remembered with cookie: \"\n                                        + rememberMe.getName()\n                                        + \" whose value is: \"\n                                        + rememberMe.getValue()\n                                        + \"<br/>\");\n            }\n        } catch (java.security.NoSuchAlgorithmException e) {\n            System.out.println(\"Problem executing SecureRandom.nextBytes() - TestCase\");\n            throw new ServletException(e);\n        } finally {\n            response.getWriter()\n                    .println(\n                            \"Randomness Test SecureRandom.nextBytes(byte[]) executed\");\n        }\n    } // end doPost\n\n    private class Test {\n\n        public String doSomething(HttpServletRequest request, String param)\n                throws ServletException, IOException {\n\n            // Chain a bunch of propagators in sequence\n            String a58606 = param; // assign\n            StringBuilder b58606 = new StringBuilder(a58606); // stick in stringbuilder\n            b58606.append(\" SafeStuff\"); // append some safe content\n            b58606.replace(\n                    b58606.length() - \"Chars\".length(),\n                    b58606.length(),\n                    \"Chars\"); // replace some of the end content\n            java.util.HashMap<String, Object> map58606 = new java.util.HashMap<String, Object>();\n            map58606.put(\"key58606\", b58606.toString()); // put in a collection\n            String c58606 = (String) map58606.get(\"key58606\"); // get it back out\n            String d58606 = c58606.substring(0, c58606.length() - 1); // extract most of it\n            String e58606 =\n                    new String(\n                            org.apache.commons.codec.binary.Base64.decodeBase64(\n                                    org.apache.commons.codec.binary.Base64.encodeBase64(\n                                            d58606.getBytes()))); // B64 encode and decode it\n            String f58606 = e58606.split(\" \")[0]; // split it on a space\n            org.owasp.benchmark.helpers.ThingInterface thing =\n                    org.owasp.benchmark.helpers.ThingFactory.createThing();\n            String g58606 = \"barbarians_at_the_gate\"; // This is static so this whole flow is 'safe'\n            String bar = thing.doSomething(g58606); // reflection\n\n            return bar;\n        }\n    } // end innerclass Test\n}", "exampleID": 563, "dataset": "random", "filepath": "/Users/xxx/repos/active_learning_interface/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01136.java"}, {"url": "https://raw.githubusercontent.com/OWASP-Benchmark/BenchmarkJava/master/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00662.java", "rawCode": "// False\npublic class BenchmarkTest00662 extends HttpServlet {\n\n    private static final long serialVersionUID = 1L;\n\n    @Override\n    public void doGet(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        doPost(request, response);\n    }\n\n    @Override\n    public void doPost(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        response.setContentType(\"text/html;charset=UTF-8\");\n\n        org.owasp.benchmark.helpers.SeparateClassRequest scr =\n                new org.owasp.benchmark.helpers.SeparateClassRequest(request);\n        String param = scr.getTheParameter(\"BenchmarkTest00662\");\n        if (param == null) param = \"\";\n\n        String bar = \"\";\n        if (param != null) {\n            bar =\n                    new String(\n                            org.apache.commons.codec.binary.Base64.decodeBase64(\n                                    org.apache.commons.codec.binary.Base64.encodeBase64(\n                                            param.getBytes())));\n        }\n\n        try {\n            double rand = SecureRandom.getInstance(\"SHA1PRNG\").nextDouble();\n\n            String rememberMeKey =\n                    Double.toString(rand).substring(2); // Trim off the 0. at the front.\n\n            String user = \"SafeDonna\";\n            String fullClassName = this.getClass().getName();\n            String testCaseNumber =\n                    fullClassName.substring(\n                            fullClassName.lastIndexOf('.') + 1 + \"BenchmarkTest\".length());\n            user += testCaseNumber;\n\n            String cookieName = \"rememberMe\" + testCaseNumber;\n\n            boolean foundUser = false;\n            javax.servlet.http.Cookie[] cookies = request.getCookies();\n            if (cookies != null) {\n                for (int i = 0; !foundUser && i < cookies.length; i++) {\n                    javax.servlet.http.Cookie cookie = cookies[i];\n                    if (cookieName.equals(cookie.getName())) {\n                        if (cookie.getValue()\n                                .equals(request.getSession().getAttribute(cookieName))) {\n                            foundUser = true;\n                        }\n                    }\n                }\n            }\n\n            if (foundUser) {\n                response.getWriter().println(\"Welcome back: \" + user + \"<br/>\");\n\n            } else {\n                javax.servlet.http.Cookie rememberMe =\n                        new javax.servlet.http.Cookie(cookieName, rememberMeKey);\n                rememberMe.setSecure(true);\n                rememberMe.setHttpOnly(true);\n                rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet\n                // e.g., /benchmark/sql-01/BenchmarkTest01001\n                request.getSession().setAttribute(cookieName, rememberMeKey);\n                response.addCookie(rememberMe);\n                response.getWriter()\n                        .println(\n                                user\n                                        + \" has been remembered with cookie: \"\n                                        + rememberMe.getName()\n                                        + \" whose value is: \"\n                                        + rememberMe.getValue()\n                                        + \"<br/>\");\n            }\n        } catch (java.security.NoSuchAlgorithmException e) {\n            System.out.println(\"Problem executing SecureRandom.nextDouble() - TestCase\");\n            throw new ServletException(e);\n        }\n        response.getWriter()\n                .println(\"Weak Randomness Test SecureRandom.nextDouble() executed\");\n    }\n}", "exampleID": 564, "dataset": "random", "filepath": "/Users/xxx/repos/active_learning_interface/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00662.java"}, {"url": "https://raw.githubusercontent.com/OWASP-Benchmark/BenchmarkJava/master/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00418.java", "rawCode": "// False\npublic class BenchmarkTest00418 extends HttpServlet {\n\n    private static final long serialVersionUID = 1L;\n\n    @Override\n    public void doGet(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        doPost(request, response);\n    }\n\n    @Override\n    public void doPost(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        response.setContentType(\"text/html;charset=UTF-8\");\n\n        String param = request.getParameter(\"BenchmarkTest00418\");\n        if (param == null) param = \"\";\n\n        String bar;\n\n        // Simple if statement that assigns param to bar on true condition\n        int num = 196;\n        if ((500 / 42) + num > 200) bar = param;\n        else bar = \"This should never happen\";\n\n        try {\n            double rand = SecureRandom.getInstance(\"SHA1PRNG\").nextDouble();\n\n            String rememberMeKey =\n                    Double.toString(rand).substring(2); // Trim off the 0. at the front.\n\n            String user = \"SafeDonna\";\n            String fullClassName = this.getClass().getName();\n            String testCaseNumber =\n                    fullClassName.substring(\n                            fullClassName.lastIndexOf('.') + 1 + \"BenchmarkTest\".length());\n            user += testCaseNumber;\n\n            String cookieName = \"rememberMe\" + testCaseNumber;\n\n            boolean foundUser = false;\n            javax.servlet.http.Cookie[] cookies = request.getCookies();\n            if (cookies != null) {\n                for (int i = 0; !foundUser && i < cookies.length; i++) {\n                    javax.servlet.http.Cookie cookie = cookies[i];\n                    if (cookieName.equals(cookie.getName())) {\n                        if (cookie.getValue()\n                                .equals(request.getSession().getAttribute(cookieName))) {\n                            foundUser = true;\n                        }\n                    }\n                }\n            }\n\n            if (foundUser) {\n                response.getWriter().println(\"Welcome back: \" + user + \"<br/>\");\n\n            } else {\n                javax.servlet.http.Cookie rememberMe =\n                        new javax.servlet.http.Cookie(cookieName, rememberMeKey);\n                rememberMe.setSecure(true);\n                rememberMe.setHttpOnly(true);\n                rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet\n                // e.g., /benchmark/sql-01/BenchmarkTest01001\n                request.getSession().setAttribute(cookieName, rememberMeKey);\n                response.addCookie(rememberMe);\n                response.getWriter()\n                        .println(\n                                user\n                                        + \" has been remembered with cookie: \"\n                                        + rememberMe.getName()\n                                        + \" whose value is: \"\n                                        + rememberMe.getValue()\n                                        + \"<br/>\");\n            }\n        } catch (java.security.NoSuchAlgorithmException e) {\n            System.out.println(\"Problem executing SecureRandom.nextDouble() - TestCase\");\n            throw new ServletException(e);\n        }\n        response.getWriter()\n                .println(\"Weak Randomness Test SecureRandom.nextDouble() executed\");\n    }\n}", "exampleID": 567, "dataset": "random", "filepath": "/Users/xxx/repos/active_learning_interface/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00418.java"}, {"url": "https://raw.githubusercontent.com/OWASP-Benchmark/BenchmarkJava/master/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00249.java", "rawCode": "// False\npublic class BenchmarkTest00249 extends HttpServlet {\n\n    private static final long serialVersionUID = 1L;\n\n    @Override\n    public void doGet(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        doPost(request, response);\n    }\n\n    @Override\n    public void doPost(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        response.setContentType(\"text/html;charset=UTF-8\");\n\n        String param = \"\";\n        java.util.Enumeration<String> names = request.getHeaderNames();\n        while (names.hasMoreElements()) {\n            String name = (String) names.nextElement();\n\n            if (org.owasp.benchmark.helpers.Utils.commonHeaders.contains(name)) {\n                continue; // If standard header, move on to next one\n            }\n\n            java.util.Enumeration<String> values = request.getHeaders(name);\n            if (values != null && values.hasMoreElements()) {\n                param = name; // Grabs the name of the first non-standard header as the parameter\n                // value\n                break;\n            }\n        }\n        // Note: We don't URL decode header names because people don't normally do that\n\n        String bar = org.apache.commons.lang.StringEscapeUtils.escapeHtml(param);\n\n        try {\n            long l = SecureRandom.getInstance(\"SHA1PRNG\").nextLong();\n            String rememberMeKey = Long.toString(l);\n\n            String user = \"SafeLogan\";\n            String fullClassName = this.getClass().getName();\n            String testCaseNumber =\n                    fullClassName.substring(\n                            fullClassName.lastIndexOf('.') + 1 + \"BenchmarkTest\".length());\n            user += testCaseNumber;\n\n            String cookieName = \"rememberMe\" + testCaseNumber;\n\n            boolean foundUser = false;\n            javax.servlet.http.Cookie[] cookies = request.getCookies();\n            if (cookies != null) {\n                for (int i = 0; !foundUser && i < cookies.length; i++) {\n                    javax.servlet.http.Cookie cookie = cookies[i];\n                    if (cookieName.equals(cookie.getName())) {\n                        if (cookie.getValue()\n                                .equals(request.getSession().getAttribute(cookieName))) {\n                            foundUser = true;\n                        }\n                    }\n                }\n            }\n\n            if (foundUser) {\n                response.getWriter().println(\"Welcome back: \" + user + \"<br/>\");\n            } else {\n                javax.servlet.http.Cookie rememberMe =\n                        new javax.servlet.http.Cookie(cookieName, rememberMeKey);\n                rememberMe.setSecure(true);\n                rememberMe.setHttpOnly(true);\n                rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet\n                // e.g., /benchmark/sql-01/BenchmarkTest01001\n                request.getSession().setAttribute(cookieName, rememberMeKey);\n                response.addCookie(rememberMe);\n                response.getWriter()\n                        .println(\n                                user\n                                        + \" has been remembered with cookie: \"\n                                        + rememberMe.getName()\n                                        + \" whose value is: \"\n                                        + rememberMe.getValue()\n                                        + \"<br/>\");\n            }\n        } catch (java.security.NoSuchAlgorithmException e) {\n            System.out.println(\"Problem executing SecureRandom.nextLong() - TestCase\");\n            throw new ServletException(e);\n        }\n        response.getWriter()\n                .println(\"Weak Randomness Test SecureRandom.nextLong() executed\");\n    }\n}", "exampleID": 571, "dataset": "random", "filepath": "/Users/xxx/repos/active_learning_interface/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00249.java"}, {"url": "https://raw.githubusercontent.com/OWASP-Benchmark/BenchmarkJava/master/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00829.java", "rawCode": "// False\npublic class BenchmarkTest00829 extends HttpServlet {\n\n    private static final long serialVersionUID = 1L;\n\n    @Override\n    public void doGet(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        doPost(request, response);\n    }\n\n    @Override\n    public void doPost(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        response.setContentType(\"text/html;charset=UTF-8\");\n\n        String queryString = request.getQueryString();\n        String paramval = \"BenchmarkTest00829\" + \"=\";\n        int paramLoc = -1;\n        if (queryString != null) paramLoc = queryString.indexOf(paramval);\n        if (paramLoc == -1) {\n            response.getWriter()\n                    .println(\n                            \"getQueryString() couldn't find expected parameter '\"\n                                    + \"BenchmarkTest00829\"\n                                    + \"' in query string.\");\n            return;\n        }\n\n        String param =\n                queryString.substring(\n                        paramLoc\n                                + paramval\n                                        .length()); // 1st assume \"BenchmarkTest00829\" param is last\n        // parameter in query string.\n        // And then check to see if its in the middle of the query string and if so, trim off what\n        // comes after.\n        int ampersandLoc = queryString.indexOf(\"&\", paramLoc);\n        if (ampersandLoc != -1) {\n            param = queryString.substring(paramLoc + paramval.length(), ampersandLoc);\n        }\n        param = java.net.URLDecoder.decode(param, \"UTF-8\");\n\n        String bar;\n        String guess = \"ABC\";\n        char switchTarget = guess.charAt(2);\n\n        // Simple case statement that assigns param to bar on conditions 'A', 'C', or 'D'\n        switch (switchTarget) {\n            case 'A':\n                bar = param;\n                break;\n            case 'B':\n                bar = \"bobs_your_uncle\";\n                break;\n            case 'C':\n            case 'D':\n                bar = param;\n                break;\n            default:\n                bar = \"bobs_your_uncle\";\n                break;\n        }\n\n        try {\n            SecureRandom secureRandomGenerator =\n                    SecureRandom.getInstance(\"SHA1PRNG\");\n\n            // Get 40 random bytes\n            byte[] randomBytes = new byte[40];\n            secureRandomGenerator.nextBytes(randomBytes);\n\n            String rememberMeKey =\n                    org.owasp.esapi.ESAPI.encoder().encodeForBase64(randomBytes, true);\n\n            String user = \"SafeByron\";\n            String fullClassName = this.getClass().getName();\n            String testCaseNumber =\n                    fullClassName.substring(\n                            fullClassName.lastIndexOf('.') + 1 + \"BenchmarkTest\".length());\n            user += testCaseNumber;\n\n            String cookieName = \"rememberMe\" + testCaseNumber;\n\n            boolean foundUser = false;\n            javax.servlet.http.Cookie[] cookies = request.getCookies();\n            if (cookies != null) {\n                for (int i = 0; !foundUser && i < cookies.length; i++) {\n                    javax.servlet.http.Cookie cookie = cookies[i];\n                    if (cookieName.equals(cookie.getName())) {\n                        if (cookie.getValue()\n                                .equals(request.getSession().getAttribute(cookieName))) {\n                            foundUser = true;\n                        }\n                    }\n                }\n            }\n\n            if (foundUser) {\n                response.getWriter().println(\"Welcome back: \" + user + \"<br/>\");\n            } else {\n                javax.servlet.http.Cookie rememberMe =\n                        new javax.servlet.http.Cookie(cookieName, rememberMeKey);\n                rememberMe.setSecure(true);\n                rememberMe.setHttpOnly(true);\n                rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet\n                // e.g., /benchmark/sql-01/BenchmarkTest01001\n                request.getSession().setAttribute(cookieName, rememberMeKey);\n                response.addCookie(rememberMe);\n                response.getWriter()\n                        .println(\n                                user\n                                        + \" has been remembered with cookie: \"\n                                        + rememberMe.getName()\n                                        + \" whose value is: \"\n                                        + rememberMe.getValue()\n                                        + \"<br/>\");\n            }\n        } catch (java.security.NoSuchAlgorithmException e) {\n            System.out.println(\"Problem executing SecureRandom.nextBytes() - TestCase\");\n            throw new ServletException(e);\n        } finally {\n            response.getWriter()\n                    .println(\n                            \"Randomness Test SecureRandom.nextBytes(byte[]) executed\");\n        }\n    }\n}", "exampleID": 581, "dataset": "random", "filepath": "/Users/xxx/repos/active_learning_interface/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00829.java"}, {"url": "https://raw.githubusercontent.com/OWASP-Benchmark/BenchmarkJava/master/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00501.java", "rawCode": "// False\npublic class BenchmarkTest00501 extends HttpServlet {\n\n    private static final long serialVersionUID = 1L;\n\n    @Override\n    public void doGet(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        doPost(request, response);\n    }\n\n    @Override\n    public void doPost(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        response.setContentType(\"text/html;charset=UTF-8\");\n\n        java.util.Map<String, String[]> map = request.getParameterMap();\n        String param = \"\";\n        if (!map.isEmpty()) {\n            String[] values = map.get(\"BenchmarkTest00501\");\n            if (values != null) param = values[0];\n        }\n\n        String bar = \"\";\n        if (param != null) {\n            java.util.List<String> valuesList = new java.util.ArrayList<String>();\n            valuesList.add(\"safe\");\n            valuesList.add(param);\n            valuesList.add(\"moresafe\");\n\n            valuesList.remove(0); // remove the 1st safe value\n\n            bar = valuesList.get(0); // get the param value\n        }\n\n        try {\n            SecureRandom secureRandomGenerator =\n                    SecureRandom.getInstance(\"SHA1PRNG\");\n\n            // Get 40 random bytes\n            byte[] randomBytes = new byte[40];\n            secureRandomGenerator.nextBytes(randomBytes);\n\n            String rememberMeKey =\n                    org.owasp.esapi.ESAPI.encoder().encodeForBase64(randomBytes, true);\n\n            String user = \"SafeByron\";\n            String fullClassName = this.getClass().getName();\n            String testCaseNumber =\n                    fullClassName.substring(\n                            fullClassName.lastIndexOf('.') + 1 + \"BenchmarkTest\".length());\n            user += testCaseNumber;\n\n            String cookieName = \"rememberMe\" + testCaseNumber;\n\n            boolean foundUser = false;\n            javax.servlet.http.Cookie[] cookies = request.getCookies();\n            if (cookies != null) {\n                for (int i = 0; !foundUser && i < cookies.length; i++) {\n                    javax.servlet.http.Cookie cookie = cookies[i];\n                    if (cookieName.equals(cookie.getName())) {\n                        if (cookie.getValue()\n                                .equals(request.getSession().getAttribute(cookieName))) {\n                            foundUser = true;\n                        }\n                    }\n                }\n            }\n\n            if (foundUser) {\n                response.getWriter().println(\"Welcome back: \" + user + \"<br/>\");\n            } else {\n                javax.servlet.http.Cookie rememberMe =\n                        new javax.servlet.http.Cookie(cookieName, rememberMeKey);\n                rememberMe.setSecure(true);\n                rememberMe.setHttpOnly(true);\n                rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet\n                // e.g., /benchmark/sql-01/BenchmarkTest01001\n                request.getSession().setAttribute(cookieName, rememberMeKey);\n                response.addCookie(rememberMe);\n                response.getWriter()\n                        .println(\n                                user\n                                        + \" has been remembered with cookie: \"\n                                        + rememberMe.getName()\n                                        + \" whose value is: \"\n                                        + rememberMe.getValue()\n                                        + \"<br/>\");\n            }\n        } catch (java.security.NoSuchAlgorithmException e) {\n            System.out.println(\"Problem executing SecureRandom.nextBytes() - TestCase\");\n            throw new ServletException(e);\n        } finally {\n            response.getWriter()\n                    .println(\n                            \"Randomness Test SecureRandom.nextBytes(byte[]) executed\");\n        }\n    }\n}", "exampleID": 582, "dataset": "random", "filepath": "/Users/xxx/repos/active_learning_interface/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00501.java"}, {"url": "https://raw.githubusercontent.com/OWASP-Benchmark/BenchmarkJava/master/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01613.java", "rawCode": "// False\npublic class BenchmarkTest01613 extends HttpServlet {\n\n    private static final long serialVersionUID = 1L;\n\n    @Override\n    public void doGet(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        doPost(request, response);\n    }\n\n    @Override\n    public void doPost(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        response.setContentType(\"text/html;charset=UTF-8\");\n\n        String[] values = request.getParameterValues(\"BenchmarkTest01613\");\n        String param;\n        if (values != null && values.length > 0) param = values[0];\n        else param = \"\";\n\n        String bar = new Test().doSomething(request, param);\n\n        try {\n            int r = SecureRandom.getInstance(\"SHA1PRNG\").nextInt();\n            String rememberMeKey = Integer.toString(r);\n\n            String user = \"SafeIngrid\";\n            String fullClassName = this.getClass().getName();\n            String testCaseNumber =\n                    fullClassName.substring(\n                            fullClassName.lastIndexOf('.') + 1 + \"BenchmarkTest\".length());\n            user += testCaseNumber;\n\n            String cookieName = \"rememberMe\" + testCaseNumber;\n\n            boolean foundUser = false;\n            javax.servlet.http.Cookie[] cookies = request.getCookies();\n            if (cookies != null) {\n                for (int i = 0; !foundUser && i < cookies.length; i++) {\n                    javax.servlet.http.Cookie cookie = cookies[i];\n                    if (cookieName.equals(cookie.getName())) {\n                        if (cookie.getValue()\n                                .equals(request.getSession().getAttribute(cookieName))) {\n                            foundUser = true;\n                        }\n                    }\n                }\n            }\n\n            if (foundUser) {\n                response.getWriter().println(\"Welcome back: \" + user + \"<br/>\");\n            } else {\n                javax.servlet.http.Cookie rememberMe =\n                        new javax.servlet.http.Cookie(cookieName, rememberMeKey);\n                rememberMe.setSecure(true);\n                rememberMe.setHttpOnly(true);\n                rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet\n                // e.g., /benchmark/sql-01/BenchmarkTest01001\n                request.getSession().setAttribute(cookieName, rememberMeKey);\n                response.addCookie(rememberMe);\n                response.getWriter()\n                        .println(\n                                user\n                                        + \" has been remembered with cookie: \"\n                                        + rememberMe.getName()\n                                        + \" whose value is: \"\n                                        + rememberMe.getValue()\n                                        + \"<br/>\");\n            }\n        } catch (java.security.NoSuchAlgorithmException e) {\n            System.out.println(\"Problem executing SecureRandom.nextInt() - TestCase\");\n            throw new ServletException(e);\n        }\n        response.getWriter()\n                .println(\"Weak Randomness Test SecureRandom.nextInt() executed\");\n    } // end doPost\n\n    private class Test {\n\n        public String doSomething(HttpServletRequest request, String param)\n                throws ServletException, IOException {\n\n            String bar;\n\n            // Simple ? condition that assigns constant to bar on true condition\n            int num = 106;\n\n            bar = (7 * 18) + num > 200 ? \"This_should_always_happen\" : param;\n\n            return bar;\n        }\n    } // end innerclass Test\n}", "exampleID": 590, "dataset": "random", "filepath": "/Users/xxx/repos/active_learning_interface/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01613.java"}, {"url": "https://raw.githubusercontent.com/OWASP-Benchmark/BenchmarkJava/master/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01868.java", "rawCode": "// False\npublic class BenchmarkTest01868 extends HttpServlet {\n\n    private static final long serialVersionUID = 1L;\n\n    @Override\n    public void doGet(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        response.setContentType(\"text/html;charset=UTF-8\");\n        javax.servlet.http.Cookie userCookie =\n                new javax.servlet.http.Cookie(\"BenchmarkTest01868\", \"whatever\");\n        userCookie.setMaxAge(60 * 3); // Store cookie for 3 minutes\n        userCookie.setSecure(true);\n        userCookie.setPath(request.getRequestURI());\n        userCookie.setDomain(new java.net.URL(request.getRequestURL().toString()).getHost());\n        response.addCookie(userCookie);\n        javax.servlet.RequestDispatcher rd =\n                request.getRequestDispatcher(\"/weakrand-04/BenchmarkTest01868.html\");\n        rd.include(request, response);\n    }\n\n    @Override\n    public void doPost(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        response.setContentType(\"text/html;charset=UTF-8\");\n\n        javax.servlet.http.Cookie[] theCookies = request.getCookies();\n\n        String param = \"noCookieValueSupplied\";\n        if (theCookies != null) {\n            for (javax.servlet.http.Cookie theCookie : theCookies) {\n                if (theCookie.getName().equals(\"BenchmarkTest01868\")) {\n                    param = java.net.URLDecoder.decode(theCookie.getValue(), \"UTF-8\");\n                    break;\n                }\n            }\n        }\n\n        String bar = doSomething(request, param);\n\n        try {\n            SecureRandom secureRandomGenerator =\n                    SecureRandom.getInstance(\"SHA1PRNG\");\n\n            // Get 40 random bytes\n            byte[] randomBytes = new byte[40];\n            secureRandomGenerator.nextBytes(randomBytes);\n\n            String rememberMeKey =\n                    org.owasp.esapi.ESAPI.encoder().encodeForBase64(randomBytes, true);\n\n            String user = \"SafeByron\";\n            String fullClassName = this.getClass().getName();\n            String testCaseNumber =\n                    fullClassName.substring(\n                            fullClassName.lastIndexOf('.') + 1 + \"BenchmarkTest\".length());\n            user += testCaseNumber;\n\n            String cookieName = \"rememberMe\" + testCaseNumber;\n\n            boolean foundUser = false;\n            javax.servlet.http.Cookie[] cookies = request.getCookies();\n            if (cookies != null) {\n                for (int i = 0; !foundUser && i < cookies.length; i++) {\n                    javax.servlet.http.Cookie cookie = cookies[i];\n                    if (cookieName.equals(cookie.getName())) {\n                        if (cookie.getValue()\n                                .equals(request.getSession().getAttribute(cookieName))) {\n                            foundUser = true;\n                        }\n                    }\n                }\n            }\n\n            if (foundUser) {\n                response.getWriter().println(\"Welcome back: \" + user + \"<br/>\");\n            } else {\n                javax.servlet.http.Cookie rememberMe =\n                        new javax.servlet.http.Cookie(cookieName, rememberMeKey);\n                rememberMe.setSecure(true);\n                rememberMe.setHttpOnly(true);\n                rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet\n                // e.g., /benchmark/sql-01/BenchmarkTest01001\n                request.getSession().setAttribute(cookieName, rememberMeKey);\n                response.addCookie(rememberMe);\n                response.getWriter()\n                        .println(\n                                user\n                                        + \" has been remembered with cookie: \"\n                                        + rememberMe.getName()\n                                        + \" whose value is: \"\n                                        + rememberMe.getValue()\n                                        + \"<br/>\");\n            }\n        } catch (java.security.NoSuchAlgorithmException e) {\n            System.out.println(\"Problem executing SecureRandom.nextBytes() - TestCase\");\n            throw new ServletException(e);\n        } finally {\n            response.getWriter()\n                    .println(\n                            \"Randomness Test SecureRandom.nextBytes(byte[]) executed\");\n        }\n    } // end doPost\n\n    private static String doSomething(HttpServletRequest request, String param)\n            throws ServletException, IOException {\n\n        String bar = \"alsosafe\";\n        if (param != null) {\n            java.util.List<String> valuesList = new java.util.ArrayList<String>();\n            valuesList.add(\"safe\");\n            valuesList.add(param);\n            valuesList.add(\"moresafe\");\n\n            valuesList.remove(0); // remove the 1st safe value\n\n            bar = valuesList.get(1); // get the last 'safe' value\n        }\n\n        return bar;\n    }\n}", "exampleID": 621, "dataset": "random", "filepath": "/Users/xxx/repos/active_learning_interface/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01868.java"}, {"url": "https://raw.githubusercontent.com/OWASP-Benchmark/BenchmarkJava/master/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00916.java", "rawCode": "// False\npublic class BenchmarkTest00916 extends HttpServlet {\n\n    private static final long serialVersionUID = 1L;\n\n    @Override\n    public void doGet(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        doPost(request, response);\n    }\n\n    @Override\n    public void doPost(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        response.setContentType(\"text/html;charset=UTF-8\");\n\n        org.owasp.benchmark.helpers.SeparateClassRequest scr =\n                new org.owasp.benchmark.helpers.SeparateClassRequest(request);\n        String param = scr.getTheValue(\"BenchmarkTest00916\");\n\n        String bar = param;\n        if (param != null && param.length() > 1) {\n            bar = param.substring(0, param.length() - 1);\n        }\n\n        try {\n            double rand = SecureRandom.getInstance(\"SHA1PRNG\").nextDouble();\n\n            String rememberMeKey =\n                    Double.toString(rand).substring(2); // Trim off the 0. at the front.\n\n            String user = \"SafeDonna\";\n            String fullClassName = this.getClass().getName();\n            String testCaseNumber =\n                    fullClassName.substring(\n                            fullClassName.lastIndexOf('.') + 1 + \"BenchmarkTest\".length());\n            user += testCaseNumber;\n\n            String cookieName = \"rememberMe\" + testCaseNumber;\n\n            boolean foundUser = false;\n            javax.servlet.http.Cookie[] cookies = request.getCookies();\n            if (cookies != null) {\n                for (int i = 0; !foundUser && i < cookies.length; i++) {\n                    javax.servlet.http.Cookie cookie = cookies[i];\n                    if (cookieName.equals(cookie.getName())) {\n                        if (cookie.getValue()\n                                .equals(request.getSession().getAttribute(cookieName))) {\n                            foundUser = true;\n                        }\n                    }\n                }\n            }\n\n            if (foundUser) {\n                response.getWriter().println(\"Welcome back: \" + user + \"<br/>\");\n\n            } else {\n                javax.servlet.http.Cookie rememberMe =\n                        new javax.servlet.http.Cookie(cookieName, rememberMeKey);\n                rememberMe.setSecure(true);\n                rememberMe.setHttpOnly(true);\n                rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet\n                // e.g., /benchmark/sql-01/BenchmarkTest01001\n                request.getSession().setAttribute(cookieName, rememberMeKey);\n                response.addCookie(rememberMe);\n                response.getWriter()\n                        .println(\n                                user\n                                        + \" has been remembered with cookie: \"\n                                        + rememberMe.getName()\n                                        + \" whose value is: \"\n                                        + rememberMe.getValue()\n                                        + \"<br/>\");\n            }\n        } catch (java.security.NoSuchAlgorithmException e) {\n            System.out.println(\"Problem executing SecureRandom.nextDouble() - TestCase\");\n            throw new ServletException(e);\n        }\n        response.getWriter()\n                .println(\"Weak Randomness Test SecureRandom.nextDouble() executed\");\n    }\n}", "exampleID": 628, "dataset": "random", "filepath": "/Users/xxx/repos/active_learning_interface/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00916.java"}, {"url": "https://raw.githubusercontent.com/OWASP-Benchmark/BenchmarkJava/master/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02012.java", "rawCode": "// False\npublic class BenchmarkTest02012 extends HttpServlet {\n\n    private static final long serialVersionUID = 1L;\n\n    @Override\n    public void doGet(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        doPost(request, response);\n    }\n\n    @Override\n    public void doPost(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        response.setContentType(\"text/html;charset=UTF-8\");\n\n        String param = \"\";\n        java.util.Enumeration<String> names = request.getHeaderNames();\n        while (names.hasMoreElements()) {\n            String name = (String) names.nextElement();\n\n            if (org.owasp.benchmark.helpers.Utils.commonHeaders.contains(name)) {\n                continue; // If standard header, move on to next one\n            }\n\n            java.util.Enumeration<String> values = request.getHeaders(name);\n            if (values != null && values.hasMoreElements()) {\n                param = name; // Grabs the name of the first non-standard header as the parameter\n                // value\n                break;\n            }\n        }\n        // Note: We don't URL decode header names because people don't normally do that\n\n        String bar = doSomething(request, param);\n\n        try {\n            SecureRandom secureRandomGenerator =\n                    SecureRandom.getInstance(\"SHA1PRNG\");\n\n            // Get 40 random bytes\n            byte[] randomBytes = new byte[40];\n            secureRandomGenerator.nextBytes(randomBytes);\n\n            String rememberMeKey =\n                    org.owasp.esapi.ESAPI.encoder().encodeForBase64(randomBytes, true);\n\n            String user = \"SafeByron\";\n            String fullClassName = this.getClass().getName();\n            String testCaseNumber =\n                    fullClassName.substring(\n                            fullClassName.lastIndexOf('.') + 1 + \"BenchmarkTest\".length());\n            user += testCaseNumber;\n\n            String cookieName = \"rememberMe\" + testCaseNumber;\n\n            boolean foundUser = false;\n            javax.servlet.http.Cookie[] cookies = request.getCookies();\n            if (cookies != null) {\n                for (int i = 0; !foundUser && i < cookies.length; i++) {\n                    javax.servlet.http.Cookie cookie = cookies[i];\n                    if (cookieName.equals(cookie.getName())) {\n                        if (cookie.getValue()\n                                .equals(request.getSession().getAttribute(cookieName))) {\n                            foundUser = true;\n                        }\n                    }\n                }\n            }\n\n            if (foundUser) {\n                response.getWriter().println(\"Welcome back: \" + user + \"<br/>\");\n            } else {\n                javax.servlet.http.Cookie rememberMe =\n                        new javax.servlet.http.Cookie(cookieName, rememberMeKey);\n                rememberMe.setSecure(true);\n                rememberMe.setHttpOnly(true);\n                rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet\n                // e.g., /benchmark/sql-01/BenchmarkTest01001\n                request.getSession().setAttribute(cookieName, rememberMeKey);\n                response.addCookie(rememberMe);\n                response.getWriter()\n                        .println(\n                                user\n                                        + \" has been remembered with cookie: \"\n                                        + rememberMe.getName()\n                                        + \" whose value is: \"\n                                        + rememberMe.getValue()\n                                        + \"<br/>\");\n            }\n        } catch (java.security.NoSuchAlgorithmException e) {\n            System.out.println(\"Problem executing SecureRandom.nextBytes() - TestCase\");\n            throw new ServletException(e);\n        } finally {\n            response.getWriter()\n                    .println(\n                            \"Randomness Test SecureRandom.nextBytes(byte[]) executed\");\n        }\n    } // end doPost\n\n    private static String doSomething(HttpServletRequest request, String param)\n            throws ServletException, IOException {\n\n        // Chain a bunch of propagators in sequence\n        String a69185 = param; // assign\n        StringBuilder b69185 = new StringBuilder(a69185); // stick in stringbuilder\n        b69185.append(\" SafeStuff\"); // append some safe content\n        b69185.replace(\n                b69185.length() - \"Chars\".length(),\n                b69185.length(),\n                \"Chars\"); // replace some of the end content\n        java.util.HashMap<String, Object> map69185 = new java.util.HashMap<String, Object>();\n        map69185.put(\"key69185\", b69185.toString()); // put in a collection\n        String c69185 = (String) map69185.get(\"key69185\"); // get it back out\n        String d69185 = c69185.substring(0, c69185.length() - 1); // extract most of it\n        String e69185 =\n                new String(\n                        org.apache.commons.codec.binary.Base64.decodeBase64(\n                                org.apache.commons.codec.binary.Base64.encodeBase64(\n                                        d69185.getBytes()))); // B64 encode and decode it\n        String f69185 = e69185.split(\" \")[0]; // split it on a space\n        org.owasp.benchmark.helpers.ThingInterface thing =\n                org.owasp.benchmark.helpers.ThingFactory.createThing();\n        String g69185 = \"barbarians_at_the_gate\"; // This is static so this whole flow is 'safe'\n        String bar = thing.doSomething(g69185); // reflection\n\n        return bar;\n    }\n}", "exampleID": 633, "dataset": "random", "filepath": "/Users/xxx/repos/active_learning_interface/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02012.java"}, {"url": "https://raw.githubusercontent.com/OWASP-Benchmark/BenchmarkJava/master/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00915.java", "rawCode": "// False\npublic class BenchmarkTest00915 extends HttpServlet {\n\n    private static final long serialVersionUID = 1L;\n\n    @Override\n    public void doGet(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        doPost(request, response);\n    }\n\n    @Override\n    public void doPost(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        response.setContentType(\"text/html;charset=UTF-8\");\n\n        org.owasp.benchmark.helpers.SeparateClassRequest scr =\n                new org.owasp.benchmark.helpers.SeparateClassRequest(request);\n        String param = scr.getTheValue(\"BenchmarkTest00915\");\n\n        String bar = \"\";\n        if (param != null) bar = param.split(\" \")[0];\n\n        try {\n            double rand = SecureRandom.getInstance(\"SHA1PRNG\").nextDouble();\n\n            String rememberMeKey =\n                    Double.toString(rand).substring(2); // Trim off the 0. at the front.\n\n            String user = \"SafeDonna\";\n            String fullClassName = this.getClass().getName();\n            String testCaseNumber =\n                    fullClassName.substring(\n                            fullClassName.lastIndexOf('.') + 1 + \"BenchmarkTest\".length());\n            user += testCaseNumber;\n\n            String cookieName = \"rememberMe\" + testCaseNumber;\n\n            boolean foundUser = false;\n            javax.servlet.http.Cookie[] cookies = request.getCookies();\n            if (cookies != null) {\n                for (int i = 0; !foundUser && i < cookies.length; i++) {\n                    javax.servlet.http.Cookie cookie = cookies[i];\n                    if (cookieName.equals(cookie.getName())) {\n                        if (cookie.getValue()\n                                .equals(request.getSession().getAttribute(cookieName))) {\n                            foundUser = true;\n                        }\n                    }\n                }\n            }\n\n            if (foundUser) {\n                response.getWriter().println(\"Welcome back: \" + user + \"<br/>\");\n\n            } else {\n                javax.servlet.http.Cookie rememberMe =\n                        new javax.servlet.http.Cookie(cookieName, rememberMeKey);\n                rememberMe.setSecure(true);\n                rememberMe.setHttpOnly(true);\n                rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet\n                // e.g., /benchmark/sql-01/BenchmarkTest01001\n                request.getSession().setAttribute(cookieName, rememberMeKey);\n                response.addCookie(rememberMe);\n                response.getWriter()\n                        .println(\n                                user\n                                        + \" has been remembered with cookie: \"\n                                        + rememberMe.getName()\n                                        + \" whose value is: \"\n                                        + rememberMe.getValue()\n                                        + \"<br/>\");\n            }\n        } catch (java.security.NoSuchAlgorithmException e) {\n            System.out.println(\"Problem executing SecureRandom.nextDouble() - TestCase\");\n            throw new ServletException(e);\n        }\n        response.getWriter()\n                .println(\"Weak Randomness Test SecureRandom.nextDouble() executed\");\n    }\n}", "exampleID": 644, "dataset": "random", "filepath": "/Users/xxx/repos/active_learning_interface/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00915.java"}, {"url": "https://raw.githubusercontent.com/OWASP-Benchmark/BenchmarkJava/master/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00831.java", "rawCode": "// False\npublic class BenchmarkTest00831 extends HttpServlet {\n\n    private static final long serialVersionUID = 1L;\n\n    @Override\n    public void doGet(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        doPost(request, response);\n    }\n\n    @Override\n    public void doPost(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        response.setContentType(\"text/html;charset=UTF-8\");\n\n        String queryString = request.getQueryString();\n        String paramval = \"BenchmarkTest00831\" + \"=\";\n        int paramLoc = -1;\n        if (queryString != null) paramLoc = queryString.indexOf(paramval);\n        if (paramLoc == -1) {\n            response.getWriter()\n                    .println(\n                            \"getQueryString() couldn't find expected parameter '\"\n                                    + \"BenchmarkTest00831\"\n                                    + \"' in query string.\");\n            return;\n        }\n\n        String param =\n                queryString.substring(\n                        paramLoc\n                                + paramval\n                                        .length()); // 1st assume \"BenchmarkTest00831\" param is last\n        // parameter in query string.\n        // And then check to see if its in the middle of the query string and if so, trim off what\n        // comes after.\n        int ampersandLoc = queryString.indexOf(\"&\", paramLoc);\n        if (ampersandLoc != -1) {\n            param = queryString.substring(paramLoc + paramval.length(), ampersandLoc);\n        }\n        param = java.net.URLDecoder.decode(param, \"UTF-8\");\n\n        // Chain a bunch of propagators in sequence\n        String a97193 = param; // assign\n        StringBuilder b97193 = new StringBuilder(a97193); // stick in stringbuilder\n        b97193.append(\" SafeStuff\"); // append some safe content\n        b97193.replace(\n                b97193.length() - \"Chars\".length(),\n                b97193.length(),\n                \"Chars\"); // replace some of the end content\n        java.util.HashMap<String, Object> map97193 = new java.util.HashMap<String, Object>();\n        map97193.put(\"key97193\", b97193.toString()); // put in a collection\n        String c97193 = (String) map97193.get(\"key97193\"); // get it back out\n        String d97193 = c97193.substring(0, c97193.length() - 1); // extract most of it\n        String e97193 =\n                new String(\n                        org.apache.commons.codec.binary.Base64.decodeBase64(\n                                org.apache.commons.codec.binary.Base64.encodeBase64(\n                                        d97193.getBytes()))); // B64 encode and decode it\n        String f97193 = e97193.split(\" \")[0]; // split it on a space\n        org.owasp.benchmark.helpers.ThingInterface thing =\n                org.owasp.benchmark.helpers.ThingFactory.createThing();\n        String g97193 = \"barbarians_at_the_gate\"; // This is static so this whole flow is 'safe'\n        String bar = thing.doSomething(g97193); // reflection\n\n        try {\n            int randNumber = SecureRandom.getInstance(\"SHA1PRNG\").nextInt(99);\n            String rememberMeKey = Integer.toString(randNumber);\n\n            String user = \"SafeInga\";\n            String fullClassName = this.getClass().getName();\n            String testCaseNumber =\n                    fullClassName.substring(\n                            fullClassName.lastIndexOf('.') + 1 + \"BenchmarkTest\".length());\n            user += testCaseNumber;\n\n            String cookieName = \"rememberMe\" + testCaseNumber;\n\n            boolean foundUser = false;\n            javax.servlet.http.Cookie[] cookies = request.getCookies();\n            if (cookies != null) {\n                for (int i = 0; !foundUser && i < cookies.length; i++) {\n                    javax.servlet.http.Cookie cookie = cookies[i];\n                    if (cookieName.equals(cookie.getName())) {\n                        if (cookie.getValue()\n                                .equals(request.getSession().getAttribute(cookieName))) {\n                            foundUser = true;\n                        }\n                    }\n                }\n            }\n\n            if (foundUser) {\n                response.getWriter().println(\"Welcome back: \" + user + \"<br/>\");\n            } else {\n                javax.servlet.http.Cookie rememberMe =\n                        new javax.servlet.http.Cookie(cookieName, rememberMeKey);\n                rememberMe.setSecure(true);\n                rememberMe.setHttpOnly(true);\n                rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet\n                // e.g., /benchmark/sql-01/BenchmarkTest01001\n                request.getSession().setAttribute(cookieName, rememberMeKey);\n                response.addCookie(rememberMe);\n                response.getWriter()\n                        .println(\n                                user\n                                        + \" has been remembered with cookie: \"\n                                        + rememberMe.getName()\n                                        + \" whose value is: \"\n                                        + rememberMe.getValue()\n                                        + \"<br/>\");\n            }\n        } catch (java.security.NoSuchAlgorithmException e) {\n            System.out.println(\"Problem executing SecureRandom.nextInt(int) - TestCase\");\n            throw new ServletException(e);\n        }\n        response.getWriter()\n                .println(\"Weak Randomness Test SecureRandom.nextInt(int) executed\");\n    }\n}", "exampleID": 671, "dataset": "random", "filepath": "/Users/xxx/repos/active_learning_interface/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00831.java"}, {"url": "https://raw.githubusercontent.com/OWASP-Benchmark/BenchmarkJava/master/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00666.java", "rawCode": "// False\npublic class BenchmarkTest00666 extends HttpServlet {\n\n    private static final long serialVersionUID = 1L;\n\n    @Override\n    public void doGet(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        doPost(request, response);\n    }\n\n    @Override\n    public void doPost(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        response.setContentType(\"text/html;charset=UTF-8\");\n\n        org.owasp.benchmark.helpers.SeparateClassRequest scr =\n                new org.owasp.benchmark.helpers.SeparateClassRequest(request);\n        String param = scr.getTheParameter(\"BenchmarkTest00666\");\n        if (param == null) param = \"\";\n\n        String bar = param;\n        if (param != null && param.length() > 1) {\n            StringBuilder sbxyz65591 = new StringBuilder(param);\n            bar = sbxyz65591.replace(param.length() - \"Z\".length(), param.length(), \"Z\").toString();\n        }\n\n        try {\n            double stuff = SecureRandom.getInstance(\"SHA1PRNG\").nextGaussian();\n            String rememberMeKey =\n                    Double.toString(stuff).substring(2); // Trim off the 0. at the front.\n\n            String user = \"SafeGayle\";\n            String fullClassName = this.getClass().getName();\n            String testCaseNumber =\n                    fullClassName.substring(\n                            fullClassName.lastIndexOf('.') + 1 + \"BenchmarkTest\".length());\n            user += testCaseNumber;\n\n            String cookieName = \"rememberMe\" + testCaseNumber;\n\n            boolean foundUser = false;\n            javax.servlet.http.Cookie[] cookies = request.getCookies();\n            if (cookies != null) {\n                for (int i = 0; !foundUser && i < cookies.length; i++) {\n                    javax.servlet.http.Cookie cookie = cookies[i];\n                    if (cookieName.equals(cookie.getName())) {\n                        if (cookie.getValue()\n                                .equals(request.getSession().getAttribute(cookieName))) {\n                            foundUser = true;\n                        }\n                    }\n                }\n            }\n\n            if (foundUser) {\n                response.getWriter().println(\"Welcome back: \" + user + \"<br/>\");\n            } else {\n                javax.servlet.http.Cookie rememberMe =\n                        new javax.servlet.http.Cookie(cookieName, rememberMeKey);\n                rememberMe.setSecure(true);\n                rememberMe.setHttpOnly(true);\n                rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet\n                // e.g., /benchmark/sql-01/BenchmarkTest01001\n                request.getSession().setAttribute(cookieName, rememberMeKey);\n                response.addCookie(rememberMe);\n                response.getWriter()\n                        .println(\n                                user\n                                        + \" has been remembered with cookie: \"\n                                        + rememberMe.getName()\n                                        + \" whose value is: \"\n                                        + rememberMe.getValue()\n                                        + \"<br/>\");\n            }\n        } catch (java.security.NoSuchAlgorithmException e) {\n            System.out.println(\"Problem executing SecureRandom.nextGaussian() - TestCase\");\n            throw new ServletException(e);\n        }\n        response.getWriter()\n                .println(\"Weak Randomness Test SecureRandom.nextGaussian() executed\");\n    }\n}", "exampleID": 682, "dataset": "random", "filepath": "/Users/xxx/repos/active_learning_interface/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00666.java"}, {"url": "https://raw.githubusercontent.com/OWASP-Benchmark/BenchmarkJava/master/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01450.java", "rawCode": "// False\npublic class BenchmarkTest01450 extends HttpServlet {\n\n    private static final long serialVersionUID = 1L;\n\n    @Override\n    public void doGet(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        doPost(request, response);\n    }\n\n    @Override\n    public void doPost(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        response.setContentType(\"text/html;charset=UTF-8\");\n\n        String param = \"\";\n        boolean flag = true;\n        java.util.Enumeration<String> names = request.getParameterNames();\n        while (names.hasMoreElements() && flag) {\n            String name = (String) names.nextElement();\n            String[] values = request.getParameterValues(name);\n            if (values != null) {\n                for (int i = 0; i < values.length && flag; i++) {\n                    String value = values[i];\n                    if (value.equals(\"BenchmarkTest01450\")) {\n                        param = name;\n                        flag = false;\n                    }\n                }\n            }\n        }\n\n        String bar = new Test().doSomething(request, param);\n\n        try {\n            SecureRandom secureRandomGenerator =\n                    SecureRandom.getInstance(\"SHA1PRNG\");\n\n            // Get 40 random bytes\n            byte[] randomBytes = new byte[40];\n            secureRandomGenerator.nextBytes(randomBytes);\n\n            String rememberMeKey =\n                    org.owasp.esapi.ESAPI.encoder().encodeForBase64(randomBytes, true);\n\n            String user = \"SafeByron\";\n            String fullClassName = this.getClass().getName();\n            String testCaseNumber =\n                    fullClassName.substring(\n                            fullClassName.lastIndexOf('.') + 1 + \"BenchmarkTest\".length());\n            user += testCaseNumber;\n\n            String cookieName = \"rememberMe\" + testCaseNumber;\n\n            boolean foundUser = false;\n            javax.servlet.http.Cookie[] cookies = request.getCookies();\n            if (cookies != null) {\n                for (int i = 0; !foundUser && i < cookies.length; i++) {\n                    javax.servlet.http.Cookie cookie = cookies[i];\n                    if (cookieName.equals(cookie.getName())) {\n                        if (cookie.getValue()\n                                .equals(request.getSession().getAttribute(cookieName))) {\n                            foundUser = true;\n                        }\n                    }\n                }\n            }\n\n            if (foundUser) {\n                response.getWriter().println(\"Welcome back: \" + user + \"<br/>\");\n            } else {\n                javax.servlet.http.Cookie rememberMe =\n                        new javax.servlet.http.Cookie(cookieName, rememberMeKey);\n                rememberMe.setSecure(true);\n                rememberMe.setHttpOnly(true);\n                rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet\n                // e.g., /benchmark/sql-01/BenchmarkTest01001\n                request.getSession().setAttribute(cookieName, rememberMeKey);\n                response.addCookie(rememberMe);\n                response.getWriter()\n                        .println(\n                                user\n                                        + \" has been remembered with cookie: \"\n                                        + rememberMe.getName()\n                                        + \" whose value is: \"\n                                        + rememberMe.getValue()\n                                        + \"<br/>\");\n            }\n        } catch (java.security.NoSuchAlgorithmException e) {\n            System.out.println(\"Problem executing SecureRandom.nextBytes() - TestCase\");\n            throw new ServletException(e);\n        } finally {\n            response.getWriter()\n                    .println(\n                            \"Randomness Test SecureRandom.nextBytes(byte[]) executed\");\n        }\n    } // end doPost\n\n    private class Test {\n\n        public String doSomething(HttpServletRequest request, String param)\n                throws ServletException, IOException {\n\n            String bar = \"safe!\";\n            java.util.HashMap<String, Object> map75877 = new java.util.HashMap<String, Object>();\n            map75877.put(\"keyA-75877\", \"a_Value\"); // put some stuff in the collection\n            map75877.put(\"keyB-75877\", param); // put it in a collection\n            map75877.put(\"keyC\", \"another_Value\"); // put some stuff in the collection\n            bar = (String) map75877.get(\"keyB-75877\"); // get it back out\n            bar = (String) map75877.get(\"keyA-75877\"); // get safe value back out\n\n            return bar;\n        }\n    } // end innerclass Test\n}", "exampleID": 694, "dataset": "random", "filepath": "/Users/xxx/repos/active_learning_interface/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01450.java"}, {"url": "https://raw.githubusercontent.com/OWASP-Benchmark/BenchmarkJava/master/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00421.java", "rawCode": "// False\npublic class BenchmarkTest00421 extends HttpServlet {\n\n    private static final long serialVersionUID = 1L;\n\n    @Override\n    public void doGet(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        doPost(request, response);\n    }\n\n    @Override\n    public void doPost(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        response.setContentType(\"text/html;charset=UTF-8\");\n\n        String param = request.getParameter(\"BenchmarkTest00421\");\n        if (param == null) param = \"\";\n\n        String bar = param;\n\n        try {\n            int randNumber = SecureRandom.getInstance(\"SHA1PRNG\").nextInt(99);\n            String rememberMeKey = Integer.toString(randNumber);\n\n            String user = \"SafeInga\";\n            String fullClassName = this.getClass().getName();\n            String testCaseNumber =\n                    fullClassName.substring(\n                            fullClassName.lastIndexOf('.') + 1 + \"BenchmarkTest\".length());\n            user += testCaseNumber;\n\n            String cookieName = \"rememberMe\" + testCaseNumber;\n\n            boolean foundUser = false;\n            javax.servlet.http.Cookie[] cookies = request.getCookies();\n            if (cookies != null) {\n                for (int i = 0; !foundUser && i < cookies.length; i++) {\n                    javax.servlet.http.Cookie cookie = cookies[i];\n                    if (cookieName.equals(cookie.getName())) {\n                        if (cookie.getValue()\n                                .equals(request.getSession().getAttribute(cookieName))) {\n                            foundUser = true;\n                        }\n                    }\n                }\n            }\n\n            if (foundUser) {\n                response.getWriter().println(\"Welcome back: \" + user + \"<br/>\");\n            } else {\n                javax.servlet.http.Cookie rememberMe =\n                        new javax.servlet.http.Cookie(cookieName, rememberMeKey);\n                rememberMe.setSecure(true);\n                rememberMe.setHttpOnly(true);\n                rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet\n                // e.g., /benchmark/sql-01/BenchmarkTest01001\n                request.getSession().setAttribute(cookieName, rememberMeKey);\n                response.addCookie(rememberMe);\n                response.getWriter()\n                        .println(\n                                user\n                                        + \" has been remembered with cookie: \"\n                                        + rememberMe.getName()\n                                        + \" whose value is: \"\n                                        + rememberMe.getValue()\n                                        + \"<br/>\");\n            }\n        } catch (java.security.NoSuchAlgorithmException e) {\n            System.out.println(\"Problem executing SecureRandom.nextInt(int) - TestCase\");\n            throw new ServletException(e);\n        }\n        response.getWriter()\n                .println(\"Weak Randomness Test SecureRandom.nextInt(int) executed\");\n    }\n}", "exampleID": 717, "dataset": "random", "filepath": "/Users/xxx/repos/active_learning_interface/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00421.java"}, {"url": "https://raw.githubusercontent.com/OWASP-Benchmark/BenchmarkJava/master/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01139.java", "rawCode": "// False\npublic class BenchmarkTest01139 extends HttpServlet {\n\n    private static final long serialVersionUID = 1L;\n\n    @Override\n    public void doGet(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        doPost(request, response);\n    }\n\n    @Override\n    public void doPost(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        response.setContentType(\"text/html;charset=UTF-8\");\n\n        String param = \"\";\n        java.util.Enumeration<String> names = request.getHeaderNames();\n        while (names.hasMoreElements()) {\n            String name = (String) names.nextElement();\n\n            if (org.owasp.benchmark.helpers.Utils.commonHeaders.contains(name)) {\n                continue; // If standard header, move on to next one\n            }\n\n            java.util.Enumeration<String> values = request.getHeaders(name);\n            if (values != null && values.hasMoreElements()) {\n                param = name; // Grabs the name of the first non-standard header as the parameter\n                // value\n                break;\n            }\n        }\n        // Note: We don't URL decode header names because people don't normally do that\n\n        String bar = new Test().doSomething(request, param);\n\n        try {\n            double stuff = SecureRandom.getInstance(\"SHA1PRNG\").nextGaussian();\n            String rememberMeKey =\n                    Double.toString(stuff).substring(2); // Trim off the 0. at the front.\n\n            String user = \"SafeGayle\";\n            String fullClassName = this.getClass().getName();\n            String testCaseNumber =\n                    fullClassName.substring(\n                            fullClassName.lastIndexOf('.') + 1 + \"BenchmarkTest\".length());\n            user += testCaseNumber;\n\n            String cookieName = \"rememberMe\" + testCaseNumber;\n\n            boolean foundUser = false;\n            javax.servlet.http.Cookie[] cookies = request.getCookies();\n            if (cookies != null) {\n                for (int i = 0; !foundUser && i < cookies.length; i++) {\n                    javax.servlet.http.Cookie cookie = cookies[i];\n                    if (cookieName.equals(cookie.getName())) {\n                        if (cookie.getValue()\n                                .equals(request.getSession().getAttribute(cookieName))) {\n                            foundUser = true;\n                        }\n                    }\n                }\n            }\n\n            if (foundUser) {\n                response.getWriter().println(\"Welcome back: \" + user + \"<br/>\");\n            } else {\n                javax.servlet.http.Cookie rememberMe =\n                        new javax.servlet.http.Cookie(cookieName, rememberMeKey);\n                rememberMe.setSecure(true);\n                rememberMe.setHttpOnly(true);\n                rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet\n                // e.g., /benchmark/sql-01/BenchmarkTest01001\n                request.getSession().setAttribute(cookieName, rememberMeKey);\n                response.addCookie(rememberMe);\n                response.getWriter()\n                        .println(\n                                user\n                                        + \" has been remembered with cookie: \"\n                                        + rememberMe.getName()\n                                        + \" whose value is: \"\n                                        + rememberMe.getValue()\n                                        + \"<br/>\");\n            }\n        } catch (java.security.NoSuchAlgorithmException e) {\n            System.out.println(\"Problem executing SecureRandom.nextGaussian() - TestCase\");\n            throw new ServletException(e);\n        }\n        response.getWriter()\n                .println(\"Weak Randomness Test SecureRandom.nextGaussian() executed\");\n    } // end doPost\n\n    private class Test {\n\n        public String doSomething(HttpServletRequest request, String param)\n                throws ServletException, IOException {\n\n            String bar = param;\n            if (param != null && param.length() > 1) {\n                StringBuilder sbxyz40917 = new StringBuilder(param);\n                bar =\n                        sbxyz40917\n                                .replace(param.length() - \"Z\".length(), param.length(), \"Z\")\n                                .toString();\n            }\n\n            return bar;\n        }\n    } // end innerclass Test\n}", "exampleID": 719, "dataset": "random", "filepath": "/Users/xxx/repos/active_learning_interface/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01139.java"}, {"url": "https://raw.githubusercontent.com/OWASP-Benchmark/BenchmarkJava/master/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00745.java", "rawCode": "// False\npublic class BenchmarkTest00745 extends HttpServlet {\n\n    private static final long serialVersionUID = 1L;\n\n    @Override\n    public void doGet(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        doPost(request, response);\n    }\n\n    @Override\n    public void doPost(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        response.setContentType(\"text/html;charset=UTF-8\");\n\n        String[] values = request.getParameterValues(\"BenchmarkTest00745\");\n        String param;\n        if (values != null && values.length > 0) param = values[0];\n        else param = \"\";\n\n        String bar = org.apache.commons.lang.StringEscapeUtils.escapeHtml(param);\n\n        try {\n            SecureRandom secureRandomGenerator =\n                    SecureRandom.getInstance(\"SHA1PRNG\");\n\n            // Get 40 random bytes\n            byte[] randomBytes = new byte[40];\n            secureRandomGenerator.nextBytes(randomBytes);\n\n            String rememberMeKey =\n                    org.owasp.esapi.ESAPI.encoder().encodeForBase64(randomBytes, true);\n\n            String user = \"SafeByron\";\n            String fullClassName = this.getClass().getName();\n            String testCaseNumber =\n                    fullClassName.substring(\n                            fullClassName.lastIndexOf('.') + 1 + \"BenchmarkTest\".length());\n            user += testCaseNumber;\n\n            String cookieName = \"rememberMe\" + testCaseNumber;\n\n            boolean foundUser = false;\n            javax.servlet.http.Cookie[] cookies = request.getCookies();\n            if (cookies != null) {\n                for (int i = 0; !foundUser && i < cookies.length; i++) {\n                    javax.servlet.http.Cookie cookie = cookies[i];\n                    if (cookieName.equals(cookie.getName())) {\n                        if (cookie.getValue()\n                                .equals(request.getSession().getAttribute(cookieName))) {\n                            foundUser = true;\n                        }\n                    }\n                }\n            }\n\n            if (foundUser) {\n                response.getWriter().println(\"Welcome back: \" + user + \"<br/>\");\n            } else {\n                javax.servlet.http.Cookie rememberMe =\n                        new javax.servlet.http.Cookie(cookieName, rememberMeKey);\n                rememberMe.setSecure(true);\n                rememberMe.setHttpOnly(true);\n                rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet\n                // e.g., /benchmark/sql-01/BenchmarkTest01001\n                request.getSession().setAttribute(cookieName, rememberMeKey);\n                response.addCookie(rememberMe);\n                response.getWriter()\n                        .println(\n                                user\n                                        + \" has been remembered with cookie: \"\n                                        + rememberMe.getName()\n                                        + \" whose value is: \"\n                                        + rememberMe.getValue()\n                                        + \"<br/>\");\n            }\n        } catch (java.security.NoSuchAlgorithmException e) {\n            System.out.println(\"Problem executing SecureRandom.nextBytes() - TestCase\");\n            throw new ServletException(e);\n        } finally {\n            response.getWriter()\n                    .println(\n                            \"Randomness Test SecureRandom.nextBytes(byte[]) executed\");\n        }\n    }\n}", "exampleID": 734, "dataset": "random", "filepath": "/Users/xxx/repos/active_learning_interface/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00745.java"}, {"url": "https://raw.githubusercontent.com/OWASP-Benchmark/BenchmarkJava/master/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00753.java", "rawCode": "// False\npublic class BenchmarkTest00753 extends HttpServlet {\n\n    private static final long serialVersionUID = 1L;\n\n    @Override\n    public void doGet(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        doPost(request, response);\n    }\n\n    @Override\n    public void doPost(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        response.setContentType(\"text/html;charset=UTF-8\");\n\n        String[] values = request.getParameterValues(\"BenchmarkTest00753\");\n        String param;\n        if (values != null && values.length > 0) param = values[0];\n        else param = \"\";\n\n        org.owasp.benchmark.helpers.ThingInterface thing =\n                org.owasp.benchmark.helpers.ThingFactory.createThing();\n        String bar = thing.doSomething(param);\n\n        try {\n            long l = SecureRandom.getInstance(\"SHA1PRNG\").nextLong();\n            String rememberMeKey = Long.toString(l);\n\n            String user = \"SafeLogan\";\n            String fullClassName = this.getClass().getName();\n            String testCaseNumber =\n                    fullClassName.substring(\n                            fullClassName.lastIndexOf('.') + 1 + \"BenchmarkTest\".length());\n            user += testCaseNumber;\n\n            String cookieName = \"rememberMe\" + testCaseNumber;\n\n            boolean foundUser = false;\n            javax.servlet.http.Cookie[] cookies = request.getCookies();\n            if (cookies != null) {\n                for (int i = 0; !foundUser && i < cookies.length; i++) {\n                    javax.servlet.http.Cookie cookie = cookies[i];\n                    if (cookieName.equals(cookie.getName())) {\n                        if (cookie.getValue()\n                                .equals(request.getSession().getAttribute(cookieName))) {\n                            foundUser = true;\n                        }\n                    }\n                }\n            }\n\n            if (foundUser) {\n                response.getWriter().println(\"Welcome back: \" + user + \"<br/>\");\n            } else {\n                javax.servlet.http.Cookie rememberMe =\n                        new javax.servlet.http.Cookie(cookieName, rememberMeKey);\n                rememberMe.setSecure(true);\n                rememberMe.setHttpOnly(true);\n                rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet\n                // e.g., /benchmark/sql-01/BenchmarkTest01001\n                request.getSession().setAttribute(cookieName, rememberMeKey);\n                response.addCookie(rememberMe);\n                response.getWriter()\n                        .println(\n                                user\n                                        + \" has been remembered with cookie: \"\n                                        + rememberMe.getName()\n                                        + \" whose value is: \"\n                                        + rememberMe.getValue()\n                                        + \"<br/>\");\n            }\n        } catch (java.security.NoSuchAlgorithmException e) {\n            System.out.println(\"Problem executing SecureRandom.nextLong() - TestCase\");\n            throw new ServletException(e);\n        }\n        response.getWriter()\n                .println(\"Weak Randomness Test SecureRandom.nextLong() executed\");\n    }\n}", "exampleID": 737, "dataset": "random", "filepath": "/Users/xxx/repos/active_learning_interface/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00753.java"}, {"url": "https://raw.githubusercontent.com/OWASP-Benchmark/BenchmarkJava/master/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00247.java", "rawCode": "// False\npublic class BenchmarkTest00247 extends HttpServlet {\n\n    private static final long serialVersionUID = 1L;\n\n    @Override\n    public void doGet(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        doPost(request, response);\n    }\n\n    @Override\n    public void doPost(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        response.setContentType(\"text/html;charset=UTF-8\");\n\n        String param = \"\";\n        java.util.Enumeration<String> names = request.getHeaderNames();\n        while (names.hasMoreElements()) {\n            String name = (String) names.nextElement();\n\n            if (org.owasp.benchmark.helpers.Utils.commonHeaders.contains(name)) {\n                continue; // If standard header, move on to next one\n            }\n\n            java.util.Enumeration<String> values = request.getHeaders(name);\n            if (values != null && values.hasMoreElements()) {\n                param = name; // Grabs the name of the first non-standard header as the parameter\n                // value\n                break;\n            }\n        }\n        // Note: We don't URL decode header names because people don't normally do that\n\n        String bar = param;\n        if (param != null && param.length() > 1) {\n            StringBuilder sbxyz47256 = new StringBuilder(param);\n            bar = sbxyz47256.replace(param.length() - \"Z\".length(), param.length(), \"Z\").toString();\n        }\n\n        try {\n            double rand = SecureRandom.getInstance(\"SHA1PRNG\").nextDouble();\n\n            String rememberMeKey =\n                    Double.toString(rand).substring(2); // Trim off the 0. at the front.\n\n            String user = \"SafeDonna\";\n            String fullClassName = this.getClass().getName();\n            String testCaseNumber =\n                    fullClassName.substring(\n                            fullClassName.lastIndexOf('.') + 1 + \"BenchmarkTest\".length());\n            user += testCaseNumber;\n\n            String cookieName = \"rememberMe\" + testCaseNumber;\n\n            boolean foundUser = false;\n            javax.servlet.http.Cookie[] cookies = request.getCookies();\n            if (cookies != null) {\n                for (int i = 0; !foundUser && i < cookies.length; i++) {\n                    javax.servlet.http.Cookie cookie = cookies[i];\n                    if (cookieName.equals(cookie.getName())) {\n                        if (cookie.getValue()\n                                .equals(request.getSession().getAttribute(cookieName))) {\n                            foundUser = true;\n                        }\n                    }\n                }\n            }\n\n            if (foundUser) {\n                response.getWriter().println(\"Welcome back: \" + user + \"<br/>\");\n\n            } else {\n                javax.servlet.http.Cookie rememberMe =\n                        new javax.servlet.http.Cookie(cookieName, rememberMeKey);\n                rememberMe.setSecure(true);\n                rememberMe.setHttpOnly(true);\n                rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet\n                // e.g., /benchmark/sql-01/BenchmarkTest01001\n                request.getSession().setAttribute(cookieName, rememberMeKey);\n                response.addCookie(rememberMe);\n                response.getWriter()\n                        .println(\n                                user\n                                        + \" has been remembered with cookie: \"\n                                        + rememberMe.getName()\n                                        + \" whose value is: \"\n                                        + rememberMe.getValue()\n                                        + \"<br/>\");\n            }\n        } catch (java.security.NoSuchAlgorithmException e) {\n            System.out.println(\"Problem executing SecureRandom.nextDouble() - TestCase\");\n            throw new ServletException(e);\n        }\n        response.getWriter()\n                .println(\"Weak Randomness Test SecureRandom.nextDouble() executed\");\n    }\n}", "exampleID": 747, "dataset": "random", "filepath": "/Users/xxx/repos/active_learning_interface/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00247.java"}, {"url": "https://raw.githubusercontent.com/OWASP-Benchmark/BenchmarkJava/master/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00744.java", "rawCode": "// False\npublic class BenchmarkTest00744 extends HttpServlet {\n\n    private static final long serialVersionUID = 1L;\n\n    @Override\n    public void doGet(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        doPost(request, response);\n    }\n\n    @Override\n    public void doPost(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        response.setContentType(\"text/html;charset=UTF-8\");\n\n        String[] values = request.getParameterValues(\"BenchmarkTest00744\");\n        String param;\n        if (values != null && values.length > 0) param = values[0];\n        else param = \"\";\n\n        String bar = \"\";\n        if (param != null) {\n            java.util.List<String> valuesList = new java.util.ArrayList<String>();\n            valuesList.add(\"safe\");\n            valuesList.add(param);\n            valuesList.add(\"moresafe\");\n\n            valuesList.remove(0); // remove the 1st safe value\n\n            bar = valuesList.get(0); // get the param value\n        }\n\n        try {\n            SecureRandom secureRandomGenerator =\n                    SecureRandom.getInstance(\"SHA1PRNG\");\n\n            // Get 40 random bytes\n            byte[] randomBytes = new byte[40];\n            secureRandomGenerator.nextBytes(randomBytes);\n\n            String rememberMeKey =\n                    org.owasp.esapi.ESAPI.encoder().encodeForBase64(randomBytes, true);\n\n            String user = \"SafeByron\";\n            String fullClassName = this.getClass().getName();\n            String testCaseNumber =\n                    fullClassName.substring(\n                            fullClassName.lastIndexOf('.') + 1 + \"BenchmarkTest\".length());\n            user += testCaseNumber;\n\n            String cookieName = \"rememberMe\" + testCaseNumber;\n\n            boolean foundUser = false;\n            javax.servlet.http.Cookie[] cookies = request.getCookies();\n            if (cookies != null) {\n                for (int i = 0; !foundUser && i < cookies.length; i++) {\n                    javax.servlet.http.Cookie cookie = cookies[i];\n                    if (cookieName.equals(cookie.getName())) {\n                        if (cookie.getValue()\n                                .equals(request.getSession().getAttribute(cookieName))) {\n                            foundUser = true;\n                        }\n                    }\n                }\n            }\n\n            if (foundUser) {\n                response.getWriter().println(\"Welcome back: \" + user + \"<br/>\");\n            } else {\n                javax.servlet.http.Cookie rememberMe =\n                        new javax.servlet.http.Cookie(cookieName, rememberMeKey);\n                rememberMe.setSecure(true);\n                rememberMe.setHttpOnly(true);\n                rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet\n                // e.g., /benchmark/sql-01/BenchmarkTest01001\n                request.getSession().setAttribute(cookieName, rememberMeKey);\n                response.addCookie(rememberMe);\n                response.getWriter()\n                        .println(\n                                user\n                                        + \" has been remembered with cookie: \"\n                                        + rememberMe.getName()\n                                        + \" whose value is: \"\n                                        + rememberMe.getValue()\n                                        + \"<br/>\");\n            }\n        } catch (java.security.NoSuchAlgorithmException e) {\n            System.out.println(\"Problem executing SecureRandom.nextBytes() - TestCase\");\n            throw new ServletException(e);\n        } finally {\n            response.getWriter()\n                    .println(\n                            \"Randomness Test SecureRandom.nextBytes(byte[]) executed\");\n        }\n    }\n}", "exampleID": 751, "dataset": "random", "filepath": "/Users/xxx/repos/active_learning_interface/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00744.java"}, {"url": "https://raw.githubusercontent.com/OWASP-Benchmark/BenchmarkJava/master/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00912.java", "rawCode": "// False\npublic class BenchmarkTest00912 extends HttpServlet {\n\n    private static final long serialVersionUID = 1L;\n\n    @Override\n    public void doGet(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        doPost(request, response);\n    }\n\n    @Override\n    public void doPost(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        response.setContentType(\"text/html;charset=UTF-8\");\n\n        org.owasp.benchmark.helpers.SeparateClassRequest scr =\n                new org.owasp.benchmark.helpers.SeparateClassRequest(request);\n        String param = scr.getTheValue(\"BenchmarkTest00912\");\n\n        String bar;\n\n        // Simple if statement that assigns constant to bar on true condition\n        int num = 86;\n        if ((7 * 42) - num > 200) bar = \"This_should_always_happen\";\n        else bar = param;\n\n        try {\n            SecureRandom secureRandomGenerator =\n                    SecureRandom.getInstance(\"SHA1PRNG\");\n\n            // Get 40 random bytes\n            byte[] randomBytes = new byte[40];\n            secureRandomGenerator.nextBytes(randomBytes);\n\n            String rememberMeKey =\n                    org.owasp.esapi.ESAPI.encoder().encodeForBase64(randomBytes, true);\n\n            String user = \"SafeByron\";\n            String fullClassName = this.getClass().getName();\n            String testCaseNumber =\n                    fullClassName.substring(\n                            fullClassName.lastIndexOf('.') + 1 + \"BenchmarkTest\".length());\n            user += testCaseNumber;\n\n            String cookieName = \"rememberMe\" + testCaseNumber;\n\n            boolean foundUser = false;\n            javax.servlet.http.Cookie[] cookies = request.getCookies();\n            if (cookies != null) {\n                for (int i = 0; !foundUser && i < cookies.length; i++) {\n                    javax.servlet.http.Cookie cookie = cookies[i];\n                    if (cookieName.equals(cookie.getName())) {\n                        if (cookie.getValue()\n                                .equals(request.getSession().getAttribute(cookieName))) {\n                            foundUser = true;\n                        }\n                    }\n                }\n            }\n\n            if (foundUser) {\n                response.getWriter().println(\"Welcome back: \" + user + \"<br/>\");\n            } else {\n                javax.servlet.http.Cookie rememberMe =\n                        new javax.servlet.http.Cookie(cookieName, rememberMeKey);\n                rememberMe.setSecure(true);\n                rememberMe.setHttpOnly(true);\n                rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet\n                // e.g., /benchmark/sql-01/BenchmarkTest01001\n                request.getSession().setAttribute(cookieName, rememberMeKey);\n                response.addCookie(rememberMe);\n                response.getWriter()\n                        .println(\n                                user\n                                        + \" has been remembered with cookie: \"\n                                        + rememberMe.getName()\n                                        + \" whose value is: \"\n                                        + rememberMe.getValue()\n                                        + \"<br/>\");\n            }\n        } catch (java.security.NoSuchAlgorithmException e) {\n            System.out.println(\"Problem executing SecureRandom.nextBytes() - TestCase\");\n            throw new ServletException(e);\n        } finally {\n            response.getWriter()\n                    .println(\n                            \"Randomness Test SecureRandom.nextBytes(byte[]) executed\");\n        }\n    }\n}", "exampleID": 755, "dataset": "random", "filepath": "/Users/xxx/repos/active_learning_interface/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00912.java"}, {"url": "https://raw.githubusercontent.com/OWASP-Benchmark/BenchmarkJava/master/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00504.java", "rawCode": "// False\npublic class BenchmarkTest00504 extends HttpServlet {\n\n    private static final long serialVersionUID = 1L;\n\n    @Override\n    public void doGet(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        doPost(request, response);\n    }\n\n    @Override\n    public void doPost(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        response.setContentType(\"text/html;charset=UTF-8\");\n\n        java.util.Map<String, String[]> map = request.getParameterMap();\n        String param = \"\";\n        if (!map.isEmpty()) {\n            String[] values = map.get(\"BenchmarkTest00504\");\n            if (values != null) param = values[0];\n        }\n\n        String bar = org.owasp.esapi.ESAPI.encoder().encodeForHTML(param);\n\n        try {\n            float rand = SecureRandom.getInstance(\"SHA1PRNG\").nextFloat();\n            String rememberMeKey =\n                    Float.toString(rand).substring(2); // Trim off the 0. at the front.\n\n            String user = \"SafeFloyd\";\n            String fullClassName = this.getClass().getName();\n            String testCaseNumber =\n                    fullClassName.substring(\n                            fullClassName.lastIndexOf('.') + 1 + \"BenchmarkTest\".length());\n            user += testCaseNumber;\n\n            String cookieName = \"rememberMe\" + testCaseNumber;\n\n            boolean foundUser = false;\n            javax.servlet.http.Cookie[] cookies = request.getCookies();\n            if (cookies != null) {\n                for (int i = 0; !foundUser && i < cookies.length; i++) {\n                    javax.servlet.http.Cookie cookie = cookies[i];\n                    if (cookieName.equals(cookie.getName())) {\n                        if (cookie.getValue()\n                                .equals(request.getSession().getAttribute(cookieName))) {\n                            foundUser = true;\n                        }\n                    }\n                }\n            }\n\n            if (foundUser) {\n                response.getWriter().println(\"Welcome back: \" + user + \"<br/>\");\n            } else {\n                javax.servlet.http.Cookie rememberMe =\n                        new javax.servlet.http.Cookie(cookieName, rememberMeKey);\n                rememberMe.setSecure(true);\n                rememberMe.setHttpOnly(true);\n                rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet\n                // e.g., /benchmark/sql-01/BenchmarkTest01001\n                request.getSession().setAttribute(cookieName, rememberMeKey);\n                response.addCookie(rememberMe);\n                response.getWriter()\n                        .println(\n                                user\n                                        + \" has been remembered with cookie: \"\n                                        + rememberMe.getName()\n                                        + \" whose value is: \"\n                                        + rememberMe.getValue()\n                                        + \"<br/>\");\n            }\n        } catch (java.security.NoSuchAlgorithmException e) {\n            System.out.println(\"Problem executing SecureRandom.nextFloat() - TestCase\");\n            throw new ServletException(e);\n        }\n        response.getWriter()\n                .println(\"Weak Randomness Test SecureRandom.nextFloat() executed\");\n    }\n}", "exampleID": 756, "dataset": "random", "filepath": "/Users/xxx/repos/active_learning_interface/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00504.java"}]