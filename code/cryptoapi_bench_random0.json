[{"url": "https://raw.githubusercontent.com/CryptoAPI-Bench/CryptoAPI-Bench/master/src/main/java/org/cryptoapi/bench/untrustedprng/UntrustedPRNGCase1.java", "rawCode": "public class UntrustedPRNGCase1 {\n    public static void main(String [] args)\n    {\n        Random random = new Random();\n        PBEParameterSpec pbeParamSpec = null;\n        byte[] salt = new byte[32];\n        random.nextBytes(salt);\n        int count = 10020;\n        pbeParamSpec = new PBEParameterSpec(salt, count);\n    }\n\n\n\n}", "exampleID": 1, "dataset": "random", "filepath": "/Users/xxx/repos/active_learning_interface/CryptoAPI-Bench/src/main/java/org/cryptoapi/bench/untrustedprng/UntrustedPRNGCase1.java"}, {"url": "https://raw.githubusercontent.com/CryptoAPI-Bench/CryptoAPI-Bench/master/src/main/java/org/cryptoapi/bench/credentialinstring/CredentialInStringCorrected.java", "rawCode": "public class CredentialInStringCorrected {\n    public static void main(String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, IOException, IllegalBlockSizeException, BadPaddingException, ClassNotFoundException {\n        SecureRandom random = new SecureRandom();\n        byte [] keyBytes = new byte[16];\n        random.nextBytes(keyBytes);\n        SecretKeySpec keySpec = new SecretKeySpec(keyBytes, \"AES\");\n\n        String originalString = \"Testing\";\n        \n        Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5PADDING\");\n        cipher.init(Cipher.ENCRYPT_MODE, keySpec);\n        String encrypt = Base64.getEncoder().encodeToString(cipher.doFinal(originalString.getBytes(\"UTF-8\")));\n        System.out.println(encrypt);\n\n    }\n}", "exampleID": 11, "dataset": "random", "filepath": "/Users/xxx/repos/active_learning_interface/CryptoAPI-Bench/src/main/java/org/cryptoapi/bench/credentialinstring/CredentialInStringCorrected.java"}, {"url": "https://raw.githubusercontent.com/CryptoAPI-Bench/CryptoAPI-Bench/master/src/main/java/org/cryptoapi/bench/pbeiteration/LessThan1000IterationPBEABMC1.java", "rawCode": "public class LessThan1000IterationPBEABMC1 {\n    public void go(int count) {\n        SecureRandom random = new SecureRandom();\n        PBEParameterSpec pbeParamSpec = null;\n        byte[] salt = new byte[32];\n        random.nextBytes(salt);\n\n        pbeParamSpec = new PBEParameterSpec(salt, count);\n    }\n}", "exampleID": 20, "dataset": "random", "filepath": "/Users/xxx/repos/active_learning_interface/CryptoAPI-Bench/src/main/java/org/cryptoapi/bench/pbeiteration/LessThan1000IterationPBEABMC1.java"}, {"url": "https://raw.githubusercontent.com/CryptoAPI-Bench/CryptoAPI-Bench/master/src/main/java/org/cryptoapi/bench/staticinitializationvector/StaticInitializationVectorABPSCase1.java", "rawCode": "public class StaticInitializationVectorABPSCase1 {\n    public void go(int choice) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException {\n        KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\n        SecretKey key = keyGen.generateKey();\n        Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n        SecureRandom sr = new SecureRandom();\n\n        byte [] bytes = \"abcde\".getBytes();\n\n        if(choice>1){\n            bytes = new byte[16];\n            sr.nextBytes(bytes);\n        }\n\n        IvParameterSpec ivSpec = new IvParameterSpec(bytes);\n\n        cipher.init(Cipher.ENCRYPT_MODE,key,ivSpec);\n    }\n\n    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException {\n        StaticInitializationVectorABPSCase1 siv = new StaticInitializationVectorABPSCase1();\n        int choice = 2;\n        siv.go(choice);\n    }\n\n}", "exampleID": 26, "dataset": "random", "filepath": "/Users/xxx/repos/active_learning_interface/CryptoAPI-Bench/src/main/java/org/cryptoapi/bench/staticinitializationvector/StaticInitializationVectorABPSCase1.java"}, {"url": "https://raw.githubusercontent.com/CryptoAPI-Bench/CryptoAPI-Bench/master/src/main/java/org/cryptoapi/bench/staticinitializationvector/StaticInitializationVectorCorrected.java", "rawCode": "public class StaticInitializationVectorCorrected {\n    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException {\n        KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\n        SecretKey key = keyGen.generateKey();\n        Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n\n        SecureRandom sr = new SecureRandom();\n\n        BigInteger i = BigInteger.valueOf(sr.nextInt());\n        byte [] bytes = i.toByteArray();\n        IvParameterSpec ivSpec = new IvParameterSpec(bytes);\n\n        cipher.init(Cipher.ENCRYPT_MODE,key,ivSpec);\n    }\n\n    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException {\n        StaticInitializationVectorCorrected siv = new StaticInitializationVectorCorrected();\n        siv.go();\n    }\n}\n*/\n\npublic class StaticInitializationVectorCorrected {\n    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException {\n        KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\n        SecretKey key = keyGen.generateKey();\n        Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n\n        SecureRandom sr = new SecureRandom();\n\n        byte [] bytes = new byte[16];\n        sr.nextBytes(bytes);\n\n        IvParameterSpec ivSpec = new IvParameterSpec(bytes);\n\n        cipher.init(Cipher.ENCRYPT_MODE,key,ivSpec);\n    }\n\n    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException {\n        StaticInitializationVectorCorrected siv = new StaticInitializationVectorCorrected();\n        siv.go();\n    }\n}", "exampleID": 27, "dataset": "random", "filepath": "/Users/xxx/repos/active_learning_interface/CryptoAPI-Bench/src/main/java/org/cryptoapi/bench/staticinitializationvector/StaticInitializationVectorCorrected.java"}, {"url": "https://raw.githubusercontent.com/CryptoAPI-Bench/CryptoAPI-Bench/master/src/main/java/org/cryptoapi/bench/predictablepbepassword/PredictablePBEPasswordABPSCase1.java", "rawCode": "public class PredictablePBEPasswordABPSCase1 {\n    private PBEKeySpec pbeKeySpec = null;\n    private PBEParameterSpec pbeParamSpec = null;\n\n    public static void main(String [] args){\n        PredictablePBEPasswordABPSCase1 ckp = new PredictablePBEPasswordABPSCase1();\n        int choice=2;\n        ckp.key(choice);\n    }\n    public void key(int choice) {\n        String defaultKey = \"saagar\";\n        if (choice>1){\n            SecureRandom random = new SecureRandom();\n            defaultKey = String.valueOf(random.ints());\n        }\n        byte [] salt = new byte[16];\n        SecureRandom sr = new SecureRandom();\n        sr.nextBytes(salt);\n        int iterationCount = 11010;\n        int keyLength = 16;\n        pbeKeySpec = new PBEKeySpec(defaultKey.toCharArray(),salt,iterationCount,keyLength);\n    }\n}", "exampleID": 30, "dataset": "random", "filepath": "/Users/xxx/repos/active_learning_interface/CryptoAPI-Bench/src/main/java/org/cryptoapi/bench/predictablepbepassword/PredictablePBEPasswordABPSCase1.java"}, {"url": "https://raw.githubusercontent.com/CryptoAPI-Bench/CryptoAPI-Bench/master/src/main/java/org/cryptoapi/bench/predictablepbepassword/PredictablePBEPasswordCorrected.java", "rawCode": "public class PredictablePBEPasswordCorrected {\n    private PBEKeySpec pbeKeySpec = null;\n    private PBEParameterSpec pbeParamSpec = null;\n\n    public static void main(String [] args){\n        PredictablePBEPasswordCorrected ckp = new PredictablePBEPasswordCorrected();\n        ckp.key();\n    }\n    public void key() {\n        SecureRandom random = new SecureRandom();\n        String password = String.valueOf(random.ints());\n        byte [] salt = new byte[16];\n        random.nextBytes(salt);\n        int iterationCount = 11010;\n        int keyLength = 16;\n        pbeKeySpec = new PBEKeySpec(password.toCharArray(),salt,iterationCount,keyLength);\n    }\n}", "exampleID": 35, "dataset": "random", "filepath": "/Users/xxx/repos/active_learning_interface/CryptoAPI-Bench/src/main/java/org/cryptoapi/bench/predictablepbepassword/PredictablePBEPasswordCorrected.java"}, {"url": "https://raw.githubusercontent.com/CryptoAPI-Bench/CryptoAPI-Bench/master/src/main/java/org/cryptoapi/bench/predictablepbepassword/PredictablePBEPasswordABSCase1.java", "rawCode": "public class PredictablePBEPasswordABSCase1 {\n    CryptoPredictablePBE crypto;\n    public PredictablePBEPasswordABSCase1(){\n        String password = \"sagar\";\n        crypto = new CryptoPredictablePBE(password);\n        crypto.method1(\"\");\n    }\n}\n\n\nclass CryptoPredictablePBE {\n    String defPassword;\n    private PBEKeySpec pbeKeySpec = null;\n    private PBEParameterSpec pbeParamSpec = null;\n\n    public CryptoPredictablePBE(String password){\n\n        defPassword = password;\n    }\n\n    public void method1(String passedPassword) {\n\n        if(passedPassword.isEmpty()){\n            passedPassword = defPassword;\n        }\n        byte [] salt = new byte[16];\n        SecureRandom sr = new SecureRandom();\n        sr.nextBytes(salt);\n        int iterationCount = 11010;\n        int keyLength = 16;\n        pbeKeySpec = new PBEKeySpec(passedPassword.toCharArray(),salt,iterationCount,keyLength);\n    }\n}", "exampleID": 36, "dataset": "random", "filepath": "/Users/xxx/repos/active_learning_interface/CryptoAPI-Bench/src/main/java/org/cryptoapi/bench/predictablepbepassword/PredictablePBEPasswordABSCase1.java"}, {"url": "https://raw.githubusercontent.com/CryptoAPI-Bench/CryptoAPI-Bench/master/src/main/java/org/cryptoapi/bench/predictablepbepassword/PredictablePBEPasswordBBCase1.java", "rawCode": "public class PredictablePBEPasswordBBCase1 {\n    private PBEKeySpec pbeKeySpec = null;\n    private PBEParameterSpec pbeParamSpec = null;\n\n    public static void main(String [] args){\n        PredictablePBEPasswordBBCase1 ckp = new PredictablePBEPasswordBBCase1();\n        ckp.key();\n    }\n    public void key() {\n        String defaultKey = \"saagar\";\n        byte [] salt = new byte[16];\n        SecureRandom sr = new SecureRandom();\n        sr.nextBytes(salt);\n        int iterationCount = 11010;\n        int keyLength = 16;\n        pbeKeySpec = new PBEKeySpec(defaultKey.toCharArray(),salt,iterationCount,keyLength);\n    }\n\n}", "exampleID": 39, "dataset": "random", "filepath": "/Users/xxx/repos/active_learning_interface/CryptoAPI-Bench/src/main/java/org/cryptoapi/bench/predictablepbepassword/PredictablePBEPasswordBBCase1.java"}, {"url": "https://raw.githubusercontent.com/CryptoAPI-Bench/CryptoAPI-Bench/master/src/main/java/org/cryptoapi/bench/predictableseeds/PredictableSeedsBBCase2.java", "rawCode": "public class PredictableSeedsBBCase2 {\n    public static void main (String [] args){\n        byte seed = 100;\n        SecureRandom sr = new SecureRandom(new byte[]{seed});\n        int v = sr.nextInt();\n        System.out.println(v);\n    }\n}", "exampleID": 43, "dataset": "random", "filepath": "/Users/xxx/repos/active_learning_interface/CryptoAPI-Bench/src/main/java/org/cryptoapi/bench/predictableseeds/PredictableSeedsBBCase2.java"}, {"url": "https://raw.githubusercontent.com/CryptoAPI-Bench/CryptoAPI-Bench/master/src/main/java/org/cryptoapi/bench/predictableseeds/PredictableSeedsABMC2.java", "rawCode": "public class PredictableSeedsABMC2 {\n    public void go(byte seed) {\n        SecureRandom sr = new SecureRandom(new byte[]{seed});\n        int v = sr.nextInt();\n        System.out.println(v);\n    }\n}", "exampleID": 44, "dataset": "random", "filepath": "/Users/xxx/repos/active_learning_interface/CryptoAPI-Bench/src/main/java/org/cryptoapi/bench/predictableseeds/PredictableSeedsABMC2.java"}, {"url": "https://raw.githubusercontent.com/CryptoAPI-Bench/CryptoAPI-Bench/master/src/main/java/org/cryptoapi/bench/predictableseeds/PredictableSeedsABICase6.java", "rawCode": "public class PredictableSeedsABICase6 {\n    public static void main (String [] args){\n        byte seed = 100;\n        method1(seed);\n    }\n    public static void method1(byte s) {\n        byte seed2 = s;\n        method2(seed2);\n    }\n\n    private static void method2(byte seed) {\n        SecureRandom sr = new SecureRandom(new byte[]{seed});\n        int v = sr.nextInt();\n        System.out.println(v);\n    }\n}", "exampleID": 45, "dataset": "random", "filepath": "/Users/xxx/repos/active_learning_interface/CryptoAPI-Bench/src/main/java/org/cryptoapi/bench/predictableseeds/PredictableSeedsABICase6.java"}, {"url": "https://raw.githubusercontent.com/CryptoAPI-Bench/CryptoAPI-Bench/master/src/main/java/org/cryptoapi/bench/predictableseeds/PredictableSeedsABICase4.java", "rawCode": "public class PredictableSeedsABICase4 {\n    public static final String DEFAULT_SEED = \"100\";\n    private static char[] SEED;\n    private static char[] seed;\n    public static void main (String [] args){\n        go2();\n        go3();\n        go();\n\n    }\n\n    private static void go2(){\n        SEED = DEFAULT_SEED.toCharArray();\n    }\n    private static void go3(){\n        seed = SEED;\n    }\n\n    private static void go() {\n        SecureRandom sr = new SecureRandom(new byte[]{Byte.parseByte(seed.toString())});\n        int v = sr.nextInt();\n        System.out.println(v);\n    }\n}", "exampleID": 50, "dataset": "random", "filepath": "/Users/xxx/repos/active_learning_interface/CryptoAPI-Bench/src/main/java/org/cryptoapi/bench/predictableseeds/PredictableSeedsABICase4.java"}, {"url": "https://raw.githubusercontent.com/CryptoAPI-Bench/CryptoAPI-Bench/master/src/main/java/org/cryptoapi/bench/predictableseeds/PredictableSeedsCorrected.java", "rawCode": "public class PredictableSeedsCorrected {\n    public static void main (String [] args){\n        SecureRandom sr = new SecureRandom();\n        long l = sr.nextLong();\n        sr.setSeed(l);\n        int v = sr.nextInt();\n        System.out.println(v);\n    }\n}", "exampleID": 51, "dataset": "random", "filepath": "/Users/xxx/repos/active_learning_interface/CryptoAPI-Bench/src/main/java/org/cryptoapi/bench/predictableseeds/PredictableSeedsCorrected.java"}, {"url": "https://raw.githubusercontent.com/CryptoAPI-Bench/CryptoAPI-Bench/master/src/main/java/org/cryptoapi/bench/predictableseeds/PredictableSeedsABHCase2.java", "rawCode": "public class PredictableSeedsABHCase2 {\n    public static void main (String [] args){\n        Map<String,Byte> hm = new HashMap<String, Byte>();\n        hm.put(\"aaa\", new Byte((byte) 100));\n        hm.put(\"bbb\", new Byte((byte) 200));\n        hm.put(\"ccc\", new Byte((byte) 300));\n        hm.put(\"ddd\", new Byte((byte) 400));\n\n        byte b = hm.get(\"aaa\");\n        byte [] seed = {b,b};\n        SecureRandom sr = new SecureRandom();\n\n        sr.setSeed(seed);\n        int v = sr.nextInt();\n        System.out.println(v);\n    }\n}", "exampleID": 52, "dataset": "random", "filepath": "/Users/xxx/repos/active_learning_interface/CryptoAPI-Bench/src/main/java/org/cryptoapi/bench/predictableseeds/PredictableSeedsABHCase2.java"}, {"url": "https://raw.githubusercontent.com/CryptoAPI-Bench/CryptoAPI-Bench/master/src/main/java/org/cryptoapi/bench/predictableseeds/PredictableSeedsBBCase1.java", "rawCode": "public class PredictableSeedsBBCase1 {\n\n    public static void main (String [] args){\n        SecureRandom sr = new SecureRandom();\n        byte [] keyBytes = {(byte) 100, (byte) 200};\n        sr.setSeed(keyBytes);\n        //sr.setSeed(456789L); // Noncompliant\n        int v = sr.nextInt();\n        System.out.println(v);\n    }\n}", "exampleID": 55, "dataset": "random", "filepath": "/Users/xxx/repos/active_learning_interface/CryptoAPI-Bench/src/main/java/org/cryptoapi/bench/predictableseeds/PredictableSeedsBBCase1.java"}, {"url": "https://raw.githubusercontent.com/CryptoAPI-Bench/CryptoAPI-Bench/master/src/main/java/org/cryptoapi/bench/predictableseeds/PredictableSeedsABHCase4.java", "rawCode": "public class PredictableSeedsABHCase4 {\n    public static void main (String [] args){\n        //byte seed = 100;\n        SecureRandom random = new SecureRandom();\n        String str = String.valueOf(random.ints());\n        byte[] seed = str.getBytes();\n\n        Map<String,Byte> hm = new HashMap<String, Byte>();\n        hm.put(\"aaa\", new Byte((byte) 100));\n        hm.put(\"bbb\", new Byte((byte) 200));\n        hm.put(\"ccc\", new Byte((byte) 300));\n        hm.put(\"ddd\", new Byte((byte) 400));\n\n        byte b = hm.get(\"aaa\");\n\n        SecureRandom sr = new SecureRandom(new byte[]{b});\n        int v = sr.nextInt();\n        System.out.println(v);\n    }\n\n}", "exampleID": 56, "dataset": "random", "filepath": "/Users/xxx/repos/active_learning_interface/CryptoAPI-Bench/src/main/java/org/cryptoapi/bench/predictableseeds/PredictableSeedsABHCase4.java"}, {"url": "https://raw.githubusercontent.com/CryptoAPI-Bench/CryptoAPI-Bench/master/src/main/java/org/cryptoapi/bench/predictableseeds/PredictableSeedsABICase2.java", "rawCode": "public class PredictableSeedsABICase2 {\n    public static void main (String [] args){\n        byte seed = 100;\n        go(seed);\n    }\n\n    private static void go(byte seed) {\n        SecureRandom sr = new SecureRandom(new byte[]{seed});\n        int v = sr.nextInt();\n        System.out.println(v);\n    }\n}", "exampleID": 57, "dataset": "random", "filepath": "/Users/xxx/repos/active_learning_interface/CryptoAPI-Bench/src/main/java/org/cryptoapi/bench/predictableseeds/PredictableSeedsABICase2.java"}]